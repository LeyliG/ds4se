▁/* ---------------- -- ---------------- ---------------- ---------------- ▁* ▁us 1864 . c ▁- ▁Unit ▁Test s ▁for ▁User ▁S tory ▁ 1864 ▁- ▁E nable ▁Token ▁Auth ▁mode ▁in ▁server ▁* ▁* ▁March , ▁2015 ▁* ▁* ▁Copy right ▁( c ) ▁2015 , ▁2016 ▁by ▁ cisco ▁System s , ▁Inc . ▁* ▁All ▁rights ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁< s td io . h > ▁# if ndef ▁WI N 32 ▁# include ▁< uni s td . h > ▁# endif ▁# include ▁< est . h > ▁# include ▁< curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁< openssl / ssl . h > ▁# if def ▁HAV E _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# include ▁< errno . h > ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁# define ▁US 1864_ TCP _ PORT ▁ 29001 ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁the ng ▁* ▁using ▁cat ▁on ▁the ▁rsa . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁rsa : 2048 ▁- key out ▁rsa key . pem ▁- key form ▁PEM ▁- out ▁rsa . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 1864_ PKCS 10_ RSA 2048 ▁" MIIC v TCCAa U CAQAw e DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE j AQ BgNVBAoMC VJ TQW Nl cn Rj bz EM MA oGA 1 UEC wwD cnN h MR AwDgYDV QQD \ nDA dy c 2 EgZG 9 lMR o wGA YJKoZIhvcNAQkBFg ty c 2 FA ZG 9 lL m Nvb T CCASIwDQYJKoZI \ n hvcNAQEBBQADgg EPADCCAQoCggEBA N 6 pC TB rK 7 T 0 29 Bg a nq 0 QH XH y NL 8 op v xc 7 JY \ n Xa Qz 39 R 3 J 9 BoB E 72 XZ 0 QX sB tU EY GNh HOL a IS ASN zs 2 ZK Wp vM HJ W mP YN t 39 OC i 48 Y \ n FO gL Db An 83 mA OK S fc ML bi bC cs h 4 HO l haa F rWs kRT A sew 16 MU Oz Fu 6 vB kw / A hI 82 J \ nK PY ws 0 dY Ox uW FI gE 1 HL + m / gpl bz q 7 Fr B Id rq k NL + dd gy Xo Dd 5 Nu LM JG DAK 7 vB 1 Ww \ n 9/ B aw /6 Ai 9 V 5 psy e 1 v 8 fW Dr 6 HW 2 gg 9 X n VtM wB 4 pC g 1 rl 1 l SY stum T GY bM 6 c xJ yw e \ nL uM nD jj 1 Zw D sZ 1 wI Xa BA XZa x EIS / rX OX 0 H nZ MT ef xY / gp Fk 1 Kv 0 CAwEAAa AAMA 0 G \ n CS qGS Ib 3 DQEBBQUA A 4 IBAQB 6 r Iw Nj E 8 l 8 jF KR 1 hQ / q eS ve e / bAQ a 58 Ru fZ 4 US Ku K \ nl s ih 7 UC f 8 b kQ vg lj nh sc Qu cz Ibn Jz eq EP qS d no mF W 6 Cv Mc / ah + Qf X 87 F GY xJ gp wF \ nut nU if j Di Zh rW gf / jN Nb tH rke cw / Z ex 4 sZ / HC 127 j tE 3 c yE kD srA 1 oB xYR Cq 93 tC \ nW 2 q 9 PL Vm Ll yjc Z cS 1 KH VD 2 ny a 79 kfS 0 YG Mo cs w 1 G elV L 2 iz / oca yA S 5 GB 9 Y 2 s EB w \ nR kC aY Zw 6 v hj 5 qj pC U zJ 3 E 8 Cl 3 VD 4 Kp i 3 j 3 bZGD JA 9 md md 8 j 5 Zy PY 56 e Au xa rWs sD \ nc i UM / h 6 E 99 w 3 tm r UZ b Ll jk jJ 7 pBX Rn ont gm 5 WZ mQ FH 4 X " ▁# define ▁US 1864_ PKCS 10_ 4096 _ REQ ▁" MIIE Z jCCA k 4 CAQAw IT EP MA 0 GA 1 UEAww G S kp U ZXN 0 MQ 4 w DAY D V Q Q F EwU wM DA w MTC C \ n Ai I wDQYJKoZI hvcNAQEBBQADgg IP A DCCA go Cg g I BA L f LlH x qz Ob i K WD f X 8 sa Z 4 l 3 \ n 1 J y rCP 4 xm yQ it Y 2 p I IG lL vH T 7 t 1 WZ 0 LO 9 u o 0 uB 7 b /8 iG b Xk i 8 F g qS m 1 j RO e 5 lw CN \ nD Ih TJ dG 4 b 7 0 5 c 6 X m D 3 M h 43 6 De 9 d 4 g z p j ed A 2 q ur SI 9+ GV N V gU 0 Z OWJ Fu 9 g + y 3 i R H \ n df s jO 9 u 0 E 2 Mf ZW WR 8 M 72 g B qz vb DD PN 4 B D w La 9 T kQ 2 R s xf 3 h 2 d 7 b N 2 DNS h NS YX / d E \ n IX 89 d 9 uC 6 F eg s HQ xH IN U O d Z z e An 3 yu QM BU + F wo h El 9 Ub 8 Qu 9 gu b 2 M JU r YN R Q ni i 7 \ n d u v q 5 / Uj khj NW zI h 7 LA b d a M +0 w S m Ce 0 ju + wK ba y UZ Z k rq o VK 6 b WZ z F s 4 dY t n 95/ S \ n VV Ov 9 5 MD 5 D 1 E ok Xw 3 I ih 7 G RJ yg t W n 5 e 4 / YO 68 L ON BF 7 UE 24 vg Bw E ie F 6 J 0 b FA l x w \ n 15 s 7 p I alk GF 7 CU bit Rhb B 3 kT j G fU DR 8 Y p S sKd q x HN mW B XY 7 Z Vk 4 T 8 K 7 16 8 c NW SOL \ net Zp Tk 4 B to U JBn WP 8 Uq 38 YO i 6 3 89 U 24 gm ZtG p S p J E E t D y 1 MJ 8 Ha 4 P ZE / Vk F t mU W q \ nb E TO x 2 ku b G wc 9 v X v W f i 5 B x E 2 V ve t GN s y 2 EQ E Z P V w sc Y a Cy 0 / yO 3 fu 0 6 co E tr 7 Ek r \ ng ap D DE z V ti P 9 N Pe 5 q 18 A zu + T 9 n go Ox 3 Pq rCP G 1 B D N 6 z 1 Ue 2 t S Dd Ox KN FM NM wq YI n \ nZ P 9 M X h + tz 8 RaK v sc lv 9 J AgMBAAGg AD ANBgkq hk iG 9 w 0 BAQUFA A O CA gEA JM wZ 4 I UB \ n US H 5 wQ Bf s Y T 4 S x tK sZ t v un 6 QX 0 +7 j NM tz zQ U Oq O 79 Kx / D Kp zs Kx L N vH Km Fq c xA 7 g \ ng bE w Xk AP 5 + V a MD 92 D g h c Nj X Oq GK cl Zd m Gj 2 o RE qZ wz v T DR o 4 zP 1 yen 5 vg L / Yz 7 S A \ n xz e 8 wP g 2 W hlV 9+ q v k VC p HN 3 E U If O + rBg i 2 re o / vF 7 x q 5 CA U 4 U t Q 1 h 4 g Hax 6 7 Y ww 8 \ n J my py GG a 0 ad 0 Z 8 ru i cl I / Qt lu AD Ux y 1 YM 0 Up 2 FC 0 s 7 j 72 xz r Rp El 1 f P lO i / b Fa Zp \ n s r 4 z ll O pw nR d xv ff XO 7 gXt X VI r 4 I HV HN W j 6 km D z y k 0 ov at 2 M s 5 a G U c MD N 6 J m 8 KI B \ n N B V H 5 F g k B V QOP S ng kw n EO j 0 R sa K SxT 5 E fmO xm 9 pC r AE 3 r N d V O g O 4 t 8 wZ 6 DQ Uq y e / \ n BU d m gXt W o G s KI g 8 o R 5 HA W BER 8 yw / qd i Rl B G g N / PK Zd p mYI 2 TE fZ vp / n Xw G 7 Q Lj G x \ n s j 5 TW e R KN gg hUC u 3 uF +1 s 0 R + g q gY 1 S 9 G g iD S if L 7+ h + b X J 4 nc y R G q + XP n r f Mi Rk B \ n eS yv 3 ky Ix t Z f AB 6 T jk Ub t V f o 2 Kr fq N x u 4 lb JY E 2 b 6 h s 1 L 6 t 7 YP h ju bz 9 a ES 7 w ES 7 \ nk + Z Z PZ n / k / G s q Up s WH n EF E v i 5 C 5 WP r n pv V N 6 rK h 0 f B + Au kGr S + 9 EK 4 KN ZW f V / y f 8 \ nX N 5 qW yO t g d 4 oL UU s g F DJ s q N h 6 A 1 ml mx 6 C nY =\ n " ▁# define ▁US 1864_ ENROLL _ URL _ BA ▁" http s ://127.0.0.1: 29001 / . well - known / est / simpleenroll " ▁# define ▁US 1864_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 1864_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁# if ndef ▁WI N 32 ▁# define ▁US 1864_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 1864_ CACERT ▁" CA / estCA / cacert . crt " ▁# define ▁US 1864_ TRUSTED _ CERT ▁" CA / trustedcerts . crt " ▁# define ▁US 1864_ SERVER _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1864_ SERVER _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# else ▁# define ▁US 1864_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 1864_ CACERT ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 1864_ TRUSTED _ CERT ▁" CA \\ trustedcerts . crt " ▁# define ▁US 1864_ SERVER _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1864_ SERVER _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# endif ▁/* ▁* ▁curl _ data _ cb ▁is ▁passed ▁to ▁Curl ▁and ▁will ▁be ▁called ▁from ▁Curl ▁when ever ▁data ▁* ▁has ▁been ▁received , ▁or ▁if ▁this ▁function ▁has ▁been ▁specified ▁to ▁retrieve ▁the ▁* ▁http ▁headers . ▁In ▁this ▁test ▁it ' s ▁used ▁to ▁retrieve ▁the ▁http ▁headers ▁and ▁* ▁look ▁for ▁the ▁" bearer " ▁token ▁Authorization ▁challenge . ▁*/ ▁static ▁int ▁bearer _ found ▁= ▁0; ▁static ▁size _ t ▁curl _ data _ cb ▁( void ▁* ptr , ▁size _ t ▁size , ▁size _ t ▁nmemb , ▁void ▁* user data ) ▁{ ▁void ▁* ▁rc ; ▁if ▁( bearer _ found ▁== ▁0) ▁{ ▁/* ▁* ▁WARNING : ▁ strstr ▁can ▁be ▁da nger ous ▁because ▁it ▁assume s ▁null ▁terminated ▁* ▁strings . ▁In ▁this ▁case ▁the ▁http ▁headers ▁ca me ▁from ▁EST ▁server ▁and ▁we ▁* ▁know ▁they ▁are ▁null ▁terminated ▁*/ ▁rc ▁= ▁ strstr ( ptr , ▁" W WW - Authenticate : ▁Bearer "); ▁if ▁( rc ) ▁{ ▁bearer _ found ▁= ▁1; ▁} ▁} ▁return ▁size ▁* ▁nmemb ; ▁} ▁static ▁void ▁us 1864_ clean ▁( void ) ▁{ ▁} ▁static ▁int ▁us 1864_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ; ▁rv ▁= ▁st _ start ( US 1864_ TCP _ PORT , ▁US 1864_ SERVER _ CERT , ▁US 1864_ SERVER _ KEY , ▁" US 1864 ▁test ▁realm ", ▁US 1864_ CACERTS , ▁US 1864_ TRUSTED _ CERT , ▁" CA / est Example CA . cnf ", ▁manual _ enroll , ▁0, ▁nid ); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁ resources ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1864_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 1864_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁< = ▁0) ▁{ ▁return ▁1; ▁} ▁us 1864_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 1864_ start _ server (0, ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁ resources ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1864_ destroy _ suite ▁( void ) ▁{ ▁st _ stop (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁/* ▁* ▁est _ server _ set _ auth _ mode () ▁- ▁ unit ▁test ▁* ▁* ▁First , ▁Test ▁the ▁parameters ▁of ▁est _ server _ set _ auth _ mode () ▁*/ ▁static ▁void ▁us 1864_ test 1 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁EST _ ERROR ▁est _ rv ; ▁LOG _ FUNC _ NM ▁ ; ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 1864_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁ Read ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ internal ()); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 1864_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁ Read ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ internal ()); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 1864_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁init ▁EST ▁in ▁server ▁mode ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ server _ init ( cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁x , ▁priv _ key ); ▁CU _ ASSERT ( ctx ▁ != ▁NULL ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ NONE ); ▁CU _ ASSERT ( est _ rv ▁== ▁EST _ ERR _ BAD _ MODE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ BASIC ); ▁CU _ ASSERT ( est _ rv ▁== ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ DIGEST ); ▁CU _ ASSERT ( est _ rv ▁== ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ TOKEN ); ▁CU _ ASSERT ( est _ rv ▁== ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁0 xf fffffff ); ▁CU _ ASSERT ( est _ rv ▁== ▁EST _ ERR _ BAD _ MODE ); ▁/* ▁* ▁Make ▁sure ▁we ▁don ' t ▁allow ▁ DIGEST ▁mode ▁when ▁in ▁FIPS ▁mode ▁*/ ▁FIPS _ mode _ set (1); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ DIGEST ); ▁CU _ ASSERT ( est _ rv ▁== ▁EST _ ERR _ BAD _ MODE ); ▁FIPS _ mode _ set (0); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁est _ destroy ( ctx ); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁Token ▁Auth ▁Mode ▁* ▁* ▁The ▁go al ▁of ▁this ▁test ▁is ▁to ▁verify ▁that ▁the ▁EST ▁server ▁responds ▁with ▁the ▁* ▁correct ▁auth ▁challenge ▁when ▁it ' s ▁configured ▁for ▁Token ▁Auth ▁mode . ▁It ▁will ▁* ▁first ▁perform ▁a ▁ sanity ▁check ▁by ▁perform ing ▁an ▁HTTP ▁Basic ▁request ▁while ▁the ▁* ▁server ▁is ▁st ill ▁in ▁its ▁default ▁mode ▁of ▁HTTP ▁Basic ▁auth . ▁The ▁test ▁will ▁then ▁* ▁configure ▁the ▁server ▁for ▁Token ▁Auth ▁mode ▁and ▁issue ▁a ▁request ▁that ▁does ▁not ▁* ▁contain ▁any ▁auth ▁header . ▁This ▁should ▁force ▁the ▁server ▁to ▁respond ▁with ▁a ▁* ▁token ▁auth ▁challenge ▁header . ▁*/ ▁static ▁void ▁us 1864_ test 2 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁rv ▁= ▁curl _ http _ post ( US 1864_ ENROLL _ URL _ BA , ▁US 1864_ PKCS 10_ CT , ▁US 1864_ PKCS 10_ RSA 2048, ▁US 1864_ UIDPWD _ GOOD , ▁US 1864_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁specify ▁BASIC ▁and ▁the ▁server ▁is ▁st ill ▁in ▁BASIC ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁== ▁200 ); ▁/* ▁* ▁S witch ▁the ▁server ▁over ▁to ▁Token ▁mode . ▁* ▁* ▁NOTE : ▁I ▁see ▁this ▁being ▁done ▁in ▁numer ous ▁places , ▁and ▁it ' s ▁ probab ly ▁safe ▁* ▁in ▁a ▁test ▁setting , ▁but ▁it ▁is ▁da nger ous ▁to ▁change ▁this ▁on ▁the ▁fly ▁in ▁an ▁* ▁operational ▁setting . ▁Also ▁note , ▁no ▁return ▁code ▁for ▁any ▁of ▁these ▁* ▁set / enable ▁functions . ▁*/ ▁st _ enable _ http _ token _ auth (); ▁bearer _ found ▁= ▁0; ▁rv ▁= ▁curl _ http _ post _ cert _ write ( US 1864_ ENROLL _ URL _ BA , ▁US 1864_ PKCS 10_ CT , ▁US 1864_ PKCS 10_ RSA 2048, ▁US 1864_ CLIENT _ CERT , ▁US 1864_ CLIENT _ KEY , ▁US 1864_ CACERTS , ▁curl _ data _ cb , ▁curl _ data _ cb ); ▁/* ▁* ▁S ince ▁we ▁changed ▁auth ▁mode s ▁on ▁the ▁server ▁we ▁expect ▁this ▁to ▁now ▁* ▁fail . ▁We ' re ▁not ▁ca p tur ing ▁the ▁actual ▁auth ▁challenge ▁we ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁== ▁401 ); ▁CU _ ASSERT ( bearer _ found ▁== ▁1); ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 1864_ add _ suite ▁( void ) ▁{ ▁# if def ▁HAV E _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 1864_ cfg _ tok _ auth ", ▁us 1864_ init _ suite , ▁us 1864_ destroy _ suite ); ▁if ▁( NULL ▁== ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁if ▁( ( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Check ▁ parms ", ▁us 1864_ test 1)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Attempt ▁enroll ▁- ▁BASIC ▁pass ", ▁us 1864_ test 2)) ▁ ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}