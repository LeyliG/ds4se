▁/* ---------------- -- ---------------- ---------------- ---------------- ▁* ▁us 34 96 . c ▁- ▁Unit ▁Test s ▁URI ▁path ▁segment ▁extension ▁support ▁* ▁* ▁March , ▁2016 ▁* ▁* ▁Copy right ▁( c ) ▁2016 ▁by ▁ cisco ▁System s , ▁Inc . ▁* ▁All ▁rights ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁< s td io . h > ▁# if ndef ▁WI N 32 ▁# include ▁< uni s td . h > ▁# endif ▁# include ▁< est . h > ▁# include ▁< curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# if def ▁HAV E _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# include ▁"../../ util / test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁"../../ src / est / est _ loc l . h " ▁extern ▁char ▁ tst _ srv r _ path _ seg _ enroll [ ] ; ▁extern ▁char ▁ tst _ srv r _ path _ seg _ auth [ ] ; ▁static ▁int ▁path _ segment _ support ; ▁/* ▁* ▁max ▁command ▁line ▁length ▁when ▁generat ing ▁system ▁commands ▁*/ ▁# define ▁EST _ UT _ MAX _ CMD _ LEN ▁256 ▁/* ▁* ▁The ▁CA ▁certificate ▁used ▁to ▁verify ▁the ▁EST ▁server . ▁Gra b ▁it ▁from ▁the ▁server ' s ▁directory ▁*/ ▁/* ▁# define ▁CLIENT _ UT _ CACERT ▁"../../ example / server / estCA / cacert . crt " ▁*/ ▁# define ▁CLIENT _ UT _ CACERT ▁" CA / estCA / cacert . crt " ▁# define ▁CLIENT _ UT _ PUBKEY ▁" . / est _ client _ ut _ keypair " ▁# define ▁US 3496_ SERVER _ PORT ▁ 29496 ▁# define ▁US 3496_ SERVER _ IP ▁"127.0.0.1" ▁# define ▁US 3496_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁# define ▁US 3496_ UID ▁" estuser " ▁# define ▁US 3496_ PWD ▁" estpwd " ▁# if ndef ▁WI N 32 ▁# define ▁US 3496_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 3496_ TRUST _ CERTS ▁" CA / trustedcerts . crt " ▁# define ▁US 3496_ SERVER _ CERTKEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# else ▁# define ▁US 3496_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 3496_ TRUST _ CERTS ▁" CA \\ trustedcerts . crt " ▁# define ▁US 3496_ SERVER _ CERTKEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁static ▁ CRI TICA L _ SE CTION ▁logger _ critical _ section ; ▁static ▁void ▁us 3496_ logger _ stderr ▁( char ▁* format , ▁va _ list ▁l ) ▁{ ▁ Enter CriticalSection (& logger _ critical _ section ); ▁vf printf ( stderr , ▁format , ▁l ); ▁f flu sh ( stderr ); ▁ Leav eCriticalSection (& logger _ critical _ section ); ▁} ▁# endif ▁# define ▁US 3496_ ENROLL _ URL _ BA ▁" http s ://127.0.0.1: 29496 / . well - known / est / cacerts - somestring / simpleenroll " ▁# define ▁US 3496_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 3496_ PKCS 10_ RSA 2048 ▁" MIIC v TCCAa U CAQAw e DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE j AQ BgNVBAoMC VJ TQW Nl cn Rj bz EM MA oGA 1 UEC wwD cnN h MR AwDgYDV QQD \ nDA dy c 2 EgZG 9 lMR o wGA YJKoZIhvcNAQkBFg ty c 2 FA ZG 9 lL m Nvb T CCASIwDQYJKoZI \ n hvcNAQEBBQADgg EPADCCAQoCggEBA N 6 pC TB rK 7 T 0 29 Bg a nq 0 QH XH y NL 8 op v xc 7 JY \ n Xa Qz 39 R 3 J 9 BoB E 72 XZ 0 QX sB tU EY GNh HOL a IS ASN zs 2 ZK Wp vM HJ W mP YN t 39 OC i 48 Y \ n FO gL Db An 83 mA OK S fc ML bi bC cs h 4 HO l haa F rWs kRT A sew 16 MU Oz Fu 6 vB kw / A hI 82 J \ nK PY ws 0 dY Ox uW FI gE 1 HL + m / gpl bz q 7 Fr B Id rq k NL + dd gy Xo Dd 5 Nu LM JG DAK 7 vB 1 Ww \ n 9/ B aw /6 Ai 9 V 5 psy e 1 v 8 fW Dr 6 HW 2 gg 9 X n VtM wB 4 pC g 1 rl 1 l SY stum T GY bM 6 c xJ yw e \ nL uM nD jj 1 Zw D sZ 1 wI Xa BA XZa x EIS / rX OX 0 H nZ MT ef xY / gp Fk 1 Kv 0 CAwEAAa AAMA 0 G \ n CS qGS Ib 3 DQEBBQUA A 4 IBAQB 6 r Iw Nj E 8 l 8 jF KR 1 hQ / q eS ve e / bAQ a 58 Ru fZ 4 US Ku K \ nl s ih 7 UC f 8 b kQ vg lj nh sc Qu cz Ibn Jz eq EP qS d no mF W 6 Cv Mc / ah + Qf X 87 F GY xJ gp wF \ nut nU if j Di Zh rW gf / jN Nb tH rke cw / Z ex 4 sZ / HC 127 j tE 3 c yE kD srA 1 oB xYR Cq 93 tC \ nW 2 q 9 PL Vm Ll yjc Z cS 1 KH VD 2 ny a 79 kfS 0 YG Mo cs w 1 G elV L 2 iz / oca yA S 5 GB 9 Y 2 s EB w \ nR kC aY Zw 6 v hj 5 qj pC U zJ 3 E 8 Cl 3 VD 4 Kp i 3 j 3 bZGD JA 9 md md 8 j 5 Zy PY 56 e Au xa rWs sD \ nc i UM / h 6 E 99 w 3 tm r UZ b Ll jk jJ 7 pBX Rn ont gm 5 WZ mQ FH 4 X " ▁static ▁int ▁client _ manual _ cert _ verify ▁( X 509 ▁* cur _ cert , ▁int ▁openssl _ cert _ error ); ▁static ▁void ▁us 3496_ clean ▁( void ) ▁{ ▁} ▁static ▁int ▁us 3496_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ; ▁rv ▁= ▁st _ start ( US 3496_ SERVER _ PORT , ▁US 3496_ SERVER _ CERTKEY , ▁US 3496_ SERVER _ CERTKEY , ▁" US 34 96 ▁test ▁realm ", ▁US 3496_ CACERTS , ▁US 3496_ TRUST _ CERTS , ▁" CA / est Example CA . cnf ", ▁manual _ enroll , ▁0, ▁nid ); ▁SL EEP (1); ▁return ▁rv ; ▁} ▁static ▁int ▁path _ seg _ supported ( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" test _ segment "); ▁if ▁( rc ▁== ▁EST _ ERR _ NONE ) ▁{ ▁return ▁1; ▁} ▁else ▁{ ▁return ▁0; ▁} ▁return ▁0; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁* ▁1 . ▁Generate ▁the ▁ keypair ▁to ▁be ▁used ▁for ▁this ▁EST ▁Client ▁ UT ▁suite ▁*/ ▁static ▁int ▁us 3496_ init _ suite ▁( void ) ▁{ ▁int ▁rv ▁= ▁0; ▁char ▁cmd [ EST _ UT _ MAX _ CMD _ LEN ] ; ▁ printf (" Start ing ▁EST ▁Client / Proxy ▁path ▁segment ▁ unit ▁tests . \ n "); ▁/* ▁* ▁check ▁to ▁see ▁if ▁path ▁segment ▁support ▁has ▁been ▁compile d ▁in ▁*/ ▁if ▁(! path _ segment _ support ) ▁{ ▁ printf (" URI ▁ Path ▁ Segment ▁is ▁not ▁supported ▁in ▁this ▁build ▁of ▁EST . ▁Re build ▁using ▁-- with - uriparser - dir ▁\ n "); ▁return ▁0; ▁} ▁/* ▁* ▁gen ▁the ▁ keypair ▁to ▁be ▁used ▁for ▁EST ▁Client ▁testing ▁*/ ▁ snprintf ( cmd , ▁EST _ UT _ MAX _ CMD _ LEN , ▁" openssl ▁ec param ▁- name ▁prime 256 v 1 ▁- gen key ▁- out ▁% s ", ▁CLIENT _ UT _ PUBKEY ); ▁ printf ("% s \ n ", ▁cmd ); ▁rv ▁= ▁system ( cmd ); ▁/* ▁* ▁start ▁the ▁server ▁for ▁the ▁tests ▁that ▁need ▁to ▁t alk ▁to ▁a ▁server ▁*/ ▁us 3496_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁*/ ▁rv ▁= ▁us 3496_ start _ server (0, ▁0); ▁SL EEP ( 2 ); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁ resources ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 3496_ destroy _ suite ▁( void ) ▁{ ▁st _ stop (); ▁return ▁0; ▁} ▁/* ▁* ▁C allback ▁function ▁passed ▁to ▁est _ client _ init () ▁*/ ▁static ▁int ▁client _ manual _ cert _ verify ▁( X 509 ▁* cur _ cert , ▁int ▁openssl _ cert _ error ) ▁{ ▁BIO ▁* bio _ err ; ▁bio _ err = BIO _ new _ fp ( stderr , BIO _ NO CLOSE ); ▁int ▁approve ▁= ▁0; ▁/* ▁* ▁ Print ▁out ▁the ▁specific s ▁of ▁this ▁cert ▁*/ ▁ printf ("% s : ▁OpenSSL / EST ▁server ▁cert ▁verification ▁failed ▁with ▁the ▁following ▁error : ▁openssl _ cert _ error ▁= ▁% d ▁(% s ) \ n ", ▁ _ _ FUNCTION _ _ , ▁openssl _ cert _ error , ▁X 509_ verify _ cert _ error _ string ( openssl _ cert _ error )); ▁ printf (" Fail ing ▁Cert :\ n "); ▁X 509_ print _ fp ( stdout , cur _ cert ); ▁/* ▁* ▁ Next ▁call ▁print s ▁out ▁the ▁signature ▁which ▁can ▁be ▁used ▁as ▁the ▁fingerprint ▁* ▁This ▁fingerprint ▁can ▁be ▁checked ▁against ▁the ▁an ticipat ed ▁value ▁to ▁determine ▁* ▁whether ▁or ▁not ▁the ▁server ' s ▁cert ▁should ▁be ▁approved . ▁*/ ▁X 509_ signature _ print ( bio _ err , ▁cur _ cert -> sig _ alg , ▁cur _ cert -> signature ); ▁if ▁( openssl _ cert _ error ▁== ▁X 509_ V _ ERR _ U NABLE _ TO _ GET _ CRL ) ▁{ ▁approve ▁= ▁1; ▁} ▁BIO _ free ( bio _ err ); ▁return ▁approve ; ▁} ▁/* ▁* ▁This ▁test ▁case ▁tests ▁the ▁set ▁server ▁with ▁valid ▁parameters , ▁* ▁ NO ▁path ▁segment ▁*/ ▁static ▁void ▁us 3496_ test 1 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁NULL ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁path ▁segment ▁that ▁is ▁valid ▁*/ ▁static ▁void ▁us 3496_ test 2 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" somestring "); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁path ▁segment ▁that ▁contains ▁2 ▁segments , ▁should ▁fail ▁*/ ▁static ▁void ▁us 3496_ test 3 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" somestring 1 / somestring 2 "); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ HTTP _ INVALID _ P ATH _ SEGMENT ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁all ▁valid ▁characters ▁*/ ▁# define ▁P ATH _ SEG _ ALL _ VALID _ CH A RS ▁" @ % 50% 4 4 % 4 2 AB C DEF G HI J K LM NO P Q RS TUV W XY Z abcdef g hij k l m no pq rs t u v w x y z 1234567890 - . _ ~ ! $ & ' () * + , ; =" ▁static ▁void ▁us 3496_ test 4 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁P ATH _ SEG _ ALL _ VALID _ CH A RS ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁path ▁segment ▁that ▁is ▁invalid . ▁invalid ▁character . ▁*/ ▁static ▁void ▁us 3496_ test 5 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" some i nvalid < string "); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ HTTP _ INVALID _ P ATH _ SEGMENT ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁path ▁segment ▁that ▁is ▁too ▁long ▁(12 9 ) ▁*/ ▁# define ▁path _ segment _ too _ long ▁" 1234567890 123456789012345 678901234567890 123456789012345 678901234567890 123456789012345 678901234567890 123456789012345 67890123456789" ▁static ▁void ▁us 3496_ test 6 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁path _ segment _ too _ long ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ HTTP _ INVALID _ P ATH _ SEGMENT ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁a ▁path ▁segment ▁that ▁is ▁equal ▁to ▁an ▁operation ▁( cacerts ) ▁*/ ▁static ▁void ▁us 3496_ test 7 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" cacerts "); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ HTTP _ INVALID _ P ATH _ SEGMENT ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁a ▁path ▁segment ▁that ▁contains ▁an ▁operation ▁( cacerts ) , ▁* ▁in ▁this ▁case ▁it ' s ▁at ▁the ▁front ▁of ▁the ▁string ▁*/ ▁static ▁void ▁us 3496_ test 8 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" cacerts - server "); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁a ▁path ▁segment ▁that ▁is ▁the ▁empty ▁string . ▁* ▁This ▁should ▁fail . ▁*/ ▁static ▁void ▁us 3496_ test 9 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" "); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ HTTP _ INVALID _ P ATH _ SEGMENT ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁a ▁path ▁segment ▁that ▁contains ▁a ▁':' . ▁* ▁This ▁should ▁pass . ▁*/ ▁static ▁void ▁us 3496_ test 10 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁" - . _ ~ : @ ! $ & ' () * + , ; =" ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁* ▁pass ▁down ▁path ▁segment ▁that ▁is ▁too ▁long ▁(12 9 ) ▁*/ ▁# define ▁path _ segment _ max ▁"123456789 01234567890 123456789012345 678901234567890 123456789012345 678901234567890 123456789012345 678901234567890 1234567890123456 7 8 " ▁static ▁void ▁us 3496_ test 11 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁/* ▁* ▁ Read ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁rc ▁= ▁est _ client _ set _ auth ( ectx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ set _ server ( ectx , ▁US 3496_ SERVER _ IP , ▁US 3496_ SERVER _ PORT , ▁path _ segment _ max ); ▁CU _ ASSERT ( rc ▁== ▁EST _ ERR _ NONE ); ▁if ▁( ectx ) ▁{ ▁est _ destroy ( ectx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 3496_ add _ suite ▁( void ) ▁{ ▁CU _ ErrorCode ▁CU _ error ; ▁# if def ▁HAV E _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 3496_ client _ proxy _ path _ seg ", ▁us 3496_ init _ suite , ▁us 3496_ destroy _ suite ); ▁if ▁( NULL ▁== ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁# if def ▁WI N 32 ▁Initialize CriticalSection ▁ (& logger _ critical _ section ); ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁& us 3496_ logger _ stderr ); ▁# endif ▁/* ▁* ▁check ▁to ▁see ▁if ▁path ▁segment ▁support ▁has ▁been ▁compile d ▁in ▁*/ ▁if ▁(! path _ seg _ supported ()) ▁{ ▁ printf (" URI ▁ Path ▁ Segment ▁is ▁not ▁supported ▁in ▁this ▁build ▁of ▁EST . ▁Re build ▁using ▁-- with - uriparser - dir = ▁\ n "); ▁path _ segment _ support ▁= ▁0; ▁return ▁0; ▁} ▁path _ segment _ support ▁= ▁1; ▁if ▁( path _ segment _ support ) ▁{ ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁/* ▁NOTE ▁- ▁OR DER ▁IS ▁ IMPORTANT ▁- ▁MUST ▁TEST ▁f read () ▁ AFTER ▁f printf () ▁*/ ▁if ▁( ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁no ▁path ▁segment ", ▁us 3496_ test 1)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁valid ▁path ▁segment ", ▁us 3496_ test 2)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁multi ▁segment ▁path ▁segment ", ▁us 3496_ test 3)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁valid ▁path ▁segment ▁- ▁all ▁valid ▁char s ", ▁us 3496_ test 4)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁invalid ▁path ▁segment ", ▁us 3496_ test 5)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁path ▁segment ▁too ▁long ", ▁us 3496_ test 6)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁path ▁segment ▁equals ▁operation ▁string ", ▁us 3496_ test 7)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁path ▁segment ▁contains ▁operation ▁string ", ▁us 3496_ test 8)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁path ▁segment ▁is ▁the ▁empty ▁string ", ▁us 3496_ test 9)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁path ▁segment ▁contains ▁a ▁colon ", ▁us 3496_ test 10)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" EST ▁Client ▁Set ▁Server : ▁correct ▁parameters , ▁path ▁segment ▁is ▁the ▁max ▁length ", ▁us 3496_ test 11)) ▁ ) ▁{ ▁CU _ error ▁= ▁CU _ get _ error (); ▁ printf ("% d \ n ", ▁CU _ error ); ▁CU _ cleanup _ registry (); ▁ printf ("% s \ n ", ▁CU _ get _ error _ msg ()); ▁return ▁CU _ get _ error (); ▁} ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}