▁/* ---------------- -- ---------------- ---------------- ---------------- ▁* ▁us 748 . c ▁- ▁Unit ▁Test s ▁for ▁User ▁S tory ▁ 748 ▁- ▁ Proxy ▁simple ▁enroll ▁* ▁* ▁August , ▁2013 ▁* ▁* ▁Copy right ▁( c ) ▁2013 , ▁2016 ▁by ▁ cisco ▁System s , ▁Inc . ▁* ▁All ▁rights ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁< s td io . h > ▁# if ndef ▁WI N 32 ▁# include ▁< uni s td . h > ▁# endif ▁# include ▁< est . h > ▁# include ▁< curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁" st _ proxy . h " ▁# include ▁< openssl / ssl . h > ▁# if def ▁HAV E _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁# define ▁US 748_ RETRY _ INTERVAL ▁3600 ▁// # define ▁US 748_ TCP _ PORT ▁ 29001 ▁# define ▁US 748_ TCP _ SERVER _ PORT ▁15 748 ▁# define ▁US 748_ TCP _ PROXY _ PORT ▁16 748 ▁# if ndef ▁WI N 32 ▁static ▁char ▁test 5 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 748/ test 5 . hdr "; ▁# define ▁US 748_ SERVER _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 748_ SERVER _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁/* ▁# define ▁US 748_ PROXY _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 748_ PROXY _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁# define ▁US 748_ PROXY _ CERT ▁" US 748/ cert . pem " ▁# define ▁US 748_ PROXY _ KEY ▁" US 748/ key . pem " ▁# define ▁US 748_ CACERT ▁" CA / estCA / cacert . crt " ▁# define ▁US 748_ TRUSTED _ CERT ▁" CA / trustedcerts . crt " ▁# else ▁static ▁char ▁test 5 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 748\\ test 5 . hdr "; ▁# define ▁US 748_ SERVER _ CERT ▁" CA \\ estCA / private \\ estserver cert and key . pem " ▁# define ▁US 748_ SERVER _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁/* ▁# define ▁US 748_ PROXY _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 748_ PROXY _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁# define ▁US 748_ PROXY _ CERT ▁" US 748\\ cert . pem " ▁# define ▁US 748_ PROXY _ KEY ▁" US 748\\ key . pem " ▁# define ▁US 748_ CACERT ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 748_ TRUSTED _ CERT ▁" CA \\ trustedcerts . crt " ▁# endif ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁then ▁* ▁using ▁cat ▁on ▁the ▁rsa . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁rsa : 2048 ▁- key out ▁rsa key . pem ▁- key form ▁PEM ▁- out ▁rsa . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 748_ PKCS 10_ RSA 2048 ▁" MIIC v TCCAa U CAQAw e DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE j AQ BgNVBAoMC VJ TQW Nl cn Rj bz EM MA oGA 1 UEC wwD cnN h MR AwDgYDV QQD \ nDA dy c 2 EgZG 9 lMR o wGA YJKoZIhvcNAQkBFg ty c 2 FA ZG 9 lL m Nvb T CCASIwDQYJKoZI \ n hvcNAQEBBQADgg EPADCCAQoCggEBA N 6 pC TB rK 7 T 0 29 Bg a nq 0 QH XH y NL 8 op v xc 7 JY \ n Xa Qz 39 R 3 J 9 BoB E 72 XZ 0 QX sB tU EY GNh HOL a IS ASN zs 2 ZK Wp vM HJ W mP YN t 39 OC i 48 Y \ n FO gL Db An 83 mA OK S fc ML bi bC cs h 4 HO l haa F rWs kRT A sew 16 MU Oz Fu 6 vB kw / A hI 82 J \ nK PY ws 0 dY Ox uW FI gE 1 HL + m / gpl bz q 7 Fr B Id rq k NL + dd gy Xo Dd 5 Nu LM JG DAK 7 vB 1 Ww \ n 9/ B aw /6 Ai 9 V 5 psy e 1 v 8 fW Dr 6 HW 2 gg 9 X n VtM wB 4 pC g 1 rl 1 l SY stum T GY bM 6 c xJ yw e \ nL uM nD jj 1 Zw D sZ 1 wI Xa BA XZa x EIS / rX OX 0 H nZ MT ef xY / gp Fk 1 Kv 0 CAwEAAa AAMA 0 G \ n CS qGS Ib 3 DQEBBQUA A 4 IBAQB 6 r Iw Nj E 8 l 8 jF KR 1 hQ / q eS ve e / bAQ a 58 Ru fZ 4 US Ku K \ nl s ih 7 UC f 8 b kQ vg lj nh sc Qu cz Ibn Jz eq EP qS d no mF W 6 Cv Mc / ah + Qf X 87 F GY xJ gp wF \ nut nU if j Di Zh rW gf / jN Nb tH rke cw / Z ex 4 sZ / HC 127 j tE 3 c yE kD srA 1 oB xYR Cq 93 tC \ nW 2 q 9 PL Vm Ll yjc Z cS 1 KH VD 2 ny a 79 kfS 0 YG Mo cs w 1 G elV L 2 iz / oca yA S 5 GB 9 Y 2 s EB w \ nR kC aY Zw 6 v hj 5 qj pC U zJ 3 E 8 Cl 3 VD 4 Kp i 3 j 3 bZGD JA 9 md md 8 j 5 Zy PY 56 e Au xa rWs sD \ nc i UM / h 6 E 99 w 3 tm r UZ b Ll jk jJ 7 pBX Rn ont gm 5 WZ mQ FH 4 X " ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁then ▁* ▁using ▁cat ▁on ▁the ▁ec . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁ec : 256 parms ▁- key out ▁eckey . pem ▁- key form ▁PEM ▁- out ▁ec . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 748_ PKCS 10_ DSA 1024 ▁" MIIC f jCCA j 0 CAQAw f DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE zA R BgNVBAoMC kRTQ U Nvb X Bhb nk xD zA N BgNVBA s MB kRTQ W 9 yZzE Q MA 4 G \ nA 1 UEAww H ZHNh IGRv ZT EaM Bg GCS qGS Ib 3 DQEJ ARY L ZHNh Q GRvZ S 5 j b 20 wgg G 2 MIIB \ nK w YHKoZIzjgEA TCCA R 4 CgYEA q If by k 7 r E AaU L IP B 1 G c HH c 0 ctx 6 g 0 dh Bf dU d OP NG \ nB SE + TP 5 UF 5 lw 8 Qm 6 o CX s tU 3 nY EJ al mMv k jF wb g vB ws 8 a JBn j 09 dD Dn 8 s pK EG cG 0 M \ nZ p qd My s 6+ b 4 QJ jq 5 Y AxE a ATV Y / 1 L / rBg GG m 1 EF Dhc /6 E zm 2 T 3 CG e Qk lw o 5 a BZQ C c \ n a I s C FQD C 1 ol BF uE + p h Ohj X AwE E 5 EP Jk RJ w KBgD + vZ + t L CT j Bz VF Nj A O 8 X / SM am wW \ no ra N f dyZ + ZC EA mYI / D 4 838 n C GA jVR Qy Db 1 q 5 a kk L yx o JX 1 YV 7 g Nba BN U y s 3 w a qd u \ nso 1 Ht uE ur 2 cb h U 5 i O eKB Wp j 6 MI Wl P dD 3 uC Ru 4 ui BF 9 XB iAN a R ID 8 CT 2 k c hh w y 4 Ok \ nF f QM uY Oz 4 e BhM Qq mA 4 GE AA KBgD u wR 7 H 3 U 4 C fu Qj We T tr I 50 M 1 T x hlV Z 3 To n RtV Ix \ n EH pu X xA ou x ATV k th J ta CBK c 0 EH i i 1 bE / kg NU g G X / Zd Fj BU b / X fp k Y s RT 3 Q R LF 0 + s \ n PZ GY / 0 T ov O 9 pK jq i w 0 C 10 le N KF bE V dl XY t Ak j X Ub H my No g 31 95/ t 7 oK XH MT 1 A / 5 p \ n hUC R oAAw CQ YHKoZIzjgEA w Mw ADA t Ah U Ah PCq QG 3 gK UU PK d wB NC mZ f z WD qj sCF Ah 0\ nz n 9 H uj lXN a TA 1 Ohj mP m cJ SxT " ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁then ▁* ▁using ▁cat ▁on ▁the ▁dsa . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁dsa : dsa parms ▁- key out ▁dsa key . pem ▁- key form ▁PEM ▁- out ▁dsa . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 748_ PKCS 10_ ECDSA 256 ▁" MIIB MTC B 2 gIBADB 4 MQswCQYDVQQGEwJ VU zE L MAkG A 1 UECAw CT kM xD DAK BgNVBA cM \ nA 1 JU U DES MB AGA 1 UECgw JR UND b 21 wYW 5 5 MQ 4 wDAYDVQQLDAVFQ 29 yZzE P MA 0 GA 1 UE \ n AwwG R UM gZG 9 l MRkwFwY JKoZIhvcNAQkBFg p lY 0 Bkb 2 U uY 29 t MF kwE wYHKoZIzj 0 C \ nAQ YI KoZIzj 0 DAQ c DQ gA EO 1 us z CK dXN Fz yg NL N eS 8 a zQ Ko d 15 16 GT 9 qd D dd t 9 i JN 4 \ nL pBT nv +7 K 7+ t ji 5 kt s 1 kW SY yv qL xv nq 8 Q / TU 1 i QJ 56 AA MAkG By qGS M 49 BA E DR wAw \ nR AIg P 6 qd a +0 TE KZ F Pop gU fwF MRs xc N mu QU e 2 y uz 1 6460 / SQ CI Bf Lv mu Me yY Oq b bD \ nX 0 If de 9 y zk RO VB CE P vK 0 h cU 5 KsT O " ▁# define ▁US 748_ PKCS 10_ CORRUPT ▁" MIIB MTC B 2 gIBADB 4 MQswCQYDVQQGEwJ VU zE L MAkG A 1 UECAw CT kM xD DAK BgNVBA cM \ nA 1 JU U DES MB AGA 1 UECgw JR UND b 21 wYW 5 5 MQ 4 wDAYDVQQLDAVFQ 39 yZzE P MA 0 GA 1 UE \ n AwwG R UM gZG 9 l MRkwFwY JKoZIhvcNAQkBFg p lY 0 Bkb 2 U uY 29 t MF kwE wYHKoZIzj 0 C \ nAQ YI KoZIzj 0 DAQ c DQ gA EO 1 us z CK dXN Fz yg NL N eS 8 a zQ Ko d 15 16 GT 9 qd D dd t 9 i JN 4 \ nL pBT nv +7 K 7+ t ji 5 kt s 1 kW SY yv qL xv nq 8 Q / TU 1 i QJ 56 AA MAkG By qGS M 49 BA E DR wAw \ nR AIg P 6 qd a +0 TE KZ F Pop gU fwF MRs xc N mu QU e 2 y uz 1 6460 / SQ CI Bf Lv mu Me yY Oq b bD \ nX 0 If de 9 y zk RO VB CE P vK 0 h cU 5 KsT O " ▁/* ▁* ▁The ▁following ▁is ▁a ▁valid ▁CSR ▁that ▁already ▁contains ▁a ▁PoP ▁* ▁ c hallengePassword . ▁This ▁was ▁collect ed ▁using ▁ estserver ▁with ▁* ▁the ▁ dump b in () ▁function . ▁This ▁CSR ▁should ▁n ever ▁work ▁since ▁* ▁the ▁PoP ▁value ▁in ▁it ▁will ▁be ▁st a le . ▁*/ ▁# define ▁US 748_ PKCS 10_ STA LE _ POP ▁" MIIB c j CB 3 A IBADA R MQ 8 wDQ YDVQQDE wZ URV NU Q 0 4 w g Z 8 wDQYJKoZI hvcNAQEBBQAD \ n gY 0 A MIG JAoGBA P D Hv rk VB 3 + r FH l + Ku I s r ZG i xld RY RD 50 S 2 vF s 8 mW 5 w WV xD S 3 x FR \ nz c K t q g 7 JU yW 8 NY OF NW X 0 oz h Ce 87 XP 2 h 7 t Up Hy H lL /8 N /8 4 zuM tAt KT LU 3 Bjg q 1 x g \ n u u 8 a 1 ht 10 w i y 8 u 2 r / uE K MhQ w pv t 56 U Y 5 p H zu q m ql O 0 ql m E + M 58 WN 49 Ih AgMBAAGg \ n IjA g Bgkq hk iG 9 w 0 BCQcxE xYR Uj dGN 1 ZUN Uw yd 2 Vu eW tM c A ow DQYJKoZIhvcNAQEF \ n BQADgYEA yen rs km fR IX c p eKB v L 3 V nW 5 N 4 Hc LT wI 9 Hc br 74 4 S W FQ aw / R + ru + U X d 2 j \ n 99 AG Br / Gv Tk T g hI NW g 2 C 7 v z GF / z h Iu G 6 Ok 9 F ti M n N r 9 hZ +5 SL Y h f S FJ b u I v 65 r WH \ nv f LR 9 N 9 M 2 Q 9 j l f 7 p 4 AY fW XD 2 qD 2 X OT Zw 2 t 4 tr G ZG K A 2 JR / O iB 40 =" ▁# define ▁US 748_ ENROLL _ URL _ BA ▁" http s ://127.0.0.1: 15 748/ . well - known / est / simpleenroll " ▁# define ▁US 748_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 748_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁# define ▁US 748_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 748_ EXPLICIT _ CERT ▁" US 748/ cert - RA . pem " ▁# define ▁US 748_ EXPLICIT _ KEY ▁" US 748/ key - RA . pem " ▁static ▁E VP _ PKEY ▁* ▁generate _ private _ key ▁( void ) ▁{ ▁RSA ▁* rsa ▁= ▁RSA _ new (); ▁B IG NUM ▁* bn ▁= ▁BN _ new (); ▁E VP _ PKEY ▁* pkey ; ▁/* ▁* ▁create ▁an ▁RSA ▁ keypair ▁and ▁assign ▁them ▁to ▁a ▁ PKEY ▁and ▁return ▁it . ▁*/ ▁BN _ set _ word ( bn , ▁0 x 1000 1); ▁RSA _ generate _ key _ ex ( rsa , ▁1024 , ▁bn , ▁NULL ); ▁pkey ▁= ▁E VP _ PKEY _ new (); ▁if ▁( pkey ▁== ▁NULL ) ▁{ ▁ printf ("\ nError ▁allocat ing ▁ PKEY ▁structure ▁for ▁new ▁key ▁pair \ n "); ▁return ▁NULL ; ▁} ▁if ▁(! E VP _ PKEY _ set 1 _ RSA ( pkey , ▁rsa )) ▁{ ▁ printf ("\ nError ▁assign ing ▁RSA ▁key ▁pair ▁to ▁ PKEY ▁structure \ n "); ▁return ▁NULL ; ▁} ▁RSA _ free ( rsa ); ▁BN _ free ( bn ); ▁return ▁( pkey ); ▁} ▁/* ▁* ▁C allback ▁function ▁passed ▁to ▁est _ client _ init () ▁*/ ▁static ▁int ▁client _ manual _ cert _ verify ▁( X 509 ▁* cur _ cert , ▁int ▁openssl _ cert _ error ) ▁{ ▁BIO ▁* ▁bio _ err ; ▁bio _ err ▁= ▁BIO _ new _ fp ( stderr , ▁BIO _ NO CLOSE ); ▁int ▁approve ▁= ▁0; ▁/* ▁* ▁ Print ▁out ▁the ▁specific s ▁of ▁this ▁cert ▁*/ ▁ printf ( ▁"% s : ▁OpenSSL / EST ▁server ▁cert ▁verification ▁failed ▁with ▁the ▁following ▁error : ▁openssl _ cert _ error ▁= ▁% d ▁(% s ) \ n ", ▁ _ _ FUNCTION _ _ , ▁openssl _ cert _ error , ▁X 509_ verify _ cert _ error _ string ( openssl _ cert _ error )); ▁ printf (" Fail ing ▁Cert :\ n "); ▁X 509_ print _ fp ( stdout , ▁cur _ cert ); ▁/* ▁* ▁ Next ▁call ▁print s ▁out ▁the ▁signature ▁which ▁can ▁be ▁used ▁as ▁the ▁fingerprint ▁* ▁This ▁fingerprint ▁can ▁be ▁checked ▁against ▁the ▁an ticipat ed ▁value ▁to ▁determine ▁* ▁whether ▁or ▁not ▁the ▁server ' s ▁cert ▁should ▁be ▁approved . ▁*/ ▁X 509_ signature _ print ( bio _ err , ▁cur _ cert -> sig _ alg , ▁cur _ cert -> signature ); ▁if ▁( openssl _ cert _ error ▁== ▁X 509_ V _ ERR _ U NABLE _ TO _ GET _ CRL ) ▁{ ▁approve ▁= ▁1; ▁} ▁BIO _ free ( bio _ err ); ▁return ▁approve ; ▁} ▁static ▁ FILE ▁* outfile ; ▁static ▁size _ t ▁write _ func ▁( void ▁* ptr , ▁size _ t ▁size , ▁size _ t ▁nmemb , ▁void ▁* user data ) ▁{ ▁size _ t ▁written ; ▁written ▁= ▁f write ( ptr , ▁size , ▁nmemb , ▁outfile ); ▁return ▁written ; ▁} ▁static ▁void ▁us 748_ clean ▁( void ) ▁{ ▁} ▁static ▁int ▁us 748_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ▁= ▁0; ▁/* ▁* ▁First ▁we ▁start ▁an ▁EST ▁server ▁ acting ▁as ▁the ▁CA ▁*/ ▁rv ▁= ▁st _ start ( US 748_ TCP _ SERVER _ PORT , ▁US 748_ SERVER _ CERT , ▁US 748_ SERVER _ KEY , ▁" estrealm ", ▁US 748_ CACERT , ▁US 748_ TRUSTED _ CERT , ▁" US 748/ est Example CA . cnf ", ▁manual _ enroll , ▁// ▁manual ▁enroll ▁0, ▁// ▁disable ▁PoP ▁nid ); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁if ▁( rv ▁ != ▁EST _ ERR _ NONE ) ▁return ▁rv ; ▁/* ▁* ▁ Next ▁we ▁start ▁an ▁EST ▁proxy ▁ acting ▁as ▁an ▁RA . ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 748_ TCP _ PROXY _ PORT , ▁US 748_ PROXY _ CERT , ▁US 748_ PROXY _ KEY , ▁" estrealm ", ▁US 748_ CACERT , ▁US 748_ TRUSTED _ CERT , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 748_ TCP _ SERVER _ PORT , ▁0, ▁// ▁disable ▁PoP ▁nid ); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁return ▁rv ; ▁} ▁void ▁us 748_ stop _ server ▁( ) ▁{ ▁st _ stop (); ▁st _ proxy _ stop (); ▁SL EEP ( 2 ); ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁ resources ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 748_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 748_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁< = ▁0) ▁{ ▁return ▁1; ▁} ▁us 748_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 748_ start _ server (0, ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁ resources ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 748_ destroy _ suite ▁( void ) ▁{ ▁us 748_ stop _ server (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁RSA ▁2048 ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁simple ▁* ▁enrollment ▁of ▁a ▁2048 ▁bit ▁RSA ▁CSR . ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁used . ▁*/ ▁static ▁void ▁us 748_ test 1 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ RSA 2048, ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁== ▁200 ); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁EC ▁prime ▁256 ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁simple ▁* ▁enrollment ▁of ▁a ▁256 ▁bit ▁EC ▁CSR . ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁used . ▁*/ ▁static ▁void ▁us 748_ test 2 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ ECDSA 256 , ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁== ▁200 ); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁ DSA ▁prime ▁1024 ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁simple ▁* ▁enrollment ▁of ▁a ▁1024 ▁bit ▁ DSA ▁CSR . ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁used . ▁*/ ▁static ▁void ▁us 748_ test 3 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ DSA 1024 , ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁== ▁200 ); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁Corrupt ed ▁PKCS 10 ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁simple ▁* ▁enrollment ▁using a ▁corrupted ▁CSR . ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁used . ▁*/ ▁static ▁void ▁us 748_ test 4 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ CORRUPT , ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁the ▁CSR ▁is ▁not ▁valid , ▁the ▁server ▁should ▁* ▁respond ▁with ▁a ▁400 . ▁*/ ▁CU _ ASSERT ( rv ▁== ▁400 ); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁manual ▁enrollment ▁* ▁* ▁This ▁test ▁case ▁verifie s ▁the ▁server ▁is ▁* ▁send ing ▁the ▁appropriate ▁retry - after ▁response . ▁*/ ▁static ▁void ▁us 748_ test 5 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁/* ▁S top ▁the ▁EST ▁server ▁*/ ▁us 748_ stop _ server (); ▁/* ▁Re start ▁the ▁server ▁with ▁manual ▁enrollment ▁enabled ▁*/ ▁us 748_ start _ server ( 1, ▁0); ▁outfile ▁= ▁f open ( test 5 _ outfile , ▁" w "); ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ RSA 2048, ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁& write _ func ); ▁f close ( outfile ); ▁/* ▁* ▁S ince ▁the ▁server ▁has n ' t ▁see n ▁this ▁CSR ▁in ▁the ▁past , ▁* ▁it ▁should ▁respond ▁with ▁a ▁retry - after ▁202 ▁response . ▁*/ ▁CU _ ASSERT ( rv ▁== ▁202 ); ▁/* ▁* ▁Verify ▁the ▁retry - after ▁value ▁ s printf ( cmd , ▁" g rep ▁Re try - After ▁% s ▁| ▁grep ▁% d ", ▁test 5 _ outfile , ▁US 748_ RETRY _ INTERVAL ); ▁rv ▁= ▁system ( cmd ); ▁*/ ▁rv ▁= ▁grep ( test 5 _ outfile , ▁" R etry - After : ▁3600 "); ▁CU _ ASSERT ( rv ▁== ▁0); ▁/* ▁* ▁We ▁will ▁a void ▁waiting ▁the ▁full ▁retry ▁period ▁since ▁we ' re ▁* ▁only ▁simulat ing ▁manual ▁enrollment . ▁W ait ▁a ▁second ▁and ▁then ▁* ▁try ▁to ▁enroll ▁the ▁cert ▁again . ▁*/ ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ RSA 2048, ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁This ▁enrollment ▁request ▁should ▁succeed ▁this ▁time ▁* ▁O ur ▁simulat ed ▁manual ▁enrollment ▁will ▁automatically ▁* ▁enroll ▁on ▁the ▁second ▁attempt . ▁*/ ▁CU _ ASSERT ( rv ▁== ▁200 ); ▁/* ▁S top ▁the ▁EST ▁server ▁*/ ▁us 748_ stop _ server (); ▁/* ▁Re start ▁the ▁server ▁with ▁manual ▁enrollment ▁disabled ▁*/ ▁us 748_ start _ server (0, ▁0); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁PoP ▁check ▁fails ▁with ▁curl ▁* ▁* ▁This ▁test ▁case ▁verifie s ▁the ▁server ▁is ▁* ▁verifying ▁the ▁PoP ▁from ▁the ▁client ▁CSR . ▁S ince ▁curl ▁does ▁not ▁* ▁set ▁the ▁PoP , ▁the ▁EST ▁enrollment ▁should ▁fail . ▁*/ ▁static ▁void ▁us 748_ test 6 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁st _ enable _ pop (); ▁/* ▁* ▁Send ▁a ▁valid ▁enroll ▁request ▁using ▁curl . ▁Curl ▁does ▁not ▁* ▁include ▁the ▁PoP ▁*/ ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ RSA 2048, ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁The ▁server ▁should ▁respond ▁with ▁a ▁failure ▁code ▁*/ ▁CU _ ASSERT ( rv ▁== ▁400 ); ▁st _ disable _ pop (); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁PoP ▁check ▁succeed s ▁with ▁est client ▁* ▁* ▁This ▁test ▁case ▁verifie s ▁the ▁proxy ▁is ▁* ▁verifying ▁the ▁PoP ▁from ▁the ▁client ▁CSR . ▁We ▁use ▁* ▁est client ▁since ▁it ▁support s ▁the ▁PoP . ▁*/ ▁static ▁void ▁us 748_ test 7 ▁( void ) ▁{ ▁long ▁rv ; ▁EST _ CTX ▁* c _ ctx ; ▁E VP _ PKEY ▁* new _ pkey ; ▁un signed ▁char ▁* pkcs 7 ; ▁int ▁pkcs 7_ len ; ▁un signed ▁char ▁* attr _ data ; ▁int ▁attr _ len ; ▁LOG _ FUNC _ NM ▁ ; ▁/* ▁* ▁This ▁test ▁case ▁requires ▁PoP ▁to ▁be ▁enabled ▁*/ ▁st _ enable _ pop (); ▁/* ▁* ▁Create ▁a ▁client ▁context ▁*/ ▁ c _ ctx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( c _ ctx ▁ != ▁NULL ); ▁if ▁(! c _ ctx ) ▁{ ▁return ; ▁} ▁/* ▁* ▁Specify ▁user ▁ID ▁and ▁password ▁since ▁the ▁server ▁is ▁running ▁* ▁in ▁Basic ▁Authentication ▁mode . ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( c _ ctx , ▁" estuser ", ▁" estpwd ", ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁== ▁EST _ ERR _ NONE ); ▁est _ client _ set _ server ( c _ ctx , ▁"127.0.0.1", ▁US 748_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁get ▁a ▁ keypair ▁to ▁be ▁used ▁in ▁the ▁enroll . ▁*/ ▁new _ pkey ▁= ▁generate _ private _ key (); ▁rv ▁= ▁est _ client _ get _ csrattrs ( c _ ctx , ▁& attr _ data , ▁& attr _ len ); ▁CU _ ASSERT ( rv ▁== ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Attempt ▁to ▁enroll ▁a ▁CSR ▁*/ ▁rv ▁= ▁est _ client _ enroll ( c _ ctx , ▁" US 748 - test 7 ▁CN ", ▁& pkcs 7_ len , ▁new _ pkey ); ▁CU _ ASSERT ( rv ▁== ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Client ▁library ▁has ▁obtained ▁the ▁new ▁client ▁certificate . ▁* ▁ Now ▁retrieve ▁it ▁from ▁the ▁library . ▁*/ ▁pkcs 7 ▁= ▁malloc ( pkcs 7_ len ); ▁if ▁(! pkcs 7 ) ▁{ ▁return ; ▁} ▁rv ▁= ▁est _ client _ copy _ enrolled _ cert ( c _ ctx , ▁pkcs 7 ); ▁CU _ ASSERT ( rv ▁== ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Clean ▁up ▁*/ ▁est _ destroy ( c _ ctx ); ▁E VP _ PKEY _ free ( new _ pkey ); ▁free ( pkcs 7 ); ▁/* ▁* ▁Disabl e ▁PoP ▁for ▁future ▁test ▁cases ▁*/ ▁st _ disable _ pop (); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁PoP ▁is ▁disabled , ▁the ▁CSR ▁contains ▁a ▁* ▁valid ▁PoP . ▁* ▁* ▁This ▁test ▁case ▁ensure s ▁the ▁server ▁can ▁handle ▁the ▁* ▁scenario ▁where ▁the ▁CSR ▁include s ▁a ▁valid ▁PoP ▁even ▁when ▁* ▁the ▁server ▁did n ' t ▁request ▁it . ▁We ▁have ▁to ▁use ▁* ▁Cisco EST ▁as ▁the ▁client ▁to ▁generate ▁a ▁CSR ▁containing ▁* ▁a ▁valid ▁PoP . ▁There ' s ▁no ▁way ▁to ▁include ▁a ▁valid ▁PoP ▁* ▁using ▁Curl ▁since ▁the ▁TLS ▁channel ▁binding ▁information ▁* ▁is ▁not ▁known ▁in ▁advance . ▁*/ ▁// The ▁following ▁include ▁should ▁n ever ▁be ▁used ▁by ▁an ▁application ▁// but ▁we ▁use ▁it ▁here ▁to ▁hack ▁the ▁EST _ CTX ▁values ▁mid - way ▁// through ▁this ▁test ▁# include ▁"../../ src / est / est _ loc l . h " ▁static ▁void ▁us 748_ test 9 ▁( void ) ▁{ ▁EST _ CTX ▁* ctx ; ▁int ▁rv ; ▁un signed ▁char ▁* cacerts ; ▁int ▁caclen ▁= ▁0; ▁E VP _ PKEY ▁* new _ pkey ; ▁un signed ▁char ▁* pkcs 7 ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁un signed ▁char ▁* attr _ data ; ▁int ▁attr _ len ; ▁LOG _ FUNC _ NM ▁ ; ▁/* ▁* ▁Make ▁sure ▁our ▁EST ▁server ▁has ▁PoP ▁disabled ▁*/ ▁st _ disable _ pop (); ▁/* ▁* ▁ Read ▁in ▁the ▁CA ▁certs ▁*/ ▁caclen ▁= ▁read _ binary _ file ( US 748_ CACERTS , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Init ▁the ▁client ▁context ▁*/ ▁ctx ▁= ▁est _ client _ init ( cacerts , ▁caclen , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁/* ▁* ▁We ' ll ▁use ▁simple ▁HTTP ▁auth ▁to ▁identify ▁ourselves ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( ctx , ▁" estuser ", ▁" estpwd ", ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁== ▁EST _ ERR _ NONE ); ▁est _ client _ set _ server ( ctx , ▁"127.0.0.1", ▁US 748_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁Create ▁some ▁space ▁to ▁hold ▁the ▁cert ▁and ▁generate ▁* ▁a ▁private ▁key ▁*/ ▁new _ pkey ▁= ▁generate _ private _ key (); ▁rv ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁& attr _ data , ▁& attr _ len ); ▁CU _ ASSERT ( rv ▁== ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Attempt ▁to ▁enroll ▁*/ ▁ctx -> csr _ pop _ required ▁= ▁1; ▁// This ▁is ▁a ▁hack ▁for ▁testing ▁only , ▁do ▁not ▁attempt ▁this ▁// We ▁need ▁to ▁force ▁the ▁ c hallengePassword ▁into ▁the ▁CSR ▁rv ▁= ▁est _ client _ enroll ( ctx , ▁" Test Case 9", ▁& pkcs 7_ len , ▁new _ pkey ); ▁CU _ ASSERT ( rv ▁== ▁EST _ ERR _ NONE ); ▁pkcs 7 ▁= ▁malloc ( pkcs 7_ len ); ▁rv ▁= ▁est _ client _ copy _ enrolled _ cert ( ctx , ▁pkcs 7 ); ▁free ( pkcs 7 ); ▁est _ destroy ( ctx ); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁PoP ▁is ▁disabled , ▁the ▁CSR ▁contains ▁a ▁* ▁invalid ▁PoP . ▁* ▁* ▁This ▁test ▁case ▁ensure s ▁the ▁server ▁can ▁handle ▁the ▁* ▁scenario ▁where ▁the ▁CSR ▁include s ▁an ▁invalid ▁PoP ▁even ▁when ▁* ▁the ▁server ▁did n ' t ▁request ▁it . ▁*/ ▁static ▁void ▁us 748_ test 10 ▁( void ) ▁{ ▁long ▁rv ; ▁LOG _ FUNC _ NM ▁ ; ▁/* ▁* ▁Make ▁sure ▁our ▁EST ▁server ▁has ▁PoP ▁disabled ▁*/ ▁st _ disable _ pop (); ▁rv ▁= ▁curl _ http _ post ( US 748_ ENROLL _ URL _ BA , ▁US 748_ PKCS 10_ CT , ▁US 748_ PKCS 10_ STA LE _ POP , ▁US 748_ UIDPWD _ GOOD , ▁US 748_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁The ▁enroll ▁request ▁should ▁fail ▁since ▁the ▁PoP ▁was ▁invalid ▁* ▁We ▁expect ▁a ▁400 ▁response . ▁*/ ▁CU _ ASSERT ( rv ▁== ▁400 ); ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 748_ add _ suite ▁( void ) ▁{ ▁# if def ▁HAV E _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 748_ srv _ simp enroll ", ▁us 748_ init _ suite , ▁us 748_ destroy _ suite ); ▁if ▁( NULL ▁== ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁if ▁( ( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁RSA ▁cert ", ▁us 748_ test 1)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁ ECDSA ▁cert ", ▁us 748_ test 2)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁ DSA ▁cert ", ▁us 748_ test 3)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁corrupted ▁ ECDSA ▁cert ", ▁us 748_ test 4)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁retry - after ▁manual ▁approval ▁" , ▁us 748_ test 5)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁PoP ▁fail ▁with ▁Curl ", ▁us 748_ test 6)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁PoP ▁succeed ▁with ▁est client ", ▁us 748_ test 7)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁w / PoP ▁disabled , ▁CSR ▁include s ▁valid ▁PoP ", ▁us 748_ test 9)) ▁|| ▁( NULL ▁== ▁CU _ add _ test ( pSuite , ▁" Enroll ▁w / PoP ▁disabled , ▁CSR ▁include s ▁invalid ▁PoP ", ▁us 748_ test 10)) ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}