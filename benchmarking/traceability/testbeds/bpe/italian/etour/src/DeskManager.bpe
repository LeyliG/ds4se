▁ ï»¿ p ackage ▁unisa . gps . etour . gui ; ▁import ▁java . awt . Dimension ; ▁import ▁java . awt . Point ; ▁import ▁java . awt . Rectangle ; ▁import ▁java . awt . event . ActionEvent ; ▁import ▁java . awt . event . ActionListener ; ▁import ▁java . bean s . Property VetoException ; ▁import ▁java . util . Iterator ; ▁import ▁java . util . Vector ; ▁import ▁java x . swing . Default DesktopManager ; ▁import ▁java x . swing . ImageIcon ; ▁import ▁java x . swing . JComponent ; ▁import ▁java x . swing . JDesktopPane ; ▁import ▁java x . swing . JInternalFrame ; ▁import ▁java x . swing . JMenuItem ; ▁import ▁java x . swing . JPopupMenu ; ▁import ▁unisa . gps . etour . gui . operatoreagenzia . I Scheda ; ▁/ ▁** ▁* ▁Class ▁for ▁handl ing ▁custom ▁internal ▁frame ▁inserted ▁in ▁a ▁* ▁JDesktopPane . ▁* ▁* ▁@ ▁Version ▁0.1 ▁* ▁@ ▁Auth or ▁M ario ▁Ga llo ▁* ▁* ▁ Â© ▁ 2007 ▁eTour ▁Project ▁- ▁Copy right ▁by ▁DMI ▁SE ▁@ ▁ SA ▁Lab ▁-- ▁* ▁University ▁of ▁Salerno ▁* ▁/ ▁public ▁class ▁DeskManager ▁ext ends ▁Default DesktopManager ▁( ▁private ▁static ▁final ▁String ▁ URL _ IMAGES ▁= ▁"/ ▁unisa ▁/ ▁ gps ▁/ ▁eTour ▁/ ▁gui ▁/ ▁images ▁/ "; ▁private ▁ JPopupMenu ▁deskMenu ; ▁private ▁ JMenuItem ▁riduciTutti ; ▁private ▁ JMenuItem ▁ripristinaTutti ; ▁private ▁ JMenuItem ▁Closeall ; ▁private ▁Vector ▁< JInternalFrame > ▁iconifiedFrames ; ▁private ▁int ▁location X ; ▁private ▁int ▁locationY ; ▁/ ▁** ▁* ▁Default ▁Constructor . ▁* ▁/ ▁public ▁DeskManager ▁() ▁( ▁super ▁(); ▁iconifiedFrames ▁= ▁< JInternalFrame > ▁new ▁Vector ▁(); ▁initialize DeskMenu ▁(); ▁location X ▁= ▁0; ▁locationY ▁= ▁ -1; ▁) ▁/ ▁** ▁* ▁Manage s ▁the ▁move ment ▁of ▁JInternalFrame ▁inside ▁the ▁area ▁of ▁* ▁JDesktopPane , ▁prevent ing ▁the ▁frames ▁are ▁ br o ught ▁out ▁of ▁the ▁visible ▁area . ▁* ▁* ▁@ ▁Param ▁java x . swing . JComponent ▁ AComponent ▁- ▁the ▁component ▁of ▁which ▁* ▁Manage ▁the ▁move . ▁* ▁@ ▁Param ▁int ▁ x ▁- ▁ x ▁c ordinate ▁the ▁point ▁whe re ▁it ▁was ▁ moved ▁* ▁Component . ▁* ▁@ ▁Param ▁int ▁ y ▁- ▁ y ▁c ordinate ▁the ▁point ▁whe re ▁it ▁was ▁ moved ▁* ▁Component . ▁* ▁/ ▁public ▁void ▁d rag Frame ▁( AComponent ▁ JComponent , ▁int ▁ x , ▁int ▁ y ) ▁( ▁if ▁( AComponent ▁instance of ▁JInternalFrame ) ▁( ▁JInternalFrame ▁frame ▁= ▁( JInternalFrame ) ▁ AComponent ; ▁if ▁( frame . is Icon ▁()) ▁( ▁ x ▁= ▁frame . get Location ▁() . ▁ x ; ▁ y ▁= ▁frame . get Location ▁() . ▁ y ; ▁) ▁else ▁( ▁JDesktopPane ▁desk ▁frame . get DesktopPane ▁= ▁(); ▁Dimension ▁d ▁= ▁desk . get Size ▁(); ▁if ▁( x ▁<0) ▁( ▁ x ▁= ▁0; ▁) ▁else ▁( ▁if ▁( x ▁+ ▁frame . getW idth ▁() > ▁d . width ) ▁( ▁ x ▁= ▁d . width ▁- ▁frame . getW idth ▁(); ▁) ▁) ▁if ▁( y ▁<0) ▁( ▁ y ▁= ▁0; ▁) ▁else ▁( ▁if ▁( y ▁+ ▁frame . getH eight ▁() > ▁d . height ) ▁( ▁ y ▁= ▁d . height ▁- ▁frame . getH eight ▁(); ▁) ▁) ▁) ▁) ▁super . d rag Frame ▁( AComponent , ▁ x , ▁ y ); ▁) ▁/ ▁** ▁* ▁ Custom ize ▁the ▁action ▁of ▁ reduc ing ▁the ▁JInternalFrame ▁an ▁icon , ▁creating ▁* ▁ Click able ▁bar s ▁on ▁the ▁bottom ▁of ▁JDesktopPane . ▁* ▁* ▁@ ▁Param ▁JInternalFrame ▁frame ▁- ▁a ▁frame ▁inside ▁a ▁* ▁JDesktopPane . ▁* ▁/ ▁public ▁void ▁iconify Frame ▁( JInternalFrame ▁frame ) ▁( ▁TR Y ▁( ▁JDesktopPane ▁desk ▁frame . get DesktopPane ▁= ▁(); ▁Dimension ▁d ▁= ▁desk . get Size ▁(); ▁frame . set Clos able ▁( false ); ▁frame . setMaxim izable ▁( true ); ▁frame . se tIconifi able ▁( false ); ▁ Rectangle ▁features ; ▁if ▁( frame . is M aximum ▁()) ▁( ▁features ▁frame . get Norm al Bounds ▁= ▁(); ▁) ▁else ▁features ▁frame . get Bounds ▁= ▁(); ▁frame . setSize ▁(200 , ▁30 ); ▁ setP revious Bounds ▁( frame , ▁features ); ▁if ▁( iconifiedFrames . isEmpty ▁()) ▁( ▁location X ▁= ▁0; ▁) ▁else ▁( ▁location X ▁+ ▁= ▁200 ; ▁) ▁if ▁( locationY ▁== ▁-1) ▁( ▁locationY ▁d . height ▁= ▁- ▁30; ▁) ▁if ▁( location X ▁+ ▁200 > ▁d . width ) ▁( ▁location X ▁= ▁0; ▁locationY ▁- = ▁30; ▁) ▁frame . setLocation ▁( location X , ▁locationY ); ▁frame . s etRes izable ▁( false ); ▁iconifiedFrames . add ▁( frame ); ▁) ▁catch ▁( Exception ▁ex ) ▁( ▁ex . printStackTrace ▁(); ▁) ▁) ▁/ ▁** ▁* ▁Re s to re ▁the ▁frame ▁from ▁the ▁effect ▁of ▁minimi z ing , ▁reset ting ▁the ▁* ▁ Position ▁and ▁size ▁it ▁ha d ▁before . ▁* ▁* ▁@ ▁Param ▁java x . swing . JInternalFrame ▁frame ▁- ▁a ▁frame ▁inside ▁a ▁* ▁JDesktopPane . ▁* ▁/ ▁public ▁void ▁deiconify Frame ▁( JInternalFrame ▁frame ) ▁( ▁TR Y ▁( ▁JDesktopPane ▁desk ▁frame . get DesktopPane ▁= ▁(); ▁Dimension ▁deskSize ▁= ▁desk . get Size ▁(); ▁iconifiedFrames . remove ▁( frame ); ▁ Rectangle ▁features ▁getP revious Bounds ▁= ▁( frame ); ▁if ▁( caratteristiche . width > ▁deskSize . width ) ▁( ▁caratteristiche . width ▁= ▁deskSize . width ; ▁caratteristiche . x ▁= ▁0; ▁) ▁if ▁( caratteristiche . width ▁+ ▁caratteristiche . x > ▁deskSize . width ) ▁( ▁caratteristiche . x ▁= ▁( deskSize . width ▁- ▁caratteristiche . width ) ▁/ ▁2 ; ▁) ▁if ▁( caratteristiche . height > ▁deskSize . height ) ▁( ▁caratteristiche . height ▁= ▁deskSize . height ; ▁caratteristiche . y ▁= ▁0; ▁) ▁if ▁( caratteristiche . height ▁+ ▁caratteristiche . y > ▁deskSize . height ) ▁( ▁caratteristiche . y ▁= ▁( deskSize . height ▁- ▁caratteristiche . height ) ▁/ ▁2 ; ▁) ▁frame . setSize ▁( caratteristiche . width , ▁caratteristiche . height ); ▁frame . setLocation ▁( caratteristiche . x , ▁caratteristiche . y ); ▁frame . se tIconifi able ▁( true ); ▁frame . set Clos able ▁( true ); ▁if ▁( frame ▁instance of ▁IScheda ) ▁( ▁frame . setMaxim izable ▁( false ); ▁frame . s etRes izable ▁( false ); ▁) ▁else ▁( ▁frame . setMaxim izable ▁( true ); ▁frame . s etRes izable ▁( true ); ▁) ▁location X ▁- = ▁200 ; ▁if ▁( location X ▁<0) ▁( ▁location X ▁= ▁deskSize . width ▁/ ▁200 ▁- ▁200 ; ▁if ▁( locationY ! ▁= ▁deskSize . height ▁- ▁30) ▁( ▁locationY ▁- = ▁30; ▁) ▁) ▁repaint I conifiedFrames ▁( desk ); ▁) ▁catch ▁( Exception ▁ex ) ▁( ▁ex . printStackTrace ▁(); ▁) ▁) ▁/ ▁** ▁* ▁Return ▁the ▁focus ▁to ▁a ▁selected ▁frame , ▁and , ▁if ▁the ▁frame ▁* ▁Is ▁icon if ic ato , ▁the ▁d eiconifica . ▁* ▁* ▁@ ▁Param ▁JInternalFrame ▁frame ▁- ▁a ▁frame ▁within ▁a ▁* ▁JDesktopPane ▁* ▁/ ▁public ▁void ▁activate Frame ▁( JInternalFrame ▁frame ) ▁( ▁TR Y ▁( ▁if ▁( frame . is Icon ▁()) ▁frame . setIcon ▁( false ); ▁frame . setSelected ▁( true ); ▁super . activate Frame ▁( frame ); ▁) ▁catch ▁( Property VetoException ▁s ) ▁( ▁e . printStackTrace ▁(); ▁) ▁) ▁/ ▁** ▁* ▁ Center ▁the ▁frame ▁supplied ▁as ▁a ▁parameter ▁in ▁JDesktopPane . ▁* ▁* ▁@ ▁Param ▁java x . swing . JInternalFrame ▁frame ▁- ▁a ▁frame ▁inside ▁a ▁* ▁JDesktopPane . ▁* ▁@ ▁Return ▁void ▁* ▁/ ▁public ▁void ▁center Frame ▁( JInternalFrame ▁frame ) ▁( ▁JDesktopPane ▁desk ▁frame . get DesktopPane ▁= ▁(); ▁Dimension ▁d ▁= ▁desk . get Size ▁(); ▁F ▁= ▁Dimension ▁frame . get Size ▁(); ▁frame . setLocation ▁( d . width ▁/ ▁2 ▁- ▁f . width ▁/ ▁2, ▁d . height ▁/ ▁2 ▁- ▁f . height ▁/ ▁2 ); ▁) ▁/ ▁** ▁* ▁Redraw ▁the ▁frames ▁in ▁the ▁desktop ▁iconificati ▁bread ▁provided . ▁* ▁* ▁@ ▁Param ▁java x . swing . JDesktopPane ▁Desk ▁- ▁a ▁desktop ▁bread ▁associated ▁with ▁a ▁* ▁Desk ▁manager . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁was ▁supplied ▁as ▁a ▁parameter ▁* ▁JDesktopPane ▁which ▁is ▁not ▁associated ▁with ▁a ▁Desk ▁Manager . ▁* ▁/ ▁public ▁void ▁repaint I conifiedFrames ▁( JDesktopPane ▁desk ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( desk . get DesktopManager ▁()! ▁= ▁this ) ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" I ▁found ▁no ▁object " ▁+ ▁" Type ▁DeskManager ▁associated "); ▁< JInternalFrame > ▁I conificati ▁= ▁iconifiedFrames . iterator ▁iterator ▁(); ▁int ▁i ▁= ▁0; ▁int ▁xLocation ; ▁int ▁yLocation ▁= ▁desk . getH eight ▁() ▁- ▁30; ▁while ▁( i conificati . hasNext ▁()) ▁( ▁Current ▁= ▁iconificati . next ▁JInternalFrame ▁(); ▁xLocation ▁= ▁200 ▁* ▁i ; ▁if ▁( xLocation ▁+ ▁200 > ▁= ▁desk . getW idth ▁()) ▁( ▁xLocation ▁= ▁0; ▁yLocation ▁- = ▁30; ▁i ▁= ▁0; ▁) ▁corrente . setLocation ▁( xLocation , ▁yLocation ); ▁i ▁+ ▁+ ; ▁) ▁) ▁/ ▁** ▁* ▁Redraw ▁( and ▁ re size ▁if ▁necessary ) ▁all ▁the ▁frames ▁contain ed ▁in ▁a ▁* ▁Si nc e ▁JDesktopPane . ▁* ▁* ▁@ ▁Param ▁java x . swing . JDesktopPane ▁Desk ▁- ▁a ▁desktop ▁pane . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁if ▁the ▁desktop ▁bread ▁supp ly ▁is ▁not ▁* ▁Associated ▁with ▁a ▁desktop ▁manager ▁l ike ▁DeskManager . ▁* ▁/ ▁public ▁void ▁repaint All Frames ▁( JDesktopPane ▁desk ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( desk . get DesktopManager ▁()! ▁= ▁this ) ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" I ▁found ▁no ▁object " ▁+ ▁" Type ▁DeskManager ▁associated "); ▁JInternalFrame ▁[] ▁frames ▁= ▁desk . getAll Frames ▁(); ▁Dimension ▁deskSize ▁= ▁desk . get Size ▁(); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< frames . length ▁i ▁+ ▁+) ▁( ▁JInternalFrame ▁current ▁= ▁frames ▁[ i ]; ▁if ▁(! ▁corrente . is Icon ▁()) ▁( ▁ Rectangle ▁frameBounds ▁= ▁corrente . get Bounds ▁(); ▁if ▁( frameBounds . width > ▁deskSize . width ) ▁frameBounds . width ▁= ▁deskSize . width ; ▁if ▁( frameBounds . height > ▁deskSize . height ) ▁frameBounds . height ▁= ▁deskSize . height ; ▁if ▁( frameBounds . x ▁+ ▁frameBounds . width > ▁deskSize . width ) ▁frameBounds . x ▁= ▁deskSize . width ▁- ▁frameBounds . width ; ▁if ▁( frameBounds . y ▁+ ▁frameBounds . height > ▁deskSize . height ) ▁frameBounds . y ▁= ▁deskSize . height ▁- ▁frameBounds . height ; ▁corrente . setBounds ▁( frameBounds ); ▁) ▁) ▁repaint I conifiedFrames ▁( desk ); ▁) ▁/ ▁** ▁* ▁Open ▁a ▁frame ▁of ▁the ▁class ▁specified ▁us ing ▁the ▁display ▁* ▁W ate r f all . ▁I f ▁you ▁al read y ▁have ▁a ▁frame ▁of ▁classe s ▁given , ▁the ▁frame ▁is ▁* ▁Activate d . ▁* ▁* ▁@ ▁Param ▁class ▁class ▁- ▁a ▁class ▁type ▁that ▁ext ends ▁JInternalFrame . ▁* ▁@ ▁Param ▁java x . swing . JDesktopPane ▁Desk ▁- ▁a ▁desktop ▁pane . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁The ▁class ▁provided ▁is ▁not ▁a ▁* ▁JInternalFrame . ▁* ▁/ ▁public ▁void ▁open Frame ▁( Class ▁class , ▁JDesktopPane ▁desk ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( class e . getSup er class ▁()! ▁= ▁JInternalFrame . class ) ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁class ▁provided ▁input ▁has " ▁+ ▁" A s ▁a ▁superclass ▁java x . swing . JInternalFrame . "); ▁TR Y ▁( ▁JInternalFrame ▁[] ▁frames ▁= ▁desk . getAll Frames ▁(); ▁int ▁i ; ▁for ▁( i ▁= ▁0; ▁i ▁< frames . length ▁i ▁+ ▁+) ▁if ▁( frames ▁[ i ]. ▁getClass ▁() . ▁equals ▁( class )) ▁brea k ; ▁if ▁( i ▁== ▁frames . length ) ▁( ▁JInternalFrame ▁new ▁= ▁( JInternalFrame ) ▁classe . new Instance ▁(); ▁desk . add ▁( new , ▁Integer . MA X _ VALUE ); ▁Dimension ▁frameSize ▁= ▁nuovo . g etPreferredSize ▁(); ▁nuovo . setSize ▁( frame Size ); ▁Dimension ▁deskSize ▁= ▁desk . get Size ▁(); ▁ PosNuovo ▁Point ▁= ▁new ▁Point ▁( 10, ▁10 ); ▁for ▁( i ▁= ▁frames . length ▁- ▁1, ▁i > ▁= ▁0; ▁i ▁- ) ▁( ▁if ▁( frames ▁[ i ]. ▁get Location ▁() . ▁equals ▁( posNuovo )) ▁( ▁ posNuovo . x ▁= ▁frames ▁[ i ]. ▁get Location ▁() . ▁ x ▁+ ▁30; ▁ posNuovo . y ▁= ▁frames ▁[ i ]. ▁get Location ▁() . ▁ y ▁+ ▁30; ▁) ▁) ▁if ▁( ( posNuovo . x ▁+ ▁frameSize . width > ▁deskSize . width ) ▁| ▁| ▁( PosNuovo . y ▁+ ▁frameSize . height > ▁deskSize . height )) ▁center Frame ▁( new ); ▁else ▁nuovo . setLocation ▁( posNuovo ); ▁nuovo . setVisible ▁( true ); ▁) ▁else ▁( ▁activate Frame ▁( frames ▁[ i ]); ▁) ▁) ▁catch ▁( Exception ▁ex ) ▁( ▁ex . printStackTrace ▁(); ▁) ▁) ▁/ ▁** ▁* ▁Display s ▁a ▁popup ▁menu ▁with ▁options ▁for ▁frames ▁of ▁a ▁desktop ▁bread ▁* ▁The ▁selected ▁location . ▁* ▁* ▁@ ▁Param ▁java . awt . Point ▁Pointe ▁- ▁the ▁point ▁whe re ▁to ▁place ▁the ▁menu . ▁* ▁@ ▁Param ▁java x . swing . JDesktopPane ▁desk ▁- ▁a ▁JDesktopPane ▁which ▁& g rave ; ▁an ▁associated ▁* ▁ Instance ▁of ▁DeskManager . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁& g rave ; ▁was ▁provided ▁as ▁a ▁parameter ▁* ▁JDesktopPane ▁that ▁& g rave ; ▁not ▁associated ▁with ▁a ▁Desk ▁Manager . ▁* ▁/ ▁public ▁void ▁show P o p up Menu ▁( Point ▁Pointe , ▁JDesktopPane ▁desk ) ▁( ▁if ▁( desk . get DesktopManager ▁()! ▁= ▁this ) ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" I ▁found ▁no ▁object " ▁+ ▁" Type ▁DeskManager ▁associated "); ▁ripristinaTutti . setEnabled ▁( true ); ▁chiudi Tutti . setEnabled ▁( true ); ▁riduciTutti . setEnabled ▁( true ); ▁JInternalFrame ▁[] ▁frames ▁= ▁desk . getAll Frames ▁(); ▁if ▁( frames . length ▁== ▁0) ▁( ▁ripristinaTutti . setEnabled ▁( false ); ▁chiudi Tutti . setEnabled ▁( false ); ▁riduciTutti . setEnabled ▁( false ); ▁) ▁if ▁( iconifiedFrames . size ▁() ▁== ▁0) ▁( ▁ripristinaTutti . setEnabled ▁( false ); ▁) ▁if ▁( iconifiedFrames . size ▁() ▁== ▁frames . length ) ▁( ▁riduciTutti . setEnabled ▁( false ); ▁) ▁deskMenu . show ▁( desk , ▁a Point . x , ▁a Point . y ); ▁) ▁/ ▁** ▁* ▁D eiconifica ▁all ▁frames ▁previously ▁iconificati . ▁* ▁* ▁/ ▁public ▁void ▁deiconify All ▁() ▁( ▁if ▁( iconifiedFrames . size ▁()! ▁= ▁0) ▁( ▁< JInternalFrame > ▁Vector ▁cop y ▁= ▁( Vector ▁< JInternalFrame > ) ▁iconifiedFrames ▁ . ▁clone ▁(); ▁< JInternalFrame > ▁Frame s ▁= ▁copi a . iterator ▁iterator ▁(); ▁while ▁( frames . hasNext ▁()) ▁( ▁TR Y ▁( ▁frames . next ▁() . ▁setIcon ▁( false ); ▁) ▁catch ▁( Property VetoException ▁s ) ▁( ▁e . printStackTrace ▁(); ▁) ▁) ▁cop y ▁= ▁null ; ▁iconifiedFrames . re moveAllElements ▁(); ▁) ▁) ▁/ ▁** ▁* ▁ Min im ize ▁all ▁frames ▁of ▁a ▁JDesktopPane ▁provided ▁in ▁& g rave ; ▁an ▁associated ▁* ▁DeskManager . ▁* ▁* ▁@ ▁Param ▁JDesktopPane ▁Desk ▁- ▁a ▁desktop ▁pane . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁& g rave ; ▁was ▁provided ▁as ▁a ▁parameter ▁* ▁JDesktopPane ▁that ▁& g rave ; ▁not ▁associated ▁with ▁a ▁Desk ▁Manager . ▁* ▁/ ▁public ▁void ▁iconify All ▁( JDesktopPane ▁desk ) ▁( ▁if ▁( desk . get DesktopManager ▁()! ▁= ▁this ) ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" I ▁found ▁no ▁object " ▁+ ▁" Type ▁DeskManager ▁associated "); ▁JInternalFrame ▁[] ▁frames ▁= ▁desk . getAll Frames ▁(); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< frames . length ▁i ▁+ ▁+) ▁TR Y ▁( ▁frames ▁[ i ]. ▁setIcon ▁( true ); ▁) ▁catch ▁( Property VetoException ▁s ) ▁( ▁e . printStackTrace ▁(); ▁) ▁) ▁/ ▁** ▁* ▁Close ▁all ▁frames ▁in ▁a ▁given ▁JDesktopPane . ▁* ▁* ▁@ ▁Param ▁java x . swing . JDesktopPane ▁Desk ▁- ▁a ▁desktop ▁& g rave ; ▁bread ▁in ▁an ▁associated ▁* ▁DeskManager . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁& g rave ; ▁was ▁provided ▁as ▁a ▁parameter ▁* ▁JDesktopPane ▁that ▁& g rave ; ▁not ▁associated ▁with ▁a ▁Desk ▁Manager . ▁* ▁/ ▁public ▁void ▁closeAll ▁( JDesktopPane ▁desk ) ▁( ▁if ▁( desk . get DesktopManager ▁()! ▁= ▁this ) ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" I ▁found ▁no ▁object " ▁+ ▁" Type ▁DeskManager ▁associated "); ▁JInternalFrame ▁[] ▁frames ▁= ▁desk . getAll Frames ▁(); ▁if ▁( frames . length ! ▁= ▁0) ▁( ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< frames . length ▁i ▁+ ▁+) ▁frames ▁[ i ]. ▁dispose ▁(); ▁iconifiedFrames . re moveAllElements ▁(); ▁) ▁) ▁/ ▁** ▁* ▁Initializ e ▁the ▁ DeskMenu . ▁* ▁* ▁/ ▁public ▁void ▁initialize DeskMenu ▁() ▁( ▁deskMenu ▁= ▁new ▁ JPopupMenu ▁(); ▁riduciTutti ▁= ▁new ▁ JMenuItem ▁( ▁" Col la p se ▁All "); ▁riduciTutti . setIcon ▁( new ▁ImageIcon ▁( getClass ▁() . ▁getRe source ▁( ▁ URL _ IMAGES ▁+ ▁" reduc e All . png ▁ "))); ▁ripristinaTutti ▁= ▁new ▁ JMenuItem ▁( ▁" Reset ▁All "); ▁ripristinaTutti . setIcon ▁( new ▁ImageIcon ▁( getClass ▁() . ▁getRe source ▁( ▁ URL _ IMAGES ▁+ ▁" activate all . png ▁ "))); ▁Closeall ▁= ▁new ▁ JMenuItem ▁( ▁" Close ▁All "); ▁chiudi Tutti . setIcon ▁( new ▁ImageIcon ▁( getClass ▁() . ▁getRe source ▁( ▁ URL _ IMAGES ▁+ ▁" close all . png ▁ "))); ▁deskMenu . add ▁( rid u ci Tutti ); ▁deskMenu . addS eparator ▁(); ▁deskMenu . add ▁( ri pr is ti na Tutti ); ▁deskMenu . addS eparator ▁(); ▁deskMenu . add ▁( Close all ); ▁ActionListener ▁ menuListener ▁= ▁new ▁ActionListener ▁() ▁( ▁public ▁void ▁actionPerformed ▁( ActionEvent ▁a Event ) ▁( ▁if ▁( aEvent . get Source ▁() ▁== ▁ripristinaTutti ) ▁deiconify All ▁(); ▁if ▁( aEvent . get Source ▁() ▁== ▁Closeall ) ▁closeAll ▁( ( JDesktopPane ) ▁deskMenu . get Invoke r ▁()); ▁if ▁( aEvent . get Source ▁() ▁== ▁riduciTutti ) ▁iconify All ▁( ( JDesktopPane ) ▁deskMenu . get Invoke r ▁()); ▁) ▁ ); ▁riduciTutti . a ddActionListener ▁( menuListener ); ▁ripristinaTutti . a ddActionListener ▁( menuListener ); ▁chiudi Tutti . a ddActionListener ▁( menuListener ); ▁) ▁)