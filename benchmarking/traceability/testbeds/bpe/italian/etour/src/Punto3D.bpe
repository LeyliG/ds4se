▁ ï»¿ p ackage ▁unisa . gps . etour . util ; ▁/ ▁** ▁* ▁Bean ▁that ▁contains ▁the ▁coordinate s ▁of ▁a ▁point ▁on ▁the ▁su r f a ce ▁of ▁the ▁earth ▁" and ▁* ▁T h at ▁it ▁realiz es ▁the ▁calculat ion ▁of ▁the ▁distance ▁from ▁the ▁system . ▁The ▁values ▁of ▁* ▁Co ordinate s ▁must ▁be ▁represent ed ▁in ▁radians ▁and ▁must ▁fall ▁in ▁* ▁T a r get ▁range : ▁0 ▁to ▁greek - P i ▁/ ▁4 ▁for ▁the ▁latitude ▁s out h ▁of ▁the ▁equator ▁* ▁0 ▁to ▁+ ▁Pi ▁greek ▁/ ▁4 ▁for ▁the ▁latitude ▁n or th ▁of ▁the ▁equator ▁from ▁0 ▁to ▁Pi - g re e k ▁/ ▁* ▁2 ▁for ▁the ▁me ri dian ▁of ▁longitude ▁we st ▁of ▁Greenwitch ▁greek ▁from ▁0 ▁to ▁+ ▁Pi ▁/ ▁2 ▁* ▁For ▁the ▁me ri dian ▁of ▁longitude ▁e ast ▁of ▁Greenwitch ▁* ▁* ▁@ ▁Auth or ▁M auro ▁M ir anda ▁* ▁@ ▁Version ▁0.1 ▁ 2007 ▁eTour ▁Project ▁- ▁Copy right ▁by ▁SE ▁@ ▁ SA ▁Lab ▁DMI ▁University ▁* ▁Of ▁Salerno ▁* ▁/ ▁public ▁class ▁Punto 3 D ▁( ▁/ ▁/ ▁ Radi us ▁of ▁the ▁earth ▁final ▁double ▁ EAR TH _ RADIUS ▁= ▁63 71 . 0; ▁private ▁double ▁latitude , ▁longitude , ▁altitude ; ▁public ▁Punto 3 D ▁() ▁( ▁latitude ▁= ▁longitude ▁= ▁ height ▁= ▁0; ▁) ▁public ▁Punto 3 D ▁( double ▁pLatitudine , ▁double ▁pLongitudine , ▁double ▁pAltitudine ) ▁( ▁ N ▁= ▁pLatitudine ; ▁longitude ▁= ▁pLongitudine ; ▁altitude ▁= ▁pAltitudine ; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁latitude ▁* ▁* ▁@ ▁Return ▁* ▁/ ▁public ▁double ▁get Latitudine ▁() ▁( ▁return ▁latitude ; ▁) ▁/ ▁** ▁* ▁Set s ▁the ▁latitude ▁* ▁* ▁@ ▁Param ▁pLatitudine ▁* ▁/ ▁public ▁void ▁set Latitudine ▁( double ▁pLatitudine ) ▁( ▁this . latitudine ▁= ▁pLatitudine ; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁longitude ▁* ▁* ▁@ ▁Return ▁* ▁/ ▁public ▁double ▁get Longitudine ▁() ▁( ▁return ▁longitude ; ▁) ▁/ ▁** ▁* ▁Set s ▁the ▁longitude ▁* ▁* ▁@ ▁Param ▁pLongitudine ▁* ▁/ ▁public ▁void ▁set Longitudine ▁( double ▁pLongitudine ) ▁( ▁this . longitudine ▁= ▁pLongitudine ; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁altitude ▁* ▁* ▁@ ▁Return ▁* ▁/ ▁public ▁double ▁get Altitudine ▁() ▁( ▁return ▁altitude ; ▁) ▁/ ▁** ▁* ▁Set s ▁the ▁altitude ▁* ▁* ▁@ ▁Param ▁pAltitudine ▁* ▁/ ▁public ▁void ▁set Altitudine ▁( double ▁pAltitudine ) ▁( ▁this . al t itu di ne ▁= ▁pAltitudine ; ▁) ▁/ ▁** ▁* ▁ Calculate ▁the ▁distance ▁b etween ▁the ▁point ▁and ▁an o th er ▁point ▁given ▁as ▁argument ▁* ▁* ▁@ ▁Param ▁p ▁* ▁@ ▁Return ▁* ▁/ ▁public ▁double ▁distance ▁( Punto 3 D ▁p ) ▁( ▁double ▁ differen zaLongitudine ▁= ▁this . longitudine ▁- ▁p . longitudine ; ▁double ▁p 1 ▁= ▁Ma th . pow ▁( Ma th . cos ▁( p . latitudine ) ▁* ▁Ma th . sin ▁( differen zaLongitudine ) , ▁2 ); ▁double ▁p 2 ▁= ▁Ma th . pow ▁( Ma th . cos ▁( latitude ) ▁* ▁Ma th . sin ▁( p . latitudine ) ▁- ▁Ma th . sin ▁( latitude ) ▁* ▁Ma th . cos ▁( p . latitudine ) ▁* ▁Ma th . cos ▁( differen zaLongitudine ) , ▁2 ); ▁double ▁p 3 ▁= ▁Ma th . sin ▁( latitude ) ▁* ▁Ma th . sin ▁( p . latitudine ) ▁+ ▁Ma th . cos ▁( latitude ) ▁* ▁Ma th . cos ▁( p . latitudine ) ▁* ▁Ma th . cos ▁( differen zaLongitudine ); ▁return ▁( Ma th . ata n ▁( Ma th . s q r t ▁( p 1 ▁+ ▁p 2) ▁/ ▁p 3 ) ▁* ▁ EAR TH _ RADIUS ); ▁) ▁/ ▁** ▁* ▁Method ▁which ▁creates ▁a ▁3 D ▁point ▁from ▁coordinate s ▁me a sure d ▁in ▁degrees . ▁The ▁* ▁3 D ▁point ▁i nstead ▁represent s ▁the ▁coordinate s ▁in ▁radians ▁* ▁* ▁@ ▁Param ▁pLatitudine ▁latitude ▁in ▁degrees ▁* ▁@ ▁Param ▁pLongitudine ▁ Longitude ▁in ▁degrees ▁* ▁* ▁@ ▁Param ▁pAltitudine ▁* ▁@ ▁Return ▁Punto 3 D ▁with ▁the ▁coordinate s ▁in ▁radians ▁* ▁/ ▁public ▁static ▁Punto 3 D ▁ grad i Radi an ti ▁( double ▁pLatitudine , ▁pLongitudine ▁double , ▁double ▁pAltitudine ) ▁( ▁Punto 3 D ▁point ▁= ▁new ▁Punto 3 D ▁(); ▁punto . set Latitudine ▁( p Latitudine ▁* ▁Ma th . PI ▁/ ▁180 ); ▁punto . set Longitudine ▁( p Longitudine ▁* ▁Ma th . PI ▁/ ▁180 ); ▁punto . set Altitudine ▁( p Altitudine ); ▁return ▁point ; ▁) ▁)