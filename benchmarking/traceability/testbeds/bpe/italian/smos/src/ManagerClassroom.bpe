▁p ackage ▁smos . storage ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Iterator ; ▁import ▁java . util . Vector ; ▁import ▁smos . bean . Classroom ; ▁import ▁smos . bean . User ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . connect ionManagement . DBConnection ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁smos . utility . Utility ; ▁public ▁class ▁ ManagerClassroom ▁{ ▁/** ▁* ▁Classe ▁che ▁gesti s te ▁le ▁classi ▁dell ' i stitu to ▁* ▁@ author ▁ N icola ▁Pi santi ▁* ▁@ version ▁1.0 ▁*/ ▁private ▁static ▁ ManagerClassroom ▁instance ; ▁public ▁static ▁final ▁String ▁ TAB LE _ CLASSROOM ▁= ▁" classroom "; ▁public ▁static ▁final ▁String ▁ TAB LE _ ADDRESS ▁=" address "; ▁public ▁static ▁final ▁String ▁ TAB LE _ TEACHER _ HA S _ CLASSROOM ▁= ▁" teacher _ has _ classroom "; ▁public ▁static ▁final ▁String ▁ TAB LE _ STUDENT _ HA S _ CLASSROOM ▁= ▁" student _ has _ classroom "; ▁private ▁ ManagerClassroom (){ ▁super (); ▁} ▁/** ▁* ▁Ritorna ▁la ▁sola ▁i stanza ▁della ▁classe ▁esistente . ▁* ▁* ▁@ return ▁Ritorna ▁l ' istanza ▁della ▁classe . ▁*/ ▁public ▁static ▁sy nc hro nized ▁ ManagerClassroom ▁get Instance (){ ▁if ( instance == null ){ ▁instance ▁= ▁new ▁ ManagerClassroom (); ▁} ▁return ▁instance ; ▁} ▁/** ▁* ▁Verifica ▁se ▁la ▁classe ▁data ▁in ▁input ▁ Ã ▁ ̈ ▁nel ▁database ▁* ▁@ param ▁La ▁classe ▁di ▁cui ▁bisogn a ▁verificar e ▁l ' esistenza ▁* ▁@ return ▁true ▁se ▁la ▁classe ▁ Ã ▁ ̈ ▁nel ▁database , ▁altrimenti ▁false ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁*/ ▁public ▁sy nc hro nized ▁boolean ▁exists ▁( Classroom ▁pClassroom ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException ▁{ ▁boolean ▁result ▁= ▁false ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pClassroom . getName () ▁== ▁null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁nome ▁della ▁classe . "); ▁if ▁( pClassroom . getAcademicYear () ▁<= 1970) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' anno ▁accademico "); ▁if ▁( pClassroom . get IdAddress ()<=0) { ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' indirizzo "); ▁// l ' utente ▁inserisc e ▁l ' indirizzo , ▁viene ▁convertit o ▁in ▁idAddress ▁} ▁try ▁{ ▁// Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁W HER E ▁name ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . getName ()) ▁+ ▁" ▁ AND ▁accademic _ year ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . getAcademicYear () ▁+ ▁" ▁ AND ▁id _ address ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . get IdAddress ()) ▁ ); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁true ; ▁return ▁result ; ▁} ▁finally ▁{ ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Inserisc e ▁l ' oggetto ▁di ▁tipo ▁classe ▁nel ▁database ▁* ▁@ param ▁la ▁classe ▁da ▁inserire ▁nel ▁database ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁public ▁sy nc hro nized ▁void ▁insert ( Classroom ▁pClassroom ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁Invalid ValueException { ▁Connection ▁connect = ▁null ; ▁try { ▁// ▁controllo ▁dei ▁campi ▁obbligatori ▁if ▁( pClassroom . getName () ▁== ▁null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁nome ▁della ▁classe . "); ▁if ▁( pClassroom . getAcademicYear () ▁<= 1970) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' anno ▁accademico "); ▁if ▁( pClassroom . get IdAddress ()<=0) { ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' indirizzo "); ▁// l ' utente ▁inserisc e ▁l ' indirizzo , ▁viene ▁convertit o ▁in ▁idAddress ▁} ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect == null ) ▁throw ▁new ▁Connection Exception (); ▁// Prepar iamo ▁la ▁stringa ▁ Sql ▁String ▁sql ▁= ▁" INSER T ▁I NTO ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁( id _ address , ▁name , ▁accademic _ year ) ▁" ▁+ ▁" VALUES ▁ (" ▁+ ▁Utility . is Null ( pClassroom . get IdAddress ()) ▁+ ▁"," ▁+ ▁Utility . is Null ( pClassroom . getName ()) ▁+ ▁"," ▁+ ▁Utility . is Null ( pClassroom . getAcademicYear ()) ▁+ ▁")" ; ▁Utility . execute Operation ( connect , sql ); ▁pClassroom . setId Classroom ( ( Utility . getMax Value (" id _ classroom ", ManagerClassroom . TAB LE _ CLASSROOM ))); ▁} finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Aggiorna ▁le ▁statistiche ▁di ▁una ▁classe ▁* ▁@ param ▁La ▁classe ▁con ▁le ▁statistiche ▁aggiornat e ▁( ma ▁ID ▁identico ) ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁ Mandatory FieldException ▁*/ ▁public ▁sy nc hro nized ▁void ▁update ▁( Classroom ▁pClassroom ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException { ▁Connection ▁connect = ▁null ; ▁try { ▁if ▁( pClassroom . getId Classroom ()<=0) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁la ▁classe !" ); ▁if ▁( pClassroom . getName () ▁== ▁null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁nome ▁della ▁classe . "); ▁if ▁( pClassroom . getAcademicYear () ▁<= 1970) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' anno ▁accademico "); ▁if ▁( pClassroom . get IdAddress ()<=0) { ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' indirizzo "); ▁// l ' utente ▁inserisc e ▁l ' indirizzo , ▁viene ▁convertit o ▁in ▁idAddress ▁} ▁// Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql = ▁" UP DATE ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁SE T " ▁+ ▁" ▁id _ address ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . get IdAddress ()) ▁+ ▁" , ▁name ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . getName ()) ▁+ ▁" , ▁accademic _ year ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . getAcademicYear ()) ▁+ ▁" ▁W HER E ▁id _ classroom ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . getId Classroom ()); ▁// effettua ▁una ▁nuova ▁connessione ▁e ▁invia ▁la ▁query ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect == null ) ▁throw ▁new ▁Connection Exception (); ▁Utility . execute Operation ( connect , ▁sql ); ▁} finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Cancella ▁una ▁classe ▁dal ▁database ▁* ▁@ param ▁La ▁classe ▁da ▁cancellare ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁public ▁sy nc hro nized ▁void ▁delete ▁( Classroom ▁pClassroom ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ManagerUser . get Instance () . user On DeleteC a scade ( pUser ); ▁connect ▁= ▁DBConnection . getConnection (); ▁// Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" DE LE TE ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁W HER E ▁id _ classroom ▁= ▁" ▁+ ▁Utility . is Null ( pClassroom . getId Classroom ()); ▁Utility . execute Operation ( connect , ▁sql ); ▁} finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁public ▁sy nc hro nized ▁Collection < Classroom > ▁ getClassroomsBy Student ( User ▁pUser ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException , ▁ Mandatory FieldException { ▁Collection < Classroom > ▁result = null ; ▁Connection ▁connect ▁= ▁null ; ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁try ▁{ ▁// ▁Se ▁non ▁esiste ▁l ' utente ▁if ▁(! managerUser . exists ( pUser )) ▁throw ▁new ▁Entity N otFoundException (" L ' utente ▁non ▁esiste ! !!" ); ▁if (! managerUser . isStudent ( pUser )) ▁throw ▁new ▁Invalid ValueException (" L ' utente ▁non ▁ è ▁un o ▁studente !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁alla ▁classe ▁dell ' id ▁passato ▁*/ ▁int ▁id user = managerUser . get UserId ( pUser ); ▁String ▁tSql ▁= ▁" SELECT ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁ +".* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ STUDENT _ HA S _ CLASSROOM ▁+ ▁" , ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁W HER E ▁" ▁+ ▁ ManagerClassroom . TAB LE _ STUDENT _ HA S _ CLASSROOM ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( id user ) ▁+" ▁ AND ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+". id _ classroom ▁= ▁" ▁+ ▁ ManagerClassroom . TAB LE _ STUDENT _ HA S _ CLASSROOM ▁+". id _ classroom "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁result ▁= ▁this . loadRecord sFrom Rs ( tRs ); ▁if ( result . isEmpty ()) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁T rovare ▁Classi ▁per ▁l ' utente ▁inserito "); ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Re stituisc e ▁la ▁classe ▁che ▁ha ▁l ' ID ▁passato ▁* ▁@ param ▁L ' ID ▁della ▁classe ▁cerca ta ▁* ▁@ return ▁una ▁stringa ▁che ▁rappresenta ▁la ▁classe ▁con ▁l ' ID ▁fornito ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁public ▁sy nc hro nized ▁Classroom ▁ getClassroomBy ID ( int ▁pId ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException { ▁Classroom ▁result = null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Se ▁non ▁ Ã ▁ ̈ ▁stato ▁fornito ▁l ' id ▁restitui amo ▁un ▁codice ▁di ▁errore ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁la ▁classe !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁alla ▁classe ▁dell ' id ▁passato ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁W HER E ▁id _ classroom ▁= ▁" ▁+ ▁Utility . is Null ( pId ) ▁ ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁this . loadRecord From Rs ( tRs ); ▁else ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁l ' utente !" ); ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Re stituisc e ▁una ▁colle zione ▁di ▁classi ▁dell o ▁stess o ▁anno ▁accademico ▁*/ ▁public ▁sy nc hro nized ▁Collection < Classroom > ▁ getClassroomsBy AcademicYear ( int ▁pAcademicYear ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException { ▁Collection < Classroom > ▁result = null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Se ▁non ▁ Ã ▁ ̈ ▁stato ▁fornito ▁l ' id ▁restitui amo ▁un ▁codice ▁di ▁errore ▁if ▁( pAcademicYear ▁<= ▁ 1970) ▁throw ▁new ▁Entity N otFoundException (" Data ▁tr oppo ▁vecchia "); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁alla ▁classe ▁dell ' id ▁passato ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁W HER E ▁accademic _ year ▁= ▁" ▁+ ▁Utility . is Null ( pAcademicYear ) ▁ ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁result ▁= ▁this . loadRecord sFrom Rs ( tRs ); ▁if ( result . isEmpty ()) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁T rovare ▁Classi ▁per ▁la ▁data ▁inserita "); ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁public ▁sy nc hro nized ▁Collection < Integer > ▁getAcademicYear List () ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException { ▁Collection < Integer > ▁result = null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁alla ▁classe ▁dell ' id ▁passato ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁DI STIN CT ▁accademic _ year ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁order ▁by ▁accademic _ year ▁" ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁result ▁= ▁this . load Integer sFrom Rs ( tRs ); ▁if ( result . isEmpty ()) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁T rovare ▁Classi ▁per ▁la ▁data ▁inserita "); ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁public ▁sy nc hro nized ▁Classroom ▁ getClassroomBy User AcademicYear ( User ▁pUser , ▁int ▁pAcademicYear ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException , ▁ Mandatory FieldException { ▁Classroom ▁result ▁= ▁null ; ▁Classroom ▁temp ▁= ▁null ; ▁ ManagerClassroom ▁ managerClassroom ▁= ▁ ManagerClassroom . get Instance (); ▁Collection < Classroom > ▁list ▁= ▁null ; ▁list ▁= ▁ managerClassroom . getClassroomsBy Student ( pUser ); ▁Iterator < Classroom > ▁it ▁= ▁list . iterator (); ▁while ( it . hasNext ( )){ ▁temp ▁= ▁it . next (); ▁if ( temp . getAcademicYear ()== pAcademicYear ){ ▁result ▁= ▁temp ; ▁brea k ; ▁} ▁} ▁return ▁result ; ▁} ▁public ▁sy nc hro nized ▁Collection < Classroom > ▁getClass roomsByTeacher AcademicYear ( User ▁pUser , ▁int ▁pAcademicYear ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException , ▁ Mandatory FieldException { ▁Collection < Classroom > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁int ▁idUser ▁= ▁pUser . getId (); ▁try ▁{ ▁// ▁Se ▁non ▁ Ã ▁ ̈ ▁stato ▁fornito ▁l ' id ▁restitui amo ▁un ▁codice ▁di ▁errore ▁if ▁( pAcademicYear ▁<= ▁ 1970) ▁throw ▁new ▁Entity N otFoundException (" Data ▁tr oppo ▁vecchia "); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁DI STIN CT ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁ +".* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" , ▁" ▁+ ▁ ManagerClassroom . TAB LE _ TEACHER _ HA S _ CLASSROOM ▁+ ▁" ▁W HER E ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" . id _ classroom ▁= ▁" ▁+ ▁ ManagerClassroom . TAB LE _ TEACHER _ HA S _ CLASSROOM ▁+ ▁" . id _ classroom ▁ AND ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" . accademic _ year ▁= ▁" ▁+ ▁Utility . is Null ( pAcademicYear ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ ManagerClassroom . TAB LE _ TEACHER _ HA S _ CLASSROOM ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( idUser ) ▁ ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁result ▁= ▁this . loadRecord sFrom Rs ( tRs ); ▁if ( result . isEmpty ()) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁T rovare ▁Classi ▁per ▁l ' utente ▁e ▁l ' anno ▁inseriti "); ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁public ▁sy nc hro nized ▁Collection < Classroom > ▁getClass roomsByTeacher ( User ▁pUser ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException , ▁ Mandatory FieldException { ▁Collection < Classroom > ▁result = null ; ▁Connection ▁connect ▁= ▁null ; ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁try ▁{ ▁// ▁Se ▁non ▁esiste ▁l ' utente ▁if ▁(! managerUser . exists ( pUser )) ▁throw ▁new ▁Entity N otFoundException (" L ' utente ▁non ▁esiste ! !!" ); ▁if (! managerUser . isTeacher ( pUser )) ▁throw ▁new ▁Invalid ValueException (" L ' utente ▁non ▁ è ▁un o ▁studente !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁alla ▁classe ▁dell ' id ▁passato ▁*/ ▁int ▁id user = managerUser . get UserId ( pUser ); ▁String ▁tSql ▁= ▁" SELECT ▁DI STIN CT ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁ +".* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ TEACHER _ HA S _ CLASSROOM ▁+ ▁" , ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" ▁W HER E ▁" ▁+ ▁ ManagerClassroom . TAB LE _ TEACHER _ HA S _ CLASSROOM ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( id user ) ▁+" ▁ AND ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+". id _ classroom ▁= ▁" ▁+ ▁ ManagerClassroom . TAB LE _ TEACHER _ HA S _ CLASSROOM ▁+". id _ classroom "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁result ▁= ▁this . loadRecord sFrom Rs ( tRs ); ▁if ( result . isEmpty ()) ▁{ ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁T rovare ▁Classi ▁per ▁l ' utente ▁inserito "); ▁} ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁C On sente ▁la ▁lettura ▁di ▁un ▁intero ▁dal ▁reco d ▁result Set ▁* ▁* ▁@ param ▁pRs ▁* ▁result Set ▁* ▁@ return ▁* ▁collection < Integer > ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁private ▁Collection < Integer > ▁load Integer sFrom Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException { ▁Collection < Integer > ▁result ▁= ▁new ▁Vector < Integer >(); ▁while ( pRs . next ()) ▁{ ▁result . add ( pRs . getInt (" accademic _ year ") ); ▁} ▁return ▁result ; ▁} ▁/** ▁* ▁Con sente ▁la ▁lettura ▁di ▁un ▁ solo ▁record ▁dal ▁Result ▁Set ▁* ▁@ param ▁Il ▁result ▁set ▁da ▁cui ▁ estra rre ▁l ' oggetto ▁Classroom ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁private ▁Classroom ▁loadRecord From Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException { ▁Classroom ▁classroom ▁= ▁new ▁Classroom (); ▁classroom . setName ( pRs . getString (" name ") ); ▁classroom . s etAcademicYear ( pRs . getInt (" accademic _ year ") ); ▁classroom . setId Classroom ( pRs . getInt (" id _ classroom ") ); ▁classroom . set IdAddress ( pRs . getInt (" id _ address ") ); ▁return ▁classroom ; ▁} ▁/** ▁* ▁Con sente ▁la ▁lettura ▁di ▁un ▁pi Ã 1 ▁record ▁dal ▁Result ▁Set ▁* ▁@ param ▁Il ▁result ▁set ▁da ▁cui ▁ estra rre ▁l ' oggetto ▁Classroom ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁private ▁Collection < Classroom > ▁loadRecord sFrom Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException { ▁Collection < Classroom > ▁result ▁= ▁new ▁Vector < Classroom >(); ▁while ( pRs . next ()) ▁{ ▁result . add ( loadRecord From Rs ( pRs )); ▁} ▁return ▁result ; ▁} ▁}