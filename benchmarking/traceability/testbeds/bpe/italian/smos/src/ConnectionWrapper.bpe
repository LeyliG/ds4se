▁/* ▁* ▁Connection Wrapper ▁* ▁*/ ▁p ackage ▁smos . storage . connect ionManagement ; ▁import ▁java . io . Serializable ; ▁import ▁java . sql . C allableStatement ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . DatabaseMetaData ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . SQLException ; ▁import ▁java . sql . SQLWarning ; ▁import ▁java . sql . Savepoint ; ▁import ▁java . sql . Statement ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . Map ; ▁import ▁java . util . logging . Logger ; ▁/** ▁* ▁Connection Wrapper ▁ è ▁una ▁classe ▁che ▁aggiunge ▁a ▁tutti ▁i ▁me to di ▁della ▁classe ▁* ▁Connection ▁il ▁set t aggio ▁del ▁tempo ▁in ▁cui ▁l ' operazione ▁sull a ▁particolare ▁* ▁connessione ▁ è ▁ avvenuta ▁informa ndo ▁il ▁pool ▁di ▁quanto ▁ac caduto . ▁*/ ▁public ▁class ▁Connection Wrapper ▁implements ▁Connection , ▁Serializable ▁{ ▁private ▁static ▁final ▁long ▁s erial Version UID ▁= ▁1 L ; ▁private ▁static ▁final ▁ Logger ▁LOGGER ▁= ▁ Logger ▁ . get Logger ( Connection Wrapper . class . getName ()); ▁private ▁Connection ▁connection ; ▁private ▁Connection PoolDataSource ▁manager ; ▁private ▁ArrayList < Statement > ▁ statements ▁= ▁new ▁ArrayList < Statement >(); ▁/** ▁* ▁@ param ▁pConnection ▁* ▁@ param ▁pPoolManager ▁*/ ▁public ▁Connection Wrapper ( Connection ▁pConnection , ▁Connection PoolDataSource ▁pPoolManager ) ▁{ ▁this . connection ▁= ▁pConnection ; ▁this . manager ▁= ▁pPoolManager ; ▁LOGGER . fine (" Cre ating ▁Connection Wrapper "); ▁} ▁private ▁P reparedStatement ▁cache P reparedStatement ( P reparedStatement ▁pPrepSt ) ▁{ ▁this . manager . setLast Time ( this ); ▁this . statements . add ( p P re p S t ); ▁return ▁pPrepSt ; ▁} ▁private ▁Statement ▁cache Statement ( Statement ▁pStatement ) ▁{ ▁this . manager . setLast Time ( this ); ▁this . statements . add ( p Statement ); ▁return ▁pStatement ; ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # clear Warning s () ▁*/ ▁public ▁void ▁clear Warning s () ▁throws ▁SQLException ▁{ ▁this . connection . clear Warning s (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # close () ▁*/ ▁public ▁void ▁close () ▁throws ▁SQLException ▁{ ▁closeA ndRe lease Statement s (); ▁this . manager . release ( this ); ▁} ▁private ▁sy nc hro nized ▁void ▁closeA ndRe lease Statement s () ▁throws ▁SQLException ▁{ ▁final ▁int ▁n ▁= ▁this . statements . size (); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁n ; ▁i ++) ▁{ ▁( ( Statement ) ▁this . statements . get ( i )). close (); ▁} ▁this . statements . clear (); ▁} ▁/** ▁* ▁Close ▁the ▁wrapp ed ▁connection . ▁* ▁@ throws ▁SQLException ▁*/ ▁void ▁close Wrappe dConnection () ▁throws ▁SQLException ▁{ ▁closeA ndRe lease Statement s (); ▁if ▁(! this . connection . isClosed ()) ▁{ ▁LOGGER . fine (" Closing ▁db ▁connection : ▁" ▁+ ▁this . getClass () . getName () ▁+ ▁" ▁[ " ▁+ ▁this ▁+ ▁" ] "); ▁} ▁this . connection . close (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # comm it () ▁*/ ▁public ▁void ▁comm it () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . comm it (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # createStatement () ▁*/ ▁public ▁Statement ▁ createStatement () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache Statement ( this . connection . createStatement ()); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # createStatement ( int , ▁int ) ▁*/ ▁public ▁Statement ▁ createStatement ( int ▁pResultSet Type , ▁int ▁pResultSet Concurrency ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache Statement ( this . connection . createStatement ( pResultSet Type , ▁pResultSet Concurrency )); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # createStatement ( int , ▁int , ▁int ) ▁*/ ▁public ▁Statement ▁ createStatement ( int ▁pResultSet Type , ▁int ▁pResultSet Concurrency , ▁int ▁pResultSet Holdability ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache Statement ( this . connection . createStatement ( pResultSet Type , ▁pResultSet Concurrency , ▁pResultSet Holdability )); ▁} ▁/** ▁* ▁Close s ▁the ▁wrapp ed ▁connection . ▁*/ ▁prot ected ▁void ▁final ize () ▁throws ▁Throw able ▁{ ▁close Wrappe dConnection (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # get AutoCommit () ▁*/ ▁public ▁boolean ▁get AutoCommit () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . get AutoCommit (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # get Catalog () ▁*/ ▁public ▁String ▁get Catalog () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . get Catalog (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # get Holdability () ▁*/ ▁public ▁int ▁get Holdability () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . get Holdability (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # get MetaData () ▁*/ ▁public ▁ DatabaseMetaData ▁get MetaData () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . get MetaData (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # getT ransaction Is o lation () ▁*/ ▁public ▁int ▁getT ransaction Is o lation () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . getT ransaction Is o lation (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # get Type Map () ▁*/ ▁@ Supp ress Warning s (" un check ed ") ▁public ▁ Map ▁get Type Map () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . get Type Map (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # get Warning s () ▁*/ ▁public ▁ SQLWarning ▁get Warning s () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . get Warning s (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # isClosed () ▁*/ ▁public ▁boolean ▁ isClosed () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . isClosed (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # is ReadOnly () ▁*/ ▁public ▁boolean ▁is ReadOnly () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . is ReadOnly (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # n ative SQL ( java . lang . String ) ▁*/ ▁public ▁String ▁n ative SQL ( String ▁sql ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . n ative SQL ( sql ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Call ( java . lang . String ) ▁*/ ▁public ▁C allableStatement ▁prepare Call ( String ▁sql ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . prepare Call ( sql ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Call ( java . lang . String , ▁int , ▁int ) ▁*/ ▁public ▁C allableStatement ▁prepare Call ( String ▁pStatementSql , ▁int ▁pResultSet Type , ▁int ▁pResultSet Concurrency ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . prepare Call ( pStatementSql , ▁pResultSet Type , ▁pResultSet Concurrency ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Call ( java . lang . String , ▁int , ▁int , ▁int ) ▁*/ ▁public ▁C allableStatement ▁prepare Call ( String ▁pStatementSql , ▁int ▁pResultSet Type , ▁int ▁pResultSet Concurrency , ▁int ▁pResultSet Holdability ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . prepare Call ( pStatementSql , ▁pResultSet Type , ▁pResultSet Concurrency , ▁pResultSet Holdability ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Statement ( java . lang . String ) ▁*/ ▁public ▁P reparedStatement ▁prepare Statement ( String ▁pStatementSql ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache P reparedStatement ( this . connection ▁ . prepare Statement ( pStatementSql )); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Statement ( java . lang . String , ▁int ) ▁*/ ▁public ▁P reparedStatement ▁prepare Statement ( String ▁pStatementSql , ▁int ▁pAuto Generate dKey s ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache P reparedStatement ( this . connection . prepare Statement ( ▁pStatementSql , ▁pAuto Generate dKey s )); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Statement ( java . lang . String , ▁int , ▁int ) ▁*/ ▁public ▁P reparedStatement ▁prepare Statement ( String ▁pStatementSql , ▁int ▁pResultSet Type , ▁int ▁pResultSet Concurrency ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache P reparedStatement ( this . connection . prepare Statement ( ▁pStatementSql , ▁pResultSet Type , ▁pResultSet Concurrency )); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Statement ( java . lang . String , ▁int , ▁int , ▁int ) ▁*/ ▁public ▁P reparedStatement ▁prepare Statement ( String ▁pStatementSql , ▁int ▁pResultSet Type , ▁int ▁pResultSet Concurrency , ▁int ▁pResultSet Holdability ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache P reparedStatement ( this . connection . prepare Statement ( ▁pStatementSql , ▁pResultSet Type , ▁pResultSet Concurrency , ▁pResultSet Holdability )); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Statement ( java . lang . String , ▁int []) ▁*/ ▁public ▁P reparedStatement ▁prepare Statement ( String ▁pStatementSql , ▁int [] ▁column Indexes ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache P reparedStatement ( this . connection . prepare Statement ( ▁pStatementSql , ▁column Indexes )); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # prepare Statement ( java . lang . String , ▁java . lang . String []) ▁*/ ▁public ▁P reparedStatement ▁prepare Statement ( String ▁pStatementSql , ▁String [] ▁pColumn Name s ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁cache P reparedStatement ( this . connection . prepare Statement ( ▁pStatementSql , ▁pColumn Name s )); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # release Savepoint ( java . sql . Savepoint ) ▁*/ ▁public ▁void ▁ release Savepoint ( Savepoint ▁p Savepoint ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . release Savepoint ( p Savepoint ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # roll back () ▁*/ ▁public ▁void ▁ roll back () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . roll back (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # roll back ( java . sql . Savepoint ) ▁*/ ▁public ▁void ▁ roll back ( Savepoint ▁p Savepoint ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . roll back ( p Savepoint ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # setAutoCommit ( boolean ) ▁*/ ▁public ▁void ▁ setAutoCommit ( boolean ▁p AutoCommit ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁if ▁( this . connection . get AutoCommit () ▁ != ▁p AutoCommit ) ▁{ ▁this . connection . setAutoCommit ( p AutoCommit ); ▁} ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # set Catalog ( java . lang . String ) ▁*/ ▁public ▁void ▁set Catalog ( String ▁p Catalog ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . set Catalog ( p Catalog ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # set Holdability ( int ) ▁*/ ▁public ▁void ▁set Holdability ( int ▁p Holdability ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . set Holdability ( p Holdability ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # set ReadOnly ( boolean ) ▁*/ ▁public ▁void ▁set ReadOnly ( boolean ▁p ReadOnly ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . set ReadOnly ( p ReadOnly ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # set Savepoint () ▁*/ ▁public ▁ Savepoint ▁set Savepoint () ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . set Savepoint (); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # set Savepoint ( java . lang . String ) ▁*/ ▁public ▁ Savepoint ▁set Savepoint ( String ▁pName ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁return ▁this . connection . set Savepoint ( pName ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # setT ransaction Is o lation ( int ) ▁*/ ▁public ▁void ▁setT ransaction Is o lation ( int ▁p L evel ) ▁throws ▁SQLException ▁{ ▁this . manager . setLast Time ( this ); ▁this . connection . setT ransaction Is o lation ( p L evel ); ▁} ▁/** ▁* ▁@ see ▁java . sql . Connection # set Type Map ( java . util . Map ) ▁*/ ▁/** ▁* ▁@ see ▁java . lang . Object # toString () ▁*/ ▁public ▁String ▁toString () ▁{ ▁return ▁this . connection . toString (); ▁} ▁public ▁void ▁setType Map ( Map < String , ▁Class < ? > > ▁arg 0) ▁throws ▁SQLException ▁{ ▁// ▁TODO ▁ Auto - generate d ▁method ▁stub ▁} ▁}