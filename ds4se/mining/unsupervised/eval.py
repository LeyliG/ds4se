# AUTOGENERATED! DO NOT EDIT! File to edit: dev/3.2_mining.unsupervised.eval.ipynb (unless otherwise specified).

__all__ = ['samplingLinks', 'computeDistanceMetric', 'computeDistanceSWArtifacts', 'findWMDinDF',
           'matchWithGroundTruth']

# Cell
# Imports
import numpy as np
import gensim
import pandas as pd
from itertools import product
from random import sample
import functools
import os

# Cell
import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)

# Cell
def samplingLinks(df_source, df_target, sampling = False, samples = 10):
    source = [os.path.basename(elem) for elem in list( df_source['ids'] )]
    target = [os.path.basename(elem) for elem in list( df_target['ids'] )]

    if sampling:
        links = sample( list( product( source , target ) ), samples)
    else:
        links = list( product( source , target ))

    return links

# Cell
'''If the artifacts have very similar content, therefore the WMD should be low'''
def computeDistanceMetric( df_source , df_target, link, metric="WMD" ):
    #TODO Model should be generalized
    splittedListA = list(df_source[df_source['ids'].str.contains(link[0])]['text'])[0].split()
    splittedListB = list(df_target[df_target['ids'].str.contains(link[1])]['text'])[0].split()

    if metric == "WMD":
        dist = new_model.wv.wmdistance(splittedListA, splittedListB)
    else:
        dist = None
    return dist

# Cell
'''Computes a distance metric from the given sets'''
def computeDistanceSWArtifacts(df_source, df_target, sampling = False, samples = 10):
    links_ = samplingLinks(df_source,df_target, sampling, samples)
    docs = [(link[0], link[1], computeDistanceMetric( df_source , df_target, link ) ) for link in links_]
    return docs

# Cell
def findWMDinDF(links_WMD, g_tuple):
    wmd = links_WMD[links_WMD['Source'].str.contains( g_tuple[0][:g_tuple[0].find('.')] + '-' )
                 & links_WMD['Target'].str.contains(g_tuple[1][:g_tuple[1].find('.')]) ]
    return wmd.index.values

# Cell
def matchWithGroundTruth( ground_links , df_links_WMD ):
    matchWMD = [ findWMDinDF( df_links_WMD , g ) for g in ground_links]
    matchWMD = functools.reduce(lambda a,b : np.concatenate([a,b]), matchWMD)
    df_links_WMD["Linked?"] = 0
    new_column = pd.Series(np.full([len(matchWMD)], 1 ), name='Linked?', index = matchWMD)
    df_links_WMD.update(new_column)
    return df_links_WMD