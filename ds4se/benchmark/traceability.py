# AUTOGENERATED! DO NOT EDIT! File to edit: dev/06_benchmark.traceability.ipynb (unless otherwise specified).

__all__ = ['logger', 'flatten', 'Testbed', 'Procedure', 'Benchmark']

# Cell
# Imports
import logging

import matplotlib.pyplot as plt
import pandas as pd
import sentencepiece as sp

from abc import ABC, abstractmethod

from collections import Counter

# ds4se
from ..exp.info import *
from ..desc.stats import *
from ..mgmnt.prep.traceability import *
from ..mgmnt.prep.nltk import *
from ..mgmnt.prep.bpe import *
from ..vis import *

from pathlib import Path

# Cell
logger = logging.getLogger(__name__)
logging.basicConfig(
        format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",
        datefmt="%m/%d/%Y %H:%M:%S",
        level=logging.INFO,
    )

# Cell
flatten = lambda l: [item for sublist in l for item in sublist]

# Cell
class Testbed(ABC):
    def __init__(self, data):
        self.data = data
        super().__init__()

    @abstractmethod
    def evaluate(self, inpt):
        pass

# Cell
class Procedure(ABC):
    def __init__(self, metrics):
        self.metrics = vectorimetricszor
        super().__init__()

    @abstractmethod
    def evaluate(self, inpt):
        pass

# Cell
class Benchmark(ABC):
    def __init__(self, testbed, procedure):
        self.testbed = testbed
        self.procedure = procedure
        super().__init__()

    @abstractmethod
    def evaluate(self, inpt):
        pass