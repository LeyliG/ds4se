# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_data.management.transforms.ipynb (unless otherwise specified).

__all__ = ['filter_df', 'transform_df', 'is_ascii', 'remove_comments', 'randomize_lines', 'randomize_tokens']

# Cell
import pandas as pd

from fast_trees.core import FastParser
from random import shuffle
from typing import Callable, Optional

# Cell
def filter_df(
    df: pd.DataFrame, filter_fn: Callable, col: str, n: Optional[int] = None
) -> pd.DataFrame:
    """
    Filter the given pandas dataframe using the given transformation.

    :param df: the dataframe containing each method to be transformed
    :param filter_fn: the filter function that will be applied to each method in the dataframe
    :param col: the column to get the examples from
    :param n: the number of examples to evaluate. If none, the entire dataframe will be used
    :returns: returns a modified dataframe with the rows filtered
    """
    if n is None:
        n = len(df)

    df = df.iloc[:n].copy()
    df = df[df[col].apply(filter_fn)]

    return df

# Cell
def transform_df(
    df: pd.DataFrame, transform_fn: Callable, col: str, n: Optional[int] = None
) -> pd.DataFrame:
    """
    Transform the given pandas dataframe using the given transformation.

    :param df: the dataframe containing each method to be transformed
    :param transform_fn: the transformation that will be applied to each example in the dataframe
    :param col: the column to get the examples from
    :param n: the number of examples to evaluate. If none, the entire dataframe will be used
    :returns: returns a modified dataframe with the examples transformed
    """
    if n is None:
        n = len(df)

    df = df.iloc[:n].copy()
    df[col] = df[col].apply(transform_fn)

    return df

# Cell
def is_ascii(example: str) -> bool:
    """
    Check if the given example contains only ASCII characters. From https://stackoverflow.com/a/27084708/5768407.

    :param example: the data to verify contains only ASCII characters
    :returns: returns a boolean representing whether or not the given example contains only ASCII characters
    """
    try:
        example.encode(encoding="utf-8").decode("ascii")
    except UnicodeDecodeError:
        return False
    else:
        return True

# Cell
def remove_comments(parser: FastParser, code: str) -> str:
    inline_comments = parser.get_method_inline_comments(code)
    for c in inline_comments:
        code = code.replace(c, "")

    return code

# Cell
def randomize_lines(example: str) -> str:
    """
    Randomize the lines in a given example.

    :param example: the example to have its lines randomized
    :returns: returns the method with its lines randomized
    """
    example = example.split("\n")
    shuffle(example)

    return "\n".join(example)

# Cell
def randomize_tokens(example: str) -> str:
    """
    Randomize the tokens in a given method.

    :param mthd: the method to have its code tokens randomized
    :returns: returns the method with its code tokens randomized
    """
    example = example.split(" ")
    shuffle(example)

    return " ".join(example)