{"_id":{"$oid":"5e90cc7fea1f110f6a035c6c"},"name":"ServletShowUserClassroomForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletShowUserClassroomForm extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -8625643776134227947L;\n\n\t/**\n\t * \n\t */\n\t\n\t\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c6d"},"name":"ServletLoadTeachingList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per caricare la lista degli insegnamenti Associati alla classe dello studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadTeachingList extends HttpServlet {\n\n\n\tprivate static final long serialVersionUID = -708492643674363470L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/insertReport.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\t //Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c6e"},"name":"ServletShowTeachingDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeachingDetails extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 7882088509329309672L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/teachingManagement/showTeachingDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint teachingId = 0;\n\t\tTeaching teaching = null;\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tteachingId = Integer.valueOf(pRequest.getParameter(\"idTeaching\"));\n\t\t\tteaching = managerTeaching.getTeachingById(teachingId);\n\t\t\tsession.setAttribute(\"teaching\", teaching);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c6f"},"name":"ServletInsertNewNote.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletInsertNewNote extends HttpServlet {\n\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6496360730201101300L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tif(pRequest.getParameter(\"insert\")==null){\n\t\t\t\tUser student =(User) session.getAttribute(\"student\"); \n\t\t\t\t\t//managerUser.getUserById(Integer.valueOf((String)pRequest.getAttribute(\"student\")));\n\t\t\t\tsession.setAttribute(\"student\", student);\n\t\t\t\tsession.setAttribute(\"idStudent\", student.getId());\n\t\t\t\tgotoPage=\"./registerManagement/insertNewNote.jsp\";\n\t\t\t}else{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNote nNote= new Note();\n\t\t\t\tnNote.setAcademicYear(((Classroom) session.getAttribute(\"classroom\")).getAcademicYear());\n\t\t\t\tnNote.setDateNote(Utility.String2Date(pRequest.getParameter(\"dateNote\")));\n\t\t\t\tnNote.setIdUser((Integer) session.getAttribute(\"idStudent\"));\n\t\t\t\tnNote.setTeacher(pRequest.getParameter(\"noteTeacher\"));\n\t\t\t\tnNote.setDescription(pRequest.getParameter(\"noteDescription\"));\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tmanagerRegister.insertNote(nNote);\n\t\t\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\t}catch(MandatoryFieldException e){\n\t\t\t\t\tsession.setAttribute(\"error\", e.getMessage());\n\t\t\t\t\tgotoPage=\"./registerManagement/insertNewNote.jsp\";\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c70"},"name":"NotImplementedYetException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * NotYetImplementedException\n *\n */\n\npackage smos.storage.connectionManagement.exception;\n\n/**\n * This exception is thrown as a warning from a part of the code which has not\n * been implemented yet, but will be in future.\n */\npublic class NotImplementedYetException extends RuntimeException {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \n     */\n    public NotImplementedYetException() {\n        super();\n    }\n\n    /**\n     * @param pMessage\n     */\n    public NotImplementedYetException(String pMessage) {\n        super(pMessage);\n    }\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c71"},"name":"ManagerClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.storage;\n\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport smos.bean.Classroom;\nimport smos.bean.User;\n\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ManagerClassroom  {\n\n\t/**\n\t * Classe che gestiste le classi dell'istituto \n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static ManagerClassroom instance;\n\t\n\tpublic static final String TABLE_CLASSROOM = \"classroom\";\n\tpublic static final String TABLE_ADDRESS =\"address\";\n\tpublic static final String TABLE_TEACHER_HAS_CLASSROOM = \"teacher_has_classroom\";\n\tpublic static final String TABLE_STUDENT_HAS_CLASSROOM = \"student_has_classroom\";\n\t\n\tprivate ManagerClassroom(){\n\t\tsuper();\n\t}\n\t\n\t\n\t\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerClassroom getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerClassroom();\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param La classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists (Classroom pClassroom) throws MandatoryFieldException, ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pClassroom.getName() == null)\n\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM\n\t\t\t\t+ \" WHERE name = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \" AND accademic_year = \"\n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear()\n\t\t\t\t+ \" AND id_address = \"\n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress())\n\t\t\t\t\n\t\t\t\t);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Inserisce l'oggetto di tipo classe nel database\n\t * @param la classe da inserire nel database\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Classroom pClassroom) throws MandatoryFieldException, \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t// controllo dei campi obbligatori\n\t\t\tif (pClassroom.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t\t}\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" (id_address, name, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpClassroom.setIdClassroom((Utility.getMaxValue(\"id_classroom\",ManagerClassroom.TABLE_CLASSROOM)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Aggiorna le statistiche di una classe\n\t * @param La classe con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update (Classroom pClassroom) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\t\t\tif (pClassroom.getIdClassroom()<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la classe!\");\n\t\t\t\n\t\t\tif (pClassroom.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t\t}\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_address = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress()) \n\t\t\t\t+ \", name = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_classroom = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdClassroom());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Cancella una classe dal database\n\t * @param La classe da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void delete (Classroom pClassroom) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\t//ManagerUser.getInstance().userOnDeleteCascade(pUser);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t\t\t\t+ \" WHERE id_classroom = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pClassroom.getIdClassroom());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized Collection<Classroom> getClassroomsByStudent(User pUser) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\ttry\n\t\t{\n\t\t\t// Se non esiste l'utente\n\t\t\tif (!managerUser.exists(pUser))\n\t\t\t\t\tthrow new EntityNotFoundException(\"L'utente non esiste!!!\");\n\t\t\tif(!managerUser.isStudent(pUser))\n\t\t\t\t\tthrow new InvalidValueException(\"L'utente non è uno studente!\");\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tint iduser=managerUser.getUserId(pUser);\n\t\t\tString tSql = \n\t\t\t\t\n\t\t\t\t\"SELECT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".* FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM \n\t\t\t\t+ \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(iduser)\n\t\t\t\t+\" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM \n\t\t\t\t+\".id_classroom\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente inserito\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Restituisce la classe che ha l'ID passato \n\t * @param L'ID della classe cercata\n\t * @return una stringa che rappresenta la classe con l'ID fornito\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Classroom getClassroomByID(int pId) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tClassroom result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la classe!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE id_classroom = \" \n\t\t\t\t+ Utility.isNull(pId) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadRecordFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'utente!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Restituisce una collezione di classi dello stesso anno accademico\n\t */\n\tpublic synchronized Collection<Classroom> getClassroomsByAcademicYear(int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per la data inserita\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\t\n\tpublic synchronized Collection<Integer> getAcademicYearList() throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Integer> result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT DISTINCT accademic_year FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM\n\t\t\t\t+ \" order by accademic_year \";\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadIntegersFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per la data inserita\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\tpublic synchronized Classroom getClassroomByUserAcademicYear(User pUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tClassroom result = null;\n\t\tClassroom temp = null;\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tCollection<Classroom> list = null;\n\t\tlist = managerClassroom.getClassroomsByStudent(pUser);\n\t\tIterator<Classroom> it = list.iterator();\n\t\twhile(it.hasNext()){\n\t\t\ttemp = it.next();\n\t\t\tif(temp.getAcademicYear()==pAcademicYear){\n\t\t\t\tresult = temp;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tpublic synchronized Collection<Classroom> getClassroomsByTeacherAcademicYear(User pUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result = null;\n\t\tConnection connect = null;\n\t\tint idUser = pUser.getId();\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT DISTINCT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM +\".* FROM \"  \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \" WHERE  \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \".id_classroom  AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".accademic_year = \"\n\t\t\t\t+ Utility.isNull(pAcademicYear)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM + \".id_user = \"\n\t\t\t\t+ Utility.isNull(idUser)\n\t\t\t\t;\n\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente e l'anno inseriti\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t\n\t}\n\tpublic synchronized Collection<Classroom> getClassroomsByTeacher(User pUser) \n\tthrows EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\ttry\n\t\t{\n\t\t\t// Se non esiste l'utente\n\t\t\tif (!managerUser.exists(pUser))\n\t\t\t\t\tthrow new EntityNotFoundException(\"L'utente non esiste!!!\");\n\t\t\tif(!managerUser.isTeacher(pUser))\n\t\t\t\t\tthrow new InvalidValueException(\"L'utente non è uno studente!\");\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tint iduser=managerUser.getUserId(pUser);\n\t\t\tString tSql = \n\t\t\t\t\n\t\t\t\t\"SELECT DISTINCT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".* FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(iduser)\n\t\t\t\t+\" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+\".id_classroom\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) {\n\t\t\t\t\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente inserito\");\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/** COnsente la lettura di un intero dal recod resultSet\n\t * \n\t * @param pRs\n\t * \t\tresultSet\n\t * @return\n\t * \tcollection<Integer>\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Integer> loadIntegersFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Integer> result = new Vector<Integer>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(pRs.getInt(\"accademic_year\"));\n\t\t} \n\t\treturn result;\n\t}\n\n\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param Il result set da cui estrarre l'oggetto Classroom\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Classroom loadRecordFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tClassroom classroom = new Classroom();\n\t\tclassroom.setName(pRs.getString(\"name\"));\n\t\tclassroom.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\tclassroom.setIdClassroom(pRs.getInt(\"id_classroom\"));\n\t\tclassroom.setIdAddress(pRs.getInt(\"id_address\"));\n\t\treturn classroom;\n\t}\n\n\t/**\n\t * Consente la lettura di un piÃ¹ record dal Result Set\n\t * @param Il result set da cui estrarre l'oggetto Classroom\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Collection<Classroom> loadRecordsFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Classroom> result = new Vector<Classroom>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} \n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c72"},"name":"ServletShowAddressList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.addressManagement;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli indirizzi.\n * \n * @author Vecchione Giuseppe\n * \n */\npublic class ServletShowAddressList extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = 8797912020763935353L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString errorMessage=\"\";\n\t\tString gotoPage=\"./persistentDataManagement/addressManagement/showAddressList.jsp\";\n\t\tHttpSession session=pRequest.getSession();\n\t\tCollection<Address> addressList=null;\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tUser loggedUser = (User)session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif(loggedUser==null){\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\terrorMessage=\"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\taddressList=managerAddress.getAddressList();\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"addressList\", addressList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\t\t\t\t\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException sqlException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tsqlException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t}\n\t\tpRequest.getSession().setAttribute(\"errorMessage\",errorMessage);\n\t\t\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c73"},"name":"LoginException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un utente\n  * inserisce una password errata durante l'autenticazione\n  */\npublic class LoginException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -1213284697567763493L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic LoginException() {\n\t\tsuper(\"Login or Password Incorrect or Invalid Session!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic LoginException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c74"},"name":"Absence.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\npublic class Absence implements Serializable {\n\n\t/**\n\t * Classe che modella l'assenza di uno studente\n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = -8396513309450121449L;\n\t\n\tprivate int idAbsence;\n\tprivate int idUser;\n\tprivate Date dateAbsence;\n\tprivate Integer idJustify;\n\tprivate int academicYear;\n\t\n\tpublic Absence (){\n\t\t\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'id dell'assenza\n\t * @return un intero che rappresenta l'id dell'assenza\n\t */\n\tpublic int getIdAbsence() {\n\t\treturn idAbsence;\n\t}\n\t/**\n\t * Metodo che setta l'id dell'assenza\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdAbsence(int pIdAbsence) {\n\t\tthis.idAbsence = pIdAbsence;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente relativo all'assenza\n\t * @return un intero che rappresenta l'id dello studente assente\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo all'assenza\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data dell'assenza\n\t * @return una stringa che rappresenta la data dell'assenza\n\t */\n\tpublic Date getDateAbsence() {\n\t\treturn dateAbsence;\n\t}\n\t/**\n\t * Metodo che setta la data dell'assenza\n\t * @param una stringa con la data da settare\n\t */\n\tpublic void setDateAbsence(Date pDateAbsence) {\n\t\tthis.dateAbsence = pDateAbsence;\n\t}\n\t/**\n\t * Metodo che ritorna l'id della giustifica relativa all'assenza\n\t * @return un intero che rappresenta l'id della giustifica relativa all'assenza, oppure null se l'assenza non Ã¨ stata giustificata\n\t */\n\tpublic Integer getIdJustify() {\n\t\t\n\t\treturn idJustify;\n\t\t\n\t}\n\t/**\n\t * Metodo che setta l'id della giustifica relativa all'assenza\n\t * @param un intero che rappresenta l'id della giustifica da settare\n\t */\n\tpublic void setIdJustify(Integer pIdJustify) {\n\t\tthis.idJustify = pIdJustify;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo all'assenza\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo all'assenza\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c75"},"name":"Environment.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos;\n\n/**\n * Classe utilizzata per contenere le variabili d'ambiente di GESA \n */\npublic class Environment {\n\n    /**\n     * Messaggio di errore di default.\n     */\n    public static String DEFAULT_ERROR_MESSAGE = \"Un errore si e' verificato durante l'elaborazione della richiesta.<br><br>\";\n\n    private static String poolPropertiesPath = \"\";\n\n    /**\n     * @return getPoolPropertiesPath()\n     */\n    public static String getPoolPropertiesPath() {\n        return poolPropertiesPath;\n    }\n    \n    /**\n     * @param poolPropertiesPath\n     */\n    public static void setPoolPropertiesPath(String poolPropertiesPath) {\n        Environment.poolPropertiesPath = poolPropertiesPath;\n    }\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c76"},"name":"ServletDeleteTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.*;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per eliminare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletDeleteTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7133554709559970023L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tTeaching teaching = (Teaching) session.getAttribute(\"teaching\");\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} else\n\t\t\t\tmanagerTeaching.delete(teaching);\n\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c77"},"name":"ManagerRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}]],"contents":"package smos.storage;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Vector;\n\nimport smos.bean.Absence;\nimport smos.bean.Delay;\nimport smos.bean.Justify;\nimport smos.bean.Note;\nimport smos.bean.RegisterLine;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ManagerRegister {\n\n\t\n\t/**\n\t * Classe che gestisce il Registro Digitale\n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static ManagerRegister instance;\n\t\n\tpublic final static String TABLE_ABSENCE=\"absence\";\n\tpublic final static String TABLE_DELAY=\"delay\";\n\tpublic final static String TABLE_JUSTIFY=\"justify\";\n\tpublic final static String TABLE_NOTE=\"note\";\n\t\n\t\n\tprivate ManagerRegister(){\n\t\tsuper();\n\t}\n\t\n\t\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerRegister getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerRegister();\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pAbsence\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Absence pAbsence) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE\n\t\t\t\t+ \" WHERE id_absence = \"\n\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next()){\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pDelay\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Delay pDelay) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE\n\t\t\t\t+ \" WHERE id_delay = \"\n\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pDelay\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Justify pJustify) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY\n\t\t\t\t+ \" WHERE  id_justify = \"\n\t\t\t\t+ Utility.isNull(pJustify.getIdJustify());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Inserisce un assenza nel database\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertAbsence(Absence pAbsence) throws  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" (id_user, date_absence, id_justify, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getDateAbsence()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpAbsence.setIdAbsence((Utility.getMaxValue(\"id_absence\",ManagerRegister.TABLE_ABSENCE)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Inserisce un ritardo nel database\n\t * @param pDelay\n\t * \t\tun oggetto di tipo Delay da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertDelay(Delay pDelay) throws  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" (id_user, date_delay, time_delay, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pDelay.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getDateDelay()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getTimeDelay()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpDelay.setIdDelay((Utility.getMaxValue(\"id_delay\",ManagerRegister.TABLE_DELAY)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\n\t/**\n\t * Inserisce una nota nel database\n\t * @param pNote\n\t * \t\tun oggetto di tipo Note da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertNote(Note pNote) throws MandatoryFieldException,  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\tif (pNote.getDescription() == null || pNote.getDescription().equals(\"\"))\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire il testo della nota\");\n\t\t\t\n\t\t\tif (pNote.getTeacher() == null || pNote.getTeacher().equals(\"\") )\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire l'insegnante\");\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" (id_user, date_note, description, teacher, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pNote.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getDateNote()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getDescription()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getTeacher()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpNote.setIdNote((Utility.getMaxValue(\"id_note\",ManagerRegister.TABLE_NOTE)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Inserisce una giustifica nel database\n\t * @param pJustify \n\t * \t\tun oggetto di tipo Justify da inserire nel database\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence che rappresenta l'assenza giustificata\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertJustify(Justify pJustify, Absence pAbsence) throws   \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" (id_user, date_justify, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pJustify.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pJustify.getDateJustify()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pJustify.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpJustify.setIdJustify((Utility.getMaxValue(\"id_justify\",ManagerRegister.TABLE_JUSTIFY)));\n\t\t\t\n\t\t\tpAbsence.setIdJustify(pJustify.getIdJustify());\n\t\t\tthis.updateAbsence(pAbsence);\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella un'assenza dal database\n\t * @param pAbsence\n\t * \t\tl'assenza da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteAbsence (Absence pAbsence) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t\t\t\t+ \" WHERE id_absence = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t\t\t\n\t\t\t\tif (!(pAbsence.getIdJustify()==null)){\n\t\t\t\t\tdeleteJustify(pAbsence.getIdJustify());\n\t\t\t\t}\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\n\t/**\n\t * Cancella un ritardo dal database\n\t * @param pDelay\n\t * \t\til ritardo da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteDelay (Delay pDelay) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t\t\t\t+ \" WHERE id_delay = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella una nota dal database\n\t * @param pNote\n\t * \t\tla nota da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteNote (Note pNote) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t\t\t\t+ \" WHERE id_note = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pNote.getIdNote());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella una nota dal database\n\t * @param pJIDustify\n\t * \t\tl'ID della nota da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteJustify (int pIDJustify) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t\t\t\t+ \" WHERE id_justify = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pIDJustify);\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tAbsence temp= getAbsenceByIdJustify(pIDJustify);\n\t\t\t\t\ttemp.setIdJustify(0);\n\t\t\t\t\tupdateAbsence(temp);\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\t// è normale se un exception viene generata\n\t\t\t\t\t// dato che può essere che stiamo cancellando una giustifica\n\t\t\t\t\t//di cui abbiamo appena cancellato l'assenza \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna le statistiche di un'assenza\n\t * @param pAbsence\n\t * \t\tL'assenza con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\t\n\tpublic synchronized void updateAbsence (Absence pAbsence) throws ConnectionException,\n\tSQLException, EntityNotFoundException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdUser()) \n\t\t\t\t+ \", date_absence = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getDateAbsence()) \n\t\t\t\t+ \", id_justify = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify())  \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_absence = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Aggiorna le statistiche di un ritardo\n\t * @param pDelay\n\t * \t\tIl ritardo con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\t\n\tpublic synchronized void updateDelay (Delay pDelay) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pDelay.getIdUser()) \n\t\t\t\t+ \", date_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getDateDelay()) \n\t\t\t\t+ \", time_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getTimeDelay())  \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pDelay.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Metodo che aggiorna le statistiche di una Nota\n\t * @param pNote\n\t * \t\tun oggetto di tipo Note con le statistiche aggiornate ma id identico\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\tpublic synchronized void updateNote (Note pNote) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\t\t\tif (pNote.getDescription() == null || pNote.getDescription().equals(\"\"))\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire il testo della nota\");\n\t\t\t\n\t\t\tif (pNote.getTeacher() == null || pNote.getTeacher().equals(\"\") )\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire l'insegnante\");\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_NOTE\n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pNote.getIdUser()) \n\t\t\t\t+ \", date_note = \" \n\t\t\t\t+ Utility.isNull(pNote.getDateNote())   \n\t\t\t\t+ \", description = \" \n\t\t\t\t+ Utility.isNull(pNote.getDescription())   \n\t\t\t\t+ \", teacher = \" \n\t\t\t\t+ Utility.isNull(pNote.getTeacher())   \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pNote.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_note = \" \n\t\t\t\t+ Utility.isNull(pNote.getIdNote());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Aggiorna le statistiche di una giustifica \n\t * @param pJustify\n\t * \t\tla giustifica con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\n\tpublic synchronized void updateJustify (Justify pJustify) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_JUSTIFY\n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pJustify.getIdUser()) \n\t\t\t\t+ \", date_justify = \" \n\t\t\t\t+ Utility.isNull(pJustify.getDateJustify())   \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pJustify.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pJustify.getIdJustify());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Metodo che restituisce una nota dato l'id della note stessa\n\t * @param pIDJustify\n\t * \t\tun intero che rappresenta l'id della nota  \n\t * @return un oggetto di tipo Note che rappresenta la nota\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Note getNoteById( int pIDNote)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tNote result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDNote<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la nota\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" WHERE id_note = \" \n\t\t\t\t+ Utility.isNull(pIDNote) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadNoteFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la nota!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * Metodo che restituisce un assenza dato l'id della giustifca associata a tale assenza\n\t * @param pIDJustify\n\t * \t\tun intero che rappresenta l'id della giustifica  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza giustificata\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Absence getAbsenceByIdJustify( int pIDJustify)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tAbsence result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDJustify<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la l'assenza\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pIDJustify) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadAbsenceFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce un assenza dato l'id di questa\n\t * @param pIDAbsence\n\t * \t\tun intero che rappresenta l'id dell'assenza  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza \n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Absence getAbsenceByIdAbsence( int pIDAbsence)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tAbsence result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDAbsence<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l' assenza\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE id_absence = \" \n\t\t\t\t+ Utility.isNull(pIDAbsence) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadAbsenceFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce un ritardo dato l'id di questo\n\t * @param pIDDelay\n\t * \t\tun intero che rappresenta l'id del ritardo  \n\t * @return un oggetto di tipo Delay che rappresenta il ritardo\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Delay getDelayById( int pIDDelay)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tDelay result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDDelay<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare il ritardo\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY\n\t\t\t\t+ \" WHERE id_delay = \" \n\t\t\t\t+ Utility.isNull(pIDDelay) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadDelayFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce un assenza dato l'id di questa\n\t * @param pIDAbsence\n\t * \t\tun intero che rappresenta l'id dell'assenza  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza \n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Justify getJustifyByIdJustify( int pIDJustify)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tJustify result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDJustify<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pIDJustify) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\t\n\t\t\t\tresult= this.loadJustifyFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce true se l'assenza data in input ha una giustifica assegnata\n\t * @param pAbsence\n\t * \t\tun oggetto di valore Absence di cui bisogna controllare se ha giustifica\n\t * @return true se l'assenza Ã¨ giustificata, false altrimenti\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\tpublic synchronized boolean hasJustify(Absence pAbsence)throws EntityNotFoundException, ConnectionException, SQLException{\n\t\tif(!exists(pAbsence)) throw new EntityNotFoundException(\"Assenza non presente in database\");\n\t\tif(pAbsence.getIdJustify()==null) return false;\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce la giustifica legata a una data assenza\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence che rappresenta l'assenza\n\t * @return\tun oggetto di tipo Justify, oppure null se l'assenza non ha giustifica\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\tpublic synchronized Justify getJustifyByAbsence(Absence pAbsence)throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tif(!exists(pAbsence)) throw new EntityNotFoundException(\"Assenza non presente in database\");\n\t\tif(pAbsence.getIdJustify()==null) return null;\n\t\t\n\t\tJustify result=null;\n\t\tConnection connect = null;\n\t\ttry{\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify()) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadJustifyFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t\t\n\t\t\n\t}\n\n\t/**\n\t * Metodo che restituisce le assenze preso un dato anno scolastico e utente in input\n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dell'utente\n\t * @param pAcademicYear\n\t * \t\tun intero che rappresenta l'anno accademico \n\t * @return una colleczione di assenze (vuota se l'utente non ha avuto assenze ) \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\t\n\tpublic synchronized Collection<Absence> getAbsenceByIDUserAndAcademicYear(int pIdUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Absence> result=new Vector<Absence>();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\twhile(tRs.next())  {\n\t\t\t\tresult.add(loadAbsenceFromRs(tRs));\n\t\t\t} \n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Metodo che restituisce una collezione di note per un dato utente ed un dato anno scolastico\n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dell'utente\n\t * @param pAcademicYear\n\t * \t\tun intero che rappresenta l'anno accademico \n\t * @return una collezione di note, vuota se l'utente non ne ha ricevute\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Note> getNoteByIDUserAndAcademicYear(int pIdUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Note> result=new Vector<Note>();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\twhile(tRs.next())  {\n\t\t\t\tresult.add(loadNoteFromRs(tRs));\n\t\t\t} \n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'assenza di una dato studente in un dato giorno \n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dello studente\n\t * @param pDate\n\t * \t\tuna stringa che rappresenta la data formattata per il database\n\t * @return un oggetto di tipo Absence, oppure null se lo studente era presente\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\t\n\tpublic synchronized Absence getAbsenceByIDUserAndDate(int pIdUser, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tAbsence result=new Absence();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t//TODO controlli sulla formattazione della stringa\n\t\t\t\n\t\t\t\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE date_absence = \" \n\t\t\t\t+ Utility.isNull(pDate) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif(tRs.next())  {\n\t\t\t\tresult=loadAbsenceFromRs(tRs);\n\t\t\t}else {\n\t\t\t\tresult=null;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce il ritardo di una dato studente in un dato giorno \n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dello studente\n\t * @param pDate\n\t * \t\tuna stringa che rappresenta la data formattata per il database\n\t * @return un oggetto di tipo Delay, oppure null se lo studente era in orario o assente\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\t\n\tpublic synchronized Delay getDelayByIDUserAndDate(int pIdUser, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tDelay result=new Delay();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t//TODO controlli sulla formattazione della stringa\n\t\t\t\n\t\t\t\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" WHERE date_delay = \" \n\t\t\t\t+ Utility.isNull(pDate) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif(tRs.next())  {\n\t\t\t\tresult=loadDelayFromRs(tRs);\n\t\t\t}else {\n\t\t\t\tresult=null;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\tpublic synchronized Collection<RegisterLine> getRegisterByClassIDAndDate(int pClassID, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\t\n\t\tCollection<RegisterLine> result = new Vector<RegisterLine>();\n\t\tManagerUser mg = ManagerUser.getInstance();\n\t\t\n\t\tCollection<UserListItem> students = mg.getStudentsByClassroomId(pClassID);\n\t\t\n\t\t\n\t\tfor (UserListItem x : students){\n\t\t\tRegisterLine temp = new RegisterLine();\n\t\t\ttemp.setStudent(x);\n\t\t\ttemp.setAbsence(this.getAbsenceByIDUserAndDate(x.getId(), pDate));\n\t\t\ttemp.setDelay(this.getDelayByIDUserAndDate(x.getId(), pDate));\n\t\t\tresult.add(temp);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/**\n\t * Metodo che verifica se c'è un'assenza in una linea del registro \n\t * @param pRegisterLine\n\t * \t\tun oggetto di tipo RegisterLine\n\t * @return\ttrue se c'è un'assenza nella linea di registro passata, altrimenti false\n\t */\n\t\n\t\n\tpublic boolean hasAbsence(RegisterLine pRegisterLine){\n\t\tif(pRegisterLine.getAbsence()==null)return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Metodo che verifica se c'è un ritardo in una linea del registro \n\t * @param pRegisterLine\n\t * \t\tun oggetto di tipo RegisterLine\n\t * @return\ttrue se c'è un ritardo nella linea di registro passata, altrimenti false\n\t */\n\t\n\t\n\tpublic boolean hasDelay(RegisterLine pRegisterLine){\n\t\tif(pRegisterLine.getDelay()==null)return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Absence\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Absence loadAbsenceFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tAbsence absence = new Absence();\n\t\t\n\t\tabsence.setIdAbsence(pRs.getInt(\"id_absence\"));\n\t\tabsence.setIdUser(pRs.getInt(\"id_user\"));\n\t\tabsence.setDateAbsence((Date)pRs.getDate(\"date_absence\"));\n\t\tabsence.setIdJustify(pRs.getInt(\"id_justify\"));\n\t\tabsence.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\t\n\t\treturn absence;\n\t}\n\t\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Justify\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Justify loadJustifyFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tJustify justify = new Justify();\n\t\t\n\t\tjustify.setIdJustify(pRs.getInt(\"id_justify\"));\n\t\tjustify.setIdUser(pRs.getInt(\"id_user\"));\n\t\tjustify.setDateJustify((Date)pRs.getDate(\"date_justify\"));\n\t\tjustify.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\t\n\t\treturn justify;\n\t}\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Note\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Note loadNoteFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tNote note= new Note();\n\t\t\n\t\tnote.setIdNote(pRs.getInt(\"id_note\"));\n\t\tnote.setIdUser(pRs.getInt(\"id_user\"));\n\t\tnote.setDateNote((Date)pRs.getDate(\"date_note\"));\n\t\tnote.setDescription(pRs.getString(\"description\"));\n\t\tnote.setTeacher(pRs.getString(\"teacher\"));\t\n\t\tnote.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\n\t\treturn note;\n\t}\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Delay\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Delay loadDelayFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tDelay delay = new Delay();\n\t\t\t\t\n\t\tdelay.setIdDelay(pRs.getInt(\"id_delay\"));\n\t\tdelay.setIdUser(pRs.getInt(\"id_user\"));\n\t\tdelay.setDateDelay((Date)pRs.getDate(\"date_delay\"));\n\t\tdelay.setTimeDelay(pRs.getString(\"time_delay\"));\n\t\tdelay.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\n\t\treturn delay;\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c78"},"name":"ServletShowAddressDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.addressManagement;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un indirizzo.\n * \n * @author Vecchione Giuseppe.\n * \n */\npublic class ServletShowAddressDetails extends HttpServlet {\n\n\t\n\n\t\n\n\t\n\tprivate static final long serialVersionUID = 2136348837349051766L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/addressManagement/showAddressDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint addressId = 0;\n\t\tAddress address= null;\n\t\tManagerAddress managerAddress = ManagerAddress.getInstance();\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\taddressId = Integer.valueOf(pRequest.getParameter(\"idAddress\"));\n\t\t\taddress = managerAddress.getAddressById(addressId);\n\t\t\tsession.setAttribute(\"address\", address);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c79"},"name":"ServletDeleteJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7692034998093997864L;\n\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tString idClassroom=(String) session.getAttribute(\"idClassroom\");\n\t\tint id= Integer.parseInt(idClassroom);\n\t\tgotoPage+=\"?idClassroom=\"+id;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) &&\n\t\t\t\t\t(!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tJustify justify = (Justify) session.getAttribute(\"justify\");\n\t\t\t\n\t\t\tif(mR.exists(justify)){\n\t\t\t\tmR.deleteJustify(justify.getIdJustify());\n\t\t\t}else{\n\t\t\t\terrorMessage= \"impossibile cancellare la giustifica, questa non esiste!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c7a"},"name":"ServletUpdateRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Classroom;\nimport smos.bean.Delay;\nimport smos.bean.RegisterLine;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletUpdateRegister extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 5966298318913522686L;\n\t\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\t//Variabile booleana utilizzata per verificare se lo studente ha o meno un'assenza\n\t\tboolean flag = false;\n\t\t\n\t\t//Collection utilizzata per la memorizzazione del registro di una particolare data\n\t\tCollection<RegisterLine> register = null;\n\t\t//Iteratore necessario a scorrere la collection\n\t\tIterator itRegister = null;\n\t\t//Variabile temporanea necessaria a leggere le informazioni dalla collection\n\t\tRegisterLine tmpRegisterLine = null;\n\t\t//Variabile temporanea necessaria a leggere le informazioni dalla collection\n\t\tUserListItem student = null;\n\t\t\n\t\t//Variabile temporanea necessaria all'inserimento delle nuove assenze\n\t\tAbsence tmpAbsence = null;\n\t\t\n\t\t//Variabile temporanea necessaria all'inserimento di nuovi ritardi\n\t\tDelay tmpDelay = null;\n\t\t\n\t\t//Classi manager necessarie all'elaborazione\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance();\n\t\t\n\t\t//Variabili necessarie per la memorizzazione dei dati provenienti dalla request\n\t\tString[] absences = null; //Memorizza gli alunni assenti\n\t\tString[] delays = null; //Memorizza gli alunni ritardatari\n\t\t\n\t\t//Recupero l'utente loggato dalla sessione\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t//Verifico che l'utente loggato abbia i permessi necessari\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t//Recupero i parametri dalla pRequest\n\t\tDate date = Utility.String2Date(pRequest.getParameter(\"date\"));\n\t\tabsences = pRequest.getParameterValues(\"absences\");\n\t\tdelays = pRequest.getParameterValues(\"delays\");\n\t\t\n\t\t//Recupero l'oggetto classroom dalla session\n\t\tClassroom classroom = ((Classroom) session.getAttribute(\"classroom\"));\n\t\t\n\t\t/*Invoco il metodo della managerRegister per recuperare dal db le informazioni\n\t\t * inerenti il registro di una classe ad una particolare data (Assenze, Ritardi)\n\t\t */\n\t\tregister = managerRegister.getRegisterByClassIDAndDate(classroom.getIdClassroom(),date);\n\t\t\t\n\t\tif (register != null){\n\t\t\titRegister = register.iterator();\n\t\t}\n\t\t\n\t\tif (itRegister != null){\n\t\t\twhile(itRegister.hasNext()){\n\t\t\t\ttmpRegisterLine = (RegisterLine) itRegister.next();\n\t\t\t\t//Recupero lo studente cui la register line si riferisce\n\t\t\t\tstudent = tmpRegisterLine.getStudent();\n\t\t\t\t\n\t\t\t\t//Verifico se per lo studente e' stata inserita o meno un'assenza\n\t\t\t\tif (absences != null){\n\t\t\t\t\tfor (int i=0; i<absences.length; i++){\n\t\t\t\t\t\tif (Integer.valueOf(absences[i]) == student.getId()){\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tif (!managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\t\t\ttmpAbsence = new Absence();\n\t\t\t\t\t\t\t\ttmpAbsence.setAcademicYear(classroom.getAcademicYear());\n\t\t\t\t\t\t\t\ttmpAbsence.setDateAbsence(date);\n\t\t\t\t\t\t\t\ttmpAbsence.setIdJustify(0);\n\t\t\t\t\t\t\t\ttmpAbsence.setIdUser(student.getId());\n\t\t\t\t\t\t\t\tmanagerRegister.insertAbsence(tmpAbsence);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag){\n\t\t\t\t\t\tif (managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\t\tmanagerRegister.deleteAbsence(tmpRegisterLine.getAbsence());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\tmanagerRegister.deleteAbsence(tmpRegisterLine.getAbsence());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tflag = false;\n\t\t\t\t\n\t\t\t\t//Verifico se per lo studente e' stata inserito o meno un ritardo\n\t\t\t\tif (delays != null){\n\t\t\t\t\tfor (int i=0; i<delays.length; i++){\n\t\t\t\t\t\tif (Integer.valueOf(delays[i]) == student.getId()){\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tif (!managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\t\t\ttmpDelay = new Delay();\n\t\t\t\t\t\t\t\ttmpDelay.setAcademicYear(classroom.getAcademicYear());\n\t\t\t\t\t\t\t\ttmpDelay.setDateDelay(date);\n\t\t\t\t\t\t\t\ttmpDelay.setIdUser(student.getId());\n\t\t\t\t\t\t\t\ttmpDelay.setTimeDelay(pRequest.getParameter(\"hour_\" + student.getId()));\n\t\t\t\t\t\t\t\tmanagerRegister.insertDelay(tmpDelay);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttmpDelay = tmpRegisterLine.getDelay();\n\t\t\t\t\t\t\t\ttmpDelay.setTimeDelay(pRequest.getParameter(\"hour_\" + student.getId()));\n\t\t\t\t\t\t\t\tmanagerRegister.updateDelay(tmpDelay);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag){\n\t\t\t\t\t\tif (managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\t\tmanagerRegister.deleteDelay(tmpRegisterLine.getDelay());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\tmanagerRegister.deleteDelay(tmpRegisterLine.getDelay());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\n\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + e.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + e.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c7b"},"name":"ServletShowJustifyList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowJustifyList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6666791203700528449L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\t\n\t\tString gotoPage = \"./registerManagement/showJustifyList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister  managerRegister= ManagerRegister.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\tString student =pRequest.getParameter(\"student\");\n\t\t\n\t\tint st = Integer.parseInt(student);\n\t\tClassroom classroom=(Classroom)session.getAttribute(\"classroom\");\n\t\t\n\t\t\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\tUser userStudent=managerUser.getUserById(st);\n\t\t\t\n\t\t\tCollection<Absence> absenceList =(Collection<Absence>)managerRegister.getAbsenceByIDUserAndAcademicYear(st, classroom.getAcademicYear());\n\t\t\tsession.setAttribute(\"absenceList\", absenceList);\n\t\t\tsession.setAttribute(\"utente\", userStudent);\n\t\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();}\n\t\t\n\t\t\n\t}\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c7c"},"name":"PermissionException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un utente\n  * tenta di compiere un'operazione per la quale non ha il permesso.\n  */\npublic class PermissionException extends Exception {\n\t\n\tprivate static final long serialVersionUID = 1881009447251825664L;\n\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t */\n\tpublic PermissionException() {\n\t\tsuper(\"Permission Denied!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic PermissionException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c7d"},"name":"ServletShowStudentsByClass.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.*;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowStudentsByClass extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli alunni associati ad una Classe.\n\t * \n\t * @author Giulio D'Amora\n\t * \n\t */\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2020233250419553067L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showStudentsByClass.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tint idClassroom = Integer.valueOf(pRequest\n\t\t\t\t\t.getParameter(\"idClassroom\"));\n\t\t\tClassroom classroom = ManagerClassroom.getInstance().getClassroomByID(idClassroom);\n\t\t\tCollection<UserListItem> students = (Collection<UserListItem>) managerUser\n\t\t\t\t\t.getStudentsByClassroomId(idClassroom);\n\t\t\tsession.setAttribute(\"StudentList\", students);\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c7e"},"name":"MailUtility.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.utility;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.Properties;\nimport javax.mail.*;\nimport javax.mail.internet.*;\n\n\npublic class MailUtility {\n\n\tpublic static void sendMail(String pSender, String pReceiver, String pSubject, String pText) throws MessagingException, UnsupportedEncodingException {\n\t\t\n\t\t// Creazione di una mail session\n\t\tProperties props = new Properties();\n\t\tprops.put(\"mail.smtp.host\", Utility.getServerSmtp());\n\t\tSession session = Session.getDefaultInstance(props);\n\n\t\t// Creazione del messaggio da inviare\n\t\tMimeMessage message = new MimeMessage(session);\n\t\tmessage.setSubject(pSubject);\n\t\tmessage.setText(pText);\n\n\t\t// Aggiunta degli indirizzi del mittente e del destinatario\n\t\tInternetAddress fromAddress = new InternetAddress(pSender);\n\t\tInternetAddress toAddress = new InternetAddress(pReceiver);\n\t\tmessage.setFrom(fromAddress);\n\t\tmessage.setRecipient(Message.RecipientType.TO, toAddress);\n\n\t\t// Invio del messaggio\n\t\tTransport.send(message);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c7f"},"name":"DefaultException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione predefinita generata dal sistema.\n  */\npublic class DefaultException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -8985617134055655964L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic DefaultException() {\n\t\tsuper();\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DefaultException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c80"},"name":"Votes.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\nimport smos.exception.InvalidValueException;\n\n/**\n * \n * Classe utilizzata per modellare una voto.\n * \n * @author Luigi Colangelo \n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class Votes implements Serializable {\n\n\t/**\n\t * Classe utilizzata per modellare un voto\n\t * \n\t */\n\tprivate static final long serialVersionUID = 3014235634635608576L;\n    private int id_votes;\n    private int id_user;\n    private int teaching;\n    private int written;\n    private int oral;\n    private int laboratory;\n    private int accademicYear;\n    private int turn;\n    \n    /**\n     * Il costruttore della classe\n     */\n    public Votes(){\n    \tid_votes=0;\n    }\n    \n    /**\n     * Metodo che restituisce l'id del voto.\n     * @return l'id del voto\n     */\n\tpublic int getId_votes() {\n\t\treturn id_votes;\n\t}\n\t\n\t/**\n\t * Metodo che setta l'id del voto\n\t * @param pId_votes\n     *             l'id da settare\n\t */\n\tpublic void setId_votes(int pId_votes) {\n\t\tthis.id_votes = pId_votes;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'id dell'utente collegato al voto\n\t * @return l'id dell'utente\n\t */\n\tpublic int getId_user() {\n\t\treturn id_user;\n\t}\n\t\n\t/**\n\t * Metodo che setta l'id dell'utente relativo al voto\n\t * @param pId_user\n\t *               l'id da settare\n\t */\n\tpublic void setId_user(int pId_user) {\n\t\tthis.id_user = pId_user;\n\t}\n\t\n\t/**\n\t * metodo che restituisce il codice dell'insegnamento del voto\n\t * @return il metodo dell'insegnamento\n\t */\n\tpublic int getTeaching() {\n\t\treturn teaching;\n\t}\n\t\n\t/**\n\t * Metodo che setta il codice dell'insegnamento relativo al voto\n\t * @param pTeaching\n\t *              il codice dell'insegnamento\n\t */\n\tpublic void setTeaching(int pTeaching) {\n\t\tthis.teaching = pTeaching;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto dello scritto \n\t * @return il voto nello scritto \n\t */\n\tpublic int getWritten() {\n\t\treturn written;\n\t}\n\t\n\t/**\n\t * Metodo che setta il voto dello scritto, controllando che esso sia compreso tra 0 e 10\n\t * @param pWritten\n\t */\n\tpublic void setWritten(int pWritten) throws InvalidValueException {\n\t\tif (pWritten < 0 || pWritten > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.written = pWritten;\n\t}\n\t\n\t/**\n\t *  metodo che restituisce il voto dell' orale\n\t * @return il voto dell'orale\n\t */\n\tpublic int getOral() {\n\t\treturn oral;\n\t}\n\t\n\t/**\n\t * Metodo che setta il voto dell'orale, controllando che esso sia compreso tra 0 e 10 \n\t * @param pOral\n\t *            il voto dell'orale da settare\n\t */\n\tpublic void setOral(int pOral) throws InvalidValueException{\n\t\tif (pOral < 0 || pOral > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.oral = pOral;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto del laboratorio\n\t * @return il voto del laboratorio\n\t */\n\tpublic int getLaboratory() {\n\t\treturn laboratory;\n\t}\n\t\n\t/**\n\t * metodo che setta il voto del laboratorio, controllando che esso sia compreso tra 0 e 10\n\t * @param pLaboratory\n\t *                 il voto del laboratorio da settare\n\t */\n\tpublic void setLaboratory(int pLaboratory)throws InvalidValueException {\n\t\tif (pLaboratory < 0 || pLaboratory > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.laboratory = pLaboratory;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'anno accademico del voto\n\t * @return l'anno accademico\n\t */\n\tpublic int getAccademicYear() {\n\t\treturn accademicYear;\n\t}\n\t\n\t/**\n\t * metodo che setta l'anno accademico del voto\n\t * @param pAccademicYear\n\t */\n\tpublic void setAccademicYear(int pAccademicYear) {\n\t\tthis.accademicYear = pAccademicYear;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il quadrimestre del voto \n\t * @return il semestre del voto (0 o 1)\n\t */\n\tpublic int getTurn() {\n\t\treturn turn;\n\t}\n\t\n\t/**\n\t * Metodo che setta il quadrimestre del voto\n\t * @param pTurn\n\t *            il semestre del voto da settare\n\t */\n\tpublic void setTurn(int pTurn) {\n\t\tthis.turn = pTurn;\n\t}\n\t\n\tpublic String toString(){\n\t\treturn(\"id voto= \"+id_votes+\" id user= \"+id_user+\" id insegnamento= \"+teaching+\" scritto= \"+written+\" orale= \"+oral+\" laboratorio= \"+laboratory+\" anno accademico= \"+accademicYear+\" quadrimestre= \"+turn);\n\t}\n    \n \n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c81"},"name":"ServletShowClassroomList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8468821050771730936L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/classroomManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\t\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(Integer.valueOf(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c82"},"name":"managerUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c57"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c58"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n\n<%@ page import=\"smos.bean.*\" %>\n<%@ page import=\"smos.storage.ManagerUser\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"display\" uri=\"http://displaytag.sf.net\" %>\n<%@ page import=\"smos.utility.Utility\"%>\n\n<%\n\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\tif ((loggedUser == null) || ((!ManagerUser.getInstance().isAdministrator(loggedUser)))) {\n\t\tresponse.sendRedirect(\"../index.htm\");\n\t\treturn;\n\t}\n%>\n\n<html>\n<head>\n\n\t<title>School MOnitoring System</title>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" >\n\t<link rel=\"stylesheet\" href=\"../../stylesheets/generic.css\" type=\"text/css\">\n\t<link rel=\"stylesheet\" href=\"../../stylesheets/display.css\" type=\"text/css\">\n</head>\n\n<body>\n\t\t\n\t  <div id=\"container\">\n\t  \n\t  \t   <div id=\"header\">\n\t\t   \t    \n\t\t\t</div>\n\t\t   \t      \n\t\t\t<div id=\"content_center\" style=\"overflow-y:scroll;\">\n\t\t    \n            <div id=\"navigation\">\n           <a class=\"genericLink\" href=\"<% if (ManagerUser.getInstance().isAdministrator(loggedUser)){%>../../homePage/homeAdmin.jsp<%}%>\">Home</a> -> <font style=\"color:#0066FF; font-size:9pt\">Gestione Utenti</font>\n           </div>\n            \n            <div id=\"userspace\">\n\t\t\t\t User: <b><%=loggedUser.getFirstName() + \" \" + loggedUser.getLastName()%></b><br>\n                 [<a style=\"font-size:11px\" class=\"genericLink\" href=\"../../logout\">Esci</a>, <a style=\"font-size:11px\" class=\"genericLink\" href=\"../userManagement/alterPersonalDate.jsp\">Modifica Password</a>]\n\t\t\t</div>\n           \n\t\t  \n\n\t\t   <h1 align=\"left\"> GESTIONE UTENTI </h1>\n\n           <table id=\"transparent\" align=\"center\">\n           <tr id=\"transparent\">\n           <td id=\"transparent\">\n\t\t<% if (ManagerUser.getInstance().isAdministrator(loggedUser)) {%>\n           <p class=\"button\"><a class=\"menuLink\" href=\"../userManagement/insertUser.jsp\">Nuovo Utente</a></p>\n\t\t<%}%>\n           </td>\n           </tr>\n           </table>\n\t\t   \n\t\t   <br>\n\t\t   <display:table name=\"sessionScope.userList\" pagesize=\"15\" sort=\"list\" id=\"user\" defaultsort=\"1\" class=\"datatable\" export=\"true\">\n\t\t\t\t<display:setProperty name=\"basic.msg.empty_list\">\n\t\t\t\t\t<caption>\n\t\t\t\t\t\t<p>Non ci sono utenti da visualizzare</p>\n\t\t\t\t\t</caption>\n\t\t\t\t</display:setProperty>\n\t\t\t\t\n    \t\t\t<display:setProperty name=\"export.pdf\" value=\"true\"/>\t\t\t\t\n\t\t\t\t<display:column property=\"name\" title=\"Nome\" style=\"width:200px\" sortable=\"true\" headerClass=\"tdHeaderColumn\"/>\n\t\t\t\t<display:column property=\"EMail\" style=\"width:200px\" title=\"e-mail\" sortable=\"true\" headerClass=\"tdHeaderColumn\"/>\t\n\t\t\t\t\n\t\t\t\t<display:column style=\"width:25px\" title=\"Visualizza\" sortable=\"false\" headerClass=\"tdHeaderColumn\"> \n\t\t\t\t<%  if (((UserListItem)user).getId()!=0) { %>\n\t\t\t\t\t<a href=\"../../showUserDetails?userId=<%=((UserListItem)user).getId()%>\"><img src=\"../../images/details.jpg\" border=\"none\"></a>\n\t\t\t\t<% } %>\n\t\t\t\t</display:column>\n\t       \t</display:table>\n\t\t\t\t\n\t\t   </div>\n\t\t   \n\t\t   <div id=\"footer\">\n\t\t   \t\t<p><%= Utility.getTextFooter() %></p>\n\t\t   </div>\n\t  \n\t  </div>\n\n</body>\n</html>"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c83"},"name":"ServletShowUserList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli utenti.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserList extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/managerUser.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<UserListItem> userList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error0.jsp\";\n\t\t\t} \n\t\t\t\t\n\t\t\tuserList = managerUser.getUserList();\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"userList\", userList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error1.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error2.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error3.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error4.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error5.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c84"},"name":"AdaptorException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * AdaptorException\n *\n */\n\npackage smos.storage.connectionManagement.exception;\n\nimport java.rmi.RemoteException;\n\n/**\n * Thrown when a problem occurs running code in ensj.\n */\npublic class AdaptorException extends RemoteException {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \n     */\n    public AdaptorException() {\n        super();\n    }\n\n    /**\n     * @param pMessage\n     */\n    public AdaptorException(String pMessage) {\n        super(pMessage + buildLabel());\n    }\n\n    /**\n     * @param pMessage\n     * @param pParentException\n     */\n    public AdaptorException(String pMessage, Exception pParentException) {\n        super(pMessage + buildLabel(), pParentException);\n    }\n\n    /**\n     * @param pParentException\n     */\n    public AdaptorException(Exception pParentException) {\n        super(buildLabel(), pParentException);\n    }\n\n    private static String buildLabel() {\n        return \" [1]\";\n    }\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c85"},"name":"ServletShowTeacherTeachingFormByClass.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeacherTeachingFormByClass extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t//User teacher = (User) session.getAttribute(\"user\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// recuperiamo l'id della classe selezionata\n\t\t\tint selectedClassId = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t\t//Calcoliamo l'elenco degli insegnamenti associati alla class eselezionata\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(selectedClassId);\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tClassroom selectedClass = ManagerClassroom.getInstance().getClassroomByID(selectedClassId);\n\t\t\tsession.setAttribute(\"selectedClass\", selectedClass);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c86"},"name":"ServletShowNoteDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowNoteDetails extends HttpServlet {\n\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 7648669052646601677L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tif(pRequest.getParameter(\"update\")==null){\n\t\t\t\tUser student =(User) session.getAttribute(\"student\"); \n\t\t\t\t\t//managerUser.getUserById(Integer.valueOf((String)pRequest.getAttribute(\"student\")));\n\t\t\t\tsession.setAttribute(\"student\", student);\n\t\t\t\tsession.setAttribute(\"idStudent\", student.getId());\n\t\t\t\tsession.setAttribute(\"note\", ((ManagerRegister) managerRegister).getNoteById(Integer.valueOf(pRequest.getParameter(\"noteId\"))));\n\t\t\t\tgotoPage=\"./registerManagement/showNoteDetails.jsp\";\n\t\t\t}else{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNote nNote= new Note();\n\t\t\t\tnNote.setAcademicYear(((Classroom) session.getAttribute(\"classroom\")).getAcademicYear());\n\t\t\t\tnNote.setDateNote(Utility.String2Date(pRequest.getParameter(\"dateNote\")));\n\t\t\t\tnNote.setIdUser((Integer) session.getAttribute(\"idStudent\"));\n\t\t\t\tnNote.setTeacher(pRequest.getParameter(\"noteTeacher\"));\n\t\t\t\tnNote.setDescription(pRequest.getParameter(\"noteDescription\"));\n\t\t\t\tnNote.setIdNote(((Note)session.getAttribute(\"note\")).getIdNote());\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tmanagerRegister.updateNote(nNote);\n\t\t\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\t}catch(MandatoryFieldException e){\n\t\t\t\t\tsession.setAttribute(\"error\", e.getMessage());\n\t\t\t\t\tgotoPage=\"./registerManagement/showNoteDetails.jsp\";\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c87"},"name":"UserTest.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage;\n\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport smos.bean.Address;\nimport smos.bean.Teaching;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class UserTest {\n\n\t/**\n\t * @param args\n\t * @throws InvalidValueException \n\t * @throws ConnectionException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws MandatoryFieldException \n\t */\n\tpublic static void main(String[] args) throws SQLException, EntityNotFoundException, ConnectionException, InvalidValueException, MandatoryFieldException {\n\t\t\n\tUserListItem temp =new UserListItem();\n\ttemp.setId(5);\n\tTeaching teaching = new Teaching();\n\tteaching.setId(3);\n\tManagerVotes mv = ManagerVotes.getInstance();\n\tVotes ghh = new Votes();\n\tghh.setAccademicYear(2134);\n\tghh.setId_user(88);\n\tghh.setLaboratory(3);\n\tghh.setOral(4);\n\tghh.setTeaching(9);\n\tghh.setTurn(2);\n\tghh.setWritten(3);\n\tmv.insert(ghh);\n\t}\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c88"},"name":"ServletRemoveStudentClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletRemoveStudentClassroom extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\t\n\t\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\tClassroom classroom = (Classroom)session.getAttribute(\"classroom\");\n\t\t\tint idClassroom= classroom.getIdClassroom();\n\t\t\t\n\t\t\tCollection <UserListItem> studentClass= (Collection<UserListItem>)managerUser.getStudentsByClassroomId(idClassroom);\n\t\t\tIterator<UserListItem> itStudent = null;\n\t\t\tif (studentClass != null){\n\t\t\t\titStudent = studentClass.iterator();\n\t\t\t}\n\t\t\t\t\n\t\t\twhile((itStudent != null) && (itStudent.hasNext())){ \n\t\t\t\tUserListItem stud = (UserListItem)itStudent.next();\n\t\t\t\tif(stud.getId()==user.getId())\n\t\t\t\t\tmanagerUser.removeStudentClassroom(user, idClassroom);\n\t\t\t}\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c89"},"name":"ManagerAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.storage;\nimport smos.bean.Address;\nimport smos.bean.Teaching;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n*\n* Classe manager degli indirizzi \n*\n*/\n\npublic class ManagerAddress {\n\n\tprivate static ManagerAddress instance;\n\t\n     /**\n\t * Il nome della tabella degli indirizzi\n\t */\n\tpublic static final String TABLE_ADDRESS = \"address\";\n\tpublic static final String TABLE_ADDRESS_HAS_TEACHING = \"address_has_teaching\";\n\t\n\tprivate ManagerAddress() {\n\t\tsuper();\n\t}\n\t\n\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerAddress getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerAddress();\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t/**\n\t * Verifica l'esistenza di un indirizzo nel database.\n\t * \n\t * @param pAddress\n\t *            L'indirizzo da controllare.\n\t * @return Ritorna true se esiste già l'indirizzo passato come parametro,\n\t * \t\t\tfalse altrimenti.\n\t *  \n\t * @throws MandatoryFieldException \n\t * @throws SQLException\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException \n\t * @throws ConnectionException\n\t * @throws SQLException \n\t */\n\t\n\tpublic synchronized boolean hasTeaching(Teaching pTeaching, Address pAddress)\n\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\tInvalidValueException {\nConnection connect = null;\nboolean result = false;\nif (pTeaching.getId() <= 0)\n\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\ntry {\n\tconnect = DBConnection.getConnection();\n\tif (connect == null)\n\t\tthrow new ConnectionException();\n\n\t// Preparimao la stringa sql\n\tString sql = \"SELECT * FROM \"\n\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t+\" AND id_address = \"\n\t\t\t+ Utility.isNull(pAddress.getIdAddress());\n\t// Inviamo la Query al database\n\tResultSet pRs = Utility.queryOperation(connect, sql);\n\tif (pRs.next())\n\t\tresult = true;\n\n\treturn result;\n\n} finally {\n\t// rilasciamo le risorse\n\tDBConnection.releaseConnection(connect);\n\n}\n}\n\n\tpublic synchronized boolean exists (Address pAddress) throws MandatoryFieldException, ConnectionException, SQLException {\n\tboolean result= false;\n\tConnection connect = null;\n\t\n\tif (pAddress.getName() == null)\n\t\tthrow new MandatoryFieldException(\"Specificare il nome.\");\n\ttry{\n\t\t//Otteniamo la connessione al database\n\t\tconnect= DBConnection.getConnection();\n\t\t\n\t\tif (connect == null)\n\t\t\tthrow new ConnectionException();\n\t\t\n\t\tString sql =\" SELECT * FROM \"\n\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t+ \" WHERE name = \"\n\t\t+ Utility.isNull(pAddress.getName());\n\t\t\n\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\t\t\n\t\tif(tRs.next())\n\t\t\tresult = true;\n\t\t\n\t\treturn result;\n\t\t\n\t}\n\tfinally{\n\t\tDBConnection.releaseConnection(connect);\n\t}\n\t}\n\t/**\n\t * Inserisce un nuovo indirizzo nella tabella address.\n\t * \n\t * @param pAddress \n\t * \t\t\tL'indirizzo da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException \n\t * @throws EntityNotFoundException  \n\t * @throws InvalidValueException \n\t */\n\t\n\tpublic synchronized void insert(Address pAddress) \n\tthrows MandatoryFieldException, ConnectionException, \n\tSQLException, EntityNotFoundException, \n\tInvalidValueException{\n\tConnection connect= null;\ntry{\n// controllo dei campi obbligatori\nif(pAddress.getName()==null)\n\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\tconnect = DBConnection.getConnection();\nif (connect==null)\n\tthrow new ConnectionException();\n\t//Prepariamo la stringa Sql\n\tString sql =\n\t\"INSERT INTO \" \n\t+ ManagerAddress.TABLE_ADDRESS \n\t+ \" (name) \" \n\t+ \"VALUES (\" \n\t+ Utility.isNull(pAddress.getName()) \n\t+ \")\";\n\n\tUtility.executeOperation(connect,sql);\n\n\tpAddress.setIdAddress(Utility.getMaxValue(\"id_address\",ManagerAddress.TABLE_ADDRESS));\n\n\t}finally {\n\t\t//rilascia le risorse\n\n\t\tDBConnection.releaseConnection(connect);\n}\n}\n\t/**\n\t * Elimina un indirizzo dalla tabella address.\n\t * \n\t * @param pAddress \n\t * \t\t\tL'indirizzo da eliminare.\n\t * \n\t * @throws MandatoryFieldException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws ConnectionException \n\t * @throws InvalidValueException \n\t * \n\t */\n\tpublic synchronized void delete (Address pAddress) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\t\n\t\ttry {\n\t\t\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t\t\t\t+ \" WHERE id_address = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}  \n\t\tfinally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\tpublic synchronized void assignTeachingAsAddress (Address pAddress, Teaching pTeaching) throws ConnectionException, \n\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException, DuplicatedEntityException {\nConnection connect = null;\nManagerAddress managerAddress = ManagerAddress.getInstance();\nif(managerAddress.hasTeaching(pTeaching, pAddress))\n\tthrow new DuplicatedEntityException(\"Questo indirizzo ha già quest'insegnamento associato\");\n\ntry {\n\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\tconnect = DBConnection.getConnection();\n\t\t//Prepariamo la stringa SQL\n\t\tString sql = \"INSERT INTO \" \n\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t\t+ \" (id_address, id_teaching) \"\n\t\t\t\t\t+ \" VALUES( \"\n\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress())\n\t\t\t\t\t+ \" , \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t\t\t+ \" )\";\n\t\n\t\tUtility.executeOperation(connect, sql);\n}  \nfinally {\n\t//rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\tpublic synchronized void removeTeachingAsAddress (Address pAddress, Teaching pTeaching) throws ConnectionException, \n\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\nConnection connect = null;\nManagerAddress managerAddress = ManagerAddress.getInstance();\nif(!managerAddress.hasTeaching(pTeaching, pAddress))\n\tthrow new EntityNotFoundException(\"Questo indirizzo non contiene l'insegnamento da rimuovere\");\n\ntry {\n\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\tconnect = DBConnection.getConnection();\n\t\t//Prepariamo la stringa SQL\n\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t\t+ \" WHERE id_address= \"\n\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress())\t\t\n\t\t\t\t\t+ \" AND id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\t\n\t\tUtility.executeOperation(connect, sql);\n}  \nfinally {\n\t//rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\n\t/**\n\t * Ritorna l'id dell'indirizzo passato come parametro.\n\t * \n\t * @param pAddress\n\t *            L'indirizzo di cui si richiede l'id.\n\t * @return Ritorna l'id dell'indirizzo passato come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized int getAddressId(Address pAddress)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tint result = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tif (pAddress == null)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'indirizzo passato come parametro.\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_address FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS\n\t\t\t\t+ \" WHERE name = \" \n\t\t\t\t+ Utility.isNull(pAddress.getName());\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getInt(\"id_address\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna l'indirizzo corrispondente all'id passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna l'indirizzo associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException \n\t */\n\tpublic synchronized Address getAddressById (int pIdAddress) throws ConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\tAddress result = null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t\t\t\t\n\t\t\tif (pIdAddress <= 0) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS\n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress);\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\t\n\t\t\tif (pRs.next()) \n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'utente!\");\n\t\t\t\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna l'insieme di tutti gli indirizzi presenti nel database.\n\t * \n\t * @return Ritorna una collection di indirizzi.\n\t * \n\t * @throws ConnectionException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws InvalidValueException \n\t */\n\tpublic synchronized Collection<Address> getAddressList() throws ConnectionException, EntityNotFoundException, SQLException, InvalidValueException{\n\t\tConnection connect = null;\n\t\tCollection<Address> result = new Vector<Address>();;\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t//Prepariamo la stringa sql\n\t\t\tString sql = \"SELECT * \"  \n\t\t\t\t+ \" FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t+ \" ORDER BY id_address\";\n\t\t\t\t\n\t\t\t//Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\t\t\t\n\t\t\tif (tRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\t\t\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t//rilascia le risorse\t\t\t\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna il nome dell'indirizzo corrispondente all'id \n\t * passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna una stringa contenente il nome dell'indirizzo.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized String getAddressNameById(int pIdAddress) throws EntityNotFoundException, ConnectionException, SQLException{\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIdAddress <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'utente passato come parametro \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT name FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = tRs.getString(\"name\");\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Ritorna una collection con gli id degli insegnamenti associati all'id \n\t * passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna una collection con di int \n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tpublic synchronized Collection<Integer> getAddressTechings(int pIdAddress) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Integer> result;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIdAddress <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'utente passato come parametro \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT id_teaching FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tresult = this.loadIntegersFromRs(tRs);\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/*\n\t * Consente la lettura di un record dal ResultSet.\n\t */\n\tprivate Address loadRecordFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tAddress address = new Address();\n\t\taddress.setName(pRs.getString(\"name\"));\n\t\taddress.setIdAddress(pRs.getInt(\"id_address\"));\n\t\treturn address;\n\t}\n\t\n\t/*\n\t * Consente la lettura dei record dal ResultSet.\n\t */\n\tprivate Collection<Address> loadRecordsFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Address> result = new Vector<Address>();\n\t\tdo  {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\t\n\tprivate Collection<Integer> loadIntegersFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Integer> result = new Vector<Integer>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(pRs.getInt(\"id_teaching\"));\n\t\t} \n\t\treturn result;\n\t}\n\t\n\t\t\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c8a"},"name":"ServletAssignParentStudent.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet  che modifica il record dello studente con l'id del padre.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAssignParentStudent extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = -4507225018030147979L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\tint idParent=user.getId();\n\t\t\t\n\t\t\tCollection<UserListItem> students = new Vector<UserListItem>();\n\t\t\tIterator<UserListItem> itStu = null;\n\t\t\t\n\t\t\tstudents = managerUser.getStudents();\n\t\t\t\n\t\t\t\n\t\t\tString[] selectedStudent = pRequest.getParameterValues(\"selectedStudent\");\n\t\t\tString[] unselectedStudent = pRequest.getParameterValues(\"unselectedStudent\");\n\t\t\t\n\t\t\tif (selectedStudent != null) {\n\t\t\t\tint selectedlength = selectedStudent.length;\n\t\t\t\tUserListItem tmp = null;\n\t\t\t\tUser stu=null;\n\t\t\t\tint idStudent=0;\n\t\t\t\tfor (int i = 0; i < selectedlength; i++) {\n\t\t\t\t\titStu = students.iterator();\n\t\t\t\t\tString dd = selectedStudent[i];\n\t\t\t\t\tidStudent=Integer.parseInt(dd);\n\t\t\t\t\twhile(itStu.hasNext()){\n\t\t\t\t\t\t tmp = (UserListItem)itStu.next();\n\t\t\t\t\t\tif(tmp.getId()==idStudent){\t\n\t\t\t\t\t\t\tstu=managerUser.getUserById(tmp.getId());//recupero userStudente\t\n\t\t\t\t\t\t\tmanagerUser.assignParent(stu, idParent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t}\n\t\t\tif (unselectedStudent != null) {\n\t\t\t\titStu=null;\n\t\t\t\tint unselectedlength = unselectedStudent.length;\n\t\t\t\tUserListItem tmp = null;\n\t\t\t\tUser stu=null;\n\t\t\t\tint idStudent=0;\n\t\t\t\tfor (int i = 0; i < unselectedlength; i++) {\n\t\t\t\t\titStu = students.iterator();\n\t\t\t\t\tString dd = unselectedStudent[i];\n\t\t\t\t\tidStudent=Integer.parseInt(dd);\n\t\t\t\t\twhile(itStu.hasNext()){\n\t\t\t\t\t\t tmp = (UserListItem)itStu.next();\n\t\t\t\t\t\tif(tmp.getId()==idStudent){\t\n\t\t\t\t\t\t\tstu=managerUser.getUserById(tmp.getId());//recupero userStudente\t\n\t\t\t\t\t\t\tmanagerUser.removeParent(stu);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}  catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} \n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c8b"},"name":"ServletShowClassroomByAcademicYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomByAcademicYear extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8468821050771730936L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showClassroomByAcademicYear.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\t// prendere l'academic year dalla session\n\t\t\tint anno = Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\t\tif (anno != 0){\n\t\t\t\tclassroomList = managerClassroom\n\t\t\t\t\t\t.getClassroomsByAcademicYear(anno);\n\t\t\t}\n\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", anno);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c8c"},"name":"Delay.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class Delay implements Serializable {\n\n\t/**\n\t * Classe che modella un entrata in ritardo di uno studente\n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = 78680884161960621L;\n\n\tprivate int idDelay;\n\tprivate int idUser;\n\tprivate Date dateDelay;\n\tprivate String timeDelay;\n\tprivate int academicYear;\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'id del Ritardo \n\t * @return un intero che rappresenta l'id del ritardo \n\t */\n\tpublic int getIdDelay() {\n\t\treturn idDelay;\n\t}\n\t/**\n\t * Metodo che setta l'id del Ritardo \n\t * @param intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdDelay(int pIdDelay) {\n\t\tthis.idDelay = pIdDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente ritardatario \n\t * @return un intero che rappresenta l'id dello studente\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo al ritardo \n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data del ritardo \n\t * @return una stringa che rappresenta la data del ritardo \n\t */\n\tpublic Date getDateDelay() {\n\t\treturn dateDelay;\n\t}\n\t/**\n\t * Metodo che setta la data del ritardo\n\t * @param una stringa che rappresenta la data del ritardo\n\t */\n\tpublic void setDateDelay(Date pDateDelay) {\n\t\tthis.dateDelay = pDateDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'ora d'entrata dello studente\n\t * @return una stringa che rappresenta l'ora di entrata dello studente ritardatario\n\t */\n\tpublic String getTimeDelay() {\n\t\tif (this.timeDelay.length() > 0){\n\t\t\treturn timeDelay.substring(0, 5);\n\t\t} else {\n\t\t\treturn this.timeDelay;\n\t\t}\n\t}\n\t/**\n\t * Metodo che setta l'ora di entrata dello studente \n\t * @param una stringa che rappresenta l'ora di entrata da settare\n\t */\n\tpublic void setTimeDelay(String pTimeDelay) {\n\t\tthis.timeDelay = pTimeDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo all'assenza\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo all'assenza\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c8d"},"name":"ServletShowClassroomManagement.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomManagement extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -3100959843623661377L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\t\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(Integer.valueOf(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c8e"},"name":"EntityNotFoundException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un'entita'\n  * non viene trovata nel database.\n  */\npublic class EntityNotFoundException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -1236105333523133721L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic EntityNotFoundException() {\n\t\tsuper(\"Object Not Found in Repository!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic EntityNotFoundException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c8f"},"name":"ServletInsertUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.LoginException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire un utente nel DataBase.\n * \n * @author napolitano Vincenzo.\n *\n */\npublic class ServletInsertUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3860569607870099419L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showUserList\";\n\t\tString errorMessage = \"\";\n\t\t\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tUser user = new User();\n\t\t\tuser.setFirstName(pRequest.getParameter(\"firstName\"));\n\t\t\tuser.setLastName(pRequest.getParameter(\"lastName\"));\n\t\t\tuser.setCell(pRequest.getParameter(\"cell\"));\n\t\t\tuser.setEMail(pRequest.getParameter(\"eMail\"));\n\t\t\t\n\t\t\t/*\n\t\t\t * verifichiamo che la login sia unica.\n\t\t\t */\n\t\t\tString login = pRequest.getParameter(\"login\");\n\t\t\tuser.setLogin(login);\n\t\t\t\n\t\t\tif (managerUser.existsLogin(user)) \n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\t\n\t\t\tif (pRequest.getParameter(\"password\").equals(pRequest.getParameter(\"password1\"))){\n\t\t\t\t\t\tuser.setPassword((pRequest.getParameter(\"password\")));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthrow new LoginException(\"I valori inseriti per la password non coincidono!\");\n\t\t\t}\n\t\t\t//inserimento utente\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.insert(user);\n\t\t\t\tsession.setAttribute(\"user\", user);\n\t\t\t\n\t\t\t\t\n\t\t\t}else \n\t\t\t\tthrow new DuplicatedEntityException(\"Utente gia' esistente\");\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (LoginException loginException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + loginException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tloginException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c90"},"name":"UserListItem.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c57"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c58"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\n/**\n * Classe utilizzata per modellare le informazioni principali \n * di un utente.\n */\npublic class UserListItem implements Serializable{\n\n\tprivate static final long serialVersionUID = 3436931564172045464L;\n\n\tprivate String name;\n\tprivate String eMail;\n\tprivate int id;\n\t\n\t\n\t\n\t/**\n\t * @return Ritorna l'id dell'utente.\n\t */\n\tpublic int getId() {\n\t\treturn this.id;\n\t}\n\t\n\t/**\n\t * Setta l'id dell'utente.\n\t * @param pId\n\t * \t\t\tL'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id = pId;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\t\n\t/**\n\t * Setta il nome dell'utente.\n\t * @param pName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\n\t/**\n\t * @return the eMail\n\t */\n\tpublic String getEMail() {\n\t\treturn this.eMail;\n\t}\n\n\t/**\n\t * @param mail the eMail to set\n\t */\n\tpublic void setEMail(String pMail) {\n\t\tthis.eMail = pMail;\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c91"},"name":"ServletShowReports.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.application.reportManagement;\n\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli insegnamenti.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowReports extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1361713427864776624L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showReports.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Votes> votesList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tint studentId = Integer.valueOf(pRequest.getParameter(\"student\"));\n\t\t\tInteger year=(Integer) session.getAttribute(\"selectedYear\");\n\t\t\tInteger turn=Integer.valueOf(pRequest.getParameter(\"q\"));\n\t\t\tsession.setAttribute(\"q\", turn);\n\t\t\tvotesList = managerVotes.getVotesByUserIdYearTurn(studentId,year,turn);\n\t\t\tUser u = (User) managerUser.getUserById(studentId);\n\t\t\tUserListItem st=new UserListItem();\n\t\t\tst.setName(u.getName());\n\t\t\tst.setEMail(u.getEMail());\n\t\t\tst.setId(u.getId());\n\t\t\tsession.setAttribute(\"std\", st);\n\t\t\tsession.setAttribute(\"votesList\", votesList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c92"},"name":"ServletAlterPersonalDate.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c57"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c58"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6b"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet di modifica Password dell'utente loggato.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAlterPersonalDate extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser user = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\n\t\t\t//verifichiamo che la login sia unica.\n\t\t\tif (managerUser.existsLogin(user))\n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\tuser.setPassword(pRequest.getParameter(\"pass\"));\n\t\t\t//aggiorniamo\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.update(user);\n\t\t\t}else {\n\t\t\t\tint userId = managerUser.getUserId(user);\n\t\t\t\tif (user.getId()==userId)\n\t\t\t\t\tmanagerUser.update(user);\n\t\t\t\telse \n\t\t\t\t\tthrow new DuplicatedEntityException(\"Utente già esistente\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c93"},"name":"ServletUpdateJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletUpdateJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8405877983387271542L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\tJustify justify = (Justify) session.getAttribute(\"justify\");\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tString idClassroom=(String) session.getAttribute(\"idClassroom\");\n\t\tint id= Integer.parseInt(idClassroom);\n\t\tgotoPage+=\"?idClassroom=\"+id;\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tjustify.setAcademicYear(Integer.parseInt((pRequest.getParameter(\"academicYear\"))));\n\t\t\tjustify.setDateJustify(Utility.String2Date(pRequest.getParameter(\"date\")));\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * verifichiamo che la giustifica esista.\n\t\t\t */\n\t\t\n\t\t\tif (!mR.exists(justify)){\n\t\t\t\terrorMessage=\"la giustifica non esiste!!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\t\n\t\t\t}else {//aggiorniamo\n\t\t\t\tmR.updateJustify(justify);\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c94"},"name":"ServletInsertTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.*;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire un insegnamento nel DataBase.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletInsertTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 4519458598257606331L;\n\n\t/**\n\t * \n\t */\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t// String isWizard = \"yes\";\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tTeaching teaching = new Teaching();\n\t\t\tteaching.setName(pRequest.getParameter(\"name\"));\n\n\t\t\tif (!managerTeaching.exists(teaching)) {\n\t\t\t\tmanagerTeaching.insert(teaching);\n\t\t\t\tsession.setAttribute(\"teaching\", teaching);\n\t\t\t\t// session.setAttribute(\"isWizard\", isWizard);\n\n\t\t\t} else\n\t\t\t\tthrow new DuplicatedEntityException(\n\t\t\t\t\t\t\"Insegnamento gia' esistente\");\n\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c95"},"name":"ServletDeleteReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteReport extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli alunni associati ad una Classe.\n\t * \n\t * @author Giulio D'Amora\n\t * \n\t */\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2020233250419553067L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showStudentsByClass.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint year= 0;\n\t\tint turn=0;\n\t\tint studentId=0;\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error2.jsp\";\n\t\t\t}\n\t\t\tUserListItem student = (UserListItem) (session.getAttribute(\"student\"));\n\t\t\tstudentId = student.getId();\n\t\t\tyear=(Integer) session.getAttribute(\"selectedYear\");\n\t\t\tturn=(Integer) session.getAttribute(\"q\");\n\t\t\tmanagerVotes.deleteVotesByUserIdYearTurn(studentId, year, turn);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error1.jsp?Year=\"+year+\"&turn=\"+turn+\"&idStudent=\"+studentId;\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error3.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error4.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error5.jsp?Year=\"+year+\"&turn=\"+turn+\"&idStudent=\"+studentId;\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c96"},"name":"ServletUpdateReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per aggiornare la pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletUpdateReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -1045906657573424217L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showReports\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tIterator<Teaching> itTeaching = teachingList.iterator();\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\t\t\tTeaching teachingTemp = null;\n\t\t\tint idTemp;\n\t\t\tString write, oral, lab;\n\t\t\tgotoPage += \"?student=\" + student.getId() + \"&q=\" + turn;\n\t\t\twhile (itTeaching.hasNext()) {\n\t\t\t\tteachingTemp = itTeaching.next();\n\t\t\t\tidTemp = teachingTemp.getId();\n\t\t\t\twrite = \"scritto_\" + idTemp;\n\t\t\t\toral = \"orale_\" + idTemp;\n\t\t\t\tlab = \"laboratorio_\" + idTemp;\n\t\t\t\twrite = pRequest.getParameter(write);\n\t\t\t\toral = pRequest.getParameter(oral);\n\t\t\t\tlab = pRequest.getParameter(lab);\n\t\t\t\tVotes newVotes = new Votes();\n\t\t\t\t// SE il voto non esiste dobbiamo crearlo\n\t\t\t\tint idVoto = managerVotes.getIdVotes(teachingTemp, year, turn,\n\t\t\t\t\t\tstudent);\n\t\t\t\tint writeInt=0, oralInt=0,labInt=0;\n\t\t\t\tif(write!=\"\")\n\t\t\t\t\twriteInt = Integer.valueOf(write);\n\t\t\t\tif(oral!=\"\")\n\t\t\t\t\toralInt = Integer.valueOf(oral);\n\t\t\t\tif(lab!=\"\")\n\t\t\t\t\tlabInt = Integer.valueOf(lab);\n\t\t\t\tif (idVoto <= 0) {\n\t\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\t\tnewVotes.setAccademicYear(year);\n\t\t\t\t\t\tnewVotes.setId_user(student.getId());\n\t\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\t\tnewVotes.setTeaching(idTemp);\n\t\t\t\t\t\tnewVotes.setTurn(turn);\n\t\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\t\tmanagerVotes.insert(newVotes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Se il voto esiste dobbiamo aggiornarlo\n\t\t\t\telse {\n\t\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\t\tnewVotes = managerVotes.getVotesById(idVoto);\n\t\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\t\tmanagerVotes.update(newVotes);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tmanagerVotes.delete(managerVotes.getVotesById(idVoto));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c97"},"name":"ServletComputateStatistics.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletComputateStatistics extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 6690162445433486239L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./statisticsManagement/showStatistictsByAcademicYear.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tInteger academicYear = Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\tInteger absenceLimit = Integer.valueOf(pRequest.getParameter(\"absenceLimit\"));\n\t\tInteger noteLimit = Integer.valueOf(pRequest.getParameter(\"noteLimit\"));\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tCollection <User> alertStudentAbsence = new Vector<User>();\n\t\t\n\t\tDate today = new Date();\n\t\t\n\t\t\n\t\t\n\t\tint [][] unjustifiedAbsence = null;\n\t\t\n\t\tCollection <User> alertStudentNote = new Vector<User>();\n\t\t\n\t\tint [][] note = null;\n\t\t\n\t\tUser tmpUser = null;\n\t\t\n\t\ttry {\n\t\t\n\t\tif (loggedUser == null) {\n\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\treturn;\n\t\t}\n\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\tif (academicYear == 0){\n\t\t\tacademicYear = today.getYear() + 1900;\n\t\t}\n\t\t\n\t\tCollection <Integer> academicYearList = ManagerClassroom.getInstance().getAcademicYearList();\n\t\t\n\t\tunjustifiedAbsence = managerUser.getHighlightsStudentAbsence(academicYear);\n\t\t\n\t\tif (unjustifiedAbsence != null){\n\t\t\tfor (int i=0; i< unjustifiedAbsence.length; i++){\n\t\t\t\t\tif (unjustifiedAbsence[i][0] >= absenceLimit){\n\t\t\t\t\t\ttmpUser = managerUser.getUserById(unjustifiedAbsence[i][1]);\n\t\t\t\t\t\talertStudentAbsence.add(tmpUser);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tnote = managerUser.getHighlightsStudentNote(academicYear);\n\t\t\n\t\tif (note != null){\n\t\t\tfor (int i=0; i< note.length; i++){\n\t\t\t\t\tif (note[i][0] >= noteLimit){\n\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmpUser = managerUser.getUserById(note[i][1]);\n\t\t\t\t\t\t\n\t\t\t\t\t\talertStudentNote.add(tmpUser);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tsession.setAttribute(\"alertStudentAbsence\", alertStudentAbsence);\n\t\tsession.setAttribute(\"alertStudentNote\", alertStudentNote);\n\t\tsession.setAttribute(\"academicYearList\", academicYearList);\n\t\tsession.setAttribute(\"absenceLimit\", absenceLimit);\n\t\tsession.setAttribute(\"noteLimit\", noteLimit);\n\t\tsession.setAttribute(\"yearSelected\", academicYear);\n\t\t\n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c98"},"name":"ServletLoadReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per caricare la Pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -1045906657573424217L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/updateReport.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Votes> votesList = null;\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Lista Voti\n\t\t\tvotesList = managerVotes.getVotesByUserIdYearTurn(student.getId(),\n\t\t\t\t\tyear, turn);\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tsession.setAttribute(\"votesList\", votesList);\n\t\t\t// provare i dati\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c99"},"name":"ServletAddTeachingAsTeacher.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletAddTeachingAsTeacher extends HttpServlet {\n\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 4931185354259866391L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerClassroom managerClass = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono i 3 Id user class teachings(che non so quanti ne sono)\n\t\t\tint idTeacher = (int) ((User) session.getAttribute(\"user\")).getId();\n\t\t\tUser teacher = managerUser.getUserById(idTeacher); \n\t\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tString[] idTeachingList = pRequest.getParameterValues(\"selectedTeachings\");\n\t\t\tint nTeaching =idTeachingList.length;\n\t\t\tint temp;\n\t\t\t//Collection<Teaching> listSelcected = new Vector<Teaching>();\n\t\t\tif(idTeachingList==null)\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\telse{\n\t\t\t\tfor(int i=0;i<nTeaching;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idTeachingList[i]);\n\t\t\t\t\tif(!managerUser.hasTeaching(teacher,managerTeaching.getTeachingById(temp),managerClass.getClassroomByID(idClass))){\n\t\t\t\t\t\tmanagerUser.assignTeacherAtClassroomTeaching(teacher,idClass,temp);\n\t\t\t\t\t\t//listSelcected.add(managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c9a"},"name":"User.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c57"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c58"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"\tpackage smos.bean;\n\nimport smos.exception.InvalidValueException;\n\nimport java.io.Serializable;\n\n/**\n *  Classe utilizzata per modellare un utente.\n *\n * \n */\npublic class User implements Serializable{\n\t\n\n\tprivate static final long serialVersionUID = 7272532316912745508L;\n\t\n\t\n\tprivate int id;\n\tprivate String login;\n\tprivate String password;\n\tprivate String firstName;\n\tprivate String lastName;\n\tprivate int idParent;\n\tprivate String cell;\n\tprivate String eMail;\n\t\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic User(){\n\t\tthis.id = 0 ;\n\t}\n\t\n\t\n\t/**\n\t * @return Ritorna la login dell'utente.\n\t */\n\tpublic String getLogin() {\n\t\treturn this.login;\n\t}\n\t\n\t/**\n\t * Setta la login dell'utente.\n\t * @param pLogin\n\t * \t\t\tLa login da settare.\n\t * \n\t * @throws InvalidValueException \n\t */\n\tpublic void setLogin(String pLogin) throws InvalidValueException {\n\t\tif(pLogin.length()<=4)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\t\tthis.login = pLogin;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getName() {\n\t\treturn this.lastName + \" \" + this.firstName;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getFirstName() {\n\t\treturn this.firstName;\n\t}\n\t\n\t/**\n\t * Setta il nome dell'utente.\n\t * @param pFirstName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setFirstName(String pFirstName) {\n\t\tthis.firstName = pFirstName;\n\t}\n\t\n\t\n\t/**\n\t * @return Ritorna la password dell'utente.\n\t */\n\tpublic String getPassword() {\n\t\treturn this.password;\n\t}\n\t\n\t/**\n\t * Setta la password dell'utente.\n\t * @param pPassword\n\t * \t\t\tLa password da settare.\n\t * \n\t * @throws InvalidValueException \n\t */\n\tpublic void setPassword(String pPassword) throws InvalidValueException {\n\t\tif(pPassword.length()<=4)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.password = pPassword;\n\t}\n\t\n\t/**\n\t * @return Ritorna il cognome dell'utente.\n\t */\n\tpublic String getLastName() {\n\t\treturn this.lastName;\n\t}\n\t\n\t/**\n\t * Setta il cognome dell'utente.\n\t * @param pLastName\n\t * \t\t\tIl cognome da settare.\n\t */\n\tpublic void setLastName(String pLastName) {\n\t\tthis.lastName = pLastName;\n\t}\n\t\n\t/**\n\t * @return Ritorna l'id dell'utente.\n\t */\n\tpublic int getId() {\n\t\treturn this.id;\n\t}\n\t\n\t/**\n\t * Setta l'id dell'utente.\n\t * @param pId\n\t * \t\t\tL'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id = pId;\n\t}\n\t\n\t/**\n\t * Ritorna una stringa contenente nome e cognome dell'utente.\n\t * @see java.lang.Object#toString()\n\t */\n\tpublic String toString() {\n\t\treturn this.getFirstName() \n\t\t+ \" \" \n\t\t+ this.getLastName();\n\t}\n\t\n\t/**\n\t * @return the eMail\n\t */\n\tpublic String getEMail() {\n\t\treturn this.eMail;\n\t}\n\t/**\n\t * @param pMail the eMail to set\n\t */\n\tpublic void setEMail(String pMail) {\n\t\tthis.eMail = pMail;\n\t}\n\n\n\t/**\n\t * @return the cell\n\t */\n\tpublic String getCell() {\n\t\treturn this.cell;\n\t}\n\n\n\t/**\n\t * @param cell the cell to set\n\t */\n\tpublic void setCell(String pCell) {\n\t\tthis.cell = pCell;\n\t}\n\n\n\t/**\n\t * @return the idParent\n\t */\n\tpublic int getIdParent() {\n\t\treturn this.idParent;\n\t}\n\n\n\t/**\n\t * @param idParent the idParent to set\n\t */\n\tpublic void setIdParent(int pIdParent) {\n\t\tthis.idParent = pIdParent;\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c9b"},"name":"ServletInsertJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletInsertJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1252760418542867296L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\t\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t\tJustify justify=new Justify();\n\t\t\tjustify.setAcademicYear(Integer.parseInt(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\tjustify.setDateJustify(Utility.String2Date(pRequest.getParameter(\"date\")));\n\t\t\t\n\t\t\tjustify.setIdUser(Integer.parseInt(pRequest.getParameter(\"idUser\")));\n\t\t\tString idA= pRequest.getParameter(\"idAbsence\");\n\t\t\tint idAbsence=Integer.parseInt(idA);\n\t\t\t\n\t\t\t//String idC = pRequest.getParameter(\"idClassroom\");\n\t\t\t//int idClassroom= Integer.parseInt(idC);\n\t\t\t\n\t\t\t//gotoPage+=idClassroom;\n\t\t\tAbsence absence = mR.getAbsenceByIdAbsence(idAbsence);\n\t\t\t\n\t\t\tif(!mR.exists(absence)){\n\t\t\t\terrorMessage =  \"assenza non prensente nel db!\";\t\n\t\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t//inserimento giustifica\n\t\t\t\n\t\t\tif(!mR.exists(justify)){\n\t\t\t\tmR.insertJustify(justify, absence);\n\t\t\t\tsession.setAttribute(\"justify\", justify);\n\t\t\t\t\n\t\t\t}else \n\t\t\t\tthrow new DuplicatedEntityException(\"Giustifica gia' esistente\");\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c9c"},"name":"ControlConnection.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage.connectionManagement;\n\n\nimport java.sql.*;\n\n/**\n * Implementazione del thread in grado di mantenere la connessione al database\n * Mysql qualora non vi siano più connessioni attive (risoluzione del problema\n * dell'autoreconnect di Mysql). Tale classe si occupa anche di richimare il\n * metodo di rilascio delle connessioni attive che non hanno eseguito operazioni\n * in un certo intervallo di tempo.\n */\n\npublic class ControlConnection extends Thread {\n    private static ConnectionPoolDataSource manager = null;\n\n    private static int waitTimeout;\n\n    /**\n     * Crea una nuova istanza del Thread.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @param pManager\n     *            il pool delle connessioni attulamente in esecuzione.\n     */\n\n    public ControlConnection(ConnectionPoolDataSource pManager) {\n        ControlConnection.manager = pManager;\n    }\n\n    /**\n     * Crea una nuova istanza del Thread.\n     * \n     * @param pManager\n     *            il pool delle connessioni attulamente in esecuzione.\n     * @param pTime\n     *            Il tempo entro cui ristabilire la connessione con mysql prima\n     *            che scada.Tale valore dovrà essere necessariamente minore del\n     *            valore della variabile globale wait_timeout di Mysql.\n     */\n\n    public ControlConnection(ConnectionPoolDataSource pManager, int pTime) {\n        ControlConnection.waitTimeout = pTime;\n        ControlConnection.manager = pManager;\n    }\n\n    /**\n     * Il thread non fa altro che dormire quando ci sono utenti attivi e\n     * mantenere aperta la connessione con MySQL altrimenti.\n     * \n     */\n\n    public void run() {\n        try {\n            while (true) {\n                if (manager.activeSize() > 0) {\n                    this.setPriority(Thread.MAX_PRIORITY);\n                    manager.clearActive();\n                    this.setPriority(Thread.NORM_PRIORITY);\n                }\n                if (manager.activeSize() == 0) {\n                    while (true) {\n                        try {\n                            manager.closeAllPooledConnections();\n                            Connection con = null;\n                            con = manager.getConnection();\n                            Statement st = con.createStatement();\n                            st.executeQuery(\"show tables\");\n                            manager.release(con);\n                            break;\n                        } catch (Exception e) {\n                            System.out.println(\"Eccezione geneata \"\n                                    + \"nel Thread ControlConnection:\" + e);\n                        }\n                    }\n                    Thread.sleep(waitTimeout);\n                } else {\n                    Thread.sleep(waitTimeout);\n                }\n            }\n        } catch (InterruptedException ex) {\n            System.out.println(\"Thread ControlConnection interrotto:\" + ex);\n        }\n    }\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c9d"},"name":"DBConnection.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * DBConnection\n *\n */\n\npackage smos.storage.connectionManagement;\n\nimport smos.Environment;\nimport smos.utility.Utility;\n\nimport java.sql.*;\nimport java.util.*;\nimport java.io.*;\n\n\n/**\n * Classe che s'interfaccia con il pool di connessioni. In particolare crea un\n * unico oggetto ConnectionPoolDataSource (il pool di connessioni) ed ottiene i\n * suoi parametri di configurazione dal file di properties\n * connection.properties.\n */\n\npublic class DBConnection {\n\n    private static int ACTIVE_TIMEOUT;\n\n    private static String DRIVER_MYSQL = \"\";\n\n    private static String FULL_PATH_DATABASE = \"\";\n\n    private static ControlConnection linker = null;\n\n    private static ConnectionPoolDataSource manager = null;\n\n    private static int MAX_POOL_SIZE;\n\n    private static String PASSWORD = \"\";\n\n    private static int POOL_TIMEOUT;\n\n    private static Properties properties = null;\n\n    private static String USER_NAME = \"\";\n\n    private static int WAIT_TIMEOUT;\n\n    \n   \n    \n    \n    /**\n     * Blocco d'inizializzazione statico che si occupa di generare il pool nel\n     * momento in cui ci sarà una prima invocazione del metodo getConnection()\n     */\n\n    static {\n        try {\n            properties = new Properties();\n            File fileProp = new File(Environment.getPoolPropertiesPath());\n\n            if (fileProp.exists()) {\n                properties.load(new FileInputStream(fileProp));\n\n                DRIVER_MYSQL = properties.getProperty(\"connection.jdbc.name\");\n                if (DRIVER_MYSQL.equals(\"\")) {\n                    DRIVER_MYSQL = Utility.getDriverMySql();\n                }\n\n                FULL_PATH_DATABASE = properties\n                        .getProperty(\"connection.jdbc.fullPath\");\n\n                if (FULL_PATH_DATABASE.equals(\"\")) {\n                    FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n                }\n\n                USER_NAME = properties.getProperty(\"connection.username\");\n                if (USER_NAME.equals(\"\")) {\n                    USER_NAME = Utility.getUserName();\n                }\n\n                PASSWORD = properties.getProperty(\"connection.password\");\n                if (PASSWORD.equals(\"\")) {\n                    PASSWORD = Utility.getPassword();\n                }\n\n                try {\n                    MAX_POOL_SIZE = Integer.parseInt(properties\n                            .getProperty(\"connection.maxPoolSize\"));\n                } catch (Exception ex) {\n                    MAX_POOL_SIZE = Utility.getMaxPoolSize();\n                }\n\n                try {\n                    WAIT_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.waitTimeout\"));\n                } catch (Exception ex) {\n                    WAIT_TIMEOUT = Utility.getWaitTimeout();\n                }\n\n                try {\n                    ACTIVE_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.activeTimeout\"));\n                } catch (Exception ex) {\n                    ACTIVE_TIMEOUT = Utility.getActiveTimeout();\n                }\n\n                try {\n                    POOL_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.poolTimeout\"));\n                } catch (Exception ex) {\n                    POOL_TIMEOUT = Utility.getPoolTimeout();\n                }\n            } else {\n                /* Se il file di properties non esiste carica valori di default */\n\n                DRIVER_MYSQL = Utility.getDriverMySql();\n                FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n                USER_NAME = Utility.getUserName();\n                PASSWORD = Utility.getPassword();\n                MAX_POOL_SIZE = Utility.getMaxPoolSize();\n                WAIT_TIMEOUT = Utility.getWaitTimeout();\n                ACTIVE_TIMEOUT = Utility.getActiveTimeout();\n                POOL_TIMEOUT = Utility.getPoolTimeout();\n            }\n\n            loadPool(); // Crea il manager e prepara il pool di connessioni\n\n        } catch (Exception e) {\n            /* Se un'eccezione viene generata in precedenza */\n\n        \tDRIVER_MYSQL = Utility.getDriverMySql();\n            FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n            USER_NAME = Utility.getUserName();\n            PASSWORD = Utility.getPassword();\n            MAX_POOL_SIZE = 100;\n            WAIT_TIMEOUT = 2000;\n            ACTIVE_TIMEOUT = 240000;\n            POOL_TIMEOUT = 300000;\n            loadPool(); // Crea il manager e prepara il pool di connessioni\n        }\n\n    }\n\n    /**\n     * Restituisce una connessione dal pool.\n     * \n     * @return la connessione se possibile null altrimenti\n     */\n\n    public static Connection getConnection() {\n        try {\n            return manager.getConnection();\n        } catch (SQLException e) {\n            System.out.println(\"Eccezione generata\"\n                    + \"in DBConnection.getConnection() \" + e);\n            return null;\n        }\n    }\n\n    /**\n     * Creazione effettiva del pool di connessione.\n     * \n     */\n    private static void loadPool() {\n        try {\n            manager = new ConnectionPoolDataSource(DRIVER_MYSQL,\n                    FULL_PATH_DATABASE, USER_NAME, PASSWORD, MAX_POOL_SIZE,\n                    POOL_TIMEOUT);\n            manager.setActivedTimeout(ACTIVE_TIMEOUT);\n            linker = new ControlConnection(manager, WAIT_TIMEOUT);\n            linker.start();\n        } catch (Exception e) {\n            System.out.println(\"Impossibile creare il pool\"\n                    + \"di connessioni in DBConnection:\" + e);\n        }\n    }\n\n    /**\n     * Restituisce una connessione al pool che sarà inserita nella lista delle\n     * connesioni pool, ossia quelle riutilizzabili in seguito.\n     * \n     * @param pConnection\n     *            la connessione non più attiva.\n     */\n\n    public static void releaseConnection(Connection pConnection) {\n        manager.release(pConnection);\n    }\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c9e"},"name":"ServletAddRemoveTeachingsAsAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.addressManagement;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletAddRemoveTeachingsAsAddress extends HttpServlet {\n\n\n\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6692711286746163446L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showAddressList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerAddress managerAddress = ManagerAddress.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono l'id dell'address e le due liste di insegnamenti!\n\t\t\tAddress address = (Address) session.getAttribute(\"address\"); \n\t\t\tString[] idSelectedList = pRequest.getParameterValues(\"selectedTeachings\");\n\t\t\tString[] idUnselectedList = pRequest.getParameterValues(\"unselectedTeachings\");\n\t\t\tint nSelected =idSelectedList.length;\n\t\t\tint nUnselected =idUnselectedList.length;\n\t\t\tint temp;\n\t\t\t//Aggiungiamo gli insegnamenti selezionati!!\n\t\t\t\tfor(int i=0;i<nSelected;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idSelectedList[i]);\n\t\t\t\t\tif(!managerAddress.hasTeaching(managerTeaching.getTeachingById(temp), address)){\n\t\t\t\t\t\tmanagerAddress.assignTeachingAsAddress(address, managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//Rimuoviamo gli insegnamenti non selezionati\n\t\t\t\tfor(int i=0;i<nUnselected;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idUnselectedList[i]);\n\t\t\t\t\tif(managerAddress.hasTeaching(managerTeaching.getTeachingById(temp), address)){\n\t\t\t\t\t\tmanagerAddress.removeTeachingAsAddress(address, managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (DuplicatedEntityException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035c9f"},"name":"ServletLogin.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c57"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c58"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6b"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.LoginException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per effettuare il login dell'utente.\n * \n * @author Napolitano Vincenzo.\n */\npublic class ServletLogin extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,HttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\t\t\n\t\t\n\t\t// Ottengo i dati dalla request\n\t\tString login = pRequest.getParameter(\"user\");\n\t\tString password = pRequest.getParameter(\"password\");\n\t\t\n\t\t// Login dell'utente\n\t\ttry {\n\t\t\t\n\t\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\t\n\t\t\tif(managerUser.getUserByLogin(login) != null){\n\t\t\t\n\t\t\t\tUser loggedUser = managerUser.login(login, password);\n\t\t\t\tif (loggedUser != null)\n\t\t\t\t\tsession.setAttribute(\"loggedUser\", loggedUser);\n\t\t\t\telse throw new LoginException(\"Nome Utente e/o Password errati!\");\n\t\t\t\t\n\t\t\t\tif (managerUser.isAdministrator(loggedUser) ){\n\t\t\t\t\tgotoPage=\"./homePage/homeAdmin.jsp\";\n\t\t\t\t}else if (managerUser.isTeacher(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeProfessor.jsp\";\n\t\t\t\t}else if (managerUser.isStudent(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeStudent.jsp\";\n\t\t\t\t}else if (managerUser.isParent(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeParent.jsp\";\n\t\t\t\t}else if (managerUser.isAtaPeople(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeAtaPeople.jsp\";\n\t\t\t\t}else if (managerUser.isDirector(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeDirector.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (LoginException loginException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + loginException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tloginException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca0"},"name":"ServletDeleteNote.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteNote extends HttpServlet {\n\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7968126163648714515L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\n\t\t\tNote toDelete= (Note) session.getAttribute(\"note\");\n\t\t\t\t\n\t\t\tmanagerRegister.deleteNote(toDelete);\n\t\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca1"},"name":"ServletDeleteClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteClassroom extends HttpServlet {\n\n\t/**\n\t *  Servlet per cancellare una classe\n\t *  \n\t *  @author Nicola Pisanti\n\t *  @version 0.9\n\t */\n\tprivate static final long serialVersionUID = 5272269413504847511L;\n\n\t\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\t\n\t\tint  aC=0;\n\t\tString gotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\taC=Integer.valueOf(classroom.getAcademicYear());\n\t\t\tmanagerClassroom.delete(classroom);\n\t\t\tgotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} /*catch (DeleteManagerException deleteManagerException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + deleteManagerException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteManagerException.printStackTrace();\n\t\t} */catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca2"},"name":"ServletProva.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.teachingManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletProva extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -832177625776300783L;\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca3"},"name":"Address.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.bean;\nimport java.io.Serializable;\n\n/**\n *  Classe utilizzata per modellare un indirizzo.\n *\n * \n */\npublic class Address implements Serializable{\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -9194626030239503689L;\n\t\n\tprivate int idAddress;\n\tprivate String name;\n\t\n\t/**\n\t * Il costruttore della classe.\n\t */\n\t\tpublic Address(){\n\t\tthis.idAddress= 0;\n\t}\n\t\t\n\t/**\n\t * @return Ritorna l' id dell' indirizzo.\n\t */\n\t\t\n\tpublic int getIdAddress() {\n\t\treturn idAddress;\n\t}\n\t\n\t/**\n\t * Setta l' id dell' indirizzo.\n\t * @param pIdAddress\n\t * \t\t\tl' id da settare.\n\t */\n\tpublic void setIdAddress(int pIdAddress) {\n\t\tthis.idAddress = pIdAddress;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell' indirizzo.\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Setta il nome dell' indirizzo.\n\t * @param pName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca4"},"name":"ServletShowUserRoleForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare il form di gestione\n * dei ruoli degli utenti.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserRoleForm extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -2210761175435137331L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/userRolez.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\t\n\t\t\n\t\tboolean isTeacherBoolean = false;\n\t\tboolean isAdministratorBoolean = false;\n\t\tboolean isParentBoolean = false;\n\t\tboolean isStudentBoolean = false;\n\t\tboolean isAtaBoolean = false;\n\t\tboolean isDirectorBoolean = false;\n\t\t\n\t\tint isTeacher = 0;\n\t\tint isAdministrator = 0;\n\t\tint isDirector = 0;\n\t\tint isParent = 0;\n\t\tint isStudent = 0;\n\t\tint isAta = 0;\n\t\t\n\t\tUser user = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tuser = (User) session.getAttribute(\"user\");\n\t\t\t//prepariamo i valori da passare alla jsp\n\t\t\tisTeacherBoolean = managerUser.isTeacher(user);\n\t\t\tisAdministratorBoolean = managerUser.isAdministrator(user);\n\t\t\tisAtaBoolean = managerUser.isAtaPeople(user);\n\t\t\tisDirectorBoolean= managerUser.isDirector(user);\n\t\t\tisStudentBoolean= managerUser.isStudent(user);\n\t\t\tisParentBoolean= managerUser.isParent(user);\n\t\t\n\t\t\tisTeacher = Utility.BooleanToInt(isTeacherBoolean);\n\t\t\tisDirector = Utility.BooleanToInt(isDirectorBoolean);\n\t\t\tisAdministrator = Utility.BooleanToInt(isAdministratorBoolean);\n\t\t\tisAta = Utility.BooleanToInt(isAtaBoolean);\n\t\t\tisStudent = Utility.BooleanToInt(isStudentBoolean);\n\t\t\tisParent = Utility.BooleanToInt(isParentBoolean);\n\t\t\t\n\t\t\tgotoPage = \"./persistentDataManagement/userManagement/userRolez.jsp?isTeacher=\"+isTeacher+\"&isAdmin=\"+isAdministrator+\"&isAta=\"+isAta\n\t\t\t+\"&isStudent=\"+isStudent+\"&isParent=\"+isParent+\"&isDirector=\"+isDirector;\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\t\t\treturn;  \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca5"},"name":"TestRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage;\n\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport smos.bean.Absence;\nimport smos.bean.Delay;\nimport smos.bean.Justify;\nimport smos.bean.Note;\nimport smos.bean.RegisterLine;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\n\npublic class TestRegister {\n\n\t// database errato, impossibile inserire null nel campo id_justify di absence\n\tpublic static void main(String[] args) {\n\t\t\n\t\tManagerRegister mr=  ManagerRegister.getInstance();\n\t\t\n\t\tDate datenow= new Date();\n\t\t\n\t\tAbsence absence = new Absence();\t\t\n\t\tabsence.setIdUser(61);\n\t\tabsence.setDateAbsence(datenow);\n\t\tabsence.setIdJustify(0);\n\t\tabsence.setAcademicYear(2009);\n\t\t//absence.setIdAbsence(13);\n\t\t\n\t\t/*\n\t\ttry {\n\t\t\tabsence= mr.getAbsenceByIdAbsence(12);\n\t\t\t\n\t\t} catch (InvalidValueException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (EntityNotFoundException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (ConnectionException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (SQLException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t\t*/\n\t\t\n\t\tJustify justifynew= new Justify();\n\t\tjustifynew.setIdUser(1);\n\t\tjustifynew.setDateJustify(datenow);\n\t\tjustifynew.setAcademicYear(2008);\n\n\t\tjustifynew.setIdJustify(6);\n\t\t\n\t\t\n\t\tDelay delay = new Delay();\n\t\t//delay.setIdDelay(3);\n\t\tdelay.setIdUser(62);\n\t\tdelay.setDateDelay(datenow);\n\t\tdelay.setTimeDelay(\"10:00:00\");\n\t\tdelay.setAcademicYear(2009);\n\t\t\n\t\tNote notenew= new Note();\n\t\tnotenew.setIdUser(2);\n\t\tnotenew.setTeacher(\"boh\");\n\t\tnotenew.setAcademicYear(2009);\n\t\tnotenew.setDateNote(datenow);\n\t\tnotenew.setDescription(\"lo studente dorme in classe\");\n\t\tnotenew.setIdNote(1);\n\t\t\n\t\ttry{\n\t\t\t//mr.insertAbsence(absence);\n\t\t\t//if(mr.exists(absence)) System.out.println(\"esiste\");;\n\t\t\t//mr.deleteAbsence(absence);\n\t\t\t//mr.updateAbsence(absence);\n\t\t\t\n\t\t\tmr.insertDelay(delay);\n\t\t\t//if(mr.exists(delay)) System.out.println(\"esiste\");;\n\t\t\t//mr.updateDelay(delay);\n\t\t\t//mr.deleteDelay(delay);\n\t\t\t\n\t\t\t//mr.insertNote(notenew);\n\t\t\t//mr.deleteNote(notenew);\n\t\t\t\n\t\t\t//mr.insertJustify(justifynew, absence);\n\t\t\t//mr.deleteJustify(justifynew.getIdJustify());\n\t\t\t//if(mr.hasJustify(absence))System.out.println(\"giustificata\");\n\t\t\t\n\t\t\t//absence= mr.getAbsenceByIDUserAndDate(2, \"2009-05-18\");\n\t\t\t//absence= mr.getAbsenceByIdJustify(1);\n\t\t\t//System.out.println(absence.getDateAbsence());\n\t\t\t\n\t\t\t//Collection<Absence> ac= mr.getAbsenceByIDUserAndAcademicYear(2, 2009);\n\t\t\t//for(Absence x : ac) System.out.println(x.getDateAbsence());\n\t\t\t\n\t\t\t//justifynew=mr.getJustifyByAbsence(absence);\n\t\t\t//System.out.println(justifynew.getDateJustify());\n\t\t\t\n\t\t\t//Collection<Note> nc = mr.getNoteByIDUserAndAcademicYear(2, 2009);\n\t\t\t//for(Note x : nc) System.out.println(x.getDescription());\n\t\t\t\n\t\t\t//delay= mr.getDelayByIDUserAndDate(1, datenow);\n\t\t\t//System.out.println(delay.getDateDelay());\n\t\t\t//System.out.println(delay.getTimeDelay());\n\t\t\t\n\t\t\t\n\t\t\t///*\n\t\t\tCollection<RegisterLine> crl = mr.getRegisterByClassIDAndDate(64, datenow );\n\t\t\tfor(RegisterLine x : crl){\n\t\t\t\tSystem.out.println(x.getStudent().getName());\n\t\t\t\tif(mr.hasAbsence(x)){\n\t\t\t\t\tSystem.out.println(\"assente\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(mr.hasAbsence(x));\n\t\t\t\tif(mr.hasDelay(x)){\n\t\t\t\t\tSystem.out.println(\"ritardo\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t//*/\n\t\t\t\n\t\t\tGregorianCalendar gc = new GregorianCalendar();\n\t\n\t\t\tString date=\"\";\n\t\t\tint year=gc.get(GregorianCalendar.YEAR);\n\t\t\t\n\t\t\tint month=gc.get(GregorianCalendar.MONTH)+1;\n\t\t\tString months=\"\";\n\t\t\tif(month<10){\n\t\t\t\tmonths=\"0\"+month;\n\t\t\t}else{\n\t\t\t\tmonths= months+month;\n\t\t\t}\n\t\t\t\n\t\t\tint day=gc.get(GregorianCalendar.DAY_OF_MONTH);\n\t\t\tString days=\"\";\n\t\t\tif(day<10){\n\t\t\t\tdays=\"0\"+day;\n\t\t\t}else{\n\t\t\t\tdays= days+day;\n\t\t\t}\n\t\t\t\n\t\t\tdate= date + year+\"-\"+months+\"-\"+days;\n\t\t\tSystem.out.println(date);\n\t\t\t\n\t\t}catch (Exception e) {\n\t\t\tSystem.out.println(\"errore\");\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t\t\n\t\tSystem.out.println(datenow.toString());\n\t\tSystem.out.println(Utility.isNull(datenow));\n\t\tSystem.out.println(\"TEST COMPLETATO\");\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca6"},"name":"ServletShowUserDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per recuperare i dettagli dell'utente.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserDetails extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1726037792193089501L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showUserDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tint userId = Integer.valueOf(pRequest.getParameter(\"userId\"));\n\t\t\tUser user = managerUser.getUserById(userId);\n\t\t\t\n\t\t\tsession.setAttribute(\"user\",user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca7"},"name":"display.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"\n\n/****************** displaytag stylesheet ****************/\n\ntable.datatable {\n\tborder-color:#89B2DB;\n\tborder-collapse: collapse;\n\tborder-width: 1px;\n\tborder-style:solid;\n\twidth: 80%;\n\tmargin: 5px 0 10px 10% !important;\n\tfont-size: 8pt;\n}\ntable.cardtable {\n\tborder: 1px solid  #CCFFFF ;\n\twidth: 80%;\n\tmargin: 5px 0 10px 10% !important;\n\tfont-size: 8pt;\n}\ntable.simpletable {\n\tborder: 0px;\n\twidth: 80%;\n\tmargin: 0px 0 0px 0 !important;\n\tfont-size: 8pt;\n\n}\ntable.datatable a:active,\ntable.datatable a:link,\ntable.datatable a:visited ,\ntable.cardtable a:active,\ntable.cardtable a:link,\ntable.cardtable a:visited{\n\tcolor:#000000;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\ntable.cardtable a:hover,\ntable.datatable a:hover {\n\tcolor:#1075bd;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\ntable.cardtable td{\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\ttext-align:left;\n\tborder: 1px solid  #89B2DB ;\n\n}\ntable.datatable td{\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\ttext-align:left;\n}\n\n\nthead tr {\n\tbackground-color: #C4CBD0;\n}\n\nth.sorted {\n\tbackground-color:#9ec7e2;\n}\n\nth.sorted a,\nth.sortable a {\n\tcolor:#000000;\n\tbackground-position: right;\n\tdisplay: block;\n}\nth.sorted a:hover,\nth.sortable a:hover {\n\tcolor:#1075bd;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\nth.sortable a {\n\tbackground-image: url(../icons/arrow_off.png);\n\tbackground-repeat: no-repeat;\t\n\tbackground-position:left; /* non supportata da mozilla */\n\n}\n\n\n\nth.order1 a {\n\tbackground-image: url(../images/down_arrow.gif);\n}\n\nth.order2 a {\n\tbackground-image: url(../images/up_arrow.gif);\n}\n\ntr.odd {\n\tbackground-color:#FFFFFF;\n}\n\ntr.tableRowEven, tr.even {\n\tbackground-color: #FFFFFF;\n}\n\ndiv.exportlinks {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\tmargin: 2px 0px 10px 10% ;\n\twidth: 79.5%;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}\n\nspan.export {\n\tpadding: 0 4px 1px 20px;\n\tdisplay: inline;\n\tdisplay: inline-block;\n}\n\nspan.excel {\n\tbackground-image: url(../images/icons/ico_file_excel.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.csv {\n\tbackground-image: url(../images/icons/ico_file_csv.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.xml {\n\tbackground-image: url(../images/icons/ico_file_xml.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.pdf {\n\tbackground-image: url(../images/icons/ico_file_pdf.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.rtf {\n\tbackground-image: url(../images/icons/ico_file_rtf.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.pagebanner {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\twidth: 79.5%;\n\tmargin-top: 10px;\n\tmargin-left:10%;\n\tdisplay: block;\n\tborder-bottom: none;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}\n\nspan.pagelinks {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\twidth: 79.5%;\n\tdisplay: block;\n\tborder-top: none;\n\tmargin-bottom: 5px;\n\tmargin-left:10%;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca8"},"name":"ServletShowUserTeachingForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowUserTeachingForm extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2305151029867525356L;\n\t\n\t\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showTeacherDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tUser user = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tuser = (User) session.getAttribute(\"user\");\n\t\t\t\n\t\t\tif(!managerUser.isTeacher(user)){\n\t\t\t\terrorMessage =  \"L'Utente non è un docente\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\t\n\t\t\t}\n\t\t\t//int idTeacher= user.getId();\n\t\t\t\n\t\t\tCollection<Classroom> classList = managerClassroom.getClassroomsByTeacher(user);\n\t\t\t\n\t\t\t/*\n\t\t\tIterator<Classroom> iteClass = classList.iterator();\n\t\t\tClassroom tmp = null;\n\t\t\twhile(iteClass.hasNext()){\n\t\t\t\ttmp=iteClass.next();\n\t\t\t\tif(tmp.getAcademicYear()!= an){\n\t\t\t\t\tclassList.remove(tmp);\n\t\t\t\t}\n\t\t\t}*/\n\t\t\t//@SuppressWarnings(\"unused\")\n\t\t\t//Collection<Teaching> teachingListByClassroom=null;\n\t\t\t//Collection<Classroom,Teaching> list= new Vector <Classroom,Teaching>();\n\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classList);\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\t\t\treturn;  \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ca9"},"name":"ServletLoadClassByAccademicYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadClassByAccademicYear extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t//Date oggi = new Date();\n\t\t\t// recuperiamo l'anno accademico selezionato\n\t\t\tint selectedAccademicYear = Integer.valueOf(pRequest.getParameter(\"accademicYear\"));\n\t\t\t\n\t\t\t\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\t//Calcoliamo l'elenco delle classi dell'anno accademico selezionato\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(selectedAccademicYear);\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", selectedAccademicYear);\n\t\t\t//session.removeAttribute(\"selectedClass\");\n\t\t\tgotoPage +=(String) session.getAttribute(\"goTo\");\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035caa"},"name":"Justify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class Justify implements Serializable {\n\n\t/**\n\t * Classe che modella una giustifica per un assenza\n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t * \n\t */\n\tprivate static final long serialVersionUID = -4726381877687167661L;\n\n\tprivate int idJustify;\n\tprivate int idUser;\n\tprivate Date dateJustify;\n\tprivate int academicYear;\n\t\n\t/**\n\t * Metodo che restituisce l'id della giustifica\n\t * @return un intero che rappresenta l'id della giustifica\n\t */\n\tpublic int getIdJustify() {\n\t\treturn idJustify;\n\t}\n\t/**\n\t * Metodo che setta l'id della giustifica\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdJustify(int pIdJustify) {\n\t\tthis.idJustify = pIdJustify;\n\t}\n\t/**\n\t * Metodo restituisce l'id dello studente relativo alla giustifica\n\t * @return un intero che rappresenta l'id dello studente \n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo alla giustifica\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data alla quale Ã¨ stata giustificata l'assenza\n\t * @return una stringa che rappresenta la data giustificata\n\t */\n\tpublic Date getDateJustify() {\n\t\treturn dateJustify;\n\t}\n\t/**\n\t * Metodo che setta la data alla quale Ã¨ stata giustificata l'assenza\n\t * @param una stringa che rappresenta la data da settare\n\t */\n\tpublic void setDateJustify(Date pDateJustify) {\n\t\tthis.dateJustify = pDateJustify;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo alla giustifica\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo alla giustifica\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cab"},"name":"Note.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Classe che modella una nota sul registro \n * @author Nicola Pisanti\n * @version 1.0\n */\n\n\npublic class Note implements Serializable{\n\n\tprivate static final long serialVersionUID = 5953926210895315436L;\n\t\n\tprivate int idNote;\n\tprivate int idUser;\n\tprivate Date dateNote;\n\tprivate String description;\n\tprivate String teacher;\n\tprivate int academicYear;\n\t\n\t\n\tpublic Note(){\n\t\t\n\t}\n\t\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'id della nota\n\t * @return un intero che rappresenta l'id della nota\n\t */\n\tpublic int getIdNote() {\n\t\treturn idNote;\n\t}\n\t/**\n\t * Metodo per settare l'id della nota\n\t * @param un intero che rappresenta il nuovo valore dell'id\n\t */\n\tpublic void setIdNote(int pIdNote) {\n\t\tthis.idNote = pIdNote;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente che ha ricevuto la nota\n\t * @return l'id dell'utente che ha ricevuto la nota\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo per settare l'id dello studente che ha ricevuto la nota\n\t * @param un intero che rappresenta il nuovo valore dell'id\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce una stringa che rappresenta la data in cui Ã¨ stata data la nota\n\t * @return una stringa che rappresenta la data della nota\n\t */\n\tpublic Date getDateNote() {\n\t\treturn dateNote;\n\t}\n\t/**\n\t * Metodo che setta una stringa che rappresenta la data in cui Ã¨ stata data la nota\n\t * @param la stringa che rappresenta la nuova data\n\t */\n\tpublic void setDateNote(Date pDateNote) {\n\t\tthis.dateNote = pDateNote;\n\t}\n\t/**\n\t * Metodo che restituisce il testo della nota \n\t * @return una stringa che rappresenta il testo della nota\n\t */\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\t/**\n\t * Metodo che setta la descrizione della nota\n\t * @param una stringa che contiene la descrizione della nota\n\t */\n\tpublic void setDescription(String pDescription) {\n\t\tthis.description = pDescription;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dell'insegnante che ha dato la nota \n\t * @return un intero che rappresenta l'id dell'insegnante\n\t */\n\tpublic String getTeacher() {\n\t\treturn teacher;\n\t}\n\t/**\n\t * Metodo che setta l'id dell'insegnante che ha dato la nota \n\t * @param teacher the teacher to set\n\t */\n\tpublic void setTeacher(String pTeacher) {\n\t\tthis.teacher = pTeacher;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico in corso\n\t * @return un intero che indica l'anno di inizio delle lezioni \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Medoto che setta l'anno accademico in corso durante l'assegnazione della nota\n\t * @param un intero che indica l'anno di inizio delle lezioni da inserire\n\t */\n\tpublic void setAcademicYear(int academicYear) {\n\t\tthis.academicYear = academicYear;\n\t}\n\n\t\n\t\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cac"},"name":"ConnectionWrapper.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * ConnectionWrapper\n *\n */\n\npackage smos.storage.connectionManagement;\n\n\nimport java.io.Serializable;\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.SQLWarning;\nimport java.sql.Savepoint;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\n/**\n * ConnectionWrapper è una classe che aggiunge a tutti i metodi della classe\n * Connection il settaggio del tempo in cui l'operazione sulla particolare\n * connessione è avvenuta informando il pool di quanto accaduto.\n */\n\npublic class ConnectionWrapper implements Connection, Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final Logger LOGGER = Logger\n            .getLogger(ConnectionWrapper.class.getName());\n\n    private Connection connection;\n\n    private ConnectionPoolDataSource manager;\n\n    private ArrayList<Statement> statements = new ArrayList<Statement>();\n\n    /**\n     * @param pConnection\n     * @param pPoolManager\n     */\n    public ConnectionWrapper(Connection pConnection,\n            ConnectionPoolDataSource pPoolManager) {\n        this.connection = pConnection;\n        this.manager = pPoolManager;\n        LOGGER.fine(\"Creating ConnectionWrapper\");\n    }\n\n    private PreparedStatement cachePreparedStatement(PreparedStatement pPrepSt) {\n        this.manager.setLastTime(this);\n        this.statements.add(pPrepSt);\n        return pPrepSt;\n    }\n\n    private Statement cacheStatement(Statement pStatement) {\n        this.manager.setLastTime(this);\n        this.statements.add(pStatement);\n        return pStatement;\n    }\n\n    /**\n     * @see java.sql.Connection#clearWarnings()\n     */\n    public void clearWarnings() throws SQLException {\n        this.connection.clearWarnings();\n    }\n\n    /**\n     * @see java.sql.Connection#close()\n     */\n    public void close() throws SQLException {\n        closeAndReleaseStatements();\n        this.manager.release(this);\n    }\n\n    private synchronized void closeAndReleaseStatements() throws SQLException {\n        final int n = this.statements.size();\n        for (int i = 0; i < n; i++) {\n            ((Statement) this.statements.get(i)).close();\n        }\n        this.statements.clear();\n    }\n\n    /**\n     * Close the wrapped connection.\n     * @throws SQLException \n     */\n    void closeWrappedConnection() throws SQLException {\n        closeAndReleaseStatements();\n        if (!this.connection.isClosed()) {\n            LOGGER.fine(\"Closing db connection: \" + this.getClass().getName()\n                    + \" [\" + this + \"]\");\n        }\n        this.connection.close();\n    }\n\n    /**\n     * @see java.sql.Connection#commit()\n     */\n    public void commit() throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.commit();\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement()\n     */\n    public Statement createStatement() throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement());\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement(int, int)\n     */\n    public Statement createStatement(int pResultSetType,\n            int pResultSetConcurrency) throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement(pResultSetType,\n                pResultSetConcurrency));\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement(int, int, int)\n     */\n    public Statement createStatement(int pResultSetType,\n            int pResultSetConcurrency, int pResultSetHoldability)\n            throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement(pResultSetType,\n                pResultSetConcurrency, pResultSetHoldability));\n    }\n\n    /**\n     * Closes the wrapped connection.\n     */\n    protected void finalize() throws Throwable {\n        closeWrappedConnection();\n    }\n\n    /**\n     * @see java.sql.Connection#getAutoCommit()\n     */\n    public boolean getAutoCommit() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getAutoCommit();\n    }\n\n    /**\n     * @see java.sql.Connection#getCatalog()\n     */\n    public String getCatalog() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getCatalog();\n    }\n\n    /**\n     * @see java.sql.Connection#getHoldability()\n     */\n    public int getHoldability() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getHoldability();\n    }\n\n    /**\n     * @see java.sql.Connection#getMetaData()\n     */\n    public DatabaseMetaData getMetaData() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getMetaData();\n    }\n\n    /**\n     * @see java.sql.Connection#getTransactionIsolation()\n     */\n    public int getTransactionIsolation() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getTransactionIsolation();\n    }\n\n    /**\n     * @see java.sql.Connection#getTypeMap()\n     */\n    @SuppressWarnings(\"unchecked\")\n\tpublic Map getTypeMap() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getTypeMap();\n    }\n\n    /**\n     * @see java.sql.Connection#getWarnings()\n     */\n    public SQLWarning getWarnings() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getWarnings();\n    }\n\n    /**\n     * @see java.sql.Connection#isClosed()\n     */\n    public boolean isClosed() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.isClosed();\n    }\n\n    /**\n     * @see java.sql.Connection#isReadOnly()\n     */\n    public boolean isReadOnly() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.isReadOnly();\n    }\n\n    /**\n     * @see java.sql.Connection#nativeSQL(java.lang.String)\n     */\n    public String nativeSQL(String sql) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.nativeSQL(sql);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String)\n     */\n    public CallableStatement prepareCall(String sql) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(sql);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String, int, int)\n     */\n    public CallableStatement prepareCall(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(pStatementSql, pResultSetType,\n                pResultSetConcurrency);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String, int, int, int)\n     */\n    public CallableStatement prepareCall(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency,\n            int pResultSetHoldability) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(pStatementSql, pResultSetType,\n                pResultSetConcurrency, pResultSetHoldability);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql)\n            throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection\n                .prepareStatement(pStatementSql));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pAutoGeneratedKeys) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pAutoGeneratedKeys));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pResultSetType, pResultSetConcurrency));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int, int, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency,\n            int pResultSetHoldability) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pResultSetType, pResultSetConcurrency,\n                pResultSetHoldability));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int[])\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int[] columnIndexes) throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, columnIndexes));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, java.lang.String[])\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            String[] pColumnNames) throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pColumnNames));\n    }\n\n    /**\n     * @see java.sql.Connection#releaseSavepoint(java.sql.Savepoint)\n     */\n    public void releaseSavepoint(Savepoint pSavepoint) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.releaseSavepoint(pSavepoint);\n    }\n\n    /**\n     * @see java.sql.Connection#rollback()\n     */\n    public void rollback() throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.rollback();\n    }\n\n    /**\n     * @see java.sql.Connection#rollback(java.sql.Savepoint)\n     */\n    public void rollback(Savepoint pSavepoint) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.rollback(pSavepoint);\n    }\n\n    /**\n     * @see java.sql.Connection#setAutoCommit(boolean)\n     */\n    public void setAutoCommit(boolean pAutoCommit) throws SQLException {\n        this.manager.setLastTime(this);\n        if (this.connection.getAutoCommit() != pAutoCommit) {\n            this.connection.setAutoCommit(pAutoCommit);\n        }\n    }\n\n    /**\n     * @see java.sql.Connection#setCatalog(java.lang.String)\n     */\n    public void setCatalog(String pCatalog) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setCatalog(pCatalog);\n    }\n\n    /**\n     * @see java.sql.Connection#setHoldability(int)\n     */\n    public void setHoldability(int pHoldability) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setHoldability(pHoldability);\n    }\n\n    /**\n     * @see java.sql.Connection#setReadOnly(boolean)\n     */\n    public void setReadOnly(boolean pReadOnly) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setReadOnly(pReadOnly);\n    }\n\n    /**\n     * @see java.sql.Connection#setSavepoint()\n     */\n    public Savepoint setSavepoint() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.setSavepoint();\n    }\n\n    /**\n     * @see java.sql.Connection#setSavepoint(java.lang.String)\n     */\n    public Savepoint setSavepoint(String pName) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.setSavepoint(pName);\n    }\n\n    /**\n     * @see java.sql.Connection#setTransactionIsolation(int)\n     */\n    public void setTransactionIsolation(int pLevel) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setTransactionIsolation(pLevel);\n    }\n\n    /**\n     * @see java.sql.Connection#setTypeMap(java.util.Map)\n     */\n    \n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    public String toString() {\n        return this.connection.toString();\n    }\n\n\tpublic void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cad"},"name":"ServletAssignStudentClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletAssignStudentClassroom extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\t// Studente selezionato\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\n\t\t\t// anno accademico selezionato\n\t\t\tint academicYear = Integer.valueOf(pRequest\n\t\t\t\t\t.getParameter(\"accademicYear\"));\n\t\t\t// id classe selezionata che e' zero se vogliamo eliminare\n\t\t\t// l'associazione\n\t\t\tint idClassroom = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tClassroom p = null;\n\t\t\tp = managerClassroom.getClassroomByUserAcademicYear(user,academicYear);\n\t\t\tif (p != null)\n\t\t\t\tmanagerUser.removeStudentClassroom(user, p.getIdClassroom());\n\t\t\tif(idClassroom>0) {\n\t\t\t\t\n\t\t\t\t\tmanagerUser.assignStudentClassroom(user, idClassroom);\n\t\t\t}\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cae"},"name":"ServletDeleteUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteAdministratorException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per eliminare un utente.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletDeleteUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -7693860059069872995L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<UserListItem> manager = null;\n\t\tIterator<UserListItem> it = null;\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) &&\n\t\t\t\t\t(!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\t//cancella utente se non è amministratore\n\t\t\tif(!managerUser.isAdministrator(user)) {\n\t\t\t\tmanagerUser.delete(user);\n\t\t\t}\n\t\t\t//controllo se l'utente è amministratore e se ce ne sono degli altri\n\t\t\telse {\n\t\t\t\tmanager = managerUser.getAdministrators();\n\t\t\t\tit = manager.iterator();\n\t\t\t\tit.next();\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tmanagerUser.delete(user);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tthrow new DeleteAdministratorException ();\n\t\t\t}\n\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (DeleteAdministratorException deleteAdministratorException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + deleteAdministratorException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteAdministratorException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035caf"},"name":"ConnectionException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando non è possibile\n  * ottenere una connessione al database\n  */\npublic class ConnectionException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -6593436034986073011L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic ConnectionException() {\n\t\tsuper(\"Unable to Connect to the DataBase!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic ConnectionException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb0"},"name":"ServletInsertAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.Address;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n/**\n * Servlet utilizzata per inserire un indirizzo nel database\n * \n * @author Vecchione Giuseppe\n */\npublic class ServletInsertAddress extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 8318905833953187814L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * \n\t * @param pResponse\n\t * \n\t */\n\t\n\tpublic void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString gotoPage=\"./showAddressList\";\n\t\tString errorMessage=\"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\t\tif(loggedUser==null){\n\t\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\t\terrorMessage= \"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tAddress address= new Address();\n\t\t\t\taddress.setName(pRequest.getParameter(\"name\"));\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Verifichiamo che l' indirizzo non sia presente nel database\n\t\t\t\t * e lo inseriamo\n\t\t\t\t */\n\t\t\t\tif(!managerAddress.exists(address)){\n\t\t\t\t\tmanagerAddress.insert(address);\n\t\t\t\t}else{\n\t\t\t\t\tthrow new DuplicatedEntityException(\"Indirizzo gia' esistente\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException sqlException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tsqlException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tmandatoryFieldException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tduplicatedEntityException.printStackTrace();\n\t\t\t}\n\t\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\t\ttry {\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t}\n\t\t}\n\t\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb1"},"name":"DeleteManagerException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n * Questa classe rappresenta l'eccezione generata quando un utente\n * tenta di eliminare l'unico utente Manager nel database.\n */\npublic class DeleteManagerException extends Exception {\n\n\tprivate static final long serialVersionUID = -6441256751177339494L;\n\t\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t * \n\t */\n\tpublic DeleteManagerException() {\n\t\tsuper(\"Impossibile eliminare l'utente, l'utente selezionato e' l'unico Manager presente nel database! Creare un nuovo Manager e riprovare!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DeleteManagerException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb2"},"name":"ServletShowJustifyDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowJustifyDetails extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6445257206429581384L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showJustifyDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t\tint idJustify = Integer.valueOf(pRequest.getParameter(\"idJustify\"));\n\t\t\tString idClassroom = pRequest.getParameter(\"idClassroom\");\n\t\t\tgotoPage+=\"?idClassroom=\"+idClassroom;\n\t\t\tJustify justify=mR.getJustifyByIdJustify(idJustify);\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"justify\",justify);\n\t\t\tsession.setAttribute(\"idClassroom\",idClassroom);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb3"},"name":"ManagerTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.storage;\n\nimport smos.bean.Teaching;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n * \n * Classe manager degli insegnamenti.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\n\npublic class ManagerTeaching {\n\tprivate static ManagerTeaching instance;\n\n\t/**\n\t * Il nome della tabella degli insegnamenti.\n\t */\n\tpublic static final String TABLE_TEACHING = \"teaching\";\n\n\t/**\n\t * Il nome della tabella che modella l'associazione molti a molti tra\n\t * indirizzi ed insegnamenti.\n\t */\n\tpublic static final String TABLE_ADDRESS_TEACHINGS = \"address_has_teaching\";\n\n\t/**\n\t * Il nome della tabella che modella l'associazione molti a molti tra utenti\n\t * e insegnamenti.\n\t */\n\tpublic static final String TABLE_TEACHER_CLASSROOM = \"teacher_has_classroom\";\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tprivate ManagerTeaching() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Ritorna la sola istanza dell'insegnamento esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerTeaching getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new ManagerTeaching();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Verifica l'esistenza di un insegnamento nel database.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @return Ritorna true se esiste l'insegnamento passato come parametro,\n\t *         false altrimenti.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t */\n\tpublic synchronized boolean exists(Teaching pTeaching)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException {\n\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pTeaching.getName() == null)\n\t\t\tthrow new MandatoryFieldException(\"Specificare il nome.\");\n\t\ttry {\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE name = \" + Utility.isNull(pTeaching.getName());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Inserisce un nuovo insegnamento nella tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Teaching pTeaching)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException,\n\t\t\tEntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// controllo dei campi obbligatori\n\t\t\tif (pTeaching.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t// Prepariamo la stringa Sql\n\t\t\tString sql = \"INSERT INTO \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" (name) \" + \"VALUES (\"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getName()) + \")\";\n\n\t\t\tUtility.executeOperation(connect, sql);\n\n\t\t\tpTeaching.setId(Utility.getMaxValue(\"id_teaching\",\n\t\t\t\t\tManagerTeaching.TABLE_TEACHING));\n\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna un insegnamento presente nella tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da modificare\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update(Teaching pTeaching)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\tif (pTeaching.getId() <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\tif (pTeaching.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"UPDATE \" + ManagerTeaching.TABLE_TEACHING + \" SET\"\n\t\t\t\t\t+ \" name = \" + Utility.isNull(pTeaching.getName())\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\n\t\t\t// effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Elimina un insegnamento dalla tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da eliminare.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t * \n\t */\n\tpublic synchronized void delete(Teaching pTeaching)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// ManagerTeaching.getInstance().teachingOnDeleteCascade(pTeaching);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"DELETE FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento passato come parametro.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento di cui si richiede l'id.\n\t * @return Ritorna l'id dell'insegnamento passato come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized int getTeachingId(Teaching pTeaching)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tint result = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tif (pTeaching == null)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro.\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_teaching FROM \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE name = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getName());\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getInt(\"id_teaching\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna il nome dell'insegnamento corrispondente all'id passato come\n\t * parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna una stringa contenente il nome dell'insegnamento.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized String getTeachingNameById(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro\n\t\t\t */\n\t\t\tString tSql = \"SELECT name FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \" + Utility.isNull(pId);\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getString(\"name\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insegnamento corrispondente all'id passato come parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna l'insegnamento associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Teaching getTeachingById(int pId)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tInvalidValueException {\n\t\tTeaching result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \" + Utility.isNull(pId);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme di tutti gli insegnamenti presenti nel database.\n\t * \n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachings()\n\t\t\tthrows ConnectionException, SQLException, InvalidValueException,\n\t\t\tEntityNotFoundException {\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByUserId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \", \" + ManagerTeaching.TABLE_TEACHING + \" WHERE (\"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \".id_teaching = \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \")\" + \" ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti che il docente insegna nella classe\n\t * \n\t * @param pIdTeacher\n\t *            L'id dell'utente.\n\t * @param pIdClass\n\t *            l'id della classe\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByUserIdClassID(int pIdTeacher,int pIdClass)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pIdTeacher <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\t\tif (pIdClass <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare la classe\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\t\n\t\t\tString sql = \"SELECT DISTINCT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \", \" + ManagerTeaching.TABLE_TEACHING + \" WHERE (\"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pIdTeacher) +\" AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM \n\t\t\t\t\t+ \".id_teaching= \" + Utility.isNull(pIdClass)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \".id_teaching = \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching \"\n\t\t\t\t\t+\") ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Verifica se un insegnamento ha un professore assegnato.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @return Ritorna true se l'insegnamento ha un professore assegnato, false\n\t *         altrimenti.\n\t * \n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized boolean hasTeacher(Teaching pTeaching)\n\t\t\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\t\t\tInvalidValueException {\n\t\tConnection connect = null;\n\t\tboolean result = false;\n\t\tif (pTeaching.getId() <= 0)\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Preparimao la stringa sql\n\t\t\tString sql = \"SELECT * FROM \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\t\t\t// Inviamo la Query al database\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\tif (pRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\t// rilasciamo le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati alla classe specificata\n\t * \n\t * @param pId\n\t *            L'id della classe.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByClassroomId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId < 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'id della Classe!\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_classroom = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \" AND \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_address = \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t\t\t+ \".id_address AND \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching= \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \".id_teaching \";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati alla classe specificata\n\t * \n\t * @param name\n\t *            Il nome della classe.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByClassroomName(\n\t\t\tString name) throws EntityNotFoundException, ConnectionException,\n\t\t\tSQLException, InvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif ((name == null) || (name == \"\"))\n\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\"specificare il nome della Classe!\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".name = \"\n\t\t\t\t\t+ Utility.isNull(name) + \" AND \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_address = \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t\t\t+ \".id_address AND \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching= \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \".id_teaching \";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized Collection<Teaching> getTeachingsByIdUserIdClassroom(int pUser, int pClass) throws SQLException,\n\tEntityNotFoundException, ConnectionException, InvalidValueException {\n\t\t\n\t\t\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// \tPreparimao la stringa sql\n\t\t\t//select teaching.* from teacher_has_classroom AS THC , teaching where thc.id_user = 54 \n\t\t\t//&& thc.id_classroom = 64 && thc.id_teaching = teaching.id_teaching\n\t\t\t\n\t\t\tString sql = \"SELECT DISTINCT \"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING+\".*\" \n\t\t\t\t+\" FROM \" \n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+\" , \"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING\n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(pUser)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+ \".id_classroom= \"\n\t\t\t\t+ Utility.isNull(pClass)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+\".id_teaching =\"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING\n\t\t\t\t+\".id_teaching\";\n\t\t\t\t// Inviamo la Query al database\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Consente la lettura di un record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna l'insegnamento letto.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Teaching loadRecordFromRs(ResultSet pRs) throws SQLException,\n\t\t\tInvalidValueException {\n\t\tTeaching teaching = new Teaching();\n\t\tteaching.setName(pRs.getString((\"name\")));\n\t\tteaching.setId(pRs.getInt(\"id_teaching\"));\n\n\t\treturn teaching;\n\t}\n\n\t/**\n\t * Consente la lettura dei record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna la collection di insegnamenti letti.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Teaching> loadRecordsFromRs(ResultSet pRs)\n\t\t\tthrows SQLException, InvalidValueException {\n\t\tCollection<Teaching> result = new Vector<Teaching>();\n\t\tdo {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb4"},"name":"ServletRemoveTeachingAsTeacher.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per rimuovere Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletRemoveTeachingAsTeacher extends HttpServlet {\n\n\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -8007609698841510837L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerClassroom managerClass = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono i 3 Id user class teachings(che non so quanti ne sono)\n\t\t\tint idTeacher = (int) ((User) session.getAttribute(\"user\")).getId();\n\t\t\tUser teacher = managerUser.getUserById(idTeacher); \n\t\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tString[] idTeachingList = pRequest.getParameterValues(\"unselectedTeachings\");\n\t\t\tint nTeaching =idTeachingList.length;\n\t\t\tint temp;\n\t\t\t//Collection<Teaching> listSelcected = new Vector<Teaching>();\n\t\t\tif(idTeachingList==null)\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\telse{\n\t\t\t\tfor(int i=0;i<nTeaching;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idTeachingList[i]);\n\t\t\t\t\tif(managerUser.hasTeaching(teacher,managerTeaching.getTeachingById(temp),managerClass.getClassroomByID(idClass))){\n\t\t\t\t\t\tmanagerUser.removeTeacherAtClassroomTeaching(teacher,idClass,temp);\n\t\t\t\t\t\t//listSelcected.add(managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb5"},"name":"RegisterLine.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\npublic class RegisterLine implements Serializable {\n\n\t/**\n\t * Classe che modella una linea del registro \n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = -6010085925185873838L;\n\t\n\tprivate UserListItem student;\n\tprivate Absence absence;\n\tprivate Delay delay;\n\t\n\tpublic RegisterLine(){\n\t\tabsence=null;\n\t\tdelay=null;\n\t\t\n\t}\n\t\n\t/**\n\t * Metodo che restituisce lo studente di questa riga del registro\n\t * @return un oggetto di tipo User che rappresenta lo studente\n\t */\n\tpublic UserListItem getStudent() {\n\t\treturn student;\n\t}\n\t/**\n\t * Metodo che setta lo studente di questa riga del registro\n\t * @param un oggetto di tipo User che rappresenta lo studente da inserire\n\t */\n\tpublic void setStudent(UserListItem student) {\n\t\tthis.student = student;\n\t}\n\t/**\n\t * Metodo che restituisce l'assenza dello studente di questa riga del registro\n\t * @return un oggetto di tipo Absence che rappresenta l'assenza, oppure null se lo studente era presente\n\t */\n\tpublic Absence getAbsence() {\n\t\treturn absence;\n\t}\n\t/**\n\t * Metodo che setta l'assenza dello studente di questa riga del registro \n\t * @param un oggetto di tipo Absence da settare\n\t */\n\tpublic void setAbsence(Absence absence) {\n\t\tthis.absence = absence;\n\t}\n\t/**\n\t * Metodo che restituisce il ritardo dello studente di questa riga del registro \n\t * @return un oggetto di tipo Delay che rappresenta il ritardo, oppure null se lo studente era arrivato in orario o era assente\n\t */\n\tpublic Delay getDelay() {\n\t\treturn delay;\n\t}\n\t/**\n\t * Metodo che setta il ritardo dello studente di questa riga del registro \n\t * @param un oggetto di tipo Delay da settare\n\t */\n\tpublic void setDelay(Delay delay) {\n\t\tthis.delay = delay;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb6"},"name":"ServletUpdateTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletUpdateTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 943677173076169934L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tTeaching teaching = (Teaching) session.getAttribute(\"teaching\");\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tteaching.setName((pRequest.getParameter(\"name\")));\n\t\t\tteaching.setId(teaching.getId());\n\n\t\t\tif (!managerTeaching.exists(teaching)) {\n\t\t\t\tmanagerTeaching.update(teaching);\n\t\t\t} \n\t\t\telse if(teaching.getId() == managerTeaching.getTeachingId(teaching))\n\t\t\t\t\tmanagerTeaching.update(teaching);\n\t\t\telse {\n\n\t\t\t\tthrow new DuplicatedEntityException(\n\t\t\t\t\t\t\"Insegnamento già esistente\");\n\t\t\t}\n\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb7"},"name":"ServletShowClassroomDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n/**\n * Servlet per mostrare i dettagli di una classe\n * \n * @author Vecchione Giuseppe\n * \n */\npublic class ServletShowClassroomDetails extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = 5821337495655009521L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/classroomManagement/showClassroomDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint classroomId = 0;\n\t\tClassroom classroom= null;\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tclassroomId = Integer.valueOf(pRequest.getParameter(\"idClassroom\"));\n\t\t\tclassroom = managerClassroom.getClassroomByID(classroomId);\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb8"},"name":"ServletInsertReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire una pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletInsertReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 8121220088758892213L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showReports\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tIterator<Teaching> itTeaching = teachingList.iterator();\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\t\t\tTeaching teachingTemp = null;\n\t\t\tint idTemp;\n\t\t\tString write, oral, lab;\n\t\t\tgotoPage += \"?student=\" + student.getId() + \"&q=\" + turn;\n\t\t\twhile (itTeaching.hasNext()) {\n\t\t\t\tteachingTemp = itTeaching.next();\n\t\t\t\tidTemp = teachingTemp.getId();\n\t\t\t\twrite = \"scritto_\" + idTemp;\n\t\t\t\toral = \"orale_\" + idTemp;\n\t\t\t\tlab = \"laboratorio_\" + idTemp;\n\t\t\t\twrite = pRequest.getParameter(write);\n\t\t\t\toral = pRequest.getParameter(oral);\n\t\t\t\tlab = pRequest.getParameter(lab);\n\t\t\t\tVotes newVotes = new Votes();\n\t\t\t\tint writeInt=0, oralInt=0,labInt=0;\n\t\t\t\tif(write!=\"\")\n\t\t\t\t\twriteInt = Integer.valueOf(write);\n\t\t\t\tif(oral!=\"\")\n\t\t\t\t\toralInt = Integer.valueOf(oral);\n\t\t\t\tif(lab!=\"\")\n\t\t\t\t\tlabInt = Integer.valueOf(lab);\n\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\tnewVotes.setAccademicYear(year);\n\t\t\t\t\tnewVotes.setId_user(student.getId());\n\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\tnewVotes.setTeaching(idTemp);\n\t\t\t\t\tnewVotes.setTurn(turn);\n\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\tmanagerVotes.insert(newVotes);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cb9"},"name":"ServletReportTeachings.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare un report degli insegnamenti di un docente\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletReportTeachings extends HttpServlet {\n\n\t\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 9020697390947529914L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showTeacherDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tUser teacher = (User) session.getAttribute(\"user\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t//recuperiamo l'anno accademico selezionato\n\t\t\tint academicYear = Integer.valueOf(pRequest.getParameter(\"accademicYear\"));\n\t\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\t//Calcoliamo l'elenco delle classi in cui insegna il docente in base all'anno selezionato\n\t\t\tCollection<Classroom> classroomList = null;\n\t\t\tclassroomList = managerClassroom.getClassroomsByTeacherAcademicYear(teacher, academicYear);\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", academicYear);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cba"},"name":"ServletLogout.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c57"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c58"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6b"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * Servlet utilizzata per effettuare il logout dell'utente.\n * \n * @author napolitano Vincenzo.\n *\n */\npublic class ServletLogout extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse) throws ServletException, IOException {\n\t\t\n\t\tpRequest.getSession().invalidate();\n\t\tpResponse.sendRedirect(\"./index.htm\");\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, HttpServletResponse pResponse) throws ServletException, IOException {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cbb"},"name":"ServletAddressTeachings.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.*;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.*;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletAddressTeachings extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli insegnamenti associati ad un indirizzo.\n\t * \n\t * @author Vecchione Giuseppe.\n\t * \n\t */\n\tprivate static final long serialVersionUID = 239937097347087502L;\n\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/addressManagement/addressTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching =ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tCollection<Teaching> teachingList = managerTeaching.getTeachings();\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cbc"},"name":"ServletShowTeachingList.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli insegnamenti.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeachingList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1361713427864776624L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/teachingManagement/showTeachingList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tteachingList = managerTeaching.getTeachings();\n\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cbd"},"name":"ServletShowRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c67"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c60"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c63"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c69"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c68"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c59"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c54"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c55"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c34"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c31"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c46"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c43"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c48"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c49"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c45"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c44"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.RegisterLine;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowRegister extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -4054623648928396283L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tManagerRegister  managerRegister= ManagerRegister.getInstance();\n\t\tCollection<RegisterLine> register = null;\n\t\tint year;\n\t\tint month;\n\t\tint day;\n\t\t\n\t\tString date=pRequest.getParameter(\"date\");\n\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"idClassroom\"));\n\t\t\n\t\tString [] datevalues;\n\t\tdatevalues = date.split(\"/\");\n\t\tyear = Integer.valueOf(datevalues[2]);\n\t\tmonth = Integer.valueOf(datevalues[1]);\n\t\tday = Integer.valueOf(datevalues[0]);\n\t\t\n\t\ttry {\n\t\t\tregister= managerRegister.getRegisterByClassIDAndDate(idClass, Utility.String2Date(date));\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tClassroom classroom= managerClassroom.getClassroomByID(idClass);\n\t\t\t\n\t\t\tsession.setAttribute(\"register\", register);\n\t\t\tsession.setAttribute(\"year\", year);\n\t\t\tsession.setAttribute(\"month\", month);\n\t\t\tsession.setAttribute(\"day\", day);\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cbe"},"name":"Utility.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.utility;\n\nimport smos.exception.EntityNotFoundException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.TimeZone;\nimport java.sql.*;\nimport java.text.DateFormat;\n\n/**\n * Questa classe contiene un insieme di utility per la gestione del sistema.\n */\npublic class Utility {\n\n\t/**\n\t * Costanti\n\t */\n\tpublic static final char SLASH = (char) 47;// carattere '/' in ascii\n\n\t/**\n\t * \n\t */\n\tpublic static final char BACKSLASH = (char) 92;// carattere '\\' in ascii\n\n\t/**\n\t * \n\t */\n\tpublic static final String[] day = { \"lunedi\", \"martedi\", \"mercoledi\",\n\t\t\t\"giovedi\", \"venerdi\", \"sabato\"};\n\t\n\t/**\n\t * \n\t */\n\tpublic static final String[] validHour = { \"08:00\", \"08:30\", \"09:00\",\n\t\t\"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\", \"12:00\", \"12:30\",\n\t\t\"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\",\n\t\t\"16:30\", \"17:00\", \"17:30\", \"18:00\", \"18:30\", \"19:00\", \"19:30\",\n\t\t\"20:00\" };\n\t\n\tpublic static final String[] month = {\"gen\",\"feb\",\"mar\",\"apr\",\"mag\",\"giu\",\"lug\",\"ago\",\"set\",\"ott\",\"nov\",\"dic\"};\n\n\t/**\n\t * \n\t */\n\tpublic static final String[] requestState = { \"effettuata\", \"rifiutata\",\n\t\t\t\"accettata\", \"eliminata\" };\n\t\n\t//Variabili da impostare all'avvio di Tomcat\n\t\n\t//Variabili per l'aspetto grafico del programma\n\tprivate static String imageHeaderPath = \"\";\n\tprivate static String imageHeaderLogoPath = \"\";\n\tprivate static String imageLeftColumn = \"\";\n\tprivate static String textFooter = \"\";\n\t//server smtp per invio e-mail\n\tprivate static String serverSmtp = \"smtp.tele2.it\";\n\t//Giorni minimi di distanza dall'esame per sottoscrivere o eliminare una prenotazione\n\tprivate static int needDayBeforeExam = 0;\n\t//Giorni massimi di distanza dall'esame per sottoscrivere una prenotazione\n\tprivate static int maxDayBeforeExam = 0;\n\t//pdf path per il percorso di memorizzazione dei file pdf\n\tprivate static String pdfPath = \"\";\n\t// upload path per il percorso di memorizzazione dei file per l'importazione dei dati\n\tprivate static String uploadPath = \"\";\n\t//Variabili per la connessione al database\n\tprivate static String driverMySql = \"com.mysql.jdbc.Driver\";\n\tprivate static String fullPathDatabase = \"jdbc:mysql://localhost:3306/smos\";\n\tprivate static String userName = \"root\";\n\tprivate static String password = \"\";\n\tprivate static int maxPoolSize = 200;\n\tprivate static int waitTimeout = 120000;\n\tprivate static int activeTimeout = 600000;\n\tprivate static int poolTimeout = 27000000;\t\n\t\n\t\n\n\t/**\n\t * Ritorna, dati un campo e una tabella, il valore massimo del campo nella\n\t * tabella.\n\t * \n\t * @param pField\n\t *            Il campo di cui vogliamo recuperare il valore massimo.\n\t * @param pTable\n\t *            La tabella in cui ricercare le informazioni richieste.\n\t * @return Ritorna il valore massimo, del campo pField, passato come\n\t *         parametro, presente nella tabella pTable, passata come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tsynchronized static public int getMaxValue(String pField, String pTable)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\n\t\tint value = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t/*\n\t\t\t * Se non sono stati forniti il campo e la tabella restituiamo un\n\t\t\t * codice di errore\n\t\t\t */\n\t\t\tif (pField.equals(\"\"))\n\t\t\t\tthrow new EntityNotFoundException();\n\t\t\tif (pTable.equals(\"\"))\n\t\t\t\tthrow new EntityNotFoundException();\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * richieste\n\t\t\t */\n\t\t\tString tSql = \"SELECT max(\" + pField + \") as new_field FROM \"\n\t\t\t\t\t+ pTable;\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tvalue = tRs.getInt(\"new_field\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException();\n\n\t\t\treturn value;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Converte una data in una stringa formattata per il database.\n\t * \n\t * @param pDate\n\t *            La data da convertire.\n\t * @return Ritorna la data formattata per il database.\n\t */\n\tstatic public String date2SQLString(java.util.Date pDate, boolean pHour) {\n\t\t\n\t\tTimeZone tz = TimeZone.getDefault();\n\t\tCalendar calendar = Calendar.getInstance(tz);\n\t\tcalendar.setTime(pDate);\n\t\t\n\t\t\n\t\tint year = calendar.get(Calendar.YEAR);\n\t\tint month = calendar.get(Calendar.MONTH) + 1;\n\t\tint day = calendar.get(Calendar.DATE);\n\t\t\n\t\tString result = year + \"-\" + month + \"-\" + day ;\n\t\t\n\t\tint hour = calendar.get(Calendar.HOUR_OF_DAY);\n\t\tint min = calendar.get(Calendar.MINUTE);\n\t\tint sec = calendar.get(Calendar.SECOND);\n\t\t\n\t\tif (pHour){\n\t\t\tresult = result + \" \" + hour + \":\" + min + \":\" + sec; \n\t\t}\n\t\t\t\t\t\t\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Controlla se la stringa passata come parametro e' null.\n\t * \n\t * @param pStr\n\t *            La stringa da controllare.\n\t * \n\t * @return <code>null</code> se la stringa e' null Altrimenti la stringa e'\n\t *         passata al metodo <code>Replace</code>\n\t * \n\t * @see #Replace\n\t */\n\tstatic public String isNull(String pStr) {\n\t\tString tTmp;\n\n\t\tif (pStr == null) \n\t\t\ttTmp = \"null\";\n\n\t\telse {\n\t\t\tpStr = ReplaceAllStrings(pStr, \"'\", \"\\\\'\");\n\t\t\tpStr = ReplaceAllStrings(pStr, \"\\\"\", \"\\\\\" + \"\\\"\");\n\t\t\ttTmp = \"'\" + pStr + \"'\";\n\t\t}\n\t\treturn tTmp;\n\t}\n\n\t/**\n\t * Controlla se un dato intero ï¿½ null.\n\t * \n\t * @param pInt\n\t *            Il dato intero da controllare.\n\t * @return Ritorna il dato in formato stringa se il dato ï¿½ diverso da zero,\n\t *         altrimenti la stringa null.\n\t */\n\tstatic public String isNull(Integer pInt) {\n\t\tString tIntString;\n\n\t\tif (pInt == null)\n\t\t\ttIntString = \"null\";\n\t\telse\n\t\t\ttIntString = pInt.toString();\n\t\treturn tIntString;\n\t}\n\n\t/**\n\t * Controlla se una data e' null.\n\t * \n\t * @param pDate\n\t *            la data da controllare.\n\t * \n\t * @return Ritorna la stringa che rappresenta la data passata in input,\n\t *         formattata per il database.\n\t */\n\tstatic public String isNull(java.util.Date pDate) {\n\n\t\treturn \"'\" + date2SQLString(pDate,false) + \"'\";\n\t}\n\n\tstatic public String clear(String pString){\n\t\tint start = 0;\n\t\tint start2 = 0;\n\t\tint end = 0;\n\t\tint end2 = 0;\n\t\tString result = \"\";\n\t\tString result2 = \"\";\n\t\t\t\n\t\twhile (end >= 0){\n\t\tend = pString.indexOf(\"'\", start);\n\t\t\n\t\tif (end >= 0){\n\t\t\n\t\t\tresult= result +pString.substring(start, end);\n\t\t\tresult = result + \"\\\\'\";\n\t\t\tstart = end+1;\n\t\t\t\n\t\t} else \n\t\t\tresult = result + pString.substring(start);\n\t\t}\n\t\t\n\t\twhile (end2 >= 0){\n\t\t\tend2 = result.indexOf(\"\\n\", start2);\n\t\t\t\n\t\t\tif (end2 >= 0){\n\t\t\t\t\n\t\t\t\tresult2= result2 +result.substring(start2, end2-1);\n\t\t\t\tresult2 = result2 + \" \";\n\t\t\t\tstart2 = end2+1;\n\t\t\t\t\n\t\t\t} else \n\t\t\t\tresult2 = result2 + result.substring(start2);\n\t\t\t}\n\t\treturn(result2);\t\n\t}\n\t\n\t/**\n\t * Converte una String in Integer.\n\t * \n\t * @param pStr\n\t *            La String da convertire.\n\t * \n\t * @return L'Integer contenuto nella String <code>0</code> se non ï¿½\n\t *         possibile la conversione.\n\t * \n\t */\n\tstatic public Integer String2Integer(String pStr) {\n\t\tInteger tInteger;\n\n\t\tif ((pStr == null) || (pStr.compareTo(\"\") == 0))\n\t\t\ttInteger = new Integer(0);\n\t\telse\n\t\t\ttry {\n\t\t\t\ttInteger = Integer.decode(pStr);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttInteger = new Integer(0);\n\t\t\t}\n\n\t\treturn tInteger;\n\t}\n\n\t/**\n\t * Sostituisce i caratteri ' e \\ con '' nella stringa passata come \n\t * parametro.\n\t * \n\t * @param pStr\n\t *            La stringa da trasformare.\n\t * \n\t * @return La tringa trasformata.\n\t */\n\tstatic public String Replace(String pStr) {\n\t\tString tRis;\n\n\t\ttRis = pStr.replaceAll(\"\\\"\", \"'\");\n\n\t\ttRis = tRis.replaceAll(\"'\", \"\\\\'\");\n\n\t\treturn tRis;\n\t}\n\n\t/**\n\t * Sostituisce il carattere ' con la stringa \" \" nella stringa passata come\n\t * parametro.\n\t * \n\t * @param pStr\n\t *            La stringa da trasformare.\n\t * \n\t * @return La tringa trasformata.\n\t */\n\tstatic public String ReplaceQuote(String pStr) {\n\t\tString tRis;\n\n\t\ttRis = pStr.replaceAll(\"'\", \" \");\n\t\treturn tRis;\n\t}\n\n\t/**\n\t * Esegue un'operazione sul database tramite una stringa SQL.\n\t * \n\t * @param pConnect\n\t *            La connessione al database.\n\t * @param pSql\n\t *            La stringa SQL.\n\t * \n\t * @return Il numero di record coinvolti nell'operazione.\n\t * \n\t * @throws SQLException\n\t */\n\tstatic public int executeOperation(Connection pConnect, String pSql)\n\t\t\tthrows SQLException {\n\t\tStatement stmt = pConnect.createStatement();\n\t\tint tResult = stmt.executeUpdate(pSql);\n\t\tstmt.close();\n\t\treturn tResult;\n\t}\n\n\t/**\n\t * Esegue una Query SQL sul database.\n\t * \n\t * @param pConnect\n\t *            La connessione al database.\n\t * @param pSql\n\t *            La stringa SQL.\n\t * \n\t * @return Il numero di record coinvolti nell'operazione.\n\t * \n\t * @throws SQLException\n\t */\n\tstatic public ResultSet queryOperation(Connection pConnect, String pSql)\n\t\t\tthrows SQLException {\n\n\t\tStatement stmt = pConnect.createStatement();\n\t\treturn stmt.executeQuery(pSql);\n\t}\n\n\t/**\n\t * Converte un dato booleano in intero.\n\t * \n\t * @param pBol\n\t *            Il valore booleano da convertire in intero.\n\t * \n\t * @return Il valore intero corrispondente al valore booleano passato come\n\t *         parametro.\n\t */\n\tstatic public int BooleanToInt(boolean pBol) {\n\t\tif (pBol == true)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn 0;\n\t}\n\n\t/**\n\t * Converte un dato intero in booleano.\n\t * \n\t * @param pInt\n\t *            Il valore intero da convertire in booleano.\n\t * \n\t * @return Il valore booleano corrispondente al valore intero passato come\n\t *         parametro.\n\t */\n\tstatic public boolean IntToBoolean(int pInt) {\n\t\tif (pInt == 1)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\t/**\n\t * Restituisce la data corrente.\n\t * \n\t * @return La data corrente.\n\t */\n\tstatic public java.util.Date today() {\n\t\tCalendar calendar = Calendar.getInstance();\n\t\tjava.util.Date creationDate = calendar.getTime();\n\t\treturn creationDate;\n\t\t// java.util.Date creationDate = new java.util.Date();\n\t\t// Timestamp timeStamp = new Timestamp(creationDate.getTime());\n\t\t// return (java.util.Date) timeStamp;\n\t}\n\n\t/**\n\t * Restituisce la data contenuta nella stringa in input.\n\t * \n\t * @param pDate\n\t *            La stringa di cui effettuare il parse in un data.\n\t * \n\t * @return La data convertita.\n\t */\n\tstatic public java.util.Date String2Date(String pDate) {\n\t\ttry {\n\t\t\tDateFormat dfDate = DateFormat.getDateInstance();\n\t\t\tjava.util.Date tDate = dfDate.parse(pDate,\n\t\t\t\t\tnew java.text.ParsePosition(0));\n\t\t\tjava.sql.Timestamp timeStamp = new java.sql.Timestamp(tDate\n\t\t\t\t\t.getTime());\n\n\t\t\treturn (java.util.Date) timeStamp;\n\t\t} catch (Exception e) {\n\t\t\ttry {\n\t\t\t\tDateFormat dfDate = DateFormat.getDateInstance(\n\t\t\t\t\t\tDateFormat.SHORT, java.util.Locale.ITALY);\n\t\t\t\tjava.util.Date tDate = dfDate.parse(pDate,\n\t\t\t\t\t\tnew java.text.ParsePosition(0));\n\t\t\t\tjava.sql.Timestamp timeStamp = new java.sql.Timestamp(tDate\n\t\t\t\t\t\t.getTime());\n\n\t\t\t\treturn (java.util.Date) timeStamp;\n\t\t\t} catch (Exception e2) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Restituisce la data in input in formato String.\n\t * \n\t * @param pDate\n\t *            La Data da convertire.\n\t * @param pHour\n\t * \n\t * @return La data convertita.\n\t */\n\tstatic public String Date2String(java.util.Date pDate, boolean pHour) {\n\t\ttry {\n\t\t\tDateFormat dfDate = DateFormat.getDateInstance(DateFormat.SHORT);\n\t\t\tDateFormat dfTime = DateFormat.getTimeInstance(DateFormat.SHORT);\n\t\t\tif (pHour)\n\t\t\t\treturn dfDate.format(pDate) + \" \" + dfTime.format(pDate);\n\t\t\telse\n\t\t\t\treturn dfDate.format(pDate);\n\t\t} catch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * @param sourceStr\n\t * @param searchFor\n\t * @param replaceWith\n\t * @return la stringa corrispondente a searchBuffer\n\t */\n\tpublic static String ReplaceAll(String sourceStr, String searchFor,\n\t\t\tString replaceWith) {\n\t\tStringBuffer searchBuffer = new StringBuffer(sourceStr);\n\t\tint hits = 0;\n\n\t\twhile (searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\tsearchFor.toUpperCase(), hits) >= 0) {\n\t\t\tint newIndex = searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\t\tsearchFor.toUpperCase(), hits);\n\t\t\tsearchBuffer.replace(newIndex, newIndex + searchFor.length(),\n\t\t\t\t\treplaceWith);\n\t\t\thits++;\n\t\t}\n\n\t\treturn searchBuffer.toString();\n\t}\n\n\t// La funzione precedente va in loop se sostituisco \"\\\" con \"\\\\\"\n\t// usiamo allora due variabile la prima viene \"consumata\" ad ogni occorrenza\n\t// del pattern\n\t/**\n\t * @param sourceStr\n\t * @param searchFor\n\t * @param replaceWith\n\t * @return newStringBuffer\n\t */\n\tpublic static String ReplaceAllStrings(String sourceStr, String searchFor,\n\t\t\tString replaceWith) {\n\t\tStringBuffer searchBuffer = new StringBuffer(sourceStr);\n\t\tStringBuffer newStringBuffer = new StringBuffer(\"\");\n\n\t\twhile (searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\tsearchFor.toUpperCase()) >= 0) {\n\t\t\tint newIndex = searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\t\tsearchFor.toUpperCase());\n\t\t\tnewStringBuffer.append(searchBuffer.substring(0, newIndex));\n\t\t\tnewStringBuffer.append(replaceWith);\n\t\t\tsearchBuffer = new StringBuffer(searchBuffer.substring(newIndex\n\t\t\t\t\t+ searchFor.length(), searchBuffer.length()));\n\t\t}\n\n\t\tnewStringBuffer.append(searchBuffer);\n\t\treturn newStringBuffer.toString();\n\t}\n\n\t/**\n\t * @param sourceStr\n\t * @param removeStr\n\t */\n\tpublic static void RemoveAll(String sourceStr, String removeStr) {\n\t\tint nextOccurence;\n\n\t\twhile (sourceStr.toString().toUpperCase().indexOf(\n\t\t\t\tremoveStr.toUpperCase()) >= 0) {\n\t\t\tnextOccurence = sourceStr.toString().toUpperCase().indexOf(\n\t\t\t\t\tremoveStr.toUpperCase());\n\t\t\tsourceStr = sourceStr.substring(0, nextOccurence)\n\t\t\t\t\t+ sourceStr.substring(nextOccurence + removeStr.length(),\n\t\t\t\t\t\t\tsourceStr.length());\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Calcola la distanza in giorni tra 2 date passate.\n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tpublic static int daysBetween(Date today, Date reservationDate){\n\t\tint daysBetween = 0;\n\t\tlong millisecBetween = 0;\n\t\tfinal int millisecInADay = 86400000;\n\t\t\n\t\tGregorianCalendar firstDate = new GregorianCalendar();\n\t\tGregorianCalendar secondDate = new GregorianCalendar();\n\t\t\n\t\tfirstDate.set(today.getYear()+1900, today.getMonth(), today.getDate());\n\t\tsecondDate.set(reservationDate.getYear()+1900, reservationDate.getMonth(), reservationDate.getDate());\n\t\t\n\t\tmillisecBetween = secondDate.getTimeInMillis() - firstDate.getTimeInMillis();\n\t\tdaysBetween = (int) (millisecBetween/millisecInADay);\n\t\t\n\t\treturn (daysBetween);\n\t}\n\n\t/**\n\t * @return Il percorso impostato per i pdf.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getPdfPath() {\n\t\treturn Utility.pdfPath;\n\t}\n\n\t/**\n\t * @param pPdfPath Il path da settare per i pdf.\n\t */\n\tpublic static void setPdfPath(String pPdfPath) {\n\t\tUtility.pdfPath = pPdfPath;\n\t}\n\t\n\t/**\n\t * @return Il percorso impostato per i file utilizzati \n\t * durante l'importazione dei dati.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getUploadPath() {\n\t\treturn Utility.uploadPath;\n\t}\n\n\t/**\n\t * @param pUploadPath Il path da settare per i file utilizzati \n\t * durante l'importazione dei dati.\n\t */\n\tpublic static void setUploadPath(String pUploadPath) {\n\t\tUtility.uploadPath = pUploadPath;\n\t}\n\n\t/**\n\t * @return Il server smtp da utilizzare per l'invio\n\t * \t\t   automatizzato delle e-mail.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getServerSmtp() {\n\t\treturn Utility.serverSmtp;\n\t}\n\t\n\t/**\n\t * @param pServerSmtp il server smtp da settare.\n\t */\n\tpublic static void setServerSmtp(String pServerSmtp) {\n\t\tUtility.serverSmtp = pServerSmtp;\n\t}\n\n\t/**\n\t * @return the activeTimeout\n\t */\n\tpublic static int getActiveTimeout() {\n\t\treturn Utility.activeTimeout;\n\t}\n\n\t/**\n\t * @param activeTimeout the activeTimeout to set\n\t */\n\tpublic static void setActiveTimeout(int pActiveTimeout) {\n\t\tUtility.activeTimeout = pActiveTimeout;\n\t}\n\n\t/**\n\t * @return the driverMySql\n\t */\n\tpublic static String getDriverMySql() {\n\t\treturn Utility.driverMySql;\n\t}\n\n\t/**\n\t * @param driverMySql the driverMySql to set\n\t */\n\tpublic static void setDriverMySql(String pDriverMySql) {\n\t\tUtility.driverMySql = pDriverMySql;\n\t}\n\n\t/**\n\t * @return the fullPathDatabase\n\t */\n\tpublic static String getFullPathDatabase() {\n\t\treturn Utility.fullPathDatabase;\n\t}\n\n\t/**\n\t * @param fullPathDatabase the fullPathDatabase to set\n\t */\n\tpublic static void setFullPathDatabase(String pFullPathDatabase) {\n\t\tUtility.fullPathDatabase = pFullPathDatabase;\n\t}\n\n\t/**\n\t * @return the maxPoolSize\n\t */\n\tpublic static int getMaxPoolSize() {\n\t\treturn Utility.maxPoolSize;\n\t}\n\n\t/**\n\t * @param maxPoolSize the maxPoolSize to set\n\t */\n\tpublic static void setMaxPoolSize(int pMaxPoolSize) {\n\t\tUtility.maxPoolSize = pMaxPoolSize;\n\t}\n\n\t/**\n\t * @return the password\n\t */\n\tpublic static String getPassword() {\n\t\treturn Utility.password;\n\t}\n\n\t/**\n\t * @param password the password to set\n\t */\n\tpublic static void setPassword(String pPassword) {\n\t\tUtility.password = pPassword;\n\t}\n\n\n\t/**\n\t * @return the poolTimeout\n\t */\n\tpublic static int getPoolTimeout() {\n\t\treturn Utility.poolTimeout;\n\t}\n\n\t/**\n\t * @param poolTimeout the poolTimeout to set\n\t */\n\tpublic static void setPoolTimeout(int pPoolTimeout) {\n\t\tUtility.poolTimeout = pPoolTimeout;\n\t}\n\n\t/**\n\t * @return the userName\n\t */\n\tpublic static String getUserName() {\n\t\treturn Utility.userName;\n\t}\n\n\t/**\n\t * @param userName the userName to set\n\t */\n\tpublic static void setUserName(String pUserName) {\n\t\tUtility.userName = pUserName;\n\t}\n\n\t/**\n\t * @return the waitTimeout\n\t */\n\tpublic static int getWaitTimeout() {\n\t\treturn Utility.waitTimeout;\n\t}\n\n\t/**\n\t * @param waitTimeout the waitTimeout to set\n\t */\n\tpublic static void setWaitTimeout(int pWaitTimeout) {\n\t\tUtility.waitTimeout = pWaitTimeout;\n\t}\n\n\t/**\n\t * @return the imageHeaderPath\n\t */\n\tpublic static String getImageHeaderPath() {\n\t\treturn Utility.imageHeaderPath;\n\t}\n\n\t/**\n\t * @param imageHeaderPath the imageHeaderPath to set\n\t */\n\tpublic static void setImageHeaderPath(String pImageHeaderPath) {\n\t\tUtility.imageHeaderPath = pImageHeaderPath;\n\t}\n\n\t/**\n\t * @return the textFooter\n\t */\n\tpublic static String getTextFooter() {\n\t\treturn Utility.textFooter;\n\t}\n\n\t/**\n\t * @param textFooter the textFooter to set\n\t */\n\tpublic static void setTextFooter(String pTextFooter) {\n\t\tUtility.textFooter = pTextFooter;\n\t}\n\n\t/**\n\t * @return the imageLeftColumn\n\t */\n\tpublic static String getImageLeftColumn() {\n\t\treturn Utility.imageLeftColumn;\n\t}\n\n\t/**\n\t * @param imageLeftColumn the imageLeftColumn to set\n\t */\n\tpublic static void setImageLeftColumn(String pImageLeftColumn) {\n\t\tUtility.imageLeftColumn = pImageLeftColumn;\n\t}\n\t\n\tpublic static String getImageLogoHeaderPath() {\n\t\treturn Utility.imageHeaderLogoPath;\n\t}\n\n\tpublic static void setImageLogoHeaderPath(String pImageHeaderLogoPath) {\n\t\tUtility.imageHeaderLogoPath = pImageHeaderLogoPath;\n\t}\n\n\t/**\n\t * @return the needDayBeforeExam\n\t */\n\tpublic static int getNeedDayBeforeExam() {\n\t\treturn Utility.needDayBeforeExam;\n\t}\n\n\t/**\n\t * @param needDayBeforeExam the needDayBeforeExam to set\n\t */\n\tpublic static void setNeedDayBeforeExam(int pNeedDayBeforeExam) {\n\t\tUtility.needDayBeforeExam = pNeedDayBeforeExam;\n\t}\n\n\t/**\n\t * @return the maxDayBeforeExam\n\t */\n\tpublic static int getMaxDayBeforeExam() {\n\t\treturn Utility.maxDayBeforeExam;\n\t}\n\n\t/**\n\t * @param maxDayBeforeExam the maxDayBeforeExam to set\n\t */\n\tpublic static void setMaxDayBeforeExam(int pMaxDayBeforeExam) {\n\t\tUtility.maxDayBeforeExam = pMaxDayBeforeExam;\n\t}\n\t\n\tpublic static String getActualDate() {\n\t\tGregorianCalendar gc = new GregorianCalendar();\n\n\t\tString date=\"\";\n\t\tint year=gc.get(GregorianCalendar.YEAR);\n\t\t\n\t\tint month=gc.get(GregorianCalendar.MONTH)+1;\n\t\tString months=\"\";\n\t\tif(month<10){\n\t\t\tmonths=\"0\"+month;\n\t\t}else{\n\t\t\tmonths= months+month;\n\t\t}\n\t\t\n\t\tint day=gc.get(GregorianCalendar.DAY_OF_MONTH);\n\t\tString days=\"\";\n\t\tif(day<10){\n\t\t\tdays=\"0\"+day;\n\t\t}else{\n\t\t\tdays= days+day;\n\t\t}\n\t\t\n\t\tdate= date + days+\"/\"+months+\"/\"+year;\n\t\n\t\treturn date;\n\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cbf"},"name":"MandatoryFieldException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando si tenta\n  * di inserire un'entit senza specificare un campo obbligatorio\n  */\npublic class MandatoryFieldException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -4818814194670133466L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic MandatoryFieldException() {\n\t\tsuper(\"Mandatory Field Missing!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic MandatoryFieldException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc0"},"name":"Role.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c57"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c58"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.bean;\n\n\nimport java.io.Serializable;\n/**\n *  Classe utilizzata per modellare il ruolo di un utente.\n *\n * @author Bavota Gabriele, Carnevale Filomena.\n * \n */\npublic class Role implements Serializable {\n\t\n\tprivate static final long serialVersionUID = 8833734317107515203L;\n\t\n\t\n\t\n\t/**\n\t * L'id del ruolo amministratore\n\t */\n\tpublic static final int ADMIN = 1;\n\t\n\t/**\n\t * L'id del ruolo di docente\n\t */\n\tpublic static final int TEACHER = 2;\n\t\n\t/**\n\t * L'id del ruolo studente\n\t */\n\t\n\tpublic static final int STUDENT\t = 3;\n\t\n\t/**\n\t * L'id del ruolo geniotore\n\t */\n\t\n\tpublic static final int PARENT = 4;\n\t\n\t/**\n\t * L'id del ruolo ata\n\t */\n\t\n\tpublic static final int ATA = 5;\n\t\n\t/**\n\t * L'id del ruolo direzione\n\t */\n\t\n\tpublic static final int DIRECTOR = 6;\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc1"},"name":"ConnectionPoolDataSource.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * ConnectionPoolDataSource\n *\n */\n\npackage smos.storage.connectionManagement;\n\nimport smos.storage.connectionManagement.exception.NotImplementedYetException;\n\nimport java.io.PrintWriter;\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport javax.sql.DataSource;\n\n/**\n * Realizzazione del pool di connessioni tramite l'implementazione\n * dell'interfaccia java.sql.DataSource. Il pool controlla periodicamente le\n * connessioni attive e quelle che sono pool, ossia quelle rilasciate ma ancora\n * utilizzabili (presenti cioe' in memoria). Il tempo di rilascio delle\n * connessioni attive e di quelle pool ï¿½ rappresentato da due parametri presenti\n * all'interno della classe e che sono connectionPoolCloseTimeout e\n * inactiveMaxTimeout; tali valori cosi come tutti gli altri inerenti al pool\n * hanno un loro valore di default, parametrizzabile tramite il file di\n * properties connection.properties\n */\n\npublic class ConnectionPoolDataSource implements DataSource {\n\n    /**\n     * Thread inside della classe ConnectionPoolDataSource che stabilisce ogni\n     * connectionPoolCloseTimeout millisecondi il rilascio delle connessioni\n     * pool.\n     */\n    private class ConnectionCloser extends Thread {\n\n        private long connectionActionTimestamp = 0;\n\n        private int connectionPoolCloseTimeout = 300000;\n\n        private long timeStamp = 0;\n\n        /**\n         * Costruttore che setta il tempo di rilascio delle connessioni pool\n         * \n         * @author Di Giorgio Domenico, Cris Malinconico\n         * @param pTime\n         *            intervallo di tempo entro cui il pool svuota la lista\n         *            delle connessioni pool.\n         */\n\t\tprivate ConnectionCloser(int pTime) {\n            setDaemon(true);\n            setName(\"ConnectionPoolCloser\");\n            if (pTime > 0)\n            \tthis.connectionPoolCloseTimeout = pTime;\n        }\n\n        /**\n         * Ogni volta che una connessione genera un evento con un'invocazione di\n         * getConnection() o release() il timestamp viene settato al valore\n         * temporale corrente tramite questo metodo.\n         */\n\t\tpublic void connectionEvent() {\n\t\t\tthis.connectionActionTimestamp = System.currentTimeMillis();\n        }\n\n        /**\n         * Controlla ogni connectionPoolCloseTimeout millisecondi se le\n         * connessioni pool possono essere chiuse liberando in tal caso memoria.\n         */\n\t\tpublic void run() {\n            boolean working = true;\n            while (working) {\n                try {\n                \tthis.timeStamp = System.currentTimeMillis();\n                    Thread.sleep(this.connectionPoolCloseTimeout);\n                    if (this.connectionActionTimestamp < this.timeStamp) {\n                        closeAllConnections(ConnectionPoolDataSource.this.pool);\n                    }\n                } catch (InterruptedException e) {\n                    working = false;\n                    e.printStackTrace();\n                } catch (SQLException e) {\n                    working = false;\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private List<SMOSConnection> active = new Vector<SMOSConnection>();\n\n    private Properties config = new Properties();\n\n    private ConnectionCloser connectionCloser;\n\n    private Driver driver;\n\n    private String fullConnectionString;\n\n    private long inactiveMaxTimeout = 20000;\n\n    private int maxPoolSize;\n\n    private List<Connection> pool = new Vector<Connection>();\n\n    /**\n     * Crea una nuova istanza del pool di connessioni.\n     * \n     * @param pJdbcDriverName\n     *            nome del driver jdbc\n     * @param pFullConnectionString\n     *            stringa di connessione con il database\n     * @param pUser\n     *            nome utente (amministratore del database)\n     * @param pPassword\n     *            password amministratore\n     * @param pMaxPoolSize\n     *            massimo numero di connessioni attive nel pool, deve essere\n     *            maggiore di 0\n     * @param pPoolTime\n     *            intervallo di tempo entro il quale il pool sarï¿½ svuotato ogni\n     *            volta delle sue connessioni pool (in ms).\n     * @throws ClassNotFoundException\n     *             se il driver jdbc non puï¿½ essere trovato\n     * @throws SQLException\n     *             se occorre un problema durante la connessione al database\n     * @throws IllegalArgumentException\n     *             se i parametri forniti in input non sono validi\n     */\n\n    \n\tpublic ConnectionPoolDataSource(String pJdbcDriverName,\n            String pFullConnectionString, String pUser, String pPassword,\n            int pMaxPoolSize, int pPoolTime) throws ClassNotFoundException,\n            SQLException {\n\n        if (pMaxPoolSize < 1) {\n            throw new IllegalArgumentException(\n                    \"maxPoolSize deve essere >0 ma ï¿½: \" + pMaxPoolSize);\n        }\n        if (pFullConnectionString == null) {\n            throw new IllegalArgumentException(\"fullConnectionString \"\n                    + \"ha valore Null\");\n        }\n        if (pUser == null) {\n            throw new IllegalArgumentException(\"il nome utente ha valore Null\");\n        }\n        this.maxPoolSize = pMaxPoolSize;\n        this.fullConnectionString = pFullConnectionString;\n        this.config.put(\"user\", pUser);\n        if (pPassword != null) {\n            this.config.put(\"password\", pPassword);\n        }\n        Class.forName(pJdbcDriverName);\n        this.driver = DriverManager.getDriver(pFullConnectionString);\n        this.connectionCloser = new ConnectionCloser(pPoolTime);\n        this.connectionCloser.start();\n    }\n\n    /**\n     * Restituisce la dimensione della lista delle connessioni attive.\n     * \n     * @return la dimensione della lista delle connessioni attualmente attive.\n     */\n\tpublic int activeSize() {\n        return this.active.size();\n    }\n\n    /**\n     * Svuota il pool di connessioni da quelle attive che non hanno piï¿½ eseguito\n     * operazioni per inactiveMaxTimeout millisecondi.\n     * \n     */\n    protected void clearActive() {\n        long temp = 0;\n        long TIME = System.currentTimeMillis();\n        SMOSConnection adc = null;\n\n        for (int count = 0; count < this.active.size(); count++) {\n            adc = (SMOSConnection) this.active.get(count);\n            temp = TIME - adc.getLastTime();\n            if (temp >= this.inactiveMaxTimeout) {\n                this.release(adc.getConnection());\n            }\n        }\n    }\n\n    /**\n     * Chiude tutte le connessioni del pool sia quelle attive e sia quelle che\n     * sono pool.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @throws SQLException\n     */\n    public synchronized void closeAllConnections() throws SQLException {\n        closeAllConnections(this.pool);\n        closeAllConnections(this.active);\n    }\n\n    /**\n     * Chiude tutte le connessioni indicate nella lista connection.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @param pConnections\n     *            la lista delle connesioni che devono essere chiuse.\n     * @throws SQLException\n     *             qualora sia impossibile chiudere una connessione.\n     */\n    private synchronized void closeAllConnections(List pConnections)\n            throws SQLException {\n\n        while (pConnections.size() > 0) {\n            ConnectionWrapper conn = (ConnectionWrapper) pConnections.remove(0);\n            conn.closeWrappedConnection();\n        }\n    }\n\n    /**\n     * Chiude tutte le connessioni del pool che sono nella lista pool.\n     * \n     * @throws SQLException\n     *             qualora sia impossibile chiudere una connessione.\n     */\n    public synchronized void closeAllPooledConnections() throws SQLException {\n        closeAllConnections(this.pool);\n    }\n\n    /**\n     * Metodo utilizzato da getConnection() per creare una nuova connessione\n     * qualora nella lista delle pool non siano presenti.\n     * \n     * @return una nuova connessione al DataBase.\n     */\n    private synchronized Connection createNewConnection() {\n        Connection rawConn = null;\n        try {\n            rawConn = this.driver.connect(this.fullConnectionString, this.config);\n            Connection conn = new ConnectionWrapper(rawConn, this);\n            SMOSConnection ac = new SMOSConnection();\n            ac.setConnection(conn);\n            ac.setLastTime(System.currentTimeMillis());\n            this.active.add(ac);\n            return conn;\n        } catch (SQLException e) {\n            System.out.println(\"Creazione della connessione fallita \"\n                    + \"in ConnectionPoolDataSource:\" + e);\n            return null;\n        }\n    }\n\n    /**\n     * Restituisce una connessione se il pool non ï¿½ pieno, il controllo avviene\n     * prima nella lista delle connessioni pool per evitare delle creazioni\n     * inutili altrimenti una nuova connessione sarï¿½ creata.\n     * \n     * @return la connessione al database qualora fosse possibile altrimenti\n     *         un'eccezione viene generata\n     * @see javax.sql.DataSource getConnection()\n     * @throws SQLException\n     *             Se un problema occorre durante la connessione al database\n     *             incluso il fatto che il limite massimo delle connessioni\n     *             attive venga raggiunto.\n     */\n    public synchronized Connection getConnection() throws SQLException {\n\n        Connection connection = getPooledConnection(0);\n\n        if (connection == null) {\n            if (this.active.size() >= this.maxPoolSize) {\n                throw new SQLException(\"Connection pool limit of \"\n                        + this.maxPoolSize + \" exceeded\");\n            } else {\n                connection = createNewConnection();\n            }\n        }\n        this.connectionCloser.connectionEvent();\n        //System.out.println(\"GET CONNECTION: \" + active.size() + \"/\" + pool.size());\n        return connection;\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg1 \n     * @param pArg2 \n     * @return Connection\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public Connection getConnection(String pArg1, String pArg2)\n            throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @return int\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public int getLoginTimeout() throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @return PrintWriter\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public PrintWriter getLogWriter() throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Restituisce il numero massimo di connessioni attive\n     * \n     * @return il numero massimo di connessioni attive.\n     */\n\n    public int getMaxPoolSize() {\n        return this.maxPoolSize;\n    }\n\n    /**\n     * Metodo utilizzato da getConnection() per stabilire se nella lista delle\n     * connessioni pool ve ne sia qualcuna da poter riutilizzare.\n     * \n     * @param pPoolIndex\n     *            indice della lista delle connessioni pool (sempre 0).\n     * @return una connesssione dalla lista di quelle pool qualora ne esista\n     *         una.\n     */\n    private synchronized Connection getPooledConnection(int pPoolIndex) {\n        SMOSConnection ac = new SMOSConnection();\n        Connection connection = null;\n        if (this.pool.size() > 0) {\n            connection = (Connection) this.pool.remove(pPoolIndex);\n            ac.setConnection(connection);\n            ac.setLastTime(System.currentTimeMillis());\n            this.active.add(ac);\n        }\n        return ac.getConnection();\n    }\n\n    /**\n     * Restituisce la dimensione della lista delle connessioni pool\n     * \n     * @return la dimensione della lista delle connessioni pool.\n     */\n    public int poolSize() {\n        return this.pool.size();\n    }\n\n    /**\n     * Rilascia una connessione, eliminandola da quelle attive ed inserendola in\n     * quelle pool per poter essere successivamente riutilizzata.\n     * \n     * @param pConnection\n     *            La connessione che deve essere ritornata al pool.\n     */\n    public synchronized void release(Connection pConnection) {\n        boolean exists = false;\n        int activeIndex = 0;\n\n        if (pConnection != null) {\n            SMOSConnection adc = null;\n            while ((activeIndex < this.active.size()) && (!exists)) {\n                adc = (SMOSConnection) this.active.get(activeIndex);\n                if (adc.equals(pConnection)) {\n                \tthis.active.remove(adc);\n                \tthis.pool.add(adc.getConnection());\n                    exists = true;\n                }\n                activeIndex++;\n            }\n            this.connectionCloser.connectionEvent();\n            //System.out.println(\"RELEASE CONNECTION: \" + active.size() + \"/\" + pool.size());\n        }\n    }\n\n    /**\n     * Setta il tempo di vita delle connessioni attive in millisecondi.\n     * \n     * @param pTimeOut\n     *            tempo di vita della connessione.\n     */\n\n    public void setActivedTimeout(long pTimeOut) {\n        if (pTimeOut > 0) {\n        \tthis.inactiveMaxTimeout = pTimeOut;\n        }\n    }\n\n    /**\n     * Riazzera il tempo di vita della connessione dovutocall'esecuzione di\n     * un'operazione.Da questo momento la connessione potrï¿½ essere attiva senza\n     * eseguire alcuna operazione per altri inactiveMaxTimeout millisecondi.\n     * \n     * @param pConnection\n     *            la connessione che ha eseguito un'operazione e quindi puï¿½\n     *            rimanere attiva.\n     */\n\n    void setLastTime(Connection pConnection) {\n        boolean exists = false;\n        int count = 0;\n        SMOSConnection adc = null;\n\n        while ((count < this.active.size()) && (!exists)) {\n            adc = (SMOSConnection) this.active.get(count);\n            count++;\n            if (adc.equals(pConnection)) {\n                adc.setLastTime(System.currentTimeMillis());\n                exists = true;\n            }\n        }\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg0 \n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n    public void setLoginTimeout(int pArg0) throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg0 \n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n    public void setLogWriter(PrintWriter pArg0) throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Converte un oggetto della classe ConnectionPoolDataSource in String\n     * \n     * @return la rappresentazione nel tipo String del pool di connessioni.\n     */\n\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n\n        buf.append(\"[\");\n        buf.append(\"maxPoolSize=\").append(this.maxPoolSize);\n        buf.append(\", activeSize=\").append(activeSize());\n        buf.append(\", poolSize=\").append(poolSize());\n        buf.append(\", fullConnectionString=\").append(this.fullConnectionString);\n        buf.append(\"]\");\n        return (buf.toString());\n    }\n\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc2"},"name":"ServletShowNoteList.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n\npublic class ServletShowNoteList extends HttpServlet {\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 3700685645748508615L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showNoteList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\tCollection<Note> notes= null;\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tint idUser =Integer.valueOf(pRequest.getParameter(\"student\")) ;\n\t\t\tUser student = managerUser.getUserById(idUser); \t\n\t\t\t\n\t\t\n\t\t\tint year= ((Classroom) session.getAttribute(\"classroom\")).getAcademicYear();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tnotes= managerRegister.getNoteByIDUserAndAcademicYear(idUser, year);\n\t\t\t\n\t\t\tsession.setAttribute(\"noteList\", notes);\n\t\t\tsession.setAttribute(\"student\", student);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\t\n\t\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc3"},"name":"ManagerVotes.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c52"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c38"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c47"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c4a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c42"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c37"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c41"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c40"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3d"}]],"contents":"package smos.storage;\n\nimport smos.bean.Teaching;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n * \n * Classe manager dei voti.\n * \n * @author Luigi Colangelo\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\n\npublic class ManagerVotes {\n\tprivate static ManagerVotes instance;\n\n\t/**\n\t * Il nome della tabella dei voti.\n\t */\n\tpublic static final String TABLE_VOTES = \"votes\";\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic ManagerVotes() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Ritorna la sola istanza del voto esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerVotes getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new ManagerVotes();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Verifica l'esistenza di voto nel database.\n\t * \n\t * @param pVotes\n\t *            il voto da controllare.\n\t * @return Ritorna true se esiste il voto passato come parametro,\n\t *         false altrimenti.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t */\n\tpublic synchronized boolean exists(Votes pVotes)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException {\n\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pVotes.getId_votes() == 0)\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'id.\");\n\t\ttry {\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pVotes.getId_votes());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Inserisce un nuovo voto nella tabella Votes.\n\t * \n\t * @param pVotes\n\t *            il voto da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Votes pVotes)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException,\n\t\t\tEntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t\n\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t// Prepariamo la stringa Sql\n\t\t\tString sql = \"INSERT INTO \" + ManagerVotes.TABLE_VOTES\n\t\t\t        + \" (id_user, id_teaching, written, oral, laboratory, AccademicYear, turn) \"\n\t\t\t\t\t+ \"VALUES (\"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_user())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTeaching()) \n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getWritten())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getOral())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getLaboratory())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getAccademicYear())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTurn())+ \" )\";\n\n\t\t\tUtility.executeOperation(connect, sql);\n\n\t\t\tpVotes.setId_votes(Utility.getMaxValue(\"id_votes\",\n\t\t\t\t\tManagerVotes.TABLE_VOTES));\n\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna un voto presente nella tabella votes.\n\t * \n\t * @param pVotes\n\t *            Un voto da modificare\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update(Votes pVotes)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\tif (pVotes.getId_votes() <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\tif (pVotes.getId_user() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'user del voto\");\n\t\t\tif (pVotes.getTeaching() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'insegnamento del voto\");\n\t\t\tif (pVotes.getAccademicYear() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pVotes.getTurn() < 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il semestre \");\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"UPDATE \" + ManagerVotes.TABLE_VOTES + \" SET\"\n\t\t\t\t\t+ \" id_user = \" + Utility.isNull(pVotes.getId_user())+\",\"+\" id_teaching= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTeaching())+\",\"+\" written= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getWritten())+\",\"+\" oral= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getOral())+\",\"+\" laboratory= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getLaboratory())+\",\"+\" accademicYear= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getAccademicYear())+\",\"+\" turn=\"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTurn())\n\t\t\t\t\t+ \" WHERE id_votes = \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_votes());\n\n\t\t\t// effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Verifica se uno studente passato come parametro ha un voto assegnato nell'insegnamento passato\n\t * come parametro nell'anno passato come parametro e nel quadrimestre passato come parametro\n\t * \n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @param pUserListItem\n\t *            Lo studente da controllare\n\t * \n\t * @return Ritorna l'id del voto -1 altrimenti\n\t * \n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized int getIdVotes(Teaching pTeaching, int academicYear, int turn, UserListItem pUser)\n\t\t\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\t\t\tInvalidValueException {\n\t\tConnection connect = null;\n\t\tint result = -1;\n\t\tVotes v = null;\n\t\tif (pTeaching.getId() <= 0)\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\t\tif (pUser.getId() <=0 )\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'utente\");\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Preparimao la stringa sql\n\t\t\tString sql = \"SELECT * FROM \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".AccademicYear= \"\n\t\t\t\t\t+ Utility.isNull(academicYear)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".turn= \"\n\t\t\t\t\t+ Utility.isNull(turn)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".id_user= \"\n\t\t\t\t\t+ Utility.isNull(pUser.getId());\n\t\t\t// Inviamo la Query al database\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\tif (pRs.next()){\n\t\t\t\tv = this.loadRecordFromRs(pRs);\n\t\t\t\tresult =v.getId_votes();\n\t\t\t\t\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\t// rilasciamo le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\n\t\t}\n\t}\n\n\t/**\n\t * Elimina un voto dalla tabella votes.\n\t * \n\t * @param pVotes\n\t *            Il voto da eliminare.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t * \n\t */\n\tpublic synchronized void delete(Votes pVotes)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// ManagerTeaching.getInstance().teachingOnDeleteCascade(pTeaching);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"DELETE FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_votes());\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento corrispondente all'id del voto passato come\n\t * parametro.\n\t * \n\t * @param pId\n\t *            L'id del voto.\n\t * @return Ritorna l'id dell' insegnamento.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t/**\n\t * Ritorna l'insegnamento corrispondente all'id passato come parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna l'insegnamento associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Votes getVotesById(int pId)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tInvalidValueException {\n\t\tVotes result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pId);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized String getTeachingIdByVotesId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_teaching FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t        \n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pId);\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getString(\"id_teaching\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Ritorna l'insieme di tutti i voti presenti nel database.\n\t * \n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t */\n\tpublic synchronized Collection<Votes> getVotes()\n\t\t\tthrows ConnectionException, SQLException, InvalidValueException,\n\t\t\tEntityNotFoundException {\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" ORDER BY id_votes\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ritorna l'insieme dei voti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Votes> getVotesByUserId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".* FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t    + \" WHERE (\"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \")\" + \" ORDER BY id_user\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme dei voti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Votes> getVotesByUserIdYearTurn(int pId,int pYear, int pTurn)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".* FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t    + \" WHERE (\"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId)+\" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".accademicYear = \"\n\t\t\t\t\t+ Utility.isNull(pYear)+\" AND \" \n\t\t\t\t\t+ManagerVotes.TABLE_VOTES + \".turn = \"\n\t\t\t\t\t+ Utility.isNull(pTurn)+ \")\" + \" ORDER BY id_user\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized void deleteVotesByUserIdYearTurn(int pId,int pYear, int pTurn)\n\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\tInvalidValueException {\n\nConnection connect = null;\n\nif (pId <= 0)\n\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\ntry {\n\t// Prepariamo la stringa SQL\n\tString sql = \"DELETE \"+ ManagerVotes.TABLE_VOTES+\" FROM \" + ManagerVotes.TABLE_VOTES\n\t\t    + \" WHERE (\"\n\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user=\"\n\t\t\t+ Utility.isNull(pId)+\" AND \"\n\t\t\t+ ManagerVotes.TABLE_VOTES + \".AccademicYear=\"\n\t\t\t+ Utility.isNull(pYear)+\" AND \" \n\t\t\t+ManagerVotes.TABLE_VOTES + \".turn=\"\n\t\t\t+ Utility.isNull(pTurn)+ \")\";\n\n\t// Otteniamo una Connessione al DataBase\n\tconnect = DBConnection.getConnection();\n\tif (connect == null)\n\t\tthrow new ConnectionException();\n\n\t// Inviamo la Query al DataBase\n\t Utility.executeOperation(connect, sql);\n     \n} finally {\n\t// rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\t\n\t\n\t/**\n\t * Consente la lettura di un record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna il voto letto.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Votes loadRecordFromRs(ResultSet pRs) throws SQLException,\n\t\t\tInvalidValueException {\n\t\tVotes votes = new Votes();\n\t\tvotes.setId_votes(pRs.getInt((\"id_votes\")));\n\t\tvotes.setId_user(pRs.getInt(\"id_user\"));\n\t\tvotes.setTeaching(pRs.getInt(\"id_teaching\"));\n\t\tvotes.setWritten(pRs.getInt(\"written\"));\n\t\tvotes.setOral(pRs.getInt(\"oral\"));\n\t\tvotes.setLaboratory(pRs.getInt(\"laboratory\"));\n\t\tvotes.setAccademicYear(pRs.getInt(\"AccademicYear\"));\n\t\tvotes.setTurn(pRs.getInt(\"turn\"));\n\n\t\treturn votes;\n\t}\n\n\t/**\n\t * Consente la lettura dei record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna la collection di insegnamenti letti.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Votes> loadRecordsFromRs(ResultSet pRs)\n\t\t\tthrows SQLException, InvalidValueException {\n\t\tCollection<Votes> result = new Vector<Votes>();\n\t\tdo {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc4"},"name":"ServletDeleteAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet utilizzata per cancellare un indirizzo dal database\n * \n * @author Vecchione Giuseppe\n */\npublic class ServletDeleteAddress extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -7383336226678925533L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString errorMessage=\"\";\n\t\tString gotoPage=\"./showAddressList\";\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tHttpSession session= pRequest.getSession();\n\t\tUser loggedUser= (User)session.getAttribute(\"loggedUser\");\n\t\tAddress address= null;\n\t\ttry {\n\t\t\t\tif(loggedUser==null){\t\t\n\t\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\t\terrorMessage= \"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\taddress= (Address)session.getAttribute(\"address\");\n\t\t\t\tmanagerAddress.delete(address);\n\t\t\t\t\n\t\t} \t  catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException SQLException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tSQLException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tmandatoryFieldException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t}\n\t\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t}\n\t\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc5"},"name":"Report.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.bean;\n\nimport java.util.ArrayList;\n\nimport smos.exception.InvalidValueException;\n\n/**\n * \n * Classe utilizzata per modellare una pagella.\n * \n * @author Luigi Colangelo \n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class Report {\n\tpublic ArrayList<Votes> pagella; \n\t\n\t/**\n\t * Il costruttore della classe\n\t */\n\tpublic Report(){\n\t\tpagella=new ArrayList<Votes>();\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto dall'indice nell'array dato in input\n\t * @param pInd indice del voto nell'array\n\t * @return il voto dell'indice dato\n\t * @throws InvalidValueException\n\t */\n\tpublic Votes getVotes(int pInd) throws InvalidValueException{\n\t\tif(pInd<0 || pInd>=pagella.size())throw new InvalidValueException(\"indice non valido!\");\n\t\treturn (pagella.get(pInd));\n\t}\n\t\n\t/**\n\t * Metodo che aggiunge un voto all'array.\n\t * @param pVotes il voto da aggiungere\n\t * @throws InvalidValueException \n\t */\n\tpublic void addVotes(Votes pVotes) throws InvalidValueException{\n\t\tif(pVotes==null)throw new InvalidValueException(\"voto non valido!\");\n\t\telse pagella.add(pVotes);\n\t}\n\t\n\t/**\n\t * Metodo che elimina un voto dall'array\n\t * @param pId l'indice del voto da eliminare dall'array.\n\t * @throws InvalidValueException \n\t */\n\tpublic void remove(int pId) throws InvalidValueException{\n\t\tif(pId<0 || pId>=pagella.size())throw new InvalidValueException(\"indice non valido!\");\n\t\tpagella.remove(pId);\n\t}\n\t\n\t\n\tpublic String ToString(){\n\t\tString pag=\"\";\n\t\tfor(Votes e: pagella){\n\t\t\tpag=pag+\"\\n\"+e.toString();\n\t\t}\n\treturn pag;\n\t}\n    \n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc6"},"name":"DuplicatedEntityException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando si \n  * tenta di inserire un'entità già presente nel database.\n  */\npublic class DuplicatedEntityException extends Exception {\n\t\n\tprivate static final long serialVersionUID = 4858261134352455533L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic DuplicatedEntityException() {\n\t\tsuper(\"Duplicate Key into the Repository!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DuplicatedEntityException (String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc7"},"name":"ServletUpdateUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un utente.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletUpdateUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1316473033146481065L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tuser.setFirstName((pRequest.getParameter(\"firstName\")));\n\t\t\tuser.setLastName((pRequest.getParameter(\"lastName\")));\n\t\t\tuser.setCell((pRequest.getParameter(\"cell\")));\n\t\t\t/*\n\t\t\t * verifichiamo che la login sia unica.\n\t\t\t */\n\t\t\tString login = pRequest.getParameter(\"login\");\n\t\t\tuser.setLogin(login);\n\t\t\tif (managerUser.existsLogin(user))\n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\t\n\t\t\tuser.setPassword(pRequest.getParameter(\"password\"));\n\t\t\tuser.setEMail(pRequest.getParameter(\"eMail\"));\n\t\t\t//aggiorniamo\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.update(user);\n\t\t\t}else {\n\t\t\t\tint userId = managerUser.getUserId(user);\n\t\t\t\tif (user.getId()==userId)\n\t\t\t\t\tmanagerUser.update(user);\n\t\t\t\telse \n\t\t\t\t\tthrow new DuplicatedEntityException(\"Utente già esistente\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc8"},"name":"ServletLoadYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadYear extends HttpServlet {\n\n\t\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6304881993204403909L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Integer> yearList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\tyearList = managerClassroom.getAcademicYearList();\n\t\t\tgotoPage +=(String) pRequest.getParameter(\"goTo\");\n\t\t\tsession.setAttribute(\"accademicYearList\", yearList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cc9"},"name":"ServletShowUserTeachingFormByCourse.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletShowUserTeachingFormByCourse extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2305151029867525356L;\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cca"},"name":"Teaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.bean;\n\nimport smos.exception.InvalidValueException;\n\nimport java.io.Serializable;\n\n/**\n * Classe utilizzata per modellare un insegnamento.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n * \n */\n\npublic class Teaching implements Serializable {\n\n\tprivate static final long serialVersionUID = 2523612738702790957L;\n\tprivate int id_teaching;\n\tprivate String name;\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic Teaching() {\n\t\tthis.id_teaching = 0;\n\t}\n\n\t/**\n\t * Ritorna il nome dell'insegnamento\n\t * \n\t * @return Ritorna il nome dell'insegnamento.\n\t */\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * Setta il nome dell'insegnamento.\n\t * \n\t * @param pName\n\t *            Il nome da settare.\n\t * \n\t * @throws InvalidValueException\n\t */\n\tpublic void setName(String pName) throws InvalidValueException {\n\t\tif (pName.length() <= 4)// da verificare il test\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\t\tthis.name = pName;\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento.\n\t * \n\t * @return l'id dell'insegnamento.\n\t */\n\tpublic int getId() {\n\t\treturn this.id_teaching;\n\t}\n\n\t/**\n\t * Setta l'id dell'insegnamento.\n\t * \n\t * @param pId\n\t *            L'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id_teaching = pId;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ccb"},"name":"DeleteAdministratorException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n/**\n * Questa classe rappresenta l'eccezione generata quando un utente\n * tenta di eliminare l'unico utente Admin nel database.\n */\n\npublic class DeleteAdministratorException extends Exception {\n\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -2081143475624381775L;\n\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t * \n\t */\n\tpublic DeleteAdministratorException() {\n\t\tsuper(\"Impossibile eliminare l'utente, l'utente selezionato e' l'unico Admin presente nel database! Creare un nuovo Manager e riprovare!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DeleteAdministratorException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ccc"},"name":"ServletInitialize.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application;\n\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\n\nimport smos.utility.Utility;\n\n/**\n * Servlet utilizzata per inizializzare i parametri del sistema.\n * \n * @author Bavota Gabriele, Carnevale Filomena.\n *\n */\npublic class ServletInitialize extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -2542143445249797492L;\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate ServletConfig config;\n\t\n\t /**\n\n     * Inizializza i parametri\n\n     */\n\n    public void init(ServletConfig config) throws ServletException \n\n    {\n    \tthis.config = config;\n    \t               \n        \n        //Setto il server smtp specificato nel file di configurazione xml\n        Utility.setServerSmtp(config.getInitParameter(\"serverSmtp\"));\n        \n        //Setto i parametri necessari alla connessione al Database\n        Utility.setDriverMySql(config.getInitParameter(\"driverMySql\"));\n        Utility.setFullPathDatabase(config.getInitParameter(\"fullPathDatabase\"));\n        Utility.setUserName(config.getInitParameter(\"userName\"));\n        Utility.setPassword(config.getInitParameter(\"password\"));\n        Utility.setMaxPoolSize(Integer.valueOf(config.getInitParameter(\"maxPoolSize\")));\n        Utility.setWaitTimeout(Integer.valueOf(config.getInitParameter(\"waitTimeout\")));\n        Utility.setActiveTimeout(Integer.valueOf(config.getInitParameter(\"activeTimeout\")));\n        Utility.setPoolTimeout(Integer.valueOf(config.getInitParameter(\"poolTimeout\")));\n        Utility.setTextFooter(config.getInitParameter(\"textFooter\"));\n        \n        \n\t}\n\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ccd"},"name":"ServletInsertClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletInsertClassroom extends HttpServlet {\n\n\t\n\t\n\t\n\t\n\t/**\n\t * Servlet per inserire una classe \n\t * @author Nicola Pisanti\n\t * @version 0.9\n\t */\n\tprivate static final long serialVersionUID = 1355159545343902216L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tint aC=Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\tString gotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\t\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\tString isWizard = \"yes\";\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tint idAdd= (int) Integer.valueOf(pRequest.getParameter(\"address\"));\n\t\t\t\n\t\t\tClassroom classroom= new Classroom();\n\t\t\tclassroom.setName(pRequest.getParameter(\"name\"));\n\t\t\tclassroom.setAcademicYear(aC);\n\t\t\tclassroom.setIdAddress(idAdd);\n\t\t\t\n\t\t\tif(classroom.getAcademicYear()<1970){\n\t\t\t\tthrow new InvalidValueException(\"l'anno inserito Ã¨ troppo vecchio\");\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(!(managerClassroom.exists(classroom))){\n\t\t\t\tmanagerClassroom.insert(classroom);\n\t\t\t\tsession.setAttribute(\"isWizard\", isWizard);\n\t\t\t}else{\n\t\t\t\tthrow new DuplicatedEntityException(\"la classe giÃ  esiste nel database\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035cce"},"name":"Classroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2d"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c30"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5f"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c64"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5b"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5a"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c53"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c56"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c61"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c62"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c6a"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\npublic class Classroom implements Serializable{\n\n\t/**\n\t * Classe impiegata per modellare una classe \n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static final long serialVersionUID = -8295647317972301446L; \n\n\tprivate int idClassroom; //Id della classe\n\tprivate int idAddress;\t//Id dell'indirizzo\n\tprivate String name;\t//Nome della classe\n\tprivate int academicYear; //Anno accademico della classe, da inserire l'anno del primo semestre.\n\t\n\t\n\tpublic Classroom(){\n\t\tthis.idAddress=0;\n\t\tthis.idClassroom=0;\n\t\t\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'anno accademico\n\t * @return Un intero che rappresenta l'anno scolastico del primo semestre della classe.\n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t\n\t\n\t\n\t/**\n\t * Metodo che setta l'anno accademico\n\t * @param Il nuovo anno accademico da impostare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\t\n\t\n\t/**\n\t * Metodo per avere l'ID dell'indirizzo della classe\n\t * @return Un intero che rappresenta l'ID dell'indirizzo della classe\n\t */\n\tpublic int getIdAddress() {\n\t\treturn idAddress;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta l'ID dell'indirizzo della classe\n\t * @param Il nuovo ID da settare\n\t */\n\tpublic void setIdAddress(int pIdAddress) {\n\t\tthis.idAddress = pIdAddress;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'ID della classe \n\t * @return Un intero che rappresenta l'ID della classe\n\t */\n\tpublic int getIdClassroom() {\n\t\treturn idClassroom;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta l'ID della classe\n\t * @param Il nuovo ID da settare\n\t */\n\tpublic void setIdClassroom(int pIdClassroom) {\n\t\tthis.idClassroom = pIdClassroom;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce il nome della classe\n\t * @return Una stringa che rappresenta il nome della classe\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta il nome della classe\n\t * @param Il nuovo nome da settare\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\t\n\t\n\tpublic String toString(){\n\t\t\n\t\treturn (name + \" \"+ academicYear+ \" ID: \"+ idClassroom);\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e90cc7fea1f110f6a035ccf"},"name":"ServletAssignRole.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c33"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c32"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c35"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c36"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c39"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c66"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c50"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c51"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c5e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c3e"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c65"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c2c"}],["test.requirement_raw",{"$oid":"5e90cc7fea1f110f6a035c29"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare uno o piu ruoli ad un utente.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAssignRole extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 537330195407987283L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tCollection<UserListItem> administrators = new Vector<UserListItem>();\n\t\tIterator<UserListItem> itAdmin = null;\n\t\t\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\t\n\t\t\tadministrators = managerUser.getAdministrators();\n\t\t\titAdmin = administrators.iterator();\n\t\t\titAdmin.next();\n\t\t\t\n\t\t\tString[] selectedRoles = pRequest.getParameterValues(\"selectedRoles\");\n\t\t\tString[] unselectedRoles = pRequest.getParameterValues(\"unselectedRoles\");\n\t\t\t\n\t\t\tif (selectedRoles != null) {\n\t\t\t\tint selectedlength = selectedRoles.length;\n\t\t\t\tfor (int i = 0; i < selectedlength; i++) {\n\t\t\t\t\tint role = Integer.valueOf(selectedRoles[i]);\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di docente*/\n\t\t\t\t\t \n\t\t\t\t\t/*if ((role == Role.TEACHER) && (!managerUser.isTeacher(user))){\n\t\t\t\t\t\tgotoPage=\"./loadYearForTeachings\";\n\t\t\t\t\t\t\n\t\t\t\t\t}*/\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di studente*/\n\t\t\t\t\t/*if ((role == Role.STUDENT) && (!managerUser.isStudent(user))){\n\t\t\t\t\t\tgotoPage=\"./showUserList\";\n\t\t\t\t\t\t\n\t\t\t\t\t} */\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di genitore*/\n\t\t\t\t\t/*if((role==Role.PARENT)&& (!managerUser.isParent(user))){\n\t\t\t\t\t\tgotoPage=\"./persistentDataManagement/userManagement/showStudentParentForm.jsp\";\n\t\t\t\t\t}*/\n\t\t\t\t\tmanagerUser.assignRole(user, role);\n\t\t\t\t}\n\t\t\t} \n\t\t\t\n\t\t\tif (unselectedRoles != null) {\n\t\t\t\tint unselectedlength = unselectedRoles.length;\n\t\t\t\tfor (int i = 0; i < unselectedlength; i++) {\n\t\t\t\t\tint role = Integer.valueOf(unselectedRoles[i]);\n\t\t\t\t\tif ((managerUser.isAdministrator(user))&&(!itAdmin.hasNext())&&(role==Role.ADMIN)) {\n\t\t\t\t\t\tthrow new DeleteManagerException (\"Impossibile modificare il ruolo dell'utente, e' l'unico Amministratore del sistema! Creare un nuovo Amministratore e riprovare!\");\n\t\t\t\t\t}\n\t\t\t\t\tmanagerUser.removeRole(user, role);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DeleteManagerException deleteManagerException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + deleteManagerException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteManagerException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28822"},"name":"ServletShowUserClassroomForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletShowUserClassroomForm extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -8625643776134227947L;\n\n\t/**\n\t * \n\t */\n\t\n\t\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28823"},"name":"ServletLoadTeachingList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per caricare la lista degli insegnamenti Associati alla classe dello studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadTeachingList extends HttpServlet {\n\n\n\tprivate static final long serialVersionUID = -708492643674363470L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/insertReport.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\t //Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28824"},"name":"ServletShowTeachingDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeachingDetails extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 7882088509329309672L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/teachingManagement/showTeachingDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint teachingId = 0;\n\t\tTeaching teaching = null;\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tteachingId = Integer.valueOf(pRequest.getParameter(\"idTeaching\"));\n\t\t\tteaching = managerTeaching.getTeachingById(teachingId);\n\t\t\tsession.setAttribute(\"teaching\", teaching);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28825"},"name":"ServletInsertNewNote.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletInsertNewNote extends HttpServlet {\n\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6496360730201101300L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tif(pRequest.getParameter(\"insert\")==null){\n\t\t\t\tUser student =(User) session.getAttribute(\"student\"); \n\t\t\t\t\t//managerUser.getUserById(Integer.valueOf((String)pRequest.getAttribute(\"student\")));\n\t\t\t\tsession.setAttribute(\"student\", student);\n\t\t\t\tsession.setAttribute(\"idStudent\", student.getId());\n\t\t\t\tgotoPage=\"./registerManagement/insertNewNote.jsp\";\n\t\t\t}else{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNote nNote= new Note();\n\t\t\t\tnNote.setAcademicYear(((Classroom) session.getAttribute(\"classroom\")).getAcademicYear());\n\t\t\t\tnNote.setDateNote(Utility.String2Date(pRequest.getParameter(\"dateNote\")));\n\t\t\t\tnNote.setIdUser((Integer) session.getAttribute(\"idStudent\"));\n\t\t\t\tnNote.setTeacher(pRequest.getParameter(\"noteTeacher\"));\n\t\t\t\tnNote.setDescription(pRequest.getParameter(\"noteDescription\"));\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tmanagerRegister.insertNote(nNote);\n\t\t\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\t}catch(MandatoryFieldException e){\n\t\t\t\t\tsession.setAttribute(\"error\", e.getMessage());\n\t\t\t\t\tgotoPage=\"./registerManagement/insertNewNote.jsp\";\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28826"},"name":"NotImplementedYetException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * NotYetImplementedException\n *\n */\n\npackage smos.storage.connectionManagement.exception;\n\n/**\n * This exception is thrown as a warning from a part of the code which has not\n * been implemented yet, but will be in future.\n */\npublic class NotImplementedYetException extends RuntimeException {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \n     */\n    public NotImplementedYetException() {\n        super();\n    }\n\n    /**\n     * @param pMessage\n     */\n    public NotImplementedYetException(String pMessage) {\n        super(pMessage);\n    }\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28827"},"name":"ManagerClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.storage;\n\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport smos.bean.Classroom;\nimport smos.bean.User;\n\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ManagerClassroom  {\n\n\t/**\n\t * Classe che gestiste le classi dell'istituto \n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static ManagerClassroom instance;\n\t\n\tpublic static final String TABLE_CLASSROOM = \"classroom\";\n\tpublic static final String TABLE_ADDRESS =\"address\";\n\tpublic static final String TABLE_TEACHER_HAS_CLASSROOM = \"teacher_has_classroom\";\n\tpublic static final String TABLE_STUDENT_HAS_CLASSROOM = \"student_has_classroom\";\n\t\n\tprivate ManagerClassroom(){\n\t\tsuper();\n\t}\n\t\n\t\n\t\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerClassroom getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerClassroom();\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param La classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists (Classroom pClassroom) throws MandatoryFieldException, ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pClassroom.getName() == null)\n\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM\n\t\t\t\t+ \" WHERE name = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \" AND accademic_year = \"\n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear()\n\t\t\t\t+ \" AND id_address = \"\n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress())\n\t\t\t\t\n\t\t\t\t);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Inserisce l'oggetto di tipo classe nel database\n\t * @param la classe da inserire nel database\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Classroom pClassroom) throws MandatoryFieldException, \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t// controllo dei campi obbligatori\n\t\t\tif (pClassroom.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t\t}\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" (id_address, name, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpClassroom.setIdClassroom((Utility.getMaxValue(\"id_classroom\",ManagerClassroom.TABLE_CLASSROOM)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Aggiorna le statistiche di una classe\n\t * @param La classe con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update (Classroom pClassroom) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\t\t\tif (pClassroom.getIdClassroom()<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la classe!\");\n\t\t\t\n\t\t\tif (pClassroom.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t\t}\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_address = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress()) \n\t\t\t\t+ \", name = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_classroom = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdClassroom());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Cancella una classe dal database\n\t * @param La classe da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void delete (Classroom pClassroom) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\t//ManagerUser.getInstance().userOnDeleteCascade(pUser);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t\t\t\t+ \" WHERE id_classroom = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pClassroom.getIdClassroom());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized Collection<Classroom> getClassroomsByStudent(User pUser) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\ttry\n\t\t{\n\t\t\t// Se non esiste l'utente\n\t\t\tif (!managerUser.exists(pUser))\n\t\t\t\t\tthrow new EntityNotFoundException(\"L'utente non esiste!!!\");\n\t\t\tif(!managerUser.isStudent(pUser))\n\t\t\t\t\tthrow new InvalidValueException(\"L'utente non è uno studente!\");\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tint iduser=managerUser.getUserId(pUser);\n\t\t\tString tSql = \n\t\t\t\t\n\t\t\t\t\"SELECT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".* FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM \n\t\t\t\t+ \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(iduser)\n\t\t\t\t+\" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM \n\t\t\t\t+\".id_classroom\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente inserito\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Restituisce la classe che ha l'ID passato \n\t * @param L'ID della classe cercata\n\t * @return una stringa che rappresenta la classe con l'ID fornito\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Classroom getClassroomByID(int pId) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tClassroom result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la classe!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE id_classroom = \" \n\t\t\t\t+ Utility.isNull(pId) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadRecordFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'utente!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Restituisce una collezione di classi dello stesso anno accademico\n\t */\n\tpublic synchronized Collection<Classroom> getClassroomsByAcademicYear(int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per la data inserita\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\t\n\tpublic synchronized Collection<Integer> getAcademicYearList() throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Integer> result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT DISTINCT accademic_year FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM\n\t\t\t\t+ \" order by accademic_year \";\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadIntegersFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per la data inserita\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\tpublic synchronized Classroom getClassroomByUserAcademicYear(User pUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tClassroom result = null;\n\t\tClassroom temp = null;\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tCollection<Classroom> list = null;\n\t\tlist = managerClassroom.getClassroomsByStudent(pUser);\n\t\tIterator<Classroom> it = list.iterator();\n\t\twhile(it.hasNext()){\n\t\t\ttemp = it.next();\n\t\t\tif(temp.getAcademicYear()==pAcademicYear){\n\t\t\t\tresult = temp;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tpublic synchronized Collection<Classroom> getClassroomsByTeacherAcademicYear(User pUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result = null;\n\t\tConnection connect = null;\n\t\tint idUser = pUser.getId();\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT DISTINCT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM +\".* FROM \"  \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \" WHERE  \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \".id_classroom  AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".accademic_year = \"\n\t\t\t\t+ Utility.isNull(pAcademicYear)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM + \".id_user = \"\n\t\t\t\t+ Utility.isNull(idUser)\n\t\t\t\t;\n\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente e l'anno inseriti\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t\n\t}\n\tpublic synchronized Collection<Classroom> getClassroomsByTeacher(User pUser) \n\tthrows EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\ttry\n\t\t{\n\t\t\t// Se non esiste l'utente\n\t\t\tif (!managerUser.exists(pUser))\n\t\t\t\t\tthrow new EntityNotFoundException(\"L'utente non esiste!!!\");\n\t\t\tif(!managerUser.isTeacher(pUser))\n\t\t\t\t\tthrow new InvalidValueException(\"L'utente non è uno studente!\");\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tint iduser=managerUser.getUserId(pUser);\n\t\t\tString tSql = \n\t\t\t\t\n\t\t\t\t\"SELECT DISTINCT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".* FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(iduser)\n\t\t\t\t+\" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+\".id_classroom\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) {\n\t\t\t\t\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente inserito\");\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/** COnsente la lettura di un intero dal recod resultSet\n\t * \n\t * @param pRs\n\t * \t\tresultSet\n\t * @return\n\t * \tcollection<Integer>\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Integer> loadIntegersFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Integer> result = new Vector<Integer>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(pRs.getInt(\"accademic_year\"));\n\t\t} \n\t\treturn result;\n\t}\n\n\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param Il result set da cui estrarre l'oggetto Classroom\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Classroom loadRecordFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tClassroom classroom = new Classroom();\n\t\tclassroom.setName(pRs.getString(\"name\"));\n\t\tclassroom.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\tclassroom.setIdClassroom(pRs.getInt(\"id_classroom\"));\n\t\tclassroom.setIdAddress(pRs.getInt(\"id_address\"));\n\t\treturn classroom;\n\t}\n\n\t/**\n\t * Consente la lettura di un piÃ¹ record dal Result Set\n\t * @param Il result set da cui estrarre l'oggetto Classroom\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Collection<Classroom> loadRecordsFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Classroom> result = new Vector<Classroom>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} \n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28828"},"name":"ServletShowAddressList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.addressManagement;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli indirizzi.\n * \n * @author Vecchione Giuseppe\n * \n */\npublic class ServletShowAddressList extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = 8797912020763935353L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString errorMessage=\"\";\n\t\tString gotoPage=\"./persistentDataManagement/addressManagement/showAddressList.jsp\";\n\t\tHttpSession session=pRequest.getSession();\n\t\tCollection<Address> addressList=null;\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tUser loggedUser = (User)session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif(loggedUser==null){\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\terrorMessage=\"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\taddressList=managerAddress.getAddressList();\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"addressList\", addressList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\t\t\t\t\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException sqlException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tsqlException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t}\n\t\tpRequest.getSession().setAttribute(\"errorMessage\",errorMessage);\n\t\t\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28829"},"name":"LoginException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un utente\n  * inserisce una password errata durante l'autenticazione\n  */\npublic class LoginException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -1213284697567763493L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic LoginException() {\n\t\tsuper(\"Login or Password Incorrect or Invalid Session!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic LoginException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2882a"},"name":"Absence.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\npublic class Absence implements Serializable {\n\n\t/**\n\t * Classe che modella l'assenza di uno studente\n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = -8396513309450121449L;\n\t\n\tprivate int idAbsence;\n\tprivate int idUser;\n\tprivate Date dateAbsence;\n\tprivate Integer idJustify;\n\tprivate int academicYear;\n\t\n\tpublic Absence (){\n\t\t\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'id dell'assenza\n\t * @return un intero che rappresenta l'id dell'assenza\n\t */\n\tpublic int getIdAbsence() {\n\t\treturn idAbsence;\n\t}\n\t/**\n\t * Metodo che setta l'id dell'assenza\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdAbsence(int pIdAbsence) {\n\t\tthis.idAbsence = pIdAbsence;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente relativo all'assenza\n\t * @return un intero che rappresenta l'id dello studente assente\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo all'assenza\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data dell'assenza\n\t * @return una stringa che rappresenta la data dell'assenza\n\t */\n\tpublic Date getDateAbsence() {\n\t\treturn dateAbsence;\n\t}\n\t/**\n\t * Metodo che setta la data dell'assenza\n\t * @param una stringa con la data da settare\n\t */\n\tpublic void setDateAbsence(Date pDateAbsence) {\n\t\tthis.dateAbsence = pDateAbsence;\n\t}\n\t/**\n\t * Metodo che ritorna l'id della giustifica relativa all'assenza\n\t * @return un intero che rappresenta l'id della giustifica relativa all'assenza, oppure null se l'assenza non Ã¨ stata giustificata\n\t */\n\tpublic Integer getIdJustify() {\n\t\t\n\t\treturn idJustify;\n\t\t\n\t}\n\t/**\n\t * Metodo che setta l'id della giustifica relativa all'assenza\n\t * @param un intero che rappresenta l'id della giustifica da settare\n\t */\n\tpublic void setIdJustify(Integer pIdJustify) {\n\t\tthis.idJustify = pIdJustify;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo all'assenza\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo all'assenza\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2882b"},"name":"Environment.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos;\n\n/**\n * Classe utilizzata per contenere le variabili d'ambiente di GESA \n */\npublic class Environment {\n\n    /**\n     * Messaggio di errore di default.\n     */\n    public static String DEFAULT_ERROR_MESSAGE = \"Un errore si e' verificato durante l'elaborazione della richiesta.<br><br>\";\n\n    private static String poolPropertiesPath = \"\";\n\n    /**\n     * @return getPoolPropertiesPath()\n     */\n    public static String getPoolPropertiesPath() {\n        return poolPropertiesPath;\n    }\n    \n    /**\n     * @param poolPropertiesPath\n     */\n    public static void setPoolPropertiesPath(String poolPropertiesPath) {\n        Environment.poolPropertiesPath = poolPropertiesPath;\n    }\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2882c"},"name":"ServletDeleteTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.*;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per eliminare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletDeleteTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7133554709559970023L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tTeaching teaching = (Teaching) session.getAttribute(\"teaching\");\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} else\n\t\t\t\tmanagerTeaching.delete(teaching);\n\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2882d"},"name":"ManagerRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}]],"contents":"package smos.storage;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Vector;\n\nimport smos.bean.Absence;\nimport smos.bean.Delay;\nimport smos.bean.Justify;\nimport smos.bean.Note;\nimport smos.bean.RegisterLine;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ManagerRegister {\n\n\t\n\t/**\n\t * Classe che gestisce il Registro Digitale\n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static ManagerRegister instance;\n\t\n\tpublic final static String TABLE_ABSENCE=\"absence\";\n\tpublic final static String TABLE_DELAY=\"delay\";\n\tpublic final static String TABLE_JUSTIFY=\"justify\";\n\tpublic final static String TABLE_NOTE=\"note\";\n\t\n\t\n\tprivate ManagerRegister(){\n\t\tsuper();\n\t}\n\t\n\t\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerRegister getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerRegister();\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pAbsence\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Absence pAbsence) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE\n\t\t\t\t+ \" WHERE id_absence = \"\n\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next()){\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pDelay\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Delay pDelay) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE\n\t\t\t\t+ \" WHERE id_delay = \"\n\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pDelay\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Justify pJustify) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY\n\t\t\t\t+ \" WHERE  id_justify = \"\n\t\t\t\t+ Utility.isNull(pJustify.getIdJustify());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Inserisce un assenza nel database\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertAbsence(Absence pAbsence) throws  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" (id_user, date_absence, id_justify, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getDateAbsence()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpAbsence.setIdAbsence((Utility.getMaxValue(\"id_absence\",ManagerRegister.TABLE_ABSENCE)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Inserisce un ritardo nel database\n\t * @param pDelay\n\t * \t\tun oggetto di tipo Delay da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertDelay(Delay pDelay) throws  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" (id_user, date_delay, time_delay, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pDelay.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getDateDelay()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getTimeDelay()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpDelay.setIdDelay((Utility.getMaxValue(\"id_delay\",ManagerRegister.TABLE_DELAY)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\n\t/**\n\t * Inserisce una nota nel database\n\t * @param pNote\n\t * \t\tun oggetto di tipo Note da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertNote(Note pNote) throws MandatoryFieldException,  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\tif (pNote.getDescription() == null || pNote.getDescription().equals(\"\"))\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire il testo della nota\");\n\t\t\t\n\t\t\tif (pNote.getTeacher() == null || pNote.getTeacher().equals(\"\") )\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire l'insegnante\");\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" (id_user, date_note, description, teacher, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pNote.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getDateNote()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getDescription()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getTeacher()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpNote.setIdNote((Utility.getMaxValue(\"id_note\",ManagerRegister.TABLE_NOTE)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Inserisce una giustifica nel database\n\t * @param pJustify \n\t * \t\tun oggetto di tipo Justify da inserire nel database\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence che rappresenta l'assenza giustificata\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertJustify(Justify pJustify, Absence pAbsence) throws   \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" (id_user, date_justify, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pJustify.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pJustify.getDateJustify()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pJustify.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpJustify.setIdJustify((Utility.getMaxValue(\"id_justify\",ManagerRegister.TABLE_JUSTIFY)));\n\t\t\t\n\t\t\tpAbsence.setIdJustify(pJustify.getIdJustify());\n\t\t\tthis.updateAbsence(pAbsence);\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella un'assenza dal database\n\t * @param pAbsence\n\t * \t\tl'assenza da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteAbsence (Absence pAbsence) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t\t\t\t+ \" WHERE id_absence = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t\t\t\n\t\t\t\tif (!(pAbsence.getIdJustify()==null)){\n\t\t\t\t\tdeleteJustify(pAbsence.getIdJustify());\n\t\t\t\t}\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\n\t/**\n\t * Cancella un ritardo dal database\n\t * @param pDelay\n\t * \t\til ritardo da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteDelay (Delay pDelay) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t\t\t\t+ \" WHERE id_delay = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella una nota dal database\n\t * @param pNote\n\t * \t\tla nota da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteNote (Note pNote) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t\t\t\t+ \" WHERE id_note = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pNote.getIdNote());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella una nota dal database\n\t * @param pJIDustify\n\t * \t\tl'ID della nota da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteJustify (int pIDJustify) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t\t\t\t+ \" WHERE id_justify = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pIDJustify);\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tAbsence temp= getAbsenceByIdJustify(pIDJustify);\n\t\t\t\t\ttemp.setIdJustify(0);\n\t\t\t\t\tupdateAbsence(temp);\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\t// è normale se un exception viene generata\n\t\t\t\t\t// dato che può essere che stiamo cancellando una giustifica\n\t\t\t\t\t//di cui abbiamo appena cancellato l'assenza \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna le statistiche di un'assenza\n\t * @param pAbsence\n\t * \t\tL'assenza con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\t\n\tpublic synchronized void updateAbsence (Absence pAbsence) throws ConnectionException,\n\tSQLException, EntityNotFoundException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdUser()) \n\t\t\t\t+ \", date_absence = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getDateAbsence()) \n\t\t\t\t+ \", id_justify = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify())  \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_absence = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Aggiorna le statistiche di un ritardo\n\t * @param pDelay\n\t * \t\tIl ritardo con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\t\n\tpublic synchronized void updateDelay (Delay pDelay) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pDelay.getIdUser()) \n\t\t\t\t+ \", date_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getDateDelay()) \n\t\t\t\t+ \", time_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getTimeDelay())  \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pDelay.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Metodo che aggiorna le statistiche di una Nota\n\t * @param pNote\n\t * \t\tun oggetto di tipo Note con le statistiche aggiornate ma id identico\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\tpublic synchronized void updateNote (Note pNote) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\t\t\tif (pNote.getDescription() == null || pNote.getDescription().equals(\"\"))\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire il testo della nota\");\n\t\t\t\n\t\t\tif (pNote.getTeacher() == null || pNote.getTeacher().equals(\"\") )\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire l'insegnante\");\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_NOTE\n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pNote.getIdUser()) \n\t\t\t\t+ \", date_note = \" \n\t\t\t\t+ Utility.isNull(pNote.getDateNote())   \n\t\t\t\t+ \", description = \" \n\t\t\t\t+ Utility.isNull(pNote.getDescription())   \n\t\t\t\t+ \", teacher = \" \n\t\t\t\t+ Utility.isNull(pNote.getTeacher())   \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pNote.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_note = \" \n\t\t\t\t+ Utility.isNull(pNote.getIdNote());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Aggiorna le statistiche di una giustifica \n\t * @param pJustify\n\t * \t\tla giustifica con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\n\tpublic synchronized void updateJustify (Justify pJustify) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_JUSTIFY\n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pJustify.getIdUser()) \n\t\t\t\t+ \", date_justify = \" \n\t\t\t\t+ Utility.isNull(pJustify.getDateJustify())   \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pJustify.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pJustify.getIdJustify());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Metodo che restituisce una nota dato l'id della note stessa\n\t * @param pIDJustify\n\t * \t\tun intero che rappresenta l'id della nota  \n\t * @return un oggetto di tipo Note che rappresenta la nota\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Note getNoteById( int pIDNote)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tNote result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDNote<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la nota\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" WHERE id_note = \" \n\t\t\t\t+ Utility.isNull(pIDNote) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadNoteFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la nota!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * Metodo che restituisce un assenza dato l'id della giustifca associata a tale assenza\n\t * @param pIDJustify\n\t * \t\tun intero che rappresenta l'id della giustifica  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza giustificata\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Absence getAbsenceByIdJustify( int pIDJustify)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tAbsence result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDJustify<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la l'assenza\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pIDJustify) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadAbsenceFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce un assenza dato l'id di questa\n\t * @param pIDAbsence\n\t * \t\tun intero che rappresenta l'id dell'assenza  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza \n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Absence getAbsenceByIdAbsence( int pIDAbsence)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tAbsence result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDAbsence<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l' assenza\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE id_absence = \" \n\t\t\t\t+ Utility.isNull(pIDAbsence) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadAbsenceFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce un ritardo dato l'id di questo\n\t * @param pIDDelay\n\t * \t\tun intero che rappresenta l'id del ritardo  \n\t * @return un oggetto di tipo Delay che rappresenta il ritardo\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Delay getDelayById( int pIDDelay)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tDelay result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDDelay<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare il ritardo\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY\n\t\t\t\t+ \" WHERE id_delay = \" \n\t\t\t\t+ Utility.isNull(pIDDelay) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadDelayFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce un assenza dato l'id di questa\n\t * @param pIDAbsence\n\t * \t\tun intero che rappresenta l'id dell'assenza  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza \n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Justify getJustifyByIdJustify( int pIDJustify)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tJustify result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDJustify<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pIDJustify) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\t\n\t\t\t\tresult= this.loadJustifyFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce true se l'assenza data in input ha una giustifica assegnata\n\t * @param pAbsence\n\t * \t\tun oggetto di valore Absence di cui bisogna controllare se ha giustifica\n\t * @return true se l'assenza Ã¨ giustificata, false altrimenti\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\tpublic synchronized boolean hasJustify(Absence pAbsence)throws EntityNotFoundException, ConnectionException, SQLException{\n\t\tif(!exists(pAbsence)) throw new EntityNotFoundException(\"Assenza non presente in database\");\n\t\tif(pAbsence.getIdJustify()==null) return false;\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce la giustifica legata a una data assenza\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence che rappresenta l'assenza\n\t * @return\tun oggetto di tipo Justify, oppure null se l'assenza non ha giustifica\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\tpublic synchronized Justify getJustifyByAbsence(Absence pAbsence)throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tif(!exists(pAbsence)) throw new EntityNotFoundException(\"Assenza non presente in database\");\n\t\tif(pAbsence.getIdJustify()==null) return null;\n\t\t\n\t\tJustify result=null;\n\t\tConnection connect = null;\n\t\ttry{\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify()) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadJustifyFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t\t\n\t\t\n\t}\n\n\t/**\n\t * Metodo che restituisce le assenze preso un dato anno scolastico e utente in input\n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dell'utente\n\t * @param pAcademicYear\n\t * \t\tun intero che rappresenta l'anno accademico \n\t * @return una colleczione di assenze (vuota se l'utente non ha avuto assenze ) \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\t\n\tpublic synchronized Collection<Absence> getAbsenceByIDUserAndAcademicYear(int pIdUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Absence> result=new Vector<Absence>();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\twhile(tRs.next())  {\n\t\t\t\tresult.add(loadAbsenceFromRs(tRs));\n\t\t\t} \n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Metodo che restituisce una collezione di note per un dato utente ed un dato anno scolastico\n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dell'utente\n\t * @param pAcademicYear\n\t * \t\tun intero che rappresenta l'anno accademico \n\t * @return una collezione di note, vuota se l'utente non ne ha ricevute\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Note> getNoteByIDUserAndAcademicYear(int pIdUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Note> result=new Vector<Note>();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\twhile(tRs.next())  {\n\t\t\t\tresult.add(loadNoteFromRs(tRs));\n\t\t\t} \n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'assenza di una dato studente in un dato giorno \n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dello studente\n\t * @param pDate\n\t * \t\tuna stringa che rappresenta la data formattata per il database\n\t * @return un oggetto di tipo Absence, oppure null se lo studente era presente\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\t\n\tpublic synchronized Absence getAbsenceByIDUserAndDate(int pIdUser, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tAbsence result=new Absence();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t//TODO controlli sulla formattazione della stringa\n\t\t\t\n\t\t\t\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE date_absence = \" \n\t\t\t\t+ Utility.isNull(pDate) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif(tRs.next())  {\n\t\t\t\tresult=loadAbsenceFromRs(tRs);\n\t\t\t}else {\n\t\t\t\tresult=null;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce il ritardo di una dato studente in un dato giorno \n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dello studente\n\t * @param pDate\n\t * \t\tuna stringa che rappresenta la data formattata per il database\n\t * @return un oggetto di tipo Delay, oppure null se lo studente era in orario o assente\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\t\n\tpublic synchronized Delay getDelayByIDUserAndDate(int pIdUser, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tDelay result=new Delay();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t//TODO controlli sulla formattazione della stringa\n\t\t\t\n\t\t\t\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" WHERE date_delay = \" \n\t\t\t\t+ Utility.isNull(pDate) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif(tRs.next())  {\n\t\t\t\tresult=loadDelayFromRs(tRs);\n\t\t\t}else {\n\t\t\t\tresult=null;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\tpublic synchronized Collection<RegisterLine> getRegisterByClassIDAndDate(int pClassID, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\t\n\t\tCollection<RegisterLine> result = new Vector<RegisterLine>();\n\t\tManagerUser mg = ManagerUser.getInstance();\n\t\t\n\t\tCollection<UserListItem> students = mg.getStudentsByClassroomId(pClassID);\n\t\t\n\t\t\n\t\tfor (UserListItem x : students){\n\t\t\tRegisterLine temp = new RegisterLine();\n\t\t\ttemp.setStudent(x);\n\t\t\ttemp.setAbsence(this.getAbsenceByIDUserAndDate(x.getId(), pDate));\n\t\t\ttemp.setDelay(this.getDelayByIDUserAndDate(x.getId(), pDate));\n\t\t\tresult.add(temp);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/**\n\t * Metodo che verifica se c'è un'assenza in una linea del registro \n\t * @param pRegisterLine\n\t * \t\tun oggetto di tipo RegisterLine\n\t * @return\ttrue se c'è un'assenza nella linea di registro passata, altrimenti false\n\t */\n\t\n\t\n\tpublic boolean hasAbsence(RegisterLine pRegisterLine){\n\t\tif(pRegisterLine.getAbsence()==null)return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Metodo che verifica se c'è un ritardo in una linea del registro \n\t * @param pRegisterLine\n\t * \t\tun oggetto di tipo RegisterLine\n\t * @return\ttrue se c'è un ritardo nella linea di registro passata, altrimenti false\n\t */\n\t\n\t\n\tpublic boolean hasDelay(RegisterLine pRegisterLine){\n\t\tif(pRegisterLine.getDelay()==null)return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Absence\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Absence loadAbsenceFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tAbsence absence = new Absence();\n\t\t\n\t\tabsence.setIdAbsence(pRs.getInt(\"id_absence\"));\n\t\tabsence.setIdUser(pRs.getInt(\"id_user\"));\n\t\tabsence.setDateAbsence((Date)pRs.getDate(\"date_absence\"));\n\t\tabsence.setIdJustify(pRs.getInt(\"id_justify\"));\n\t\tabsence.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\t\n\t\treturn absence;\n\t}\n\t\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Justify\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Justify loadJustifyFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tJustify justify = new Justify();\n\t\t\n\t\tjustify.setIdJustify(pRs.getInt(\"id_justify\"));\n\t\tjustify.setIdUser(pRs.getInt(\"id_user\"));\n\t\tjustify.setDateJustify((Date)pRs.getDate(\"date_justify\"));\n\t\tjustify.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\t\n\t\treturn justify;\n\t}\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Note\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Note loadNoteFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tNote note= new Note();\n\t\t\n\t\tnote.setIdNote(pRs.getInt(\"id_note\"));\n\t\tnote.setIdUser(pRs.getInt(\"id_user\"));\n\t\tnote.setDateNote((Date)pRs.getDate(\"date_note\"));\n\t\tnote.setDescription(pRs.getString(\"description\"));\n\t\tnote.setTeacher(pRs.getString(\"teacher\"));\t\n\t\tnote.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\n\t\treturn note;\n\t}\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Delay\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Delay loadDelayFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tDelay delay = new Delay();\n\t\t\t\t\n\t\tdelay.setIdDelay(pRs.getInt(\"id_delay\"));\n\t\tdelay.setIdUser(pRs.getInt(\"id_user\"));\n\t\tdelay.setDateDelay((Date)pRs.getDate(\"date_delay\"));\n\t\tdelay.setTimeDelay(pRs.getString(\"time_delay\"));\n\t\tdelay.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\n\t\treturn delay;\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2882e"},"name":"ServletShowAddressDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.addressManagement;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un indirizzo.\n * \n * @author Vecchione Giuseppe.\n * \n */\npublic class ServletShowAddressDetails extends HttpServlet {\n\n\t\n\n\t\n\n\t\n\tprivate static final long serialVersionUID = 2136348837349051766L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/addressManagement/showAddressDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint addressId = 0;\n\t\tAddress address= null;\n\t\tManagerAddress managerAddress = ManagerAddress.getInstance();\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\taddressId = Integer.valueOf(pRequest.getParameter(\"idAddress\"));\n\t\t\taddress = managerAddress.getAddressById(addressId);\n\t\t\tsession.setAttribute(\"address\", address);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2882f"},"name":"ServletDeleteJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7692034998093997864L;\n\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tString idClassroom=(String) session.getAttribute(\"idClassroom\");\n\t\tint id= Integer.parseInt(idClassroom);\n\t\tgotoPage+=\"?idClassroom=\"+id;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) &&\n\t\t\t\t\t(!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tJustify justify = (Justify) session.getAttribute(\"justify\");\n\t\t\t\n\t\t\tif(mR.exists(justify)){\n\t\t\t\tmR.deleteJustify(justify.getIdJustify());\n\t\t\t}else{\n\t\t\t\terrorMessage= \"impossibile cancellare la giustifica, questa non esiste!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28830"},"name":"ServletUpdateRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Classroom;\nimport smos.bean.Delay;\nimport smos.bean.RegisterLine;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletUpdateRegister extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 5966298318913522686L;\n\t\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\t//Variabile booleana utilizzata per verificare se lo studente ha o meno un'assenza\n\t\tboolean flag = false;\n\t\t\n\t\t//Collection utilizzata per la memorizzazione del registro di una particolare data\n\t\tCollection<RegisterLine> register = null;\n\t\t//Iteratore necessario a scorrere la collection\n\t\tIterator itRegister = null;\n\t\t//Variabile temporanea necessaria a leggere le informazioni dalla collection\n\t\tRegisterLine tmpRegisterLine = null;\n\t\t//Variabile temporanea necessaria a leggere le informazioni dalla collection\n\t\tUserListItem student = null;\n\t\t\n\t\t//Variabile temporanea necessaria all'inserimento delle nuove assenze\n\t\tAbsence tmpAbsence = null;\n\t\t\n\t\t//Variabile temporanea necessaria all'inserimento di nuovi ritardi\n\t\tDelay tmpDelay = null;\n\t\t\n\t\t//Classi manager necessarie all'elaborazione\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance();\n\t\t\n\t\t//Variabili necessarie per la memorizzazione dei dati provenienti dalla request\n\t\tString[] absences = null; //Memorizza gli alunni assenti\n\t\tString[] delays = null; //Memorizza gli alunni ritardatari\n\t\t\n\t\t//Recupero l'utente loggato dalla sessione\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t//Verifico che l'utente loggato abbia i permessi necessari\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t//Recupero i parametri dalla pRequest\n\t\tDate date = Utility.String2Date(pRequest.getParameter(\"date\"));\n\t\tabsences = pRequest.getParameterValues(\"absences\");\n\t\tdelays = pRequest.getParameterValues(\"delays\");\n\t\t\n\t\t//Recupero l'oggetto classroom dalla session\n\t\tClassroom classroom = ((Classroom) session.getAttribute(\"classroom\"));\n\t\t\n\t\t/*Invoco il metodo della managerRegister per recuperare dal db le informazioni\n\t\t * inerenti il registro di una classe ad una particolare data (Assenze, Ritardi)\n\t\t */\n\t\tregister = managerRegister.getRegisterByClassIDAndDate(classroom.getIdClassroom(),date);\n\t\t\t\n\t\tif (register != null){\n\t\t\titRegister = register.iterator();\n\t\t}\n\t\t\n\t\tif (itRegister != null){\n\t\t\twhile(itRegister.hasNext()){\n\t\t\t\ttmpRegisterLine = (RegisterLine) itRegister.next();\n\t\t\t\t//Recupero lo studente cui la register line si riferisce\n\t\t\t\tstudent = tmpRegisterLine.getStudent();\n\t\t\t\t\n\t\t\t\t//Verifico se per lo studente e' stata inserita o meno un'assenza\n\t\t\t\tif (absences != null){\n\t\t\t\t\tfor (int i=0; i<absences.length; i++){\n\t\t\t\t\t\tif (Integer.valueOf(absences[i]) == student.getId()){\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tif (!managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\t\t\ttmpAbsence = new Absence();\n\t\t\t\t\t\t\t\ttmpAbsence.setAcademicYear(classroom.getAcademicYear());\n\t\t\t\t\t\t\t\ttmpAbsence.setDateAbsence(date);\n\t\t\t\t\t\t\t\ttmpAbsence.setIdJustify(0);\n\t\t\t\t\t\t\t\ttmpAbsence.setIdUser(student.getId());\n\t\t\t\t\t\t\t\tmanagerRegister.insertAbsence(tmpAbsence);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag){\n\t\t\t\t\t\tif (managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\t\tmanagerRegister.deleteAbsence(tmpRegisterLine.getAbsence());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\tmanagerRegister.deleteAbsence(tmpRegisterLine.getAbsence());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tflag = false;\n\t\t\t\t\n\t\t\t\t//Verifico se per lo studente e' stata inserito o meno un ritardo\n\t\t\t\tif (delays != null){\n\t\t\t\t\tfor (int i=0; i<delays.length; i++){\n\t\t\t\t\t\tif (Integer.valueOf(delays[i]) == student.getId()){\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tif (!managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\t\t\ttmpDelay = new Delay();\n\t\t\t\t\t\t\t\ttmpDelay.setAcademicYear(classroom.getAcademicYear());\n\t\t\t\t\t\t\t\ttmpDelay.setDateDelay(date);\n\t\t\t\t\t\t\t\ttmpDelay.setIdUser(student.getId());\n\t\t\t\t\t\t\t\ttmpDelay.setTimeDelay(pRequest.getParameter(\"hour_\" + student.getId()));\n\t\t\t\t\t\t\t\tmanagerRegister.insertDelay(tmpDelay);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttmpDelay = tmpRegisterLine.getDelay();\n\t\t\t\t\t\t\t\ttmpDelay.setTimeDelay(pRequest.getParameter(\"hour_\" + student.getId()));\n\t\t\t\t\t\t\t\tmanagerRegister.updateDelay(tmpDelay);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag){\n\t\t\t\t\t\tif (managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\t\tmanagerRegister.deleteDelay(tmpRegisterLine.getDelay());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\tmanagerRegister.deleteDelay(tmpRegisterLine.getDelay());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\n\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + e.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + e.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28831"},"name":"ServletShowJustifyList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowJustifyList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6666791203700528449L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\t\n\t\tString gotoPage = \"./registerManagement/showJustifyList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister  managerRegister= ManagerRegister.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\tString student =pRequest.getParameter(\"student\");\n\t\t\n\t\tint st = Integer.parseInt(student);\n\t\tClassroom classroom=(Classroom)session.getAttribute(\"classroom\");\n\t\t\n\t\t\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\tUser userStudent=managerUser.getUserById(st);\n\t\t\t\n\t\t\tCollection<Absence> absenceList =(Collection<Absence>)managerRegister.getAbsenceByIDUserAndAcademicYear(st, classroom.getAcademicYear());\n\t\t\tsession.setAttribute(\"absenceList\", absenceList);\n\t\t\tsession.setAttribute(\"utente\", userStudent);\n\t\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();}\n\t\t\n\t\t\n\t}\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28832"},"name":"PermissionException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un utente\n  * tenta di compiere un'operazione per la quale non ha il permesso.\n  */\npublic class PermissionException extends Exception {\n\t\n\tprivate static final long serialVersionUID = 1881009447251825664L;\n\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t */\n\tpublic PermissionException() {\n\t\tsuper(\"Permission Denied!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic PermissionException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28833"},"name":"ServletShowStudentsByClass.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.*;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowStudentsByClass extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli alunni associati ad una Classe.\n\t * \n\t * @author Giulio D'Amora\n\t * \n\t */\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2020233250419553067L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showStudentsByClass.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tint idClassroom = Integer.valueOf(pRequest\n\t\t\t\t\t.getParameter(\"idClassroom\"));\n\t\t\tClassroom classroom = ManagerClassroom.getInstance().getClassroomByID(idClassroom);\n\t\t\tCollection<UserListItem> students = (Collection<UserListItem>) managerUser\n\t\t\t\t\t.getStudentsByClassroomId(idClassroom);\n\t\t\tsession.setAttribute(\"StudentList\", students);\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28834"},"name":"MailUtility.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.utility;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.Properties;\nimport javax.mail.*;\nimport javax.mail.internet.*;\n\n\npublic class MailUtility {\n\n\tpublic static void sendMail(String pSender, String pReceiver, String pSubject, String pText) throws MessagingException, UnsupportedEncodingException {\n\t\t\n\t\t// Creazione di una mail session\n\t\tProperties props = new Properties();\n\t\tprops.put(\"mail.smtp.host\", Utility.getServerSmtp());\n\t\tSession session = Session.getDefaultInstance(props);\n\n\t\t// Creazione del messaggio da inviare\n\t\tMimeMessage message = new MimeMessage(session);\n\t\tmessage.setSubject(pSubject);\n\t\tmessage.setText(pText);\n\n\t\t// Aggiunta degli indirizzi del mittente e del destinatario\n\t\tInternetAddress fromAddress = new InternetAddress(pSender);\n\t\tInternetAddress toAddress = new InternetAddress(pReceiver);\n\t\tmessage.setFrom(fromAddress);\n\t\tmessage.setRecipient(Message.RecipientType.TO, toAddress);\n\n\t\t// Invio del messaggio\n\t\tTransport.send(message);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28835"},"name":"DefaultException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione predefinita generata dal sistema.\n  */\npublic class DefaultException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -8985617134055655964L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic DefaultException() {\n\t\tsuper();\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DefaultException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28836"},"name":"Votes.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\nimport smos.exception.InvalidValueException;\n\n/**\n * \n * Classe utilizzata per modellare una voto.\n * \n * @author Luigi Colangelo \n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class Votes implements Serializable {\n\n\t/**\n\t * Classe utilizzata per modellare un voto\n\t * \n\t */\n\tprivate static final long serialVersionUID = 3014235634635608576L;\n    private int id_votes;\n    private int id_user;\n    private int teaching;\n    private int written;\n    private int oral;\n    private int laboratory;\n    private int accademicYear;\n    private int turn;\n    \n    /**\n     * Il costruttore della classe\n     */\n    public Votes(){\n    \tid_votes=0;\n    }\n    \n    /**\n     * Metodo che restituisce l'id del voto.\n     * @return l'id del voto\n     */\n\tpublic int getId_votes() {\n\t\treturn id_votes;\n\t}\n\t\n\t/**\n\t * Metodo che setta l'id del voto\n\t * @param pId_votes\n     *             l'id da settare\n\t */\n\tpublic void setId_votes(int pId_votes) {\n\t\tthis.id_votes = pId_votes;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'id dell'utente collegato al voto\n\t * @return l'id dell'utente\n\t */\n\tpublic int getId_user() {\n\t\treturn id_user;\n\t}\n\t\n\t/**\n\t * Metodo che setta l'id dell'utente relativo al voto\n\t * @param pId_user\n\t *               l'id da settare\n\t */\n\tpublic void setId_user(int pId_user) {\n\t\tthis.id_user = pId_user;\n\t}\n\t\n\t/**\n\t * metodo che restituisce il codice dell'insegnamento del voto\n\t * @return il metodo dell'insegnamento\n\t */\n\tpublic int getTeaching() {\n\t\treturn teaching;\n\t}\n\t\n\t/**\n\t * Metodo che setta il codice dell'insegnamento relativo al voto\n\t * @param pTeaching\n\t *              il codice dell'insegnamento\n\t */\n\tpublic void setTeaching(int pTeaching) {\n\t\tthis.teaching = pTeaching;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto dello scritto \n\t * @return il voto nello scritto \n\t */\n\tpublic int getWritten() {\n\t\treturn written;\n\t}\n\t\n\t/**\n\t * Metodo che setta il voto dello scritto, controllando che esso sia compreso tra 0 e 10\n\t * @param pWritten\n\t */\n\tpublic void setWritten(int pWritten) throws InvalidValueException {\n\t\tif (pWritten < 0 || pWritten > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.written = pWritten;\n\t}\n\t\n\t/**\n\t *  metodo che restituisce il voto dell' orale\n\t * @return il voto dell'orale\n\t */\n\tpublic int getOral() {\n\t\treturn oral;\n\t}\n\t\n\t/**\n\t * Metodo che setta il voto dell'orale, controllando che esso sia compreso tra 0 e 10 \n\t * @param pOral\n\t *            il voto dell'orale da settare\n\t */\n\tpublic void setOral(int pOral) throws InvalidValueException{\n\t\tif (pOral < 0 || pOral > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.oral = pOral;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto del laboratorio\n\t * @return il voto del laboratorio\n\t */\n\tpublic int getLaboratory() {\n\t\treturn laboratory;\n\t}\n\t\n\t/**\n\t * metodo che setta il voto del laboratorio, controllando che esso sia compreso tra 0 e 10\n\t * @param pLaboratory\n\t *                 il voto del laboratorio da settare\n\t */\n\tpublic void setLaboratory(int pLaboratory)throws InvalidValueException {\n\t\tif (pLaboratory < 0 || pLaboratory > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.laboratory = pLaboratory;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'anno accademico del voto\n\t * @return l'anno accademico\n\t */\n\tpublic int getAccademicYear() {\n\t\treturn accademicYear;\n\t}\n\t\n\t/**\n\t * metodo che setta l'anno accademico del voto\n\t * @param pAccademicYear\n\t */\n\tpublic void setAccademicYear(int pAccademicYear) {\n\t\tthis.accademicYear = pAccademicYear;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il quadrimestre del voto \n\t * @return il semestre del voto (0 o 1)\n\t */\n\tpublic int getTurn() {\n\t\treturn turn;\n\t}\n\t\n\t/**\n\t * Metodo che setta il quadrimestre del voto\n\t * @param pTurn\n\t *            il semestre del voto da settare\n\t */\n\tpublic void setTurn(int pTurn) {\n\t\tthis.turn = pTurn;\n\t}\n\t\n\tpublic String toString(){\n\t\treturn(\"id voto= \"+id_votes+\" id user= \"+id_user+\" id insegnamento= \"+teaching+\" scritto= \"+written+\" orale= \"+oral+\" laboratorio= \"+laboratory+\" anno accademico= \"+accademicYear+\" quadrimestre= \"+turn);\n\t}\n    \n \n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28837"},"name":"ServletShowClassroomList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8468821050771730936L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/classroomManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\t\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(Integer.valueOf(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28838"},"name":"managerUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28813"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28821"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n\n<%@ page import=\"smos.bean.*\" %>\n<%@ page import=\"smos.storage.ManagerUser\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"display\" uri=\"http://displaytag.sf.net\" %>\n<%@ page import=\"smos.utility.Utility\"%>\n\n<%\n\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\tif ((loggedUser == null) || ((!ManagerUser.getInstance().isAdministrator(loggedUser)))) {\n\t\tresponse.sendRedirect(\"../index.htm\");\n\t\treturn;\n\t}\n%>\n\n<html>\n<head>\n\n\t<title>School MOnitoring System</title>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" >\n\t<link rel=\"stylesheet\" href=\"../../stylesheets/generic.css\" type=\"text/css\">\n\t<link rel=\"stylesheet\" href=\"../../stylesheets/display.css\" type=\"text/css\">\n</head>\n\n<body>\n\t\t\n\t  <div id=\"container\">\n\t  \n\t  \t   <div id=\"header\">\n\t\t   \t    \n\t\t\t</div>\n\t\t   \t      \n\t\t\t<div id=\"content_center\" style=\"overflow-y:scroll;\">\n\t\t    \n            <div id=\"navigation\">\n           <a class=\"genericLink\" href=\"<% if (ManagerUser.getInstance().isAdministrator(loggedUser)){%>../../homePage/homeAdmin.jsp<%}%>\">Home</a> -> <font style=\"color:#0066FF; font-size:9pt\">Gestione Utenti</font>\n           </div>\n            \n            <div id=\"userspace\">\n\t\t\t\t User: <b><%=loggedUser.getFirstName() + \" \" + loggedUser.getLastName()%></b><br>\n                 [<a style=\"font-size:11px\" class=\"genericLink\" href=\"../../logout\">Esci</a>, <a style=\"font-size:11px\" class=\"genericLink\" href=\"../userManagement/alterPersonalDate.jsp\">Modifica Password</a>]\n\t\t\t</div>\n           \n\t\t  \n\n\t\t   <h1 align=\"left\"> GESTIONE UTENTI </h1>\n\n           <table id=\"transparent\" align=\"center\">\n           <tr id=\"transparent\">\n           <td id=\"transparent\">\n\t\t<% if (ManagerUser.getInstance().isAdministrator(loggedUser)) {%>\n           <p class=\"button\"><a class=\"menuLink\" href=\"../userManagement/insertUser.jsp\">Nuovo Utente</a></p>\n\t\t<%}%>\n           </td>\n           </tr>\n           </table>\n\t\t   \n\t\t   <br>\n\t\t   <display:table name=\"sessionScope.userList\" pagesize=\"15\" sort=\"list\" id=\"user\" defaultsort=\"1\" class=\"datatable\" export=\"true\">\n\t\t\t\t<display:setProperty name=\"basic.msg.empty_list\">\n\t\t\t\t\t<caption>\n\t\t\t\t\t\t<p>Non ci sono utenti da visualizzare</p>\n\t\t\t\t\t</caption>\n\t\t\t\t</display:setProperty>\n\t\t\t\t\n    \t\t\t<display:setProperty name=\"export.pdf\" value=\"true\"/>\t\t\t\t\n\t\t\t\t<display:column property=\"name\" title=\"Nome\" style=\"width:200px\" sortable=\"true\" headerClass=\"tdHeaderColumn\"/>\n\t\t\t\t<display:column property=\"EMail\" style=\"width:200px\" title=\"e-mail\" sortable=\"true\" headerClass=\"tdHeaderColumn\"/>\t\n\t\t\t\t\n\t\t\t\t<display:column style=\"width:25px\" title=\"Visualizza\" sortable=\"false\" headerClass=\"tdHeaderColumn\"> \n\t\t\t\t<%  if (((UserListItem)user).getId()!=0) { %>\n\t\t\t\t\t<a href=\"../../showUserDetails?userId=<%=((UserListItem)user).getId()%>\"><img src=\"../../images/details.jpg\" border=\"none\"></a>\n\t\t\t\t<% } %>\n\t\t\t\t</display:column>\n\t       \t</display:table>\n\t\t\t\t\n\t\t   </div>\n\t\t   \n\t\t   <div id=\"footer\">\n\t\t   \t\t<p><%= Utility.getTextFooter() %></p>\n\t\t   </div>\n\t  \n\t  </div>\n\n</body>\n</html>"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28839"},"name":"ServletShowUserList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli utenti.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserList extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/managerUser.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<UserListItem> userList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error0.jsp\";\n\t\t\t} \n\t\t\t\t\n\t\t\tuserList = managerUser.getUserList();\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"userList\", userList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error1.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error2.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error3.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error4.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error5.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2883a"},"name":"AdaptorException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * AdaptorException\n *\n */\n\npackage smos.storage.connectionManagement.exception;\n\nimport java.rmi.RemoteException;\n\n/**\n * Thrown when a problem occurs running code in ensj.\n */\npublic class AdaptorException extends RemoteException {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \n     */\n    public AdaptorException() {\n        super();\n    }\n\n    /**\n     * @param pMessage\n     */\n    public AdaptorException(String pMessage) {\n        super(pMessage + buildLabel());\n    }\n\n    /**\n     * @param pMessage\n     * @param pParentException\n     */\n    public AdaptorException(String pMessage, Exception pParentException) {\n        super(pMessage + buildLabel(), pParentException);\n    }\n\n    /**\n     * @param pParentException\n     */\n    public AdaptorException(Exception pParentException) {\n        super(buildLabel(), pParentException);\n    }\n\n    private static String buildLabel() {\n        return \" [1]\";\n    }\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2883b"},"name":"ServletShowTeacherTeachingFormByClass.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeacherTeachingFormByClass extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t//User teacher = (User) session.getAttribute(\"user\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// recuperiamo l'id della classe selezionata\n\t\t\tint selectedClassId = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t\t//Calcoliamo l'elenco degli insegnamenti associati alla class eselezionata\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(selectedClassId);\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tClassroom selectedClass = ManagerClassroom.getInstance().getClassroomByID(selectedClassId);\n\t\t\tsession.setAttribute(\"selectedClass\", selectedClass);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2883c"},"name":"ServletShowNoteDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowNoteDetails extends HttpServlet {\n\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 7648669052646601677L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tif(pRequest.getParameter(\"update\")==null){\n\t\t\t\tUser student =(User) session.getAttribute(\"student\"); \n\t\t\t\t\t//managerUser.getUserById(Integer.valueOf((String)pRequest.getAttribute(\"student\")));\n\t\t\t\tsession.setAttribute(\"student\", student);\n\t\t\t\tsession.setAttribute(\"idStudent\", student.getId());\n\t\t\t\tsession.setAttribute(\"note\", ((ManagerRegister) managerRegister).getNoteById(Integer.valueOf(pRequest.getParameter(\"noteId\"))));\n\t\t\t\tgotoPage=\"./registerManagement/showNoteDetails.jsp\";\n\t\t\t}else{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNote nNote= new Note();\n\t\t\t\tnNote.setAcademicYear(((Classroom) session.getAttribute(\"classroom\")).getAcademicYear());\n\t\t\t\tnNote.setDateNote(Utility.String2Date(pRequest.getParameter(\"dateNote\")));\n\t\t\t\tnNote.setIdUser((Integer) session.getAttribute(\"idStudent\"));\n\t\t\t\tnNote.setTeacher(pRequest.getParameter(\"noteTeacher\"));\n\t\t\t\tnNote.setDescription(pRequest.getParameter(\"noteDescription\"));\n\t\t\t\tnNote.setIdNote(((Note)session.getAttribute(\"note\")).getIdNote());\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tmanagerRegister.updateNote(nNote);\n\t\t\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\t}catch(MandatoryFieldException e){\n\t\t\t\t\tsession.setAttribute(\"error\", e.getMessage());\n\t\t\t\t\tgotoPage=\"./registerManagement/showNoteDetails.jsp\";\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2883d"},"name":"UserTest.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage;\n\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport smos.bean.Address;\nimport smos.bean.Teaching;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class UserTest {\n\n\t/**\n\t * @param args\n\t * @throws InvalidValueException \n\t * @throws ConnectionException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws MandatoryFieldException \n\t */\n\tpublic static void main(String[] args) throws SQLException, EntityNotFoundException, ConnectionException, InvalidValueException, MandatoryFieldException {\n\t\t\n\tUserListItem temp =new UserListItem();\n\ttemp.setId(5);\n\tTeaching teaching = new Teaching();\n\tteaching.setId(3);\n\tManagerVotes mv = ManagerVotes.getInstance();\n\tVotes ghh = new Votes();\n\tghh.setAccademicYear(2134);\n\tghh.setId_user(88);\n\tghh.setLaboratory(3);\n\tghh.setOral(4);\n\tghh.setTeaching(9);\n\tghh.setTurn(2);\n\tghh.setWritten(3);\n\tmv.insert(ghh);\n\t}\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2883e"},"name":"ServletRemoveStudentClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletRemoveStudentClassroom extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\t\n\t\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\tClassroom classroom = (Classroom)session.getAttribute(\"classroom\");\n\t\t\tint idClassroom= classroom.getIdClassroom();\n\t\t\t\n\t\t\tCollection <UserListItem> studentClass= (Collection<UserListItem>)managerUser.getStudentsByClassroomId(idClassroom);\n\t\t\tIterator<UserListItem> itStudent = null;\n\t\t\tif (studentClass != null){\n\t\t\t\titStudent = studentClass.iterator();\n\t\t\t}\n\t\t\t\t\n\t\t\twhile((itStudent != null) && (itStudent.hasNext())){ \n\t\t\t\tUserListItem stud = (UserListItem)itStudent.next();\n\t\t\t\tif(stud.getId()==user.getId())\n\t\t\t\t\tmanagerUser.removeStudentClassroom(user, idClassroom);\n\t\t\t}\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2883f"},"name":"ManagerAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.storage;\nimport smos.bean.Address;\nimport smos.bean.Teaching;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n*\n* Classe manager degli indirizzi \n*\n*/\n\npublic class ManagerAddress {\n\n\tprivate static ManagerAddress instance;\n\t\n     /**\n\t * Il nome della tabella degli indirizzi\n\t */\n\tpublic static final String TABLE_ADDRESS = \"address\";\n\tpublic static final String TABLE_ADDRESS_HAS_TEACHING = \"address_has_teaching\";\n\t\n\tprivate ManagerAddress() {\n\t\tsuper();\n\t}\n\t\n\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerAddress getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerAddress();\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t/**\n\t * Verifica l'esistenza di un indirizzo nel database.\n\t * \n\t * @param pAddress\n\t *            L'indirizzo da controllare.\n\t * @return Ritorna true se esiste già l'indirizzo passato come parametro,\n\t * \t\t\tfalse altrimenti.\n\t *  \n\t * @throws MandatoryFieldException \n\t * @throws SQLException\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException \n\t * @throws ConnectionException\n\t * @throws SQLException \n\t */\n\t\n\tpublic synchronized boolean hasTeaching(Teaching pTeaching, Address pAddress)\n\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\tInvalidValueException {\nConnection connect = null;\nboolean result = false;\nif (pTeaching.getId() <= 0)\n\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\ntry {\n\tconnect = DBConnection.getConnection();\n\tif (connect == null)\n\t\tthrow new ConnectionException();\n\n\t// Preparimao la stringa sql\n\tString sql = \"SELECT * FROM \"\n\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t+\" AND id_address = \"\n\t\t\t+ Utility.isNull(pAddress.getIdAddress());\n\t// Inviamo la Query al database\n\tResultSet pRs = Utility.queryOperation(connect, sql);\n\tif (pRs.next())\n\t\tresult = true;\n\n\treturn result;\n\n} finally {\n\t// rilasciamo le risorse\n\tDBConnection.releaseConnection(connect);\n\n}\n}\n\n\tpublic synchronized boolean exists (Address pAddress) throws MandatoryFieldException, ConnectionException, SQLException {\n\tboolean result= false;\n\tConnection connect = null;\n\t\n\tif (pAddress.getName() == null)\n\t\tthrow new MandatoryFieldException(\"Specificare il nome.\");\n\ttry{\n\t\t//Otteniamo la connessione al database\n\t\tconnect= DBConnection.getConnection();\n\t\t\n\t\tif (connect == null)\n\t\t\tthrow new ConnectionException();\n\t\t\n\t\tString sql =\" SELECT * FROM \"\n\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t+ \" WHERE name = \"\n\t\t+ Utility.isNull(pAddress.getName());\n\t\t\n\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\t\t\n\t\tif(tRs.next())\n\t\t\tresult = true;\n\t\t\n\t\treturn result;\n\t\t\n\t}\n\tfinally{\n\t\tDBConnection.releaseConnection(connect);\n\t}\n\t}\n\t/**\n\t * Inserisce un nuovo indirizzo nella tabella address.\n\t * \n\t * @param pAddress \n\t * \t\t\tL'indirizzo da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException \n\t * @throws EntityNotFoundException  \n\t * @throws InvalidValueException \n\t */\n\t\n\tpublic synchronized void insert(Address pAddress) \n\tthrows MandatoryFieldException, ConnectionException, \n\tSQLException, EntityNotFoundException, \n\tInvalidValueException{\n\tConnection connect= null;\ntry{\n// controllo dei campi obbligatori\nif(pAddress.getName()==null)\n\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\tconnect = DBConnection.getConnection();\nif (connect==null)\n\tthrow new ConnectionException();\n\t//Prepariamo la stringa Sql\n\tString sql =\n\t\"INSERT INTO \" \n\t+ ManagerAddress.TABLE_ADDRESS \n\t+ \" (name) \" \n\t+ \"VALUES (\" \n\t+ Utility.isNull(pAddress.getName()) \n\t+ \")\";\n\n\tUtility.executeOperation(connect,sql);\n\n\tpAddress.setIdAddress(Utility.getMaxValue(\"id_address\",ManagerAddress.TABLE_ADDRESS));\n\n\t}finally {\n\t\t//rilascia le risorse\n\n\t\tDBConnection.releaseConnection(connect);\n}\n}\n\t/**\n\t * Elimina un indirizzo dalla tabella address.\n\t * \n\t * @param pAddress \n\t * \t\t\tL'indirizzo da eliminare.\n\t * \n\t * @throws MandatoryFieldException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws ConnectionException \n\t * @throws InvalidValueException \n\t * \n\t */\n\tpublic synchronized void delete (Address pAddress) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\t\n\t\ttry {\n\t\t\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t\t\t\t+ \" WHERE id_address = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}  \n\t\tfinally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\tpublic synchronized void assignTeachingAsAddress (Address pAddress, Teaching pTeaching) throws ConnectionException, \n\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException, DuplicatedEntityException {\nConnection connect = null;\nManagerAddress managerAddress = ManagerAddress.getInstance();\nif(managerAddress.hasTeaching(pTeaching, pAddress))\n\tthrow new DuplicatedEntityException(\"Questo indirizzo ha già quest'insegnamento associato\");\n\ntry {\n\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\tconnect = DBConnection.getConnection();\n\t\t//Prepariamo la stringa SQL\n\t\tString sql = \"INSERT INTO \" \n\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t\t+ \" (id_address, id_teaching) \"\n\t\t\t\t\t+ \" VALUES( \"\n\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress())\n\t\t\t\t\t+ \" , \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t\t\t+ \" )\";\n\t\n\t\tUtility.executeOperation(connect, sql);\n}  \nfinally {\n\t//rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\tpublic synchronized void removeTeachingAsAddress (Address pAddress, Teaching pTeaching) throws ConnectionException, \n\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\nConnection connect = null;\nManagerAddress managerAddress = ManagerAddress.getInstance();\nif(!managerAddress.hasTeaching(pTeaching, pAddress))\n\tthrow new EntityNotFoundException(\"Questo indirizzo non contiene l'insegnamento da rimuovere\");\n\ntry {\n\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\tconnect = DBConnection.getConnection();\n\t\t//Prepariamo la stringa SQL\n\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t\t+ \" WHERE id_address= \"\n\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress())\t\t\n\t\t\t\t\t+ \" AND id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\t\n\t\tUtility.executeOperation(connect, sql);\n}  \nfinally {\n\t//rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\n\t/**\n\t * Ritorna l'id dell'indirizzo passato come parametro.\n\t * \n\t * @param pAddress\n\t *            L'indirizzo di cui si richiede l'id.\n\t * @return Ritorna l'id dell'indirizzo passato come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized int getAddressId(Address pAddress)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tint result = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tif (pAddress == null)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'indirizzo passato come parametro.\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_address FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS\n\t\t\t\t+ \" WHERE name = \" \n\t\t\t\t+ Utility.isNull(pAddress.getName());\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getInt(\"id_address\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna l'indirizzo corrispondente all'id passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna l'indirizzo associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException \n\t */\n\tpublic synchronized Address getAddressById (int pIdAddress) throws ConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\tAddress result = null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t\t\t\t\n\t\t\tif (pIdAddress <= 0) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS\n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress);\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\t\n\t\t\tif (pRs.next()) \n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'utente!\");\n\t\t\t\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna l'insieme di tutti gli indirizzi presenti nel database.\n\t * \n\t * @return Ritorna una collection di indirizzi.\n\t * \n\t * @throws ConnectionException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws InvalidValueException \n\t */\n\tpublic synchronized Collection<Address> getAddressList() throws ConnectionException, EntityNotFoundException, SQLException, InvalidValueException{\n\t\tConnection connect = null;\n\t\tCollection<Address> result = new Vector<Address>();;\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t//Prepariamo la stringa sql\n\t\t\tString sql = \"SELECT * \"  \n\t\t\t\t+ \" FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t+ \" ORDER BY id_address\";\n\t\t\t\t\n\t\t\t//Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\t\t\t\n\t\t\tif (tRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\t\t\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t//rilascia le risorse\t\t\t\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna il nome dell'indirizzo corrispondente all'id \n\t * passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna una stringa contenente il nome dell'indirizzo.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized String getAddressNameById(int pIdAddress) throws EntityNotFoundException, ConnectionException, SQLException{\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIdAddress <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'utente passato come parametro \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT name FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = tRs.getString(\"name\");\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Ritorna una collection con gli id degli insegnamenti associati all'id \n\t * passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna una collection con di int \n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tpublic synchronized Collection<Integer> getAddressTechings(int pIdAddress) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Integer> result;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIdAddress <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'utente passato come parametro \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT id_teaching FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tresult = this.loadIntegersFromRs(tRs);\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/*\n\t * Consente la lettura di un record dal ResultSet.\n\t */\n\tprivate Address loadRecordFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tAddress address = new Address();\n\t\taddress.setName(pRs.getString(\"name\"));\n\t\taddress.setIdAddress(pRs.getInt(\"id_address\"));\n\t\treturn address;\n\t}\n\t\n\t/*\n\t * Consente la lettura dei record dal ResultSet.\n\t */\n\tprivate Collection<Address> loadRecordsFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Address> result = new Vector<Address>();\n\t\tdo  {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\t\n\tprivate Collection<Integer> loadIntegersFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Integer> result = new Vector<Integer>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(pRs.getInt(\"id_teaching\"));\n\t\t} \n\t\treturn result;\n\t}\n\t\n\t\t\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28840"},"name":"ServletAssignParentStudent.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet  che modifica il record dello studente con l'id del padre.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAssignParentStudent extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = -4507225018030147979L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\tint idParent=user.getId();\n\t\t\t\n\t\t\tCollection<UserListItem> students = new Vector<UserListItem>();\n\t\t\tIterator<UserListItem> itStu = null;\n\t\t\t\n\t\t\tstudents = managerUser.getStudents();\n\t\t\t\n\t\t\t\n\t\t\tString[] selectedStudent = pRequest.getParameterValues(\"selectedStudent\");\n\t\t\tString[] unselectedStudent = pRequest.getParameterValues(\"unselectedStudent\");\n\t\t\t\n\t\t\tif (selectedStudent != null) {\n\t\t\t\tint selectedlength = selectedStudent.length;\n\t\t\t\tUserListItem tmp = null;\n\t\t\t\tUser stu=null;\n\t\t\t\tint idStudent=0;\n\t\t\t\tfor (int i = 0; i < selectedlength; i++) {\n\t\t\t\t\titStu = students.iterator();\n\t\t\t\t\tString dd = selectedStudent[i];\n\t\t\t\t\tidStudent=Integer.parseInt(dd);\n\t\t\t\t\twhile(itStu.hasNext()){\n\t\t\t\t\t\t tmp = (UserListItem)itStu.next();\n\t\t\t\t\t\tif(tmp.getId()==idStudent){\t\n\t\t\t\t\t\t\tstu=managerUser.getUserById(tmp.getId());//recupero userStudente\t\n\t\t\t\t\t\t\tmanagerUser.assignParent(stu, idParent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t}\n\t\t\tif (unselectedStudent != null) {\n\t\t\t\titStu=null;\n\t\t\t\tint unselectedlength = unselectedStudent.length;\n\t\t\t\tUserListItem tmp = null;\n\t\t\t\tUser stu=null;\n\t\t\t\tint idStudent=0;\n\t\t\t\tfor (int i = 0; i < unselectedlength; i++) {\n\t\t\t\t\titStu = students.iterator();\n\t\t\t\t\tString dd = unselectedStudent[i];\n\t\t\t\t\tidStudent=Integer.parseInt(dd);\n\t\t\t\t\twhile(itStu.hasNext()){\n\t\t\t\t\t\t tmp = (UserListItem)itStu.next();\n\t\t\t\t\t\tif(tmp.getId()==idStudent){\t\n\t\t\t\t\t\t\tstu=managerUser.getUserById(tmp.getId());//recupero userStudente\t\n\t\t\t\t\t\t\tmanagerUser.removeParent(stu);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}  catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} \n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28841"},"name":"ServletShowClassroomByAcademicYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomByAcademicYear extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8468821050771730936L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showClassroomByAcademicYear.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\t// prendere l'academic year dalla session\n\t\t\tint anno = Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\t\tif (anno != 0){\n\t\t\t\tclassroomList = managerClassroom\n\t\t\t\t\t\t.getClassroomsByAcademicYear(anno);\n\t\t\t}\n\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", anno);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28842"},"name":"Delay.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class Delay implements Serializable {\n\n\t/**\n\t * Classe che modella un entrata in ritardo di uno studente\n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = 78680884161960621L;\n\n\tprivate int idDelay;\n\tprivate int idUser;\n\tprivate Date dateDelay;\n\tprivate String timeDelay;\n\tprivate int academicYear;\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'id del Ritardo \n\t * @return un intero che rappresenta l'id del ritardo \n\t */\n\tpublic int getIdDelay() {\n\t\treturn idDelay;\n\t}\n\t/**\n\t * Metodo che setta l'id del Ritardo \n\t * @param intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdDelay(int pIdDelay) {\n\t\tthis.idDelay = pIdDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente ritardatario \n\t * @return un intero che rappresenta l'id dello studente\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo al ritardo \n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data del ritardo \n\t * @return una stringa che rappresenta la data del ritardo \n\t */\n\tpublic Date getDateDelay() {\n\t\treturn dateDelay;\n\t}\n\t/**\n\t * Metodo che setta la data del ritardo\n\t * @param una stringa che rappresenta la data del ritardo\n\t */\n\tpublic void setDateDelay(Date pDateDelay) {\n\t\tthis.dateDelay = pDateDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'ora d'entrata dello studente\n\t * @return una stringa che rappresenta l'ora di entrata dello studente ritardatario\n\t */\n\tpublic String getTimeDelay() {\n\t\tif (this.timeDelay.length() > 0){\n\t\t\treturn timeDelay.substring(0, 5);\n\t\t} else {\n\t\t\treturn this.timeDelay;\n\t\t}\n\t}\n\t/**\n\t * Metodo che setta l'ora di entrata dello studente \n\t * @param una stringa che rappresenta l'ora di entrata da settare\n\t */\n\tpublic void setTimeDelay(String pTimeDelay) {\n\t\tthis.timeDelay = pTimeDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo all'assenza\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo all'assenza\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28843"},"name":"ServletShowClassroomManagement.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomManagement extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -3100959843623661377L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\t\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(Integer.valueOf(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28844"},"name":"EntityNotFoundException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un'entita'\n  * non viene trovata nel database.\n  */\npublic class EntityNotFoundException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -1236105333523133721L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic EntityNotFoundException() {\n\t\tsuper(\"Object Not Found in Repository!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic EntityNotFoundException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28845"},"name":"ServletInsertUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.LoginException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire un utente nel DataBase.\n * \n * @author napolitano Vincenzo.\n *\n */\npublic class ServletInsertUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3860569607870099419L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showUserList\";\n\t\tString errorMessage = \"\";\n\t\t\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tUser user = new User();\n\t\t\tuser.setFirstName(pRequest.getParameter(\"firstName\"));\n\t\t\tuser.setLastName(pRequest.getParameter(\"lastName\"));\n\t\t\tuser.setCell(pRequest.getParameter(\"cell\"));\n\t\t\tuser.setEMail(pRequest.getParameter(\"eMail\"));\n\t\t\t\n\t\t\t/*\n\t\t\t * verifichiamo che la login sia unica.\n\t\t\t */\n\t\t\tString login = pRequest.getParameter(\"login\");\n\t\t\tuser.setLogin(login);\n\t\t\t\n\t\t\tif (managerUser.existsLogin(user)) \n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\t\n\t\t\tif (pRequest.getParameter(\"password\").equals(pRequest.getParameter(\"password1\"))){\n\t\t\t\t\t\tuser.setPassword((pRequest.getParameter(\"password\")));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthrow new LoginException(\"I valori inseriti per la password non coincidono!\");\n\t\t\t}\n\t\t\t//inserimento utente\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.insert(user);\n\t\t\t\tsession.setAttribute(\"user\", user);\n\t\t\t\n\t\t\t\t\n\t\t\t}else \n\t\t\t\tthrow new DuplicatedEntityException(\"Utente gia' esistente\");\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (LoginException loginException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + loginException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tloginException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28846"},"name":"UserListItem.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28813"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28821"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\n/**\n * Classe utilizzata per modellare le informazioni principali \n * di un utente.\n */\npublic class UserListItem implements Serializable{\n\n\tprivate static final long serialVersionUID = 3436931564172045464L;\n\n\tprivate String name;\n\tprivate String eMail;\n\tprivate int id;\n\t\n\t\n\t\n\t/**\n\t * @return Ritorna l'id dell'utente.\n\t */\n\tpublic int getId() {\n\t\treturn this.id;\n\t}\n\t\n\t/**\n\t * Setta l'id dell'utente.\n\t * @param pId\n\t * \t\t\tL'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id = pId;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\t\n\t/**\n\t * Setta il nome dell'utente.\n\t * @param pName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\n\t/**\n\t * @return the eMail\n\t */\n\tpublic String getEMail() {\n\t\treturn this.eMail;\n\t}\n\n\t/**\n\t * @param mail the eMail to set\n\t */\n\tpublic void setEMail(String pMail) {\n\t\tthis.eMail = pMail;\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28847"},"name":"ServletShowReports.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.application.reportManagement;\n\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli insegnamenti.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowReports extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1361713427864776624L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showReports.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Votes> votesList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tint studentId = Integer.valueOf(pRequest.getParameter(\"student\"));\n\t\t\tInteger year=(Integer) session.getAttribute(\"selectedYear\");\n\t\t\tInteger turn=Integer.valueOf(pRequest.getParameter(\"q\"));\n\t\t\tsession.setAttribute(\"q\", turn);\n\t\t\tvotesList = managerVotes.getVotesByUserIdYearTurn(studentId,year,turn);\n\t\t\tUser u = (User) managerUser.getUserById(studentId);\n\t\t\tUserListItem st=new UserListItem();\n\t\t\tst.setName(u.getName());\n\t\t\tst.setEMail(u.getEMail());\n\t\t\tst.setId(u.getId());\n\t\t\tsession.setAttribute(\"std\", st);\n\t\t\tsession.setAttribute(\"votesList\", votesList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28848"},"name":"ServletAlterPersonalDate.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28813"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28821"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet di modifica Password dell'utente loggato.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAlterPersonalDate extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser user = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\n\t\t\t//verifichiamo che la login sia unica.\n\t\t\tif (managerUser.existsLogin(user))\n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\tuser.setPassword(pRequest.getParameter(\"pass\"));\n\t\t\t//aggiorniamo\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.update(user);\n\t\t\t}else {\n\t\t\t\tint userId = managerUser.getUserId(user);\n\t\t\t\tif (user.getId()==userId)\n\t\t\t\t\tmanagerUser.update(user);\n\t\t\t\telse \n\t\t\t\t\tthrow new DuplicatedEntityException(\"Utente già esistente\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28849"},"name":"ServletUpdateJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletUpdateJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8405877983387271542L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\tJustify justify = (Justify) session.getAttribute(\"justify\");\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tString idClassroom=(String) session.getAttribute(\"idClassroom\");\n\t\tint id= Integer.parseInt(idClassroom);\n\t\tgotoPage+=\"?idClassroom=\"+id;\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tjustify.setAcademicYear(Integer.parseInt((pRequest.getParameter(\"academicYear\"))));\n\t\t\tjustify.setDateJustify(Utility.String2Date(pRequest.getParameter(\"date\")));\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * verifichiamo che la giustifica esista.\n\t\t\t */\n\t\t\n\t\t\tif (!mR.exists(justify)){\n\t\t\t\terrorMessage=\"la giustifica non esiste!!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\t\n\t\t\t}else {//aggiorniamo\n\t\t\t\tmR.updateJustify(justify);\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2884a"},"name":"ServletInsertTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.*;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire un insegnamento nel DataBase.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletInsertTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 4519458598257606331L;\n\n\t/**\n\t * \n\t */\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t// String isWizard = \"yes\";\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tTeaching teaching = new Teaching();\n\t\t\tteaching.setName(pRequest.getParameter(\"name\"));\n\n\t\t\tif (!managerTeaching.exists(teaching)) {\n\t\t\t\tmanagerTeaching.insert(teaching);\n\t\t\t\tsession.setAttribute(\"teaching\", teaching);\n\t\t\t\t// session.setAttribute(\"isWizard\", isWizard);\n\n\t\t\t} else\n\t\t\t\tthrow new DuplicatedEntityException(\n\t\t\t\t\t\t\"Insegnamento gia' esistente\");\n\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2884b"},"name":"ServletDeleteReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteReport extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli alunni associati ad una Classe.\n\t * \n\t * @author Giulio D'Amora\n\t * \n\t */\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2020233250419553067L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showStudentsByClass.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint year= 0;\n\t\tint turn=0;\n\t\tint studentId=0;\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error2.jsp\";\n\t\t\t}\n\t\t\tUserListItem student = (UserListItem) (session.getAttribute(\"student\"));\n\t\t\tstudentId = student.getId();\n\t\t\tyear=(Integer) session.getAttribute(\"selectedYear\");\n\t\t\tturn=(Integer) session.getAttribute(\"q\");\n\t\t\tmanagerVotes.deleteVotesByUserIdYearTurn(studentId, year, turn);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error1.jsp?Year=\"+year+\"&turn=\"+turn+\"&idStudent=\"+studentId;\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error3.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error4.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error5.jsp?Year=\"+year+\"&turn=\"+turn+\"&idStudent=\"+studentId;\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2884c"},"name":"ServletUpdateReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per aggiornare la pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletUpdateReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -1045906657573424217L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showReports\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tIterator<Teaching> itTeaching = teachingList.iterator();\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\t\t\tTeaching teachingTemp = null;\n\t\t\tint idTemp;\n\t\t\tString write, oral, lab;\n\t\t\tgotoPage += \"?student=\" + student.getId() + \"&q=\" + turn;\n\t\t\twhile (itTeaching.hasNext()) {\n\t\t\t\tteachingTemp = itTeaching.next();\n\t\t\t\tidTemp = teachingTemp.getId();\n\t\t\t\twrite = \"scritto_\" + idTemp;\n\t\t\t\toral = \"orale_\" + idTemp;\n\t\t\t\tlab = \"laboratorio_\" + idTemp;\n\t\t\t\twrite = pRequest.getParameter(write);\n\t\t\t\toral = pRequest.getParameter(oral);\n\t\t\t\tlab = pRequest.getParameter(lab);\n\t\t\t\tVotes newVotes = new Votes();\n\t\t\t\t// SE il voto non esiste dobbiamo crearlo\n\t\t\t\tint idVoto = managerVotes.getIdVotes(teachingTemp, year, turn,\n\t\t\t\t\t\tstudent);\n\t\t\t\tint writeInt=0, oralInt=0,labInt=0;\n\t\t\t\tif(write!=\"\")\n\t\t\t\t\twriteInt = Integer.valueOf(write);\n\t\t\t\tif(oral!=\"\")\n\t\t\t\t\toralInt = Integer.valueOf(oral);\n\t\t\t\tif(lab!=\"\")\n\t\t\t\t\tlabInt = Integer.valueOf(lab);\n\t\t\t\tif (idVoto <= 0) {\n\t\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\t\tnewVotes.setAccademicYear(year);\n\t\t\t\t\t\tnewVotes.setId_user(student.getId());\n\t\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\t\tnewVotes.setTeaching(idTemp);\n\t\t\t\t\t\tnewVotes.setTurn(turn);\n\t\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\t\tmanagerVotes.insert(newVotes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Se il voto esiste dobbiamo aggiornarlo\n\t\t\t\telse {\n\t\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\t\tnewVotes = managerVotes.getVotesById(idVoto);\n\t\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\t\tmanagerVotes.update(newVotes);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tmanagerVotes.delete(managerVotes.getVotesById(idVoto));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2884d"},"name":"ServletComputateStatistics.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletComputateStatistics extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 6690162445433486239L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./statisticsManagement/showStatistictsByAcademicYear.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tInteger academicYear = Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\tInteger absenceLimit = Integer.valueOf(pRequest.getParameter(\"absenceLimit\"));\n\t\tInteger noteLimit = Integer.valueOf(pRequest.getParameter(\"noteLimit\"));\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tCollection <User> alertStudentAbsence = new Vector<User>();\n\t\t\n\t\tDate today = new Date();\n\t\t\n\t\t\n\t\t\n\t\tint [][] unjustifiedAbsence = null;\n\t\t\n\t\tCollection <User> alertStudentNote = new Vector<User>();\n\t\t\n\t\tint [][] note = null;\n\t\t\n\t\tUser tmpUser = null;\n\t\t\n\t\ttry {\n\t\t\n\t\tif (loggedUser == null) {\n\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\treturn;\n\t\t}\n\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\tif (academicYear == 0){\n\t\t\tacademicYear = today.getYear() + 1900;\n\t\t}\n\t\t\n\t\tCollection <Integer> academicYearList = ManagerClassroom.getInstance().getAcademicYearList();\n\t\t\n\t\tunjustifiedAbsence = managerUser.getHighlightsStudentAbsence(academicYear);\n\t\t\n\t\tif (unjustifiedAbsence != null){\n\t\t\tfor (int i=0; i< unjustifiedAbsence.length; i++){\n\t\t\t\t\tif (unjustifiedAbsence[i][0] >= absenceLimit){\n\t\t\t\t\t\ttmpUser = managerUser.getUserById(unjustifiedAbsence[i][1]);\n\t\t\t\t\t\talertStudentAbsence.add(tmpUser);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tnote = managerUser.getHighlightsStudentNote(academicYear);\n\t\t\n\t\tif (note != null){\n\t\t\tfor (int i=0; i< note.length; i++){\n\t\t\t\t\tif (note[i][0] >= noteLimit){\n\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmpUser = managerUser.getUserById(note[i][1]);\n\t\t\t\t\t\t\n\t\t\t\t\t\talertStudentNote.add(tmpUser);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tsession.setAttribute(\"alertStudentAbsence\", alertStudentAbsence);\n\t\tsession.setAttribute(\"alertStudentNote\", alertStudentNote);\n\t\tsession.setAttribute(\"academicYearList\", academicYearList);\n\t\tsession.setAttribute(\"absenceLimit\", absenceLimit);\n\t\tsession.setAttribute(\"noteLimit\", noteLimit);\n\t\tsession.setAttribute(\"yearSelected\", academicYear);\n\t\t\n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2884e"},"name":"ServletLoadReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per caricare la Pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -1045906657573424217L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/updateReport.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Votes> votesList = null;\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Lista Voti\n\t\t\tvotesList = managerVotes.getVotesByUserIdYearTurn(student.getId(),\n\t\t\t\t\tyear, turn);\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tsession.setAttribute(\"votesList\", votesList);\n\t\t\t// provare i dati\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2884f"},"name":"ServletAddTeachingAsTeacher.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletAddTeachingAsTeacher extends HttpServlet {\n\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 4931185354259866391L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerClassroom managerClass = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono i 3 Id user class teachings(che non so quanti ne sono)\n\t\t\tint idTeacher = (int) ((User) session.getAttribute(\"user\")).getId();\n\t\t\tUser teacher = managerUser.getUserById(idTeacher); \n\t\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tString[] idTeachingList = pRequest.getParameterValues(\"selectedTeachings\");\n\t\t\tint nTeaching =idTeachingList.length;\n\t\t\tint temp;\n\t\t\t//Collection<Teaching> listSelcected = new Vector<Teaching>();\n\t\t\tif(idTeachingList==null)\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\telse{\n\t\t\t\tfor(int i=0;i<nTeaching;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idTeachingList[i]);\n\t\t\t\t\tif(!managerUser.hasTeaching(teacher,managerTeaching.getTeachingById(temp),managerClass.getClassroomByID(idClass))){\n\t\t\t\t\t\tmanagerUser.assignTeacherAtClassroomTeaching(teacher,idClass,temp);\n\t\t\t\t\t\t//listSelcected.add(managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28850"},"name":"User.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28813"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28821"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"\tpackage smos.bean;\n\nimport smos.exception.InvalidValueException;\n\nimport java.io.Serializable;\n\n/**\n *  Classe utilizzata per modellare un utente.\n *\n * \n */\npublic class User implements Serializable{\n\t\n\n\tprivate static final long serialVersionUID = 7272532316912745508L;\n\t\n\t\n\tprivate int id;\n\tprivate String login;\n\tprivate String password;\n\tprivate String firstName;\n\tprivate String lastName;\n\tprivate int idParent;\n\tprivate String cell;\n\tprivate String eMail;\n\t\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic User(){\n\t\tthis.id = 0 ;\n\t}\n\t\n\t\n\t/**\n\t * @return Ritorna la login dell'utente.\n\t */\n\tpublic String getLogin() {\n\t\treturn this.login;\n\t}\n\t\n\t/**\n\t * Setta la login dell'utente.\n\t * @param pLogin\n\t * \t\t\tLa login da settare.\n\t * \n\t * @throws InvalidValueException \n\t */\n\tpublic void setLogin(String pLogin) throws InvalidValueException {\n\t\tif(pLogin.length()<=4)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\t\tthis.login = pLogin;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getName() {\n\t\treturn this.lastName + \" \" + this.firstName;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getFirstName() {\n\t\treturn this.firstName;\n\t}\n\t\n\t/**\n\t * Setta il nome dell'utente.\n\t * @param pFirstName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setFirstName(String pFirstName) {\n\t\tthis.firstName = pFirstName;\n\t}\n\t\n\t\n\t/**\n\t * @return Ritorna la password dell'utente.\n\t */\n\tpublic String getPassword() {\n\t\treturn this.password;\n\t}\n\t\n\t/**\n\t * Setta la password dell'utente.\n\t * @param pPassword\n\t * \t\t\tLa password da settare.\n\t * \n\t * @throws InvalidValueException \n\t */\n\tpublic void setPassword(String pPassword) throws InvalidValueException {\n\t\tif(pPassword.length()<=4)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.password = pPassword;\n\t}\n\t\n\t/**\n\t * @return Ritorna il cognome dell'utente.\n\t */\n\tpublic String getLastName() {\n\t\treturn this.lastName;\n\t}\n\t\n\t/**\n\t * Setta il cognome dell'utente.\n\t * @param pLastName\n\t * \t\t\tIl cognome da settare.\n\t */\n\tpublic void setLastName(String pLastName) {\n\t\tthis.lastName = pLastName;\n\t}\n\t\n\t/**\n\t * @return Ritorna l'id dell'utente.\n\t */\n\tpublic int getId() {\n\t\treturn this.id;\n\t}\n\t\n\t/**\n\t * Setta l'id dell'utente.\n\t * @param pId\n\t * \t\t\tL'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id = pId;\n\t}\n\t\n\t/**\n\t * Ritorna una stringa contenente nome e cognome dell'utente.\n\t * @see java.lang.Object#toString()\n\t */\n\tpublic String toString() {\n\t\treturn this.getFirstName() \n\t\t+ \" \" \n\t\t+ this.getLastName();\n\t}\n\t\n\t/**\n\t * @return the eMail\n\t */\n\tpublic String getEMail() {\n\t\treturn this.eMail;\n\t}\n\t/**\n\t * @param pMail the eMail to set\n\t */\n\tpublic void setEMail(String pMail) {\n\t\tthis.eMail = pMail;\n\t}\n\n\n\t/**\n\t * @return the cell\n\t */\n\tpublic String getCell() {\n\t\treturn this.cell;\n\t}\n\n\n\t/**\n\t * @param cell the cell to set\n\t */\n\tpublic void setCell(String pCell) {\n\t\tthis.cell = pCell;\n\t}\n\n\n\t/**\n\t * @return the idParent\n\t */\n\tpublic int getIdParent() {\n\t\treturn this.idParent;\n\t}\n\n\n\t/**\n\t * @param idParent the idParent to set\n\t */\n\tpublic void setIdParent(int pIdParent) {\n\t\tthis.idParent = pIdParent;\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28851"},"name":"ServletInsertJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletInsertJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1252760418542867296L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\t\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t\tJustify justify=new Justify();\n\t\t\tjustify.setAcademicYear(Integer.parseInt(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\tjustify.setDateJustify(Utility.String2Date(pRequest.getParameter(\"date\")));\n\t\t\t\n\t\t\tjustify.setIdUser(Integer.parseInt(pRequest.getParameter(\"idUser\")));\n\t\t\tString idA= pRequest.getParameter(\"idAbsence\");\n\t\t\tint idAbsence=Integer.parseInt(idA);\n\t\t\t\n\t\t\t//String idC = pRequest.getParameter(\"idClassroom\");\n\t\t\t//int idClassroom= Integer.parseInt(idC);\n\t\t\t\n\t\t\t//gotoPage+=idClassroom;\n\t\t\tAbsence absence = mR.getAbsenceByIdAbsence(idAbsence);\n\t\t\t\n\t\t\tif(!mR.exists(absence)){\n\t\t\t\terrorMessage =  \"assenza non prensente nel db!\";\t\n\t\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t//inserimento giustifica\n\t\t\t\n\t\t\tif(!mR.exists(justify)){\n\t\t\t\tmR.insertJustify(justify, absence);\n\t\t\t\tsession.setAttribute(\"justify\", justify);\n\t\t\t\t\n\t\t\t}else \n\t\t\t\tthrow new DuplicatedEntityException(\"Giustifica gia' esistente\");\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28852"},"name":"ControlConnection.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage.connectionManagement;\n\n\nimport java.sql.*;\n\n/**\n * Implementazione del thread in grado di mantenere la connessione al database\n * Mysql qualora non vi siano più connessioni attive (risoluzione del problema\n * dell'autoreconnect di Mysql). Tale classe si occupa anche di richimare il\n * metodo di rilascio delle connessioni attive che non hanno eseguito operazioni\n * in un certo intervallo di tempo.\n */\n\npublic class ControlConnection extends Thread {\n    private static ConnectionPoolDataSource manager = null;\n\n    private static int waitTimeout;\n\n    /**\n     * Crea una nuova istanza del Thread.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @param pManager\n     *            il pool delle connessioni attulamente in esecuzione.\n     */\n\n    public ControlConnection(ConnectionPoolDataSource pManager) {\n        ControlConnection.manager = pManager;\n    }\n\n    /**\n     * Crea una nuova istanza del Thread.\n     * \n     * @param pManager\n     *            il pool delle connessioni attulamente in esecuzione.\n     * @param pTime\n     *            Il tempo entro cui ristabilire la connessione con mysql prima\n     *            che scada.Tale valore dovrà essere necessariamente minore del\n     *            valore della variabile globale wait_timeout di Mysql.\n     */\n\n    public ControlConnection(ConnectionPoolDataSource pManager, int pTime) {\n        ControlConnection.waitTimeout = pTime;\n        ControlConnection.manager = pManager;\n    }\n\n    /**\n     * Il thread non fa altro che dormire quando ci sono utenti attivi e\n     * mantenere aperta la connessione con MySQL altrimenti.\n     * \n     */\n\n    public void run() {\n        try {\n            while (true) {\n                if (manager.activeSize() > 0) {\n                    this.setPriority(Thread.MAX_PRIORITY);\n                    manager.clearActive();\n                    this.setPriority(Thread.NORM_PRIORITY);\n                }\n                if (manager.activeSize() == 0) {\n                    while (true) {\n                        try {\n                            manager.closeAllPooledConnections();\n                            Connection con = null;\n                            con = manager.getConnection();\n                            Statement st = con.createStatement();\n                            st.executeQuery(\"show tables\");\n                            manager.release(con);\n                            break;\n                        } catch (Exception e) {\n                            System.out.println(\"Eccezione geneata \"\n                                    + \"nel Thread ControlConnection:\" + e);\n                        }\n                    }\n                    Thread.sleep(waitTimeout);\n                } else {\n                    Thread.sleep(waitTimeout);\n                }\n            }\n        } catch (InterruptedException ex) {\n            System.out.println(\"Thread ControlConnection interrotto:\" + ex);\n        }\n    }\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28853"},"name":"DBConnection.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * DBConnection\n *\n */\n\npackage smos.storage.connectionManagement;\n\nimport smos.Environment;\nimport smos.utility.Utility;\n\nimport java.sql.*;\nimport java.util.*;\nimport java.io.*;\n\n\n/**\n * Classe che s'interfaccia con il pool di connessioni. In particolare crea un\n * unico oggetto ConnectionPoolDataSource (il pool di connessioni) ed ottiene i\n * suoi parametri di configurazione dal file di properties\n * connection.properties.\n */\n\npublic class DBConnection {\n\n    private static int ACTIVE_TIMEOUT;\n\n    private static String DRIVER_MYSQL = \"\";\n\n    private static String FULL_PATH_DATABASE = \"\";\n\n    private static ControlConnection linker = null;\n\n    private static ConnectionPoolDataSource manager = null;\n\n    private static int MAX_POOL_SIZE;\n\n    private static String PASSWORD = \"\";\n\n    private static int POOL_TIMEOUT;\n\n    private static Properties properties = null;\n\n    private static String USER_NAME = \"\";\n\n    private static int WAIT_TIMEOUT;\n\n    \n   \n    \n    \n    /**\n     * Blocco d'inizializzazione statico che si occupa di generare il pool nel\n     * momento in cui ci sarà una prima invocazione del metodo getConnection()\n     */\n\n    static {\n        try {\n            properties = new Properties();\n            File fileProp = new File(Environment.getPoolPropertiesPath());\n\n            if (fileProp.exists()) {\n                properties.load(new FileInputStream(fileProp));\n\n                DRIVER_MYSQL = properties.getProperty(\"connection.jdbc.name\");\n                if (DRIVER_MYSQL.equals(\"\")) {\n                    DRIVER_MYSQL = Utility.getDriverMySql();\n                }\n\n                FULL_PATH_DATABASE = properties\n                        .getProperty(\"connection.jdbc.fullPath\");\n\n                if (FULL_PATH_DATABASE.equals(\"\")) {\n                    FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n                }\n\n                USER_NAME = properties.getProperty(\"connection.username\");\n                if (USER_NAME.equals(\"\")) {\n                    USER_NAME = Utility.getUserName();\n                }\n\n                PASSWORD = properties.getProperty(\"connection.password\");\n                if (PASSWORD.equals(\"\")) {\n                    PASSWORD = Utility.getPassword();\n                }\n\n                try {\n                    MAX_POOL_SIZE = Integer.parseInt(properties\n                            .getProperty(\"connection.maxPoolSize\"));\n                } catch (Exception ex) {\n                    MAX_POOL_SIZE = Utility.getMaxPoolSize();\n                }\n\n                try {\n                    WAIT_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.waitTimeout\"));\n                } catch (Exception ex) {\n                    WAIT_TIMEOUT = Utility.getWaitTimeout();\n                }\n\n                try {\n                    ACTIVE_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.activeTimeout\"));\n                } catch (Exception ex) {\n                    ACTIVE_TIMEOUT = Utility.getActiveTimeout();\n                }\n\n                try {\n                    POOL_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.poolTimeout\"));\n                } catch (Exception ex) {\n                    POOL_TIMEOUT = Utility.getPoolTimeout();\n                }\n            } else {\n                /* Se il file di properties non esiste carica valori di default */\n\n                DRIVER_MYSQL = Utility.getDriverMySql();\n                FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n                USER_NAME = Utility.getUserName();\n                PASSWORD = Utility.getPassword();\n                MAX_POOL_SIZE = Utility.getMaxPoolSize();\n                WAIT_TIMEOUT = Utility.getWaitTimeout();\n                ACTIVE_TIMEOUT = Utility.getActiveTimeout();\n                POOL_TIMEOUT = Utility.getPoolTimeout();\n            }\n\n            loadPool(); // Crea il manager e prepara il pool di connessioni\n\n        } catch (Exception e) {\n            /* Se un'eccezione viene generata in precedenza */\n\n        \tDRIVER_MYSQL = Utility.getDriverMySql();\n            FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n            USER_NAME = Utility.getUserName();\n            PASSWORD = Utility.getPassword();\n            MAX_POOL_SIZE = 100;\n            WAIT_TIMEOUT = 2000;\n            ACTIVE_TIMEOUT = 240000;\n            POOL_TIMEOUT = 300000;\n            loadPool(); // Crea il manager e prepara il pool di connessioni\n        }\n\n    }\n\n    /**\n     * Restituisce una connessione dal pool.\n     * \n     * @return la connessione se possibile null altrimenti\n     */\n\n    public static Connection getConnection() {\n        try {\n            return manager.getConnection();\n        } catch (SQLException e) {\n            System.out.println(\"Eccezione generata\"\n                    + \"in DBConnection.getConnection() \" + e);\n            return null;\n        }\n    }\n\n    /**\n     * Creazione effettiva del pool di connessione.\n     * \n     */\n    private static void loadPool() {\n        try {\n            manager = new ConnectionPoolDataSource(DRIVER_MYSQL,\n                    FULL_PATH_DATABASE, USER_NAME, PASSWORD, MAX_POOL_SIZE,\n                    POOL_TIMEOUT);\n            manager.setActivedTimeout(ACTIVE_TIMEOUT);\n            linker = new ControlConnection(manager, WAIT_TIMEOUT);\n            linker.start();\n        } catch (Exception e) {\n            System.out.println(\"Impossibile creare il pool\"\n                    + \"di connessioni in DBConnection:\" + e);\n        }\n    }\n\n    /**\n     * Restituisce una connessione al pool che sarà inserita nella lista delle\n     * connesioni pool, ossia quelle riutilizzabili in seguito.\n     * \n     * @param pConnection\n     *            la connessione non più attiva.\n     */\n\n    public static void releaseConnection(Connection pConnection) {\n        manager.release(pConnection);\n    }\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28854"},"name":"ServletAddRemoveTeachingsAsAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.addressManagement;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletAddRemoveTeachingsAsAddress extends HttpServlet {\n\n\n\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6692711286746163446L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showAddressList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerAddress managerAddress = ManagerAddress.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono l'id dell'address e le due liste di insegnamenti!\n\t\t\tAddress address = (Address) session.getAttribute(\"address\"); \n\t\t\tString[] idSelectedList = pRequest.getParameterValues(\"selectedTeachings\");\n\t\t\tString[] idUnselectedList = pRequest.getParameterValues(\"unselectedTeachings\");\n\t\t\tint nSelected =idSelectedList.length;\n\t\t\tint nUnselected =idUnselectedList.length;\n\t\t\tint temp;\n\t\t\t//Aggiungiamo gli insegnamenti selezionati!!\n\t\t\t\tfor(int i=0;i<nSelected;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idSelectedList[i]);\n\t\t\t\t\tif(!managerAddress.hasTeaching(managerTeaching.getTeachingById(temp), address)){\n\t\t\t\t\t\tmanagerAddress.assignTeachingAsAddress(address, managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//Rimuoviamo gli insegnamenti non selezionati\n\t\t\t\tfor(int i=0;i<nUnselected;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idUnselectedList[i]);\n\t\t\t\t\tif(managerAddress.hasTeaching(managerTeaching.getTeachingById(temp), address)){\n\t\t\t\t\t\tmanagerAddress.removeTeachingAsAddress(address, managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (DuplicatedEntityException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28855"},"name":"ServletLogin.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28813"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28821"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.LoginException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per effettuare il login dell'utente.\n * \n * @author Napolitano Vincenzo.\n */\npublic class ServletLogin extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,HttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\t\t\n\t\t\n\t\t// Ottengo i dati dalla request\n\t\tString login = pRequest.getParameter(\"user\");\n\t\tString password = pRequest.getParameter(\"password\");\n\t\t\n\t\t// Login dell'utente\n\t\ttry {\n\t\t\t\n\t\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\t\n\t\t\tif(managerUser.getUserByLogin(login) != null){\n\t\t\t\n\t\t\t\tUser loggedUser = managerUser.login(login, password);\n\t\t\t\tif (loggedUser != null)\n\t\t\t\t\tsession.setAttribute(\"loggedUser\", loggedUser);\n\t\t\t\telse throw new LoginException(\"Nome Utente e/o Password errati!\");\n\t\t\t\t\n\t\t\t\tif (managerUser.isAdministrator(loggedUser) ){\n\t\t\t\t\tgotoPage=\"./homePage/homeAdmin.jsp\";\n\t\t\t\t}else if (managerUser.isTeacher(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeProfessor.jsp\";\n\t\t\t\t}else if (managerUser.isStudent(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeStudent.jsp\";\n\t\t\t\t}else if (managerUser.isParent(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeParent.jsp\";\n\t\t\t\t}else if (managerUser.isAtaPeople(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeAtaPeople.jsp\";\n\t\t\t\t}else if (managerUser.isDirector(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeDirector.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (LoginException loginException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + loginException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tloginException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28856"},"name":"ServletDeleteNote.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteNote extends HttpServlet {\n\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7968126163648714515L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\n\t\t\tNote toDelete= (Note) session.getAttribute(\"note\");\n\t\t\t\t\n\t\t\tmanagerRegister.deleteNote(toDelete);\n\t\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28857"},"name":"ServletDeleteClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteClassroom extends HttpServlet {\n\n\t/**\n\t *  Servlet per cancellare una classe\n\t *  \n\t *  @author Nicola Pisanti\n\t *  @version 0.9\n\t */\n\tprivate static final long serialVersionUID = 5272269413504847511L;\n\n\t\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\t\n\t\tint  aC=0;\n\t\tString gotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\taC=Integer.valueOf(classroom.getAcademicYear());\n\t\t\tmanagerClassroom.delete(classroom);\n\t\t\tgotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} /*catch (DeleteManagerException deleteManagerException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + deleteManagerException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteManagerException.printStackTrace();\n\t\t} */catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28858"},"name":"ServletProva.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.teachingManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletProva extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -832177625776300783L;\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28859"},"name":"Address.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.bean;\nimport java.io.Serializable;\n\n/**\n *  Classe utilizzata per modellare un indirizzo.\n *\n * \n */\npublic class Address implements Serializable{\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -9194626030239503689L;\n\t\n\tprivate int idAddress;\n\tprivate String name;\n\t\n\t/**\n\t * Il costruttore della classe.\n\t */\n\t\tpublic Address(){\n\t\tthis.idAddress= 0;\n\t}\n\t\t\n\t/**\n\t * @return Ritorna l' id dell' indirizzo.\n\t */\n\t\t\n\tpublic int getIdAddress() {\n\t\treturn idAddress;\n\t}\n\t\n\t/**\n\t * Setta l' id dell' indirizzo.\n\t * @param pIdAddress\n\t * \t\t\tl' id da settare.\n\t */\n\tpublic void setIdAddress(int pIdAddress) {\n\t\tthis.idAddress = pIdAddress;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell' indirizzo.\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Setta il nome dell' indirizzo.\n\t * @param pName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2885a"},"name":"ServletShowUserRoleForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare il form di gestione\n * dei ruoli degli utenti.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserRoleForm extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -2210761175435137331L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/userRolez.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\t\n\t\t\n\t\tboolean isTeacherBoolean = false;\n\t\tboolean isAdministratorBoolean = false;\n\t\tboolean isParentBoolean = false;\n\t\tboolean isStudentBoolean = false;\n\t\tboolean isAtaBoolean = false;\n\t\tboolean isDirectorBoolean = false;\n\t\t\n\t\tint isTeacher = 0;\n\t\tint isAdministrator = 0;\n\t\tint isDirector = 0;\n\t\tint isParent = 0;\n\t\tint isStudent = 0;\n\t\tint isAta = 0;\n\t\t\n\t\tUser user = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tuser = (User) session.getAttribute(\"user\");\n\t\t\t//prepariamo i valori da passare alla jsp\n\t\t\tisTeacherBoolean = managerUser.isTeacher(user);\n\t\t\tisAdministratorBoolean = managerUser.isAdministrator(user);\n\t\t\tisAtaBoolean = managerUser.isAtaPeople(user);\n\t\t\tisDirectorBoolean= managerUser.isDirector(user);\n\t\t\tisStudentBoolean= managerUser.isStudent(user);\n\t\t\tisParentBoolean= managerUser.isParent(user);\n\t\t\n\t\t\tisTeacher = Utility.BooleanToInt(isTeacherBoolean);\n\t\t\tisDirector = Utility.BooleanToInt(isDirectorBoolean);\n\t\t\tisAdministrator = Utility.BooleanToInt(isAdministratorBoolean);\n\t\t\tisAta = Utility.BooleanToInt(isAtaBoolean);\n\t\t\tisStudent = Utility.BooleanToInt(isStudentBoolean);\n\t\t\tisParent = Utility.BooleanToInt(isParentBoolean);\n\t\t\t\n\t\t\tgotoPage = \"./persistentDataManagement/userManagement/userRolez.jsp?isTeacher=\"+isTeacher+\"&isAdmin=\"+isAdministrator+\"&isAta=\"+isAta\n\t\t\t+\"&isStudent=\"+isStudent+\"&isParent=\"+isParent+\"&isDirector=\"+isDirector;\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\t\t\treturn;  \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2885b"},"name":"TestRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage;\n\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport smos.bean.Absence;\nimport smos.bean.Delay;\nimport smos.bean.Justify;\nimport smos.bean.Note;\nimport smos.bean.RegisterLine;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\n\npublic class TestRegister {\n\n\t// database errato, impossibile inserire null nel campo id_justify di absence\n\tpublic static void main(String[] args) {\n\t\t\n\t\tManagerRegister mr=  ManagerRegister.getInstance();\n\t\t\n\t\tDate datenow= new Date();\n\t\t\n\t\tAbsence absence = new Absence();\t\t\n\t\tabsence.setIdUser(61);\n\t\tabsence.setDateAbsence(datenow);\n\t\tabsence.setIdJustify(0);\n\t\tabsence.setAcademicYear(2009);\n\t\t//absence.setIdAbsence(13);\n\t\t\n\t\t/*\n\t\ttry {\n\t\t\tabsence= mr.getAbsenceByIdAbsence(12);\n\t\t\t\n\t\t} catch (InvalidValueException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (EntityNotFoundException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (ConnectionException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (SQLException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t\t*/\n\t\t\n\t\tJustify justifynew= new Justify();\n\t\tjustifynew.setIdUser(1);\n\t\tjustifynew.setDateJustify(datenow);\n\t\tjustifynew.setAcademicYear(2008);\n\n\t\tjustifynew.setIdJustify(6);\n\t\t\n\t\t\n\t\tDelay delay = new Delay();\n\t\t//delay.setIdDelay(3);\n\t\tdelay.setIdUser(62);\n\t\tdelay.setDateDelay(datenow);\n\t\tdelay.setTimeDelay(\"10:00:00\");\n\t\tdelay.setAcademicYear(2009);\n\t\t\n\t\tNote notenew= new Note();\n\t\tnotenew.setIdUser(2);\n\t\tnotenew.setTeacher(\"boh\");\n\t\tnotenew.setAcademicYear(2009);\n\t\tnotenew.setDateNote(datenow);\n\t\tnotenew.setDescription(\"lo studente dorme in classe\");\n\t\tnotenew.setIdNote(1);\n\t\t\n\t\ttry{\n\t\t\t//mr.insertAbsence(absence);\n\t\t\t//if(mr.exists(absence)) System.out.println(\"esiste\");;\n\t\t\t//mr.deleteAbsence(absence);\n\t\t\t//mr.updateAbsence(absence);\n\t\t\t\n\t\t\tmr.insertDelay(delay);\n\t\t\t//if(mr.exists(delay)) System.out.println(\"esiste\");;\n\t\t\t//mr.updateDelay(delay);\n\t\t\t//mr.deleteDelay(delay);\n\t\t\t\n\t\t\t//mr.insertNote(notenew);\n\t\t\t//mr.deleteNote(notenew);\n\t\t\t\n\t\t\t//mr.insertJustify(justifynew, absence);\n\t\t\t//mr.deleteJustify(justifynew.getIdJustify());\n\t\t\t//if(mr.hasJustify(absence))System.out.println(\"giustificata\");\n\t\t\t\n\t\t\t//absence= mr.getAbsenceByIDUserAndDate(2, \"2009-05-18\");\n\t\t\t//absence= mr.getAbsenceByIdJustify(1);\n\t\t\t//System.out.println(absence.getDateAbsence());\n\t\t\t\n\t\t\t//Collection<Absence> ac= mr.getAbsenceByIDUserAndAcademicYear(2, 2009);\n\t\t\t//for(Absence x : ac) System.out.println(x.getDateAbsence());\n\t\t\t\n\t\t\t//justifynew=mr.getJustifyByAbsence(absence);\n\t\t\t//System.out.println(justifynew.getDateJustify());\n\t\t\t\n\t\t\t//Collection<Note> nc = mr.getNoteByIDUserAndAcademicYear(2, 2009);\n\t\t\t//for(Note x : nc) System.out.println(x.getDescription());\n\t\t\t\n\t\t\t//delay= mr.getDelayByIDUserAndDate(1, datenow);\n\t\t\t//System.out.println(delay.getDateDelay());\n\t\t\t//System.out.println(delay.getTimeDelay());\n\t\t\t\n\t\t\t\n\t\t\t///*\n\t\t\tCollection<RegisterLine> crl = mr.getRegisterByClassIDAndDate(64, datenow );\n\t\t\tfor(RegisterLine x : crl){\n\t\t\t\tSystem.out.println(x.getStudent().getName());\n\t\t\t\tif(mr.hasAbsence(x)){\n\t\t\t\t\tSystem.out.println(\"assente\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(mr.hasAbsence(x));\n\t\t\t\tif(mr.hasDelay(x)){\n\t\t\t\t\tSystem.out.println(\"ritardo\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t//*/\n\t\t\t\n\t\t\tGregorianCalendar gc = new GregorianCalendar();\n\t\n\t\t\tString date=\"\";\n\t\t\tint year=gc.get(GregorianCalendar.YEAR);\n\t\t\t\n\t\t\tint month=gc.get(GregorianCalendar.MONTH)+1;\n\t\t\tString months=\"\";\n\t\t\tif(month<10){\n\t\t\t\tmonths=\"0\"+month;\n\t\t\t}else{\n\t\t\t\tmonths= months+month;\n\t\t\t}\n\t\t\t\n\t\t\tint day=gc.get(GregorianCalendar.DAY_OF_MONTH);\n\t\t\tString days=\"\";\n\t\t\tif(day<10){\n\t\t\t\tdays=\"0\"+day;\n\t\t\t}else{\n\t\t\t\tdays= days+day;\n\t\t\t}\n\t\t\t\n\t\t\tdate= date + year+\"-\"+months+\"-\"+days;\n\t\t\tSystem.out.println(date);\n\t\t\t\n\t\t}catch (Exception e) {\n\t\t\tSystem.out.println(\"errore\");\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t\t\n\t\tSystem.out.println(datenow.toString());\n\t\tSystem.out.println(Utility.isNull(datenow));\n\t\tSystem.out.println(\"TEST COMPLETATO\");\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2885c"},"name":"ServletShowUserDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per recuperare i dettagli dell'utente.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserDetails extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1726037792193089501L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showUserDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tint userId = Integer.valueOf(pRequest.getParameter(\"userId\"));\n\t\t\tUser user = managerUser.getUserById(userId);\n\t\t\t\n\t\t\tsession.setAttribute(\"user\",user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2885d"},"name":"display.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"\n\n/****************** displaytag stylesheet ****************/\n\ntable.datatable {\n\tborder-color:#89B2DB;\n\tborder-collapse: collapse;\n\tborder-width: 1px;\n\tborder-style:solid;\n\twidth: 80%;\n\tmargin: 5px 0 10px 10% !important;\n\tfont-size: 8pt;\n}\ntable.cardtable {\n\tborder: 1px solid  #CCFFFF ;\n\twidth: 80%;\n\tmargin: 5px 0 10px 10% !important;\n\tfont-size: 8pt;\n}\ntable.simpletable {\n\tborder: 0px;\n\twidth: 80%;\n\tmargin: 0px 0 0px 0 !important;\n\tfont-size: 8pt;\n\n}\ntable.datatable a:active,\ntable.datatable a:link,\ntable.datatable a:visited ,\ntable.cardtable a:active,\ntable.cardtable a:link,\ntable.cardtable a:visited{\n\tcolor:#000000;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\ntable.cardtable a:hover,\ntable.datatable a:hover {\n\tcolor:#1075bd;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\ntable.cardtable td{\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\ttext-align:left;\n\tborder: 1px solid  #89B2DB ;\n\n}\ntable.datatable td{\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\ttext-align:left;\n}\n\n\nthead tr {\n\tbackground-color: #C4CBD0;\n}\n\nth.sorted {\n\tbackground-color:#9ec7e2;\n}\n\nth.sorted a,\nth.sortable a {\n\tcolor:#000000;\n\tbackground-position: right;\n\tdisplay: block;\n}\nth.sorted a:hover,\nth.sortable a:hover {\n\tcolor:#1075bd;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\nth.sortable a {\n\tbackground-image: url(../icons/arrow_off.png);\n\tbackground-repeat: no-repeat;\t\n\tbackground-position:left; /* non supportata da mozilla */\n\n}\n\n\n\nth.order1 a {\n\tbackground-image: url(../images/down_arrow.gif);\n}\n\nth.order2 a {\n\tbackground-image: url(../images/up_arrow.gif);\n}\n\ntr.odd {\n\tbackground-color:#FFFFFF;\n}\n\ntr.tableRowEven, tr.even {\n\tbackground-color: #FFFFFF;\n}\n\ndiv.exportlinks {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\tmargin: 2px 0px 10px 10% ;\n\twidth: 79.5%;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}\n\nspan.export {\n\tpadding: 0 4px 1px 20px;\n\tdisplay: inline;\n\tdisplay: inline-block;\n}\n\nspan.excel {\n\tbackground-image: url(../images/icons/ico_file_excel.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.csv {\n\tbackground-image: url(../images/icons/ico_file_csv.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.xml {\n\tbackground-image: url(../images/icons/ico_file_xml.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.pdf {\n\tbackground-image: url(../images/icons/ico_file_pdf.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.rtf {\n\tbackground-image: url(../images/icons/ico_file_rtf.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.pagebanner {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\twidth: 79.5%;\n\tmargin-top: 10px;\n\tmargin-left:10%;\n\tdisplay: block;\n\tborder-bottom: none;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}\n\nspan.pagelinks {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\twidth: 79.5%;\n\tdisplay: block;\n\tborder-top: none;\n\tmargin-bottom: 5px;\n\tmargin-left:10%;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2885e"},"name":"ServletShowUserTeachingForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowUserTeachingForm extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2305151029867525356L;\n\t\n\t\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showTeacherDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tUser user = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tuser = (User) session.getAttribute(\"user\");\n\t\t\t\n\t\t\tif(!managerUser.isTeacher(user)){\n\t\t\t\terrorMessage =  \"L'Utente non è un docente\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\t\n\t\t\t}\n\t\t\t//int idTeacher= user.getId();\n\t\t\t\n\t\t\tCollection<Classroom> classList = managerClassroom.getClassroomsByTeacher(user);\n\t\t\t\n\t\t\t/*\n\t\t\tIterator<Classroom> iteClass = classList.iterator();\n\t\t\tClassroom tmp = null;\n\t\t\twhile(iteClass.hasNext()){\n\t\t\t\ttmp=iteClass.next();\n\t\t\t\tif(tmp.getAcademicYear()!= an){\n\t\t\t\t\tclassList.remove(tmp);\n\t\t\t\t}\n\t\t\t}*/\n\t\t\t//@SuppressWarnings(\"unused\")\n\t\t\t//Collection<Teaching> teachingListByClassroom=null;\n\t\t\t//Collection<Classroom,Teaching> list= new Vector <Classroom,Teaching>();\n\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classList);\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\t\t\treturn;  \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2885f"},"name":"ServletLoadClassByAccademicYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadClassByAccademicYear extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t//Date oggi = new Date();\n\t\t\t// recuperiamo l'anno accademico selezionato\n\t\t\tint selectedAccademicYear = Integer.valueOf(pRequest.getParameter(\"accademicYear\"));\n\t\t\t\n\t\t\t\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\t//Calcoliamo l'elenco delle classi dell'anno accademico selezionato\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(selectedAccademicYear);\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", selectedAccademicYear);\n\t\t\t//session.removeAttribute(\"selectedClass\");\n\t\t\tgotoPage +=(String) session.getAttribute(\"goTo\");\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28860"},"name":"Justify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class Justify implements Serializable {\n\n\t/**\n\t * Classe che modella una giustifica per un assenza\n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t * \n\t */\n\tprivate static final long serialVersionUID = -4726381877687167661L;\n\n\tprivate int idJustify;\n\tprivate int idUser;\n\tprivate Date dateJustify;\n\tprivate int academicYear;\n\t\n\t/**\n\t * Metodo che restituisce l'id della giustifica\n\t * @return un intero che rappresenta l'id della giustifica\n\t */\n\tpublic int getIdJustify() {\n\t\treturn idJustify;\n\t}\n\t/**\n\t * Metodo che setta l'id della giustifica\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdJustify(int pIdJustify) {\n\t\tthis.idJustify = pIdJustify;\n\t}\n\t/**\n\t * Metodo restituisce l'id dello studente relativo alla giustifica\n\t * @return un intero che rappresenta l'id dello studente \n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo alla giustifica\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data alla quale Ã¨ stata giustificata l'assenza\n\t * @return una stringa che rappresenta la data giustificata\n\t */\n\tpublic Date getDateJustify() {\n\t\treturn dateJustify;\n\t}\n\t/**\n\t * Metodo che setta la data alla quale Ã¨ stata giustificata l'assenza\n\t * @param una stringa che rappresenta la data da settare\n\t */\n\tpublic void setDateJustify(Date pDateJustify) {\n\t\tthis.dateJustify = pDateJustify;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo alla giustifica\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo alla giustifica\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28861"},"name":"Note.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Classe che modella una nota sul registro \n * @author Nicola Pisanti\n * @version 1.0\n */\n\n\npublic class Note implements Serializable{\n\n\tprivate static final long serialVersionUID = 5953926210895315436L;\n\t\n\tprivate int idNote;\n\tprivate int idUser;\n\tprivate Date dateNote;\n\tprivate String description;\n\tprivate String teacher;\n\tprivate int academicYear;\n\t\n\t\n\tpublic Note(){\n\t\t\n\t}\n\t\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'id della nota\n\t * @return un intero che rappresenta l'id della nota\n\t */\n\tpublic int getIdNote() {\n\t\treturn idNote;\n\t}\n\t/**\n\t * Metodo per settare l'id della nota\n\t * @param un intero che rappresenta il nuovo valore dell'id\n\t */\n\tpublic void setIdNote(int pIdNote) {\n\t\tthis.idNote = pIdNote;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente che ha ricevuto la nota\n\t * @return l'id dell'utente che ha ricevuto la nota\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo per settare l'id dello studente che ha ricevuto la nota\n\t * @param un intero che rappresenta il nuovo valore dell'id\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce una stringa che rappresenta la data in cui Ã¨ stata data la nota\n\t * @return una stringa che rappresenta la data della nota\n\t */\n\tpublic Date getDateNote() {\n\t\treturn dateNote;\n\t}\n\t/**\n\t * Metodo che setta una stringa che rappresenta la data in cui Ã¨ stata data la nota\n\t * @param la stringa che rappresenta la nuova data\n\t */\n\tpublic void setDateNote(Date pDateNote) {\n\t\tthis.dateNote = pDateNote;\n\t}\n\t/**\n\t * Metodo che restituisce il testo della nota \n\t * @return una stringa che rappresenta il testo della nota\n\t */\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\t/**\n\t * Metodo che setta la descrizione della nota\n\t * @param una stringa che contiene la descrizione della nota\n\t */\n\tpublic void setDescription(String pDescription) {\n\t\tthis.description = pDescription;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dell'insegnante che ha dato la nota \n\t * @return un intero che rappresenta l'id dell'insegnante\n\t */\n\tpublic String getTeacher() {\n\t\treturn teacher;\n\t}\n\t/**\n\t * Metodo che setta l'id dell'insegnante che ha dato la nota \n\t * @param teacher the teacher to set\n\t */\n\tpublic void setTeacher(String pTeacher) {\n\t\tthis.teacher = pTeacher;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico in corso\n\t * @return un intero che indica l'anno di inizio delle lezioni \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Medoto che setta l'anno accademico in corso durante l'assegnazione della nota\n\t * @param un intero che indica l'anno di inizio delle lezioni da inserire\n\t */\n\tpublic void setAcademicYear(int academicYear) {\n\t\tthis.academicYear = academicYear;\n\t}\n\n\t\n\t\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28862"},"name":"ConnectionWrapper.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * ConnectionWrapper\n *\n */\n\npackage smos.storage.connectionManagement;\n\n\nimport java.io.Serializable;\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.SQLWarning;\nimport java.sql.Savepoint;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\n/**\n * ConnectionWrapper è una classe che aggiunge a tutti i metodi della classe\n * Connection il settaggio del tempo in cui l'operazione sulla particolare\n * connessione è avvenuta informando il pool di quanto accaduto.\n */\n\npublic class ConnectionWrapper implements Connection, Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final Logger LOGGER = Logger\n            .getLogger(ConnectionWrapper.class.getName());\n\n    private Connection connection;\n\n    private ConnectionPoolDataSource manager;\n\n    private ArrayList<Statement> statements = new ArrayList<Statement>();\n\n    /**\n     * @param pConnection\n     * @param pPoolManager\n     */\n    public ConnectionWrapper(Connection pConnection,\n            ConnectionPoolDataSource pPoolManager) {\n        this.connection = pConnection;\n        this.manager = pPoolManager;\n        LOGGER.fine(\"Creating ConnectionWrapper\");\n    }\n\n    private PreparedStatement cachePreparedStatement(PreparedStatement pPrepSt) {\n        this.manager.setLastTime(this);\n        this.statements.add(pPrepSt);\n        return pPrepSt;\n    }\n\n    private Statement cacheStatement(Statement pStatement) {\n        this.manager.setLastTime(this);\n        this.statements.add(pStatement);\n        return pStatement;\n    }\n\n    /**\n     * @see java.sql.Connection#clearWarnings()\n     */\n    public void clearWarnings() throws SQLException {\n        this.connection.clearWarnings();\n    }\n\n    /**\n     * @see java.sql.Connection#close()\n     */\n    public void close() throws SQLException {\n        closeAndReleaseStatements();\n        this.manager.release(this);\n    }\n\n    private synchronized void closeAndReleaseStatements() throws SQLException {\n        final int n = this.statements.size();\n        for (int i = 0; i < n; i++) {\n            ((Statement) this.statements.get(i)).close();\n        }\n        this.statements.clear();\n    }\n\n    /**\n     * Close the wrapped connection.\n     * @throws SQLException \n     */\n    void closeWrappedConnection() throws SQLException {\n        closeAndReleaseStatements();\n        if (!this.connection.isClosed()) {\n            LOGGER.fine(\"Closing db connection: \" + this.getClass().getName()\n                    + \" [\" + this + \"]\");\n        }\n        this.connection.close();\n    }\n\n    /**\n     * @see java.sql.Connection#commit()\n     */\n    public void commit() throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.commit();\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement()\n     */\n    public Statement createStatement() throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement());\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement(int, int)\n     */\n    public Statement createStatement(int pResultSetType,\n            int pResultSetConcurrency) throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement(pResultSetType,\n                pResultSetConcurrency));\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement(int, int, int)\n     */\n    public Statement createStatement(int pResultSetType,\n            int pResultSetConcurrency, int pResultSetHoldability)\n            throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement(pResultSetType,\n                pResultSetConcurrency, pResultSetHoldability));\n    }\n\n    /**\n     * Closes the wrapped connection.\n     */\n    protected void finalize() throws Throwable {\n        closeWrappedConnection();\n    }\n\n    /**\n     * @see java.sql.Connection#getAutoCommit()\n     */\n    public boolean getAutoCommit() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getAutoCommit();\n    }\n\n    /**\n     * @see java.sql.Connection#getCatalog()\n     */\n    public String getCatalog() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getCatalog();\n    }\n\n    /**\n     * @see java.sql.Connection#getHoldability()\n     */\n    public int getHoldability() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getHoldability();\n    }\n\n    /**\n     * @see java.sql.Connection#getMetaData()\n     */\n    public DatabaseMetaData getMetaData() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getMetaData();\n    }\n\n    /**\n     * @see java.sql.Connection#getTransactionIsolation()\n     */\n    public int getTransactionIsolation() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getTransactionIsolation();\n    }\n\n    /**\n     * @see java.sql.Connection#getTypeMap()\n     */\n    @SuppressWarnings(\"unchecked\")\n\tpublic Map getTypeMap() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getTypeMap();\n    }\n\n    /**\n     * @see java.sql.Connection#getWarnings()\n     */\n    public SQLWarning getWarnings() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getWarnings();\n    }\n\n    /**\n     * @see java.sql.Connection#isClosed()\n     */\n    public boolean isClosed() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.isClosed();\n    }\n\n    /**\n     * @see java.sql.Connection#isReadOnly()\n     */\n    public boolean isReadOnly() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.isReadOnly();\n    }\n\n    /**\n     * @see java.sql.Connection#nativeSQL(java.lang.String)\n     */\n    public String nativeSQL(String sql) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.nativeSQL(sql);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String)\n     */\n    public CallableStatement prepareCall(String sql) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(sql);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String, int, int)\n     */\n    public CallableStatement prepareCall(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(pStatementSql, pResultSetType,\n                pResultSetConcurrency);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String, int, int, int)\n     */\n    public CallableStatement prepareCall(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency,\n            int pResultSetHoldability) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(pStatementSql, pResultSetType,\n                pResultSetConcurrency, pResultSetHoldability);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql)\n            throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection\n                .prepareStatement(pStatementSql));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pAutoGeneratedKeys) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pAutoGeneratedKeys));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pResultSetType, pResultSetConcurrency));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int, int, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency,\n            int pResultSetHoldability) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pResultSetType, pResultSetConcurrency,\n                pResultSetHoldability));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int[])\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int[] columnIndexes) throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, columnIndexes));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, java.lang.String[])\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            String[] pColumnNames) throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pColumnNames));\n    }\n\n    /**\n     * @see java.sql.Connection#releaseSavepoint(java.sql.Savepoint)\n     */\n    public void releaseSavepoint(Savepoint pSavepoint) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.releaseSavepoint(pSavepoint);\n    }\n\n    /**\n     * @see java.sql.Connection#rollback()\n     */\n    public void rollback() throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.rollback();\n    }\n\n    /**\n     * @see java.sql.Connection#rollback(java.sql.Savepoint)\n     */\n    public void rollback(Savepoint pSavepoint) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.rollback(pSavepoint);\n    }\n\n    /**\n     * @see java.sql.Connection#setAutoCommit(boolean)\n     */\n    public void setAutoCommit(boolean pAutoCommit) throws SQLException {\n        this.manager.setLastTime(this);\n        if (this.connection.getAutoCommit() != pAutoCommit) {\n            this.connection.setAutoCommit(pAutoCommit);\n        }\n    }\n\n    /**\n     * @see java.sql.Connection#setCatalog(java.lang.String)\n     */\n    public void setCatalog(String pCatalog) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setCatalog(pCatalog);\n    }\n\n    /**\n     * @see java.sql.Connection#setHoldability(int)\n     */\n    public void setHoldability(int pHoldability) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setHoldability(pHoldability);\n    }\n\n    /**\n     * @see java.sql.Connection#setReadOnly(boolean)\n     */\n    public void setReadOnly(boolean pReadOnly) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setReadOnly(pReadOnly);\n    }\n\n    /**\n     * @see java.sql.Connection#setSavepoint()\n     */\n    public Savepoint setSavepoint() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.setSavepoint();\n    }\n\n    /**\n     * @see java.sql.Connection#setSavepoint(java.lang.String)\n     */\n    public Savepoint setSavepoint(String pName) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.setSavepoint(pName);\n    }\n\n    /**\n     * @see java.sql.Connection#setTransactionIsolation(int)\n     */\n    public void setTransactionIsolation(int pLevel) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setTransactionIsolation(pLevel);\n    }\n\n    /**\n     * @see java.sql.Connection#setTypeMap(java.util.Map)\n     */\n    \n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    public String toString() {\n        return this.connection.toString();\n    }\n\n\tpublic void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28863"},"name":"ServletAssignStudentClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletAssignStudentClassroom extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\t// Studente selezionato\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\n\t\t\t// anno accademico selezionato\n\t\t\tint academicYear = Integer.valueOf(pRequest\n\t\t\t\t\t.getParameter(\"accademicYear\"));\n\t\t\t// id classe selezionata che e' zero se vogliamo eliminare\n\t\t\t// l'associazione\n\t\t\tint idClassroom = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tClassroom p = null;\n\t\t\tp = managerClassroom.getClassroomByUserAcademicYear(user,academicYear);\n\t\t\tif (p != null)\n\t\t\t\tmanagerUser.removeStudentClassroom(user, p.getIdClassroom());\n\t\t\tif(idClassroom>0) {\n\t\t\t\t\n\t\t\t\t\tmanagerUser.assignStudentClassroom(user, idClassroom);\n\t\t\t}\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28864"},"name":"ServletDeleteUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteAdministratorException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per eliminare un utente.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletDeleteUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -7693860059069872995L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<UserListItem> manager = null;\n\t\tIterator<UserListItem> it = null;\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) &&\n\t\t\t\t\t(!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\t//cancella utente se non è amministratore\n\t\t\tif(!managerUser.isAdministrator(user)) {\n\t\t\t\tmanagerUser.delete(user);\n\t\t\t}\n\t\t\t//controllo se l'utente è amministratore e se ce ne sono degli altri\n\t\t\telse {\n\t\t\t\tmanager = managerUser.getAdministrators();\n\t\t\t\tit = manager.iterator();\n\t\t\t\tit.next();\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tmanagerUser.delete(user);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tthrow new DeleteAdministratorException ();\n\t\t\t}\n\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (DeleteAdministratorException deleteAdministratorException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + deleteAdministratorException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteAdministratorException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28865"},"name":"ConnectionException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando non è possibile\n  * ottenere una connessione al database\n  */\npublic class ConnectionException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -6593436034986073011L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic ConnectionException() {\n\t\tsuper(\"Unable to Connect to the DataBase!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic ConnectionException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28866"},"name":"ServletInsertAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.Address;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n/**\n * Servlet utilizzata per inserire un indirizzo nel database\n * \n * @author Vecchione Giuseppe\n */\npublic class ServletInsertAddress extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 8318905833953187814L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * \n\t * @param pResponse\n\t * \n\t */\n\t\n\tpublic void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString gotoPage=\"./showAddressList\";\n\t\tString errorMessage=\"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\t\tif(loggedUser==null){\n\t\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\t\terrorMessage= \"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tAddress address= new Address();\n\t\t\t\taddress.setName(pRequest.getParameter(\"name\"));\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Verifichiamo che l' indirizzo non sia presente nel database\n\t\t\t\t * e lo inseriamo\n\t\t\t\t */\n\t\t\t\tif(!managerAddress.exists(address)){\n\t\t\t\t\tmanagerAddress.insert(address);\n\t\t\t\t}else{\n\t\t\t\t\tthrow new DuplicatedEntityException(\"Indirizzo gia' esistente\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException sqlException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tsqlException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tmandatoryFieldException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tduplicatedEntityException.printStackTrace();\n\t\t\t}\n\t\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\t\ttry {\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t}\n\t\t}\n\t\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28867"},"name":"DeleteManagerException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n * Questa classe rappresenta l'eccezione generata quando un utente\n * tenta di eliminare l'unico utente Manager nel database.\n */\npublic class DeleteManagerException extends Exception {\n\n\tprivate static final long serialVersionUID = -6441256751177339494L;\n\t\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t * \n\t */\n\tpublic DeleteManagerException() {\n\t\tsuper(\"Impossibile eliminare l'utente, l'utente selezionato e' l'unico Manager presente nel database! Creare un nuovo Manager e riprovare!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DeleteManagerException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28868"},"name":"ServletShowJustifyDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowJustifyDetails extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6445257206429581384L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showJustifyDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t\tint idJustify = Integer.valueOf(pRequest.getParameter(\"idJustify\"));\n\t\t\tString idClassroom = pRequest.getParameter(\"idClassroom\");\n\t\t\tgotoPage+=\"?idClassroom=\"+idClassroom;\n\t\t\tJustify justify=mR.getJustifyByIdJustify(idJustify);\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"justify\",justify);\n\t\t\tsession.setAttribute(\"idClassroom\",idClassroom);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28869"},"name":"ManagerTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.storage;\n\nimport smos.bean.Teaching;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n * \n * Classe manager degli insegnamenti.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\n\npublic class ManagerTeaching {\n\tprivate static ManagerTeaching instance;\n\n\t/**\n\t * Il nome della tabella degli insegnamenti.\n\t */\n\tpublic static final String TABLE_TEACHING = \"teaching\";\n\n\t/**\n\t * Il nome della tabella che modella l'associazione molti a molti tra\n\t * indirizzi ed insegnamenti.\n\t */\n\tpublic static final String TABLE_ADDRESS_TEACHINGS = \"address_has_teaching\";\n\n\t/**\n\t * Il nome della tabella che modella l'associazione molti a molti tra utenti\n\t * e insegnamenti.\n\t */\n\tpublic static final String TABLE_TEACHER_CLASSROOM = \"teacher_has_classroom\";\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tprivate ManagerTeaching() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Ritorna la sola istanza dell'insegnamento esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerTeaching getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new ManagerTeaching();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Verifica l'esistenza di un insegnamento nel database.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @return Ritorna true se esiste l'insegnamento passato come parametro,\n\t *         false altrimenti.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t */\n\tpublic synchronized boolean exists(Teaching pTeaching)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException {\n\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pTeaching.getName() == null)\n\t\t\tthrow new MandatoryFieldException(\"Specificare il nome.\");\n\t\ttry {\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE name = \" + Utility.isNull(pTeaching.getName());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Inserisce un nuovo insegnamento nella tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Teaching pTeaching)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException,\n\t\t\tEntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// controllo dei campi obbligatori\n\t\t\tif (pTeaching.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t// Prepariamo la stringa Sql\n\t\t\tString sql = \"INSERT INTO \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" (name) \" + \"VALUES (\"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getName()) + \")\";\n\n\t\t\tUtility.executeOperation(connect, sql);\n\n\t\t\tpTeaching.setId(Utility.getMaxValue(\"id_teaching\",\n\t\t\t\t\tManagerTeaching.TABLE_TEACHING));\n\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna un insegnamento presente nella tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da modificare\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update(Teaching pTeaching)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\tif (pTeaching.getId() <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\tif (pTeaching.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"UPDATE \" + ManagerTeaching.TABLE_TEACHING + \" SET\"\n\t\t\t\t\t+ \" name = \" + Utility.isNull(pTeaching.getName())\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\n\t\t\t// effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Elimina un insegnamento dalla tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da eliminare.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t * \n\t */\n\tpublic synchronized void delete(Teaching pTeaching)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// ManagerTeaching.getInstance().teachingOnDeleteCascade(pTeaching);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"DELETE FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento passato come parametro.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento di cui si richiede l'id.\n\t * @return Ritorna l'id dell'insegnamento passato come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized int getTeachingId(Teaching pTeaching)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tint result = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tif (pTeaching == null)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro.\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_teaching FROM \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE name = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getName());\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getInt(\"id_teaching\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna il nome dell'insegnamento corrispondente all'id passato come\n\t * parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna una stringa contenente il nome dell'insegnamento.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized String getTeachingNameById(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro\n\t\t\t */\n\t\t\tString tSql = \"SELECT name FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \" + Utility.isNull(pId);\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getString(\"name\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insegnamento corrispondente all'id passato come parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna l'insegnamento associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Teaching getTeachingById(int pId)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tInvalidValueException {\n\t\tTeaching result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \" + Utility.isNull(pId);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme di tutti gli insegnamenti presenti nel database.\n\t * \n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachings()\n\t\t\tthrows ConnectionException, SQLException, InvalidValueException,\n\t\t\tEntityNotFoundException {\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByUserId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \", \" + ManagerTeaching.TABLE_TEACHING + \" WHERE (\"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \".id_teaching = \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \")\" + \" ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti che il docente insegna nella classe\n\t * \n\t * @param pIdTeacher\n\t *            L'id dell'utente.\n\t * @param pIdClass\n\t *            l'id della classe\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByUserIdClassID(int pIdTeacher,int pIdClass)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pIdTeacher <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\t\tif (pIdClass <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare la classe\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\t\n\t\t\tString sql = \"SELECT DISTINCT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \", \" + ManagerTeaching.TABLE_TEACHING + \" WHERE (\"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pIdTeacher) +\" AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM \n\t\t\t\t\t+ \".id_teaching= \" + Utility.isNull(pIdClass)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \".id_teaching = \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching \"\n\t\t\t\t\t+\") ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Verifica se un insegnamento ha un professore assegnato.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @return Ritorna true se l'insegnamento ha un professore assegnato, false\n\t *         altrimenti.\n\t * \n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized boolean hasTeacher(Teaching pTeaching)\n\t\t\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\t\t\tInvalidValueException {\n\t\tConnection connect = null;\n\t\tboolean result = false;\n\t\tif (pTeaching.getId() <= 0)\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Preparimao la stringa sql\n\t\t\tString sql = \"SELECT * FROM \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\t\t\t// Inviamo la Query al database\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\tif (pRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\t// rilasciamo le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati alla classe specificata\n\t * \n\t * @param pId\n\t *            L'id della classe.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByClassroomId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId < 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'id della Classe!\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_classroom = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \" AND \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_address = \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t\t\t+ \".id_address AND \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching= \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \".id_teaching \";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati alla classe specificata\n\t * \n\t * @param name\n\t *            Il nome della classe.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByClassroomName(\n\t\t\tString name) throws EntityNotFoundException, ConnectionException,\n\t\t\tSQLException, InvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif ((name == null) || (name == \"\"))\n\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\"specificare il nome della Classe!\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".name = \"\n\t\t\t\t\t+ Utility.isNull(name) + \" AND \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_address = \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t\t\t+ \".id_address AND \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching= \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \".id_teaching \";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized Collection<Teaching> getTeachingsByIdUserIdClassroom(int pUser, int pClass) throws SQLException,\n\tEntityNotFoundException, ConnectionException, InvalidValueException {\n\t\t\n\t\t\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// \tPreparimao la stringa sql\n\t\t\t//select teaching.* from teacher_has_classroom AS THC , teaching where thc.id_user = 54 \n\t\t\t//&& thc.id_classroom = 64 && thc.id_teaching = teaching.id_teaching\n\t\t\t\n\t\t\tString sql = \"SELECT DISTINCT \"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING+\".*\" \n\t\t\t\t+\" FROM \" \n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+\" , \"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING\n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(pUser)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+ \".id_classroom= \"\n\t\t\t\t+ Utility.isNull(pClass)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+\".id_teaching =\"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING\n\t\t\t\t+\".id_teaching\";\n\t\t\t\t// Inviamo la Query al database\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Consente la lettura di un record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna l'insegnamento letto.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Teaching loadRecordFromRs(ResultSet pRs) throws SQLException,\n\t\t\tInvalidValueException {\n\t\tTeaching teaching = new Teaching();\n\t\tteaching.setName(pRs.getString((\"name\")));\n\t\tteaching.setId(pRs.getInt(\"id_teaching\"));\n\n\t\treturn teaching;\n\t}\n\n\t/**\n\t * Consente la lettura dei record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna la collection di insegnamenti letti.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Teaching> loadRecordsFromRs(ResultSet pRs)\n\t\t\tthrows SQLException, InvalidValueException {\n\t\tCollection<Teaching> result = new Vector<Teaching>();\n\t\tdo {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2886a"},"name":"ServletRemoveTeachingAsTeacher.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per rimuovere Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletRemoveTeachingAsTeacher extends HttpServlet {\n\n\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -8007609698841510837L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerClassroom managerClass = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono i 3 Id user class teachings(che non so quanti ne sono)\n\t\t\tint idTeacher = (int) ((User) session.getAttribute(\"user\")).getId();\n\t\t\tUser teacher = managerUser.getUserById(idTeacher); \n\t\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tString[] idTeachingList = pRequest.getParameterValues(\"unselectedTeachings\");\n\t\t\tint nTeaching =idTeachingList.length;\n\t\t\tint temp;\n\t\t\t//Collection<Teaching> listSelcected = new Vector<Teaching>();\n\t\t\tif(idTeachingList==null)\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\telse{\n\t\t\t\tfor(int i=0;i<nTeaching;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idTeachingList[i]);\n\t\t\t\t\tif(managerUser.hasTeaching(teacher,managerTeaching.getTeachingById(temp),managerClass.getClassroomByID(idClass))){\n\t\t\t\t\t\tmanagerUser.removeTeacherAtClassroomTeaching(teacher,idClass,temp);\n\t\t\t\t\t\t//listSelcected.add(managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2886b"},"name":"RegisterLine.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\npublic class RegisterLine implements Serializable {\n\n\t/**\n\t * Classe che modella una linea del registro \n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = -6010085925185873838L;\n\t\n\tprivate UserListItem student;\n\tprivate Absence absence;\n\tprivate Delay delay;\n\t\n\tpublic RegisterLine(){\n\t\tabsence=null;\n\t\tdelay=null;\n\t\t\n\t}\n\t\n\t/**\n\t * Metodo che restituisce lo studente di questa riga del registro\n\t * @return un oggetto di tipo User che rappresenta lo studente\n\t */\n\tpublic UserListItem getStudent() {\n\t\treturn student;\n\t}\n\t/**\n\t * Metodo che setta lo studente di questa riga del registro\n\t * @param un oggetto di tipo User che rappresenta lo studente da inserire\n\t */\n\tpublic void setStudent(UserListItem student) {\n\t\tthis.student = student;\n\t}\n\t/**\n\t * Metodo che restituisce l'assenza dello studente di questa riga del registro\n\t * @return un oggetto di tipo Absence che rappresenta l'assenza, oppure null se lo studente era presente\n\t */\n\tpublic Absence getAbsence() {\n\t\treturn absence;\n\t}\n\t/**\n\t * Metodo che setta l'assenza dello studente di questa riga del registro \n\t * @param un oggetto di tipo Absence da settare\n\t */\n\tpublic void setAbsence(Absence absence) {\n\t\tthis.absence = absence;\n\t}\n\t/**\n\t * Metodo che restituisce il ritardo dello studente di questa riga del registro \n\t * @return un oggetto di tipo Delay che rappresenta il ritardo, oppure null se lo studente era arrivato in orario o era assente\n\t */\n\tpublic Delay getDelay() {\n\t\treturn delay;\n\t}\n\t/**\n\t * Metodo che setta il ritardo dello studente di questa riga del registro \n\t * @param un oggetto di tipo Delay da settare\n\t */\n\tpublic void setDelay(Delay delay) {\n\t\tthis.delay = delay;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2886c"},"name":"ServletUpdateTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletUpdateTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 943677173076169934L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tTeaching teaching = (Teaching) session.getAttribute(\"teaching\");\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tteaching.setName((pRequest.getParameter(\"name\")));\n\t\t\tteaching.setId(teaching.getId());\n\n\t\t\tif (!managerTeaching.exists(teaching)) {\n\t\t\t\tmanagerTeaching.update(teaching);\n\t\t\t} \n\t\t\telse if(teaching.getId() == managerTeaching.getTeachingId(teaching))\n\t\t\t\t\tmanagerTeaching.update(teaching);\n\t\t\telse {\n\n\t\t\t\tthrow new DuplicatedEntityException(\n\t\t\t\t\t\t\"Insegnamento già esistente\");\n\t\t\t}\n\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2886d"},"name":"ServletShowClassroomDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n/**\n * Servlet per mostrare i dettagli di una classe\n * \n * @author Vecchione Giuseppe\n * \n */\npublic class ServletShowClassroomDetails extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = 5821337495655009521L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/classroomManagement/showClassroomDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint classroomId = 0;\n\t\tClassroom classroom= null;\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tclassroomId = Integer.valueOf(pRequest.getParameter(\"idClassroom\"));\n\t\t\tclassroom = managerClassroom.getClassroomByID(classroomId);\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2886e"},"name":"ServletInsertReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire una pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletInsertReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 8121220088758892213L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showReports\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tIterator<Teaching> itTeaching = teachingList.iterator();\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\t\t\tTeaching teachingTemp = null;\n\t\t\tint idTemp;\n\t\t\tString write, oral, lab;\n\t\t\tgotoPage += \"?student=\" + student.getId() + \"&q=\" + turn;\n\t\t\twhile (itTeaching.hasNext()) {\n\t\t\t\tteachingTemp = itTeaching.next();\n\t\t\t\tidTemp = teachingTemp.getId();\n\t\t\t\twrite = \"scritto_\" + idTemp;\n\t\t\t\toral = \"orale_\" + idTemp;\n\t\t\t\tlab = \"laboratorio_\" + idTemp;\n\t\t\t\twrite = pRequest.getParameter(write);\n\t\t\t\toral = pRequest.getParameter(oral);\n\t\t\t\tlab = pRequest.getParameter(lab);\n\t\t\t\tVotes newVotes = new Votes();\n\t\t\t\tint writeInt=0, oralInt=0,labInt=0;\n\t\t\t\tif(write!=\"\")\n\t\t\t\t\twriteInt = Integer.valueOf(write);\n\t\t\t\tif(oral!=\"\")\n\t\t\t\t\toralInt = Integer.valueOf(oral);\n\t\t\t\tif(lab!=\"\")\n\t\t\t\t\tlabInt = Integer.valueOf(lab);\n\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\tnewVotes.setAccademicYear(year);\n\t\t\t\t\tnewVotes.setId_user(student.getId());\n\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\tnewVotes.setTeaching(idTemp);\n\t\t\t\t\tnewVotes.setTurn(turn);\n\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\tmanagerVotes.insert(newVotes);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2886f"},"name":"ServletReportTeachings.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare un report degli insegnamenti di un docente\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletReportTeachings extends HttpServlet {\n\n\t\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 9020697390947529914L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showTeacherDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tUser teacher = (User) session.getAttribute(\"user\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t//recuperiamo l'anno accademico selezionato\n\t\t\tint academicYear = Integer.valueOf(pRequest.getParameter(\"accademicYear\"));\n\t\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\t//Calcoliamo l'elenco delle classi in cui insegna il docente in base all'anno selezionato\n\t\t\tCollection<Classroom> classroomList = null;\n\t\t\tclassroomList = managerClassroom.getClassroomsByTeacherAcademicYear(teacher, academicYear);\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", academicYear);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28870"},"name":"ServletLogout.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28813"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28821"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * Servlet utilizzata per effettuare il logout dell'utente.\n * \n * @author napolitano Vincenzo.\n *\n */\npublic class ServletLogout extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse) throws ServletException, IOException {\n\t\t\n\t\tpRequest.getSession().invalidate();\n\t\tpResponse.sendRedirect(\"./index.htm\");\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, HttpServletResponse pResponse) throws ServletException, IOException {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28871"},"name":"ServletAddressTeachings.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.*;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.*;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletAddressTeachings extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli insegnamenti associati ad un indirizzo.\n\t * \n\t * @author Vecchione Giuseppe.\n\t * \n\t */\n\tprivate static final long serialVersionUID = 239937097347087502L;\n\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/addressManagement/addressTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching =ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tCollection<Teaching> teachingList = managerTeaching.getTeachings();\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28872"},"name":"ServletShowTeachingList.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli insegnamenti.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeachingList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1361713427864776624L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/teachingManagement/showTeachingList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tteachingList = managerTeaching.getTeachings();\n\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28873"},"name":"ServletShowRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28816"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28819"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28812"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880f"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ea"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fc"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fe"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ff"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28805"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28801"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fa"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.RegisterLine;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowRegister extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -4054623648928396283L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tManagerRegister  managerRegister= ManagerRegister.getInstance();\n\t\tCollection<RegisterLine> register = null;\n\t\tint year;\n\t\tint month;\n\t\tint day;\n\t\t\n\t\tString date=pRequest.getParameter(\"date\");\n\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"idClassroom\"));\n\t\t\n\t\tString [] datevalues;\n\t\tdatevalues = date.split(\"/\");\n\t\tyear = Integer.valueOf(datevalues[2]);\n\t\tmonth = Integer.valueOf(datevalues[1]);\n\t\tday = Integer.valueOf(datevalues[0]);\n\t\t\n\t\ttry {\n\t\t\tregister= managerRegister.getRegisterByClassIDAndDate(idClass, Utility.String2Date(date));\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tClassroom classroom= managerClassroom.getClassroomByID(idClass);\n\t\t\t\n\t\t\tsession.setAttribute(\"register\", register);\n\t\t\tsession.setAttribute(\"year\", year);\n\t\t\tsession.setAttribute(\"month\", month);\n\t\t\tsession.setAttribute(\"day\", day);\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28874"},"name":"Utility.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.utility;\n\nimport smos.exception.EntityNotFoundException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.TimeZone;\nimport java.sql.*;\nimport java.text.DateFormat;\n\n/**\n * Questa classe contiene un insieme di utility per la gestione del sistema.\n */\npublic class Utility {\n\n\t/**\n\t * Costanti\n\t */\n\tpublic static final char SLASH = (char) 47;// carattere '/' in ascii\n\n\t/**\n\t * \n\t */\n\tpublic static final char BACKSLASH = (char) 92;// carattere '\\' in ascii\n\n\t/**\n\t * \n\t */\n\tpublic static final String[] day = { \"lunedi\", \"martedi\", \"mercoledi\",\n\t\t\t\"giovedi\", \"venerdi\", \"sabato\"};\n\t\n\t/**\n\t * \n\t */\n\tpublic static final String[] validHour = { \"08:00\", \"08:30\", \"09:00\",\n\t\t\"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\", \"12:00\", \"12:30\",\n\t\t\"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\",\n\t\t\"16:30\", \"17:00\", \"17:30\", \"18:00\", \"18:30\", \"19:00\", \"19:30\",\n\t\t\"20:00\" };\n\t\n\tpublic static final String[] month = {\"gen\",\"feb\",\"mar\",\"apr\",\"mag\",\"giu\",\"lug\",\"ago\",\"set\",\"ott\",\"nov\",\"dic\"};\n\n\t/**\n\t * \n\t */\n\tpublic static final String[] requestState = { \"effettuata\", \"rifiutata\",\n\t\t\t\"accettata\", \"eliminata\" };\n\t\n\t//Variabili da impostare all'avvio di Tomcat\n\t\n\t//Variabili per l'aspetto grafico del programma\n\tprivate static String imageHeaderPath = \"\";\n\tprivate static String imageHeaderLogoPath = \"\";\n\tprivate static String imageLeftColumn = \"\";\n\tprivate static String textFooter = \"\";\n\t//server smtp per invio e-mail\n\tprivate static String serverSmtp = \"smtp.tele2.it\";\n\t//Giorni minimi di distanza dall'esame per sottoscrivere o eliminare una prenotazione\n\tprivate static int needDayBeforeExam = 0;\n\t//Giorni massimi di distanza dall'esame per sottoscrivere una prenotazione\n\tprivate static int maxDayBeforeExam = 0;\n\t//pdf path per il percorso di memorizzazione dei file pdf\n\tprivate static String pdfPath = \"\";\n\t// upload path per il percorso di memorizzazione dei file per l'importazione dei dati\n\tprivate static String uploadPath = \"\";\n\t//Variabili per la connessione al database\n\tprivate static String driverMySql = \"com.mysql.jdbc.Driver\";\n\tprivate static String fullPathDatabase = \"jdbc:mysql://localhost:3306/smos\";\n\tprivate static String userName = \"root\";\n\tprivate static String password = \"\";\n\tprivate static int maxPoolSize = 200;\n\tprivate static int waitTimeout = 120000;\n\tprivate static int activeTimeout = 600000;\n\tprivate static int poolTimeout = 27000000;\t\n\t\n\t\n\n\t/**\n\t * Ritorna, dati un campo e una tabella, il valore massimo del campo nella\n\t * tabella.\n\t * \n\t * @param pField\n\t *            Il campo di cui vogliamo recuperare il valore massimo.\n\t * @param pTable\n\t *            La tabella in cui ricercare le informazioni richieste.\n\t * @return Ritorna il valore massimo, del campo pField, passato come\n\t *         parametro, presente nella tabella pTable, passata come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tsynchronized static public int getMaxValue(String pField, String pTable)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\n\t\tint value = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t/*\n\t\t\t * Se non sono stati forniti il campo e la tabella restituiamo un\n\t\t\t * codice di errore\n\t\t\t */\n\t\t\tif (pField.equals(\"\"))\n\t\t\t\tthrow new EntityNotFoundException();\n\t\t\tif (pTable.equals(\"\"))\n\t\t\t\tthrow new EntityNotFoundException();\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * richieste\n\t\t\t */\n\t\t\tString tSql = \"SELECT max(\" + pField + \") as new_field FROM \"\n\t\t\t\t\t+ pTable;\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tvalue = tRs.getInt(\"new_field\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException();\n\n\t\t\treturn value;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Converte una data in una stringa formattata per il database.\n\t * \n\t * @param pDate\n\t *            La data da convertire.\n\t * @return Ritorna la data formattata per il database.\n\t */\n\tstatic public String date2SQLString(java.util.Date pDate, boolean pHour) {\n\t\t\n\t\tTimeZone tz = TimeZone.getDefault();\n\t\tCalendar calendar = Calendar.getInstance(tz);\n\t\tcalendar.setTime(pDate);\n\t\t\n\t\t\n\t\tint year = calendar.get(Calendar.YEAR);\n\t\tint month = calendar.get(Calendar.MONTH) + 1;\n\t\tint day = calendar.get(Calendar.DATE);\n\t\t\n\t\tString result = year + \"-\" + month + \"-\" + day ;\n\t\t\n\t\tint hour = calendar.get(Calendar.HOUR_OF_DAY);\n\t\tint min = calendar.get(Calendar.MINUTE);\n\t\tint sec = calendar.get(Calendar.SECOND);\n\t\t\n\t\tif (pHour){\n\t\t\tresult = result + \" \" + hour + \":\" + min + \":\" + sec; \n\t\t}\n\t\t\t\t\t\t\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Controlla se la stringa passata come parametro e' null.\n\t * \n\t * @param pStr\n\t *            La stringa da controllare.\n\t * \n\t * @return <code>null</code> se la stringa e' null Altrimenti la stringa e'\n\t *         passata al metodo <code>Replace</code>\n\t * \n\t * @see #Replace\n\t */\n\tstatic public String isNull(String pStr) {\n\t\tString tTmp;\n\n\t\tif (pStr == null) \n\t\t\ttTmp = \"null\";\n\n\t\telse {\n\t\t\tpStr = ReplaceAllStrings(pStr, \"'\", \"\\\\'\");\n\t\t\tpStr = ReplaceAllStrings(pStr, \"\\\"\", \"\\\\\" + \"\\\"\");\n\t\t\ttTmp = \"'\" + pStr + \"'\";\n\t\t}\n\t\treturn tTmp;\n\t}\n\n\t/**\n\t * Controlla se un dato intero ï¿½ null.\n\t * \n\t * @param pInt\n\t *            Il dato intero da controllare.\n\t * @return Ritorna il dato in formato stringa se il dato ï¿½ diverso da zero,\n\t *         altrimenti la stringa null.\n\t */\n\tstatic public String isNull(Integer pInt) {\n\t\tString tIntString;\n\n\t\tif (pInt == null)\n\t\t\ttIntString = \"null\";\n\t\telse\n\t\t\ttIntString = pInt.toString();\n\t\treturn tIntString;\n\t}\n\n\t/**\n\t * Controlla se una data e' null.\n\t * \n\t * @param pDate\n\t *            la data da controllare.\n\t * \n\t * @return Ritorna la stringa che rappresenta la data passata in input,\n\t *         formattata per il database.\n\t */\n\tstatic public String isNull(java.util.Date pDate) {\n\n\t\treturn \"'\" + date2SQLString(pDate,false) + \"'\";\n\t}\n\n\tstatic public String clear(String pString){\n\t\tint start = 0;\n\t\tint start2 = 0;\n\t\tint end = 0;\n\t\tint end2 = 0;\n\t\tString result = \"\";\n\t\tString result2 = \"\";\n\t\t\t\n\t\twhile (end >= 0){\n\t\tend = pString.indexOf(\"'\", start);\n\t\t\n\t\tif (end >= 0){\n\t\t\n\t\t\tresult= result +pString.substring(start, end);\n\t\t\tresult = result + \"\\\\'\";\n\t\t\tstart = end+1;\n\t\t\t\n\t\t} else \n\t\t\tresult = result + pString.substring(start);\n\t\t}\n\t\t\n\t\twhile (end2 >= 0){\n\t\t\tend2 = result.indexOf(\"\\n\", start2);\n\t\t\t\n\t\t\tif (end2 >= 0){\n\t\t\t\t\n\t\t\t\tresult2= result2 +result.substring(start2, end2-1);\n\t\t\t\tresult2 = result2 + \" \";\n\t\t\t\tstart2 = end2+1;\n\t\t\t\t\n\t\t\t} else \n\t\t\t\tresult2 = result2 + result.substring(start2);\n\t\t\t}\n\t\treturn(result2);\t\n\t}\n\t\n\t/**\n\t * Converte una String in Integer.\n\t * \n\t * @param pStr\n\t *            La String da convertire.\n\t * \n\t * @return L'Integer contenuto nella String <code>0</code> se non ï¿½\n\t *         possibile la conversione.\n\t * \n\t */\n\tstatic public Integer String2Integer(String pStr) {\n\t\tInteger tInteger;\n\n\t\tif ((pStr == null) || (pStr.compareTo(\"\") == 0))\n\t\t\ttInteger = new Integer(0);\n\t\telse\n\t\t\ttry {\n\t\t\t\ttInteger = Integer.decode(pStr);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttInteger = new Integer(0);\n\t\t\t}\n\n\t\treturn tInteger;\n\t}\n\n\t/**\n\t * Sostituisce i caratteri ' e \\ con '' nella stringa passata come \n\t * parametro.\n\t * \n\t * @param pStr\n\t *            La stringa da trasformare.\n\t * \n\t * @return La tringa trasformata.\n\t */\n\tstatic public String Replace(String pStr) {\n\t\tString tRis;\n\n\t\ttRis = pStr.replaceAll(\"\\\"\", \"'\");\n\n\t\ttRis = tRis.replaceAll(\"'\", \"\\\\'\");\n\n\t\treturn tRis;\n\t}\n\n\t/**\n\t * Sostituisce il carattere ' con la stringa \" \" nella stringa passata come\n\t * parametro.\n\t * \n\t * @param pStr\n\t *            La stringa da trasformare.\n\t * \n\t * @return La tringa trasformata.\n\t */\n\tstatic public String ReplaceQuote(String pStr) {\n\t\tString tRis;\n\n\t\ttRis = pStr.replaceAll(\"'\", \" \");\n\t\treturn tRis;\n\t}\n\n\t/**\n\t * Esegue un'operazione sul database tramite una stringa SQL.\n\t * \n\t * @param pConnect\n\t *            La connessione al database.\n\t * @param pSql\n\t *            La stringa SQL.\n\t * \n\t * @return Il numero di record coinvolti nell'operazione.\n\t * \n\t * @throws SQLException\n\t */\n\tstatic public int executeOperation(Connection pConnect, String pSql)\n\t\t\tthrows SQLException {\n\t\tStatement stmt = pConnect.createStatement();\n\t\tint tResult = stmt.executeUpdate(pSql);\n\t\tstmt.close();\n\t\treturn tResult;\n\t}\n\n\t/**\n\t * Esegue una Query SQL sul database.\n\t * \n\t * @param pConnect\n\t *            La connessione al database.\n\t * @param pSql\n\t *            La stringa SQL.\n\t * \n\t * @return Il numero di record coinvolti nell'operazione.\n\t * \n\t * @throws SQLException\n\t */\n\tstatic public ResultSet queryOperation(Connection pConnect, String pSql)\n\t\t\tthrows SQLException {\n\n\t\tStatement stmt = pConnect.createStatement();\n\t\treturn stmt.executeQuery(pSql);\n\t}\n\n\t/**\n\t * Converte un dato booleano in intero.\n\t * \n\t * @param pBol\n\t *            Il valore booleano da convertire in intero.\n\t * \n\t * @return Il valore intero corrispondente al valore booleano passato come\n\t *         parametro.\n\t */\n\tstatic public int BooleanToInt(boolean pBol) {\n\t\tif (pBol == true)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn 0;\n\t}\n\n\t/**\n\t * Converte un dato intero in booleano.\n\t * \n\t * @param pInt\n\t *            Il valore intero da convertire in booleano.\n\t * \n\t * @return Il valore booleano corrispondente al valore intero passato come\n\t *         parametro.\n\t */\n\tstatic public boolean IntToBoolean(int pInt) {\n\t\tif (pInt == 1)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\t/**\n\t * Restituisce la data corrente.\n\t * \n\t * @return La data corrente.\n\t */\n\tstatic public java.util.Date today() {\n\t\tCalendar calendar = Calendar.getInstance();\n\t\tjava.util.Date creationDate = calendar.getTime();\n\t\treturn creationDate;\n\t\t// java.util.Date creationDate = new java.util.Date();\n\t\t// Timestamp timeStamp = new Timestamp(creationDate.getTime());\n\t\t// return (java.util.Date) timeStamp;\n\t}\n\n\t/**\n\t * Restituisce la data contenuta nella stringa in input.\n\t * \n\t * @param pDate\n\t *            La stringa di cui effettuare il parse in un data.\n\t * \n\t * @return La data convertita.\n\t */\n\tstatic public java.util.Date String2Date(String pDate) {\n\t\ttry {\n\t\t\tDateFormat dfDate = DateFormat.getDateInstance();\n\t\t\tjava.util.Date tDate = dfDate.parse(pDate,\n\t\t\t\t\tnew java.text.ParsePosition(0));\n\t\t\tjava.sql.Timestamp timeStamp = new java.sql.Timestamp(tDate\n\t\t\t\t\t.getTime());\n\n\t\t\treturn (java.util.Date) timeStamp;\n\t\t} catch (Exception e) {\n\t\t\ttry {\n\t\t\t\tDateFormat dfDate = DateFormat.getDateInstance(\n\t\t\t\t\t\tDateFormat.SHORT, java.util.Locale.ITALY);\n\t\t\t\tjava.util.Date tDate = dfDate.parse(pDate,\n\t\t\t\t\t\tnew java.text.ParsePosition(0));\n\t\t\t\tjava.sql.Timestamp timeStamp = new java.sql.Timestamp(tDate\n\t\t\t\t\t\t.getTime());\n\n\t\t\t\treturn (java.util.Date) timeStamp;\n\t\t\t} catch (Exception e2) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Restituisce la data in input in formato String.\n\t * \n\t * @param pDate\n\t *            La Data da convertire.\n\t * @param pHour\n\t * \n\t * @return La data convertita.\n\t */\n\tstatic public String Date2String(java.util.Date pDate, boolean pHour) {\n\t\ttry {\n\t\t\tDateFormat dfDate = DateFormat.getDateInstance(DateFormat.SHORT);\n\t\t\tDateFormat dfTime = DateFormat.getTimeInstance(DateFormat.SHORT);\n\t\t\tif (pHour)\n\t\t\t\treturn dfDate.format(pDate) + \" \" + dfTime.format(pDate);\n\t\t\telse\n\t\t\t\treturn dfDate.format(pDate);\n\t\t} catch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * @param sourceStr\n\t * @param searchFor\n\t * @param replaceWith\n\t * @return la stringa corrispondente a searchBuffer\n\t */\n\tpublic static String ReplaceAll(String sourceStr, String searchFor,\n\t\t\tString replaceWith) {\n\t\tStringBuffer searchBuffer = new StringBuffer(sourceStr);\n\t\tint hits = 0;\n\n\t\twhile (searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\tsearchFor.toUpperCase(), hits) >= 0) {\n\t\t\tint newIndex = searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\t\tsearchFor.toUpperCase(), hits);\n\t\t\tsearchBuffer.replace(newIndex, newIndex + searchFor.length(),\n\t\t\t\t\treplaceWith);\n\t\t\thits++;\n\t\t}\n\n\t\treturn searchBuffer.toString();\n\t}\n\n\t// La funzione precedente va in loop se sostituisco \"\\\" con \"\\\\\"\n\t// usiamo allora due variabile la prima viene \"consumata\" ad ogni occorrenza\n\t// del pattern\n\t/**\n\t * @param sourceStr\n\t * @param searchFor\n\t * @param replaceWith\n\t * @return newStringBuffer\n\t */\n\tpublic static String ReplaceAllStrings(String sourceStr, String searchFor,\n\t\t\tString replaceWith) {\n\t\tStringBuffer searchBuffer = new StringBuffer(sourceStr);\n\t\tStringBuffer newStringBuffer = new StringBuffer(\"\");\n\n\t\twhile (searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\tsearchFor.toUpperCase()) >= 0) {\n\t\t\tint newIndex = searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\t\tsearchFor.toUpperCase());\n\t\t\tnewStringBuffer.append(searchBuffer.substring(0, newIndex));\n\t\t\tnewStringBuffer.append(replaceWith);\n\t\t\tsearchBuffer = new StringBuffer(searchBuffer.substring(newIndex\n\t\t\t\t\t+ searchFor.length(), searchBuffer.length()));\n\t\t}\n\n\t\tnewStringBuffer.append(searchBuffer);\n\t\treturn newStringBuffer.toString();\n\t}\n\n\t/**\n\t * @param sourceStr\n\t * @param removeStr\n\t */\n\tpublic static void RemoveAll(String sourceStr, String removeStr) {\n\t\tint nextOccurence;\n\n\t\twhile (sourceStr.toString().toUpperCase().indexOf(\n\t\t\t\tremoveStr.toUpperCase()) >= 0) {\n\t\t\tnextOccurence = sourceStr.toString().toUpperCase().indexOf(\n\t\t\t\t\tremoveStr.toUpperCase());\n\t\t\tsourceStr = sourceStr.substring(0, nextOccurence)\n\t\t\t\t\t+ sourceStr.substring(nextOccurence + removeStr.length(),\n\t\t\t\t\t\t\tsourceStr.length());\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Calcola la distanza in giorni tra 2 date passate.\n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tpublic static int daysBetween(Date today, Date reservationDate){\n\t\tint daysBetween = 0;\n\t\tlong millisecBetween = 0;\n\t\tfinal int millisecInADay = 86400000;\n\t\t\n\t\tGregorianCalendar firstDate = new GregorianCalendar();\n\t\tGregorianCalendar secondDate = new GregorianCalendar();\n\t\t\n\t\tfirstDate.set(today.getYear()+1900, today.getMonth(), today.getDate());\n\t\tsecondDate.set(reservationDate.getYear()+1900, reservationDate.getMonth(), reservationDate.getDate());\n\t\t\n\t\tmillisecBetween = secondDate.getTimeInMillis() - firstDate.getTimeInMillis();\n\t\tdaysBetween = (int) (millisecBetween/millisecInADay);\n\t\t\n\t\treturn (daysBetween);\n\t}\n\n\t/**\n\t * @return Il percorso impostato per i pdf.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getPdfPath() {\n\t\treturn Utility.pdfPath;\n\t}\n\n\t/**\n\t * @param pPdfPath Il path da settare per i pdf.\n\t */\n\tpublic static void setPdfPath(String pPdfPath) {\n\t\tUtility.pdfPath = pPdfPath;\n\t}\n\t\n\t/**\n\t * @return Il percorso impostato per i file utilizzati \n\t * durante l'importazione dei dati.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getUploadPath() {\n\t\treturn Utility.uploadPath;\n\t}\n\n\t/**\n\t * @param pUploadPath Il path da settare per i file utilizzati \n\t * durante l'importazione dei dati.\n\t */\n\tpublic static void setUploadPath(String pUploadPath) {\n\t\tUtility.uploadPath = pUploadPath;\n\t}\n\n\t/**\n\t * @return Il server smtp da utilizzare per l'invio\n\t * \t\t   automatizzato delle e-mail.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getServerSmtp() {\n\t\treturn Utility.serverSmtp;\n\t}\n\t\n\t/**\n\t * @param pServerSmtp il server smtp da settare.\n\t */\n\tpublic static void setServerSmtp(String pServerSmtp) {\n\t\tUtility.serverSmtp = pServerSmtp;\n\t}\n\n\t/**\n\t * @return the activeTimeout\n\t */\n\tpublic static int getActiveTimeout() {\n\t\treturn Utility.activeTimeout;\n\t}\n\n\t/**\n\t * @param activeTimeout the activeTimeout to set\n\t */\n\tpublic static void setActiveTimeout(int pActiveTimeout) {\n\t\tUtility.activeTimeout = pActiveTimeout;\n\t}\n\n\t/**\n\t * @return the driverMySql\n\t */\n\tpublic static String getDriverMySql() {\n\t\treturn Utility.driverMySql;\n\t}\n\n\t/**\n\t * @param driverMySql the driverMySql to set\n\t */\n\tpublic static void setDriverMySql(String pDriverMySql) {\n\t\tUtility.driverMySql = pDriverMySql;\n\t}\n\n\t/**\n\t * @return the fullPathDatabase\n\t */\n\tpublic static String getFullPathDatabase() {\n\t\treturn Utility.fullPathDatabase;\n\t}\n\n\t/**\n\t * @param fullPathDatabase the fullPathDatabase to set\n\t */\n\tpublic static void setFullPathDatabase(String pFullPathDatabase) {\n\t\tUtility.fullPathDatabase = pFullPathDatabase;\n\t}\n\n\t/**\n\t * @return the maxPoolSize\n\t */\n\tpublic static int getMaxPoolSize() {\n\t\treturn Utility.maxPoolSize;\n\t}\n\n\t/**\n\t * @param maxPoolSize the maxPoolSize to set\n\t */\n\tpublic static void setMaxPoolSize(int pMaxPoolSize) {\n\t\tUtility.maxPoolSize = pMaxPoolSize;\n\t}\n\n\t/**\n\t * @return the password\n\t */\n\tpublic static String getPassword() {\n\t\treturn Utility.password;\n\t}\n\n\t/**\n\t * @param password the password to set\n\t */\n\tpublic static void setPassword(String pPassword) {\n\t\tUtility.password = pPassword;\n\t}\n\n\n\t/**\n\t * @return the poolTimeout\n\t */\n\tpublic static int getPoolTimeout() {\n\t\treturn Utility.poolTimeout;\n\t}\n\n\t/**\n\t * @param poolTimeout the poolTimeout to set\n\t */\n\tpublic static void setPoolTimeout(int pPoolTimeout) {\n\t\tUtility.poolTimeout = pPoolTimeout;\n\t}\n\n\t/**\n\t * @return the userName\n\t */\n\tpublic static String getUserName() {\n\t\treturn Utility.userName;\n\t}\n\n\t/**\n\t * @param userName the userName to set\n\t */\n\tpublic static void setUserName(String pUserName) {\n\t\tUtility.userName = pUserName;\n\t}\n\n\t/**\n\t * @return the waitTimeout\n\t */\n\tpublic static int getWaitTimeout() {\n\t\treturn Utility.waitTimeout;\n\t}\n\n\t/**\n\t * @param waitTimeout the waitTimeout to set\n\t */\n\tpublic static void setWaitTimeout(int pWaitTimeout) {\n\t\tUtility.waitTimeout = pWaitTimeout;\n\t}\n\n\t/**\n\t * @return the imageHeaderPath\n\t */\n\tpublic static String getImageHeaderPath() {\n\t\treturn Utility.imageHeaderPath;\n\t}\n\n\t/**\n\t * @param imageHeaderPath the imageHeaderPath to set\n\t */\n\tpublic static void setImageHeaderPath(String pImageHeaderPath) {\n\t\tUtility.imageHeaderPath = pImageHeaderPath;\n\t}\n\n\t/**\n\t * @return the textFooter\n\t */\n\tpublic static String getTextFooter() {\n\t\treturn Utility.textFooter;\n\t}\n\n\t/**\n\t * @param textFooter the textFooter to set\n\t */\n\tpublic static void setTextFooter(String pTextFooter) {\n\t\tUtility.textFooter = pTextFooter;\n\t}\n\n\t/**\n\t * @return the imageLeftColumn\n\t */\n\tpublic static String getImageLeftColumn() {\n\t\treturn Utility.imageLeftColumn;\n\t}\n\n\t/**\n\t * @param imageLeftColumn the imageLeftColumn to set\n\t */\n\tpublic static void setImageLeftColumn(String pImageLeftColumn) {\n\t\tUtility.imageLeftColumn = pImageLeftColumn;\n\t}\n\t\n\tpublic static String getImageLogoHeaderPath() {\n\t\treturn Utility.imageHeaderLogoPath;\n\t}\n\n\tpublic static void setImageLogoHeaderPath(String pImageHeaderLogoPath) {\n\t\tUtility.imageHeaderLogoPath = pImageHeaderLogoPath;\n\t}\n\n\t/**\n\t * @return the needDayBeforeExam\n\t */\n\tpublic static int getNeedDayBeforeExam() {\n\t\treturn Utility.needDayBeforeExam;\n\t}\n\n\t/**\n\t * @param needDayBeforeExam the needDayBeforeExam to set\n\t */\n\tpublic static void setNeedDayBeforeExam(int pNeedDayBeforeExam) {\n\t\tUtility.needDayBeforeExam = pNeedDayBeforeExam;\n\t}\n\n\t/**\n\t * @return the maxDayBeforeExam\n\t */\n\tpublic static int getMaxDayBeforeExam() {\n\t\treturn Utility.maxDayBeforeExam;\n\t}\n\n\t/**\n\t * @param maxDayBeforeExam the maxDayBeforeExam to set\n\t */\n\tpublic static void setMaxDayBeforeExam(int pMaxDayBeforeExam) {\n\t\tUtility.maxDayBeforeExam = pMaxDayBeforeExam;\n\t}\n\t\n\tpublic static String getActualDate() {\n\t\tGregorianCalendar gc = new GregorianCalendar();\n\n\t\tString date=\"\";\n\t\tint year=gc.get(GregorianCalendar.YEAR);\n\t\t\n\t\tint month=gc.get(GregorianCalendar.MONTH)+1;\n\t\tString months=\"\";\n\t\tif(month<10){\n\t\t\tmonths=\"0\"+month;\n\t\t}else{\n\t\t\tmonths= months+month;\n\t\t}\n\t\t\n\t\tint day=gc.get(GregorianCalendar.DAY_OF_MONTH);\n\t\tString days=\"\";\n\t\tif(day<10){\n\t\t\tdays=\"0\"+day;\n\t\t}else{\n\t\t\tdays= days+day;\n\t\t}\n\t\t\n\t\tdate= date + days+\"/\"+months+\"/\"+year;\n\t\n\t\treturn date;\n\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28875"},"name":"MandatoryFieldException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando si tenta\n  * di inserire un'entit senza specificare un campo obbligatorio\n  */\npublic class MandatoryFieldException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -4818814194670133466L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic MandatoryFieldException() {\n\t\tsuper(\"Mandatory Field Missing!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic MandatoryFieldException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28876"},"name":"Role.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880d"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28813"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880e"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28821"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.bean;\n\n\nimport java.io.Serializable;\n/**\n *  Classe utilizzata per modellare il ruolo di un utente.\n *\n * @author Bavota Gabriele, Carnevale Filomena.\n * \n */\npublic class Role implements Serializable {\n\t\n\tprivate static final long serialVersionUID = 8833734317107515203L;\n\t\n\t\n\t\n\t/**\n\t * L'id del ruolo amministratore\n\t */\n\tpublic static final int ADMIN = 1;\n\t\n\t/**\n\t * L'id del ruolo di docente\n\t */\n\tpublic static final int TEACHER = 2;\n\t\n\t/**\n\t * L'id del ruolo studente\n\t */\n\t\n\tpublic static final int STUDENT\t = 3;\n\t\n\t/**\n\t * L'id del ruolo geniotore\n\t */\n\t\n\tpublic static final int PARENT = 4;\n\t\n\t/**\n\t * L'id del ruolo ata\n\t */\n\t\n\tpublic static final int ATA = 5;\n\t\n\t/**\n\t * L'id del ruolo direzione\n\t */\n\t\n\tpublic static final int DIRECTOR = 6;\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28877"},"name":"ConnectionPoolDataSource.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * ConnectionPoolDataSource\n *\n */\n\npackage smos.storage.connectionManagement;\n\nimport smos.storage.connectionManagement.exception.NotImplementedYetException;\n\nimport java.io.PrintWriter;\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport javax.sql.DataSource;\n\n/**\n * Realizzazione del pool di connessioni tramite l'implementazione\n * dell'interfaccia java.sql.DataSource. Il pool controlla periodicamente le\n * connessioni attive e quelle che sono pool, ossia quelle rilasciate ma ancora\n * utilizzabili (presenti cioe' in memoria). Il tempo di rilascio delle\n * connessioni attive e di quelle pool ï¿½ rappresentato da due parametri presenti\n * all'interno della classe e che sono connectionPoolCloseTimeout e\n * inactiveMaxTimeout; tali valori cosi come tutti gli altri inerenti al pool\n * hanno un loro valore di default, parametrizzabile tramite il file di\n * properties connection.properties\n */\n\npublic class ConnectionPoolDataSource implements DataSource {\n\n    /**\n     * Thread inside della classe ConnectionPoolDataSource che stabilisce ogni\n     * connectionPoolCloseTimeout millisecondi il rilascio delle connessioni\n     * pool.\n     */\n    private class ConnectionCloser extends Thread {\n\n        private long connectionActionTimestamp = 0;\n\n        private int connectionPoolCloseTimeout = 300000;\n\n        private long timeStamp = 0;\n\n        /**\n         * Costruttore che setta il tempo di rilascio delle connessioni pool\n         * \n         * @author Di Giorgio Domenico, Cris Malinconico\n         * @param pTime\n         *            intervallo di tempo entro cui il pool svuota la lista\n         *            delle connessioni pool.\n         */\n\t\tprivate ConnectionCloser(int pTime) {\n            setDaemon(true);\n            setName(\"ConnectionPoolCloser\");\n            if (pTime > 0)\n            \tthis.connectionPoolCloseTimeout = pTime;\n        }\n\n        /**\n         * Ogni volta che una connessione genera un evento con un'invocazione di\n         * getConnection() o release() il timestamp viene settato al valore\n         * temporale corrente tramite questo metodo.\n         */\n\t\tpublic void connectionEvent() {\n\t\t\tthis.connectionActionTimestamp = System.currentTimeMillis();\n        }\n\n        /**\n         * Controlla ogni connectionPoolCloseTimeout millisecondi se le\n         * connessioni pool possono essere chiuse liberando in tal caso memoria.\n         */\n\t\tpublic void run() {\n            boolean working = true;\n            while (working) {\n                try {\n                \tthis.timeStamp = System.currentTimeMillis();\n                    Thread.sleep(this.connectionPoolCloseTimeout);\n                    if (this.connectionActionTimestamp < this.timeStamp) {\n                        closeAllConnections(ConnectionPoolDataSource.this.pool);\n                    }\n                } catch (InterruptedException e) {\n                    working = false;\n                    e.printStackTrace();\n                } catch (SQLException e) {\n                    working = false;\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private List<SMOSConnection> active = new Vector<SMOSConnection>();\n\n    private Properties config = new Properties();\n\n    private ConnectionCloser connectionCloser;\n\n    private Driver driver;\n\n    private String fullConnectionString;\n\n    private long inactiveMaxTimeout = 20000;\n\n    private int maxPoolSize;\n\n    private List<Connection> pool = new Vector<Connection>();\n\n    /**\n     * Crea una nuova istanza del pool di connessioni.\n     * \n     * @param pJdbcDriverName\n     *            nome del driver jdbc\n     * @param pFullConnectionString\n     *            stringa di connessione con il database\n     * @param pUser\n     *            nome utente (amministratore del database)\n     * @param pPassword\n     *            password amministratore\n     * @param pMaxPoolSize\n     *            massimo numero di connessioni attive nel pool, deve essere\n     *            maggiore di 0\n     * @param pPoolTime\n     *            intervallo di tempo entro il quale il pool sarï¿½ svuotato ogni\n     *            volta delle sue connessioni pool (in ms).\n     * @throws ClassNotFoundException\n     *             se il driver jdbc non puï¿½ essere trovato\n     * @throws SQLException\n     *             se occorre un problema durante la connessione al database\n     * @throws IllegalArgumentException\n     *             se i parametri forniti in input non sono validi\n     */\n\n    \n\tpublic ConnectionPoolDataSource(String pJdbcDriverName,\n            String pFullConnectionString, String pUser, String pPassword,\n            int pMaxPoolSize, int pPoolTime) throws ClassNotFoundException,\n            SQLException {\n\n        if (pMaxPoolSize < 1) {\n            throw new IllegalArgumentException(\n                    \"maxPoolSize deve essere >0 ma ï¿½: \" + pMaxPoolSize);\n        }\n        if (pFullConnectionString == null) {\n            throw new IllegalArgumentException(\"fullConnectionString \"\n                    + \"ha valore Null\");\n        }\n        if (pUser == null) {\n            throw new IllegalArgumentException(\"il nome utente ha valore Null\");\n        }\n        this.maxPoolSize = pMaxPoolSize;\n        this.fullConnectionString = pFullConnectionString;\n        this.config.put(\"user\", pUser);\n        if (pPassword != null) {\n            this.config.put(\"password\", pPassword);\n        }\n        Class.forName(pJdbcDriverName);\n        this.driver = DriverManager.getDriver(pFullConnectionString);\n        this.connectionCloser = new ConnectionCloser(pPoolTime);\n        this.connectionCloser.start();\n    }\n\n    /**\n     * Restituisce la dimensione della lista delle connessioni attive.\n     * \n     * @return la dimensione della lista delle connessioni attualmente attive.\n     */\n\tpublic int activeSize() {\n        return this.active.size();\n    }\n\n    /**\n     * Svuota il pool di connessioni da quelle attive che non hanno piï¿½ eseguito\n     * operazioni per inactiveMaxTimeout millisecondi.\n     * \n     */\n    protected void clearActive() {\n        long temp = 0;\n        long TIME = System.currentTimeMillis();\n        SMOSConnection adc = null;\n\n        for (int count = 0; count < this.active.size(); count++) {\n            adc = (SMOSConnection) this.active.get(count);\n            temp = TIME - adc.getLastTime();\n            if (temp >= this.inactiveMaxTimeout) {\n                this.release(adc.getConnection());\n            }\n        }\n    }\n\n    /**\n     * Chiude tutte le connessioni del pool sia quelle attive e sia quelle che\n     * sono pool.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @throws SQLException\n     */\n    public synchronized void closeAllConnections() throws SQLException {\n        closeAllConnections(this.pool);\n        closeAllConnections(this.active);\n    }\n\n    /**\n     * Chiude tutte le connessioni indicate nella lista connection.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @param pConnections\n     *            la lista delle connesioni che devono essere chiuse.\n     * @throws SQLException\n     *             qualora sia impossibile chiudere una connessione.\n     */\n    private synchronized void closeAllConnections(List pConnections)\n            throws SQLException {\n\n        while (pConnections.size() > 0) {\n            ConnectionWrapper conn = (ConnectionWrapper) pConnections.remove(0);\n            conn.closeWrappedConnection();\n        }\n    }\n\n    /**\n     * Chiude tutte le connessioni del pool che sono nella lista pool.\n     * \n     * @throws SQLException\n     *             qualora sia impossibile chiudere una connessione.\n     */\n    public synchronized void closeAllPooledConnections() throws SQLException {\n        closeAllConnections(this.pool);\n    }\n\n    /**\n     * Metodo utilizzato da getConnection() per creare una nuova connessione\n     * qualora nella lista delle pool non siano presenti.\n     * \n     * @return una nuova connessione al DataBase.\n     */\n    private synchronized Connection createNewConnection() {\n        Connection rawConn = null;\n        try {\n            rawConn = this.driver.connect(this.fullConnectionString, this.config);\n            Connection conn = new ConnectionWrapper(rawConn, this);\n            SMOSConnection ac = new SMOSConnection();\n            ac.setConnection(conn);\n            ac.setLastTime(System.currentTimeMillis());\n            this.active.add(ac);\n            return conn;\n        } catch (SQLException e) {\n            System.out.println(\"Creazione della connessione fallita \"\n                    + \"in ConnectionPoolDataSource:\" + e);\n            return null;\n        }\n    }\n\n    /**\n     * Restituisce una connessione se il pool non ï¿½ pieno, il controllo avviene\n     * prima nella lista delle connessioni pool per evitare delle creazioni\n     * inutili altrimenti una nuova connessione sarï¿½ creata.\n     * \n     * @return la connessione al database qualora fosse possibile altrimenti\n     *         un'eccezione viene generata\n     * @see javax.sql.DataSource getConnection()\n     * @throws SQLException\n     *             Se un problema occorre durante la connessione al database\n     *             incluso il fatto che il limite massimo delle connessioni\n     *             attive venga raggiunto.\n     */\n    public synchronized Connection getConnection() throws SQLException {\n\n        Connection connection = getPooledConnection(0);\n\n        if (connection == null) {\n            if (this.active.size() >= this.maxPoolSize) {\n                throw new SQLException(\"Connection pool limit of \"\n                        + this.maxPoolSize + \" exceeded\");\n            } else {\n                connection = createNewConnection();\n            }\n        }\n        this.connectionCloser.connectionEvent();\n        //System.out.println(\"GET CONNECTION: \" + active.size() + \"/\" + pool.size());\n        return connection;\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg1 \n     * @param pArg2 \n     * @return Connection\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public Connection getConnection(String pArg1, String pArg2)\n            throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @return int\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public int getLoginTimeout() throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @return PrintWriter\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public PrintWriter getLogWriter() throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Restituisce il numero massimo di connessioni attive\n     * \n     * @return il numero massimo di connessioni attive.\n     */\n\n    public int getMaxPoolSize() {\n        return this.maxPoolSize;\n    }\n\n    /**\n     * Metodo utilizzato da getConnection() per stabilire se nella lista delle\n     * connessioni pool ve ne sia qualcuna da poter riutilizzare.\n     * \n     * @param pPoolIndex\n     *            indice della lista delle connessioni pool (sempre 0).\n     * @return una connesssione dalla lista di quelle pool qualora ne esista\n     *         una.\n     */\n    private synchronized Connection getPooledConnection(int pPoolIndex) {\n        SMOSConnection ac = new SMOSConnection();\n        Connection connection = null;\n        if (this.pool.size() > 0) {\n            connection = (Connection) this.pool.remove(pPoolIndex);\n            ac.setConnection(connection);\n            ac.setLastTime(System.currentTimeMillis());\n            this.active.add(ac);\n        }\n        return ac.getConnection();\n    }\n\n    /**\n     * Restituisce la dimensione della lista delle connessioni pool\n     * \n     * @return la dimensione della lista delle connessioni pool.\n     */\n    public int poolSize() {\n        return this.pool.size();\n    }\n\n    /**\n     * Rilascia una connessione, eliminandola da quelle attive ed inserendola in\n     * quelle pool per poter essere successivamente riutilizzata.\n     * \n     * @param pConnection\n     *            La connessione che deve essere ritornata al pool.\n     */\n    public synchronized void release(Connection pConnection) {\n        boolean exists = false;\n        int activeIndex = 0;\n\n        if (pConnection != null) {\n            SMOSConnection adc = null;\n            while ((activeIndex < this.active.size()) && (!exists)) {\n                adc = (SMOSConnection) this.active.get(activeIndex);\n                if (adc.equals(pConnection)) {\n                \tthis.active.remove(adc);\n                \tthis.pool.add(adc.getConnection());\n                    exists = true;\n                }\n                activeIndex++;\n            }\n            this.connectionCloser.connectionEvent();\n            //System.out.println(\"RELEASE CONNECTION: \" + active.size() + \"/\" + pool.size());\n        }\n    }\n\n    /**\n     * Setta il tempo di vita delle connessioni attive in millisecondi.\n     * \n     * @param pTimeOut\n     *            tempo di vita della connessione.\n     */\n\n    public void setActivedTimeout(long pTimeOut) {\n        if (pTimeOut > 0) {\n        \tthis.inactiveMaxTimeout = pTimeOut;\n        }\n    }\n\n    /**\n     * Riazzera il tempo di vita della connessione dovutocall'esecuzione di\n     * un'operazione.Da questo momento la connessione potrï¿½ essere attiva senza\n     * eseguire alcuna operazione per altri inactiveMaxTimeout millisecondi.\n     * \n     * @param pConnection\n     *            la connessione che ha eseguito un'operazione e quindi puï¿½\n     *            rimanere attiva.\n     */\n\n    void setLastTime(Connection pConnection) {\n        boolean exists = false;\n        int count = 0;\n        SMOSConnection adc = null;\n\n        while ((count < this.active.size()) && (!exists)) {\n            adc = (SMOSConnection) this.active.get(count);\n            count++;\n            if (adc.equals(pConnection)) {\n                adc.setLastTime(System.currentTimeMillis());\n                exists = true;\n            }\n        }\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg0 \n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n    public void setLoginTimeout(int pArg0) throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg0 \n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n    public void setLogWriter(PrintWriter pArg0) throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Converte un oggetto della classe ConnectionPoolDataSource in String\n     * \n     * @return la rappresentazione nel tipo String del pool di connessioni.\n     */\n\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n\n        buf.append(\"[\");\n        buf.append(\"maxPoolSize=\").append(this.maxPoolSize);\n        buf.append(\", activeSize=\").append(activeSize());\n        buf.append(\", poolSize=\").append(poolSize());\n        buf.append(\", fullConnectionString=\").append(this.fullConnectionString);\n        buf.append(\"]\");\n        return (buf.toString());\n    }\n\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28878"},"name":"ServletShowNoteList.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n\npublic class ServletShowNoteList extends HttpServlet {\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 3700685645748508615L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showNoteList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\tCollection<Note> notes= null;\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tint idUser =Integer.valueOf(pRequest.getParameter(\"student\")) ;\n\t\t\tUser student = managerUser.getUserById(idUser); \t\n\t\t\t\n\t\t\n\t\t\tint year= ((Classroom) session.getAttribute(\"classroom\")).getAcademicYear();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tnotes= managerRegister.getNoteByIDUserAndAcademicYear(idUser, year);\n\t\t\t\n\t\t\tsession.setAttribute(\"noteList\", notes);\n\t\t\tsession.setAttribute(\"student\", student);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\t\n\t\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28879"},"name":"ManagerVotes.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28808"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28803"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28802"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ee"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28804"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287fd"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28800"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f5"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ed"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f7"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f3"}]],"contents":"package smos.storage;\n\nimport smos.bean.Teaching;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n * \n * Classe manager dei voti.\n * \n * @author Luigi Colangelo\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\n\npublic class ManagerVotes {\n\tprivate static ManagerVotes instance;\n\n\t/**\n\t * Il nome della tabella dei voti.\n\t */\n\tpublic static final String TABLE_VOTES = \"votes\";\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic ManagerVotes() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Ritorna la sola istanza del voto esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerVotes getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new ManagerVotes();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Verifica l'esistenza di voto nel database.\n\t * \n\t * @param pVotes\n\t *            il voto da controllare.\n\t * @return Ritorna true se esiste il voto passato come parametro,\n\t *         false altrimenti.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t */\n\tpublic synchronized boolean exists(Votes pVotes)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException {\n\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pVotes.getId_votes() == 0)\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'id.\");\n\t\ttry {\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pVotes.getId_votes());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Inserisce un nuovo voto nella tabella Votes.\n\t * \n\t * @param pVotes\n\t *            il voto da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Votes pVotes)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException,\n\t\t\tEntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t\n\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t// Prepariamo la stringa Sql\n\t\t\tString sql = \"INSERT INTO \" + ManagerVotes.TABLE_VOTES\n\t\t\t        + \" (id_user, id_teaching, written, oral, laboratory, AccademicYear, turn) \"\n\t\t\t\t\t+ \"VALUES (\"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_user())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTeaching()) \n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getWritten())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getOral())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getLaboratory())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getAccademicYear())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTurn())+ \" )\";\n\n\t\t\tUtility.executeOperation(connect, sql);\n\n\t\t\tpVotes.setId_votes(Utility.getMaxValue(\"id_votes\",\n\t\t\t\t\tManagerVotes.TABLE_VOTES));\n\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna un voto presente nella tabella votes.\n\t * \n\t * @param pVotes\n\t *            Un voto da modificare\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update(Votes pVotes)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\tif (pVotes.getId_votes() <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\tif (pVotes.getId_user() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'user del voto\");\n\t\t\tif (pVotes.getTeaching() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'insegnamento del voto\");\n\t\t\tif (pVotes.getAccademicYear() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pVotes.getTurn() < 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il semestre \");\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"UPDATE \" + ManagerVotes.TABLE_VOTES + \" SET\"\n\t\t\t\t\t+ \" id_user = \" + Utility.isNull(pVotes.getId_user())+\",\"+\" id_teaching= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTeaching())+\",\"+\" written= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getWritten())+\",\"+\" oral= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getOral())+\",\"+\" laboratory= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getLaboratory())+\",\"+\" accademicYear= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getAccademicYear())+\",\"+\" turn=\"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTurn())\n\t\t\t\t\t+ \" WHERE id_votes = \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_votes());\n\n\t\t\t// effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Verifica se uno studente passato come parametro ha un voto assegnato nell'insegnamento passato\n\t * come parametro nell'anno passato come parametro e nel quadrimestre passato come parametro\n\t * \n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @param pUserListItem\n\t *            Lo studente da controllare\n\t * \n\t * @return Ritorna l'id del voto -1 altrimenti\n\t * \n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized int getIdVotes(Teaching pTeaching, int academicYear, int turn, UserListItem pUser)\n\t\t\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\t\t\tInvalidValueException {\n\t\tConnection connect = null;\n\t\tint result = -1;\n\t\tVotes v = null;\n\t\tif (pTeaching.getId() <= 0)\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\t\tif (pUser.getId() <=0 )\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'utente\");\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Preparimao la stringa sql\n\t\t\tString sql = \"SELECT * FROM \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".AccademicYear= \"\n\t\t\t\t\t+ Utility.isNull(academicYear)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".turn= \"\n\t\t\t\t\t+ Utility.isNull(turn)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".id_user= \"\n\t\t\t\t\t+ Utility.isNull(pUser.getId());\n\t\t\t// Inviamo la Query al database\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\tif (pRs.next()){\n\t\t\t\tv = this.loadRecordFromRs(pRs);\n\t\t\t\tresult =v.getId_votes();\n\t\t\t\t\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\t// rilasciamo le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\n\t\t}\n\t}\n\n\t/**\n\t * Elimina un voto dalla tabella votes.\n\t * \n\t * @param pVotes\n\t *            Il voto da eliminare.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t * \n\t */\n\tpublic synchronized void delete(Votes pVotes)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// ManagerTeaching.getInstance().teachingOnDeleteCascade(pTeaching);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"DELETE FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_votes());\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento corrispondente all'id del voto passato come\n\t * parametro.\n\t * \n\t * @param pId\n\t *            L'id del voto.\n\t * @return Ritorna l'id dell' insegnamento.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t/**\n\t * Ritorna l'insegnamento corrispondente all'id passato come parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna l'insegnamento associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Votes getVotesById(int pId)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tInvalidValueException {\n\t\tVotes result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pId);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized String getTeachingIdByVotesId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_teaching FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t        \n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pId);\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getString(\"id_teaching\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Ritorna l'insieme di tutti i voti presenti nel database.\n\t * \n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t */\n\tpublic synchronized Collection<Votes> getVotes()\n\t\t\tthrows ConnectionException, SQLException, InvalidValueException,\n\t\t\tEntityNotFoundException {\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" ORDER BY id_votes\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ritorna l'insieme dei voti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Votes> getVotesByUserId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".* FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t    + \" WHERE (\"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \")\" + \" ORDER BY id_user\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme dei voti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Votes> getVotesByUserIdYearTurn(int pId,int pYear, int pTurn)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".* FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t    + \" WHERE (\"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId)+\" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".accademicYear = \"\n\t\t\t\t\t+ Utility.isNull(pYear)+\" AND \" \n\t\t\t\t\t+ManagerVotes.TABLE_VOTES + \".turn = \"\n\t\t\t\t\t+ Utility.isNull(pTurn)+ \")\" + \" ORDER BY id_user\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized void deleteVotesByUserIdYearTurn(int pId,int pYear, int pTurn)\n\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\tInvalidValueException {\n\nConnection connect = null;\n\nif (pId <= 0)\n\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\ntry {\n\t// Prepariamo la stringa SQL\n\tString sql = \"DELETE \"+ ManagerVotes.TABLE_VOTES+\" FROM \" + ManagerVotes.TABLE_VOTES\n\t\t    + \" WHERE (\"\n\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user=\"\n\t\t\t+ Utility.isNull(pId)+\" AND \"\n\t\t\t+ ManagerVotes.TABLE_VOTES + \".AccademicYear=\"\n\t\t\t+ Utility.isNull(pYear)+\" AND \" \n\t\t\t+ManagerVotes.TABLE_VOTES + \".turn=\"\n\t\t\t+ Utility.isNull(pTurn)+ \")\";\n\n\t// Otteniamo una Connessione al DataBase\n\tconnect = DBConnection.getConnection();\n\tif (connect == null)\n\t\tthrow new ConnectionException();\n\n\t// Inviamo la Query al DataBase\n\t Utility.executeOperation(connect, sql);\n     \n} finally {\n\t// rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\t\n\t\n\t/**\n\t * Consente la lettura di un record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna il voto letto.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Votes loadRecordFromRs(ResultSet pRs) throws SQLException,\n\t\t\tInvalidValueException {\n\t\tVotes votes = new Votes();\n\t\tvotes.setId_votes(pRs.getInt((\"id_votes\")));\n\t\tvotes.setId_user(pRs.getInt(\"id_user\"));\n\t\tvotes.setTeaching(pRs.getInt(\"id_teaching\"));\n\t\tvotes.setWritten(pRs.getInt(\"written\"));\n\t\tvotes.setOral(pRs.getInt(\"oral\"));\n\t\tvotes.setLaboratory(pRs.getInt(\"laboratory\"));\n\t\tvotes.setAccademicYear(pRs.getInt(\"AccademicYear\"));\n\t\tvotes.setTurn(pRs.getInt(\"turn\"));\n\n\t\treturn votes;\n\t}\n\n\t/**\n\t * Consente la lettura dei record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna la collection di insegnamenti letti.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Votes> loadRecordsFromRs(ResultSet pRs)\n\t\t\tthrows SQLException, InvalidValueException {\n\t\tCollection<Votes> result = new Vector<Votes>();\n\t\tdo {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2887a"},"name":"ServletDeleteAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet utilizzata per cancellare un indirizzo dal database\n * \n * @author Vecchione Giuseppe\n */\npublic class ServletDeleteAddress extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -7383336226678925533L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString errorMessage=\"\";\n\t\tString gotoPage=\"./showAddressList\";\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tHttpSession session= pRequest.getSession();\n\t\tUser loggedUser= (User)session.getAttribute(\"loggedUser\");\n\t\tAddress address= null;\n\t\ttry {\n\t\t\t\tif(loggedUser==null){\t\t\n\t\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\t\terrorMessage= \"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\taddress= (Address)session.getAttribute(\"address\");\n\t\t\t\tmanagerAddress.delete(address);\n\t\t\t\t\n\t\t} \t  catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException SQLException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tSQLException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tmandatoryFieldException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t}\n\t\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t}\n\t\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2887b"},"name":"Report.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.bean;\n\nimport java.util.ArrayList;\n\nimport smos.exception.InvalidValueException;\n\n/**\n * \n * Classe utilizzata per modellare una pagella.\n * \n * @author Luigi Colangelo \n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class Report {\n\tpublic ArrayList<Votes> pagella; \n\t\n\t/**\n\t * Il costruttore della classe\n\t */\n\tpublic Report(){\n\t\tpagella=new ArrayList<Votes>();\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto dall'indice nell'array dato in input\n\t * @param pInd indice del voto nell'array\n\t * @return il voto dell'indice dato\n\t * @throws InvalidValueException\n\t */\n\tpublic Votes getVotes(int pInd) throws InvalidValueException{\n\t\tif(pInd<0 || pInd>=pagella.size())throw new InvalidValueException(\"indice non valido!\");\n\t\treturn (pagella.get(pInd));\n\t}\n\t\n\t/**\n\t * Metodo che aggiunge un voto all'array.\n\t * @param pVotes il voto da aggiungere\n\t * @throws InvalidValueException \n\t */\n\tpublic void addVotes(Votes pVotes) throws InvalidValueException{\n\t\tif(pVotes==null)throw new InvalidValueException(\"voto non valido!\");\n\t\telse pagella.add(pVotes);\n\t}\n\t\n\t/**\n\t * Metodo che elimina un voto dall'array\n\t * @param pId l'indice del voto da eliminare dall'array.\n\t * @throws InvalidValueException \n\t */\n\tpublic void remove(int pId) throws InvalidValueException{\n\t\tif(pId<0 || pId>=pagella.size())throw new InvalidValueException(\"indice non valido!\");\n\t\tpagella.remove(pId);\n\t}\n\t\n\t\n\tpublic String ToString(){\n\t\tString pag=\"\";\n\t\tfor(Votes e: pagella){\n\t\t\tpag=pag+\"\\n\"+e.toString();\n\t\t}\n\treturn pag;\n\t}\n    \n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2887c"},"name":"DuplicatedEntityException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando si \n  * tenta di inserire un'entità già presente nel database.\n  */\npublic class DuplicatedEntityException extends Exception {\n\t\n\tprivate static final long serialVersionUID = 4858261134352455533L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic DuplicatedEntityException() {\n\t\tsuper(\"Duplicate Key into the Repository!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DuplicatedEntityException (String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2887d"},"name":"ServletUpdateUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un utente.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletUpdateUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1316473033146481065L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tuser.setFirstName((pRequest.getParameter(\"firstName\")));\n\t\t\tuser.setLastName((pRequest.getParameter(\"lastName\")));\n\t\t\tuser.setCell((pRequest.getParameter(\"cell\")));\n\t\t\t/*\n\t\t\t * verifichiamo che la login sia unica.\n\t\t\t */\n\t\t\tString login = pRequest.getParameter(\"login\");\n\t\t\tuser.setLogin(login);\n\t\t\tif (managerUser.existsLogin(user))\n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\t\n\t\t\tuser.setPassword(pRequest.getParameter(\"password\"));\n\t\t\tuser.setEMail(pRequest.getParameter(\"eMail\"));\n\t\t\t//aggiorniamo\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.update(user);\n\t\t\t}else {\n\t\t\t\tint userId = managerUser.getUserId(user);\n\t\t\t\tif (user.getId()==userId)\n\t\t\t\t\tmanagerUser.update(user);\n\t\t\t\telse \n\t\t\t\t\tthrow new DuplicatedEntityException(\"Utente già esistente\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2887e"},"name":"ServletLoadYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadYear extends HttpServlet {\n\n\t\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6304881993204403909L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Integer> yearList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\tyearList = managerClassroom.getAcademicYearList();\n\t\t\tgotoPage +=(String) pRequest.getParameter(\"goTo\");\n\t\t\tsession.setAttribute(\"accademicYearList\", yearList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb2887f"},"name":"ServletShowUserTeachingFormByCourse.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletShowUserTeachingFormByCourse extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2305151029867525356L;\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28880"},"name":"Teaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.bean;\n\nimport smos.exception.InvalidValueException;\n\nimport java.io.Serializable;\n\n/**\n * Classe utilizzata per modellare un insegnamento.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n * \n */\n\npublic class Teaching implements Serializable {\n\n\tprivate static final long serialVersionUID = 2523612738702790957L;\n\tprivate int id_teaching;\n\tprivate String name;\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic Teaching() {\n\t\tthis.id_teaching = 0;\n\t}\n\n\t/**\n\t * Ritorna il nome dell'insegnamento\n\t * \n\t * @return Ritorna il nome dell'insegnamento.\n\t */\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * Setta il nome dell'insegnamento.\n\t * \n\t * @param pName\n\t *            Il nome da settare.\n\t * \n\t * @throws InvalidValueException\n\t */\n\tpublic void setName(String pName) throws InvalidValueException {\n\t\tif (pName.length() <= 4)// da verificare il test\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\t\tthis.name = pName;\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento.\n\t * \n\t * @return l'id dell'insegnamento.\n\t */\n\tpublic int getId() {\n\t\treturn this.id_teaching;\n\t}\n\n\t/**\n\t * Setta l'id dell'insegnamento.\n\t * \n\t * @param pId\n\t *            L'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id_teaching = pId;\n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28881"},"name":"DeleteAdministratorException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n/**\n * Questa classe rappresenta l'eccezione generata quando un utente\n * tenta di eliminare l'unico utente Admin nel database.\n */\n\npublic class DeleteAdministratorException extends Exception {\n\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -2081143475624381775L;\n\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t * \n\t */\n\tpublic DeleteAdministratorException() {\n\t\tsuper(\"Impossibile eliminare l'utente, l'utente selezionato e' l'unico Admin presente nel database! Creare un nuovo Manager e riprovare!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DeleteAdministratorException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28882"},"name":"ServletInitialize.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application;\n\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\n\nimport smos.utility.Utility;\n\n/**\n * Servlet utilizzata per inizializzare i parametri del sistema.\n * \n * @author Bavota Gabriele, Carnevale Filomena.\n *\n */\npublic class ServletInitialize extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -2542143445249797492L;\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate ServletConfig config;\n\t\n\t /**\n\n     * Inizializza i parametri\n\n     */\n\n    public void init(ServletConfig config) throws ServletException \n\n    {\n    \tthis.config = config;\n    \t               \n        \n        //Setto il server smtp specificato nel file di configurazione xml\n        Utility.setServerSmtp(config.getInitParameter(\"serverSmtp\"));\n        \n        //Setto i parametri necessari alla connessione al Database\n        Utility.setDriverMySql(config.getInitParameter(\"driverMySql\"));\n        Utility.setFullPathDatabase(config.getInitParameter(\"fullPathDatabase\"));\n        Utility.setUserName(config.getInitParameter(\"userName\"));\n        Utility.setPassword(config.getInitParameter(\"password\"));\n        Utility.setMaxPoolSize(Integer.valueOf(config.getInitParameter(\"maxPoolSize\")));\n        Utility.setWaitTimeout(Integer.valueOf(config.getInitParameter(\"waitTimeout\")));\n        Utility.setActiveTimeout(Integer.valueOf(config.getInitParameter(\"activeTimeout\")));\n        Utility.setPoolTimeout(Integer.valueOf(config.getInitParameter(\"poolTimeout\")));\n        Utility.setTextFooter(config.getInitParameter(\"textFooter\"));\n        \n        \n\t}\n\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28883"},"name":"ServletInsertClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletInsertClassroom extends HttpServlet {\n\n\t\n\t\n\t\n\t\n\t/**\n\t * Servlet per inserire una classe \n\t * @author Nicola Pisanti\n\t * @version 0.9\n\t */\n\tprivate static final long serialVersionUID = 1355159545343902216L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tint aC=Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\tString gotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\t\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\tString isWizard = \"yes\";\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tint idAdd= (int) Integer.valueOf(pRequest.getParameter(\"address\"));\n\t\t\t\n\t\t\tClassroom classroom= new Classroom();\n\t\t\tclassroom.setName(pRequest.getParameter(\"name\"));\n\t\t\tclassroom.setAcademicYear(aC);\n\t\t\tclassroom.setIdAddress(idAdd);\n\t\t\t\n\t\t\tif(classroom.getAcademicYear()<1970){\n\t\t\t\tthrow new InvalidValueException(\"l'anno inserito Ã¨ troppo vecchio\");\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(!(managerClassroom.exists(classroom))){\n\t\t\t\tmanagerClassroom.insert(classroom);\n\t\t\t\tsession.setAttribute(\"isWizard\", isWizard);\n\t\t\t}else{\n\t\t\t\tthrow new DuplicatedEntityException(\"la classe giÃ  esiste nel database\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28884"},"name":"Classroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e3"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e6"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e1"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e0"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28815"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881a"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28811"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28810"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28809"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2880c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28817"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28818"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28820"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\npublic class Classroom implements Serializable{\n\n\t/**\n\t * Classe impiegata per modellare una classe \n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static final long serialVersionUID = -8295647317972301446L; \n\n\tprivate int idClassroom; //Id della classe\n\tprivate int idAddress;\t//Id dell'indirizzo\n\tprivate String name;\t//Nome della classe\n\tprivate int academicYear; //Anno accademico della classe, da inserire l'anno del primo semestre.\n\t\n\t\n\tpublic Classroom(){\n\t\tthis.idAddress=0;\n\t\tthis.idClassroom=0;\n\t\t\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'anno accademico\n\t * @return Un intero che rappresenta l'anno scolastico del primo semestre della classe.\n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t\n\t\n\t\n\t/**\n\t * Metodo che setta l'anno accademico\n\t * @param Il nuovo anno accademico da impostare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\t\n\t\n\t/**\n\t * Metodo per avere l'ID dell'indirizzo della classe\n\t * @return Un intero che rappresenta l'ID dell'indirizzo della classe\n\t */\n\tpublic int getIdAddress() {\n\t\treturn idAddress;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta l'ID dell'indirizzo della classe\n\t * @param Il nuovo ID da settare\n\t */\n\tpublic void setIdAddress(int pIdAddress) {\n\t\tthis.idAddress = pIdAddress;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'ID della classe \n\t * @return Un intero che rappresenta l'ID della classe\n\t */\n\tpublic int getIdClassroom() {\n\t\treturn idClassroom;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta l'ID della classe\n\t * @param Il nuovo ID da settare\n\t */\n\tpublic void setIdClassroom(int pIdClassroom) {\n\t\tthis.idClassroom = pIdClassroom;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce il nome della classe\n\t * @return Una stringa che rappresenta il nome della classe\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta il nome della classe\n\t * @param Il nuovo nome da settare\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\t\n\t\n\tpublic String toString(){\n\t\t\n\t\treturn (name + \" \"+ academicYear+ \" ID: \"+ idClassroom);\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5e9b207b5e8ff87d5fb28885"},"name":"ServletAssignRole.java","system":"SMOS","applied_transformations":[],"ground_truth":[["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e9"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e8"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287eb"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ec"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287ef"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881c"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28806"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28807"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb28814"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287f4"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb2881b"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287e2"}],["test.requirement_raw",{"$oid":"5e9b207b5e8ff87d5fb287df"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare uno o piu ruoli ad un utente.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAssignRole extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 537330195407987283L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tCollection<UserListItem> administrators = new Vector<UserListItem>();\n\t\tIterator<UserListItem> itAdmin = null;\n\t\t\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\t\n\t\t\tadministrators = managerUser.getAdministrators();\n\t\t\titAdmin = administrators.iterator();\n\t\t\titAdmin.next();\n\t\t\t\n\t\t\tString[] selectedRoles = pRequest.getParameterValues(\"selectedRoles\");\n\t\t\tString[] unselectedRoles = pRequest.getParameterValues(\"unselectedRoles\");\n\t\t\t\n\t\t\tif (selectedRoles != null) {\n\t\t\t\tint selectedlength = selectedRoles.length;\n\t\t\t\tfor (int i = 0; i < selectedlength; i++) {\n\t\t\t\t\tint role = Integer.valueOf(selectedRoles[i]);\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di docente*/\n\t\t\t\t\t \n\t\t\t\t\t/*if ((role == Role.TEACHER) && (!managerUser.isTeacher(user))){\n\t\t\t\t\t\tgotoPage=\"./loadYearForTeachings\";\n\t\t\t\t\t\t\n\t\t\t\t\t}*/\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di studente*/\n\t\t\t\t\t/*if ((role == Role.STUDENT) && (!managerUser.isStudent(user))){\n\t\t\t\t\t\tgotoPage=\"./showUserList\";\n\t\t\t\t\t\t\n\t\t\t\t\t} */\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di genitore*/\n\t\t\t\t\t/*if((role==Role.PARENT)&& (!managerUser.isParent(user))){\n\t\t\t\t\t\tgotoPage=\"./persistentDataManagement/userManagement/showStudentParentForm.jsp\";\n\t\t\t\t\t}*/\n\t\t\t\t\tmanagerUser.assignRole(user, role);\n\t\t\t\t}\n\t\t\t} \n\t\t\t\n\t\t\tif (unselectedRoles != null) {\n\t\t\t\tint unselectedlength = unselectedRoles.length;\n\t\t\t\tfor (int i = 0; i < unselectedlength; i++) {\n\t\t\t\t\tint role = Integer.valueOf(unselectedRoles[i]);\n\t\t\t\t\tif ((managerUser.isAdministrator(user))&&(!itAdmin.hasNext())&&(role==Role.ADMIN)) {\n\t\t\t\t\t\tthrow new DeleteManagerException (\"Impossibile modificare il ruolo dell'utente, e' l'unico Amministratore del sistema! Creare un nuovo Amministratore e riprovare!\");\n\t\t\t\t\t}\n\t\t\t\t\tmanagerUser.removeRole(user, role);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DeleteManagerException deleteManagerException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + deleteManagerException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteManagerException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
