{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca74"},"name":"ServletShowUserClassroomForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletShowUserClassroomForm extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -8625643776134227947L;\n\n\t/**\n\t * \n\t */\n\t\n\t\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca75"},"name":"ServletLoadTeachingList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per caricare la lista degli insegnamenti Associati alla classe dello studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadTeachingList extends HttpServlet {\n\n\n\tprivate static final long serialVersionUID = -708492643674363470L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/insertReport.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\t //Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca76"},"name":"ServletShowTeachingDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeachingDetails extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 7882088509329309672L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/teachingManagement/showTeachingDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint teachingId = 0;\n\t\tTeaching teaching = null;\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tteachingId = Integer.valueOf(pRequest.getParameter(\"idTeaching\"));\n\t\t\tteaching = managerTeaching.getTeachingById(teachingId);\n\t\t\tsession.setAttribute(\"teaching\", teaching);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca77"},"name":"ServletInsertNewNote.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletInsertNewNote extends HttpServlet {\n\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6496360730201101300L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tif(pRequest.getParameter(\"insert\")==null){\n\t\t\t\tUser student =(User) session.getAttribute(\"student\"); \n\t\t\t\t\t//managerUser.getUserById(Integer.valueOf((String)pRequest.getAttribute(\"student\")));\n\t\t\t\tsession.setAttribute(\"student\", student);\n\t\t\t\tsession.setAttribute(\"idStudent\", student.getId());\n\t\t\t\tgotoPage=\"./registerManagement/insertNewNote.jsp\";\n\t\t\t}else{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNote nNote= new Note();\n\t\t\t\tnNote.setAcademicYear(((Classroom) session.getAttribute(\"classroom\")).getAcademicYear());\n\t\t\t\tnNote.setDateNote(Utility.String2Date(pRequest.getParameter(\"dateNote\")));\n\t\t\t\tnNote.setIdUser((Integer) session.getAttribute(\"idStudent\"));\n\t\t\t\tnNote.setTeacher(pRequest.getParameter(\"noteTeacher\"));\n\t\t\t\tnNote.setDescription(pRequest.getParameter(\"noteDescription\"));\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tmanagerRegister.insertNote(nNote);\n\t\t\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\t}catch(MandatoryFieldException e){\n\t\t\t\t\tsession.setAttribute(\"error\", e.getMessage());\n\t\t\t\t\tgotoPage=\"./registerManagement/insertNewNote.jsp\";\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca78"},"name":"NotImplementedYetException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * NotYetImplementedException\n *\n */\n\npackage smos.storage.connectionManagement.exception;\n\n/**\n * This exception is thrown as a warning from a part of the code which has not\n * been implemented yet, but will be in future.\n */\npublic class NotImplementedYetException extends RuntimeException {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \n     */\n    public NotImplementedYetException() {\n        super();\n    }\n\n    /**\n     * @param pMessage\n     */\n    public NotImplementedYetException(String pMessage) {\n        super(pMessage);\n    }\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca79"},"name":"ManagerClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.storage;\n\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport smos.bean.Classroom;\nimport smos.bean.User;\n\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ManagerClassroom  {\n\n\t/**\n\t * Classe che gestiste le classi dell'istituto \n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static ManagerClassroom instance;\n\t\n\tpublic static final String TABLE_CLASSROOM = \"classroom\";\n\tpublic static final String TABLE_ADDRESS =\"address\";\n\tpublic static final String TABLE_TEACHER_HAS_CLASSROOM = \"teacher_has_classroom\";\n\tpublic static final String TABLE_STUDENT_HAS_CLASSROOM = \"student_has_classroom\";\n\t\n\tprivate ManagerClassroom(){\n\t\tsuper();\n\t}\n\t\n\t\n\t\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerClassroom getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerClassroom();\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param La classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists (Classroom pClassroom) throws MandatoryFieldException, ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pClassroom.getName() == null)\n\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM\n\t\t\t\t+ \" WHERE name = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \" AND accademic_year = \"\n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear()\n\t\t\t\t+ \" AND id_address = \"\n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress())\n\t\t\t\t\n\t\t\t\t);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Inserisce l'oggetto di tipo classe nel database\n\t * @param la classe da inserire nel database\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Classroom pClassroom) throws MandatoryFieldException, \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t// controllo dei campi obbligatori\n\t\t\tif (pClassroom.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t\t}\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" (id_address, name, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpClassroom.setIdClassroom((Utility.getMaxValue(\"id_classroom\",ManagerClassroom.TABLE_CLASSROOM)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Aggiorna le statistiche di una classe\n\t * @param La classe con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update (Classroom pClassroom) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\t\t\tif (pClassroom.getIdClassroom()<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la classe!\");\n\t\t\t\n\t\t\tif (pClassroom.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il nome della classe.\");\n\t\t\tif (pClassroom.getAcademicYear() <=1970)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pClassroom.getIdAddress()<=0){\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'indirizzo\");\n\t\t\t\t//l'utente inserisce l'indirizzo, viene convertito in idAddress\n\t\t\t}\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_address = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdAddress()) \n\t\t\t\t+ \", name = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getName()) \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_classroom = \" \n\t\t\t\t+ Utility.isNull(pClassroom.getIdClassroom());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Cancella una classe dal database\n\t * @param La classe da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void delete (Classroom pClassroom) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\t//ManagerUser.getInstance().userOnDeleteCascade(pUser);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t\t\t\t+ \" WHERE id_classroom = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pClassroom.getIdClassroom());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized Collection<Classroom> getClassroomsByStudent(User pUser) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\ttry\n\t\t{\n\t\t\t// Se non esiste l'utente\n\t\t\tif (!managerUser.exists(pUser))\n\t\t\t\t\tthrow new EntityNotFoundException(\"L'utente non esiste!!!\");\n\t\t\tif(!managerUser.isStudent(pUser))\n\t\t\t\t\tthrow new InvalidValueException(\"L'utente non è uno studente!\");\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tint iduser=managerUser.getUserId(pUser);\n\t\t\tString tSql = \n\t\t\t\t\n\t\t\t\t\"SELECT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".* FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM \n\t\t\t\t+ \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(iduser)\n\t\t\t\t+\" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_STUDENT_HAS_CLASSROOM \n\t\t\t\t+\".id_classroom\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente inserito\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Restituisce la classe che ha l'ID passato \n\t * @param L'ID della classe cercata\n\t * @return una stringa che rappresenta la classe con l'ID fornito\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Classroom getClassroomByID(int pId) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tClassroom result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la classe!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE id_classroom = \" \n\t\t\t\t+ Utility.isNull(pId) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadRecordFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'utente!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Restituisce una collezione di classi dello stesso anno accademico\n\t */\n\tpublic synchronized Collection<Classroom> getClassroomsByAcademicYear(int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per la data inserita\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\t\n\tpublic synchronized Collection<Integer> getAcademicYearList() throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Integer> result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT DISTINCT accademic_year FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM\n\t\t\t\t+ \" order by accademic_year \";\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadIntegersFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per la data inserita\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\tpublic synchronized Classroom getClassroomByUserAcademicYear(User pUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tClassroom result = null;\n\t\tClassroom temp = null;\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tCollection<Classroom> list = null;\n\t\tlist = managerClassroom.getClassroomsByStudent(pUser);\n\t\tIterator<Classroom> it = list.iterator();\n\t\twhile(it.hasNext()){\n\t\t\ttemp = it.next();\n\t\t\tif(temp.getAcademicYear()==pAcademicYear){\n\t\t\t\tresult = temp;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tpublic synchronized Collection<Classroom> getClassroomsByTeacherAcademicYear(User pUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result = null;\n\t\tConnection connect = null;\n\t\tint idUser = pUser.getId();\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT DISTINCT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM +\".* FROM \"  \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \" WHERE  \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \".id_classroom  AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".accademic_year = \"\n\t\t\t\t+ Utility.isNull(pAcademicYear)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM + \".id_user = \"\n\t\t\t\t+ Utility.isNull(idUser)\n\t\t\t\t;\n\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente e l'anno inseriti\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t\n\t}\n\tpublic synchronized Collection<Classroom> getClassroomsByTeacher(User pUser) \n\tthrows EntityNotFoundException, ConnectionException, SQLException, InvalidValueException, MandatoryFieldException{\n\t\tCollection<Classroom> result=null;\n\t\tConnection connect = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\ttry\n\t\t{\n\t\t\t// Se non esiste l'utente\n\t\t\tif (!managerUser.exists(pUser))\n\t\t\t\t\tthrow new EntityNotFoundException(\"L'utente non esiste!!!\");\n\t\t\tif(!managerUser.isTeacher(pUser))\n\t\t\t\t\tthrow new InvalidValueException(\"L'utente non è uno studente!\");\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tint iduser=managerUser.getUserId(pUser);\n\t\t\tString tSql = \n\t\t\t\t\n\t\t\t\t\"SELECT DISTINCT \" \n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".* FROM \" \n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+ \", \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(iduser)\n\t\t\t\t+\" AND \"\n\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM \n\t\t\t\t+\".id_classroom = \"\n\t\t\t\t+ ManagerClassroom.TABLE_TEACHER_HAS_CLASSROOM \n\t\t\t\t+\".id_classroom\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\n\t\t\t\t\n\t\t\tif(result.isEmpty()) {\n\t\t\t\t\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile Trovare Classi per l'utente inserito\");\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/** COnsente la lettura di un intero dal recod resultSet\n\t * \n\t * @param pRs\n\t * \t\tresultSet\n\t * @return\n\t * \tcollection<Integer>\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Integer> loadIntegersFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Integer> result = new Vector<Integer>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(pRs.getInt(\"accademic_year\"));\n\t\t} \n\t\treturn result;\n\t}\n\n\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param Il result set da cui estrarre l'oggetto Classroom\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Classroom loadRecordFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tClassroom classroom = new Classroom();\n\t\tclassroom.setName(pRs.getString(\"name\"));\n\t\tclassroom.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\tclassroom.setIdClassroom(pRs.getInt(\"id_classroom\"));\n\t\tclassroom.setIdAddress(pRs.getInt(\"id_address\"));\n\t\treturn classroom;\n\t}\n\n\t/**\n\t * Consente la lettura di un piÃ¹ record dal Result Set\n\t * @param Il result set da cui estrarre l'oggetto Classroom\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Collection<Classroom> loadRecordsFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Classroom> result = new Vector<Classroom>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} \n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca7a"},"name":"ServletShowAddressList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.addressManagement;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli indirizzi.\n * \n * @author Vecchione Giuseppe\n * \n */\npublic class ServletShowAddressList extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = 8797912020763935353L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString errorMessage=\"\";\n\t\tString gotoPage=\"./persistentDataManagement/addressManagement/showAddressList.jsp\";\n\t\tHttpSession session=pRequest.getSession();\n\t\tCollection<Address> addressList=null;\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tUser loggedUser = (User)session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif(loggedUser==null){\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\terrorMessage=\"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\taddressList=managerAddress.getAddressList();\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"addressList\", addressList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\t\t\t\t\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException sqlException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tsqlException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t}\n\t\tpRequest.getSession().setAttribute(\"errorMessage\",errorMessage);\n\t\t\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca7b"},"name":"LoginException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un utente\n  * inserisce una password errata durante l'autenticazione\n  */\npublic class LoginException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -1213284697567763493L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic LoginException() {\n\t\tsuper(\"Login or Password Incorrect or Invalid Session!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic LoginException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca7c"},"name":"Absence.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\npublic class Absence implements Serializable {\n\n\t/**\n\t * Classe che modella l'assenza di uno studente\n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = -8396513309450121449L;\n\t\n\tprivate int idAbsence;\n\tprivate int idUser;\n\tprivate Date dateAbsence;\n\tprivate Integer idJustify;\n\tprivate int academicYear;\n\t\n\tpublic Absence (){\n\t\t\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'id dell'assenza\n\t * @return un intero che rappresenta l'id dell'assenza\n\t */\n\tpublic int getIdAbsence() {\n\t\treturn idAbsence;\n\t}\n\t/**\n\t * Metodo che setta l'id dell'assenza\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdAbsence(int pIdAbsence) {\n\t\tthis.idAbsence = pIdAbsence;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente relativo all'assenza\n\t * @return un intero che rappresenta l'id dello studente assente\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo all'assenza\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data dell'assenza\n\t * @return una stringa che rappresenta la data dell'assenza\n\t */\n\tpublic Date getDateAbsence() {\n\t\treturn dateAbsence;\n\t}\n\t/**\n\t * Metodo che setta la data dell'assenza\n\t * @param una stringa con la data da settare\n\t */\n\tpublic void setDateAbsence(Date pDateAbsence) {\n\t\tthis.dateAbsence = pDateAbsence;\n\t}\n\t/**\n\t * Metodo che ritorna l'id della giustifica relativa all'assenza\n\t * @return un intero che rappresenta l'id della giustifica relativa all'assenza, oppure null se l'assenza non Ã¨ stata giustificata\n\t */\n\tpublic Integer getIdJustify() {\n\t\t\n\t\treturn idJustify;\n\t\t\n\t}\n\t/**\n\t * Metodo che setta l'id della giustifica relativa all'assenza\n\t * @param un intero che rappresenta l'id della giustifica da settare\n\t */\n\tpublic void setIdJustify(Integer pIdJustify) {\n\t\tthis.idJustify = pIdJustify;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo all'assenza\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo all'assenza\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca7d"},"name":"Environment.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos;\n\n/**\n * Classe utilizzata per contenere le variabili d'ambiente di GESA \n */\npublic class Environment {\n\n    /**\n     * Messaggio di errore di default.\n     */\n    public static String DEFAULT_ERROR_MESSAGE = \"Un errore si e' verificato durante l'elaborazione della richiesta.<br><br>\";\n\n    private static String poolPropertiesPath = \"\";\n\n    /**\n     * @return getPoolPropertiesPath()\n     */\n    public static String getPoolPropertiesPath() {\n        return poolPropertiesPath;\n    }\n    \n    /**\n     * @param poolPropertiesPath\n     */\n    public static void setPoolPropertiesPath(String poolPropertiesPath) {\n        Environment.poolPropertiesPath = poolPropertiesPath;\n    }\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca7e"},"name":"ServletDeleteTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.*;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per eliminare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletDeleteTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7133554709559970023L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tTeaching teaching = (Teaching) session.getAttribute(\"teaching\");\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} else\n\t\t\t\tmanagerTeaching.delete(teaching);\n\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca7f"},"name":"ManagerRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}]],"contents":"package smos.storage;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Vector;\n\nimport smos.bean.Absence;\nimport smos.bean.Delay;\nimport smos.bean.Justify;\nimport smos.bean.Note;\nimport smos.bean.RegisterLine;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ManagerRegister {\n\n\t\n\t/**\n\t * Classe che gestisce il Registro Digitale\n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static ManagerRegister instance;\n\t\n\tpublic final static String TABLE_ABSENCE=\"absence\";\n\tpublic final static String TABLE_DELAY=\"delay\";\n\tpublic final static String TABLE_JUSTIFY=\"justify\";\n\tpublic final static String TABLE_NOTE=\"note\";\n\t\n\t\n\tprivate ManagerRegister(){\n\t\tsuper();\n\t}\n\t\n\t\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerRegister getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerRegister();\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pAbsence\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Absence pAbsence) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE\n\t\t\t\t+ \" WHERE id_absence = \"\n\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next()){\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pDelay\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Delay pDelay) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE\n\t\t\t\t+ \" WHERE id_delay = \"\n\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Verifica se la classe data in input Ã¨ nel database\n\t * @param pDelay\n\t * \t\tLa classe di cui bisogna verificare l'esistenza\n\t * @return true se la classe Ã¨ nel database, altrimenti false\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized boolean exists(Justify pJustify) throws ConnectionException, SQLException {\n\t\t\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t//Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY\n\t\t\t\t+ \" WHERE  id_justify = \"\n\t\t\t\t+ Utility.isNull(pJustify.getIdJustify());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\t\t\t\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Inserisce un assenza nel database\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertAbsence(Absence pAbsence) throws  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" (id_user, date_absence, id_justify, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getDateAbsence()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pAbsence.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpAbsence.setIdAbsence((Utility.getMaxValue(\"id_absence\",ManagerRegister.TABLE_ABSENCE)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Inserisce un ritardo nel database\n\t * @param pDelay\n\t * \t\tun oggetto di tipo Delay da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertDelay(Delay pDelay) throws  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" (id_user, date_delay, time_delay, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pDelay.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getDateDelay()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getTimeDelay()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pDelay.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpDelay.setIdDelay((Utility.getMaxValue(\"id_delay\",ManagerRegister.TABLE_DELAY)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\n\t/**\n\t * Inserisce una nota nel database\n\t * @param pNote\n\t * \t\tun oggetto di tipo Note da inserire nel database\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertNote(Note pNote) throws MandatoryFieldException,  \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\tif (pNote.getDescription() == null || pNote.getDescription().equals(\"\"))\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire il testo della nota\");\n\t\t\t\n\t\t\tif (pNote.getTeacher() == null || pNote.getTeacher().equals(\"\") )\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire l'insegnante\");\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" (id_user, date_note, description, teacher, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pNote.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getDateNote()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getDescription()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getTeacher()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pNote.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpNote.setIdNote((Utility.getMaxValue(\"id_note\",ManagerRegister.TABLE_NOTE)));\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Inserisce una giustifica nel database\n\t * @param pJustify \n\t * \t\tun oggetto di tipo Justify da inserire nel database\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence che rappresenta l'assenza giustificata\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insertJustify(Justify pJustify, Absence pAbsence) throws   \n\t\tConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\t\n\t\tConnection connect= null;\n\t\ttry{\n\t\t\t\n\t\t\t\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t//Prepariamo la stringa Sql\n\t\t\tString sql =\n\t\t\t\t\"INSERT INTO \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" (id_user, date_justify, accademic_year) \" \n\t\t\t\t+ \"VALUES (\" \n\t\t\t\t+ Utility.isNull(pJustify.getIdUser()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pJustify.getDateJustify()) \n\t\t\t\t+ \",\" \n\t\t\t\t+ Utility.isNull(pJustify.getAcademicYear())\n\t\t\t\t+ \")\";\n\t\t\n\t\t\tUtility.executeOperation(connect,sql);\n\t\t\n\t\t\tpJustify.setIdJustify((Utility.getMaxValue(\"id_justify\",ManagerRegister.TABLE_JUSTIFY)));\n\t\t\t\n\t\t\tpAbsence.setIdJustify(pJustify.getIdJustify());\n\t\t\tthis.updateAbsence(pAbsence);\n\t\t\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\t\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella un'assenza dal database\n\t * @param pAbsence\n\t * \t\tl'assenza da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteAbsence (Absence pAbsence) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t\t\t\t+ \" WHERE id_absence = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t\t\t\n\t\t\t\tif (!(pAbsence.getIdJustify()==null)){\n\t\t\t\t\tdeleteJustify(pAbsence.getIdJustify());\n\t\t\t\t}\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\n\t/**\n\t * Cancella un ritardo dal database\n\t * @param pDelay\n\t * \t\til ritardo da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteDelay (Delay pDelay) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t\t\t\t+ \" WHERE id_delay = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella una nota dal database\n\t * @param pNote\n\t * \t\tla nota da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteNote (Note pNote) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t\t\t\t+ \" WHERE id_note = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pNote.getIdNote());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Cancella una nota dal database\n\t * @param pJIDustify\n\t * \t\tl'ID della nota da cancellare\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void deleteJustify (int pIDJustify) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t\t\t\t+ \" WHERE id_justify = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pIDJustify);\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tAbsence temp= getAbsenceByIdJustify(pIDJustify);\n\t\t\t\t\ttemp.setIdJustify(0);\n\t\t\t\t\tupdateAbsence(temp);\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\t// è normale se un exception viene generata\n\t\t\t\t\t// dato che può essere che stiamo cancellando una giustifica\n\t\t\t\t\t//di cui abbiamo appena cancellato l'assenza \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t}finally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna le statistiche di un'assenza\n\t * @param pAbsence\n\t * \t\tL'assenza con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\t\n\tpublic synchronized void updateAbsence (Absence pAbsence) throws ConnectionException,\n\tSQLException, EntityNotFoundException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdUser()) \n\t\t\t\t+ \", date_absence = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getDateAbsence()) \n\t\t\t\t+ \", id_justify = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify())  \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_absence = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdAbsence());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Aggiorna le statistiche di un ritardo\n\t * @param pDelay\n\t * \t\tIl ritardo con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\t\n\tpublic synchronized void updateDelay (Delay pDelay) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pDelay.getIdUser()) \n\t\t\t\t+ \", date_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getDateDelay()) \n\t\t\t\t+ \", time_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getTimeDelay())  \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pDelay.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_delay = \" \n\t\t\t\t+ Utility.isNull(pDelay.getIdDelay());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Metodo che aggiorna le statistiche di una Nota\n\t * @param pNote\n\t * \t\tun oggetto di tipo Note con le statistiche aggiornate ma id identico\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\tpublic synchronized void updateNote (Note pNote) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\t\t\tif (pNote.getDescription() == null || pNote.getDescription().equals(\"\"))\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire il testo della nota\");\n\t\t\t\n\t\t\tif (pNote.getTeacher() == null || pNote.getTeacher().equals(\"\") )\n\t\t\t\tthrow new MandatoryFieldException(\"Inserire l'insegnante\");\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_NOTE\n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pNote.getIdUser()) \n\t\t\t\t+ \", date_note = \" \n\t\t\t\t+ Utility.isNull(pNote.getDateNote())   \n\t\t\t\t+ \", description = \" \n\t\t\t\t+ Utility.isNull(pNote.getDescription())   \n\t\t\t\t+ \", teacher = \" \n\t\t\t\t+ Utility.isNull(pNote.getTeacher())   \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pNote.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_note = \" \n\t\t\t\t+ Utility.isNull(pNote.getIdNote());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Aggiorna le statistiche di una giustifica \n\t * @param pJustify\n\t * \t\tla giustifica con le statistiche aggiornate (ma ID identico)\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\t\n\n\tpublic synchronized void updateJustify (Justify pJustify) throws ConnectionException,\n\tSQLException, EntityNotFoundException, MandatoryFieldException{\n\t\tConnection connect= null;\n\t\t\n\t\ttry{\n\n\t\t\t\n\t\t\t//Prepariamo la stringa SQL\n\t\t\tString sql=\n\t\t\t\t\"UPDATE \" \n\t\t\t\t+\tManagerRegister.TABLE_JUSTIFY\n\t\t\t\t+ \" SET\" \n\t\t\t\t+ \" id_user = \" \n\t\t\t\t+ Utility.isNull(pJustify.getIdUser()) \n\t\t\t\t+ \", date_justify = \" \n\t\t\t\t+ Utility.isNull(pJustify.getDateJustify())   \n\t\t\t\t+ \", accademic_year = \" \n\t\t\t\t+ Utility.isNull(pJustify.getAcademicYear())  \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pJustify.getIdJustify());\n\t\t\t\n\t\t\t//effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect==null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t}finally {\n\t\t//rilascia le risorse\n\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Metodo che restituisce una nota dato l'id della note stessa\n\t * @param pIDJustify\n\t * \t\tun intero che rappresenta l'id della nota  \n\t * @return un oggetto di tipo Note che rappresenta la nota\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Note getNoteById( int pIDNote)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tNote result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDNote<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la nota\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" WHERE id_note = \" \n\t\t\t\t+ Utility.isNull(pIDNote) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadNoteFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la nota!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t * Metodo che restituisce un assenza dato l'id della giustifca associata a tale assenza\n\t * @param pIDJustify\n\t * \t\tun intero che rappresenta l'id della giustifica  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza giustificata\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Absence getAbsenceByIdJustify( int pIDJustify)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tAbsence result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDJustify<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la l'assenza\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pIDJustify) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadAbsenceFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce un assenza dato l'id di questa\n\t * @param pIDAbsence\n\t * \t\tun intero che rappresenta l'id dell'assenza  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza \n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Absence getAbsenceByIdAbsence( int pIDAbsence)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tAbsence result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDAbsence<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l' assenza\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE id_absence = \" \n\t\t\t\t+ Utility.isNull(pIDAbsence) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadAbsenceFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce un ritardo dato l'id di questo\n\t * @param pIDDelay\n\t * \t\tun intero che rappresenta l'id del ritardo  \n\t * @return un oggetto di tipo Delay che rappresenta il ritardo\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Delay getDelayById( int pIDDelay)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tDelay result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDDelay<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare il ritardo\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY\n\t\t\t\t+ \" WHERE id_delay = \" \n\t\t\t\t+ Utility.isNull(pIDDelay) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadDelayFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'assenza!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce un assenza dato l'id di questa\n\t * @param pIDAbsence\n\t * \t\tun intero che rappresenta l'id dell'assenza  \n\t * @return un oggetto di tipo Absence che rappresenta l'assenza \n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\t\n\tpublic synchronized Justify getJustifyByIdJustify( int pIDJustify)throws InvalidValueException,\n\t\t\tEntityNotFoundException, ConnectionException, SQLException{\n\t\tJustify result=null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIDJustify<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pIDJustify) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\t\n\t\t\t\tresult= this.loadJustifyFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Metodo che restituisce true se l'assenza data in input ha una giustifica assegnata\n\t * @param pAbsence\n\t * \t\tun oggetto di valore Absence di cui bisogna controllare se ha giustifica\n\t * @return true se l'assenza Ã¨ giustificata, false altrimenti\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t\n\tpublic synchronized boolean hasJustify(Absence pAbsence)throws EntityNotFoundException, ConnectionException, SQLException{\n\t\tif(!exists(pAbsence)) throw new EntityNotFoundException(\"Assenza non presente in database\");\n\t\tif(pAbsence.getIdJustify()==null) return false;\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce la giustifica legata a una data assenza\n\t * @param pAbsence\n\t * \t\tun oggetto di tipo Absence che rappresenta l'assenza\n\t * @return\tun oggetto di tipo Justify, oppure null se l'assenza non ha giustifica\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\tpublic synchronized Justify getJustifyByAbsence(Absence pAbsence)throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tif(!exists(pAbsence)) throw new EntityNotFoundException(\"Assenza non presente in database\");\n\t\tif(pAbsence.getIdJustify()==null) return null;\n\t\t\n\t\tJustify result=null;\n\t\tConnection connect = null;\n\t\ttry{\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_JUSTIFY \n\t\t\t\t+ \" WHERE id_justify = \" \n\t\t\t\t+ Utility.isNull(pAbsence.getIdJustify()) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = this.loadJustifyFromRs(tRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare la giustifica!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t\t\n\t\t\n\t}\n\n\t/**\n\t * Metodo che restituisce le assenze preso un dato anno scolastico e utente in input\n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dell'utente\n\t * @param pAcademicYear\n\t * \t\tun intero che rappresenta l'anno accademico \n\t * @return una colleczione di assenze (vuota se l'utente non ha avuto assenze ) \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\t\n\tpublic synchronized Collection<Absence> getAbsenceByIDUserAndAcademicYear(int pIdUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Absence> result=new Vector<Absence>();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\twhile(tRs.next())  {\n\t\t\t\tresult.add(loadAbsenceFromRs(tRs));\n\t\t\t} \n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Metodo che restituisce una collezione di note per un dato utente ed un dato anno scolastico\n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dell'utente\n\t * @param pAcademicYear\n\t * \t\tun intero che rappresenta l'anno accademico \n\t * @return una collezione di note, vuota se l'utente non ne ha ricevute\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Note> getNoteByIDUserAndAcademicYear(int pIdUser, int pAcademicYear) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Note> result=new Vector<Note>();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non Ã¨ stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pAcademicYear <= 1970)\n\t\t\t\tthrow new EntityNotFoundException(\"Data troppo vecchia\");\n\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_NOTE \n\t\t\t\t+ \" WHERE accademic_year = \" \n\t\t\t\t+ Utility.isNull(pAcademicYear) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\twhile(tRs.next())  {\n\t\t\t\tresult.add(loadNoteFromRs(tRs));\n\t\t\t} \n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'assenza di una dato studente in un dato giorno \n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dello studente\n\t * @param pDate\n\t * \t\tuna stringa che rappresenta la data formattata per il database\n\t * @return un oggetto di tipo Absence, oppure null se lo studente era presente\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\t\n\tpublic synchronized Absence getAbsenceByIDUserAndDate(int pIdUser, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tAbsence result=new Absence();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t//TODO controlli sulla formattazione della stringa\n\t\t\t\n\t\t\t\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_ABSENCE \n\t\t\t\t+ \" WHERE date_absence = \" \n\t\t\t\t+ Utility.isNull(pDate) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif(tRs.next())  {\n\t\t\t\tresult=loadAbsenceFromRs(tRs);\n\t\t\t}else {\n\t\t\t\tresult=null;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce il ritardo di una dato studente in un dato giorno \n\t * @param pIdUser\n\t * \t\tun intero che rappresenta l'id dello studente\n\t * @param pDate\n\t * \t\tuna stringa che rappresenta la data formattata per il database\n\t * @return un oggetto di tipo Delay, oppure null se lo studente era in orario o assente\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\n\t\n\tpublic synchronized Delay getDelayByIDUserAndDate(int pIdUser, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tDelay result=new Delay();\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t//TODO controlli sulla formattazione della stringa\n\t\t\t\n\t\t\t\n\t\t\t// idem per l'id user\n\t\t\tif (pIdUser<=0)\n\t\t\t\tthrow new EntityNotFoundException(\"Utente non trovato\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti alla classe dell'id passato\n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerRegister.TABLE_DELAY \n\t\t\t\t+ \" WHERE date_delay = \" \n\t\t\t\t+ Utility.isNull(pDate) \n\t\t\t\t+ \" AND id_user = \"\n\t\t\t\t+ Utility.isNull(pIdUser);\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif(tRs.next())  {\n\t\t\t\tresult=loadDelayFromRs(tRs);\n\t\t\t}else {\n\t\t\t\tresult=null;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t\n\tpublic synchronized Collection<RegisterLine> getRegisterByClassIDAndDate(int pClassID, Date pDate) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\t\n\t\tCollection<RegisterLine> result = new Vector<RegisterLine>();\n\t\tManagerUser mg = ManagerUser.getInstance();\n\t\t\n\t\tCollection<UserListItem> students = mg.getStudentsByClassroomId(pClassID);\n\t\t\n\t\t\n\t\tfor (UserListItem x : students){\n\t\t\tRegisterLine temp = new RegisterLine();\n\t\t\ttemp.setStudent(x);\n\t\t\ttemp.setAbsence(this.getAbsenceByIDUserAndDate(x.getId(), pDate));\n\t\t\ttemp.setDelay(this.getDelayByIDUserAndDate(x.getId(), pDate));\n\t\t\tresult.add(temp);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/**\n\t * Metodo che verifica se c'è un'assenza in una linea del registro \n\t * @param pRegisterLine\n\t * \t\tun oggetto di tipo RegisterLine\n\t * @return\ttrue se c'è un'assenza nella linea di registro passata, altrimenti false\n\t */\n\t\n\t\n\tpublic boolean hasAbsence(RegisterLine pRegisterLine){\n\t\tif(pRegisterLine.getAbsence()==null)return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Metodo che verifica se c'è un ritardo in una linea del registro \n\t * @param pRegisterLine\n\t * \t\tun oggetto di tipo RegisterLine\n\t * @return\ttrue se c'è un ritardo nella linea di registro passata, altrimenti false\n\t */\n\t\n\t\n\tpublic boolean hasDelay(RegisterLine pRegisterLine){\n\t\tif(pRegisterLine.getDelay()==null)return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Absence\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Absence loadAbsenceFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tAbsence absence = new Absence();\n\t\t\n\t\tabsence.setIdAbsence(pRs.getInt(\"id_absence\"));\n\t\tabsence.setIdUser(pRs.getInt(\"id_user\"));\n\t\tabsence.setDateAbsence((Date)pRs.getDate(\"date_absence\"));\n\t\tabsence.setIdJustify(pRs.getInt(\"id_justify\"));\n\t\tabsence.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\t\n\t\treturn absence;\n\t}\n\t\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Justify\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Justify loadJustifyFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tJustify justify = new Justify();\n\t\t\n\t\tjustify.setIdJustify(pRs.getInt(\"id_justify\"));\n\t\tjustify.setIdUser(pRs.getInt(\"id_user\"));\n\t\tjustify.setDateJustify((Date)pRs.getDate(\"date_justify\"));\n\t\tjustify.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\t\n\t\treturn justify;\n\t}\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Note\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Note loadNoteFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tNote note= new Note();\n\t\t\n\t\tnote.setIdNote(pRs.getInt(\"id_note\"));\n\t\tnote.setIdUser(pRs.getInt(\"id_user\"));\n\t\tnote.setDateNote((Date)pRs.getDate(\"date_note\"));\n\t\tnote.setDescription(pRs.getString(\"description\"));\n\t\tnote.setTeacher(pRs.getString(\"teacher\"));\t\n\t\tnote.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\n\t\treturn note;\n\t}\n\n\t/**\n\t * Consente la lettura di un solo record dal Result Set\n\t * @param pRs\n\t * \t\tIl result set da cui estrarre l'oggetto Delay\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tprivate Delay loadDelayFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tDelay delay = new Delay();\n\t\t\t\t\n\t\tdelay.setIdDelay(pRs.getInt(\"id_delay\"));\n\t\tdelay.setIdUser(pRs.getInt(\"id_user\"));\n\t\tdelay.setDateDelay((Date)pRs.getDate(\"date_delay\"));\n\t\tdelay.setTimeDelay(pRs.getString(\"time_delay\"));\n\t\tdelay.setAcademicYear(pRs.getInt(\"accademic_year\"));\n\t\n\t\treturn delay;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca80"},"name":"ServletShowAddressDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.addressManagement;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un indirizzo.\n * \n * @author Vecchione Giuseppe.\n * \n */\npublic class ServletShowAddressDetails extends HttpServlet {\n\n\t\n\n\t\n\n\t\n\tprivate static final long serialVersionUID = 2136348837349051766L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/addressManagement/showAddressDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint addressId = 0;\n\t\tAddress address= null;\n\t\tManagerAddress managerAddress = ManagerAddress.getInstance();\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\taddressId = Integer.valueOf(pRequest.getParameter(\"idAddress\"));\n\t\t\taddress = managerAddress.getAddressById(addressId);\n\t\t\tsession.setAttribute(\"address\", address);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca81"},"name":"ServletDeleteJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7692034998093997864L;\n\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tString idClassroom=(String) session.getAttribute(\"idClassroom\");\n\t\tint id= Integer.parseInt(idClassroom);\n\t\tgotoPage+=\"?idClassroom=\"+id;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) &&\n\t\t\t\t\t(!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tJustify justify = (Justify) session.getAttribute(\"justify\");\n\t\t\t\n\t\t\tif(mR.exists(justify)){\n\t\t\t\tmR.deleteJustify(justify.getIdJustify());\n\t\t\t}else{\n\t\t\t\terrorMessage= \"impossibile cancellare la giustifica, questa non esiste!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca82"},"name":"ServletUpdateRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Classroom;\nimport smos.bean.Delay;\nimport smos.bean.RegisterLine;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletUpdateRegister extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 5966298318913522686L;\n\t\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\t//Variabile booleana utilizzata per verificare se lo studente ha o meno un'assenza\n\t\tboolean flag = false;\n\t\t\n\t\t//Collection utilizzata per la memorizzazione del registro di una particolare data\n\t\tCollection<RegisterLine> register = null;\n\t\t//Iteratore necessario a scorrere la collection\n\t\tIterator itRegister = null;\n\t\t//Variabile temporanea necessaria a leggere le informazioni dalla collection\n\t\tRegisterLine tmpRegisterLine = null;\n\t\t//Variabile temporanea necessaria a leggere le informazioni dalla collection\n\t\tUserListItem student = null;\n\t\t\n\t\t//Variabile temporanea necessaria all'inserimento delle nuove assenze\n\t\tAbsence tmpAbsence = null;\n\t\t\n\t\t//Variabile temporanea necessaria all'inserimento di nuovi ritardi\n\t\tDelay tmpDelay = null;\n\t\t\n\t\t//Classi manager necessarie all'elaborazione\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance();\n\t\t\n\t\t//Variabili necessarie per la memorizzazione dei dati provenienti dalla request\n\t\tString[] absences = null; //Memorizza gli alunni assenti\n\t\tString[] delays = null; //Memorizza gli alunni ritardatari\n\t\t\n\t\t//Recupero l'utente loggato dalla sessione\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t//Verifico che l'utente loggato abbia i permessi necessari\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t//Recupero i parametri dalla pRequest\n\t\tDate date = Utility.String2Date(pRequest.getParameter(\"date\"));\n\t\tabsences = pRequest.getParameterValues(\"absences\");\n\t\tdelays = pRequest.getParameterValues(\"delays\");\n\t\t\n\t\t//Recupero l'oggetto classroom dalla session\n\t\tClassroom classroom = ((Classroom) session.getAttribute(\"classroom\"));\n\t\t\n\t\t/*Invoco il metodo della managerRegister per recuperare dal db le informazioni\n\t\t * inerenti il registro di una classe ad una particolare data (Assenze, Ritardi)\n\t\t */\n\t\tregister = managerRegister.getRegisterByClassIDAndDate(classroom.getIdClassroom(),date);\n\t\t\t\n\t\tif (register != null){\n\t\t\titRegister = register.iterator();\n\t\t}\n\t\t\n\t\tif (itRegister != null){\n\t\t\twhile(itRegister.hasNext()){\n\t\t\t\ttmpRegisterLine = (RegisterLine) itRegister.next();\n\t\t\t\t//Recupero lo studente cui la register line si riferisce\n\t\t\t\tstudent = tmpRegisterLine.getStudent();\n\t\t\t\t\n\t\t\t\t//Verifico se per lo studente e' stata inserita o meno un'assenza\n\t\t\t\tif (absences != null){\n\t\t\t\t\tfor (int i=0; i<absences.length; i++){\n\t\t\t\t\t\tif (Integer.valueOf(absences[i]) == student.getId()){\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tif (!managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\t\t\ttmpAbsence = new Absence();\n\t\t\t\t\t\t\t\ttmpAbsence.setAcademicYear(classroom.getAcademicYear());\n\t\t\t\t\t\t\t\ttmpAbsence.setDateAbsence(date);\n\t\t\t\t\t\t\t\ttmpAbsence.setIdJustify(0);\n\t\t\t\t\t\t\t\ttmpAbsence.setIdUser(student.getId());\n\t\t\t\t\t\t\t\tmanagerRegister.insertAbsence(tmpAbsence);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag){\n\t\t\t\t\t\tif (managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\t\tmanagerRegister.deleteAbsence(tmpRegisterLine.getAbsence());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (managerRegister.hasAbsence(tmpRegisterLine)){\n\t\t\t\t\t\tmanagerRegister.deleteAbsence(tmpRegisterLine.getAbsence());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tflag = false;\n\t\t\t\t\n\t\t\t\t//Verifico se per lo studente e' stata inserito o meno un ritardo\n\t\t\t\tif (delays != null){\n\t\t\t\t\tfor (int i=0; i<delays.length; i++){\n\t\t\t\t\t\tif (Integer.valueOf(delays[i]) == student.getId()){\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tif (!managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\t\t\ttmpDelay = new Delay();\n\t\t\t\t\t\t\t\ttmpDelay.setAcademicYear(classroom.getAcademicYear());\n\t\t\t\t\t\t\t\ttmpDelay.setDateDelay(date);\n\t\t\t\t\t\t\t\ttmpDelay.setIdUser(student.getId());\n\t\t\t\t\t\t\t\ttmpDelay.setTimeDelay(pRequest.getParameter(\"hour_\" + student.getId()));\n\t\t\t\t\t\t\t\tmanagerRegister.insertDelay(tmpDelay);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttmpDelay = tmpRegisterLine.getDelay();\n\t\t\t\t\t\t\t\ttmpDelay.setTimeDelay(pRequest.getParameter(\"hour_\" + student.getId()));\n\t\t\t\t\t\t\t\tmanagerRegister.updateDelay(tmpDelay);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag){\n\t\t\t\t\t\tif (managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\t\tmanagerRegister.deleteDelay(tmpRegisterLine.getDelay());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (managerRegister.hasDelay(tmpRegisterLine)){\n\t\t\t\t\t\tmanagerRegister.deleteDelay(tmpRegisterLine.getDelay());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\n\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + e.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + e.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca83"},"name":"ServletShowJustifyList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowJustifyList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6666791203700528449L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\t\n\t\tString gotoPage = \"./registerManagement/showJustifyList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister  managerRegister= ManagerRegister.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\tString student =pRequest.getParameter(\"student\");\n\t\t\n\t\tint st = Integer.parseInt(student);\n\t\tClassroom classroom=(Classroom)session.getAttribute(\"classroom\");\n\t\t\n\t\t\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\tUser userStudent=managerUser.getUserById(st);\n\t\t\t\n\t\t\tCollection<Absence> absenceList =(Collection<Absence>)managerRegister.getAbsenceByIDUserAndAcademicYear(st, classroom.getAcademicYear());\n\t\t\tsession.setAttribute(\"absenceList\", absenceList);\n\t\t\tsession.setAttribute(\"utente\", userStudent);\n\t\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();}\n\t\t\n\t\t\n\t}\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca84"},"name":"PermissionException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un utente\n  * tenta di compiere un'operazione per la quale non ha il permesso.\n  */\npublic class PermissionException extends Exception {\n\t\n\tprivate static final long serialVersionUID = 1881009447251825664L;\n\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t */\n\tpublic PermissionException() {\n\t\tsuper(\"Permission Denied!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic PermissionException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca85"},"name":"ServletShowStudentsByClass.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.*;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowStudentsByClass extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli alunni associati ad una Classe.\n\t * \n\t * @author Giulio D'Amora\n\t * \n\t */\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2020233250419553067L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showStudentsByClass.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tint idClassroom = Integer.valueOf(pRequest\n\t\t\t\t\t.getParameter(\"idClassroom\"));\n\t\t\tClassroom classroom = ManagerClassroom.getInstance().getClassroomByID(idClassroom);\n\t\t\tCollection<UserListItem> students = (Collection<UserListItem>) managerUser\n\t\t\t\t\t.getStudentsByClassroomId(idClassroom);\n\t\t\tsession.setAttribute(\"StudentList\", students);\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca86"},"name":"MailUtility.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.utility;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.Properties;\nimport javax.mail.*;\nimport javax.mail.internet.*;\n\n\npublic class MailUtility {\n\n\tpublic static void sendMail(String pSender, String pReceiver, String pSubject, String pText) throws MessagingException, UnsupportedEncodingException {\n\t\t\n\t\t// Creazione di una mail session\n\t\tProperties props = new Properties();\n\t\tprops.put(\"mail.smtp.host\", Utility.getServerSmtp());\n\t\tSession session = Session.getDefaultInstance(props);\n\n\t\t// Creazione del messaggio da inviare\n\t\tMimeMessage message = new MimeMessage(session);\n\t\tmessage.setSubject(pSubject);\n\t\tmessage.setText(pText);\n\n\t\t// Aggiunta degli indirizzi del mittente e del destinatario\n\t\tInternetAddress fromAddress = new InternetAddress(pSender);\n\t\tInternetAddress toAddress = new InternetAddress(pReceiver);\n\t\tmessage.setFrom(fromAddress);\n\t\tmessage.setRecipient(Message.RecipientType.TO, toAddress);\n\n\t\t// Invio del messaggio\n\t\tTransport.send(message);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca87"},"name":"DefaultException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione predefinita generata dal sistema.\n  */\npublic class DefaultException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -8985617134055655964L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic DefaultException() {\n\t\tsuper();\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DefaultException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca88"},"name":"Votes.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\nimport smos.exception.InvalidValueException;\n\n/**\n * \n * Classe utilizzata per modellare una voto.\n * \n * @author Luigi Colangelo \n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class Votes implements Serializable {\n\n\t/**\n\t * Classe utilizzata per modellare un voto\n\t * \n\t */\n\tprivate static final long serialVersionUID = 3014235634635608576L;\n    private int id_votes;\n    private int id_user;\n    private int teaching;\n    private int written;\n    private int oral;\n    private int laboratory;\n    private int accademicYear;\n    private int turn;\n    \n    /**\n     * Il costruttore della classe\n     */\n    public Votes(){\n    \tid_votes=0;\n    }\n    \n    /**\n     * Metodo che restituisce l'id del voto.\n     * @return l'id del voto\n     */\n\tpublic int getId_votes() {\n\t\treturn id_votes;\n\t}\n\t\n\t/**\n\t * Metodo che setta l'id del voto\n\t * @param pId_votes\n     *             l'id da settare\n\t */\n\tpublic void setId_votes(int pId_votes) {\n\t\tthis.id_votes = pId_votes;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'id dell'utente collegato al voto\n\t * @return l'id dell'utente\n\t */\n\tpublic int getId_user() {\n\t\treturn id_user;\n\t}\n\t\n\t/**\n\t * Metodo che setta l'id dell'utente relativo al voto\n\t * @param pId_user\n\t *               l'id da settare\n\t */\n\tpublic void setId_user(int pId_user) {\n\t\tthis.id_user = pId_user;\n\t}\n\t\n\t/**\n\t * metodo che restituisce il codice dell'insegnamento del voto\n\t * @return il metodo dell'insegnamento\n\t */\n\tpublic int getTeaching() {\n\t\treturn teaching;\n\t}\n\t\n\t/**\n\t * Metodo che setta il codice dell'insegnamento relativo al voto\n\t * @param pTeaching\n\t *              il codice dell'insegnamento\n\t */\n\tpublic void setTeaching(int pTeaching) {\n\t\tthis.teaching = pTeaching;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto dello scritto \n\t * @return il voto nello scritto \n\t */\n\tpublic int getWritten() {\n\t\treturn written;\n\t}\n\t\n\t/**\n\t * Metodo che setta il voto dello scritto, controllando che esso sia compreso tra 0 e 10\n\t * @param pWritten\n\t */\n\tpublic void setWritten(int pWritten) throws InvalidValueException {\n\t\tif (pWritten < 0 || pWritten > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.written = pWritten;\n\t}\n\t\n\t/**\n\t *  metodo che restituisce il voto dell' orale\n\t * @return il voto dell'orale\n\t */\n\tpublic int getOral() {\n\t\treturn oral;\n\t}\n\t\n\t/**\n\t * Metodo che setta il voto dell'orale, controllando che esso sia compreso tra 0 e 10 \n\t * @param pOral\n\t *            il voto dell'orale da settare\n\t */\n\tpublic void setOral(int pOral) throws InvalidValueException{\n\t\tif (pOral < 0 || pOral > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.oral = pOral;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto del laboratorio\n\t * @return il voto del laboratorio\n\t */\n\tpublic int getLaboratory() {\n\t\treturn laboratory;\n\t}\n\t\n\t/**\n\t * metodo che setta il voto del laboratorio, controllando che esso sia compreso tra 0 e 10\n\t * @param pLaboratory\n\t *                 il voto del laboratorio da settare\n\t */\n\tpublic void setLaboratory(int pLaboratory)throws InvalidValueException {\n\t\tif (pLaboratory < 0 || pLaboratory > 10)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.laboratory = pLaboratory;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce l'anno accademico del voto\n\t * @return l'anno accademico\n\t */\n\tpublic int getAccademicYear() {\n\t\treturn accademicYear;\n\t}\n\t\n\t/**\n\t * metodo che setta l'anno accademico del voto\n\t * @param pAccademicYear\n\t */\n\tpublic void setAccademicYear(int pAccademicYear) {\n\t\tthis.accademicYear = pAccademicYear;\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il quadrimestre del voto \n\t * @return il semestre del voto (0 o 1)\n\t */\n\tpublic int getTurn() {\n\t\treturn turn;\n\t}\n\t\n\t/**\n\t * Metodo che setta il quadrimestre del voto\n\t * @param pTurn\n\t *            il semestre del voto da settare\n\t */\n\tpublic void setTurn(int pTurn) {\n\t\tthis.turn = pTurn;\n\t}\n\t\n\tpublic String toString(){\n\t\treturn(\"id voto= \"+id_votes+\" id user= \"+id_user+\" id insegnamento= \"+teaching+\" scritto= \"+written+\" orale= \"+oral+\" laboratorio= \"+laboratory+\" anno accademico= \"+accademicYear+\" quadrimestre= \"+turn);\n\t}\n    \n \n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca89"},"name":"ServletShowClassroomList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8468821050771730936L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/classroomManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\t\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(Integer.valueOf(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca8a"},"name":"managerUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca65"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca60"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca73"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n\n<%@ page import=\"smos.bean.*\" %>\n<%@ page import=\"smos.storage.ManagerUser\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"display\" uri=\"http://displaytag.sf.net\" %>\n<%@ page import=\"smos.utility.Utility\"%>\n\n<%\n\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\tif ((loggedUser == null) || ((!ManagerUser.getInstance().isAdministrator(loggedUser)))) {\n\t\tresponse.sendRedirect(\"../index.htm\");\n\t\treturn;\n\t}\n%>\n\n<html>\n<head>\n\n\t<title>School MOnitoring System</title>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" >\n\t<link rel=\"stylesheet\" href=\"../../stylesheets/generic.css\" type=\"text/css\">\n\t<link rel=\"stylesheet\" href=\"../../stylesheets/display.css\" type=\"text/css\">\n</head>\n\n<body>\n\t\t\n\t  <div id=\"container\">\n\t  \n\t  \t   <div id=\"header\">\n\t\t   \t    \n\t\t\t</div>\n\t\t   \t      \n\t\t\t<div id=\"content_center\" style=\"overflow-y:scroll;\">\n\t\t    \n            <div id=\"navigation\">\n           <a class=\"genericLink\" href=\"<% if (ManagerUser.getInstance().isAdministrator(loggedUser)){%>../../homePage/homeAdmin.jsp<%}%>\">Home</a> -> <font style=\"color:#0066FF; font-size:9pt\">Gestione Utenti</font>\n           </div>\n            \n            <div id=\"userspace\">\n\t\t\t\t User: <b><%=loggedUser.getFirstName() + \" \" + loggedUser.getLastName()%></b><br>\n                 [<a style=\"font-size:11px\" class=\"genericLink\" href=\"../../logout\">Esci</a>, <a style=\"font-size:11px\" class=\"genericLink\" href=\"../userManagement/alterPersonalDate.jsp\">Modifica Password</a>]\n\t\t\t</div>\n           \n\t\t  \n\n\t\t   <h1 align=\"left\"> GESTIONE UTENTI </h1>\n\n           <table id=\"transparent\" align=\"center\">\n           <tr id=\"transparent\">\n           <td id=\"transparent\">\n\t\t<% if (ManagerUser.getInstance().isAdministrator(loggedUser)) {%>\n           <p class=\"button\"><a class=\"menuLink\" href=\"../userManagement/insertUser.jsp\">Nuovo Utente</a></p>\n\t\t<%}%>\n           </td>\n           </tr>\n           </table>\n\t\t   \n\t\t   <br>\n\t\t   <display:table name=\"sessionScope.userList\" pagesize=\"15\" sort=\"list\" id=\"user\" defaultsort=\"1\" class=\"datatable\" export=\"true\">\n\t\t\t\t<display:setProperty name=\"basic.msg.empty_list\">\n\t\t\t\t\t<caption>\n\t\t\t\t\t\t<p>Non ci sono utenti da visualizzare</p>\n\t\t\t\t\t</caption>\n\t\t\t\t</display:setProperty>\n\t\t\t\t\n    \t\t\t<display:setProperty name=\"export.pdf\" value=\"true\"/>\t\t\t\t\n\t\t\t\t<display:column property=\"name\" title=\"Nome\" style=\"width:200px\" sortable=\"true\" headerClass=\"tdHeaderColumn\"/>\n\t\t\t\t<display:column property=\"EMail\" style=\"width:200px\" title=\"e-mail\" sortable=\"true\" headerClass=\"tdHeaderColumn\"/>\t\n\t\t\t\t\n\t\t\t\t<display:column style=\"width:25px\" title=\"Visualizza\" sortable=\"false\" headerClass=\"tdHeaderColumn\"> \n\t\t\t\t<%  if (((UserListItem)user).getId()!=0) { %>\n\t\t\t\t\t<a href=\"../../showUserDetails?userId=<%=((UserListItem)user).getId()%>\"><img src=\"../../images/details.jpg\" border=\"none\"></a>\n\t\t\t\t<% } %>\n\t\t\t\t</display:column>\n\t       \t</display:table>\n\t\t\t\t\n\t\t   </div>\n\t\t   \n\t\t   <div id=\"footer\">\n\t\t   \t\t<p><%= Utility.getTextFooter() %></p>\n\t\t   </div>\n\t  \n\t  </div>\n\n</body>\n</html>"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca8b"},"name":"ServletShowUserList.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli utenti.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserList extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/managerUser.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<UserListItem> userList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error0.jsp\";\n\t\t\t} \n\t\t\t\t\n\t\t\tuserList = managerUser.getUserList();\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"userList\", userList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error1.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error2.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error3.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error4.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error5.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca8c"},"name":"AdaptorException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * AdaptorException\n *\n */\n\npackage smos.storage.connectionManagement.exception;\n\nimport java.rmi.RemoteException;\n\n/**\n * Thrown when a problem occurs running code in ensj.\n */\npublic class AdaptorException extends RemoteException {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \n     */\n    public AdaptorException() {\n        super();\n    }\n\n    /**\n     * @param pMessage\n     */\n    public AdaptorException(String pMessage) {\n        super(pMessage + buildLabel());\n    }\n\n    /**\n     * @param pMessage\n     * @param pParentException\n     */\n    public AdaptorException(String pMessage, Exception pParentException) {\n        super(pMessage + buildLabel(), pParentException);\n    }\n\n    /**\n     * @param pParentException\n     */\n    public AdaptorException(Exception pParentException) {\n        super(buildLabel(), pParentException);\n    }\n\n    private static String buildLabel() {\n        return \" [1]\";\n    }\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca8d"},"name":"ServletShowTeacherTeachingFormByClass.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeacherTeachingFormByClass extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t//User teacher = (User) session.getAttribute(\"user\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// recuperiamo l'id della classe selezionata\n\t\t\tint selectedClassId = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t\t//Calcoliamo l'elenco degli insegnamenti associati alla class eselezionata\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(selectedClassId);\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tClassroom selectedClass = ManagerClassroom.getInstance().getClassroomByID(selectedClassId);\n\t\t\tsession.setAttribute(\"selectedClass\", selectedClass);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca8e"},"name":"ServletShowNoteDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowNoteDetails extends HttpServlet {\n\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 7648669052646601677L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tif(pRequest.getParameter(\"update\")==null){\n\t\t\t\tUser student =(User) session.getAttribute(\"student\"); \n\t\t\t\t\t//managerUser.getUserById(Integer.valueOf((String)pRequest.getAttribute(\"student\")));\n\t\t\t\tsession.setAttribute(\"student\", student);\n\t\t\t\tsession.setAttribute(\"idStudent\", student.getId());\n\t\t\t\tsession.setAttribute(\"note\", ((ManagerRegister) managerRegister).getNoteById(Integer.valueOf(pRequest.getParameter(\"noteId\"))));\n\t\t\t\tgotoPage=\"./registerManagement/showNoteDetails.jsp\";\n\t\t\t}else{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNote nNote= new Note();\n\t\t\t\tnNote.setAcademicYear(((Classroom) session.getAttribute(\"classroom\")).getAcademicYear());\n\t\t\t\tnNote.setDateNote(Utility.String2Date(pRequest.getParameter(\"dateNote\")));\n\t\t\t\tnNote.setIdUser((Integer) session.getAttribute(\"idStudent\"));\n\t\t\t\tnNote.setTeacher(pRequest.getParameter(\"noteTeacher\"));\n\t\t\t\tnNote.setDescription(pRequest.getParameter(\"noteDescription\"));\n\t\t\t\tnNote.setIdNote(((Note)session.getAttribute(\"note\")).getIdNote());\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tmanagerRegister.updateNote(nNote);\n\t\t\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\t}catch(MandatoryFieldException e){\n\t\t\t\t\tsession.setAttribute(\"error\", e.getMessage());\n\t\t\t\t\tgotoPage=\"./registerManagement/showNoteDetails.jsp\";\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca8f"},"name":"UserTest.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage;\n\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport smos.bean.Address;\nimport smos.bean.Teaching;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class UserTest {\n\n\t/**\n\t * @param args\n\t * @throws InvalidValueException \n\t * @throws ConnectionException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws MandatoryFieldException \n\t */\n\tpublic static void main(String[] args) throws SQLException, EntityNotFoundException, ConnectionException, InvalidValueException, MandatoryFieldException {\n\t\t\n\tUserListItem temp =new UserListItem();\n\ttemp.setId(5);\n\tTeaching teaching = new Teaching();\n\tteaching.setId(3);\n\tManagerVotes mv = ManagerVotes.getInstance();\n\tVotes ghh = new Votes();\n\tghh.setAccademicYear(2134);\n\tghh.setId_user(88);\n\tghh.setLaboratory(3);\n\tghh.setOral(4);\n\tghh.setTeaching(9);\n\tghh.setTurn(2);\n\tghh.setWritten(3);\n\tmv.insert(ghh);\n\t}\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca90"},"name":"ServletRemoveStudentClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletRemoveStudentClassroom extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\t\n\t\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\tClassroom classroom = (Classroom)session.getAttribute(\"classroom\");\n\t\t\tint idClassroom= classroom.getIdClassroom();\n\t\t\t\n\t\t\tCollection <UserListItem> studentClass= (Collection<UserListItem>)managerUser.getStudentsByClassroomId(idClassroom);\n\t\t\tIterator<UserListItem> itStudent = null;\n\t\t\tif (studentClass != null){\n\t\t\t\titStudent = studentClass.iterator();\n\t\t\t}\n\t\t\t\t\n\t\t\twhile((itStudent != null) && (itStudent.hasNext())){ \n\t\t\t\tUserListItem stud = (UserListItem)itStudent.next();\n\t\t\t\tif(stud.getId()==user.getId())\n\t\t\t\t\tmanagerUser.removeStudentClassroom(user, idClassroom);\n\t\t\t}\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca91"},"name":"ManagerAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.storage;\nimport smos.bean.Address;\nimport smos.bean.Teaching;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n*\n* Classe manager degli indirizzi \n*\n*/\n\npublic class ManagerAddress {\n\n\tprivate static ManagerAddress instance;\n\t\n     /**\n\t * Il nome della tabella degli indirizzi\n\t */\n\tpublic static final String TABLE_ADDRESS = \"address\";\n\tpublic static final String TABLE_ADDRESS_HAS_TEACHING = \"address_has_teaching\";\n\t\n\tprivate ManagerAddress() {\n\t\tsuper();\n\t}\n\t\n\n\t/**\n\t * Ritorna la sola istanza della classe esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerAddress getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance = new ManagerAddress();\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t/**\n\t * Verifica l'esistenza di un indirizzo nel database.\n\t * \n\t * @param pAddress\n\t *            L'indirizzo da controllare.\n\t * @return Ritorna true se esiste già l'indirizzo passato come parametro,\n\t * \t\t\tfalse altrimenti.\n\t *  \n\t * @throws MandatoryFieldException \n\t * @throws SQLException\n\t * @throws MandatoryFieldException\n\t * @throws ConnectionException \n\t * @throws ConnectionException\n\t * @throws SQLException \n\t */\n\t\n\tpublic synchronized boolean hasTeaching(Teaching pTeaching, Address pAddress)\n\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\tInvalidValueException {\nConnection connect = null;\nboolean result = false;\nif (pTeaching.getId() <= 0)\n\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\ntry {\n\tconnect = DBConnection.getConnection();\n\tif (connect == null)\n\t\tthrow new ConnectionException();\n\n\t// Preparimao la stringa sql\n\tString sql = \"SELECT * FROM \"\n\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t+\" AND id_address = \"\n\t\t\t+ Utility.isNull(pAddress.getIdAddress());\n\t// Inviamo la Query al database\n\tResultSet pRs = Utility.queryOperation(connect, sql);\n\tif (pRs.next())\n\t\tresult = true;\n\n\treturn result;\n\n} finally {\n\t// rilasciamo le risorse\n\tDBConnection.releaseConnection(connect);\n\n}\n}\n\n\tpublic synchronized boolean exists (Address pAddress) throws MandatoryFieldException, ConnectionException, SQLException {\n\tboolean result= false;\n\tConnection connect = null;\n\t\n\tif (pAddress.getName() == null)\n\t\tthrow new MandatoryFieldException(\"Specificare il nome.\");\n\ttry{\n\t\t//Otteniamo la connessione al database\n\t\tconnect= DBConnection.getConnection();\n\t\t\n\t\tif (connect == null)\n\t\t\tthrow new ConnectionException();\n\t\t\n\t\tString sql =\" SELECT * FROM \"\n\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t+ \" WHERE name = \"\n\t\t+ Utility.isNull(pAddress.getName());\n\t\t\n\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\t\t\n\t\tif(tRs.next())\n\t\t\tresult = true;\n\t\t\n\t\treturn result;\n\t\t\n\t}\n\tfinally{\n\t\tDBConnection.releaseConnection(connect);\n\t}\n\t}\n\t/**\n\t * Inserisce un nuovo indirizzo nella tabella address.\n\t * \n\t * @param pAddress \n\t * \t\t\tL'indirizzo da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException \n\t * @throws EntityNotFoundException  \n\t * @throws InvalidValueException \n\t */\n\t\n\tpublic synchronized void insert(Address pAddress) \n\tthrows MandatoryFieldException, ConnectionException, \n\tSQLException, EntityNotFoundException, \n\tInvalidValueException{\n\tConnection connect= null;\ntry{\n// controllo dei campi obbligatori\nif(pAddress.getName()==null)\n\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\tconnect = DBConnection.getConnection();\nif (connect==null)\n\tthrow new ConnectionException();\n\t//Prepariamo la stringa Sql\n\tString sql =\n\t\"INSERT INTO \" \n\t+ ManagerAddress.TABLE_ADDRESS \n\t+ \" (name) \" \n\t+ \"VALUES (\" \n\t+ Utility.isNull(pAddress.getName()) \n\t+ \")\";\n\n\tUtility.executeOperation(connect,sql);\n\n\tpAddress.setIdAddress(Utility.getMaxValue(\"id_address\",ManagerAddress.TABLE_ADDRESS));\n\n\t}finally {\n\t\t//rilascia le risorse\n\n\t\tDBConnection.releaseConnection(connect);\n}\n}\n\t/**\n\t * Elimina un indirizzo dalla tabella address.\n\t * \n\t * @param pAddress \n\t * \t\t\tL'indirizzo da eliminare.\n\t * \n\t * @throws MandatoryFieldException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws ConnectionException \n\t * @throws InvalidValueException \n\t * \n\t */\n\tpublic synchronized void delete (Address pAddress) throws ConnectionException, \n\t\t\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\t\n\t\ttry {\n\t\t\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t\t//Prepariamo la stringa SQL\n\t\t\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t\t\t\t+ \" WHERE id_address = \"\n\t\t\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress());\n\t\t\t\n\t\t\t\tUtility.executeOperation(connect, sql);\n\t\t}  \n\t\tfinally {\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\tpublic synchronized void assignTeachingAsAddress (Address pAddress, Teaching pTeaching) throws ConnectionException, \n\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException, DuplicatedEntityException {\nConnection connect = null;\nManagerAddress managerAddress = ManagerAddress.getInstance();\nif(managerAddress.hasTeaching(pTeaching, pAddress))\n\tthrow new DuplicatedEntityException(\"Questo indirizzo ha già quest'insegnamento associato\");\n\ntry {\n\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\tconnect = DBConnection.getConnection();\n\t\t//Prepariamo la stringa SQL\n\t\tString sql = \"INSERT INTO \" \n\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t\t+ \" (id_address, id_teaching) \"\n\t\t\t\t\t+ \" VALUES( \"\n\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress())\n\t\t\t\t\t+ \" , \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t\t\t+ \" )\";\n\t\n\t\tUtility.executeOperation(connect, sql);\n}  \nfinally {\n\t//rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\tpublic synchronized void removeTeachingAsAddress (Address pAddress, Teaching pTeaching) throws ConnectionException, \n\tSQLException, EntityNotFoundException, MandatoryFieldException, InvalidValueException {\nConnection connect = null;\nManagerAddress managerAddress = ManagerAddress.getInstance();\nif(!managerAddress.hasTeaching(pTeaching, pAddress))\n\tthrow new EntityNotFoundException(\"Questo indirizzo non contiene l'insegnamento da rimuovere\");\n\ntry {\n\t//ManagerAddress.getInstance().AddressOnDeleteCascade(pAddress);\n\tconnect = DBConnection.getConnection();\n\t\t//Prepariamo la stringa SQL\n\t\tString sql = \"DELETE FROM \" \n\t\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t\t+ \" WHERE id_address= \"\n\t\t\t\t\t+ Utility.isNull(pAddress.getIdAddress())\t\t\n\t\t\t\t\t+ \" AND id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\t\n\t\tUtility.executeOperation(connect, sql);\n}  \nfinally {\n\t//rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\n\t/**\n\t * Ritorna l'id dell'indirizzo passato come parametro.\n\t * \n\t * @param pAddress\n\t *            L'indirizzo di cui si richiede l'id.\n\t * @return Ritorna l'id dell'indirizzo passato come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized int getAddressId(Address pAddress)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tint result = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tif (pAddress == null)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'indirizzo passato come parametro.\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_address FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS\n\t\t\t\t+ \" WHERE name = \" \n\t\t\t\t+ Utility.isNull(pAddress.getName());\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getInt(\"id_address\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna l'indirizzo corrispondente all'id passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna l'indirizzo associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException \n\t */\n\tpublic synchronized Address getAddressById (int pIdAddress) throws ConnectionException, SQLException, EntityNotFoundException, InvalidValueException{\n\t\tAddress result = null;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t\t\t\t\n\t\t\tif (pIdAddress <= 0) \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \n\t\t\t\t\"SELECT * FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS\n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress);\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\t\n\t\t\tif (pRs.next()) \n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'utente!\");\n\t\t\t\t\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\t//rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna l'insieme di tutti gli indirizzi presenti nel database.\n\t * \n\t * @return Ritorna una collection di indirizzi.\n\t * \n\t * @throws ConnectionException \n\t * @throws EntityNotFoundException \n\t * @throws SQLException \n\t * @throws InvalidValueException \n\t */\n\tpublic synchronized Collection<Address> getAddressList() throws ConnectionException, EntityNotFoundException, SQLException, InvalidValueException{\n\t\tConnection connect = null;\n\t\tCollection<Address> result = new Vector<Address>();;\n\t\t\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t//Prepariamo la stringa sql\n\t\t\tString sql = \"SELECT * \"  \n\t\t\t\t+ \" FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t+ \" ORDER BY id_address\";\n\t\t\t\t\n\t\t\t//Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\t\t\t\n\t\t\tif (tRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(tRs);\t\t\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t//rilascia le risorse\t\t\t\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Ritorna il nome dell'indirizzo corrispondente all'id \n\t * passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna una stringa contenente il nome dell'indirizzo.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized String getAddressNameById(int pIdAddress) throws EntityNotFoundException, ConnectionException, SQLException{\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIdAddress <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'utente passato come parametro \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT name FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS \n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tif (tRs.next()) \n\t\t\t\tresult = tRs.getString(\"name\");\n\t\t\telse \n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\t/**\n\t * Ritorna una collection con gli id degli insegnamenti associati all'id \n\t * passato come parametro.\n\t * \n\t * @param pIdAddress\n\t * \t\t\tL'id dell'indirizzo.\n\t * @return Ritorna una collection con di int \n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\t\n\tpublic synchronized Collection<Integer> getAddressTechings(int pIdAddress) throws EntityNotFoundException, ConnectionException, SQLException, InvalidValueException{\n\t\tCollection<Integer> result;\n\t\tConnection connect = null;\n\t\ttry\n\t\t{\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pIdAddress <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\"Impossibile trovare l'indirizzo!\");\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'utente passato come parametro \n\t\t\t */\n\t\t\tString tSql = \n\t\t\t\t\"SELECT id_teaching FROM \" \n\t\t\t\t+ ManagerAddress.TABLE_ADDRESS_HAS_TEACHING\n\t\t\t\t+ \" WHERE id_address = \" \n\t\t\t\t+ Utility.isNull(pIdAddress) ;\n\t\t\t\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null) \n\t\t\t\tthrow new ConnectionException();\n\t\t\t\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\t\t\t\n\t\t\tresult = this.loadIntegersFromRs(tRs);\n\t\t\treturn result;\n\t\t}finally{\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/*\n\t * Consente la lettura di un record dal ResultSet.\n\t */\n\tprivate Address loadRecordFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tAddress address = new Address();\n\t\taddress.setName(pRs.getString(\"name\"));\n\t\taddress.setIdAddress(pRs.getInt(\"id_address\"));\n\t\treturn address;\n\t}\n\t\n\t/*\n\t * Consente la lettura dei record dal ResultSet.\n\t */\n\tprivate Collection<Address> loadRecordsFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Address> result = new Vector<Address>();\n\t\tdo  {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\t\n\tprivate Collection<Integer> loadIntegersFromRs(ResultSet pRs) throws SQLException, InvalidValueException{\n\t\tCollection<Integer> result = new Vector<Integer>();\n\t\twhile(pRs.next())  {\n\t\t\tresult.add(pRs.getInt(\"id_teaching\"));\n\t\t} \n\t\treturn result;\n\t}\n\t\n\t\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca92"},"name":"ServletAssignParentStudent.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet  che modifica il record dello studente con l'id del padre.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAssignParentStudent extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = -4507225018030147979L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\tint idParent=user.getId();\n\t\t\t\n\t\t\tCollection<UserListItem> students = new Vector<UserListItem>();\n\t\t\tIterator<UserListItem> itStu = null;\n\t\t\t\n\t\t\tstudents = managerUser.getStudents();\n\t\t\t\n\t\t\t\n\t\t\tString[] selectedStudent = pRequest.getParameterValues(\"selectedStudent\");\n\t\t\tString[] unselectedStudent = pRequest.getParameterValues(\"unselectedStudent\");\n\t\t\t\n\t\t\tif (selectedStudent != null) {\n\t\t\t\tint selectedlength = selectedStudent.length;\n\t\t\t\tUserListItem tmp = null;\n\t\t\t\tUser stu=null;\n\t\t\t\tint idStudent=0;\n\t\t\t\tfor (int i = 0; i < selectedlength; i++) {\n\t\t\t\t\titStu = students.iterator();\n\t\t\t\t\tString dd = selectedStudent[i];\n\t\t\t\t\tidStudent=Integer.parseInt(dd);\n\t\t\t\t\twhile(itStu.hasNext()){\n\t\t\t\t\t\t tmp = (UserListItem)itStu.next();\n\t\t\t\t\t\tif(tmp.getId()==idStudent){\t\n\t\t\t\t\t\t\tstu=managerUser.getUserById(tmp.getId());//recupero userStudente\t\n\t\t\t\t\t\t\tmanagerUser.assignParent(stu, idParent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t}\n\t\t\tif (unselectedStudent != null) {\n\t\t\t\titStu=null;\n\t\t\t\tint unselectedlength = unselectedStudent.length;\n\t\t\t\tUserListItem tmp = null;\n\t\t\t\tUser stu=null;\n\t\t\t\tint idStudent=0;\n\t\t\t\tfor (int i = 0; i < unselectedlength; i++) {\n\t\t\t\t\titStu = students.iterator();\n\t\t\t\t\tString dd = unselectedStudent[i];\n\t\t\t\t\tidStudent=Integer.parseInt(dd);\n\t\t\t\t\twhile(itStu.hasNext()){\n\t\t\t\t\t\t tmp = (UserListItem)itStu.next();\n\t\t\t\t\t\tif(tmp.getId()==idStudent){\t\n\t\t\t\t\t\t\tstu=managerUser.getUserById(tmp.getId());//recupero userStudente\t\n\t\t\t\t\t\t\tmanagerUser.removeParent(stu);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}  catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} \n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca93"},"name":"ServletShowClassroomByAcademicYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomByAcademicYear extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8468821050771730936L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showClassroomByAcademicYear.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\t// prendere l'academic year dalla session\n\t\t\tint anno = Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\t\tif (anno != 0){\n\t\t\t\tclassroomList = managerClassroom\n\t\t\t\t\t\t.getClassroomsByAcademicYear(anno);\n\t\t\t}\n\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", anno);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca94"},"name":"Delay.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class Delay implements Serializable {\n\n\t/**\n\t * Classe che modella un entrata in ritardo di uno studente\n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = 78680884161960621L;\n\n\tprivate int idDelay;\n\tprivate int idUser;\n\tprivate Date dateDelay;\n\tprivate String timeDelay;\n\tprivate int academicYear;\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'id del Ritardo \n\t * @return un intero che rappresenta l'id del ritardo \n\t */\n\tpublic int getIdDelay() {\n\t\treturn idDelay;\n\t}\n\t/**\n\t * Metodo che setta l'id del Ritardo \n\t * @param intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdDelay(int pIdDelay) {\n\t\tthis.idDelay = pIdDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente ritardatario \n\t * @return un intero che rappresenta l'id dello studente\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo al ritardo \n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data del ritardo \n\t * @return una stringa che rappresenta la data del ritardo \n\t */\n\tpublic Date getDateDelay() {\n\t\treturn dateDelay;\n\t}\n\t/**\n\t * Metodo che setta la data del ritardo\n\t * @param una stringa che rappresenta la data del ritardo\n\t */\n\tpublic void setDateDelay(Date pDateDelay) {\n\t\tthis.dateDelay = pDateDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'ora d'entrata dello studente\n\t * @return una stringa che rappresenta l'ora di entrata dello studente ritardatario\n\t */\n\tpublic String getTimeDelay() {\n\t\tif (this.timeDelay.length() > 0){\n\t\t\treturn timeDelay.substring(0, 5);\n\t\t} else {\n\t\t\treturn this.timeDelay;\n\t\t}\n\t}\n\t/**\n\t * Metodo che setta l'ora di entrata dello studente \n\t * @param una stringa che rappresenta l'ora di entrata da settare\n\t */\n\tpublic void setTimeDelay(String pTimeDelay) {\n\t\tthis.timeDelay = pTimeDelay;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo all'assenza\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo all'assenza\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca95"},"name":"ServletShowClassroomManagement.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowClassroomManagement extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -3100959843623661377L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\t\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(Integer.valueOf(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca96"},"name":"EntityNotFoundException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando un'entita'\n  * non viene trovata nel database.\n  */\npublic class EntityNotFoundException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -1236105333523133721L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic EntityNotFoundException() {\n\t\tsuper(\"Object Not Found in Repository!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic EntityNotFoundException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca97"},"name":"ServletInsertUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.LoginException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire un utente nel DataBase.\n * \n * @author napolitano Vincenzo.\n *\n */\npublic class ServletInsertUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3860569607870099419L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showUserList\";\n\t\tString errorMessage = \"\";\n\t\t\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tUser user = new User();\n\t\t\tuser.setFirstName(pRequest.getParameter(\"firstName\"));\n\t\t\tuser.setLastName(pRequest.getParameter(\"lastName\"));\n\t\t\tuser.setCell(pRequest.getParameter(\"cell\"));\n\t\t\tuser.setEMail(pRequest.getParameter(\"eMail\"));\n\t\t\t\n\t\t\t/*\n\t\t\t * verifichiamo che la login sia unica.\n\t\t\t */\n\t\t\tString login = pRequest.getParameter(\"login\");\n\t\t\tuser.setLogin(login);\n\t\t\t\n\t\t\tif (managerUser.existsLogin(user)) \n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\t\n\t\t\tif (pRequest.getParameter(\"password\").equals(pRequest.getParameter(\"password1\"))){\n\t\t\t\t\t\tuser.setPassword((pRequest.getParameter(\"password\")));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthrow new LoginException(\"I valori inseriti per la password non coincidono!\");\n\t\t\t}\n\t\t\t//inserimento utente\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.insert(user);\n\t\t\t\tsession.setAttribute(\"user\", user);\n\t\t\t\n\t\t\t\t\n\t\t\t}else \n\t\t\t\tthrow new DuplicatedEntityException(\"Utente gia' esistente\");\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (LoginException loginException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + loginException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tloginException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca98"},"name":"UserListItem.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca65"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca60"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca73"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\n/**\n * Classe utilizzata per modellare le informazioni principali \n * di un utente.\n */\npublic class UserListItem implements Serializable{\n\n\tprivate static final long serialVersionUID = 3436931564172045464L;\n\n\tprivate String name;\n\tprivate String eMail;\n\tprivate int id;\n\t\n\t\n\t\n\t/**\n\t * @return Ritorna l'id dell'utente.\n\t */\n\tpublic int getId() {\n\t\treturn this.id;\n\t}\n\t\n\t/**\n\t * Setta l'id dell'utente.\n\t * @param pId\n\t * \t\t\tL'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id = pId;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\t\n\t/**\n\t * Setta il nome dell'utente.\n\t * @param pName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\n\t/**\n\t * @return the eMail\n\t */\n\tpublic String getEMail() {\n\t\treturn this.eMail;\n\t}\n\n\t/**\n\t * @param mail the eMail to set\n\t */\n\tpublic void setEMail(String pMail) {\n\t\tthis.eMail = pMail;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca99"},"name":"ServletShowReports.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.application.reportManagement;\n\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli insegnamenti.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowReports extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1361713427864776624L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showReports.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Votes> votesList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tint studentId = Integer.valueOf(pRequest.getParameter(\"student\"));\n\t\t\tInteger year=(Integer) session.getAttribute(\"selectedYear\");\n\t\t\tInteger turn=Integer.valueOf(pRequest.getParameter(\"q\"));\n\t\t\tsession.setAttribute(\"q\", turn);\n\t\t\tvotesList = managerVotes.getVotesByUserIdYearTurn(studentId,year,turn);\n\t\t\tUser u = (User) managerUser.getUserById(studentId);\n\t\t\tUserListItem st=new UserListItem();\n\t\t\tst.setName(u.getName());\n\t\t\tst.setEMail(u.getEMail());\n\t\t\tst.setId(u.getId());\n\t\t\tsession.setAttribute(\"std\", st);\n\t\t\tsession.setAttribute(\"votesList\", votesList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca9a"},"name":"ServletAlterPersonalDate.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca65"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca60"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca73"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet di modifica Password dell'utente loggato.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAlterPersonalDate extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser user = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\n\t\t\t//verifichiamo che la login sia unica.\n\t\t\tif (managerUser.existsLogin(user))\n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\tuser.setPassword(pRequest.getParameter(\"pass\"));\n\t\t\t//aggiorniamo\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.update(user);\n\t\t\t}else {\n\t\t\t\tint userId = managerUser.getUserId(user);\n\t\t\t\tif (user.getId()==userId)\n\t\t\t\t\tmanagerUser.update(user);\n\t\t\t\telse \n\t\t\t\t\tthrow new DuplicatedEntityException(\"Utente già esistente\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n}\n\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca9b"},"name":"ServletUpdateJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletUpdateJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 8405877983387271542L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\tJustify justify = (Justify) session.getAttribute(\"justify\");\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tString idClassroom=(String) session.getAttribute(\"idClassroom\");\n\t\tint id= Integer.parseInt(idClassroom);\n\t\tgotoPage+=\"?idClassroom=\"+id;\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tjustify.setAcademicYear(Integer.parseInt((pRequest.getParameter(\"academicYear\"))));\n\t\t\tjustify.setDateJustify(Utility.String2Date(pRequest.getParameter(\"date\")));\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * verifichiamo che la giustifica esista.\n\t\t\t */\n\t\t\n\t\t\tif (!mR.exists(justify)){\n\t\t\t\terrorMessage=\"la giustifica non esiste!!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\t\n\t\t\t}else {//aggiorniamo\n\t\t\t\tmR.updateJustify(justify);\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca9c"},"name":"ServletInsertTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.*;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire un insegnamento nel DataBase.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletInsertTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 4519458598257606331L;\n\n\t/**\n\t * \n\t */\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t// String isWizard = \"yes\";\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tTeaching teaching = new Teaching();\n\t\t\tteaching.setName(pRequest.getParameter(\"name\"));\n\n\t\t\tif (!managerTeaching.exists(teaching)) {\n\t\t\t\tmanagerTeaching.insert(teaching);\n\t\t\t\tsession.setAttribute(\"teaching\", teaching);\n\t\t\t\t// session.setAttribute(\"isWizard\", isWizard);\n\n\t\t\t} else\n\t\t\t\tthrow new DuplicatedEntityException(\n\t\t\t\t\t\t\"Insegnamento gia' esistente\");\n\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca9d"},"name":"ServletDeleteReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.application.reportManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteReport extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli alunni associati ad una Classe.\n\t * \n\t * @author Giulio D'Amora\n\t * \n\t */\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2020233250419553067L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/showStudentsByClass.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint year= 0;\n\t\tint turn=0;\n\t\tint studentId=0;\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error2.jsp\";\n\t\t\t}\n\t\t\tUserListItem student = (UserListItem) (session.getAttribute(\"student\"));\n\t\t\tstudentId = student.getId();\n\t\t\tyear=(Integer) session.getAttribute(\"selectedYear\");\n\t\t\tturn=(Integer) session.getAttribute(\"q\");\n\t\t\tmanagerVotes.deleteVotesByUserIdYearTurn(studentId, year, turn);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error1.jsp?Year=\"+year+\"&turn=\"+turn+\"&idStudent=\"+studentId;\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error3.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error4.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error5.jsp?Year=\"+year+\"&turn=\"+turn+\"&idStudent=\"+studentId;\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca9e"},"name":"ServletUpdateReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per aggiornare la pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletUpdateReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -1045906657573424217L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showReports\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tIterator<Teaching> itTeaching = teachingList.iterator();\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\t\t\tTeaching teachingTemp = null;\n\t\t\tint idTemp;\n\t\t\tString write, oral, lab;\n\t\t\tgotoPage += \"?student=\" + student.getId() + \"&q=\" + turn;\n\t\t\twhile (itTeaching.hasNext()) {\n\t\t\t\tteachingTemp = itTeaching.next();\n\t\t\t\tidTemp = teachingTemp.getId();\n\t\t\t\twrite = \"scritto_\" + idTemp;\n\t\t\t\toral = \"orale_\" + idTemp;\n\t\t\t\tlab = \"laboratorio_\" + idTemp;\n\t\t\t\twrite = pRequest.getParameter(write);\n\t\t\t\toral = pRequest.getParameter(oral);\n\t\t\t\tlab = pRequest.getParameter(lab);\n\t\t\t\tVotes newVotes = new Votes();\n\t\t\t\t// SE il voto non esiste dobbiamo crearlo\n\t\t\t\tint idVoto = managerVotes.getIdVotes(teachingTemp, year, turn,\n\t\t\t\t\t\tstudent);\n\t\t\t\tint writeInt=0, oralInt=0,labInt=0;\n\t\t\t\tif(write!=\"\")\n\t\t\t\t\twriteInt = Integer.valueOf(write);\n\t\t\t\tif(oral!=\"\")\n\t\t\t\t\toralInt = Integer.valueOf(oral);\n\t\t\t\tif(lab!=\"\")\n\t\t\t\t\tlabInt = Integer.valueOf(lab);\n\t\t\t\tif (idVoto <= 0) {\n\t\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\t\tnewVotes.setAccademicYear(year);\n\t\t\t\t\t\tnewVotes.setId_user(student.getId());\n\t\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\t\tnewVotes.setTeaching(idTemp);\n\t\t\t\t\t\tnewVotes.setTurn(turn);\n\t\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\t\tmanagerVotes.insert(newVotes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Se il voto esiste dobbiamo aggiornarlo\n\t\t\t\telse {\n\t\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\t\tnewVotes = managerVotes.getVotesById(idVoto);\n\t\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\t\tmanagerVotes.update(newVotes);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tmanagerVotes.delete(managerVotes.getVotesById(idVoto));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46ca9f"},"name":"ServletComputateStatistics.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletComputateStatistics extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 6690162445433486239L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./statisticsManagement/showStatistictsByAcademicYear.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tInteger academicYear = Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\tInteger absenceLimit = Integer.valueOf(pRequest.getParameter(\"absenceLimit\"));\n\t\tInteger noteLimit = Integer.valueOf(pRequest.getParameter(\"noteLimit\"));\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tCollection <User> alertStudentAbsence = new Vector<User>();\n\t\t\n\t\tDate today = new Date();\n\t\t\n\t\t\n\t\t\n\t\tint [][] unjustifiedAbsence = null;\n\t\t\n\t\tCollection <User> alertStudentNote = new Vector<User>();\n\t\t\n\t\tint [][] note = null;\n\t\t\n\t\tUser tmpUser = null;\n\t\t\n\t\ttry {\n\t\t\n\t\tif (loggedUser == null) {\n\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\treturn;\n\t\t}\n\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\tif (academicYear == 0){\n\t\t\tacademicYear = today.getYear() + 1900;\n\t\t}\n\t\t\n\t\tCollection <Integer> academicYearList = ManagerClassroom.getInstance().getAcademicYearList();\n\t\t\n\t\tunjustifiedAbsence = managerUser.getHighlightsStudentAbsence(academicYear);\n\t\t\n\t\tif (unjustifiedAbsence != null){\n\t\t\tfor (int i=0; i< unjustifiedAbsence.length; i++){\n\t\t\t\t\tif (unjustifiedAbsence[i][0] >= absenceLimit){\n\t\t\t\t\t\ttmpUser = managerUser.getUserById(unjustifiedAbsence[i][1]);\n\t\t\t\t\t\talertStudentAbsence.add(tmpUser);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tnote = managerUser.getHighlightsStudentNote(academicYear);\n\t\t\n\t\tif (note != null){\n\t\t\tfor (int i=0; i< note.length; i++){\n\t\t\t\t\tif (note[i][0] >= noteLimit){\n\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmpUser = managerUser.getUserById(note[i][1]);\n\t\t\t\t\t\t\n\t\t\t\t\t\talertStudentNote.add(tmpUser);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tsession.setAttribute(\"alertStudentAbsence\", alertStudentAbsence);\n\t\tsession.setAttribute(\"alertStudentNote\", alertStudentNote);\n\t\tsession.setAttribute(\"academicYearList\", academicYearList);\n\t\tsession.setAttribute(\"absenceLimit\", absenceLimit);\n\t\tsession.setAttribute(\"noteLimit\", noteLimit);\n\t\tsession.setAttribute(\"yearSelected\", academicYear);\n\t\t\n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa0"},"name":"ServletLoadReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per caricare la Pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -1045906657573424217L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./reportsManagement/updateReport.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Votes> votesList = null;\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Lista Voti\n\t\t\tvotesList = managerVotes.getVotesByUserIdYearTurn(student.getId(),\n\t\t\t\t\tyear, turn);\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tsession.setAttribute(\"votesList\", votesList);\n\t\t\t// provare i dati\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa1"},"name":"ServletAddTeachingAsTeacher.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletAddTeachingAsTeacher extends HttpServlet {\n\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 4931185354259866391L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerClassroom managerClass = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono i 3 Id user class teachings(che non so quanti ne sono)\n\t\t\tint idTeacher = (int) ((User) session.getAttribute(\"user\")).getId();\n\t\t\tUser teacher = managerUser.getUserById(idTeacher); \n\t\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tString[] idTeachingList = pRequest.getParameterValues(\"selectedTeachings\");\n\t\t\tint nTeaching =idTeachingList.length;\n\t\t\tint temp;\n\t\t\t//Collection<Teaching> listSelcected = new Vector<Teaching>();\n\t\t\tif(idTeachingList==null)\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\telse{\n\t\t\t\tfor(int i=0;i<nTeaching;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idTeachingList[i]);\n\t\t\t\t\tif(!managerUser.hasTeaching(teacher,managerTeaching.getTeachingById(temp),managerClass.getClassroomByID(idClass))){\n\t\t\t\t\t\tmanagerUser.assignTeacherAtClassroomTeaching(teacher,idClass,temp);\n\t\t\t\t\t\t//listSelcected.add(managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa2"},"name":"User.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca65"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca60"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca73"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"\tpackage smos.bean;\n\nimport smos.exception.InvalidValueException;\n\nimport java.io.Serializable;\n\n/**\n *  Classe utilizzata per modellare un utente.\n *\n * \n */\npublic class User implements Serializable{\n\t\n\n\tprivate static final long serialVersionUID = 7272532316912745508L;\n\t\n\t\n\tprivate int id;\n\tprivate String login;\n\tprivate String password;\n\tprivate String firstName;\n\tprivate String lastName;\n\tprivate int idParent;\n\tprivate String cell;\n\tprivate String eMail;\n\t\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic User(){\n\t\tthis.id = 0 ;\n\t}\n\t\n\t\n\t/**\n\t * @return Ritorna la login dell'utente.\n\t */\n\tpublic String getLogin() {\n\t\treturn this.login;\n\t}\n\t\n\t/**\n\t * Setta la login dell'utente.\n\t * @param pLogin\n\t * \t\t\tLa login da settare.\n\t * \n\t * @throws InvalidValueException \n\t */\n\tpublic void setLogin(String pLogin) throws InvalidValueException {\n\t\tif(pLogin.length()<=4)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\t\tthis.login = pLogin;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getName() {\n\t\treturn this.lastName + \" \" + this.firstName;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell'utente.\n\t */\n\tpublic String getFirstName() {\n\t\treturn this.firstName;\n\t}\n\t\n\t/**\n\t * Setta il nome dell'utente.\n\t * @param pFirstName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setFirstName(String pFirstName) {\n\t\tthis.firstName = pFirstName;\n\t}\n\t\n\t\n\t/**\n\t * @return Ritorna la password dell'utente.\n\t */\n\tpublic String getPassword() {\n\t\treturn this.password;\n\t}\n\t\n\t/**\n\t * Setta la password dell'utente.\n\t * @param pPassword\n\t * \t\t\tLa password da settare.\n\t * \n\t * @throws InvalidValueException \n\t */\n\tpublic void setPassword(String pPassword) throws InvalidValueException {\n\t\tif(pPassword.length()<=4)\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\tthis.password = pPassword;\n\t}\n\t\n\t/**\n\t * @return Ritorna il cognome dell'utente.\n\t */\n\tpublic String getLastName() {\n\t\treturn this.lastName;\n\t}\n\t\n\t/**\n\t * Setta il cognome dell'utente.\n\t * @param pLastName\n\t * \t\t\tIl cognome da settare.\n\t */\n\tpublic void setLastName(String pLastName) {\n\t\tthis.lastName = pLastName;\n\t}\n\t\n\t/**\n\t * @return Ritorna l'id dell'utente.\n\t */\n\tpublic int getId() {\n\t\treturn this.id;\n\t}\n\t\n\t/**\n\t * Setta l'id dell'utente.\n\t * @param pId\n\t * \t\t\tL'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id = pId;\n\t}\n\t\n\t/**\n\t * Ritorna una stringa contenente nome e cognome dell'utente.\n\t * @see java.lang.Object#toString()\n\t */\n\tpublic String toString() {\n\t\treturn this.getFirstName() \n\t\t+ \" \" \n\t\t+ this.getLastName();\n\t}\n\t\n\t/**\n\t * @return the eMail\n\t */\n\tpublic String getEMail() {\n\t\treturn this.eMail;\n\t}\n\t/**\n\t * @param pMail the eMail to set\n\t */\n\tpublic void setEMail(String pMail) {\n\t\tthis.eMail = pMail;\n\t}\n\n\n\t/**\n\t * @return the cell\n\t */\n\tpublic String getCell() {\n\t\treturn this.cell;\n\t}\n\n\n\t/**\n\t * @param cell the cell to set\n\t */\n\tpublic void setCell(String pCell) {\n\t\tthis.cell = pCell;\n\t}\n\n\n\t/**\n\t * @return the idParent\n\t */\n\tpublic int getIdParent() {\n\t\treturn this.idParent;\n\t}\n\n\n\t/**\n\t * @param idParent the idParent to set\n\t */\n\tpublic void setIdParent(int pIdParent) {\n\t\tthis.idParent = pIdParent;\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa3"},"name":"ServletInsertJustify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Absence;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletInsertJustify extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1252760418542867296L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showClassroomList.jsp\";\n\t\tString errorMessage = \"\";\n\t\t\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t\tJustify justify=new Justify();\n\t\t\tjustify.setAcademicYear(Integer.parseInt(pRequest.getParameter(\"academicYear\")));\n\t\t\t\n\t\t\tjustify.setDateJustify(Utility.String2Date(pRequest.getParameter(\"date\")));\n\t\t\t\n\t\t\tjustify.setIdUser(Integer.parseInt(pRequest.getParameter(\"idUser\")));\n\t\t\tString idA= pRequest.getParameter(\"idAbsence\");\n\t\t\tint idAbsence=Integer.parseInt(idA);\n\t\t\t\n\t\t\t//String idC = pRequest.getParameter(\"idClassroom\");\n\t\t\t//int idClassroom= Integer.parseInt(idC);\n\t\t\t\n\t\t\t//gotoPage+=idClassroom;\n\t\t\tAbsence absence = mR.getAbsenceByIdAbsence(idAbsence);\n\t\t\t\n\t\t\tif(!mR.exists(absence)){\n\t\t\t\terrorMessage =  \"assenza non prensente nel db!\";\t\n\t\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\t//inserimento giustifica\n\t\t\t\n\t\t\tif(!mR.exists(justify)){\n\t\t\t\tmR.insertJustify(justify, absence);\n\t\t\t\tsession.setAttribute(\"justify\", justify);\n\t\t\t\t\n\t\t\t}else \n\t\t\t\tthrow new DuplicatedEntityException(\"Giustifica gia' esistente\");\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa4"},"name":"ControlConnection.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage.connectionManagement;\n\n\nimport java.sql.*;\n\n/**\n * Implementazione del thread in grado di mantenere la connessione al database\n * Mysql qualora non vi siano più connessioni attive (risoluzione del problema\n * dell'autoreconnect di Mysql). Tale classe si occupa anche di richimare il\n * metodo di rilascio delle connessioni attive che non hanno eseguito operazioni\n * in un certo intervallo di tempo.\n */\n\npublic class ControlConnection extends Thread {\n    private static ConnectionPoolDataSource manager = null;\n\n    private static int waitTimeout;\n\n    /**\n     * Crea una nuova istanza del Thread.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @param pManager\n     *            il pool delle connessioni attulamente in esecuzione.\n     */\n\n    public ControlConnection(ConnectionPoolDataSource pManager) {\n        ControlConnection.manager = pManager;\n    }\n\n    /**\n     * Crea una nuova istanza del Thread.\n     * \n     * @param pManager\n     *            il pool delle connessioni attulamente in esecuzione.\n     * @param pTime\n     *            Il tempo entro cui ristabilire la connessione con mysql prima\n     *            che scada.Tale valore dovrà essere necessariamente minore del\n     *            valore della variabile globale wait_timeout di Mysql.\n     */\n\n    public ControlConnection(ConnectionPoolDataSource pManager, int pTime) {\n        ControlConnection.waitTimeout = pTime;\n        ControlConnection.manager = pManager;\n    }\n\n    /**\n     * Il thread non fa altro che dormire quando ci sono utenti attivi e\n     * mantenere aperta la connessione con MySQL altrimenti.\n     * \n     */\n\n    public void run() {\n        try {\n            while (true) {\n                if (manager.activeSize() > 0) {\n                    this.setPriority(Thread.MAX_PRIORITY);\n                    manager.clearActive();\n                    this.setPriority(Thread.NORM_PRIORITY);\n                }\n                if (manager.activeSize() == 0) {\n                    while (true) {\n                        try {\n                            manager.closeAllPooledConnections();\n                            Connection con = null;\n                            con = manager.getConnection();\n                            Statement st = con.createStatement();\n                            st.executeQuery(\"show tables\");\n                            manager.release(con);\n                            break;\n                        } catch (Exception e) {\n                            System.out.println(\"Eccezione geneata \"\n                                    + \"nel Thread ControlConnection:\" + e);\n                        }\n                    }\n                    Thread.sleep(waitTimeout);\n                } else {\n                    Thread.sleep(waitTimeout);\n                }\n            }\n        } catch (InterruptedException ex) {\n            System.out.println(\"Thread ControlConnection interrotto:\" + ex);\n        }\n    }\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa5"},"name":"DBConnection.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * DBConnection\n *\n */\n\npackage smos.storage.connectionManagement;\n\nimport smos.Environment;\nimport smos.utility.Utility;\n\nimport java.sql.*;\nimport java.util.*;\nimport java.io.*;\n\n\n/**\n * Classe che s'interfaccia con il pool di connessioni. In particolare crea un\n * unico oggetto ConnectionPoolDataSource (il pool di connessioni) ed ottiene i\n * suoi parametri di configurazione dal file di properties\n * connection.properties.\n */\n\npublic class DBConnection {\n\n    private static int ACTIVE_TIMEOUT;\n\n    private static String DRIVER_MYSQL = \"\";\n\n    private static String FULL_PATH_DATABASE = \"\";\n\n    private static ControlConnection linker = null;\n\n    private static ConnectionPoolDataSource manager = null;\n\n    private static int MAX_POOL_SIZE;\n\n    private static String PASSWORD = \"\";\n\n    private static int POOL_TIMEOUT;\n\n    private static Properties properties = null;\n\n    private static String USER_NAME = \"\";\n\n    private static int WAIT_TIMEOUT;\n\n    \n   \n    \n    \n    /**\n     * Blocco d'inizializzazione statico che si occupa di generare il pool nel\n     * momento in cui ci sarà una prima invocazione del metodo getConnection()\n     */\n\n    static {\n        try {\n            properties = new Properties();\n            File fileProp = new File(Environment.getPoolPropertiesPath());\n\n            if (fileProp.exists()) {\n                properties.load(new FileInputStream(fileProp));\n\n                DRIVER_MYSQL = properties.getProperty(\"connection.jdbc.name\");\n                if (DRIVER_MYSQL.equals(\"\")) {\n                    DRIVER_MYSQL = Utility.getDriverMySql();\n                }\n\n                FULL_PATH_DATABASE = properties\n                        .getProperty(\"connection.jdbc.fullPath\");\n\n                if (FULL_PATH_DATABASE.equals(\"\")) {\n                    FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n                }\n\n                USER_NAME = properties.getProperty(\"connection.username\");\n                if (USER_NAME.equals(\"\")) {\n                    USER_NAME = Utility.getUserName();\n                }\n\n                PASSWORD = properties.getProperty(\"connection.password\");\n                if (PASSWORD.equals(\"\")) {\n                    PASSWORD = Utility.getPassword();\n                }\n\n                try {\n                    MAX_POOL_SIZE = Integer.parseInt(properties\n                            .getProperty(\"connection.maxPoolSize\"));\n                } catch (Exception ex) {\n                    MAX_POOL_SIZE = Utility.getMaxPoolSize();\n                }\n\n                try {\n                    WAIT_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.waitTimeout\"));\n                } catch (Exception ex) {\n                    WAIT_TIMEOUT = Utility.getWaitTimeout();\n                }\n\n                try {\n                    ACTIVE_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.activeTimeout\"));\n                } catch (Exception ex) {\n                    ACTIVE_TIMEOUT = Utility.getActiveTimeout();\n                }\n\n                try {\n                    POOL_TIMEOUT = Integer.parseInt(properties\n                            .getProperty(\"connection.poolTimeout\"));\n                } catch (Exception ex) {\n                    POOL_TIMEOUT = Utility.getPoolTimeout();\n                }\n            } else {\n                /* Se il file di properties non esiste carica valori di default */\n\n                DRIVER_MYSQL = Utility.getDriverMySql();\n                FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n                USER_NAME = Utility.getUserName();\n                PASSWORD = Utility.getPassword();\n                MAX_POOL_SIZE = Utility.getMaxPoolSize();\n                WAIT_TIMEOUT = Utility.getWaitTimeout();\n                ACTIVE_TIMEOUT = Utility.getActiveTimeout();\n                POOL_TIMEOUT = Utility.getPoolTimeout();\n            }\n\n            loadPool(); // Crea il manager e prepara il pool di connessioni\n\n        } catch (Exception e) {\n            /* Se un'eccezione viene generata in precedenza */\n\n        \tDRIVER_MYSQL = Utility.getDriverMySql();\n            FULL_PATH_DATABASE = Utility.getFullPathDatabase();\n            USER_NAME = Utility.getUserName();\n            PASSWORD = Utility.getPassword();\n            MAX_POOL_SIZE = 100;\n            WAIT_TIMEOUT = 2000;\n            ACTIVE_TIMEOUT = 240000;\n            POOL_TIMEOUT = 300000;\n            loadPool(); // Crea il manager e prepara il pool di connessioni\n        }\n\n    }\n\n    /**\n     * Restituisce una connessione dal pool.\n     * \n     * @return la connessione se possibile null altrimenti\n     */\n\n    public static Connection getConnection() {\n        try {\n            return manager.getConnection();\n        } catch (SQLException e) {\n            System.out.println(\"Eccezione generata\"\n                    + \"in DBConnection.getConnection() \" + e);\n            return null;\n        }\n    }\n\n    /**\n     * Creazione effettiva del pool di connessione.\n     * \n     */\n    private static void loadPool() {\n        try {\n            manager = new ConnectionPoolDataSource(DRIVER_MYSQL,\n                    FULL_PATH_DATABASE, USER_NAME, PASSWORD, MAX_POOL_SIZE,\n                    POOL_TIMEOUT);\n            manager.setActivedTimeout(ACTIVE_TIMEOUT);\n            linker = new ControlConnection(manager, WAIT_TIMEOUT);\n            linker.start();\n        } catch (Exception e) {\n            System.out.println(\"Impossibile creare il pool\"\n                    + \"di connessioni in DBConnection:\" + e);\n        }\n    }\n\n    /**\n     * Restituisce una connessione al pool che sarà inserita nella lista delle\n     * connesioni pool, ossia quelle riutilizzabili in seguito.\n     * \n     * @param pConnection\n     *            la connessione non più attiva.\n     */\n\n    public static void releaseConnection(Connection pConnection) {\n        manager.release(pConnection);\n    }\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa6"},"name":"ServletAddRemoveTeachingsAsAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.addressManagement;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletAddRemoveTeachingsAsAddress extends HttpServlet {\n\n\n\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6692711286746163446L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showAddressList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerAddress managerAddress = ManagerAddress.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono l'id dell'address e le due liste di insegnamenti!\n\t\t\tAddress address = (Address) session.getAttribute(\"address\"); \n\t\t\tString[] idSelectedList = pRequest.getParameterValues(\"selectedTeachings\");\n\t\t\tString[] idUnselectedList = pRequest.getParameterValues(\"unselectedTeachings\");\n\t\t\tint nSelected =idSelectedList.length;\n\t\t\tint nUnselected =idUnselectedList.length;\n\t\t\tint temp;\n\t\t\t//Aggiungiamo gli insegnamenti selezionati!!\n\t\t\t\tfor(int i=0;i<nSelected;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idSelectedList[i]);\n\t\t\t\t\tif(!managerAddress.hasTeaching(managerTeaching.getTeachingById(temp), address)){\n\t\t\t\t\t\tmanagerAddress.assignTeachingAsAddress(address, managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//Rimuoviamo gli insegnamenti non selezionati\n\t\t\t\tfor(int i=0;i<nUnselected;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idUnselectedList[i]);\n\t\t\t\t\tif(managerAddress.hasTeaching(managerTeaching.getTeachingById(temp), address)){\n\t\t\t\t\t\tmanagerAddress.removeTeachingAsAddress(address, managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (DuplicatedEntityException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa7"},"name":"ServletLogin.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca65"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca60"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca73"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.LoginException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per effettuare il login dell'utente.\n * \n * @author Napolitano Vincenzo.\n */\npublic class ServletLogin extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,HttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\t\t\n\t\t\n\t\t// Ottengo i dati dalla request\n\t\tString login = pRequest.getParameter(\"user\");\n\t\tString password = pRequest.getParameter(\"password\");\n\t\t\n\t\t// Login dell'utente\n\t\ttry {\n\t\t\t\n\t\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\t\n\t\t\tif(managerUser.getUserByLogin(login) != null){\n\t\t\t\n\t\t\t\tUser loggedUser = managerUser.login(login, password);\n\t\t\t\tif (loggedUser != null)\n\t\t\t\t\tsession.setAttribute(\"loggedUser\", loggedUser);\n\t\t\t\telse throw new LoginException(\"Nome Utente e/o Password errati!\");\n\t\t\t\t\n\t\t\t\tif (managerUser.isAdministrator(loggedUser) ){\n\t\t\t\t\tgotoPage=\"./homePage/homeAdmin.jsp\";\n\t\t\t\t}else if (managerUser.isTeacher(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeProfessor.jsp\";\n\t\t\t\t}else if (managerUser.isStudent(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeStudent.jsp\";\n\t\t\t\t}else if (managerUser.isParent(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeParent.jsp\";\n\t\t\t\t}else if (managerUser.isAtaPeople(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeAtaPeople.jsp\";\n\t\t\t\t}else if (managerUser.isDirector(loggedUser) ){ \n\t\t\t\t\tgotoPage=\"./homePage/homeDirector.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (LoginException loginException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + loginException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tloginException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa8"},"name":"ServletDeleteNote.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteNote extends HttpServlet {\n\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -7968126163648714515L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\t\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\tgotoPage=\"./showNoteList?student=\"+session.getAttribute(\"idStudent\");\n\t\t\t\n\t\t\tNote toDelete= (Note) session.getAttribute(\"note\");\n\t\t\t\t\n\t\t\tmanagerRegister.deleteNote(toDelete);\n\t\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} \n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caa9"},"name":"ServletDeleteClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletDeleteClassroom extends HttpServlet {\n\n\t/**\n\t *  Servlet per cancellare una classe\n\t *  \n\t *  @author Nicola Pisanti\n\t *  @version 0.9\n\t */\n\tprivate static final long serialVersionUID = 5272269413504847511L;\n\n\t\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\t\n\t\tint  aC=0;\n\t\tString gotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\t\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\taC=Integer.valueOf(classroom.getAcademicYear());\n\t\t\tmanagerClassroom.delete(classroom);\n\t\t\tgotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} /*catch (DeleteManagerException deleteManagerException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + deleteManagerException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteManagerException.printStackTrace();\n\t\t} */catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caaa"},"name":"ServletProva.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.teachingManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletProva extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -832177625776300783L;\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caab"},"name":"Address.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.bean;\nimport java.io.Serializable;\n\n/**\n *  Classe utilizzata per modellare un indirizzo.\n *\n * \n */\npublic class Address implements Serializable{\n\t\n\t\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -9194626030239503689L;\n\t\n\tprivate int idAddress;\n\tprivate String name;\n\t\n\t/**\n\t * Il costruttore della classe.\n\t */\n\t\tpublic Address(){\n\t\tthis.idAddress= 0;\n\t}\n\t\t\n\t/**\n\t * @return Ritorna l' id dell' indirizzo.\n\t */\n\t\t\n\tpublic int getIdAddress() {\n\t\treturn idAddress;\n\t}\n\t\n\t/**\n\t * Setta l' id dell' indirizzo.\n\t * @param pIdAddress\n\t * \t\t\tl' id da settare.\n\t */\n\tpublic void setIdAddress(int pIdAddress) {\n\t\tthis.idAddress = pIdAddress;\n\t}\n\t\n\t/**\n\t * @return Ritorna il nome dell' indirizzo.\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Setta il nome dell' indirizzo.\n\t * @param pName\n\t * \t\t\tIl nome da settare.\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caac"},"name":"ServletShowUserRoleForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare il form di gestione\n * dei ruoli degli utenti.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserRoleForm extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -2210761175435137331L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/userRolez.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\t\n\t\t\n\t\tboolean isTeacherBoolean = false;\n\t\tboolean isAdministratorBoolean = false;\n\t\tboolean isParentBoolean = false;\n\t\tboolean isStudentBoolean = false;\n\t\tboolean isAtaBoolean = false;\n\t\tboolean isDirectorBoolean = false;\n\t\t\n\t\tint isTeacher = 0;\n\t\tint isAdministrator = 0;\n\t\tint isDirector = 0;\n\t\tint isParent = 0;\n\t\tint isStudent = 0;\n\t\tint isAta = 0;\n\t\t\n\t\tUser user = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tuser = (User) session.getAttribute(\"user\");\n\t\t\t//prepariamo i valori da passare alla jsp\n\t\t\tisTeacherBoolean = managerUser.isTeacher(user);\n\t\t\tisAdministratorBoolean = managerUser.isAdministrator(user);\n\t\t\tisAtaBoolean = managerUser.isAtaPeople(user);\n\t\t\tisDirectorBoolean= managerUser.isDirector(user);\n\t\t\tisStudentBoolean= managerUser.isStudent(user);\n\t\t\tisParentBoolean= managerUser.isParent(user);\n\t\t\n\t\t\tisTeacher = Utility.BooleanToInt(isTeacherBoolean);\n\t\t\tisDirector = Utility.BooleanToInt(isDirectorBoolean);\n\t\t\tisAdministrator = Utility.BooleanToInt(isAdministratorBoolean);\n\t\t\tisAta = Utility.BooleanToInt(isAtaBoolean);\n\t\t\tisStudent = Utility.BooleanToInt(isStudentBoolean);\n\t\t\tisParent = Utility.BooleanToInt(isParentBoolean);\n\t\t\t\n\t\t\tgotoPage = \"./persistentDataManagement/userManagement/userRolez.jsp?isTeacher=\"+isTeacher+\"&isAdmin=\"+isAdministrator+\"&isAta=\"+isAta\n\t\t\t+\"&isStudent=\"+isStudent+\"&isParent=\"+isParent+\"&isDirector=\"+isDirector;\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\t\t\treturn;  \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caad"},"name":"TestRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.storage;\n\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport smos.bean.Absence;\nimport smos.bean.Delay;\nimport smos.bean.Justify;\nimport smos.bean.Note;\nimport smos.bean.RegisterLine;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\n\npublic class TestRegister {\n\n\t// database errato, impossibile inserire null nel campo id_justify di absence\n\tpublic static void main(String[] args) {\n\t\t\n\t\tManagerRegister mr=  ManagerRegister.getInstance();\n\t\t\n\t\tDate datenow= new Date();\n\t\t\n\t\tAbsence absence = new Absence();\t\t\n\t\tabsence.setIdUser(61);\n\t\tabsence.setDateAbsence(datenow);\n\t\tabsence.setIdJustify(0);\n\t\tabsence.setAcademicYear(2009);\n\t\t//absence.setIdAbsence(13);\n\t\t\n\t\t/*\n\t\ttry {\n\t\t\tabsence= mr.getAbsenceByIdAbsence(12);\n\t\t\t\n\t\t} catch (InvalidValueException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (EntityNotFoundException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (ConnectionException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t} catch (SQLException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t\t*/\n\t\t\n\t\tJustify justifynew= new Justify();\n\t\tjustifynew.setIdUser(1);\n\t\tjustifynew.setDateJustify(datenow);\n\t\tjustifynew.setAcademicYear(2008);\n\n\t\tjustifynew.setIdJustify(6);\n\t\t\n\t\t\n\t\tDelay delay = new Delay();\n\t\t//delay.setIdDelay(3);\n\t\tdelay.setIdUser(62);\n\t\tdelay.setDateDelay(datenow);\n\t\tdelay.setTimeDelay(\"10:00:00\");\n\t\tdelay.setAcademicYear(2009);\n\t\t\n\t\tNote notenew= new Note();\n\t\tnotenew.setIdUser(2);\n\t\tnotenew.setTeacher(\"boh\");\n\t\tnotenew.setAcademicYear(2009);\n\t\tnotenew.setDateNote(datenow);\n\t\tnotenew.setDescription(\"lo studente dorme in classe\");\n\t\tnotenew.setIdNote(1);\n\t\t\n\t\ttry{\n\t\t\t//mr.insertAbsence(absence);\n\t\t\t//if(mr.exists(absence)) System.out.println(\"esiste\");;\n\t\t\t//mr.deleteAbsence(absence);\n\t\t\t//mr.updateAbsence(absence);\n\t\t\t\n\t\t\tmr.insertDelay(delay);\n\t\t\t//if(mr.exists(delay)) System.out.println(\"esiste\");;\n\t\t\t//mr.updateDelay(delay);\n\t\t\t//mr.deleteDelay(delay);\n\t\t\t\n\t\t\t//mr.insertNote(notenew);\n\t\t\t//mr.deleteNote(notenew);\n\t\t\t\n\t\t\t//mr.insertJustify(justifynew, absence);\n\t\t\t//mr.deleteJustify(justifynew.getIdJustify());\n\t\t\t//if(mr.hasJustify(absence))System.out.println(\"giustificata\");\n\t\t\t\n\t\t\t//absence= mr.getAbsenceByIDUserAndDate(2, \"2009-05-18\");\n\t\t\t//absence= mr.getAbsenceByIdJustify(1);\n\t\t\t//System.out.println(absence.getDateAbsence());\n\t\t\t\n\t\t\t//Collection<Absence> ac= mr.getAbsenceByIDUserAndAcademicYear(2, 2009);\n\t\t\t//for(Absence x : ac) System.out.println(x.getDateAbsence());\n\t\t\t\n\t\t\t//justifynew=mr.getJustifyByAbsence(absence);\n\t\t\t//System.out.println(justifynew.getDateJustify());\n\t\t\t\n\t\t\t//Collection<Note> nc = mr.getNoteByIDUserAndAcademicYear(2, 2009);\n\t\t\t//for(Note x : nc) System.out.println(x.getDescription());\n\t\t\t\n\t\t\t//delay= mr.getDelayByIDUserAndDate(1, datenow);\n\t\t\t//System.out.println(delay.getDateDelay());\n\t\t\t//System.out.println(delay.getTimeDelay());\n\t\t\t\n\t\t\t\n\t\t\t///*\n\t\t\tCollection<RegisterLine> crl = mr.getRegisterByClassIDAndDate(64, datenow );\n\t\t\tfor(RegisterLine x : crl){\n\t\t\t\tSystem.out.println(x.getStudent().getName());\n\t\t\t\tif(mr.hasAbsence(x)){\n\t\t\t\t\tSystem.out.println(\"assente\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(mr.hasAbsence(x));\n\t\t\t\tif(mr.hasDelay(x)){\n\t\t\t\t\tSystem.out.println(\"ritardo\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t//*/\n\t\t\t\n\t\t\tGregorianCalendar gc = new GregorianCalendar();\n\t\n\t\t\tString date=\"\";\n\t\t\tint year=gc.get(GregorianCalendar.YEAR);\n\t\t\t\n\t\t\tint month=gc.get(GregorianCalendar.MONTH)+1;\n\t\t\tString months=\"\";\n\t\t\tif(month<10){\n\t\t\t\tmonths=\"0\"+month;\n\t\t\t}else{\n\t\t\t\tmonths= months+month;\n\t\t\t}\n\t\t\t\n\t\t\tint day=gc.get(GregorianCalendar.DAY_OF_MONTH);\n\t\t\tString days=\"\";\n\t\t\tif(day<10){\n\t\t\t\tdays=\"0\"+day;\n\t\t\t}else{\n\t\t\t\tdays= days+day;\n\t\t\t}\n\t\t\t\n\t\t\tdate= date + year+\"-\"+months+\"-\"+days;\n\t\t\tSystem.out.println(date);\n\t\t\t\n\t\t}catch (Exception e) {\n\t\t\tSystem.out.println(\"errore\");\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t\t\n\t\tSystem.out.println(datenow.toString());\n\t\tSystem.out.println(Utility.isNull(datenow));\n\t\tSystem.out.println(\"TEST COMPLETATO\");\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caae"},"name":"ServletShowUserDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per recuperare i dettagli dell'utente.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletShowUserDetails extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1726037792193089501L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showUserDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tint userId = Integer.valueOf(pRequest.getParameter(\"userId\"));\n\t\t\tUser user = managerUser.getUserById(userId);\n\t\t\t\n\t\t\tsession.setAttribute(\"user\",user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caaf"},"name":"display.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"\n\n/****************** displaytag stylesheet ****************/\n\ntable.datatable {\n\tborder-color:#89B2DB;\n\tborder-collapse: collapse;\n\tborder-width: 1px;\n\tborder-style:solid;\n\twidth: 80%;\n\tmargin: 5px 0 10px 10% !important;\n\tfont-size: 8pt;\n}\ntable.cardtable {\n\tborder: 1px solid  #CCFFFF ;\n\twidth: 80%;\n\tmargin: 5px 0 10px 10% !important;\n\tfont-size: 8pt;\n}\ntable.simpletable {\n\tborder: 0px;\n\twidth: 80%;\n\tmargin: 0px 0 0px 0 !important;\n\tfont-size: 8pt;\n\n}\ntable.datatable a:active,\ntable.datatable a:link,\ntable.datatable a:visited ,\ntable.cardtable a:active,\ntable.cardtable a:link,\ntable.cardtable a:visited{\n\tcolor:#000000;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\ntable.cardtable a:hover,\ntable.datatable a:hover {\n\tcolor:#1075bd;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\ntable.cardtable td{\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\ttext-align:left;\n\tborder: 1px solid  #89B2DB ;\n\n}\ntable.datatable td{\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\ttext-align:left;\n}\n\n\nthead tr {\n\tbackground-color: #C4CBD0;\n}\n\nth.sorted {\n\tbackground-color:#9ec7e2;\n}\n\nth.sorted a,\nth.sortable a {\n\tcolor:#000000;\n\tbackground-position: right;\n\tdisplay: block;\n}\nth.sorted a:hover,\nth.sortable a:hover {\n\tcolor:#1075bd;\n\ttext-decoration:none;\n\tfont-weight:bold;\n}\nth.sortable a {\n\tbackground-image: url(../icons/arrow_off.png);\n\tbackground-repeat: no-repeat;\t\n\tbackground-position:left; /* non supportata da mozilla */\n\n}\n\n\n\nth.order1 a {\n\tbackground-image: url(../images/down_arrow.gif);\n}\n\nth.order2 a {\n\tbackground-image: url(../images/up_arrow.gif);\n}\n\ntr.odd {\n\tbackground-color:#FFFFFF;\n}\n\ntr.tableRowEven, tr.even {\n\tbackground-color: #FFFFFF;\n}\n\ndiv.exportlinks {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\tmargin: 2px 0px 10px 10% ;\n\twidth: 79.5%;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}\n\nspan.export {\n\tpadding: 0 4px 1px 20px;\n\tdisplay: inline;\n\tdisplay: inline-block;\n}\n\nspan.excel {\n\tbackground-image: url(../images/icons/ico_file_excel.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.csv {\n\tbackground-image: url(../images/icons/ico_file_csv.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.xml {\n\tbackground-image: url(../images/icons/ico_file_xml.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.pdf {\n\tbackground-image: url(../images/icons/ico_file_pdf.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.rtf {\n\tbackground-image: url(../images/icons/ico_file_rtf.png);\n\tbackground-repeat: no-repeat;\n}\n\nspan.pagebanner {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\twidth: 79.5%;\n\tmargin-top: 10px;\n\tmargin-left:10%;\n\tdisplay: block;\n\tborder-bottom: none;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}\n\nspan.pagelinks {\n\tbackground-color: #ffffff;\n\tborder: 1px dotted #89B2DB;\n\tpadding: 2px 0px 2px 4px;\n\twidth: 79.5%;\n\tdisplay: block;\n\tborder-top: none;\n\tmargin-bottom: 5px;\n\tmargin-left:10%;\n\tfont-family:\"trebuchet ms\",Verdana, Arial, Helvetica, sans-serif;\n\tfont-size:8pt;\n\ttext-align:center;\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab0"},"name":"ServletShowUserTeachingForm.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowUserTeachingForm extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2305151029867525356L;\n\t\n\t\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showTeacherDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tUser user = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tuser = (User) session.getAttribute(\"user\");\n\t\t\t\n\t\t\tif(!managerUser.isTeacher(user)){\n\t\t\t\terrorMessage =  \"L'Utente non è un docente\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\t\n\t\t\t}\n\t\t\t//int idTeacher= user.getId();\n\t\t\t\n\t\t\tCollection<Classroom> classList = managerClassroom.getClassroomsByTeacher(user);\n\t\t\t\n\t\t\t/*\n\t\t\tIterator<Classroom> iteClass = classList.iterator();\n\t\t\tClassroom tmp = null;\n\t\t\twhile(iteClass.hasNext()){\n\t\t\t\ttmp=iteClass.next();\n\t\t\t\tif(tmp.getAcademicYear()!= an){\n\t\t\t\t\tclassList.remove(tmp);\n\t\t\t\t}\n\t\t\t}*/\n\t\t\t//@SuppressWarnings(\"unused\")\n\t\t\t//Collection<Teaching> teachingListByClassroom=null;\n\t\t\t//Collection<Classroom,Teaching> list= new Vector <Classroom,Teaching>();\n\t\t\t\n\t\t\tsession.setAttribute(\"classroomList\", classList);\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t\n\t\t\treturn;  \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab1"},"name":"ServletLoadClassByAccademicYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadClassByAccademicYear extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -3988115259356084996L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Classroom> classroomList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t//Date oggi = new Date();\n\t\t\t// recuperiamo l'anno accademico selezionato\n\t\t\tint selectedAccademicYear = Integer.valueOf(pRequest.getParameter(\"accademicYear\"));\n\t\t\t\n\t\t\t\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\t//Calcoliamo l'elenco delle classi dell'anno accademico selezionato\n\t\t\tclassroomList = managerClassroom.getClassroomsByAcademicYear(selectedAccademicYear);\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", selectedAccademicYear);\n\t\t\t//session.removeAttribute(\"selectedClass\");\n\t\t\tgotoPage +=(String) session.getAttribute(\"goTo\");\n\t\t\t\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab2"},"name":"Justify.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class Justify implements Serializable {\n\n\t/**\n\t * Classe che modella una giustifica per un assenza\n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t * \n\t */\n\tprivate static final long serialVersionUID = -4726381877687167661L;\n\n\tprivate int idJustify;\n\tprivate int idUser;\n\tprivate Date dateJustify;\n\tprivate int academicYear;\n\t\n\t/**\n\t * Metodo che restituisce l'id della giustifica\n\t * @return un intero che rappresenta l'id della giustifica\n\t */\n\tpublic int getIdJustify() {\n\t\treturn idJustify;\n\t}\n\t/**\n\t * Metodo che setta l'id della giustifica\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdJustify(int pIdJustify) {\n\t\tthis.idJustify = pIdJustify;\n\t}\n\t/**\n\t * Metodo restituisce l'id dello studente relativo alla giustifica\n\t * @return un intero che rappresenta l'id dello studente \n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo che setta l'id dello studente relativo alla giustifica\n\t * @param un intero che rappresenta l'id da settare\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce la data alla quale Ã¨ stata giustificata l'assenza\n\t * @return una stringa che rappresenta la data giustificata\n\t */\n\tpublic Date getDateJustify() {\n\t\treturn dateJustify;\n\t}\n\t/**\n\t * Metodo che setta la data alla quale Ã¨ stata giustificata l'assenza\n\t * @param una stringa che rappresenta la data da settare\n\t */\n\tpublic void setDateJustify(Date pDateJustify) {\n\t\tthis.dateJustify = pDateJustify;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico relativo alla giustifica\n\t * @return un intero che rappresenta l'anno in cui Ã¨ iniziato l'anno accademico \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Metodo che setta l'anno accademico relativo alla giustifica\n\t * @param un intero che rappresenta l'anno accademico da settare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab3"},"name":"Note.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Classe che modella una nota sul registro \n * @author Nicola Pisanti\n * @version 1.0\n */\n\n\npublic class Note implements Serializable{\n\n\tprivate static final long serialVersionUID = 5953926210895315436L;\n\t\n\tprivate int idNote;\n\tprivate int idUser;\n\tprivate Date dateNote;\n\tprivate String description;\n\tprivate String teacher;\n\tprivate int academicYear;\n\t\n\t\n\tpublic Note(){\n\t\t\n\t}\n\t\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'id della nota\n\t * @return un intero che rappresenta l'id della nota\n\t */\n\tpublic int getIdNote() {\n\t\treturn idNote;\n\t}\n\t/**\n\t * Metodo per settare l'id della nota\n\t * @param un intero che rappresenta il nuovo valore dell'id\n\t */\n\tpublic void setIdNote(int pIdNote) {\n\t\tthis.idNote = pIdNote;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dello studente che ha ricevuto la nota\n\t * @return l'id dell'utente che ha ricevuto la nota\n\t */\n\tpublic int getIdUser() {\n\t\treturn idUser;\n\t}\n\t/**\n\t * Metodo per settare l'id dello studente che ha ricevuto la nota\n\t * @param un intero che rappresenta il nuovo valore dell'id\n\t */\n\tpublic void setIdUser(int pIdUser) {\n\t\tthis.idUser = pIdUser;\n\t}\n\t/**\n\t * Metodo che restituisce una stringa che rappresenta la data in cui Ã¨ stata data la nota\n\t * @return una stringa che rappresenta la data della nota\n\t */\n\tpublic Date getDateNote() {\n\t\treturn dateNote;\n\t}\n\t/**\n\t * Metodo che setta una stringa che rappresenta la data in cui Ã¨ stata data la nota\n\t * @param la stringa che rappresenta la nuova data\n\t */\n\tpublic void setDateNote(Date pDateNote) {\n\t\tthis.dateNote = pDateNote;\n\t}\n\t/**\n\t * Metodo che restituisce il testo della nota \n\t * @return una stringa che rappresenta il testo della nota\n\t */\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\t/**\n\t * Metodo che setta la descrizione della nota\n\t * @param una stringa che contiene la descrizione della nota\n\t */\n\tpublic void setDescription(String pDescription) {\n\t\tthis.description = pDescription;\n\t}\n\t/**\n\t * Metodo che restituisce l'id dell'insegnante che ha dato la nota \n\t * @return un intero che rappresenta l'id dell'insegnante\n\t */\n\tpublic String getTeacher() {\n\t\treturn teacher;\n\t}\n\t/**\n\t * Metodo che setta l'id dell'insegnante che ha dato la nota \n\t * @param teacher the teacher to set\n\t */\n\tpublic void setTeacher(String pTeacher) {\n\t\tthis.teacher = pTeacher;\n\t}\n\t/**\n\t * Metodo che restituisce l'anno accademico in corso\n\t * @return un intero che indica l'anno di inizio delle lezioni \n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t/**\n\t * Medoto che setta l'anno accademico in corso durante l'assegnazione della nota\n\t * @param un intero che indica l'anno di inizio delle lezioni da inserire\n\t */\n\tpublic void setAcademicYear(int academicYear) {\n\t\tthis.academicYear = academicYear;\n\t}\n\n\t\n\t\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab4"},"name":"ConnectionWrapper.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * ConnectionWrapper\n *\n */\n\npackage smos.storage.connectionManagement;\n\n\nimport java.io.Serializable;\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.SQLWarning;\nimport java.sql.Savepoint;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\n/**\n * ConnectionWrapper è una classe che aggiunge a tutti i metodi della classe\n * Connection il settaggio del tempo in cui l'operazione sulla particolare\n * connessione è avvenuta informando il pool di quanto accaduto.\n */\n\npublic class ConnectionWrapper implements Connection, Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final Logger LOGGER = Logger\n            .getLogger(ConnectionWrapper.class.getName());\n\n    private Connection connection;\n\n    private ConnectionPoolDataSource manager;\n\n    private ArrayList<Statement> statements = new ArrayList<Statement>();\n\n    /**\n     * @param pConnection\n     * @param pPoolManager\n     */\n    public ConnectionWrapper(Connection pConnection,\n            ConnectionPoolDataSource pPoolManager) {\n        this.connection = pConnection;\n        this.manager = pPoolManager;\n        LOGGER.fine(\"Creating ConnectionWrapper\");\n    }\n\n    private PreparedStatement cachePreparedStatement(PreparedStatement pPrepSt) {\n        this.manager.setLastTime(this);\n        this.statements.add(pPrepSt);\n        return pPrepSt;\n    }\n\n    private Statement cacheStatement(Statement pStatement) {\n        this.manager.setLastTime(this);\n        this.statements.add(pStatement);\n        return pStatement;\n    }\n\n    /**\n     * @see java.sql.Connection#clearWarnings()\n     */\n    public void clearWarnings() throws SQLException {\n        this.connection.clearWarnings();\n    }\n\n    /**\n     * @see java.sql.Connection#close()\n     */\n    public void close() throws SQLException {\n        closeAndReleaseStatements();\n        this.manager.release(this);\n    }\n\n    private synchronized void closeAndReleaseStatements() throws SQLException {\n        final int n = this.statements.size();\n        for (int i = 0; i < n; i++) {\n            ((Statement) this.statements.get(i)).close();\n        }\n        this.statements.clear();\n    }\n\n    /**\n     * Close the wrapped connection.\n     * @throws SQLException \n     */\n    void closeWrappedConnection() throws SQLException {\n        closeAndReleaseStatements();\n        if (!this.connection.isClosed()) {\n            LOGGER.fine(\"Closing db connection: \" + this.getClass().getName()\n                    + \" [\" + this + \"]\");\n        }\n        this.connection.close();\n    }\n\n    /**\n     * @see java.sql.Connection#commit()\n     */\n    public void commit() throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.commit();\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement()\n     */\n    public Statement createStatement() throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement());\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement(int, int)\n     */\n    public Statement createStatement(int pResultSetType,\n            int pResultSetConcurrency) throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement(pResultSetType,\n                pResultSetConcurrency));\n    }\n\n    /**\n     * @see java.sql.Connection#createStatement(int, int, int)\n     */\n    public Statement createStatement(int pResultSetType,\n            int pResultSetConcurrency, int pResultSetHoldability)\n            throws SQLException {\n        this.manager.setLastTime(this);\n        return cacheStatement(this.connection.createStatement(pResultSetType,\n                pResultSetConcurrency, pResultSetHoldability));\n    }\n\n    /**\n     * Closes the wrapped connection.\n     */\n    protected void finalize() throws Throwable {\n        closeWrappedConnection();\n    }\n\n    /**\n     * @see java.sql.Connection#getAutoCommit()\n     */\n    public boolean getAutoCommit() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getAutoCommit();\n    }\n\n    /**\n     * @see java.sql.Connection#getCatalog()\n     */\n    public String getCatalog() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getCatalog();\n    }\n\n    /**\n     * @see java.sql.Connection#getHoldability()\n     */\n    public int getHoldability() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getHoldability();\n    }\n\n    /**\n     * @see java.sql.Connection#getMetaData()\n     */\n    public DatabaseMetaData getMetaData() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getMetaData();\n    }\n\n    /**\n     * @see java.sql.Connection#getTransactionIsolation()\n     */\n    public int getTransactionIsolation() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getTransactionIsolation();\n    }\n\n    /**\n     * @see java.sql.Connection#getTypeMap()\n     */\n    @SuppressWarnings(\"unchecked\")\n\tpublic Map getTypeMap() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getTypeMap();\n    }\n\n    /**\n     * @see java.sql.Connection#getWarnings()\n     */\n    public SQLWarning getWarnings() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.getWarnings();\n    }\n\n    /**\n     * @see java.sql.Connection#isClosed()\n     */\n    public boolean isClosed() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.isClosed();\n    }\n\n    /**\n     * @see java.sql.Connection#isReadOnly()\n     */\n    public boolean isReadOnly() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.isReadOnly();\n    }\n\n    /**\n     * @see java.sql.Connection#nativeSQL(java.lang.String)\n     */\n    public String nativeSQL(String sql) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.nativeSQL(sql);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String)\n     */\n    public CallableStatement prepareCall(String sql) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(sql);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String, int, int)\n     */\n    public CallableStatement prepareCall(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(pStatementSql, pResultSetType,\n                pResultSetConcurrency);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareCall(java.lang.String, int, int, int)\n     */\n    public CallableStatement prepareCall(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency,\n            int pResultSetHoldability) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return this.connection.prepareCall(pStatementSql, pResultSetType,\n                pResultSetConcurrency, pResultSetHoldability);\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql)\n            throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection\n                .prepareStatement(pStatementSql));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pAutoGeneratedKeys) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pAutoGeneratedKeys));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pResultSetType, pResultSetConcurrency));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int, int, int)\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int pResultSetType, int pResultSetConcurrency,\n            int pResultSetHoldability) throws SQLException {\n\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pResultSetType, pResultSetConcurrency,\n                pResultSetHoldability));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, int[])\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            int[] columnIndexes) throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, columnIndexes));\n    }\n\n    /**\n     * @see java.sql.Connection#prepareStatement(java.lang.String, java.lang.String[])\n     */\n    public PreparedStatement prepareStatement(String pStatementSql,\n            String[] pColumnNames) throws SQLException {\n        this.manager.setLastTime(this);\n        return cachePreparedStatement(this.connection.prepareStatement(\n                pStatementSql, pColumnNames));\n    }\n\n    /**\n     * @see java.sql.Connection#releaseSavepoint(java.sql.Savepoint)\n     */\n    public void releaseSavepoint(Savepoint pSavepoint) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.releaseSavepoint(pSavepoint);\n    }\n\n    /**\n     * @see java.sql.Connection#rollback()\n     */\n    public void rollback() throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.rollback();\n    }\n\n    /**\n     * @see java.sql.Connection#rollback(java.sql.Savepoint)\n     */\n    public void rollback(Savepoint pSavepoint) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.rollback(pSavepoint);\n    }\n\n    /**\n     * @see java.sql.Connection#setAutoCommit(boolean)\n     */\n    public void setAutoCommit(boolean pAutoCommit) throws SQLException {\n        this.manager.setLastTime(this);\n        if (this.connection.getAutoCommit() != pAutoCommit) {\n            this.connection.setAutoCommit(pAutoCommit);\n        }\n    }\n\n    /**\n     * @see java.sql.Connection#setCatalog(java.lang.String)\n     */\n    public void setCatalog(String pCatalog) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setCatalog(pCatalog);\n    }\n\n    /**\n     * @see java.sql.Connection#setHoldability(int)\n     */\n    public void setHoldability(int pHoldability) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setHoldability(pHoldability);\n    }\n\n    /**\n     * @see java.sql.Connection#setReadOnly(boolean)\n     */\n    public void setReadOnly(boolean pReadOnly) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setReadOnly(pReadOnly);\n    }\n\n    /**\n     * @see java.sql.Connection#setSavepoint()\n     */\n    public Savepoint setSavepoint() throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.setSavepoint();\n    }\n\n    /**\n     * @see java.sql.Connection#setSavepoint(java.lang.String)\n     */\n    public Savepoint setSavepoint(String pName) throws SQLException {\n        this.manager.setLastTime(this);\n        return this.connection.setSavepoint(pName);\n    }\n\n    /**\n     * @see java.sql.Connection#setTransactionIsolation(int)\n     */\n    public void setTransactionIsolation(int pLevel) throws SQLException {\n        this.manager.setLastTime(this);\n        this.connection.setTransactionIsolation(pLevel);\n    }\n\n    /**\n     * @see java.sql.Connection#setTypeMap(java.util.Map)\n     */\n    \n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    public String toString() {\n        return this.connection.toString();\n    }\n\n\tpublic void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab5"},"name":"ServletAssignStudentClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletAssignStudentClassroom extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\t// Studente selezionato\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\n\t\t\t// anno accademico selezionato\n\t\t\tint academicYear = Integer.valueOf(pRequest\n\t\t\t\t\t.getParameter(\"accademicYear\"));\n\t\t\t// id classe selezionata che e' zero se vogliamo eliminare\n\t\t\t// l'associazione\n\t\t\tint idClassroom = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tClassroom p = null;\n\t\t\tp = managerClassroom.getClassroomByUserAcademicYear(user,academicYear);\n\t\t\tif (p != null)\n\t\t\t\tmanagerUser.removeStudentClassroom(user, p.getIdClassroom());\n\t\t\tif(idClassroom>0) {\n\t\t\t\t\n\t\t\t\t\tmanagerUser.assignStudentClassroom(user, idClassroom);\n\t\t\t}\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab6"},"name":"ServletDeleteUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteAdministratorException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per eliminare un utente.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletDeleteUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -7693860059069872995L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<UserListItem> manager = null;\n\t\tIterator<UserListItem> it = null;\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) &&\n\t\t\t\t\t(!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\t//cancella utente se non è amministratore\n\t\t\tif(!managerUser.isAdministrator(user)) {\n\t\t\t\tmanagerUser.delete(user);\n\t\t\t}\n\t\t\t//controllo se l'utente è amministratore e se ce ne sono degli altri\n\t\t\telse {\n\t\t\t\tmanager = managerUser.getAdministrators();\n\t\t\t\tit = manager.iterator();\n\t\t\t\tit.next();\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tmanagerUser.delete(user);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tthrow new DeleteAdministratorException ();\n\t\t\t}\n\t\t\t\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (DeleteAdministratorException deleteAdministratorException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + deleteAdministratorException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteAdministratorException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab7"},"name":"ConnectionException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando non è possibile\n  * ottenere una connessione al database\n  */\npublic class ConnectionException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -6593436034986073011L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic ConnectionException() {\n\t\tsuper(\"Unable to Connect to the DataBase!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic ConnectionException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab8"},"name":"ServletInsertAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.bean.Address;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n/**\n * Servlet utilizzata per inserire un indirizzo nel database\n * \n * @author Vecchione Giuseppe\n */\npublic class ServletInsertAddress extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 8318905833953187814L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * \n\t * @param pResponse\n\t * \n\t */\n\t\n\tpublic void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString gotoPage=\"./showAddressList\";\n\t\tString errorMessage=\"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\t\tif(loggedUser==null){\n\t\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\t\terrorMessage= \"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tAddress address= new Address();\n\t\t\t\taddress.setName(pRequest.getParameter(\"name\"));\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Verifichiamo che l' indirizzo non sia presente nel database\n\t\t\t\t * e lo inseriamo\n\t\t\t\t */\n\t\t\t\tif(!managerAddress.exists(address)){\n\t\t\t\t\tmanagerAddress.insert(address);\n\t\t\t\t}else{\n\t\t\t\t\tthrow new DuplicatedEntityException(\"Indirizzo gia' esistente\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException sqlException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tsqlException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tmandatoryFieldException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tduplicatedEntityException.printStackTrace();\n\t\t\t}\n\t\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\t\ttry {\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t}\n\t\t}\n\t\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\t\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cab9"},"name":"DeleteManagerException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n * Questa classe rappresenta l'eccezione generata quando un utente\n * tenta di eliminare l'unico utente Manager nel database.\n */\npublic class DeleteManagerException extends Exception {\n\n\tprivate static final long serialVersionUID = -6441256751177339494L;\n\t\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t * \n\t */\n\tpublic DeleteManagerException() {\n\t\tsuper(\"Impossibile eliminare l'utente, l'utente selezionato e' l'unico Manager presente nel database! Creare un nuovo Manager e riprovare!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DeleteManagerException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caba"},"name":"ServletShowJustifyDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Justify;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletShowJustifyDetails extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6445257206429581384L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showJustifyDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tManagerRegister mR= ManagerRegister.getInstance();\n\t\t\tint idJustify = Integer.valueOf(pRequest.getParameter(\"idJustify\"));\n\t\t\tString idClassroom = pRequest.getParameter(\"idClassroom\");\n\t\t\tgotoPage+=\"?idClassroom=\"+idClassroom;\n\t\t\tJustify justify=mR.getJustifyByIdJustify(idJustify);\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"justify\",justify);\n\t\t\tsession.setAttribute(\"idClassroom\",idClassroom);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cabb"},"name":"ManagerTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.storage;\n\nimport smos.bean.Teaching;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n * \n * Classe manager degli insegnamenti.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\n\npublic class ManagerTeaching {\n\tprivate static ManagerTeaching instance;\n\n\t/**\n\t * Il nome della tabella degli insegnamenti.\n\t */\n\tpublic static final String TABLE_TEACHING = \"teaching\";\n\n\t/**\n\t * Il nome della tabella che modella l'associazione molti a molti tra\n\t * indirizzi ed insegnamenti.\n\t */\n\tpublic static final String TABLE_ADDRESS_TEACHINGS = \"address_has_teaching\";\n\n\t/**\n\t * Il nome della tabella che modella l'associazione molti a molti tra utenti\n\t * e insegnamenti.\n\t */\n\tpublic static final String TABLE_TEACHER_CLASSROOM = \"teacher_has_classroom\";\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tprivate ManagerTeaching() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Ritorna la sola istanza dell'insegnamento esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerTeaching getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new ManagerTeaching();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Verifica l'esistenza di un insegnamento nel database.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @return Ritorna true se esiste l'insegnamento passato come parametro,\n\t *         false altrimenti.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t */\n\tpublic synchronized boolean exists(Teaching pTeaching)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException {\n\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pTeaching.getName() == null)\n\t\t\tthrow new MandatoryFieldException(\"Specificare il nome.\");\n\t\ttry {\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE name = \" + Utility.isNull(pTeaching.getName());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Inserisce un nuovo insegnamento nella tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Teaching pTeaching)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException,\n\t\t\tEntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// controllo dei campi obbligatori\n\t\t\tif (pTeaching.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t// Prepariamo la stringa Sql\n\t\t\tString sql = \"INSERT INTO \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" (name) \" + \"VALUES (\"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getName()) + \")\";\n\n\t\t\tUtility.executeOperation(connect, sql);\n\n\t\t\tpTeaching.setId(Utility.getMaxValue(\"id_teaching\",\n\t\t\t\t\tManagerTeaching.TABLE_TEACHING));\n\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna un insegnamento presente nella tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da modificare\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update(Teaching pTeaching)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\tif (pTeaching.getId() <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\tif (pTeaching.getName() == null)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il campo nome\");\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"UPDATE \" + ManagerTeaching.TABLE_TEACHING + \" SET\"\n\t\t\t\t\t+ \" name = \" + Utility.isNull(pTeaching.getName())\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\n\t\t\t// effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Elimina un insegnamento dalla tabella teaching.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da eliminare.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t * \n\t */\n\tpublic synchronized void delete(Teaching pTeaching)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// ManagerTeaching.getInstance().teachingOnDeleteCascade(pTeaching);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"DELETE FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento passato come parametro.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento di cui si richiede l'id.\n\t * @return Ritorna l'id dell'insegnamento passato come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized int getTeachingId(Teaching pTeaching)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tint result = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tif (pTeaching == null)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro.\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_teaching FROM \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE name = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getName());\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getInt(\"id_teaching\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna il nome dell'insegnamento corrispondente all'id passato come\n\t * parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna una stringa contenente il nome dell'insegnamento.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tpublic synchronized String getTeachingNameById(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro\n\t\t\t */\n\t\t\tString tSql = \"SELECT name FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \" + Utility.isNull(pId);\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getString(\"name\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insegnamento corrispondente all'id passato come parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna l'insegnamento associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Teaching getTeachingById(int pId)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tInvalidValueException {\n\t\tTeaching result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" WHERE id_teaching = \" + Utility.isNull(pId);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme di tutti gli insegnamenti presenti nel database.\n\t * \n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachings()\n\t\t\tthrows ConnectionException, SQLException, InvalidValueException,\n\t\t\tEntityNotFoundException {\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \" ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByUserId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \", \" + ManagerTeaching.TABLE_TEACHING + \" WHERE (\"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \".id_teaching = \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \")\" + \" ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti che il docente insegna nella classe\n\t * \n\t * @param pIdTeacher\n\t *            L'id dell'utente.\n\t * @param pIdClass\n\t *            l'id della classe\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByUserIdClassID(int pIdTeacher,int pIdClass)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pIdTeacher <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\t\tif (pIdClass <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare la classe\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\t\n\t\t\tString sql = \"SELECT DISTINCT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \", \" + ManagerTeaching.TABLE_TEACHING + \" WHERE (\"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pIdTeacher) +\" AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM \n\t\t\t\t\t+ \".id_teaching= \" + Utility.isNull(pIdClass)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \".id_teaching = \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching \"\n\t\t\t\t\t+\") ORDER BY name\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Verifica se un insegnamento ha un professore assegnato.\n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @return Ritorna true se l'insegnamento ha un professore assegnato, false\n\t *         altrimenti.\n\t * \n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized boolean hasTeacher(Teaching pTeaching)\n\t\t\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\t\t\tInvalidValueException {\n\t\tConnection connect = null;\n\t\tboolean result = false;\n\t\tif (pTeaching.getId() <= 0)\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Preparimao la stringa sql\n\t\t\tString sql = \"SELECT * FROM \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHER_CLASSROOM\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId());\n\t\t\t// Inviamo la Query al database\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\tif (pRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\t// rilasciamo le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati alla classe specificata\n\t * \n\t * @param pId\n\t *            L'id della classe.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByClassroomId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId < 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'id della Classe!\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_classroom = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \" AND \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_address = \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t\t\t+ \".id_address AND \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching= \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \".id_teaching \";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme degli insegnamenti associati alla classe specificata\n\t * \n\t * @param name\n\t *            Il nome della classe.\n\t * @return Ritorna una collection di insegnamenti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Teaching> getTeachingsByClassroomName(\n\t\t\tString name) throws EntityNotFoundException, ConnectionException,\n\t\t\tSQLException, InvalidValueException {\n\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\n\t\tif ((name == null) || (name == \"\"))\n\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\"specificare il nome della Classe!\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".* FROM \" + ManagerClassroom.TABLE_CLASSROOM + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \", \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_TEACHING + \" WHERE \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".name = \"\n\t\t\t\t\t+ Utility.isNull(name) + \" AND \"\n\t\t\t\t\t+ ManagerClassroom.TABLE_CLASSROOM + \".id_address = \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS\n\t\t\t\t\t+ \".id_address AND \" + ManagerTeaching.TABLE_TEACHING\n\t\t\t\t\t+ \".id_teaching= \"\n\t\t\t\t\t+ ManagerTeaching.TABLE_ADDRESS_TEACHINGS + \".id_teaching \";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized Collection<Teaching> getTeachingsByIdUserIdClassroom(int pUser, int pClass) throws SQLException,\n\tEntityNotFoundException, ConnectionException, InvalidValueException {\n\t\t\n\t\t\n\t\tCollection<Teaching> result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// \tPreparimao la stringa sql\n\t\t\t//select teaching.* from teacher_has_classroom AS THC , teaching where thc.id_user = 54 \n\t\t\t//&& thc.id_classroom = 64 && thc.id_teaching = teaching.id_teaching\n\t\t\t\n\t\t\tString sql = \"SELECT DISTINCT \"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING+\".*\" \n\t\t\t\t+\" FROM \" \n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+\" , \"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING\n\t\t\t\t+ \" WHERE \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+ \".id_user = \"  \n\t\t\t\t+ Utility.isNull(pUser)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+ \".id_classroom= \"\n\t\t\t\t+ Utility.isNull(pClass)\n\t\t\t\t+ \" AND \"\n\t\t\t\t+ ManagerUser.TABLE_TEACHER_CLASSROOM\n\t\t\t\t+\".id_teaching =\"\n\t\t\t\t+ManagerTeaching.TABLE_TEACHING\n\t\t\t\t+\".id_teaching\";\n\t\t\t\t// Inviamo la Query al database\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Consente la lettura di un record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna l'insegnamento letto.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Teaching loadRecordFromRs(ResultSet pRs) throws SQLException,\n\t\t\tInvalidValueException {\n\t\tTeaching teaching = new Teaching();\n\t\tteaching.setName(pRs.getString((\"name\")));\n\t\tteaching.setId(pRs.getInt(\"id_teaching\"));\n\n\t\treturn teaching;\n\t}\n\n\t/**\n\t * Consente la lettura dei record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna la collection di insegnamenti letti.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Teaching> loadRecordsFromRs(ResultSet pRs)\n\t\t\tthrows SQLException, InvalidValueException {\n\t\tCollection<Teaching> result = new Vector<Teaching>();\n\t\tdo {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cabc"},"name":"ServletRemoveTeachingAsTeacher.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per rimuovere Insegnamenti ad un docente\n * \n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletRemoveTeachingAsTeacher extends HttpServlet {\n\n\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -8007609698841510837L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/teacherTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerClassroom managerClass = ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t// //Mi servono i 3 Id user class teachings(che non so quanti ne sono)\n\t\t\tint idTeacher = (int) ((User) session.getAttribute(\"user\")).getId();\n\t\t\tUser teacher = managerUser.getUserById(idTeacher); \n\t\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"classId\"));\n\t\t\tString[] idTeachingList = pRequest.getParameterValues(\"unselectedTeachings\");\n\t\t\tint nTeaching =idTeachingList.length;\n\t\t\tint temp;\n\t\t\t//Collection<Teaching> listSelcected = new Vector<Teaching>();\n\t\t\tif(idTeachingList==null)\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\telse{\n\t\t\t\tfor(int i=0;i<nTeaching;i++){\n\t\t\t\t\ttemp = Integer.valueOf(idTeachingList[i]);\n\t\t\t\t\tif(managerUser.hasTeaching(teacher,managerTeaching.getTeachingById(temp),managerClass.getClassroomByID(idClass))){\n\t\t\t\t\t\tmanagerUser.removeTeacherAtClassroomTeaching(teacher,idClass,temp);\n\t\t\t\t\t\t//listSelcected.add(managerTeaching.getTeachingById(temp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//session.setAttribute(\"teachingListTeacher\", listSelcected);\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cabd"},"name":"RegisterLine.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\npublic class RegisterLine implements Serializable {\n\n\t/**\n\t * Classe che modella una linea del registro \n\t * @author Nicola Pisanti\n\t * @version 1.0 \n\t */\n\tprivate static final long serialVersionUID = -6010085925185873838L;\n\t\n\tprivate UserListItem student;\n\tprivate Absence absence;\n\tprivate Delay delay;\n\t\n\tpublic RegisterLine(){\n\t\tabsence=null;\n\t\tdelay=null;\n\t\t\n\t}\n\t\n\t/**\n\t * Metodo che restituisce lo studente di questa riga del registro\n\t * @return un oggetto di tipo User che rappresenta lo studente\n\t */\n\tpublic UserListItem getStudent() {\n\t\treturn student;\n\t}\n\t/**\n\t * Metodo che setta lo studente di questa riga del registro\n\t * @param un oggetto di tipo User che rappresenta lo studente da inserire\n\t */\n\tpublic void setStudent(UserListItem student) {\n\t\tthis.student = student;\n\t}\n\t/**\n\t * Metodo che restituisce l'assenza dello studente di questa riga del registro\n\t * @return un oggetto di tipo Absence che rappresenta l'assenza, oppure null se lo studente era presente\n\t */\n\tpublic Absence getAbsence() {\n\t\treturn absence;\n\t}\n\t/**\n\t * Metodo che setta l'assenza dello studente di questa riga del registro \n\t * @param un oggetto di tipo Absence da settare\n\t */\n\tpublic void setAbsence(Absence absence) {\n\t\tthis.absence = absence;\n\t}\n\t/**\n\t * Metodo che restituisce il ritardo dello studente di questa riga del registro \n\t * @return un oggetto di tipo Delay che rappresenta il ritardo, oppure null se lo studente era arrivato in orario o era assente\n\t */\n\tpublic Delay getDelay() {\n\t\treturn delay;\n\t}\n\t/**\n\t * Metodo che setta il ritardo dello studente di questa riga del registro \n\t * @param un oggetto di tipo Delay da settare\n\t */\n\tpublic void setDelay(Delay delay) {\n\t\tthis.delay = delay;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cabe"},"name":"ServletUpdateTeaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un insegnamento.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletUpdateTeaching extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 943677173076169934L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./teachingList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tTeaching teaching = (Teaching) session.getAttribute(\"teaching\");\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tteaching.setName((pRequest.getParameter(\"name\")));\n\t\t\tteaching.setId(teaching.getId());\n\n\t\t\tif (!managerTeaching.exists(teaching)) {\n\t\t\t\tmanagerTeaching.update(teaching);\n\t\t\t} \n\t\t\telse if(teaching.getId() == managerTeaching.getTeachingId(teaching))\n\t\t\t\t\tmanagerTeaching.update(teaching);\n\t\t\telse {\n\n\t\t\t\tthrow new DuplicatedEntityException(\n\t\t\t\t\t\t\"Insegnamento già esistente\");\n\t\t\t}\n\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cabf"},"name":"ServletShowClassroomDetails.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n/**\n * Servlet per mostrare i dettagli di una classe\n * \n * @author Vecchione Giuseppe\n * \n */\npublic class ServletShowClassroomDetails extends HttpServlet {\n\n\t\n\tprivate static final long serialVersionUID = 5821337495655009521L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/classroomManagement/showClassroomDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tint classroomId = 0;\n\t\tClassroom classroom= null;\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tclassroomId = Integer.valueOf(pRequest.getParameter(\"idClassroom\"));\n\t\t\tclassroom = managerClassroom.getClassroomByID(classroomId);\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac0"},"name":"ServletInsertReport.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.application.reportManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.ManagerVotes;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per inserire una pagella di uno studente.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletInsertReport extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 8121220088758892213L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./showReports\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerVotes managerVotes = ManagerVotes.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tClassroom classroom = (Classroom) session.getAttribute(\"classroom\");\n\t\t\t// Lista teaching\n\t\t\tteachingList = managerTeaching.getTeachingsByClassroomId(classroom\n\t\t\t\t\t.getIdAddress());\n\t\t\tIterator<Teaching> itTeaching = teachingList.iterator();\n\t\t\tInteger year = (Integer) session.getAttribute(\"selectedYear\");\n\t\t\tUserListItem student = (UserListItem) session\n\t\t\t\t\t.getAttribute(\"student\");\n\t\t\t// Quadrimestre\n\t\t\tint turn = (Integer) session.getAttribute(\"q\");\n\t\t\tTeaching teachingTemp = null;\n\t\t\tint idTemp;\n\t\t\tString write, oral, lab;\n\t\t\tgotoPage += \"?student=\" + student.getId() + \"&q=\" + turn;\n\t\t\twhile (itTeaching.hasNext()) {\n\t\t\t\tteachingTemp = itTeaching.next();\n\t\t\t\tidTemp = teachingTemp.getId();\n\t\t\t\twrite = \"scritto_\" + idTemp;\n\t\t\t\toral = \"orale_\" + idTemp;\n\t\t\t\tlab = \"laboratorio_\" + idTemp;\n\t\t\t\twrite = pRequest.getParameter(write);\n\t\t\t\toral = pRequest.getParameter(oral);\n\t\t\t\tlab = pRequest.getParameter(lab);\n\t\t\t\tVotes newVotes = new Votes();\n\t\t\t\tint writeInt=0, oralInt=0,labInt=0;\n\t\t\t\tif(write!=\"\")\n\t\t\t\t\twriteInt = Integer.valueOf(write);\n\t\t\t\tif(oral!=\"\")\n\t\t\t\t\toralInt = Integer.valueOf(oral);\n\t\t\t\tif(lab!=\"\")\n\t\t\t\t\tlabInt = Integer.valueOf(lab);\n\t\t\t\tif (writeInt != 0 || oralInt != 0 || labInt != 0) {\n\t\t\t\t\tnewVotes.setAccademicYear(year);\n\t\t\t\t\tnewVotes.setId_user(student.getId());\n\t\t\t\t\tnewVotes.setLaboratory(labInt);\n\t\t\t\t\tnewVotes.setOral(oralInt);\n\t\t\t\t\tnewVotes.setTeaching(idTemp);\n\t\t\t\t\tnewVotes.setTurn(turn);\n\t\t\t\t\tnewVotes.setWritten(writeInt);\n\t\t\t\t\tmanagerVotes.insert(newVotes);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac1"},"name":"ServletReportTeachings.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare un report degli insegnamenti di un docente\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletReportTeachings extends HttpServlet {\n\n\t\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 9020697390947529914L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/userManagement/showTeacherDetails.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tUser teacher = (User) session.getAttribute(\"user\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t//recuperiamo l'anno accademico selezionato\n\t\t\tint academicYear = Integer.valueOf(pRequest.getParameter(\"accademicYear\"));\n\t\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\t//Calcoliamo l'elenco delle classi in cui insegna il docente in base all'anno selezionato\n\t\t\tCollection<Classroom> classroomList = null;\n\t\t\tclassroomList = managerClassroom.getClassroomsByTeacherAcademicYear(teacher, academicYear);\n\t\t\tsession.setAttribute(\"classroomList\", classroomList);\n\t\t\tsession.setAttribute(\"selectedYear\", academicYear);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (MandatoryFieldException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac2"},"name":"ServletLogout.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca65"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca60"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca73"}]],"contents":"package smos.application.userManagement;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * Servlet utilizzata per effettuare il logout dell'utente.\n * \n * @author napolitano Vincenzo.\n *\n */\npublic class ServletLogout extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse) throws ServletException, IOException {\n\t\t\n\t\tpRequest.getSession().invalidate();\n\t\tpResponse.sendRedirect(\"./index.htm\");\n\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, HttpServletResponse pResponse) throws ServletException, IOException {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac3"},"name":"ServletAddressTeachings.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.*;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.*;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletAddressTeachings extends HttpServlet {\n\n\t/**\n\t * Servlet utilizzata per visualizzare gli insegnamenti associati ad un indirizzo.\n\t * \n\t * @author Vecchione Giuseppe.\n\t * \n\t */\n\tprivate static final long serialVersionUID = 239937097347087502L;\n\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/addressManagement/addressTeachings.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerTeaching managerTeaching =ManagerTeaching.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\tCollection<Teaching> teachingList = managerTeaching.getTeachings();\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t} catch (InvalidValueException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac4"},"name":"ServletShowTeachingList.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.teachingManagement;\n\nimport smos.Environment;\nimport smos.bean.Teaching;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerTeaching;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli insegnamenti.\n * \n * @author Giulio D'Amora.\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletShowTeachingList extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1361713427864776624L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement/teachingManagement/showTeachingList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Teaching> teachingList = null;\n\t\tManagerTeaching managerTeaching = ManagerTeaching.getInstance();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\n\t\t\tteachingList = managerTeaching.getTeachings();\n\n\t\t\tsession.setAttribute(\"teachingList\", teachingList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac5"},"name":"ServletShowRegister.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca36"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca37"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca68"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6b"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca71"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca70"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca64"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca61"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca39"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca50"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca51"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca57"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca53"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}]],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.RegisterLine;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\n\npublic class ServletShowRegister extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -4054623648928396283L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showRegister.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\tManagerRegister  managerRegister= ManagerRegister.getInstance();\n\t\tCollection<RegisterLine> register = null;\n\t\tint year;\n\t\tint month;\n\t\tint day;\n\t\t\n\t\tString date=pRequest.getParameter(\"date\");\n\t\tint idClass = Integer.valueOf(pRequest.getParameter(\"idClassroom\"));\n\t\t\n\t\tString [] datevalues;\n\t\tdatevalues = date.split(\"/\");\n\t\tyear = Integer.valueOf(datevalues[2]);\n\t\tmonth = Integer.valueOf(datevalues[1]);\n\t\tday = Integer.valueOf(datevalues[0]);\n\t\t\n\t\ttry {\n\t\t\tregister= managerRegister.getRegisterByClassIDAndDate(idClass, Utility.String2Date(date));\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tClassroom classroom= managerClassroom.getClassroomByID(idClass);\n\t\t\t\n\t\t\tsession.setAttribute(\"register\", register);\n\t\t\tsession.setAttribute(\"year\", year);\n\t\t\tsession.setAttribute(\"month\", month);\n\t\t\tsession.setAttribute(\"day\", day);\n\t\t\t\n\t\t\t\n\t\t\tsession.setAttribute(\"classroom\", classroom);\n\t\t\t\n\t\t\t//prendere l'academic year dalla session\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac6"},"name":"Utility.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.utility;\n\nimport smos.exception.EntityNotFoundException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.TimeZone;\nimport java.sql.*;\nimport java.text.DateFormat;\n\n/**\n * Questa classe contiene un insieme di utility per la gestione del sistema.\n */\npublic class Utility {\n\n\t/**\n\t * Costanti\n\t */\n\tpublic static final char SLASH = (char) 47;// carattere '/' in ascii\n\n\t/**\n\t * \n\t */\n\tpublic static final char BACKSLASH = (char) 92;// carattere '\\' in ascii\n\n\t/**\n\t * \n\t */\n\tpublic static final String[] day = { \"lunedi\", \"martedi\", \"mercoledi\",\n\t\t\t\"giovedi\", \"venerdi\", \"sabato\"};\n\t\n\t/**\n\t * \n\t */\n\tpublic static final String[] validHour = { \"08:00\", \"08:30\", \"09:00\",\n\t\t\"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\", \"12:00\", \"12:30\",\n\t\t\"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\",\n\t\t\"16:30\", \"17:00\", \"17:30\", \"18:00\", \"18:30\", \"19:00\", \"19:30\",\n\t\t\"20:00\" };\n\t\n\tpublic static final String[] month = {\"gen\",\"feb\",\"mar\",\"apr\",\"mag\",\"giu\",\"lug\",\"ago\",\"set\",\"ott\",\"nov\",\"dic\"};\n\n\t/**\n\t * \n\t */\n\tpublic static final String[] requestState = { \"effettuata\", \"rifiutata\",\n\t\t\t\"accettata\", \"eliminata\" };\n\t\n\t//Variabili da impostare all'avvio di Tomcat\n\t\n\t//Variabili per l'aspetto grafico del programma\n\tprivate static String imageHeaderPath = \"\";\n\tprivate static String imageHeaderLogoPath = \"\";\n\tprivate static String imageLeftColumn = \"\";\n\tprivate static String textFooter = \"\";\n\t//server smtp per invio e-mail\n\tprivate static String serverSmtp = \"smtp.tele2.it\";\n\t//Giorni minimi di distanza dall'esame per sottoscrivere o eliminare una prenotazione\n\tprivate static int needDayBeforeExam = 0;\n\t//Giorni massimi di distanza dall'esame per sottoscrivere una prenotazione\n\tprivate static int maxDayBeforeExam = 0;\n\t//pdf path per il percorso di memorizzazione dei file pdf\n\tprivate static String pdfPath = \"\";\n\t// upload path per il percorso di memorizzazione dei file per l'importazione dei dati\n\tprivate static String uploadPath = \"\";\n\t//Variabili per la connessione al database\n\tprivate static String driverMySql = \"com.mysql.jdbc.Driver\";\n\tprivate static String fullPathDatabase = \"jdbc:mysql://localhost:3306/smos\";\n\tprivate static String userName = \"root\";\n\tprivate static String password = \"\";\n\tprivate static int maxPoolSize = 200;\n\tprivate static int waitTimeout = 120000;\n\tprivate static int activeTimeout = 600000;\n\tprivate static int poolTimeout = 27000000;\t\n\t\n\t\n\n\t/**\n\t * Ritorna, dati un campo e una tabella, il valore massimo del campo nella\n\t * tabella.\n\t * \n\t * @param pField\n\t *            Il campo di cui vogliamo recuperare il valore massimo.\n\t * @param pTable\n\t *            La tabella in cui ricercare le informazioni richieste.\n\t * @return Ritorna il valore massimo, del campo pField, passato come\n\t *         parametro, presente nella tabella pTable, passata come parametro.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\tsynchronized static public int getMaxValue(String pField, String pTable)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\n\t\tint value = 0;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t/*\n\t\t\t * Se non sono stati forniti il campo e la tabella restituiamo un\n\t\t\t * codice di errore\n\t\t\t */\n\t\t\tif (pField.equals(\"\"))\n\t\t\t\tthrow new EntityNotFoundException();\n\t\t\tif (pTable.equals(\"\"))\n\t\t\t\tthrow new EntityNotFoundException();\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * richieste\n\t\t\t */\n\t\t\tString tSql = \"SELECT max(\" + pField + \") as new_field FROM \"\n\t\t\t\t\t+ pTable;\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tvalue = tRs.getInt(\"new_field\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException();\n\n\t\t\treturn value;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Converte una data in una stringa formattata per il database.\n\t * \n\t * @param pDate\n\t *            La data da convertire.\n\t * @return Ritorna la data formattata per il database.\n\t */\n\tstatic public String date2SQLString(java.util.Date pDate, boolean pHour) {\n\t\t\n\t\tTimeZone tz = TimeZone.getDefault();\n\t\tCalendar calendar = Calendar.getInstance(tz);\n\t\tcalendar.setTime(pDate);\n\t\t\n\t\t\n\t\tint year = calendar.get(Calendar.YEAR);\n\t\tint month = calendar.get(Calendar.MONTH) + 1;\n\t\tint day = calendar.get(Calendar.DATE);\n\t\t\n\t\tString result = year + \"-\" + month + \"-\" + day ;\n\t\t\n\t\tint hour = calendar.get(Calendar.HOUR_OF_DAY);\n\t\tint min = calendar.get(Calendar.MINUTE);\n\t\tint sec = calendar.get(Calendar.SECOND);\n\t\t\n\t\tif (pHour){\n\t\t\tresult = result + \" \" + hour + \":\" + min + \":\" + sec; \n\t\t}\n\t\t\t\t\t\t\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Controlla se la stringa passata come parametro e' null.\n\t * \n\t * @param pStr\n\t *            La stringa da controllare.\n\t * \n\t * @return <code>null</code> se la stringa e' null Altrimenti la stringa e'\n\t *         passata al metodo <code>Replace</code>\n\t * \n\t * @see #Replace\n\t */\n\tstatic public String isNull(String pStr) {\n\t\tString tTmp;\n\n\t\tif (pStr == null) \n\t\t\ttTmp = \"null\";\n\n\t\telse {\n\t\t\tpStr = ReplaceAllStrings(pStr, \"'\", \"\\\\'\");\n\t\t\tpStr = ReplaceAllStrings(pStr, \"\\\"\", \"\\\\\" + \"\\\"\");\n\t\t\ttTmp = \"'\" + pStr + \"'\";\n\t\t}\n\t\treturn tTmp;\n\t}\n\n\t/**\n\t * Controlla se un dato intero ï¿½ null.\n\t * \n\t * @param pInt\n\t *            Il dato intero da controllare.\n\t * @return Ritorna il dato in formato stringa se il dato ï¿½ diverso da zero,\n\t *         altrimenti la stringa null.\n\t */\n\tstatic public String isNull(Integer pInt) {\n\t\tString tIntString;\n\n\t\tif (pInt == null)\n\t\t\ttIntString = \"null\";\n\t\telse\n\t\t\ttIntString = pInt.toString();\n\t\treturn tIntString;\n\t}\n\n\t/**\n\t * Controlla se una data e' null.\n\t * \n\t * @param pDate\n\t *            la data da controllare.\n\t * \n\t * @return Ritorna la stringa che rappresenta la data passata in input,\n\t *         formattata per il database.\n\t */\n\tstatic public String isNull(java.util.Date pDate) {\n\n\t\treturn \"'\" + date2SQLString(pDate,false) + \"'\";\n\t}\n\n\tstatic public String clear(String pString){\n\t\tint start = 0;\n\t\tint start2 = 0;\n\t\tint end = 0;\n\t\tint end2 = 0;\n\t\tString result = \"\";\n\t\tString result2 = \"\";\n\t\t\t\n\t\twhile (end >= 0){\n\t\tend = pString.indexOf(\"'\", start);\n\t\t\n\t\tif (end >= 0){\n\t\t\n\t\t\tresult= result +pString.substring(start, end);\n\t\t\tresult = result + \"\\\\'\";\n\t\t\tstart = end+1;\n\t\t\t\n\t\t} else \n\t\t\tresult = result + pString.substring(start);\n\t\t}\n\t\t\n\t\twhile (end2 >= 0){\n\t\t\tend2 = result.indexOf(\"\\n\", start2);\n\t\t\t\n\t\t\tif (end2 >= 0){\n\t\t\t\t\n\t\t\t\tresult2= result2 +result.substring(start2, end2-1);\n\t\t\t\tresult2 = result2 + \" \";\n\t\t\t\tstart2 = end2+1;\n\t\t\t\t\n\t\t\t} else \n\t\t\t\tresult2 = result2 + result.substring(start2);\n\t\t\t}\n\t\treturn(result2);\t\n\t}\n\t\n\t/**\n\t * Converte una String in Integer.\n\t * \n\t * @param pStr\n\t *            La String da convertire.\n\t * \n\t * @return L'Integer contenuto nella String <code>0</code> se non ï¿½\n\t *         possibile la conversione.\n\t * \n\t */\n\tstatic public Integer String2Integer(String pStr) {\n\t\tInteger tInteger;\n\n\t\tif ((pStr == null) || (pStr.compareTo(\"\") == 0))\n\t\t\ttInteger = new Integer(0);\n\t\telse\n\t\t\ttry {\n\t\t\t\ttInteger = Integer.decode(pStr);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttInteger = new Integer(0);\n\t\t\t}\n\n\t\treturn tInteger;\n\t}\n\n\t/**\n\t * Sostituisce i caratteri ' e \\ con '' nella stringa passata come \n\t * parametro.\n\t * \n\t * @param pStr\n\t *            La stringa da trasformare.\n\t * \n\t * @return La tringa trasformata.\n\t */\n\tstatic public String Replace(String pStr) {\n\t\tString tRis;\n\n\t\ttRis = pStr.replaceAll(\"\\\"\", \"'\");\n\n\t\ttRis = tRis.replaceAll(\"'\", \"\\\\'\");\n\n\t\treturn tRis;\n\t}\n\n\t/**\n\t * Sostituisce il carattere ' con la stringa \" \" nella stringa passata come\n\t * parametro.\n\t * \n\t * @param pStr\n\t *            La stringa da trasformare.\n\t * \n\t * @return La tringa trasformata.\n\t */\n\tstatic public String ReplaceQuote(String pStr) {\n\t\tString tRis;\n\n\t\ttRis = pStr.replaceAll(\"'\", \" \");\n\t\treturn tRis;\n\t}\n\n\t/**\n\t * Esegue un'operazione sul database tramite una stringa SQL.\n\t * \n\t * @param pConnect\n\t *            La connessione al database.\n\t * @param pSql\n\t *            La stringa SQL.\n\t * \n\t * @return Il numero di record coinvolti nell'operazione.\n\t * \n\t * @throws SQLException\n\t */\n\tstatic public int executeOperation(Connection pConnect, String pSql)\n\t\t\tthrows SQLException {\n\t\tStatement stmt = pConnect.createStatement();\n\t\tint tResult = stmt.executeUpdate(pSql);\n\t\tstmt.close();\n\t\treturn tResult;\n\t}\n\n\t/**\n\t * Esegue una Query SQL sul database.\n\t * \n\t * @param pConnect\n\t *            La connessione al database.\n\t * @param pSql\n\t *            La stringa SQL.\n\t * \n\t * @return Il numero di record coinvolti nell'operazione.\n\t * \n\t * @throws SQLException\n\t */\n\tstatic public ResultSet queryOperation(Connection pConnect, String pSql)\n\t\t\tthrows SQLException {\n\n\t\tStatement stmt = pConnect.createStatement();\n\t\treturn stmt.executeQuery(pSql);\n\t}\n\n\t/**\n\t * Converte un dato booleano in intero.\n\t * \n\t * @param pBol\n\t *            Il valore booleano da convertire in intero.\n\t * \n\t * @return Il valore intero corrispondente al valore booleano passato come\n\t *         parametro.\n\t */\n\tstatic public int BooleanToInt(boolean pBol) {\n\t\tif (pBol == true)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn 0;\n\t}\n\n\t/**\n\t * Converte un dato intero in booleano.\n\t * \n\t * @param pInt\n\t *            Il valore intero da convertire in booleano.\n\t * \n\t * @return Il valore booleano corrispondente al valore intero passato come\n\t *         parametro.\n\t */\n\tstatic public boolean IntToBoolean(int pInt) {\n\t\tif (pInt == 1)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\t/**\n\t * Restituisce la data corrente.\n\t * \n\t * @return La data corrente.\n\t */\n\tstatic public java.util.Date today() {\n\t\tCalendar calendar = Calendar.getInstance();\n\t\tjava.util.Date creationDate = calendar.getTime();\n\t\treturn creationDate;\n\t\t// java.util.Date creationDate = new java.util.Date();\n\t\t// Timestamp timeStamp = new Timestamp(creationDate.getTime());\n\t\t// return (java.util.Date) timeStamp;\n\t}\n\n\t/**\n\t * Restituisce la data contenuta nella stringa in input.\n\t * \n\t * @param pDate\n\t *            La stringa di cui effettuare il parse in un data.\n\t * \n\t * @return La data convertita.\n\t */\n\tstatic public java.util.Date String2Date(String pDate) {\n\t\ttry {\n\t\t\tDateFormat dfDate = DateFormat.getDateInstance();\n\t\t\tjava.util.Date tDate = dfDate.parse(pDate,\n\t\t\t\t\tnew java.text.ParsePosition(0));\n\t\t\tjava.sql.Timestamp timeStamp = new java.sql.Timestamp(tDate\n\t\t\t\t\t.getTime());\n\n\t\t\treturn (java.util.Date) timeStamp;\n\t\t} catch (Exception e) {\n\t\t\ttry {\n\t\t\t\tDateFormat dfDate = DateFormat.getDateInstance(\n\t\t\t\t\t\tDateFormat.SHORT, java.util.Locale.ITALY);\n\t\t\t\tjava.util.Date tDate = dfDate.parse(pDate,\n\t\t\t\t\t\tnew java.text.ParsePosition(0));\n\t\t\t\tjava.sql.Timestamp timeStamp = new java.sql.Timestamp(tDate\n\t\t\t\t\t\t.getTime());\n\n\t\t\t\treturn (java.util.Date) timeStamp;\n\t\t\t} catch (Exception e2) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Restituisce la data in input in formato String.\n\t * \n\t * @param pDate\n\t *            La Data da convertire.\n\t * @param pHour\n\t * \n\t * @return La data convertita.\n\t */\n\tstatic public String Date2String(java.util.Date pDate, boolean pHour) {\n\t\ttry {\n\t\t\tDateFormat dfDate = DateFormat.getDateInstance(DateFormat.SHORT);\n\t\t\tDateFormat dfTime = DateFormat.getTimeInstance(DateFormat.SHORT);\n\t\t\tif (pHour)\n\t\t\t\treturn dfDate.format(pDate) + \" \" + dfTime.format(pDate);\n\t\t\telse\n\t\t\t\treturn dfDate.format(pDate);\n\t\t} catch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * @param sourceStr\n\t * @param searchFor\n\t * @param replaceWith\n\t * @return la stringa corrispondente a searchBuffer\n\t */\n\tpublic static String ReplaceAll(String sourceStr, String searchFor,\n\t\t\tString replaceWith) {\n\t\tStringBuffer searchBuffer = new StringBuffer(sourceStr);\n\t\tint hits = 0;\n\n\t\twhile (searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\tsearchFor.toUpperCase(), hits) >= 0) {\n\t\t\tint newIndex = searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\t\tsearchFor.toUpperCase(), hits);\n\t\t\tsearchBuffer.replace(newIndex, newIndex + searchFor.length(),\n\t\t\t\t\treplaceWith);\n\t\t\thits++;\n\t\t}\n\n\t\treturn searchBuffer.toString();\n\t}\n\n\t// La funzione precedente va in loop se sostituisco \"\\\" con \"\\\\\"\n\t// usiamo allora due variabile la prima viene \"consumata\" ad ogni occorrenza\n\t// del pattern\n\t/**\n\t * @param sourceStr\n\t * @param searchFor\n\t * @param replaceWith\n\t * @return newStringBuffer\n\t */\n\tpublic static String ReplaceAllStrings(String sourceStr, String searchFor,\n\t\t\tString replaceWith) {\n\t\tStringBuffer searchBuffer = new StringBuffer(sourceStr);\n\t\tStringBuffer newStringBuffer = new StringBuffer(\"\");\n\n\t\twhile (searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\tsearchFor.toUpperCase()) >= 0) {\n\t\t\tint newIndex = searchBuffer.toString().toUpperCase().indexOf(\n\t\t\t\t\tsearchFor.toUpperCase());\n\t\t\tnewStringBuffer.append(searchBuffer.substring(0, newIndex));\n\t\t\tnewStringBuffer.append(replaceWith);\n\t\t\tsearchBuffer = new StringBuffer(searchBuffer.substring(newIndex\n\t\t\t\t\t+ searchFor.length(), searchBuffer.length()));\n\t\t}\n\n\t\tnewStringBuffer.append(searchBuffer);\n\t\treturn newStringBuffer.toString();\n\t}\n\n\t/**\n\t * @param sourceStr\n\t * @param removeStr\n\t */\n\tpublic static void RemoveAll(String sourceStr, String removeStr) {\n\t\tint nextOccurence;\n\n\t\twhile (sourceStr.toString().toUpperCase().indexOf(\n\t\t\t\tremoveStr.toUpperCase()) >= 0) {\n\t\t\tnextOccurence = sourceStr.toString().toUpperCase().indexOf(\n\t\t\t\t\tremoveStr.toUpperCase());\n\t\t\tsourceStr = sourceStr.substring(0, nextOccurence)\n\t\t\t\t\t+ sourceStr.substring(nextOccurence + removeStr.length(),\n\t\t\t\t\t\t\tsourceStr.length());\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Calcola la distanza in giorni tra 2 date passate.\n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tpublic static int daysBetween(Date today, Date reservationDate){\n\t\tint daysBetween = 0;\n\t\tlong millisecBetween = 0;\n\t\tfinal int millisecInADay = 86400000;\n\t\t\n\t\tGregorianCalendar firstDate = new GregorianCalendar();\n\t\tGregorianCalendar secondDate = new GregorianCalendar();\n\t\t\n\t\tfirstDate.set(today.getYear()+1900, today.getMonth(), today.getDate());\n\t\tsecondDate.set(reservationDate.getYear()+1900, reservationDate.getMonth(), reservationDate.getDate());\n\t\t\n\t\tmillisecBetween = secondDate.getTimeInMillis() - firstDate.getTimeInMillis();\n\t\tdaysBetween = (int) (millisecBetween/millisecInADay);\n\t\t\n\t\treturn (daysBetween);\n\t}\n\n\t/**\n\t * @return Il percorso impostato per i pdf.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getPdfPath() {\n\t\treturn Utility.pdfPath;\n\t}\n\n\t/**\n\t * @param pPdfPath Il path da settare per i pdf.\n\t */\n\tpublic static void setPdfPath(String pPdfPath) {\n\t\tUtility.pdfPath = pPdfPath;\n\t}\n\t\n\t/**\n\t * @return Il percorso impostato per i file utilizzati \n\t * durante l'importazione dei dati.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getUploadPath() {\n\t\treturn Utility.uploadPath;\n\t}\n\n\t/**\n\t * @param pUploadPath Il path da settare per i file utilizzati \n\t * durante l'importazione dei dati.\n\t */\n\tpublic static void setUploadPath(String pUploadPath) {\n\t\tUtility.uploadPath = pUploadPath;\n\t}\n\n\t/**\n\t * @return Il server smtp da utilizzare per l'invio\n\t * \t\t   automatizzato delle e-mail.\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic static String getServerSmtp() {\n\t\treturn Utility.serverSmtp;\n\t}\n\t\n\t/**\n\t * @param pServerSmtp il server smtp da settare.\n\t */\n\tpublic static void setServerSmtp(String pServerSmtp) {\n\t\tUtility.serverSmtp = pServerSmtp;\n\t}\n\n\t/**\n\t * @return the activeTimeout\n\t */\n\tpublic static int getActiveTimeout() {\n\t\treturn Utility.activeTimeout;\n\t}\n\n\t/**\n\t * @param activeTimeout the activeTimeout to set\n\t */\n\tpublic static void setActiveTimeout(int pActiveTimeout) {\n\t\tUtility.activeTimeout = pActiveTimeout;\n\t}\n\n\t/**\n\t * @return the driverMySql\n\t */\n\tpublic static String getDriverMySql() {\n\t\treturn Utility.driverMySql;\n\t}\n\n\t/**\n\t * @param driverMySql the driverMySql to set\n\t */\n\tpublic static void setDriverMySql(String pDriverMySql) {\n\t\tUtility.driverMySql = pDriverMySql;\n\t}\n\n\t/**\n\t * @return the fullPathDatabase\n\t */\n\tpublic static String getFullPathDatabase() {\n\t\treturn Utility.fullPathDatabase;\n\t}\n\n\t/**\n\t * @param fullPathDatabase the fullPathDatabase to set\n\t */\n\tpublic static void setFullPathDatabase(String pFullPathDatabase) {\n\t\tUtility.fullPathDatabase = pFullPathDatabase;\n\t}\n\n\t/**\n\t * @return the maxPoolSize\n\t */\n\tpublic static int getMaxPoolSize() {\n\t\treturn Utility.maxPoolSize;\n\t}\n\n\t/**\n\t * @param maxPoolSize the maxPoolSize to set\n\t */\n\tpublic static void setMaxPoolSize(int pMaxPoolSize) {\n\t\tUtility.maxPoolSize = pMaxPoolSize;\n\t}\n\n\t/**\n\t * @return the password\n\t */\n\tpublic static String getPassword() {\n\t\treturn Utility.password;\n\t}\n\n\t/**\n\t * @param password the password to set\n\t */\n\tpublic static void setPassword(String pPassword) {\n\t\tUtility.password = pPassword;\n\t}\n\n\n\t/**\n\t * @return the poolTimeout\n\t */\n\tpublic static int getPoolTimeout() {\n\t\treturn Utility.poolTimeout;\n\t}\n\n\t/**\n\t * @param poolTimeout the poolTimeout to set\n\t */\n\tpublic static void setPoolTimeout(int pPoolTimeout) {\n\t\tUtility.poolTimeout = pPoolTimeout;\n\t}\n\n\t/**\n\t * @return the userName\n\t */\n\tpublic static String getUserName() {\n\t\treturn Utility.userName;\n\t}\n\n\t/**\n\t * @param userName the userName to set\n\t */\n\tpublic static void setUserName(String pUserName) {\n\t\tUtility.userName = pUserName;\n\t}\n\n\t/**\n\t * @return the waitTimeout\n\t */\n\tpublic static int getWaitTimeout() {\n\t\treturn Utility.waitTimeout;\n\t}\n\n\t/**\n\t * @param waitTimeout the waitTimeout to set\n\t */\n\tpublic static void setWaitTimeout(int pWaitTimeout) {\n\t\tUtility.waitTimeout = pWaitTimeout;\n\t}\n\n\t/**\n\t * @return the imageHeaderPath\n\t */\n\tpublic static String getImageHeaderPath() {\n\t\treturn Utility.imageHeaderPath;\n\t}\n\n\t/**\n\t * @param imageHeaderPath the imageHeaderPath to set\n\t */\n\tpublic static void setImageHeaderPath(String pImageHeaderPath) {\n\t\tUtility.imageHeaderPath = pImageHeaderPath;\n\t}\n\n\t/**\n\t * @return the textFooter\n\t */\n\tpublic static String getTextFooter() {\n\t\treturn Utility.textFooter;\n\t}\n\n\t/**\n\t * @param textFooter the textFooter to set\n\t */\n\tpublic static void setTextFooter(String pTextFooter) {\n\t\tUtility.textFooter = pTextFooter;\n\t}\n\n\t/**\n\t * @return the imageLeftColumn\n\t */\n\tpublic static String getImageLeftColumn() {\n\t\treturn Utility.imageLeftColumn;\n\t}\n\n\t/**\n\t * @param imageLeftColumn the imageLeftColumn to set\n\t */\n\tpublic static void setImageLeftColumn(String pImageLeftColumn) {\n\t\tUtility.imageLeftColumn = pImageLeftColumn;\n\t}\n\t\n\tpublic static String getImageLogoHeaderPath() {\n\t\treturn Utility.imageHeaderLogoPath;\n\t}\n\n\tpublic static void setImageLogoHeaderPath(String pImageHeaderLogoPath) {\n\t\tUtility.imageHeaderLogoPath = pImageHeaderLogoPath;\n\t}\n\n\t/**\n\t * @return the needDayBeforeExam\n\t */\n\tpublic static int getNeedDayBeforeExam() {\n\t\treturn Utility.needDayBeforeExam;\n\t}\n\n\t/**\n\t * @param needDayBeforeExam the needDayBeforeExam to set\n\t */\n\tpublic static void setNeedDayBeforeExam(int pNeedDayBeforeExam) {\n\t\tUtility.needDayBeforeExam = pNeedDayBeforeExam;\n\t}\n\n\t/**\n\t * @return the maxDayBeforeExam\n\t */\n\tpublic static int getMaxDayBeforeExam() {\n\t\treturn Utility.maxDayBeforeExam;\n\t}\n\n\t/**\n\t * @param maxDayBeforeExam the maxDayBeforeExam to set\n\t */\n\tpublic static void setMaxDayBeforeExam(int pMaxDayBeforeExam) {\n\t\tUtility.maxDayBeforeExam = pMaxDayBeforeExam;\n\t}\n\t\n\tpublic static String getActualDate() {\n\t\tGregorianCalendar gc = new GregorianCalendar();\n\n\t\tString date=\"\";\n\t\tint year=gc.get(GregorianCalendar.YEAR);\n\t\t\n\t\tint month=gc.get(GregorianCalendar.MONTH)+1;\n\t\tString months=\"\";\n\t\tif(month<10){\n\t\t\tmonths=\"0\"+month;\n\t\t}else{\n\t\t\tmonths= months+month;\n\t\t}\n\t\t\n\t\tint day=gc.get(GregorianCalendar.DAY_OF_MONTH);\n\t\tString days=\"\";\n\t\tif(day<10){\n\t\t\tdays=\"0\"+day;\n\t\t}else{\n\t\t\tdays= days+day;\n\t\t}\n\t\t\n\t\tdate= date + days+\"/\"+months+\"/\"+year;\n\t\n\t\treturn date;\n\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac7"},"name":"MandatoryFieldException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando si tenta\n  * di inserire un'entit senza specificare un campo obbligatorio\n  */\npublic class MandatoryFieldException extends Exception {\n\t\n\tprivate static final long serialVersionUID = -4818814194670133466L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic MandatoryFieldException() {\n\t\tsuper(\"Mandatory Field Missing!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic MandatoryFieldException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac8"},"name":"Role.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca65"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca60"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca73"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.bean;\n\n\nimport java.io.Serializable;\n/**\n *  Classe utilizzata per modellare il ruolo di un utente.\n *\n * @author Bavota Gabriele, Carnevale Filomena.\n * \n */\npublic class Role implements Serializable {\n\t\n\tprivate static final long serialVersionUID = 8833734317107515203L;\n\t\n\t\n\t\n\t/**\n\t * L'id del ruolo amministratore\n\t */\n\tpublic static final int ADMIN = 1;\n\t\n\t/**\n\t * L'id del ruolo di docente\n\t */\n\tpublic static final int TEACHER = 2;\n\t\n\t/**\n\t * L'id del ruolo studente\n\t */\n\t\n\tpublic static final int STUDENT\t = 3;\n\t\n\t/**\n\t * L'id del ruolo geniotore\n\t */\n\t\n\tpublic static final int PARENT = 4;\n\t\n\t/**\n\t * L'id del ruolo ata\n\t */\n\t\n\tpublic static final int ATA = 5;\n\t\n\t/**\n\t * L'id del ruolo direzione\n\t */\n\t\n\tpublic static final int DIRECTOR = 6;\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cac9"},"name":"ConnectionPoolDataSource.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"/*\n * ConnectionPoolDataSource\n *\n */\n\npackage smos.storage.connectionManagement;\n\nimport smos.storage.connectionManagement.exception.NotImplementedYetException;\n\nimport java.io.PrintWriter;\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport javax.sql.DataSource;\n\n/**\n * Realizzazione del pool di connessioni tramite l'implementazione\n * dell'interfaccia java.sql.DataSource. Il pool controlla periodicamente le\n * connessioni attive e quelle che sono pool, ossia quelle rilasciate ma ancora\n * utilizzabili (presenti cioe' in memoria). Il tempo di rilascio delle\n * connessioni attive e di quelle pool ï¿½ rappresentato da due parametri presenti\n * all'interno della classe e che sono connectionPoolCloseTimeout e\n * inactiveMaxTimeout; tali valori cosi come tutti gli altri inerenti al pool\n * hanno un loro valore di default, parametrizzabile tramite il file di\n * properties connection.properties\n */\n\npublic class ConnectionPoolDataSource implements DataSource {\n\n    /**\n     * Thread inside della classe ConnectionPoolDataSource che stabilisce ogni\n     * connectionPoolCloseTimeout millisecondi il rilascio delle connessioni\n     * pool.\n     */\n    private class ConnectionCloser extends Thread {\n\n        private long connectionActionTimestamp = 0;\n\n        private int connectionPoolCloseTimeout = 300000;\n\n        private long timeStamp = 0;\n\n        /**\n         * Costruttore che setta il tempo di rilascio delle connessioni pool\n         * \n         * @author Di Giorgio Domenico, Cris Malinconico\n         * @param pTime\n         *            intervallo di tempo entro cui il pool svuota la lista\n         *            delle connessioni pool.\n         */\n\t\tprivate ConnectionCloser(int pTime) {\n            setDaemon(true);\n            setName(\"ConnectionPoolCloser\");\n            if (pTime > 0)\n            \tthis.connectionPoolCloseTimeout = pTime;\n        }\n\n        /**\n         * Ogni volta che una connessione genera un evento con un'invocazione di\n         * getConnection() o release() il timestamp viene settato al valore\n         * temporale corrente tramite questo metodo.\n         */\n\t\tpublic void connectionEvent() {\n\t\t\tthis.connectionActionTimestamp = System.currentTimeMillis();\n        }\n\n        /**\n         * Controlla ogni connectionPoolCloseTimeout millisecondi se le\n         * connessioni pool possono essere chiuse liberando in tal caso memoria.\n         */\n\t\tpublic void run() {\n            boolean working = true;\n            while (working) {\n                try {\n                \tthis.timeStamp = System.currentTimeMillis();\n                    Thread.sleep(this.connectionPoolCloseTimeout);\n                    if (this.connectionActionTimestamp < this.timeStamp) {\n                        closeAllConnections(ConnectionPoolDataSource.this.pool);\n                    }\n                } catch (InterruptedException e) {\n                    working = false;\n                    e.printStackTrace();\n                } catch (SQLException e) {\n                    working = false;\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private List<SMOSConnection> active = new Vector<SMOSConnection>();\n\n    private Properties config = new Properties();\n\n    private ConnectionCloser connectionCloser;\n\n    private Driver driver;\n\n    private String fullConnectionString;\n\n    private long inactiveMaxTimeout = 20000;\n\n    private int maxPoolSize;\n\n    private List<Connection> pool = new Vector<Connection>();\n\n    /**\n     * Crea una nuova istanza del pool di connessioni.\n     * \n     * @param pJdbcDriverName\n     *            nome del driver jdbc\n     * @param pFullConnectionString\n     *            stringa di connessione con il database\n     * @param pUser\n     *            nome utente (amministratore del database)\n     * @param pPassword\n     *            password amministratore\n     * @param pMaxPoolSize\n     *            massimo numero di connessioni attive nel pool, deve essere\n     *            maggiore di 0\n     * @param pPoolTime\n     *            intervallo di tempo entro il quale il pool sarï¿½ svuotato ogni\n     *            volta delle sue connessioni pool (in ms).\n     * @throws ClassNotFoundException\n     *             se il driver jdbc non puï¿½ essere trovato\n     * @throws SQLException\n     *             se occorre un problema durante la connessione al database\n     * @throws IllegalArgumentException\n     *             se i parametri forniti in input non sono validi\n     */\n\n    \n\tpublic ConnectionPoolDataSource(String pJdbcDriverName,\n            String pFullConnectionString, String pUser, String pPassword,\n            int pMaxPoolSize, int pPoolTime) throws ClassNotFoundException,\n            SQLException {\n\n        if (pMaxPoolSize < 1) {\n            throw new IllegalArgumentException(\n                    \"maxPoolSize deve essere >0 ma ï¿½: \" + pMaxPoolSize);\n        }\n        if (pFullConnectionString == null) {\n            throw new IllegalArgumentException(\"fullConnectionString \"\n                    + \"ha valore Null\");\n        }\n        if (pUser == null) {\n            throw new IllegalArgumentException(\"il nome utente ha valore Null\");\n        }\n        this.maxPoolSize = pMaxPoolSize;\n        this.fullConnectionString = pFullConnectionString;\n        this.config.put(\"user\", pUser);\n        if (pPassword != null) {\n            this.config.put(\"password\", pPassword);\n        }\n        Class.forName(pJdbcDriverName);\n        this.driver = DriverManager.getDriver(pFullConnectionString);\n        this.connectionCloser = new ConnectionCloser(pPoolTime);\n        this.connectionCloser.start();\n    }\n\n    /**\n     * Restituisce la dimensione della lista delle connessioni attive.\n     * \n     * @return la dimensione della lista delle connessioni attualmente attive.\n     */\n\tpublic int activeSize() {\n        return this.active.size();\n    }\n\n    /**\n     * Svuota il pool di connessioni da quelle attive che non hanno piï¿½ eseguito\n     * operazioni per inactiveMaxTimeout millisecondi.\n     * \n     */\n    protected void clearActive() {\n        long temp = 0;\n        long TIME = System.currentTimeMillis();\n        SMOSConnection adc = null;\n\n        for (int count = 0; count < this.active.size(); count++) {\n            adc = (SMOSConnection) this.active.get(count);\n            temp = TIME - adc.getLastTime();\n            if (temp >= this.inactiveMaxTimeout) {\n                this.release(adc.getConnection());\n            }\n        }\n    }\n\n    /**\n     * Chiude tutte le connessioni del pool sia quelle attive e sia quelle che\n     * sono pool.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @throws SQLException\n     */\n    public synchronized void closeAllConnections() throws SQLException {\n        closeAllConnections(this.pool);\n        closeAllConnections(this.active);\n    }\n\n    /**\n     * Chiude tutte le connessioni indicate nella lista connection.\n     * \n     * @author Di Giorgio Domenico, Cris Malinconico\n     * @param pConnections\n     *            la lista delle connesioni che devono essere chiuse.\n     * @throws SQLException\n     *             qualora sia impossibile chiudere una connessione.\n     */\n    private synchronized void closeAllConnections(List pConnections)\n            throws SQLException {\n\n        while (pConnections.size() > 0) {\n            ConnectionWrapper conn = (ConnectionWrapper) pConnections.remove(0);\n            conn.closeWrappedConnection();\n        }\n    }\n\n    /**\n     * Chiude tutte le connessioni del pool che sono nella lista pool.\n     * \n     * @throws SQLException\n     *             qualora sia impossibile chiudere una connessione.\n     */\n    public synchronized void closeAllPooledConnections() throws SQLException {\n        closeAllConnections(this.pool);\n    }\n\n    /**\n     * Metodo utilizzato da getConnection() per creare una nuova connessione\n     * qualora nella lista delle pool non siano presenti.\n     * \n     * @return una nuova connessione al DataBase.\n     */\n    private synchronized Connection createNewConnection() {\n        Connection rawConn = null;\n        try {\n            rawConn = this.driver.connect(this.fullConnectionString, this.config);\n            Connection conn = new ConnectionWrapper(rawConn, this);\n            SMOSConnection ac = new SMOSConnection();\n            ac.setConnection(conn);\n            ac.setLastTime(System.currentTimeMillis());\n            this.active.add(ac);\n            return conn;\n        } catch (SQLException e) {\n            System.out.println(\"Creazione della connessione fallita \"\n                    + \"in ConnectionPoolDataSource:\" + e);\n            return null;\n        }\n    }\n\n    /**\n     * Restituisce una connessione se il pool non ï¿½ pieno, il controllo avviene\n     * prima nella lista delle connessioni pool per evitare delle creazioni\n     * inutili altrimenti una nuova connessione sarï¿½ creata.\n     * \n     * @return la connessione al database qualora fosse possibile altrimenti\n     *         un'eccezione viene generata\n     * @see javax.sql.DataSource getConnection()\n     * @throws SQLException\n     *             Se un problema occorre durante la connessione al database\n     *             incluso il fatto che il limite massimo delle connessioni\n     *             attive venga raggiunto.\n     */\n    public synchronized Connection getConnection() throws SQLException {\n\n        Connection connection = getPooledConnection(0);\n\n        if (connection == null) {\n            if (this.active.size() >= this.maxPoolSize) {\n                throw new SQLException(\"Connection pool limit of \"\n                        + this.maxPoolSize + \" exceeded\");\n            } else {\n                connection = createNewConnection();\n            }\n        }\n        this.connectionCloser.connectionEvent();\n        //System.out.println(\"GET CONNECTION: \" + active.size() + \"/\" + pool.size());\n        return connection;\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg1 \n     * @param pArg2 \n     * @return Connection\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public Connection getConnection(String pArg1, String pArg2)\n            throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @return int\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public int getLoginTimeout() throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @return PrintWriter\n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n\n    public PrintWriter getLogWriter() throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Restituisce il numero massimo di connessioni attive\n     * \n     * @return il numero massimo di connessioni attive.\n     */\n\n    public int getMaxPoolSize() {\n        return this.maxPoolSize;\n    }\n\n    /**\n     * Metodo utilizzato da getConnection() per stabilire se nella lista delle\n     * connessioni pool ve ne sia qualcuna da poter riutilizzare.\n     * \n     * @param pPoolIndex\n     *            indice della lista delle connessioni pool (sempre 0).\n     * @return una connesssione dalla lista di quelle pool qualora ne esista\n     *         una.\n     */\n    private synchronized Connection getPooledConnection(int pPoolIndex) {\n        SMOSConnection ac = new SMOSConnection();\n        Connection connection = null;\n        if (this.pool.size() > 0) {\n            connection = (Connection) this.pool.remove(pPoolIndex);\n            ac.setConnection(connection);\n            ac.setLastTime(System.currentTimeMillis());\n            this.active.add(ac);\n        }\n        return ac.getConnection();\n    }\n\n    /**\n     * Restituisce la dimensione della lista delle connessioni pool\n     * \n     * @return la dimensione della lista delle connessioni pool.\n     */\n    public int poolSize() {\n        return this.pool.size();\n    }\n\n    /**\n     * Rilascia una connessione, eliminandola da quelle attive ed inserendola in\n     * quelle pool per poter essere successivamente riutilizzata.\n     * \n     * @param pConnection\n     *            La connessione che deve essere ritornata al pool.\n     */\n    public synchronized void release(Connection pConnection) {\n        boolean exists = false;\n        int activeIndex = 0;\n\n        if (pConnection != null) {\n            SMOSConnection adc = null;\n            while ((activeIndex < this.active.size()) && (!exists)) {\n                adc = (SMOSConnection) this.active.get(activeIndex);\n                if (adc.equals(pConnection)) {\n                \tthis.active.remove(adc);\n                \tthis.pool.add(adc.getConnection());\n                    exists = true;\n                }\n                activeIndex++;\n            }\n            this.connectionCloser.connectionEvent();\n            //System.out.println(\"RELEASE CONNECTION: \" + active.size() + \"/\" + pool.size());\n        }\n    }\n\n    /**\n     * Setta il tempo di vita delle connessioni attive in millisecondi.\n     * \n     * @param pTimeOut\n     *            tempo di vita della connessione.\n     */\n\n    public void setActivedTimeout(long pTimeOut) {\n        if (pTimeOut > 0) {\n        \tthis.inactiveMaxTimeout = pTimeOut;\n        }\n    }\n\n    /**\n     * Riazzera il tempo di vita della connessione dovutocall'esecuzione di\n     * un'operazione.Da questo momento la connessione potrï¿½ essere attiva senza\n     * eseguire alcuna operazione per altri inactiveMaxTimeout millisecondi.\n     * \n     * @param pConnection\n     *            la connessione che ha eseguito un'operazione e quindi puï¿½\n     *            rimanere attiva.\n     */\n\n    void setLastTime(Connection pConnection) {\n        boolean exists = false;\n        int count = 0;\n        SMOSConnection adc = null;\n\n        while ((count < this.active.size()) && (!exists)) {\n            adc = (SMOSConnection) this.active.get(count);\n            count++;\n            if (adc.equals(pConnection)) {\n                adc.setLastTime(System.currentTimeMillis());\n                exists = true;\n            }\n        }\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg0 \n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n    public void setLoginTimeout(int pArg0) throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Metodo non implementato\n     * @param pArg0 \n     * @throws SQLException \n     * \n     * @throws NotImplementedYetException\n     */\n    public void setLogWriter(PrintWriter pArg0) throws SQLException {\n        throw new NotImplementedYetException();\n    }\n\n    /**\n     * Converte un oggetto della classe ConnectionPoolDataSource in String\n     * \n     * @return la rappresentazione nel tipo String del pool di connessioni.\n     */\n\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n\n        buf.append(\"[\");\n        buf.append(\"maxPoolSize=\").append(this.maxPoolSize);\n        buf.append(\", activeSize=\").append(activeSize());\n        buf.append(\", poolSize=\").append(poolSize());\n        buf.append(\", fullConnectionString=\").append(this.fullConnectionString);\n        buf.append(\"]\");\n        return (buf.toString());\n    }\n\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46caca"},"name":"ServletShowNoteList.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.registerManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.Note;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerRegister;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\n\npublic class ServletShowNoteList extends HttpServlet {\n\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 3700685645748508615L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./registerManagement/showNoteList.jsp\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\t//instanziare gli oggetti qua\n\t\tCollection<Note> notes= null;\n\t\tManagerRegister managerRegister = ManagerRegister.getInstance(); \n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t} \n\t\t\t//settare le cose da passare alla session, usare session.setAttribute(String, attribute) \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tint idUser =Integer.valueOf(pRequest.getParameter(\"student\")) ;\n\t\t\tUser student = managerUser.getUserById(idUser); \t\n\t\t\t\n\t\t\n\t\t\tint year= ((Classroom) session.getAttribute(\"classroom\")).getAcademicYear();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tnotes= managerRegister.getNoteByIDUserAndAcademicYear(idUser, year);\n\t\t\t\n\t\t\tsession.setAttribute(\"noteList\", notes);\n\t\t\tsession.setAttribute(\"student\", student);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn; \n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}catch (IOException ioException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\t\t\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\t\n\t\t\n\t\n\t\n\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cacb"},"name":"ManagerVotes.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca55"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca54"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca40"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca56"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca52"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca4a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca47"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3f"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca42"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca44"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca43"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca49"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca48"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca45"}]],"contents":"package smos.storage;\n\nimport smos.bean.Teaching;\nimport smos.bean.UserListItem;\nimport smos.bean.Votes;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.connectionManagement.DBConnection;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport smos.utility.Utility;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Vector;\nimport java.sql.Connection;\n\n/**\n * \n * Classe manager dei voti.\n * \n * @author Luigi Colangelo\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\n\npublic class ManagerVotes {\n\tprivate static ManagerVotes instance;\n\n\t/**\n\t * Il nome della tabella dei voti.\n\t */\n\tpublic static final String TABLE_VOTES = \"votes\";\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic ManagerVotes() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Ritorna la sola istanza del voto esistente.\n\t * \n\t * @return Ritorna l'istanza della classe.\n\t */\n\tpublic static synchronized ManagerVotes getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new ManagerVotes();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Verifica l'esistenza di voto nel database.\n\t * \n\t * @param pVotes\n\t *            il voto da controllare.\n\t * @return Ritorna true se esiste il voto passato come parametro,\n\t *         false altrimenti.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t */\n\tpublic synchronized boolean exists(Votes pVotes)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException {\n\n\t\tboolean result = false;\n\t\tConnection connect = null;\n\n\t\tif (pVotes.getId_votes() == 0)\n\t\t\tthrow new MandatoryFieldException(\"Specificare l'id.\");\n\t\ttry {\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pVotes.getId_votes());\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = true;\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Inserisce un nuovo voto nella tabella Votes.\n\t * \n\t * @param pVotes\n\t *            il voto da inserire.\n\t * \n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized void insert(Votes pVotes)\n\t\t\tthrows MandatoryFieldException, ConnectionException, SQLException,\n\t\t\tEntityNotFoundException, InvalidValueException {\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t\n\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\t\t\t// Prepariamo la stringa Sql\n\t\t\tString sql = \"INSERT INTO \" + ManagerVotes.TABLE_VOTES\n\t\t\t        + \" (id_user, id_teaching, written, oral, laboratory, AccademicYear, turn) \"\n\t\t\t\t\t+ \"VALUES (\"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_user())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTeaching()) \n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getWritten())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getOral())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getLaboratory())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getAccademicYear())\n\t\t\t\t\t+\", \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTurn())+ \" )\";\n\n\t\t\tUtility.executeOperation(connect, sql);\n\n\t\t\tpVotes.setId_votes(Utility.getMaxValue(\"id_votes\",\n\t\t\t\t\tManagerVotes.TABLE_VOTES));\n\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Aggiorna un voto presente nella tabella votes.\n\t * \n\t * @param pVotes\n\t *            Un voto da modificare\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws MandatoryFieldException\n\t */\n\tpublic synchronized void update(Votes pVotes)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\tif (pVotes.getId_votes() <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\tif (pVotes.getId_user() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'user del voto\");\n\t\t\tif (pVotes.getTeaching() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'insegnamento del voto\");\n\t\t\tif (pVotes.getAccademicYear() <= 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare l'anno accademico\");\n\t\t\tif (pVotes.getTurn() < 0)\n\t\t\t\tthrow new MandatoryFieldException(\"Specificare il semestre \");\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"UPDATE \" + ManagerVotes.TABLE_VOTES + \" SET\"\n\t\t\t\t\t+ \" id_user = \" + Utility.isNull(pVotes.getId_user())+\",\"+\" id_teaching= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTeaching())+\",\"+\" written= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getWritten())+\",\"+\" oral= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getOral())+\",\"+\" laboratory= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getLaboratory())+\",\"+\" accademicYear= \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getAccademicYear())+\",\"+\" turn=\"\n\t\t\t\t\t+ Utility.isNull(pVotes.getTurn())\n\t\t\t\t\t+ \" WHERE id_votes = \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_votes());\n\n\t\t\t// effettua una nuova connessione e invia la query\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t/**\n\t * Verifica se uno studente passato come parametro ha un voto assegnato nell'insegnamento passato\n\t * come parametro nell'anno passato come parametro e nel quadrimestre passato come parametro\n\t * \n\t * \n\t * @param pTeaching\n\t *            L'insegnamento da controllare.\n\t * @param pUserListItem\n\t *            Lo studente da controllare\n\t * \n\t * @return Ritorna l'id del voto -1 altrimenti\n\t * \n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized int getIdVotes(Teaching pTeaching, int academicYear, int turn, UserListItem pUser)\n\t\t\tthrows SQLException, EntityNotFoundException, ConnectionException,\n\t\t\tInvalidValueException {\n\t\tConnection connect = null;\n\t\tint result = -1;\n\t\tVotes v = null;\n\t\tif (pTeaching.getId() <= 0)\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'insegnamento\");\n\t\tif (pUser.getId() <=0 )\n\t\t\tthrow new EntityNotFoundException(\"Specificare l'utente\");\n\t\ttry {\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Preparimao la stringa sql\n\t\t\tString sql = \"SELECT * FROM \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_teaching = \"\n\t\t\t\t\t+ Utility.isNull(pTeaching.getId())\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".AccademicYear= \"\n\t\t\t\t\t+ Utility.isNull(academicYear)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".turn= \"\n\t\t\t\t\t+ Utility.isNull(turn)\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".id_user= \"\n\t\t\t\t\t+ Utility.isNull(pUser.getId());\n\t\t\t// Inviamo la Query al database\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\t\t\tif (pRs.next()){\n\t\t\t\tv = this.loadRecordFromRs(pRs);\n\t\t\t\tresult =v.getId_votes();\n\t\t\t\t\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\t// rilasciamo le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\n\t\t}\n\t}\n\n\t/**\n\t * Elimina un voto dalla tabella votes.\n\t * \n\t * @param pVotes\n\t *            Il voto da eliminare.\n\t * \n\t * @throws MandatoryFieldException\n\t * @throws EntityNotFoundException\n\t * @throws SQLException\n\t * @throws ConnectionException\n\t * @throws InvalidValueException\n\t * \n\t */\n\tpublic synchronized void delete(Votes pVotes)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tMandatoryFieldException, InvalidValueException {\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// ManagerTeaching.getInstance().teachingOnDeleteCascade(pTeaching);\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"DELETE FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \"\n\t\t\t\t\t+ Utility.isNull(pVotes.getId_votes());\n\n\t\t\tUtility.executeOperation(connect, sql);\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento corrispondente all'id del voto passato come\n\t * parametro.\n\t * \n\t * @param pId\n\t *            L'id del voto.\n\t * @return Ritorna l'id dell' insegnamento.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t */\n\t\n\t/**\n\t * Ritorna l'insegnamento corrispondente all'id passato come parametro.\n\t * \n\t * @param pId\n\t *            L'id dell'insegnamento.\n\t * @return Ritorna l'insegnamento associato all'id passato come parametro.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws EntityNotFoundException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Votes getVotesById(int pId)\n\t\t\tthrows ConnectionException, SQLException, EntityNotFoundException,\n\t\t\tInvalidValueException {\n\t\tVotes result = null;\n\t\tConnection connect = null;\n\t\ttry {\n\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pId);\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordFromRs(pRs);\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare l'insegnamento!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized String getTeachingIdByVotesId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException {\n\t\tString result;\n\t\tConnection connect = null;\n\t\ttry {\n\t\t\t// Se non e' stato fornito l'id restituiamo un codice di errore\n\t\t\tif (pId <= 0)\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\t/*\n\t\t\t * Prepariamo la stringa SQL per recuperare le informazioni\n\t\t\t * corrispondenti all'id dell'insegnamento passato come parametro\n\t\t\t */\n\t\t\tString tSql = \"SELECT id_teaching FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t        \n\t\t\t\t\t+ \" WHERE id_votes = \" + Utility.isNull(pId);\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet tRs = Utility.queryOperation(connect, tSql);\n\n\t\t\tif (tRs.next())\n\t\t\t\tresult = tRs.getString(\"id_teaching\");\n\t\t\telse\n\t\t\t\tthrow new EntityNotFoundException(\n\t\t\t\t\t\t\"Impossibile trovare il voto!\");\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Ritorna l'insieme di tutti i voti presenti nel database.\n\t * \n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t * @throws EntityNotFoundException\n\t */\n\tpublic synchronized Collection<Votes> getVotes()\n\t\t\tthrows ConnectionException, SQLException, InvalidValueException,\n\t\t\tEntityNotFoundException {\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT * FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \" ORDER BY id_votes\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ritorna l'insieme dei voti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Votes> getVotesByUserId(int pId)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".* FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t    + \" WHERE (\"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId) + \")\" + \" ORDER BY id_user\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\n\t/**\n\t * Ritorna l'insieme dei voti associati all'utente corrispondente\n\t * all'id passato come paramentro.\n\t * \n\t * @param pId\n\t *            L'id dell'utente.\n\t * @return Ritorna una collection di voti.\n\t * \n\t * @throws EntityNotFoundException\n\t * @throws ConnectionException\n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tpublic synchronized Collection<Votes> getVotesByUserIdYearTurn(int pId,int pYear, int pTurn)\n\t\t\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\t\t\tInvalidValueException {\n\n\t\tCollection<Votes> result = null;\n\t\tConnection connect = null;\n\n\t\tif (pId <= 0)\n\t\t\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\n\t\ttry {\n\t\t\t// Prepariamo la stringa SQL\n\t\t\tString sql = \"SELECT \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t\t+ \".* FROM \" + ManagerVotes.TABLE_VOTES\n\t\t\t\t    + \" WHERE (\"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user = \"\n\t\t\t\t\t+ Utility.isNull(pId)+\" AND \"\n\t\t\t\t\t+ ManagerVotes.TABLE_VOTES + \".accademicYear = \"\n\t\t\t\t\t+ Utility.isNull(pYear)+\" AND \" \n\t\t\t\t\t+ManagerVotes.TABLE_VOTES + \".turn = \"\n\t\t\t\t\t+ Utility.isNull(pTurn)+ \")\" + \" ORDER BY id_user\";\n\n\t\t\t// Otteniamo una Connessione al DataBase\n\t\t\tconnect = DBConnection.getConnection();\n\t\t\tif (connect == null)\n\t\t\t\tthrow new ConnectionException();\n\n\t\t\t// Inviamo la Query al DataBase\n\t\t\tResultSet pRs = Utility.queryOperation(connect, sql);\n\n\t\t\tif (pRs.next())\n\t\t\t\tresult = this.loadRecordsFromRs(pRs);\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\t// rilascia le risorse\n\t\t\tDBConnection.releaseConnection(connect);\n\t\t}\n\t}\n\t\n\tpublic synchronized void deleteVotesByUserIdYearTurn(int pId,int pYear, int pTurn)\n\tthrows EntityNotFoundException, ConnectionException, SQLException,\n\tInvalidValueException {\n\nConnection connect = null;\n\nif (pId <= 0)\n\tthrow new EntityNotFoundException(\"specificare l'utente\");\n\ntry {\n\t// Prepariamo la stringa SQL\n\tString sql = \"DELETE \"+ ManagerVotes.TABLE_VOTES+\" FROM \" + ManagerVotes.TABLE_VOTES\n\t\t    + \" WHERE (\"\n\t\t\t+ ManagerVotes.TABLE_VOTES + \".id_user=\"\n\t\t\t+ Utility.isNull(pId)+\" AND \"\n\t\t\t+ ManagerVotes.TABLE_VOTES + \".AccademicYear=\"\n\t\t\t+ Utility.isNull(pYear)+\" AND \" \n\t\t\t+ManagerVotes.TABLE_VOTES + \".turn=\"\n\t\t\t+ Utility.isNull(pTurn)+ \")\";\n\n\t// Otteniamo una Connessione al DataBase\n\tconnect = DBConnection.getConnection();\n\tif (connect == null)\n\t\tthrow new ConnectionException();\n\n\t// Inviamo la Query al DataBase\n\t Utility.executeOperation(connect, sql);\n     \n} finally {\n\t// rilascia le risorse\n\tDBConnection.releaseConnection(connect);\n}\n}\n\t\n\t\n\t/**\n\t * Consente la lettura di un record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna il voto letto.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Votes loadRecordFromRs(ResultSet pRs) throws SQLException,\n\t\t\tInvalidValueException {\n\t\tVotes votes = new Votes();\n\t\tvotes.setId_votes(pRs.getInt((\"id_votes\")));\n\t\tvotes.setId_user(pRs.getInt(\"id_user\"));\n\t\tvotes.setTeaching(pRs.getInt(\"id_teaching\"));\n\t\tvotes.setWritten(pRs.getInt(\"written\"));\n\t\tvotes.setOral(pRs.getInt(\"oral\"));\n\t\tvotes.setLaboratory(pRs.getInt(\"laboratory\"));\n\t\tvotes.setAccademicYear(pRs.getInt(\"AccademicYear\"));\n\t\tvotes.setTurn(pRs.getInt(\"turn\"));\n\n\t\treturn votes;\n\t}\n\n\t/**\n\t * Consente la lettura dei record dal ResultSet.\n\t * \n\t * @param pRs\n\t *            Il risultato della query.\n\t * @return Ritorna la collection di insegnamenti letti.\n\t * \n\t * @throws SQLException\n\t * @throws InvalidValueException\n\t */\n\tprivate Collection<Votes> loadRecordsFromRs(ResultSet pRs)\n\t\t\tthrows SQLException, InvalidValueException {\n\t\tCollection<Votes> result = new Vector<Votes>();\n\t\tdo {\n\t\t\tresult.add(loadRecordFromRs(pRs));\n\t\t} while (pRs.next());\n\t\treturn result;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cacc"},"name":"ServletDeleteAddress.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.addressManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Address;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerAddress;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n/**\n * Servlet utilizzata per cancellare un indirizzo dal database\n * \n * @author Vecchione Giuseppe\n */\npublic class ServletDeleteAddress extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -7383336226678925533L;\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, HttpServletResponse pResponse){\n\t\tString errorMessage=\"\";\n\t\tString gotoPage=\"./showAddressList\";\n\t\tManagerUser managerUser= ManagerUser.getInstance();\n\t\tManagerAddress managerAddress= ManagerAddress.getInstance();\n\t\tHttpSession session= pRequest.getSession();\n\t\tUser loggedUser= (User)session.getAttribute(\"loggedUser\");\n\t\tAddress address= null;\n\t\ttry {\n\t\t\t\tif(loggedUser==null){\t\t\n\t\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(!managerUser.isAdministrator(loggedUser)){\n\t\t\t\t\terrorMessage= \"L' utente collegato non ha accesso alla funzionalita'!\";\n\t\t\t\t\tgotoPage=\"./error.jsp\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\taddress= (Address)session.getAttribute(\"address\");\n\t\t\t\tmanagerAddress.delete(address);\n\t\t\t\t\n\t\t} \t  catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t} catch (SQLException SQLException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tSQLException.printStackTrace();\n\t\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tentityNotFoundException.printStackTrace();\n\t\t\t} catch (ConnectionException connectionException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ connectionException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tconnectionException.printStackTrace();\n\t\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ mandatoryFieldException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tmandatoryFieldException.printStackTrace();\n\t\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tinvalidValueException.printStackTrace();\n\t\t\t}\n\t\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\t} catch (IOException ioException) {\n\t\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t\tioException.printStackTrace();\n\t\t\t}\n\t\t}\n\t\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cacd"},"name":"Report.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.bean;\n\nimport java.util.ArrayList;\n\nimport smos.exception.InvalidValueException;\n\n/**\n * \n * Classe utilizzata per modellare una pagella.\n * \n * @author Luigi Colangelo \n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class Report {\n\tpublic ArrayList<Votes> pagella; \n\t\n\t/**\n\t * Il costruttore della classe\n\t */\n\tpublic Report(){\n\t\tpagella=new ArrayList<Votes>();\n\t}\n\t\n\t/**\n\t * Metodo che restituisce il voto dall'indice nell'array dato in input\n\t * @param pInd indice del voto nell'array\n\t * @return il voto dell'indice dato\n\t * @throws InvalidValueException\n\t */\n\tpublic Votes getVotes(int pInd) throws InvalidValueException{\n\t\tif(pInd<0 || pInd>=pagella.size())throw new InvalidValueException(\"indice non valido!\");\n\t\treturn (pagella.get(pInd));\n\t}\n\t\n\t/**\n\t * Metodo che aggiunge un voto all'array.\n\t * @param pVotes il voto da aggiungere\n\t * @throws InvalidValueException \n\t */\n\tpublic void addVotes(Votes pVotes) throws InvalidValueException{\n\t\tif(pVotes==null)throw new InvalidValueException(\"voto non valido!\");\n\t\telse pagella.add(pVotes);\n\t}\n\t\n\t/**\n\t * Metodo che elimina un voto dall'array\n\t * @param pId l'indice del voto da eliminare dall'array.\n\t * @throws InvalidValueException \n\t */\n\tpublic void remove(int pId) throws InvalidValueException{\n\t\tif(pId<0 || pId>=pagella.size())throw new InvalidValueException(\"indice non valido!\");\n\t\tpagella.remove(pId);\n\t}\n\t\n\t\n\tpublic String ToString(){\n\t\tString pag=\"\";\n\t\tfor(Votes e: pagella){\n\t\t\tpag=pag+\"\\n\"+e.toString();\n\t\t}\n\treturn pag;\n\t}\n    \n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cace"},"name":"DuplicatedEntityException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n\nimport java.lang.Exception;\n\n/**\n  * Questa classe rappresenta l'eccezione generata quando si \n  * tenta di inserire un'entità già presente nel database.\n  */\npublic class DuplicatedEntityException extends Exception {\n\t\n\tprivate static final long serialVersionUID = 4858261134352455533L;\n\n\t/**\n\t * Genera l'eccezione senza un messagio di errore associato.\n\t */\n\tpublic DuplicatedEntityException() {\n\t\tsuper(\"Duplicate Key into the Repository!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DuplicatedEntityException (String pMessage) {\n\t\tsuper(pMessage);\n\t}\n\t\n\t\n}"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cacf"},"name":"ServletUpdateUser.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per modificare un utente.\n * \n * @author Napolitano Vincenzo.\n *\n */\npublic class ServletUpdateUser extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 1316473033146481065L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tuser.setFirstName((pRequest.getParameter(\"firstName\")));\n\t\t\tuser.setLastName((pRequest.getParameter(\"lastName\")));\n\t\t\tuser.setCell((pRequest.getParameter(\"cell\")));\n\t\t\t/*\n\t\t\t * verifichiamo che la login sia unica.\n\t\t\t */\n\t\t\tString login = pRequest.getParameter(\"login\");\n\t\t\tuser.setLogin(login);\n\t\t\tif (managerUser.existsLogin(user))\n\t\t\t\tthrow new InvalidValueException(\"La login inserita esiste gia'. Inserire una nuova login.\");\n\t\t\t\n\t\t\tuser.setPassword(pRequest.getParameter(\"password\"));\n\t\t\tuser.setEMail(pRequest.getParameter(\"eMail\"));\n\t\t\t//aggiorniamo\n\t\t\tif (!managerUser.exists(user)){\n\t\t\t\tmanagerUser.update(user);\n\t\t\t}else {\n\t\t\t\tint userId = managerUser.getUserId(user);\n\t\t\t\tif (user.getId()==userId)\n\t\t\t\t\tmanagerUser.update(user);\n\t\t\t\telse \n\t\t\t\t\tthrow new DuplicatedEntityException(\"Utente già esistente\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t}  catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad0"},"name":"ServletLoadYear.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.User;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per visualizzare tutti gli anni accademici presenti nel\n * db.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n */\npublic class ServletLoadYear extends HttpServlet {\n\n\t\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -6304881993204403909L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"./persistentDataManagement\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tCollection<Integer> yearList = null;\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser)) && (!managerUser.isDirector(loggedUser))) {\n\t\t\t\terrorMessage = \"L'Utente collegato non ha accesso alla \"\n\t\t\t\t\t\t+ \"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tManagerClassroom managerClassroom = ManagerClassroom.getInstance();\n\t\t\tyearList = managerClassroom.getAcademicYearList();\n\t\t\tgotoPage +=(String) pRequest.getParameter(\"goTo\");\n\t\t\tsession.setAttribute(\"accademicYearList\", yearList);\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t\treturn;\n\t\t\t\n\t\t} catch (SQLException sqlException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ sqlException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tsqlException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t}\n\n\t\tpRequest.getSession().setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error6.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad1"},"name":"ServletShowUserTeachingFormByCourse.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application.userManagement;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class ServletShowUserTeachingFormByCourse extends HttpServlet {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 2305151029867525356L;\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad2"},"name":"Teaching.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.bean;\n\nimport smos.exception.InvalidValueException;\n\nimport java.io.Serializable;\n\n/**\n * Classe utilizzata per modellare un insegnamento.\n * \n * @author Giulio D'Amora\n * @version 1.0\n * \n *          2009  Copyright by SMOS\n * \n */\n\npublic class Teaching implements Serializable {\n\n\tprivate static final long serialVersionUID = 2523612738702790957L;\n\tprivate int id_teaching;\n\tprivate String name;\n\n\t/**\n\t * Il costruttore della classe.\n\t */\n\tpublic Teaching() {\n\t\tthis.id_teaching = 0;\n\t}\n\n\t/**\n\t * Ritorna il nome dell'insegnamento\n\t * \n\t * @return Ritorna il nome dell'insegnamento.\n\t */\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * Setta il nome dell'insegnamento.\n\t * \n\t * @param pName\n\t *            Il nome da settare.\n\t * \n\t * @throws InvalidValueException\n\t */\n\tpublic void setName(String pName) throws InvalidValueException {\n\t\tif (pName.length() <= 4)// da verificare il test\n\t\t\tthrow new InvalidValueException();\n\t\telse\n\t\t\tthis.name = pName;\n\t}\n\n\t/**\n\t * Ritorna l'id dell'insegnamento.\n\t * \n\t * @return l'id dell'insegnamento.\n\t */\n\tpublic int getId() {\n\t\treturn this.id_teaching;\n\t}\n\n\t/**\n\t * Setta l'id dell'insegnamento.\n\t * \n\t * @param pId\n\t *            L'id da settare.\n\t */\n\tpublic void setId(int pId) {\n\t\tthis.id_teaching = pId;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad3"},"name":"DeleteAdministratorException.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.exception;\n/**\n * Questa classe rappresenta l'eccezione generata quando un utente\n * tenta di eliminare l'unico utente Admin nel database.\n */\n\npublic class DeleteAdministratorException extends Exception {\n\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -2081143475624381775L;\n\n\t/**\n\t * Genera l'eccezione senza un messaggio di errore associato.\n\t * \n\t */\n\tpublic DeleteAdministratorException() {\n\t\tsuper(\"Impossibile eliminare l'utente, l'utente selezionato e' l'unico Admin presente nel database! Creare un nuovo Manager e riprovare!\");\n\t}\n\t\n\t/**\n\t  * Genera l'eccezione con un messagio di errore associato.\n\t  *\n\t  * @param pMessage \tIl messaggio di errore che deve essere associato\n\t  *\t\t\t\t\t\tall'eccezione.\n\t  */\n\tpublic DeleteAdministratorException(String pMessage) {\n\t\tsuper(pMessage);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad4"},"name":"ServletInitialize.java","system":"SMOS","applied_transformations":[],"ground_truth":[],"contents":"package smos.application;\n\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\n\nimport smos.utility.Utility;\n\n/**\n * Servlet utilizzata per inizializzare i parametri del sistema.\n * \n * @author Bavota Gabriele, Carnevale Filomena.\n *\n */\npublic class ServletInitialize extends HttpServlet {\n\n\tprivate static final long serialVersionUID = -2542143445249797492L;\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate ServletConfig config;\n\t\n\t /**\n\n     * Inizializza i parametri\n\n     */\n\n    public void init(ServletConfig config) throws ServletException \n\n    {\n    \tthis.config = config;\n    \t               \n        \n        //Setto il server smtp specificato nel file di configurazione xml\n        Utility.setServerSmtp(config.getInitParameter(\"serverSmtp\"));\n        \n        //Setto i parametri necessari alla connessione al Database\n        Utility.setDriverMySql(config.getInitParameter(\"driverMySql\"));\n        Utility.setFullPathDatabase(config.getInitParameter(\"fullPathDatabase\"));\n        Utility.setUserName(config.getInitParameter(\"userName\"));\n        Utility.setPassword(config.getInitParameter(\"password\"));\n        Utility.setMaxPoolSize(Integer.valueOf(config.getInitParameter(\"maxPoolSize\")));\n        Utility.setWaitTimeout(Integer.valueOf(config.getInitParameter(\"waitTimeout\")));\n        Utility.setActiveTimeout(Integer.valueOf(config.getInitParameter(\"activeTimeout\")));\n        Utility.setPoolTimeout(Integer.valueOf(config.getInitParameter(\"poolTimeout\")));\n        Utility.setTextFooter(config.getInitParameter(\"textFooter\"));\n        \n        \n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad5"},"name":"ServletInsertClassroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.application.classroomManagement;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport smos.Environment;\nimport smos.bean.Classroom;\nimport smos.bean.User;\nimport smos.exception.DuplicatedEntityException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.exception.MandatoryFieldException;\nimport smos.storage.ManagerClassroom;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\npublic class ServletInsertClassroom extends HttpServlet {\n\n\t\n\t\n\t\n\t\n\t/**\n\t * Servlet per inserire una classe \n\t * @author Nicola Pisanti\n\t * @version 0.9\n\t */\n\tprivate static final long serialVersionUID = 1355159545343902216L;\n\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tpublic void doGet(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tint aC=Integer.valueOf(pRequest.getParameter(\"academicYear\"));\n\t\tString gotoPage = \"./showClassroomList?academicYear=\"+aC;\n\t\t\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\t\tManagerClassroom managerClassroom= ManagerClassroom.getInstance();\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\t\t\n\t\tString isWizard = \"yes\";\n\t\t\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!managerUser.isAdministrator(loggedUser)) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\n\t\t\tint idAdd= (int) Integer.valueOf(pRequest.getParameter(\"address\"));\n\t\t\t\n\t\t\tClassroom classroom= new Classroom();\n\t\t\tclassroom.setName(pRequest.getParameter(\"name\"));\n\t\t\tclassroom.setAcademicYear(aC);\n\t\t\tclassroom.setIdAddress(idAdd);\n\t\t\t\n\t\t\tif(classroom.getAcademicYear()<1970){\n\t\t\t\tthrow new InvalidValueException(\"l'anno inserito Ã¨ troppo vecchio\");\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(!(managerClassroom.exists(classroom))){\n\t\t\t\tmanagerClassroom.insert(classroom);\n\t\t\t\tsession.setAttribute(\"isWizard\", isWizard);\n\t\t\t}else{\n\t\t\t\tthrow new DuplicatedEntityException(\"la classe giÃ  esiste nel database\");\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (MandatoryFieldException mandatoryFieldException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + mandatoryFieldException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tmandatoryFieldException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DuplicatedEntityException duplicatedEntityException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + duplicatedEntityException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tduplicatedEntityException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE\n\t\t\t\t+ ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t\t\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest, \n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad6"},"name":"Classroom.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca35"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca38"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca33"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca32"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca67"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6c"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca63"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca62"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca5e"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca69"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6a"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca72"}]],"contents":"package smos.bean;\n\nimport java.io.Serializable;\n\npublic class Classroom implements Serializable{\n\n\t/**\n\t * Classe impiegata per modellare una classe \n\t * @author Nicola Pisanti\n\t * @version 1.0\n\t */\n\t\n\tprivate static final long serialVersionUID = -8295647317972301446L; \n\n\tprivate int idClassroom; //Id della classe\n\tprivate int idAddress;\t//Id dell'indirizzo\n\tprivate String name;\t//Nome della classe\n\tprivate int academicYear; //Anno accademico della classe, da inserire l'anno del primo semestre.\n\t\n\t\n\tpublic Classroom(){\n\t\tthis.idAddress=0;\n\t\tthis.idClassroom=0;\n\t\t\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'anno accademico\n\t * @return Un intero che rappresenta l'anno scolastico del primo semestre della classe.\n\t */\n\tpublic int getAcademicYear() {\n\t\treturn academicYear;\n\t}\n\t\n\t\n\t\n\t/**\n\t * Metodo che setta l'anno accademico\n\t * @param Il nuovo anno accademico da impostare\n\t */\n\tpublic void setAcademicYear(int pAcademicYear) {\n\t\tthis.academicYear = pAcademicYear;\n\t}\n\t\n\t\n\t/**\n\t * Metodo per avere l'ID dell'indirizzo della classe\n\t * @return Un intero che rappresenta l'ID dell'indirizzo della classe\n\t */\n\tpublic int getIdAddress() {\n\t\treturn idAddress;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta l'ID dell'indirizzo della classe\n\t * @param Il nuovo ID da settare\n\t */\n\tpublic void setIdAddress(int pIdAddress) {\n\t\tthis.idAddress = pIdAddress;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce l'ID della classe \n\t * @return Un intero che rappresenta l'ID della classe\n\t */\n\tpublic int getIdClassroom() {\n\t\treturn idClassroom;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta l'ID della classe\n\t * @param Il nuovo ID da settare\n\t */\n\tpublic void setIdClassroom(int pIdClassroom) {\n\t\tthis.idClassroom = pIdClassroom;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che restituisce il nome della classe\n\t * @return Una stringa che rappresenta il nome della classe\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t\n\t/**\n\t * Metodo che setta il nome della classe\n\t * @param Il nuovo nome da settare\n\t */\n\tpublic void setName(String pName) {\n\t\tthis.name = pName;\n\t}\n\t\n\t\n\t\n\tpublic String toString(){\n\t\t\n\t\treturn (name + \" \"+ academicYear+ \" ID: \"+ idClassroom);\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c4f1e8a0f9fdeb46cad7"},"name":"ServletAssignRole.java","system":"SMOS","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3b"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3a"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca3e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca41"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6e"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca58"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca59"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca66"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca46"}],["requirement_raw",{"$oid":"5ea8c4f1e8a0f9fdeb46ca6d"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca34"}],["requirement_raw",{"$oid":"5ea8c4f0e8a0f9fdeb46ca31"}]],"contents":"package smos.application.userManagement;\n\nimport smos.Environment;\nimport smos.bean.Role;\nimport smos.bean.User;\nimport smos.bean.UserListItem;\nimport smos.exception.DeleteManagerException;\nimport smos.exception.EntityNotFoundException;\nimport smos.exception.InvalidValueException;\nimport smos.storage.ManagerUser;\nimport smos.storage.connectionManagement.exception.ConnectionException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n/**\n * Servlet utilizzata per assegnare uno o piu ruoli ad un utente.\n * \n * @author Napolitano Vincenzo.\n * \n */\npublic class ServletAssignRole extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 537330195407987283L;\n\t\n\t/**\n\t * Definizione del metodo doGet\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doGet(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tString gotoPage = \"showUserList\";\n\t\tString errorMessage = \"\";\n\t\tHttpSession session = pRequest.getSession();\n\t\t\n\t\tCollection<UserListItem> administrators = new Vector<UserListItem>();\n\t\tIterator<UserListItem> itAdmin = null;\n\t\t\n\t\tManagerUser managerUser = ManagerUser.getInstance();\n\n\t\tUser loggedUser = (User) session.getAttribute(\"loggedUser\");\n\n\t\t// Verifica che l'utente abbia effettuato il login\n\t\ttry {\n\t\t\tif (loggedUser == null) {\n\t\t\t\tpResponse.sendRedirect(\"./index.htm\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((!managerUser.isAdministrator(loggedUser))) {\n\t\t\t\terrorMessage =  \"L'Utente collegato non ha accesso alla \" +\n\t\t\t\t\t\t\"funzionalita'!\";\n\t\t\t\tgotoPage = \"./error.jsp\";\n\t\t\t}\n\t\t\t\n\t\t\tUser user = (User) session.getAttribute(\"user\");\n\t\t\t\n\t\t\tadministrators = managerUser.getAdministrators();\n\t\t\titAdmin = administrators.iterator();\n\t\t\titAdmin.next();\n\t\t\t\n\t\t\tString[] selectedRoles = pRequest.getParameterValues(\"selectedRoles\");\n\t\t\tString[] unselectedRoles = pRequest.getParameterValues(\"unselectedRoles\");\n\t\t\t\n\t\t\tif (selectedRoles != null) {\n\t\t\t\tint selectedlength = selectedRoles.length;\n\t\t\t\tfor (int i = 0; i < selectedlength; i++) {\n\t\t\t\t\tint role = Integer.valueOf(selectedRoles[i]);\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di docente*/\n\t\t\t\t\t \n\t\t\t\t\t/*if ((role == Role.TEACHER) && (!managerUser.isTeacher(user))){\n\t\t\t\t\t\tgotoPage=\"./loadYearForTeachings\";\n\t\t\t\t\t\t\n\t\t\t\t\t}*/\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di studente*/\n\t\t\t\t\t/*if ((role == Role.STUDENT) && (!managerUser.isStudent(user))){\n\t\t\t\t\t\tgotoPage=\"./showUserList\";\n\t\t\t\t\t\t\n\t\t\t\t\t} */\n\t\t\t\t\t/*\n\t\t\t\t\t * controlliamo se il ruolo che stiamo assegnando e'\n\t\t\t\t\t * quello di genitore*/\n\t\t\t\t\t/*if((role==Role.PARENT)&& (!managerUser.isParent(user))){\n\t\t\t\t\t\tgotoPage=\"./persistentDataManagement/userManagement/showStudentParentForm.jsp\";\n\t\t\t\t\t}*/\n\t\t\t\t\tmanagerUser.assignRole(user, role);\n\t\t\t\t}\n\t\t\t} \n\t\t\t\n\t\t\tif (unselectedRoles != null) {\n\t\t\t\tint unselectedlength = unselectedRoles.length;\n\t\t\t\tfor (int i = 0; i < unselectedlength; i++) {\n\t\t\t\t\tint role = Integer.valueOf(unselectedRoles[i]);\n\t\t\t\t\tif ((managerUser.isAdministrator(user))&&(!itAdmin.hasNext())&&(role==Role.ADMIN)) {\n\t\t\t\t\t\tthrow new DeleteManagerException (\"Impossibile modificare il ruolo dell'utente, e' l'unico Amministratore del sistema! Creare un nuovo Amministratore e riprovare!\");\n\t\t\t\t\t}\n\t\t\t\t\tmanagerUser.removeRole(user, role);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t} catch (NumberFormatException numberFormatException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + numberFormatException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tnumberFormatException.printStackTrace();\n\t\t} catch (EntityNotFoundException entityNotFoundException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + entityNotFoundException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tentityNotFoundException.printStackTrace();\n\t\t} catch (SQLException SQLException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + SQLException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tSQLException.printStackTrace();\n\t\t} catch (ConnectionException connectionException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + connectionException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tconnectionException.printStackTrace();\n\t\t} catch (InvalidValueException invalidValueException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + invalidValueException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tinvalidValueException.printStackTrace();\n\t\t} catch (DeleteManagerException deleteManagerException) {\n\t\t\terrorMessage =  Environment.DEFAULT_ERROR_MESSAGE + deleteManagerException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tdeleteManagerException.printStackTrace();\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t\tsession.setAttribute(\"errorMessage\", errorMessage);\n\t\ttry {\n\t\t\tpResponse.sendRedirect(gotoPage);\n\t\t} catch (IOException ioException) {\n\t\t\terrorMessage = Environment.DEFAULT_ERROR_MESSAGE + ioException.getMessage();\n\t\t\tgotoPage = \"./error.jsp\";\n\t\t\tioException.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Definizione del metodo doPost\n\t * \n\t * @param pRequest\n\t * @param pResponse\n\t * \n\t */\n\tprotected void doPost(HttpServletRequest pRequest,\n\t\t\tHttpServletResponse pResponse) {\n\t\tthis.doGet(pRequest, pResponse);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcb3"},"name":"est_client.c","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc99"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9a"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9f"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9e"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8c"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc81"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc83"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc85"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcb0"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcb1"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcae"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcab"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca5"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca4"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaa"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc88"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc87"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca9"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaf"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcb2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcad"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcac"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc7f"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc98"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9c"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc92"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8e"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc97"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc95"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca1"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9d"}]],"contents":"/*\n * Utility function to set the certificate and private key to use\n * for a SSL context.\n *\n * Returns 0 on success\n */\nint est_client_set_cert_and_key (SSL_CTX *ctx, X509 *cert, EVP_PKEY *key)\n{\n\n    if (SSL_CTX_use_certificate(ctx, cert) <= 0) {\n        EST_LOG_ERR(\"Error setting certificate\");\n        ossl_dump_ssl_errors();\n        return 1;\n    }\n\n    if (SSL_CTX_use_PrivateKey(ctx, key) <= 0) {\n\n        EST_LOG_ERR(\"Unable to set private key\");\n        ossl_dump_ssl_errors();\n        return 1;\n    }\n\n    /*\n     * Verify the key matches the cert\n     */\n    if (!SSL_CTX_check_private_key(ctx)) {\n        EST_LOG_ERR(\"Private key does not match the certificate public key\");\n        ossl_dump_ssl_errors();\n        return 1;\n    }\n    return 0;\n}\n/*\n * Sign an X509 certificate request using the digest and the key passed.\n * Returns OpenSSL error code from X509_REQ_sign_ctx();\n */\nstatic int est_client_X509_REQ_sign (X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)\n{\n    int rv;\n    EVP_PKEY_CTX *pkctx = NULL;\n    EVP_MD_CTX mctx;\n\n    EVP_MD_CTX_init(&mctx);\n\n    if (!EVP_DigestSignInit(&mctx, &pkctx, md, NULL, pkey)) {\n        return 0;\n    }\n\n    /*\n     * Encode using DER (ASN.1) \n     *\n     * We have to set the modified flag on the X509_REQ because\n     * OpenSSL keeps a cached copy of the DER encoded data in some\n     * cases.  Setting this flag tells OpenSSL to run the ASN\n     * encoding again rather than using the cached copy.\n     */\n    x->req_info->enc.modified = 1; \n    rv = X509_REQ_sign_ctx(x, &mctx);\n\n    EVP_MD_CTX_cleanup(&mctx);\n\n    return (rv);\n}\n/*\n * populate_x509_request will build an x509 request buffer.  It does this by\n * calls into OpenSSL to insert the fields of the x509 header.\n *\n * Parameters:\n *\treq:\tpointer to the buffer that is to hold the x509 request header\n *\tpkey:   public key to be placed into the x509 request\n *\tcn:     Common Name to be placed into the x509 request\n *      cp:     challenge password to be placed into the x509 header\n *\n * Return value:\n *\tEST_ERR_NONE if success\n */\nstatic EST_ERROR populate_x509_request (EST_CTX *ctx, X509_REQ *req, EVP_PKEY *pkey, \n\t\t\t\t\tchar *cn, char *cp)\n{\n    X509_NAME *subj;\n\n\n    /* setup version number */\n    if (!X509_REQ_set_version(req, 0L)) {\n        EST_LOG_ERR(\"Unable to set X509 version\");\n\tossl_dump_ssl_errors();\n        return (EST_ERR_X509_VER);\n    }\n\n    /*\n     * Add Common Name entry\n     */\n    subj = X509_REQ_get_subject_name(req);\n    if (!X509_NAME_add_entry_by_txt(subj, \"CN\", MBSTRING_ASC,\n                                    (unsigned char*)cn, -1, -1, 0)) {\n        EST_LOG_ERR(\"Unable to set X509 common name\");\n\tossl_dump_ssl_errors();\n        return (EST_ERR_X509_CN);\n    }\n\n    /*\n     * Add challengePassword attribute if required\n     * No need to remove/add attributes here, only the PoP is\n     * part of the simple enroll flow.\n     */\n    if (ctx->csr_pop_required || ctx->client_force_pop) {\n\tEST_LOG_INFO(\"Client will include challengePassword in CSR\");\n        if (!X509_REQ_add1_attr_by_NID(req, NID_pkcs9_challengePassword,\n                                       MBSTRING_ASC, (unsigned char*)cp, -1)) {\n            EST_LOG_ERR(\"Unable to set X509 challengePassword attribute\");\n\t    ossl_dump_ssl_errors();\n            return (EST_ERR_X509_ATTR);\n        }\n    }\n    /*\n     * Set the public key on the request\n     */\n    if (!X509_REQ_set_pubkey(req, pkey)) {\n        EST_LOG_ERR(\"Unable to set public key\");\n\tossl_dump_ssl_errors();\n        return (EST_ERR_X509_PUBKEY);\n    }\n\n    return (EST_ERR_NONE);\n}\n/*\n * This function will generate a PKCS10 request.\n *\n * Parameters:\n *\tcn:\tCommon Name to put into the certificate.\n *\tcp:     TLS unique ID for the SSL session, becomes the challenge password\n *\tpkey:\tPrivate key to use for signing the request.\n *\n * Return value:\n *\tEST_ERR_NONE if success\n */\nstatic EST_ERROR est_generate_pkcs10 (EST_CTX *ctx, char *cn, char *cp, \n\t                              EVP_PKEY *pkey, X509_REQ **pkcs10)\n{\n    X509_REQ *req = NULL;\n    EST_ERROR rv;\n    int ossl_rv = 0;\n\n    req = X509_REQ_new();\n    if (req == NULL) {\n        EST_LOG_ERR(\"Unable to allocate X509_REQ\");\n        ossl_dump_ssl_errors();\n        return (EST_ERR_MALLOC);\n    }\n\n    rv = populate_x509_request(ctx, req, pkey, cn, cp);\n    if (rv != EST_ERR_NONE) {\n        X509_REQ_free(req);\n        return (rv);\n    }\n\n    /*\n     * Sign the request\n     */\n    ossl_rv = est_client_X509_REQ_sign(req, pkey, ctx->signing_digest);\n    if (!ossl_rv) {\n        EST_LOG_ERR(\"Unable to sign X509 cert request\");\n        X509_REQ_free(req);\n        ossl_dump_ssl_errors();\n        return (EST_ERR_X509_SIGN);\n    }\n\n    *pkcs10 = req;\n\n    return (EST_ERR_NONE);\n}\n/*\n * This function is a callback used by OpenSSL's verify_cert function.\n * It's called at the end of a cert verification to allow an opportunity to\n * gather more information regarding a failing cert verification, and to\n * possibly change the result of the verification.\n *\n * This callback is similar to the ossl routine, but does not alter\n * the verification result.\n */\nstatic int est_client_cacert_verify_cb (int ok, X509_STORE_CTX *ctx)\n{\n    int cert_error = X509_STORE_CTX_get_error(ctx);\n    X509 *current_cert = X509_STORE_CTX_get_current_cert(ctx);\n\n    EST_LOG_INFO(\"enter function: ok=%d cert_error=%d\", ok, cert_error);\n\n    if (!ok) {\n        if (current_cert) {\n            X509_NAME_print_ex_fp(stdout,\n                                  X509_get_subject_name(current_cert),\n                                  0, XN_FLAG_ONELINE);\n            printf(\"\\n\");\n        }\n        EST_LOG_INFO(\"%s error %d at %d depth lookup: %s\\n\",\n                     X509_STORE_CTX_get0_parent_ctx(ctx) ? \"[CRL path]\" : \"\",\n                     cert_error,\n                     X509_STORE_CTX_get_error_depth(ctx),\n                     X509_verify_cert_error_string(cert_error));\n    }\n    return (ok);\n}\n/*\n * This function will remove CRLs from a received cacert response buffer.\n *\n * Parameters:\n *\tctx:\tEST Context representing this session\n *  cacerts:    pointer to the buffer holding the resulting CA certs \n *  cacerts_len: length of the cacerts buffer\n *       p7:    pointer to the pkcs7 buffer that was received\n *\n * Return value:\n *\tEST_ERR_NONE if success\n \n */\nstatic EST_ERROR est_client_remove_crls (EST_CTX *ctx, unsigned char *cacerts,\n                                         int *cacerts_len, PKCS7 *p7)\n{\n    int nid = 0;\n    int crls_found = 0;\n    BIO *b64_enc = NULL;\n    BIO *p7bio_out = NULL;\n    int new_cacerts_len = 0;\n    char *new_cacerts_buf = NULL;\n    int count = 0;    \n    \n    nid=OBJ_obj2nid(p7->type);\n    switch (nid)\n        {\n        case NID_pkcs7_signed:\n            if (p7->d.sign->crl) {\n                sk_X509_CRL_pop_free(p7->d.sign->crl, X509_CRL_free);\n                p7->d.sign->crl = NULL;\n                crls_found = 1;\n            }\n            break;\n        case NID_pkcs7_signedAndEnveloped:\n            if (p7->d.signed_and_enveloped->crl) {\n                sk_X509_CRL_pop_free(p7->d.signed_and_enveloped->crl, X509_CRL_free);\n                p7->d.sign->crl = NULL;\n                crls_found = 1;\n            }\n            break;\n        default:\n            EST_LOG_ERR(\"Invalid NID value on PKCS7 structure\");\n            return (EST_ERR_CACERT_VERIFICATION);            \n            break;\n        }\n\n    /*\n     * If CRLs were removed, then the original PKCS7 buffer needs to be\n     * updated.  This will always be base64 encoded.\n     * - Allocate the BIOs,\n     * - Write the PKCS7 struct back into PEM format,\n     * - Get the pointer and length to the new base64 PEM encoded buffer,\n     * - and then copy it into the original buffer that was passed in.\n     * Since the CRLs are being removed, the new buffer will always be shorter\n     * and will fit into the original buffer.\n     */\n    if (crls_found) {\n\n        EST_LOG_INFO(\"CRL(s) attached with the CA Certificates.  Removing CRL(s)\");\n        \n        b64_enc = BIO_new(BIO_f_base64());\n        if (b64_enc == NULL) {\n            EST_LOG_ERR(\"BIO_new failed\");\n            ossl_dump_ssl_errors();\n            return(EST_ERR_MALLOC);\n        }\n        p7bio_out = BIO_new(BIO_s_mem());\n        if (p7bio_out == NULL) {\n            EST_LOG_ERR(\"Unable to access the CA cert buffer\");\n            ossl_dump_ssl_errors();\n            return(EST_ERR_MALLOC);\n        }\n        p7bio_out = BIO_push(b64_enc, p7bio_out);\n        \n        memzero_s(cacerts, *cacerts_len);\n        \n        count = i2d_PKCS7_bio(p7bio_out, p7);\n        if (count == 0) {\n            EST_LOG_ERR(\"PEM_write_bio_PKCS7 failed\");\n            ossl_dump_ssl_errors();\n            BIO_free_all(p7bio_out);            \n            return (EST_ERR_CACERT_VERIFICATION);\n        }\n        (void)BIO_flush(p7bio_out);\n\n        /*\n         * BIO_get_mem_data just returns the pointer and length to the data\n         * contained in the mem BIO.  Nothing is allocated and passed back\n         */\n        new_cacerts_len = (int) BIO_get_mem_data(p7bio_out, (char**)&new_cacerts_buf);\n        if (new_cacerts_len <= 0) {\n            EST_LOG_ERR(\"Failed to copy PKCS7 data\");\n            ossl_dump_ssl_errors();\n            BIO_free_all(p7bio_out);            \n            return (EST_ERR_CACERT_VERIFICATION);\n        }\n        /*\n         * copy the new buffer back into the old buffer\n         */\n        memcpy_s(cacerts, *cacerts_len, new_cacerts_buf, new_cacerts_len);\n        *cacerts_len = new_cacerts_len;\n    }\n\n    BIO_free_all(p7bio_out);\n\n    return EST_ERR_NONE;\n}\n/*\n * This function will decode the passed base64 encoded buffer and return the\n * decoded cacerts. If returning EST_ERR_NONE, caller is responsible for\n * freeing the cacerts_decoded buffer\n */\nstatic EST_ERROR b64_decode_cacerts (unsigned char *cacerts, int *cacerts_len,\n                                     unsigned char **cacerts_decoded,\n                                     int *cacerts_decoded_len)\n{\n    BIO *in = NULL;\n    BIO *b64 = NULL;\n    unsigned char *decoded_buf;\n    int decoded_buf_len;\n\n    *cacerts_decoded = NULL;\n    *cacerts_decoded_len = 0;\n    \n    b64 = BIO_new(BIO_f_base64());\n    if (b64 == NULL) {\n        EST_LOG_ERR(\"BIO_new failed\");\n        ossl_dump_ssl_errors();\n        return (EST_ERR_MALLOC);\n    }    \n    /*\n     * Decoding will always take up less than the original buffer.\n     */\n    in = BIO_new_mem_buf(cacerts, *cacerts_len);    \n    if (in == NULL) {\n        EST_LOG_ERR(\"Unable to access the CA cert buffer\");\n        ossl_dump_ssl_errors();\n        BIO_free_all(b64);\n        return (EST_ERR_MALLOC);\n    }\n    in = BIO_push(b64, in);    \n    decoded_buf = malloc(*cacerts_len);\n    if (decoded_buf == NULL) {\n        EST_LOG_ERR(\"Unable to allocate CA cert buffer for decode\");\n        BIO_free_all(in);        \n        return (EST_ERR_MALLOC);        \n    }\n    \n    decoded_buf_len = BIO_read(in, decoded_buf, *cacerts_len);\n    \n    *cacerts_decoded = decoded_buf;\n    *cacerts_decoded_len = decoded_buf_len;\n\n    BIO_free_all(in);\n    \n    return (EST_ERR_NONE);\n}\n/*\n * If returning EST_ERR_NONE, caller is responsible for freeing the PKCS7 struct\n */\nstatic EST_ERROR create_PKCS7 (unsigned char *cacerts_decoded, int cacerts_decoded_len,\n                               PKCS7 **pkcs7out)\n{\n    BIO *p7bio_in = NULL;\n    PKCS7 *pkcs7 = NULL;\n\n    /*\n     * Now get the PKCS7 formatted buffer of certificates read into a stack of\n     * X509 certs\n     */\n    p7bio_in = BIO_new_mem_buf(cacerts_decoded, cacerts_decoded_len);\n    if (p7bio_in == NULL) {\n        EST_LOG_ERR(\"Unable to access the PKCS7 buffer\");\n        ossl_dump_ssl_errors();\n        return (EST_ERR_MALLOC);\n    }\n        \n    pkcs7 = d2i_PKCS7_bio(p7bio_in,NULL);\n\n    if (pkcs7 == NULL) {\n        EST_LOG_ERR(\"Unable to read in PKCS7 based certificate buffer\");\n        ossl_dump_ssl_errors();\n        BIO_free_all(p7bio_in);   \n        return (EST_ERR_LOAD_CACERTS);\n    }\n\n    BIO_free_all(p7bio_in);\n    *pkcs7out = pkcs7;\n    return EST_ERR_NONE;    \n}\n/*\n * This function is invoked when the CACerts response has been received.  The\n * cert chain is built into a cert store and then each certificate is verified\n * against this store essentially verifying the cert chain against itself to\n * ensure that each intermediate can be verified back to one of the included\n * root certs in the CACerts response.  If CRLs are attached these will be\n * removed and a new PKCS7 buffer is created.\n *\n * Parameters:\n *\tctx:\tEST Context representing this session\n *  cacerts:    pointer to the buffer holding the received CA certs \n *  cacerts_len: length of the cacerts buffer\n *\n * Return value:\n *\tEST_ERR_NONE if success\n \n */\nstatic EST_ERROR verify_cacert_resp (EST_CTX *ctx, unsigned char *cacerts,\n                                     int *cacerts_len)\n{\n    int rv = 0;\n    int failed = 0;\n    EST_ERROR est_rc = EST_ERR_NONE;\n    \n    X509_STORE  *trusted_cacerts_store = NULL;\n    \n    STACK_OF(X509) *stack = NULL;\n    X509 *current_cert = NULL;\n    int i;\n    \n    unsigned char *cacerts_decoded = NULL;\n    int  cacerts_decoded_len = 0;\n\n    X509_STORE_CTX *store_ctx = NULL;\n    PKCS7 *pkcs7 = NULL;\n    \n    if (ctx == NULL || cacerts == NULL || cacerts_len == 0) {\n        EST_LOG_ERR(\"Invalid parameter. ctx = %x cacerts = %x cacerts_len = %x\",\n                    ctx, cacerts, cacerts_len);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }    \n\n    /*\n     * - Base64 decode the incoming ca certs buffer,\n     * - convert to a PKCS7 structure,\n     * - extract out the stack of certs.\n     */\n    rv = b64_decode_cacerts(cacerts, cacerts_len,\n                            &cacerts_decoded, &cacerts_decoded_len);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Base64 decode of received CA certs failed\");\n        return (rv);\n    }\n    rv = create_PKCS7(cacerts_decoded, cacerts_decoded_len, &pkcs7);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Failed to build PKCS7 structure from receievd buffer\");\n        free(cacerts_decoded);\n        return (rv);\n    }\n    rv = PKCS7_to_stack(pkcs7, &stack);    \n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Could not obtain stack of ca certs from PKCS7 structure\");\n        free(cacerts_decoded);\n        PKCS7_free(pkcs7);\n        return (rv);\n    }\n    \n    /*\n     * At this point we have the stack of X509 certs that make up\n     * the CA certs response sent from the EST server.\n     * - Build a store of \"trusted\" certs to use in the verify\n     * - walk through each cert and verify it \n     *   - Build a store context from the store and the cert to be verified and\n     *     call the verify function\n     */\n    trusted_cacerts_store = X509_STORE_new();\n    if (trusted_cacerts_store == NULL) {\n        EST_LOG_ERR(\"Unable to allocate cert store\");\n        ossl_dump_ssl_errors();\n        \n        free(cacerts_decoded);\n        PKCS7_free(pkcs7);\n        \n        return (EST_ERR_MALLOC);\n    }\n\n    X509_STORE_set_verify_cb(trusted_cacerts_store, est_client_cacert_verify_cb);\n\n    for (i=0; i<sk_X509_num(stack); i++) {\n        current_cert = sk_X509_value(stack, i);\n\n        /*\n         * Is it self signed?  If so, add it in the trusted store, otherwise,\n         * add it to the untrusted store.\n         */\n        rv = X509_check_issued(current_cert, current_cert);\n\tif (rv == X509_V_OK) {\n            EST_LOG_INFO(\"Adding cert to trusted store (%s)\", current_cert->name);\n            X509_STORE_add_cert(trusted_cacerts_store, current_cert);\n        }\n    }\n\n    /*\n     * set up a X509 Store Context\n     */\n    store_ctx = X509_STORE_CTX_new();\n    if (store_ctx == NULL) {\n        EST_LOG_ERR(\"Unable to allocate a new store context\");\n        ossl_dump_ssl_errors();\n        \n        free(cacerts_decoded);\n        PKCS7_free(pkcs7);\n        X509_STORE_free(trusted_cacerts_store);\n        \n        return(EST_ERR_MALLOC);\n    }\n\n    for (i=0; i<sk_X509_num(stack); i++) {\n\n        if (!X509_STORE_CTX_init(store_ctx, trusted_cacerts_store, NULL, stack)) {\n            EST_LOG_ERR(\"Unable to initialize the new store context\");\n            ossl_dump_ssl_errors();\n\n            free(cacerts_decoded);\n            PKCS7_free(pkcs7);\n            X509_STORE_free(trusted_cacerts_store);\n            X509_STORE_CTX_free(store_ctx);\n            \n            return ( EST_ERR_MALLOC);\n        }\n        current_cert = sk_X509_value(stack, i);\n        EST_LOG_INFO(\"Adding cert to store (%s)\", current_cert->name);\n\tX509_STORE_CTX_set_cert(store_ctx, current_cert);\n        \n        rv = X509_verify_cert(store_ctx);\n        if (!rv) {\n            /*\n             * this cert failed verification.  Log this and continue on\n             */\n            EST_LOG_WARN(\"Certificate failed verification (%s)\", current_cert->name);\n            failed = 1;\n        }\n    }\n\n    /*\n     * Finally, remove any CRLs that might be attached.\n     */\n    est_rc = est_client_remove_crls(ctx, cacerts, cacerts_len, pkcs7);\n\n    free(cacerts_decoded);\n    X509_STORE_free(trusted_cacerts_store);\n    X509_STORE_CTX_free(store_ctx);\n    PKCS7_free(pkcs7);\n    \n    if (failed) {\n        return (EST_ERR_CACERT_VERIFICATION);\n    } else {\n        return est_rc;\n    }\n}\n/*\n * This function is registered with SSL to be called during the verification\n * of each certificate in the server's identity cert chain.  The main purpose\n * is to look for the case where the cert could not be verified.  In this case,\n * if the EST client app has registered a callback to receive these untrusted\n * certs, it will be forwarded up to the EST client application.\n *\n * Parameters:\n *\tok:\tThe status of this certificate from the SSL verify code.\n *   x_ctx:     Ptr to the X509 certificate store structure  \n *\n * Return value:\n *   int: The potentially modified status after processing this certificate. This cane\n *        be modified by the ET client application if they've provided a callback\n *        allowing it to be processed, or modified here in this callback.\n */\nstatic int cert_verify_cb (int ok, X509_STORE_CTX *x_ctx)\n{\n    SSL    *ssl;\n    EST_CTX *e_ctx;\n    int     approve;\n    int cert_error = 0;\n    X509 *current_cert = NULL;\n\n    approve = ok;\n    \n    if (x_ctx == NULL) {\n        EST_LOG_ERR(\"Invalid X509 context pointer\");\n        return (approve);\n    }    \n    \n    cert_error = X509_STORE_CTX_get_error(x_ctx);\n    current_cert = X509_STORE_CTX_get_current_cert(x_ctx);\n\n    EST_LOG_INFO(\"entering: Cert passed up from OpenSSL. error = %d (%s) \\n\",\n                 cert_error, X509_verify_cert_error_string(cert_error));\n\n    /*\n     * Retrieve the pointer to the SSL structure for this connection and then\n     * the application specific data stored into the SSL object.  This will be\n     * our EST ctx for this EST session.\n     */\n    if (e_ctx_ssl_exdata_index == SSL_EXDATA_INDEX_INVALID) {\n        EST_LOG_ERR(\"Invalid SSL exdata index for EST context value\");\n        return (approve);\n    }\n        \n    ssl = X509_STORE_CTX_get_ex_data(x_ctx, SSL_get_ex_data_X509_STORE_CTX_idx());\n    if (!ssl) {\n        EST_LOG_ERR(\"NULL pointer retrieved for SSL session pointer from X509 ctx ex_data\");\n        return (approve);\n    }        \n    e_ctx = SSL_get_ex_data(ssl, e_ctx_ssl_exdata_index);\n    if (!e_ctx) {\n        EST_LOG_ERR(\"NULL pointer retrieved for EST context from SSL ex_data\");\n        return (approve);\n    }        \n\n    if (!ok) {\n        switch (cert_error) {\n\n            /*\n             * Cases where we notify the client application:\n             *\n             * CERT_UNTRUSTED is what is expected, but not what we get in the\n             * case where we cannot verify our server's cert.\n             * SELF_SIGNED_CERT_IN_CHAIN is what currently results with our server\n             * when we cannot verify its cert.\n             * UNABLE_TO_GET_CRL is passed up to make sure the application knows\n             * that although\n             */\n        case X509_V_ERR_CERT_UNTRUSTED:\n        case X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN:  \n        case X509_V_ERR_UNABLE_TO_GET_CRL:\n            \n            /*\n             * If the application provided a callback then go ahead and pass\n             * this cert store up.  If not, then log a warning and return what\n             * SSL gave us for a status.\n             */            \n            if (e_ctx->manual_cert_verify_cb) {\n                \n                EST_LOG_INFO(\"EST client application server cert verify function is registered\\n\");\n\n                approve = e_ctx->manual_cert_verify_cb(current_cert, cert_error);\n                \n            } else {\n                                \n                EST_LOG_INFO(\"NO EST client application server cert verify function registered\\n\");\n\n                if (cert_error == X509_V_ERR_UNABLE_TO_GET_CRL) {\n\n                    /*\n                     * We've enabled CRL checking in the TLS stack.  If the\n                     * application hasn't loaded a CRL, then this verify error\n                     * can occur.  The peer's cert is valid, but we can't\n                     * confirm if it was revoked.  The app has not provided\n                     * a way for us to notify on this, so our only option is\n                     * to log a warning and proceed on.\n                     */\n                    EST_LOG_WARN(\"No CRL loaded, TLS peer will be allowed.\");\n                    approve = 1;\n                }\n            }\n            break;\n\n        /* The remainder of these will result in the ok state remaining unchanged\n         * and a EST log warning message being logged.\n         */\n        case X509_V_ERR_NO_EXPLICIT_POLICY:\n        case X509_V_ERR_CERT_HAS_EXPIRED:\n\n        /* since we are just checking the certificates, it is\n         * ok if they are self signed. But we should still warn\n         * the user.\n         */\n        case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:\n        /* Continue after extension errors too */\n        case X509_V_ERR_INVALID_CA:\n        case X509_V_ERR_INVALID_NON_CA:\n        case X509_V_ERR_PATH_LENGTH_EXCEEDED:\n        case X509_V_ERR_INVALID_PURPOSE:\n        case X509_V_ERR_CRL_HAS_EXPIRED:\n        case X509_V_ERR_CRL_NOT_YET_VALID:\n        case X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION:\n        case X509_V_ERR_CERT_REVOKED:\n        default:\n            EST_LOG_WARN(\"Certificate verify failed (reason = %d) (%s)\",\n                         cert_error, X509_verify_cert_error_string(cert_error));\n            break;\n        }\n    }\n    return (approve);\n}\n/*\n * This function is used to create and initialize an\n * SSL_CTX that will be used for client and proxy EST operations.\n * The SSL_CTX is stored on the EST_CTX.\n *\n * Parameters:\n *\tctx:\tEST Context\n *\n * Return value:\n *\tEST_ERROR\n *         EST_ERR_NONE if success\n */\nstatic EST_ERROR est_client_init_ssl_ctx (EST_CTX *ctx)\n{\n    SSL_CTX     *s_ctx;\n    X509_VERIFY_PARAM *vpm = NULL;\n    EST_ERROR rv = EST_ERR_NONE;\n\n    est_log_version();\n\n    if (ctx == NULL) {\n        EST_LOG_ERR(\"Invalid context pointer\");\n        return EST_ERR_NO_CTX;\n    }\n        \n    if ((s_ctx = SSL_CTX_new(SSLv23_client_method())) == NULL) {\n        EST_LOG_ERR(\"Failed to obtain a new SSL Context\\n\");\n        ossl_dump_ssl_errors();\n        return EST_ERR_SSL_CTX_NEW;\n    }\n\n    /*\n     * Only TLS 1.1 or above can be used for EST\n     */\n    SSL_CTX_set_options(s_ctx, SSL_OP_NO_SSLv2 |\n                        SSL_OP_NO_SSLv3 |\n                        SSL_OP_NO_TLSv1);\n\n    /*\n     * limit the cipher suites that are offered\n     */\n    if (!SSL_CTX_set_cipher_list(s_ctx, EST_CIPHER_LIST)) { \n        EST_LOG_ERR(\"Failed to set SSL cipher suites\\n\");\n        ossl_dump_ssl_errors();\n        return EST_ERR_SSL_CIPHER_LIST;\n    }\n\n    /*\n     * Make sure we're verifying the server\n     */\n    SSL_CTX_set_verify(s_ctx, SSL_VERIFY_PEER|SSL_VERIFY_FAIL_IF_NO_PEER_CERT,\n                       cert_verify_cb);\n\n    /*\n     * leverage the cert store we already created from the\n     * trusted CA chain provided by the application.\n     *\n     * In either case, the SSL stack will clean up the cert store during the\n     * SSL_CTX_free(), so let's remove our reference to it so we don't try to\n     * clean it up ourselves later\n     */\n    SSL_CTX_set_cert_store(s_ctx, ctx->trusted_certs_store);\n    ctx->trusted_certs_store = NULL;        \n\n    /*\n     * Set up X509 params and assign them to the SSL ctx\n     * - Enable CRL checks\n     * - Max # of untrusted CA certs that can exist in a chain\n     * - ensure that the cert is being used as intended, if\n     *   it contains the X509 KeyUsage extension\n     */\n    vpm = X509_VERIFY_PARAM_new();\n    if (vpm == NULL) {\n        EST_LOG_ERR(\"Unable to allocate a verify parameter structure\");\n        ossl_dump_ssl_errors();\n        return (EST_ERR_MALLOC);\n    }\n        \n    /* Enable CRL checks */\n    if (ctx->enable_crl) {\n\tX509_VERIFY_PARAM_set_flags(vpm, X509_V_FLAG_CRL_CHECK |\n                                    X509_V_FLAG_CRL_CHECK_ALL);\n    }\n    X509_VERIFY_PARAM_set_flags(vpm, X509_V_FLAG_CRL_CHECK |\n                                X509_V_FLAG_CRL_CHECK_ALL);\n    X509_VERIFY_PARAM_set_depth(vpm, EST_TLS_VERIFY_DEPTH);\n\n    X509_VERIFY_PARAM_set_purpose(vpm, X509_PURPOSE_SSL_SERVER);\n\n    SSL_CTX_set1_param(s_ctx, vpm);\n    X509_VERIFY_PARAM_free(vpm);\n\n    /*\n     * Save the reference to the SSL session\n     * This will be used later when matching the EST_CTX to the SSL context\n     * in est_ssl_info_cb().\n     */\n    ctx->ssl_ctx = s_ctx;\n\n    if (e_ctx_ssl_exdata_index == SSL_EXDATA_INDEX_INVALID) {\n        e_ctx_ssl_exdata_index = SSL_get_ex_new_index(0, \"EST Context\", NULL, NULL, NULL);    \n    }\n\n    /*\n     * This last config setting is not ctx based, but instead, global to the\n     * entire libcrypto library.  Need to ensure that CSR string attributes\n     * are added in ASCII printable format.\n     */\n    ASN1_STRING_set_default_mask(B_ASN1_PRINTABLE);\n    \n    return rv;\n}\n/*\n * This function calculates the digest value to be\n * used in HTTP requests when the server has asked\n * the client to use HTTP digest authentication.\n * It uses the tokens that were parsed from the HTTP\n * server response earlier to calculate the digest.\n */\nstatic unsigned char *est_client_generate_auth_digest (EST_CTX *ctx, char *uri,\n                                                       char *user, char *pwd)\n{\n    EVP_MD_CTX *mdctx;\n    const EVP_MD *md = EVP_md5();\n    uint8_t ha1[EVP_MAX_MD_SIZE];\n    unsigned int ha1_len;\n    char ha1_str[EST_MAX_MD5_DIGEST_STR_LEN];\n    uint8_t ha2[EVP_MAX_MD_SIZE];\n    unsigned int ha2_len;\n    char ha2_str[EST_MAX_MD5_DIGEST_STR_LEN];\n    char nonce_cnt[9] = \"00000001\";\n    unsigned char digest[EVP_MAX_MD_SIZE];\n    unsigned int d_len;\n    unsigned char *rv;\n\n    /*\n     * Calculate HA1 using username, realm, password, and server nonce\n     */\n    mdctx = EVP_MD_CTX_create();\n    if (!EVP_DigestInit_ex(mdctx, md, NULL)) {\n        EST_LOG_ERR(\"Unable to Initialize digest\");\n        return NULL;\n    }\n    EVP_DigestUpdate(mdctx, user, strnlen_s(user, MAX_UIDPWD));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ctx->realm, strnlen_s(ctx->realm, MAX_REALM));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, pwd, strnlen_s(pwd, MAX_UIDPWD));\n    EVP_DigestFinal(mdctx, ha1, &ha1_len);\n    EVP_MD_CTX_destroy(mdctx);\n    est_hex_to_str(ha1_str, ha1, ha1_len);\n\n    /*\n     * Calculate HA2 using method, URI,\n     */\n    mdctx = EVP_MD_CTX_create();\n    if (!EVP_DigestInit_ex(mdctx, md, NULL)) {\n        EST_LOG_ERR(\"Unable to Initialize digest\");\n        return NULL;\n    }\n    EVP_DigestUpdate(mdctx, \"POST\", 4);\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, uri, strnlen_s(uri, MAX_REALM));\n    EVP_DigestFinal(mdctx, ha2, &ha2_len);\n    EVP_MD_CTX_destroy(mdctx);\n    est_hex_to_str(ha2_str, ha2, ha2_len);\n\n    /*\n     * Calculate auth digest using HA1, nonce, nonce count, client nonce, qop, HA2\n     */\n    mdctx = EVP_MD_CTX_create();\n    if (!EVP_DigestInit_ex(mdctx, md, NULL)) {\n        EST_LOG_ERR(\"Unable to Initialize digest\");\n        return NULL;\n    }\n    EVP_DigestUpdate(mdctx, ha1_str, ha1_len * 2);\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ctx->s_nonce, strnlen_s(ctx->s_nonce, MAX_NONCE));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, nonce_cnt, strnlen_s(nonce_cnt, MAX_NC));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ctx->c_nonce, strnlen_s(ctx->c_nonce, MAX_NONCE));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, \"auth\", 4);\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ha2_str, ha2_len * 2);\n    EVP_DigestFinal(mdctx, digest, &d_len);\n    EVP_MD_CTX_destroy(mdctx);\n\n    rv = malloc(EST_MAX_MD5_DIGEST_STR_LEN);\n    if (rv == NULL) {\n        EST_LOG_ERR(\"Unable to allocate memory for digest\");\n        return NULL;\n    }\n    \n    est_hex_to_str((char *)rv, digest, d_len);\n    return (rv);\n}\n/*\n * est_client_retrieve_credentials() is used to retrieve the credentials when\n * the server has requested either BASIC or DIGEST mode.  The values needed from\n * the application layer in either mode are the same, username, password, but the\n * API will indicate the mode to the callback in case anything changes.\n */\nstatic void est_client_retrieve_credentials (EST_CTX *ctx, EST_HTTP_AUTH_MODE auth_mode,\n                                             char *user, char *pwd) \n{\n    EST_HTTP_AUTH_HDR auth_credentials;\n    EST_HTTP_AUTH_CRED_RC rc;\n    \n    /*\n     * See if we only have one part of them.  If so, reset the part we\n     * have.\n     */\n    if (ctx->userid[0] != '\\0') {\n        memzero_s(ctx->userid, sizeof(ctx->userid));\n    }\n            \n    if (ctx->password[0] != '\\0') {\n        memzero_s(ctx->password, sizeof(ctx->password));\n    }\n                \n    /*\n     * Need to ask the application layer for the credentials\n     */\n    memzero_s(&auth_credentials, sizeof(auth_credentials));\n            \n    if (ctx->auth_credentials_cb) {\n        auth_credentials.mode = auth_mode;\n        rc = ctx->auth_credentials_cb(&auth_credentials);\n        if (rc == EST_HTTP_AUTH_CRED_NOT_AVAILABLE) {\n            EST_LOG_ERR(\"Attempt to obtain token from application failed.\");\n        }\n    }\n\n    /*\n     * Did we get the credentials we expected?  If not, point to a NULL string\n     * to generate the header\n     */\n    if (auth_credentials.user == NULL) {\n        user[0] = '\\0'; \n    } else if (MAX_UIDPWD < strnlen_s(auth_credentials.user, MAX_UIDPWD+1)) {\n        EST_LOG_ERR(\"Userid provided is larger than the max of %d\", MAX_UIDPWD);\n        user[0] = '\\0'; \n    } else {\n        if (EOK != strncpy_s(user, MAX_UIDPWD, auth_credentials.user, MAX_UIDPWD)) {\n            EST_LOG_ERR(\"Invalid User ID provided\");\n        }\n    }\n    \n    if (auth_credentials.pwd == NULL) {\n        pwd[0] = '\\0'; \n    } else if (MAX_UIDPWD < strnlen_s(auth_credentials.pwd, MAX_UIDPWD+1)) {\n        EST_LOG_ERR(\"Password provided is larger than the max of %d\", MAX_UIDPWD);\n        pwd[0] = '\\0'; \n    } else {\n        if (EOK != strncpy_s(pwd, MAX_UIDPWD, auth_credentials.pwd, MAX_UIDPWD)) {\n            EST_LOG_ERR(\"Invalid User password provided\");\n        }\n    }\n\n    cleanse_auth_credentials(&auth_credentials);    \n}\n/*\n * This function adds the HTTP authentication header to\n * an outgoing HTTP request, allowing the server to\n * authenticate the EST client.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\thdr:        pointer to the buffer to hold the header\n *      uri:        pointer to a buffer that holds the uri to be used in the header\n */\nstatic void est_client_add_auth_hdr (EST_CTX *ctx, char *hdr, char *uri)\n{\n    int hdr_len;\n    unsigned char *digest;\n    unsigned char client_random[8];\n    char both[MAX_UIDPWD*2+2]; /* both UID and PWD + \":\" + /0 */\n    char both_b64[2*2*MAX_UIDPWD];\n    int both_len = 0;\n    EST_HTTP_AUTH_HDR auth_credentials;\n    EST_HTTP_AUTH_CRED_RC rc;\n    char *token = NULL;\n    char token_b64[MAX_AUTH_TOKEN_LEN*2];\n    char user[MAX_UIDPWD+1];\n    char pwd[MAX_UIDPWD+1];\n    int enc_len = 0;\n    int token_len = 0;\n\n    memzero_s(both, MAX_UIDPWD*2+2);\n    memzero_s(both_b64, 2*2*MAX_UIDPWD);\n    \n    hdr_len = (int) strnlen_s(hdr, EST_HTTP_REQ_TOTAL_LEN);\n    if (hdr_len == EST_HTTP_REQ_TOTAL_LEN) {\n        EST_LOG_WARN(\"Authentication header took up the maximum amount in buffer (%d)\",\n                     EST_HTTP_REQ_TOTAL_LEN);\n    }\n    \n    switch (ctx->auth_mode) {\n    case AUTH_BASIC:\n        /*\n         * make sure we have both parts of the credentials to send.  If we do,\n         * then we're operating in the original mode where the app layer\n         * provides them up front before they're needed.  If not, then we can\n         * now go ask for them from the app layer.\n         */\n        if (ctx->userid[0] == '\\0' && ctx->password[0] == '\\0') {\n\n            memzero_s(user, MAX_UIDPWD+1);\n            memzero_s(pwd, MAX_UIDPWD+1);\n            \n            est_client_retrieve_credentials(ctx, ctx->auth_mode, user, pwd);\n            \n            /*\n             * regardless of what comes back, build the string containing both\n             */            \n            snprintf(both, MAX_UIDPWD*2+2, \"%s:%s\", user, pwd);\n        } else {\n            /*\n             * Use what was given during configuration through est_client_set_auth\n             */\n            snprintf(both, MAX_UIDPWD*2+2, \"%s:%s\", ctx->userid,\n                     ctx->password);\n        }\n        \n        /*\n         * base64 encode the combined string and build the HTTP auth header\n         */\n        both_len = strnlen_s(both, MAX_UIDPWD*2+2);\n        enc_len = est_base64_encode((const char *)both, both_len, both_b64, (2*2*MAX_UIDPWD));\n        if (enc_len <= 0) {\n            EST_LOG_ERR(\"Unable to encode basic auth value\");\n        }    \n        snprintf(hdr + hdr_len, EST_HTTP_REQ_TOTAL_LEN-hdr_len,\n                 \"Authorization: Basic %s\\r\\n\", both_b64);\n        break;\n    case AUTH_DIGEST:\n\n        /* Generate a client nonce */\n        if (!RAND_bytes(client_random, 8)) {\n            EST_LOG_ERR(\"RNG failure while generating nonce\");\n            /* Force hdr to a null string */\n            memzero_s(hdr, EST_HTTP_REQ_TOTAL_LEN);\n            break;\n        }\n        \n        est_hex_to_str(ctx->c_nonce, client_random, 8);\n\n        /*\n         * Check to see if the application layer has provided username and password\n         * up front during configuration.  If it has not, go retrieve them now, otherwise,\n         * copy them into the local buffers to get them ready\n         */\n        if (ctx->userid[0] == '\\0' && ctx->password[0] == '\\0') {\n\n            memzero_s(user, MAX_UIDPWD+1);\n            memzero_s(pwd, MAX_UIDPWD+1);\n            \n            est_client_retrieve_credentials(ctx, ctx->auth_mode, user, pwd);\n        } else {\n            if (EOK != strncpy_s(user, MAX_UIDPWD, ctx->userid, MAX_UIDPWD)) {\n                EST_LOG_ERR(\"Invalid User ID provided\");\n            }\n            if (EOK != strncpy_s(pwd, MAX_UIDPWD, ctx->password, MAX_UIDPWD)) {\n                EST_LOG_ERR(\"Invalid User password provided\");\n            }\n        }\n        \n        digest = est_client_generate_auth_digest(ctx, uri, user, pwd);\n        if (digest == NULL) {\n            EST_LOG_ERR(\"Error while generating digest\");\n            /* Force hdr to a null string */\n            memzero_s(hdr, EST_HTTP_REQ_TOTAL_LEN);\n            memzero_s(ctx->c_nonce, MAX_NONCE+1);\n            memzero_s(user, MAX_UIDPWD+1);\n            memzero_s(pwd, MAX_UIDPWD+1);\n            break;\n        }\n            \n        snprintf(hdr + hdr_len, EST_HTTP_REQ_TOTAL_LEN-hdr_len,\n                 \"Authorization: Digest username=\\\"%s\\\", realm=\\\"%s\\\", nonce=\\\"%s\\\", uri=\\\"%s\\\", cnonce=\\\"%s\\\", nc=00000001, qop=\\\"auth\\\", response=\\\"%s\\\"\\r\\n\",\n                user,\n                ctx->realm,\n                ctx->s_nonce,\n                uri,\n                ctx->c_nonce,\n                digest);\n        memzero_s(digest, EST_MAX_MD5_DIGEST_STR_LEN);\n        memzero_s(ctx->c_nonce, MAX_NONCE+1);\n        memzero_s(user, MAX_UIDPWD+1);\n        memzero_s(pwd, MAX_UIDPWD+1);\n        free(digest);\n        break;\n    case AUTH_TOKEN:\n        \n        EST_LOG_INFO(\"Server requested Token based authentication\");\n\n        memzero_s(&auth_credentials, sizeof(auth_credentials));\n        \n        if (ctx->auth_credentials_cb) {    \n            auth_credentials.mode = AUTH_TOKEN;\n            rc = ctx->auth_credentials_cb(&auth_credentials);\n            if (rc == EST_HTTP_AUTH_CRED_NOT_AVAILABLE) {\n                EST_LOG_ERR(\"Attempt to obtain token from application failed.\");\n            }\n        }\n\n        /*\n         * Did we get the credentials we expected?  If not, point to a NULL string\n         * to generate the header\n         */\n        if (auth_credentials.auth_token == NULL) {\n            EST_LOG_ERR(\"Requested token credentials, but application did not provide any.\");\n            token = \"\"; \n        } else {\n\n            /*\n             * Make sure the token we were given is not too long.\n             * If it is, force it to NULL to cause the auth failure at\n             * the server just as if no credentials were provided\n             */\n            if (MAX_AUTH_TOKEN_LEN < strnlen_s(auth_credentials.auth_token, MAX_AUTH_TOKEN_LEN+1)) {\n                EST_LOG_ERR(\"Token provided is larger than the max of %d\",\n                            MAX_AUTH_TOKEN_LEN);\n                token = \"\";\n            } else {\n                token = auth_credentials.auth_token;\n            }\n        }\n\n        /*\n         * base64 encode the combined string and build the HTTP auth header\n         */\n        memzero_s(token_b64, MAX_AUTH_TOKEN_LEN*2);\n        token_len = strnlen_s(token, MAX_AUTH_TOKEN_LEN);\n        enc_len = est_base64_encode((const char *)token, token_len,\n                                    token_b64, MAX_AUTH_TOKEN_LEN*2);\n        \n        if (enc_len <= 0) {\n            EST_LOG_ERR(\"Unable to encode bearer token auth value\");\n        }    \n        \n        snprintf(hdr + hdr_len, EST_HTTP_REQ_TOTAL_LEN-hdr_len,\n                 \"Authorization: Bearer %s\\r\\n\", token_b64);\n\n        cleanse_auth_credentials(&auth_credentials);\n        \n        break;\n    default:\n        EST_LOG_INFO(\"No HTTP auth mode set, sending anonymous request\");\n        break;\n    }\n}\n/*\n * This function is used to build the HTTP header for\n * the CAcerts request flow.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\thdr:        pointer to the buffer to hold the header\n */\nstatic int est_client_build_cacerts_header (EST_CTX *ctx, char *hdr)\n{\n    int hdr_len;\n\n    snprintf(hdr, EST_HTTP_REQ_TOTAL_LEN, \"GET %s%s%s/%s HTTP/1.1\\r\\n\"\n            \"User-Agent: %s\\r\\n\"\n            \"Connection: close\\r\\n\"\n            \"Host: %s:%d\\r\\n\"\n            \"Accept: */*\\r\\n\",\n            EST_PATH_PREFIX,\n            (ctx->uri_path_segment?\"/\":\"\"),\n            (ctx->uri_path_segment?ctx->uri_path_segment:\"\"),\n            EST_GET_CACERTS, \n            EST_HTTP_HDR_EST_CLIENT,\n            ctx->est_server, ctx->est_port_num);\n    hdr_len = (int) strnlen_s(hdr, EST_HTTP_REQ_TOTAL_LEN);\n    if (hdr_len == EST_HTTP_REQ_TOTAL_LEN) {\n        EST_LOG_WARN(\"CA Certs header took up the maximum amount in buffer (%d)\",\n                     EST_HTTP_REQ_TOTAL_LEN);\n    }\n    \n    return (hdr_len);\n}\n/*\n * This function is used to build the HTTP header for\n * the CSR attributes request flow.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\thdr:        pointer to the buffer to hold the header\n */\nstatic int est_client_build_csr_header (EST_CTX *ctx, char *hdr)\n{\n    int hdr_len;\n\n    snprintf(hdr, EST_HTTP_REQ_TOTAL_LEN,\"GET %s%s%s/%s HTTP/1.1\\r\\n\"\n            \"User-Agent: %s\\r\\n\"\n            \"Connection: close\\r\\n\"\n            \"Host: %s:%d\\r\\n\"\n            \"Accept: */*\\r\\n\",\n            EST_PATH_PREFIX,\n            (ctx->uri_path_segment?\"/\":\"\"),\n            (ctx->uri_path_segment?ctx->uri_path_segment:\"\"),\n            EST_GET_CSRATTRS,\n            EST_HTTP_HDR_EST_CLIENT,\n            ctx->est_server, ctx->est_port_num);\n    est_client_add_auth_hdr(ctx, hdr, EST_SIMPLE_ENROLL_URI);\n    hdr_len = (int) strnlen_s(hdr, EST_HTTP_REQ_TOTAL_LEN);\n    if (hdr_len == EST_HTTP_REQ_TOTAL_LEN) {\n        EST_LOG_WARN(\"CSR attributes request header took up the maximum amount in buffer (%d)\",\n                     EST_HTTP_REQ_TOTAL_LEN);\n    }\n    return (hdr_len);\n}\n/*\n * This function does the work for the CSR attributes request flow.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\tssl:\t    SSL context\n */\nstatic int est_client_send_csrattrs_request (EST_CTX *ctx, SSL *ssl,\n\t\t\t\t\t     unsigned char **csrattrs, \n\t\t\t\t\t     int *csrattrs_len)\n{\n    char        *http_data;\n    int hdr_len;\n    int read_size, write_size;\n    unsigned char *csr_attrs_buf = NULL;\n    int rv;\n\n    /* assume defeat */\n    *csrattrs = NULL;\n    *csrattrs_len = 0;\n    /*\n     * Build the HTTP request\n     * - allocate buffer: header, no data, terminating characters\n     * - build the header\n     * - no data\n     * - terminate it\n     */    \n    http_data = malloc(EST_HTTP_REQ_TOTAL_LEN);\n    if (http_data == NULL) {\n        EST_LOG_ERR(\"Unable to allocate memory for http_data\");\n        return EST_ERR_MALLOC;\n    }\n    \n    hdr_len = est_client_build_csr_header(ctx, http_data);\n\n    if (hdr_len == 0) {\n        EST_LOG_ERR(\"CSR attributes HTTP header could not be built correctly\");\n        free(http_data);\n        return (EST_ERR_HTTP_CANNOT_BUILD_HEADER);\n    }    \n\n    /*\n     * terminate the HTTP header\n     */\n    snprintf(http_data + hdr_len, EST_HTTP_REQ_TOTAL_LEN-hdr_len, \"\\r\\n\");\n    hdr_len += 2;\n\n    /*\n     * no data is being sent so go ahead and terminate the HTTP request\n     */\n    snprintf(http_data + hdr_len, EST_HTTP_REQ_TOTAL_LEN-hdr_len, \"\\r\\n\");\n    hdr_len += 2;\n\n\n    /*\n     * Send the request to the server and wait for a response\n     */\n    ctx->last_http_status = 0;\n    write_size = SSL_write(ssl, http_data, hdr_len);\n    if (write_size < 0) {\n        EST_LOG_ERR(\"TLS write error\");\n\tossl_dump_ssl_errors();\n        rv = EST_ERR_SSL_WRITE;\n    } else {\n        EST_LOG_INFO(\"TLS wrote %d bytes, attempted %d bytes\\n\",\n                     write_size, hdr_len);\n\n\t/*\n         * Try to get the response from the server\n         */\n        rv = est_io_get_response(ctx, ssl, EST_OP_CSRATTRS,\n                                 &csr_attrs_buf, &read_size);\n        switch (rv) {\n        case EST_ERR_NONE:\n\t    if (csr_attrs_buf != NULL) {\n\t\t*csrattrs = csr_attrs_buf;\n\t\t*csrattrs_len = read_size;\n            }\n            break;\n        case EST_ERR_AUTH_FAIL:\n        default:\n            EST_LOG_ERR(\"EST request failed: %d (%s)\", rv, EST_ERR_NUM_TO_STR(rv));\n\t    if (csr_attrs_buf) {\n                free(csr_attrs_buf);\n            }\n            break;\n        }\n    }\n    free(http_data);\n    return (rv);\n}\n/*\n * This function is used to build the HTTP header for\n * the Simple Enroll flow.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\thdr:        pointer to the buffer to hold the header\n *      pkcs10_len: length of the buffer pointed to by hdr \n */\nstatic int est_client_build_enroll_header (EST_CTX *ctx, char *hdr, int pkcs10_len)\n{\n    int hdr_len;\n\n    snprintf(hdr, EST_HTTP_REQ_TOTAL_LEN, \"POST %s%s%s/%s HTTP/1.1\\r\\n\"\n            \"User-Agent: %s\\r\\n\"\n            \"Connection: close\\r\\n\"\n            \"Host: %s:%d\\r\\n\"\n            \"Accept: */*\\r\\n\"\n            \"Content-Type: application/pkcs10\\r\\n\"\n            \"Content-Length: %d\\r\\n\",\n            EST_PATH_PREFIX,\n            (ctx->uri_path_segment?\"/\":\"\"),\n            (ctx->uri_path_segment?ctx->uri_path_segment:\"\"),\n            EST_SIMPLE_ENROLL, \n            EST_HTTP_HDR_EST_CLIENT,\n            ctx->est_server, ctx->est_port_num, pkcs10_len);\n    est_client_add_auth_hdr(ctx, hdr, EST_SIMPLE_ENROLL_URI);\n    hdr_len = (int) strnlen_s(hdr, EST_HTTP_REQ_TOTAL_LEN);\n    if (hdr_len == EST_HTTP_REQ_TOTAL_LEN) {\n        EST_LOG_WARN(\"Client enroll request header took up the maximum amount in buffer (%d)\",\n                     EST_HTTP_REQ_TOTAL_LEN);\n    }\n    \n    return (hdr_len);\n}\n/*\n * This function is used to build the HTTP header for\n * the Simple ReEnroll flow.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\thdr:        pointer to the buffer to hold the header\n *      pkcs10_len: length of the buffer pointed to by hdr \n */\nstatic int est_client_build_reenroll_header (EST_CTX *ctx, char *hdr, int pkcs10_len)\n{\n    int hdr_len;\n\n    snprintf(hdr, EST_HTTP_REQ_TOTAL_LEN, \"POST %s%s%s/%s HTTP/1.1\\r\\n\"\n            \"User-Agent: %s\\r\\n\"\n            \"Connection: close\\r\\n\"\n            \"Host: %s:%d\\r\\n\"\n            \"Accept: */*\\r\\n\"\n            \"Content-Type: application/pkcs10\\r\\n\"\n            \"Content-Length: %d\\r\\n\",\n            EST_PATH_PREFIX,\n            (ctx->uri_path_segment?\"/\":\"\"),\n            (ctx->uri_path_segment?ctx->uri_path_segment:\"\"),\n            EST_SIMPLE_REENROLL, \n            EST_HTTP_HDR_EST_CLIENT,\n            ctx->est_server, ctx->est_port_num, pkcs10_len);\n    est_client_add_auth_hdr(ctx, hdr, EST_SIMPLE_ENROLL_URI);\n    hdr_len = (int) strnlen_s(hdr, EST_HTTP_REQ_TOTAL_LEN);\n    if (hdr_len == EST_HTTP_REQ_TOTAL_LEN) {\n        EST_LOG_WARN(\"Client reenroll request header took up the maximum amount in buffer (%d)\",\n                     EST_HTTP_REQ_TOTAL_LEN);\n    }\n    return (hdr_len);\n}\n/*\n * This function sends the HTTP request for a Simple Enroll\n * The CSR (pkcs10) is already built at this point.  This\n * function simply creates the HTTP header and body and puts\n * it on the wire.  It then waits for a response from the\n * server and copies the response to a buffer provided by\n * the caller\n *\n * Parameters:\n *\tctx:\t    EST context\n *\tssl:\t    SSL context\n *\tbptr:\t    pointer containing PKCS10 CSR\n *\tpkcs7:\t    pointer that will receive the pkcs7 response\n *\tpkcs7_len:  length of pkcs7 response\n *\treenroll:   Set to 1 to do a reenroll instead of an enroll\n *\n */\nint est_client_send_enroll_request (EST_CTX *ctx, SSL *ssl, BUF_MEM *bptr,\n                                    unsigned char *pkcs7, int *pkcs7_len,\n\t\t\t\t    int reenroll)\n{\n    char *http_data;\n    int hdr_len;\n    int write_size;\n    unsigned char *enroll_buf = NULL;\n    int enroll_buf_len = 0;\n    int rv;\n\n    /*\n     * Assume the enroll will fail, set return length to zero\n     * to be defensive.\n     */\n    *pkcs7_len = 0;\n\n    /*\n     * Build the HTTP request\n     * - allocate buffer: header, data, terminating characters\n     * - build the header\n     * - no data\n     * - terminate it\n     */    \n    http_data = malloc(EST_HTTP_REQ_TOTAL_LEN);\n    if (http_data == NULL) {\n        EST_LOG_ERR(\"Unable to allocate memory for http_data\");\n        return EST_ERR_MALLOC;\n    }\n\n    if (!reenroll) {\n\t/* Perform a /simpleenroll */\n        hdr_len = est_client_build_enroll_header(ctx, http_data, (int) bptr->length);\n    } else {\n\t/* Perform a /simplereenroll */\n        hdr_len = est_client_build_reenroll_header(ctx, http_data, (int) bptr->length);\n    }\n\n    if (hdr_len == 0) {\n        EST_LOG_ERR(\"Enroll HTTP header could not be built correctly\");\n        free(http_data);\n        return (EST_ERR_HTTP_CANNOT_BUILD_HEADER);\n    }\n        \n    /*\n     * terminate the HTTP header\n     */\n    snprintf(http_data + hdr_len,EST_HTTP_REQ_TOTAL_LEN-hdr_len, \"\\r\\n\");\n    hdr_len += 2;\n\n    /*\n     * Build the HTTP body containing the pkcs10 request\n     */\n    memcpy_s(http_data + hdr_len, EST_HTTP_REQ_DATA_MAX,\n             bptr->data, (rsize_t)bptr->length);\n    hdr_len += bptr->length;\n\n    /*\n     * terminate the HTTP request\n     */\n    snprintf(http_data + hdr_len, EST_HTTP_REQ_TOTAL_LEN-hdr_len,\"\\r\\n\");\n    hdr_len += 2;\n\n\n    /*\n     * Send the request to the server and wait for a response\n     */\n    ctx->last_http_status = 0;\n    write_size = SSL_write(ssl, http_data, hdr_len);\n    if (write_size < 0) {\n        EST_LOG_ERR(\"TLS write error\");\n\tossl_dump_ssl_errors();\n        rv = EST_ERR_SSL_WRITE;\n    } else {\n        EST_LOG_INFO(\"TLS wrote %d bytes, attempted %d bytes\\n\",\n                     write_size, hdr_len);\n\n        /*\n         * Try to get the response from the server\n         */\n        rv = est_io_get_response(ctx, ssl, EST_OP_SIMPLE_ENROLL,\n                                 &enroll_buf, &enroll_buf_len);\n        switch (rv) {\n        case EST_ERR_NONE:\n            if (enroll_buf_len == 0) {\n                EST_LOG_ERR(\"Enroll buf is zero bytes in length\");\n                rv = EST_ERR_ZERO_LENGTH_BUF;\n                break;\n            }\n            memcpy_s(pkcs7, EST_MAX_CLIENT_CERT_LEN, enroll_buf, enroll_buf_len);\n            *pkcs7_len = enroll_buf_len;\n            break;\n        case EST_ERR_AUTH_FAIL:\n            EST_LOG_WARN(\"HTTP auth failure\");\n            break;\n        default:\n            EST_LOG_ERR(\"EST request failed: %d (%s)\", rv, EST_ERR_NUM_TO_STR(rv));\n            break;\n        }\n        free(enroll_buf);\n    }\n    OPENSSL_cleanse(http_data, strnlen_s(http_data, EST_HTTP_REQ_TOTAL_LEN));\n    free(http_data);\n    http_data = NULL;\n    return (rv);\n}\n/*\n * This function does a sanity check on the X509\n * prior to attempting to convert the X509 to\n * a CSR for a reenroll operation.\n *\n * Returns an EST_ERROR code\n */\nstatic EST_ERROR est_client_check_x509 (X509 *cert) \n{\n    /*\n     * Make sure the cert is signed\n     */\n    if(!cert->signature) {\n\tEST_LOG_ERR(\"The certificate provided does not contain a signature.\");\n\treturn (EST_ERR_BAD_X509);\n    }\n\n    /*\n     * Make sure the signature length is not invalid \n     */\n    if (cert->signature->length <= 0) {\n\tEST_LOG_ERR(\"The certificate provided contains an invalid signature length.\");\n\treturn (EST_ERR_BAD_X509);\n    }\n    return (EST_ERR_NONE);\n}\n/*\n * This function is used to clear any ChallengePassword\n * attributes in an X509 CSR.  This is used because when\n * HTTP authentication is used during the enrollment\n * process, the PoP value will change when the client\n * sends the second HTTP request that contains the HTTP\n * authorization values. Since the CSR is reused between\n * both the initial and secondary requests, we need to\n * clear the PoP value from the CSR before submitting\n * the secondary request.\n */\nstatic void est_client_clear_csr_pop (X509_REQ *csr)\n{\n    int pos = 0;\n    X509_ATTRIBUTE *attr;\n\n    /*\n     * The challenge password (PoP) may be in the CSR \n     * more than once.  This should never happen, but\n     * we're being defensive.\n     */\n    while (pos >= 0) {\n\t/*\n\t * Look for the PoP value in the CSR \n\t */\n\tpos = X509_REQ_get_attr_by_NID(csr, NID_pkcs9_challengePassword, -1);\n\tif (pos >= 0) {\n\t    /* \n\t     * If found, delete it\n\t     */\n\t    attr = X509_REQ_delete_attr(csr, pos);\n\t    if (attr) {\n\t\t/*\n\t\t * There are no docs in OpenSSL that show how\n\t\t * to use X509_REQ_delete_attr.  Going to assume\n\t\t * we need to free the attribute ourselves.  There\n\t\t * do not appear to be any good examples on how\n\t\t * to use this API.\n\t\t */\n\t\tX509_ATTRIBUTE_free(attr);\n\t    }\n\t}\n    }\n}\n/*\n * This function does the work of converting the X509_REQ* to\n * the base64 encoded DER format as specified in the EST RFC.\n * Once converted to the proper format, this routine will\n * forward the request to the server, check the response,\n * and save the cert on the local context where it can be\n * retrieved later by the application layer.\n */\nstatic EST_ERROR est_client_enroll_req (EST_CTX *ctx, SSL *ssl, X509_REQ *req, \n\t                                int *pkcs7_len, int reenroll)\n{\n    EST_ERROR    rv = EST_ERR_NONE;\n    BIO         *p10out = NULL, *b64;\n    BUF_MEM     *bptr = NULL;\n    unsigned char *recv_buf;\n    unsigned char *new_cert_buf;\n    int          new_cert_buf_len;\n\n    /*\n     * Grab the PKCS10 PEM encoded data\n     */\n    b64 = BIO_new(BIO_f_base64());\n    if (!b64) {\n        EST_LOG_ERR(\"BIO_new failed\");\n        ossl_dump_ssl_errors();\n        return EST_ERR_MALLOC;\n    }\n    p10out = BIO_new(BIO_s_mem());\n    if (!p10out) {\n        EST_LOG_ERR(\"BIO_new failed\");\n\tossl_dump_ssl_errors();\n        return EST_ERR_MALLOC;\n    }\n    p10out = BIO_push(b64, p10out);\n\n    /*\n     * Encode using DER (ASN.1) \n     *\n     * We have to set the modified flag on the X509_REQ because\n     * OpenSSL keeps a cached copy of the DER encoded data in some\n     * cases.  Setting this flag tells OpenSSL to run the ASN\n     * encoding again rather than using the cached copy.\n     * */\n    req->req_info->enc.modified = 1; \n    i2d_X509_REQ_bio(p10out, req);\n    (void)BIO_flush(p10out);\n    BIO_get_mem_ptr(p10out, &bptr);\n\n    /*\n     * Get the buffer in which to place the entire response from the server\n     */\n    recv_buf = malloc(EST_CA_MAX);\n    if (recv_buf == NULL) {\n        EST_LOG_ERR(\"Failed to allocate buffer for server response\");\n        return EST_ERR_MALLOC;\n    }\n    new_cert_buf = recv_buf; \n    new_cert_buf_len = 0;\n\n    /*\n     * Send the PKCS10 as an HTTP request to the EST server\n     */\n    rv = est_client_send_enroll_request(ctx, ssl, bptr,\n                                        new_cert_buf, &new_cert_buf_len, \n\t\t\t\t\treenroll);\n    switch (rv) {\n\n    case EST_ERR_NONE:\n        /*\n         * Make sure that even though we got a success return code, that we\n         * actually received something\n         */\n        if (new_cert_buf_len == 0) {\n            EST_LOG_ERR(\"Buffer containing newly enrolled client certificate is zero bytes in length\");\n            rv = EST_ERR_ZERO_LENGTH_BUF;\n            break;\n        }\n\n        /*\n         * Resize the buffer holding the retrieved client certificate and link\n         * it into the ctx.  Get rid of the http hdr and any extra space on\n         * the back.\n         */\n        if (ctx->enrolled_client_cert != NULL){\n            free(ctx->enrolled_client_cert);\n        }\n        ctx->enrolled_client_cert = malloc(new_cert_buf_len+1);\n        if (ctx->enrolled_client_cert == NULL) {\n            \n            EST_LOG_ERR(\"Unable to allocate newly enrolled client certificate buffer\");\n            rv = EST_ERR_MALLOC;\n            break;\n        }\n        ctx->enrolled_client_cert[new_cert_buf_len] = '\\0';\n        memcpy_s(ctx->enrolled_client_cert, new_cert_buf_len+1, new_cert_buf,\n                 new_cert_buf_len);\n        ctx->enrolled_client_cert_len = new_cert_buf_len;\n\n        /*\n         * pass back the length of this newly enrolled cert\n         */\n        *pkcs7_len = ctx->enrolled_client_cert_len;\n        \n        EST_LOG_INFO(\"Newly Enrolled Client certificate: %s\", ctx->enrolled_client_cert);\n        EST_LOG_INFO(\"length: %d\", ctx->enrolled_client_cert_len);\n        break;\n\n    case EST_ERR_AUTH_FAIL:\n        EST_LOG_INFO(\"HTTP Authorization failed. Requested auth mode = %d\", ctx->auth_mode);\n        break;\n\n    default:\n        \n        EST_LOG_ERR(\"EST enrollment failed, error code is %d (%s)\", rv,\n                    EST_ERR_NUM_TO_STR(rv));\n        break;\n    }\n\n    if (recv_buf) {\n        free(recv_buf);\n    }\n    BIO_free_all(p10out);\n    return (rv);\n}\n/*  est_client_enroll_pkcs10() This function implements the Simple Enroll\n *  flow. It signs the CSR that was provided and then sends the CSR\n *  to the EST server and retrieves the pkcs7 response.\n *\n *  Parameters:\n *    ctx    EST context\n *    ssl    SSL context being used for this EST session\n *    csr    Pointer to X509_REQ object containing the PKCS10 CSR\n *    pkcs7_len  pointer to an integer in which the length of the recieved\n *               pkcs7 response is placed.\n *    priv_key Pointer to the private key used to sign the CSR.\n *    reenroll Set to 1 to do a reenroll instead of an enroll\n *\n *  Returns EST_ERROR  \n */\nstatic EST_ERROR est_client_enroll_pkcs10 (EST_CTX *ctx, SSL *ssl, X509_REQ *csr,\n                                           int *pkcs7_len, EVP_PKEY *priv_key,\n                                           int reenroll)\n{\n    EST_ERROR    rv = EST_ERR_NONE;\n    char        *tls_uid;\n    int          ossl_rv;\n\n    /*\n     * Make sure the PoP is removed from the CSR before we proceed\n     */\n    est_client_clear_csr_pop(csr);\n\n    /*\n     * Get the PoP value from the TLS session and embed this into\n     * the CSR if required.\n     */\n    if (ctx->csr_pop_required || ctx->client_force_pop) {\n\tEST_LOG_INFO(\"Client will include challengePassword in CSR\");\n        tls_uid = est_get_tls_uid(ssl, 1);\n\tif (tls_uid) {\n\t    ossl_rv = X509_REQ_add1_attr_by_NID(csr, NID_pkcs9_challengePassword,\n                                                MBSTRING_ASC, (unsigned char*)tls_uid, -1);\n\t    free(tls_uid);\n\t    if (!ossl_rv) {\n\t        EST_LOG_ERR(\"Unable to set X509 challengePassword attribute\");\n\t\tossl_dump_ssl_errors();\n\t\treturn (EST_ERR_X509_ATTR);\n\t    }\n        } else {\n            EST_LOG_ERR(\"Unable to obtain the TLS UID\");\n\t    return (EST_ERR_AUTH_FAIL_TLSUID);\n\t}\n    }\n\n    /*\n     * Sign the CSR\n     */\n    ossl_rv = est_client_X509_REQ_sign(csr, priv_key, ctx->signing_digest);\n    if (!ossl_rv) {\n        EST_LOG_ERR(\"Unable to sign X509 cert request\");\n        ossl_dump_ssl_errors();\n        return (EST_ERR_X509_SIGN);\n    }\n\n    rv = est_client_enroll_req(ctx, ssl, csr, pkcs7_len, reenroll);\n\n    return (rv);\n}\n/*  est_client_enroll_cn() This function implements the Simple Enroll\n    flow. It uses the private key to generate a CSR (pkcs10) request.  It\n    then sends the request to the EST server and retrieves the pkcs7\n    response.  The user of this function simply provides the CommonName\n    value to be placed in the PKCS10 CSR.  This is a simplified interface,\n    none of the other CSR attributes can be specified.\n\n    @param ctx EST context\n    @param ssl SSL context being used for this EST session\n    @param cn pointer to the common name that is to be placed in the x509\n    request\n    @param pkcs7_len pointer to an integer in which the length of the recieved\n    pkcs7 response is placed.\n    @param pkey The new client public key that is to be enrolled\n\n    @return EST_ERROR \n */\nstatic EST_ERROR est_client_enroll_cn (EST_CTX *ctx, SSL *ssl, char *cn,\n                                         int *pkcs7_len, EVP_PKEY *pkey)\n{\n    X509_REQ    *pkcs10 = NULL;\n    EST_ERROR    rv = EST_ERR_NONE;\n    char        *tls_uid;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    /*\n     * Attempt to create the PKCS10 certificate request.\n     * Get the TLS uid in case we need it during populate.\n     */\n    tls_uid = est_get_tls_uid(ssl, 1);\n    if (tls_uid) {\n        rv = est_generate_pkcs10(ctx, cn, tls_uid, pkey, &pkcs10);\n        free(tls_uid);\n    } else {\n        EST_LOG_ERR(\"Unable to obtain the TLS UID\");\n        rv = EST_ERR_AUTH_FAIL_TLSUID;\n    }\n\n    if (rv == EST_ERR_NONE) {\n        rv = est_client_enroll_req(ctx, ssl, pkcs10, pkcs7_len, 0);\n    }\n    \n    if (pkcs10) {\n        X509_REQ_free(pkcs10);\n    }\n\n    return (rv);\n}\n/* \n * The following function was taken from cURL\n *\n * The content that was incorporated were portions of\n * - lib/hostcheck.c\n * - lib/rawstr.c\n *\n * Portable, consistent toupper (remember EBCDIC). Do not use toupper() because\n * its behavior is altered by the current locale. \n */\nstatic char est_client_Curl_raw_toupper(char in)\n{\n    switch (in) {\n    case 'a':\n        return 'A';\n    case 'b':\n        return 'B';\n    case 'c':\n        return 'C';\n    case 'd':\n        return 'D';\n    case 'e':\n        return 'E';\n    case 'f':\n        return 'F';\n    case 'g':\n        return 'G';\n    case 'h':\n        return 'H';\n    case 'i':\n        return 'I';\n    case 'j':\n        return 'J';\n    case 'k':\n        return 'K';\n    case 'l':\n        return 'L';\n    case 'm':\n        return 'M';\n    case 'n':\n        return 'N';\n    case 'o':\n        return 'O';\n    case 'p':\n        return 'P';\n    case 'q':\n        return 'Q';\n    case 'r':\n        return 'R';\n    case 's':\n        return 'S';\n    case 't':\n        return 'T';\n    case 'u':\n        return 'U';\n    case 'v':\n        return 'V';\n    case 'w':\n        return 'W';\n    case 'x':\n        return 'X';\n    case 'y':\n        return 'Y';\n    case 'z':\n        return 'Z';\n    }\n    return in;\n}\n/*\n * The following function was taken from cURL\n *\n * Curl_raw_equal() is for doing \"raw\" case insensitive strings. This is meant\n * to be locale independent and only compare strings we know are safe for\n * this.  See http://daniel.haxx.se/blog/2008/10/15/strcasecmp-in-turkish/ for\n * some further explanation to why this function is necessary.\n *\n * The function is capable of comparing a-z case insensitively even for\n * non-ascii.\n */\nstatic int est_client_Curl_raw_equal(const char *first, const char *second)\n{\n    while(*first && *second) {\n\tif(est_client_Curl_raw_toupper(*first) != est_client_Curl_raw_toupper(*second)) {\n\t    /* get out of the loop as soon as they don't match */\n\t    break;\n\t}\n\tfirst++;\n\tsecond++;\n    }\n    /* we do the comparison here (possibly again), just to make sure that if the\n       loop above is skipped because one of the strings reached zero, we must not\n       return this as a successful match */\n    return (est_client_Curl_raw_toupper(*first) == est_client_Curl_raw_toupper(*second));\n}\n/*\n * The following function was taken from cURL\n *\n * Curl_raw_equal() is for doing \"raw\" case insensitive strings. This is meant\n * to be locale independent and only compare strings we know are safe for\n * this.  See http://daniel.haxx.se/blog/2008/10/15/strcasecmp-in-turkish/ for\n * some further explanation to why this function is necessary.\n *\n * The function is capable of comparing a-z case insensitively even for\n * non-ascii.\n */\nstatic int est_client_Curl_raw_nequal(const char *first, const char *second, size_t max)\n{\n    while(*first && *second && max) {\n\tif(est_client_Curl_raw_toupper(*first) != est_client_Curl_raw_toupper(*second)) {\n\t    break;\n\t}\n\tmax--;\n\tfirst++;\n\tsecond++;\n    }\n    if(0 == max) {\n\treturn 1; /* they are equal this far */\n    }\n\n    return (est_client_Curl_raw_toupper(*first) == est_client_Curl_raw_toupper(*second));\n}\n/*\n * The following function was taken from cURL\n *\n * Curl_raw_equal() is for doing \"raw\" case insensitive strings. This is meant\n * to be locale independent and only compare strings we know are safe for\n * this.  See http://daniel.haxx.se/blog/2008/10/15/strcasecmp-in-turkish/ for\n * some further explanation to why this function is necessary.\n *\n * The function is capable of comparing a-z case insensitively even for\n * non-ascii.\n */\nstatic int est_client_hostmatch(const char *hostname, const char *pattern)\n{\n    const char *pattern_label_end, *pattern_wildcard, *hostname_label_end;\n    int wildcard_enabled;\n    size_t prefixlen, suffixlen;\n    struct in_addr ignored;\n    struct sockaddr_in6 si6;\n\n    pattern_wildcard = strchr(pattern, '*');\n    if(pattern_wildcard == NULL) {\n\treturn est_client_Curl_raw_equal(pattern, hostname) ? HOST_MATCH : HOST_NOMATCH;\n    }\n    \n    /* detect IP address as hostname and fail the match if so */\n    if(inet_pton(AF_INET, hostname, &ignored) > 0)\n        return HOST_NOMATCH;\n    else if(inet_pton(AF_INET6, hostname, &si6.sin6_addr) > 0)\n        return HOST_NOMATCH;\n\n    /* We require at least 2 dots in pattern to avoid too wide wildcard\n       match. */\n    wildcard_enabled = 1;\n    pattern_label_end = strchr(pattern, '.');\n    if(pattern_label_end == NULL || strchr(pattern_label_end+1, '.') == NULL ||\n\tpattern_wildcard > pattern_label_end ||\n\test_client_Curl_raw_nequal(pattern, \"xn--\", 4)) {\n\twildcard_enabled = 0;\n    }\n    if(!wildcard_enabled) {\n\treturn est_client_Curl_raw_equal(pattern, hostname) ? HOST_MATCH : HOST_NOMATCH;\n    }\n    hostname_label_end = strchr(hostname, '.');\n    if(hostname_label_end == NULL || !est_client_Curl_raw_equal(pattern_label_end, hostname_label_end)) {\n\treturn HOST_NOMATCH;\n    }\n    /* The wildcard must match at least one character, so the left-most\n       label of the hostname is at least as large as the left-most label\n       of the pattern. */\n    if(hostname_label_end - hostname < pattern_label_end - pattern) {\n\treturn HOST_NOMATCH;\n    }\n    prefixlen = pattern_wildcard - pattern;\n    suffixlen = pattern_label_end - (pattern_wildcard+1);\n    return (est_client_Curl_raw_nequal(pattern, hostname, prefixlen) &&\n\t    est_client_Curl_raw_nequal(pattern_wildcard+1, hostname_label_end - suffixlen,\n                                       suffixlen) ?  HOST_MATCH : HOST_NOMATCH);\n}\n/*\n * The following function was taken from cURL for the\n * FQDN check on the server cert\n */\nstatic int est_client_cert_hostcheck(const char *match_pattern, const char *hostname)\n{\n    /*\n     * Sanity check input \n     */\n    if(!match_pattern || !*match_pattern || !hostname || !*hostname) { \n\treturn 0;\n    }\n\n    /*\n     * trival case\n     */\n    if(est_client_Curl_raw_equal(hostname, match_pattern)) {\n\treturn 1;\n    }\n\n    if(est_client_hostmatch(hostname,match_pattern) == HOST_MATCH) {\n\treturn 1;\n    }\n    return 0;\n}\n/* \n * This function was taken from cURL and adapted to EST.\n *\n * cURL file name is ./lib/ssluse.c, function: verifyhost()\n *\n * Quote from RFC2818 section 3.1 \"Server Identity\"\n\n   If a subjectAltName extension of type dNSName is present, that MUST\n   be used as the identity. Otherwise, the (most specific) Common Name\n   field in the Subject field of the certificate MUST be used. Although\n   the use of the Common Name is existing practice, it is deprecated and\n   Certification Authorities are encouraged to use the dNSName instead.\n\n   Matching is performed using the matching rules specified by\n   [RFC2459].  If more than one identity of a given type is present in\n   the certificate (e.g., more than one dNSName name, a match in any one\n   of the set is considered acceptable.) Names may contain the wildcard\n   character * which is considered to match any single domain name\n   component or component fragment. E.g., *.a.com matches foo.a.com but\n   not bar.foo.a.com. f*.com matches foo.com but not bar.com.\n\n   In some cases, the URI is specified as an IP address rather than a\n   hostname. In this case, the iPAddress subjectAltName must be present\n   in the certificate and must exactly match the IP in the URI.\n\n */\nstatic EST_ERROR est_client_verifyhost (char *hostname, X509 *server_cert)\n{\n    int matched = -1;     /* -1 is no alternative match yet, 1 means match and 0\n                             means mismatch */\n    size_t addrlen = 0;\n    STACK_OF(GENERAL_NAME) * altnames;\n    struct in6_addr addr_v6;\n    struct in_addr addr_v4;\n    int addr_is_v4 = 0;\n    int addr_is_v6 = 0;\n    EST_ERROR res = EST_ERR_NONE;\n    int rv;\n    errno_t safec_rc;\n    int numalts;\n    int i, j;\n    int diff;\n    const GENERAL_NAME *check; \n    const char *altptr; \n    size_t altlen; \n    unsigned char *nulstr; \n    unsigned char *peer_CN; \n    X509_NAME *name; \n    ASN1_STRING *tmp;\n\n    /*\n     * Attempt to resolve host name to v4 address \n     */\n    rv = inet_pton(AF_INET, hostname, &addr_v4);\n    if (rv) {\n\taddr_is_v4 = 1;\n        addrlen = sizeof(struct in_addr);\n    } else {\n\t/*\n\t * Try to see if hostname resolves to v6 address\n\t */\n\trv = inet_pton(AF_INET6, hostname, &addr_v6);\n\tif (rv) {\n\t    addr_is_v6 = 1;\n\t    addrlen = sizeof(struct in6_addr);\n\t}\n    }\n\n    /* get a \"list\" of alternative names */\n    altnames = X509_get_ext_d2i(server_cert, NID_subject_alt_name, NULL, NULL);\n\n    if (altnames) {\n        /* get amount of alternatives, RFC2459 claims there MUST be at least\n           one, but we don't depend on it... */\n        numalts = sk_GENERAL_NAME_num(altnames);\n        EST_LOG_INFO(\"Found %d SubjectAlternateNames\", numalts);\n\n        /* loop through all alternatives while none has matched */\n        for (i = 0; (i < numalts) && (matched != 1); i++) {\n            /* get a handle to alternative name number i */\n            check = sk_GENERAL_NAME_value(altnames, i);\n\n            /* get data and length */\n            altptr = (char*)ASN1_STRING_data(check->d.ia5);\n            altlen = (size_t)ASN1_STRING_length(check->d.ia5);\n\n            switch (check->type) {\n            case GEN_DNS: /* name/pattern comparison */\n                EST_LOG_INFO(\"Checking FQDN against SAN %s\", altptr);\n                /* The OpenSSL man page explicitly says: \"In general it cannot be\n                   assumed that the data returned by ASN1_STRING_data() is null\n                   terminated or does not contain embedded nulls.\" But also that\n                   \"The actual format of the data will depend on the actual string\n                   type itself: for example for and IA5String the data will be ASCII\"\n\n                   Gisle researched the OpenSSL sources:\n                   \"I checked the 0.9.6 and 0.9.8 sources before my patch and\n                   it always 0-terminates an IA5String.\"\n                 */\n                if ((altlen == strnlen_s(altptr, EST_MAX_SERVERNAME_LEN)) &&\n                    /* if this isn't true, there was an embedded zero in the name\n                       string and we cannot match it. */\n                    est_client_cert_hostcheck(altptr, hostname)) {\n                    matched = 1;\n                } else{\n                    matched = 0;\n                }\n                break;\n\n            case GEN_IPADD: /* IP address comparison */\n                /* compare alternative IP address if the data chunk is the same size\n                   our server IP address is */\n\n                /*\n                 * For PSB compliance, use SafeC library memcmp_s\n                 */ \n\t\t\n                 if (addr_is_v4) {\n                    safec_rc = memcmp_s(altptr, altlen, &addr_v4, altlen, &diff);\n                    if (safec_rc != EOK) {\n                    \tEST_LOG_INFO(\"memcmp_s error 0x%xO with IPv4 address\\n\", safec_rc);\n                    }  \n                 } else if (addr_is_v6) {\n                    safec_rc = memcmp_s(altptr, altlen, &addr_v6, altlen, &diff);\n                    if (safec_rc != EOK) {\n                    \tEST_LOG_INFO(\"memcmp_s error 0x%xO with IPv6 address\\n\", safec_rc);\n                    }  \n                 } else {\n                   /*\n                    * Should never get here...so force matched to be 0\n                    */\n\t           diff = -1; \n\t \t }\n\n                if ((addr_is_v4) && (altlen == addrlen) && !diff) {\n                    matched = 1;\n                } else if ((addr_is_v6) && (altlen == addrlen) && !diff) {\n                    matched = 1;\n                } else{\n                    matched = 0;\n                }\n                break;\n            }\n        }\n        GENERAL_NAMES_free(altnames);\n    }\n\n    if (matched == 1) {\n        /* an alternative name matched the server hostname */\n        EST_LOG_INFO(\"subjectAltName: %s matched\\n\", hostname);\n    } else if (matched == 0) {\n        /* an alternative name field existed, but didn't match and then\n           we MUST fail */\n        EST_LOG_INFO(\"subjectAltName does not match %s\\n\", hostname);\n        res = EST_ERR_FQDN_MISMATCH;\n    }else  {\n        /* we have to look to the last occurrence of a commonName in the\n           distinguished one to get the most significant one. */\n        i = -1;\n\n\t/* The following is done because of a bug in 0.9.6b */\n        nulstr = (unsigned char*)\"\";\n        peer_CN = nulstr;\n\n        name = X509_get_subject_name(server_cert);\n        if (name) {\n            while ((j = X509_NAME_get_index_by_NID(name, NID_commonName, i)) >= 0) {\n                i = j;\n            }\n        }\n\n        /* we have the name entry and we will now convert this to a string\n           that we can use for comparison. Doing this we support BMPstring,\n           UTF8 etc. */\n\n        if (i >= 0) {\n            tmp = X509_NAME_ENTRY_get_data(X509_NAME_get_entry(name, i));\n\n            /* In OpenSSL 0.9.7d and earlier, ASN1_STRING_to_UTF8 fails if the input\n               is already UTF-8 encoded. We check for this case and copy the raw\n               string manually to avoid the problem. This code can be made\n               conditional in the future when OpenSSL has been fixed. Work-around\n               brought by Alexis S. L. Carvalho. */\n            if (tmp) {\n                if (ASN1_STRING_type(tmp) == V_ASN1_UTF8STRING) {\n                    j = ASN1_STRING_length(tmp);\n                    if (j >= 0) {\n                        peer_CN = malloc(j + 1);\n                        if (peer_CN) {\n\t\t\t    safec_rc = memcpy_s(peer_CN, j, ASN1_STRING_data(tmp), j);\n                            if (safec_rc != EOK) {\n\t\t\t\tEST_LOG_INFO(\"memcpy_s error 0x%xO with ASN1 string\\n\", safec_rc);\n                            }\n                            peer_CN[j] = '\\0';\n                        }\n                    }\n                }else  { /* not a UTF8 name */\n                    j = ASN1_STRING_to_UTF8(&peer_CN, tmp);\n                }\n                if (peer_CN && (strnlen_s((char*)peer_CN, EST_MAX_SERVERNAME_LEN) != j)) {\n                    /* there was a terminating zero before the end of string, this\n                       cannot match and we return failure! */\n                    EST_LOG_WARN(\"SSL: illegal cert name field\");\n                    res = EST_ERR_FQDN_MISMATCH;\n                }\n            }\n        }\n\n        if (peer_CN == nulstr) {\n            peer_CN = NULL;\n        } else{\n            /* convert peer_CN from UTF8 */\n#if 0\n// UTF8 currently not supported in the first release of libest\n            CURLcode rc = Curl_convert_from_utf8(data, peer_CN, strlen(peer_CN));\n            /* Curl_convert_from_utf8 calls failf if unsuccessful */\n            if (rc) {\n                free(peer_CN);\n                return EST_ERR_FQDN_MISMATCH;\n            }\n#endif\n        }\n\n        if (res != EST_ERR_NONE) {\n            /* error already detected, pass through */\n            ;\n        } else if (!peer_CN) {\n            EST_LOG_WARN(\"SSL: unable to obtain common name from peer certificate\");\n            res = EST_ERR_FQDN_MISMATCH;\n        }else if (!est_client_cert_hostcheck((const char*)peer_CN, hostname)) {\n            EST_LOG_WARN(\"SSL: FQDN hostname mismatch in server certificate, '%s' does not match \"\n                      \"target host name '%s'\", peer_CN, hostname);\n            res = EST_ERR_FQDN_MISMATCH;\n        }else  {\n            EST_LOG_INFO(\"common name: %s (matched)\", peer_CN);\n        }\n        if (peer_CN) {\n            free(peer_CN);\n        }\n    }\n    return res;\n}\n/*\n * This routine checks the FQDN in the server certificate\n * against the configure server name used to establish\n * the TCP connection with the EST server.\n * This is required per section 3.6 in the EST spec.\n * Note, we only do the FQDN check as defined in RFC 6125.\n * We do not look for the id-kp-cmcRA extended key usage\n * extension in the server cert.  While this is more \n * restrictive by not allowing FQDN mismatches when the\n * id-kp-cmcRA is present, we currently have no way to\n * determine when we're using the explicit trust anchor to\n * allow this additional flexibility.\n */\nstatic EST_ERROR est_client_check_fqdn (EST_CTX *ctx, SSL *ssl)\n{\n    X509 *cert;\n    EST_ERROR er;\n\n    cert = SSL_get_peer_certificate(ssl);\n\n    if (cert) {\n\ter = est_client_verifyhost(ctx->est_server, cert);\n\tX509_free(cert);\n\treturn (er);\n    } else if (!cert && ctx->enable_srp) {\n\tEST_LOG_INFO(\"No peer certificate, skipping FQDN check since SRP is enabled.\");\n\treturn EST_ERR_NONE;\n    } else {\n\tEST_LOG_WARN(\"Unable to perform FQDN check, no peer certificate.\");\n\treturn EST_ERR_FQDN_MISMATCH;\n    }\n}\n/*\n * This function will open a TCP socket and establish a TLS session\n * with the EST server.  This should be called after est_client_init().\n *\n * Parameters:\n *\tctx:\t    Pointer to EST context for client session\n *      ssl:        pointer to an SSL context structure to return the\n *                  SSL context created,\n * Reurns:\n *\tEST_ERR_NONE if success\n */\nEST_ERROR est_client_connect (EST_CTX *ctx, SSL **ssl)\n{\n    BIO             *tcp;\n    SSL_CTX         *s_ctx;\n    EST_ERROR       rv = EST_ERR_NONE;\n#ifndef WIN32\n    int             sock;\n#else\n    SOCKET          sock = INVALID_SOCKET;\n#endif\n    int             rc; \n    int             oval = 1;\n    int             ssl_connect_ret = -1;\n    tcw_err_t       tcw_err;\n    tcw_opts_t      tcw_opts = { 0 };\n    \n    if (!ctx) {\n        return EST_ERR_NO_CTX;\n    }\n\n    s_ctx = ctx->ssl_ctx;\n\n    /*\n     * Establish the connection through a proxy (if applicable)\n     */\n    if (ctx->use_proxy) {\n\n        tcw_opts.proxy_proto = ctx->proxy_proto;\n        \n        tcw_opts.proxy_host = ctx->proxy_server;\n        tcw_opts.proxy_port = ctx->proxy_port;\n        \n        if (ctx->proxy_username[0] && ctx->proxy_password[0] &&\n                ctx->proxy_auth != EST_CLIENT_PROXY_AUTH_NONE) {\n            tcw_opts.proxy_username = ctx->proxy_username;\n            tcw_opts.proxy_password = ctx->proxy_password;\n            \n            tcw_opts.proxy_auth = 0;  /* initialize */\n            if (ctx->proxy_auth & EST_CLIENT_PROXY_AUTH_BASIC) {\n                tcw_opts.proxy_auth |= EST_CLIENT_PROXY_AUTH_BASIC;\n            }\n            if (ctx->proxy_auth & EST_CLIENT_PROXY_AUTH_NTLM) {\n                tcw_opts.proxy_auth |= EST_CLIENT_PROXY_AUTH_NTLM;\n            }\n            \n        }\n    } else {\n        tcw_opts.proxy_proto = EST_CLIENT_PROXY_NONE;\n    }\n\n    tcw_err = tcw_connect(&ctx->tcw_sock, &tcw_opts,\n                          ctx->est_server, ctx->est_port_num, &sock);\n    if (tcw_err == TCW_ERR_RESOLV) {\n        EST_LOG_ERR(\"Unable to lookup hostname %s.\", ctx->est_server);\n        return (EST_ERR_IP_GETADDR);\n    }\n    if (tcw_err != TCW_OK) {\n        EST_LOG_ERR(\"Unable to connect to EST server at %s\", ctx->est_server);\n        return (EST_ERR_IP_CONNECT);\n    }\n\n    /*\n     * Enable TCP keep-alive\n     */\n    rc = setsockopt(sock, SOL_SOCKET,SO_KEEPALIVE, (char *)&oval, sizeof(oval));\n    if (rc < 0) {\n        tcw_close(&ctx->tcw_sock);\n        sock = SOCK_INVALID;\n        EST_LOG_ERR(\"Unable to connect to EST server at address %s\", ctx->est_server);\n        return (EST_ERR_IP_CONNECT);\n    }\n    /*\n     * Pass the socket to the BIO interface, which OpenSSL uses\n     * to create the TLS session.\n     */\n    tcp = BIO_new_socket(sock, BIO_NOCLOSE);\n    if (tcp == NULL) {\n        EST_LOG_ERR(\"Error creating IP socket\");\n        tcw_close(&ctx->tcw_sock);\n        sock = SOCK_INVALID;        \n        ossl_dump_ssl_errors();\n        return (EST_ERR_IP_CONNECT);\n    }        \n    \n    if (!(*ssl = SSL_new(s_ctx))) {\n        EST_LOG_ERR(\"Error creating TLS context\");\n        ossl_dump_ssl_errors();\n        BIO_free_all(tcp);    \n        tcw_close(&ctx->tcw_sock);\n        sock = SOCK_INVALID;\n        return (EST_ERR_SSL_NEW);\n    }\n\n    /*\n     * Need to set the EST ctx into the exdata of the SSL session context so\n     * that it can be retrieved on a per session basis.\n     */\n    SSL_set_ex_data(*ssl, e_ctx_ssl_exdata_index, ctx);\n\n    /*\n     * Set the EST server name in the SSL context so that it'll be sent in the\n     * in the server name extension in the client hello.\n     */\n    SSL_set_tlsext_host_name(*ssl, ctx->est_server);\n\n    SSL_set_bio(*ssl, tcp, tcp);\n    if (ctx->sess) {\n\tSSL_set_session(*ssl, ctx->sess);\n    }\n    if ((ssl_connect_ret = SSL_connect(*ssl)) <= 0) {\n        EST_LOG_ERR(\"Error connecting TLS context. %d\", SSL_get_error(*ssl, ssl_connect_ret));\n        ossl_dump_ssl_errors();\n        tcw_close(&ctx->tcw_sock);\n        sock = SOCK_INVALID;\n        rv = EST_ERR_SSL_CONNECT;\n    } else {\n        ctx->tcw_sock_connected = 1;\n    }\n\n    /*\n     * Now that we've established a TLS session with the EST server,\n     * we need to verify that the FQDN in the server cert matches\n     * the server name we used to establish the connection.\n     * This is from section 3.6 in the EST spec.\n     */\n    if ((EST_ERR_NONE == rv) && est_client_check_fqdn(ctx, *ssl)) {\n\t/*\n\t * The host name did not match, shut down the tunnel and bail\n\t */\n\test_client_disconnect(ctx, ssl);\n        EST_LOG_WARN(\"EST server name did not match FQDN in server certificate.\");\n        rv = EST_ERR_FQDN_MISMATCH;\n    }\n\n    return rv;\n}\n/*\n * This function will close the TLS session and the underlying socket.\n *\n * Parameters:\n *\tssl:\t    Pointer to SSL context that has been set up for this connection\n *                  to the EST server.\n */\nvoid est_client_disconnect (EST_CTX *ctx, SSL **ssl)\n{\n    SSL_SESSION *new_sess;\n    \n    if (!*ssl) {\n        return;\n    }\n\n    /*\n     * if first disconnect, get the session id to cache it away to use for\n     * session resumption.\n     */\n    if (!ctx->sess) {\n\tctx->sess = SSL_get1_session(*ssl);\n    } else {\n        /*\n         * if not the first time to disconnect, see if the session id changed.\n         * If it did, officially re-obtain it with a get1 call and cache it away\n         */\n        new_sess = SSL_get0_session(*ssl);\n        if (new_sess != ctx->sess) {\n            ctx->sess = SSL_get1_session(*ssl);\n        }\n    }\n    \n    SSL_shutdown(*ssl);\n    SSL_free(*ssl);\n    *ssl = NULL;\n\n    if (ctx->tcw_sock_connected) {\n        tcw_close(&ctx->tcw_sock);\n        ctx->tcw_sock_connected = 0;\n    }\n}\n/*\n * This function does the work for the CACerts request flow.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\tssl:\t    SSL context\n *      ca_certs_len: pointer to the unsigned int that will hold the length of the\n *                    returned CA certs.\n */\nstatic int est_client_send_cacerts_request (EST_CTX *ctx, SSL *ssl,\n                                            int *ca_certs_len)\n{\n    char *http_data;\n    int  hdr_len;\n    int  write_size;\n    int  rv;\n    unsigned char *ca_certs_buf = NULL;\n    int  ca_certs_buf_len = 0;\n\n    /*\n     * Build the HTTP request\n     * - allocate buffer: header, no data, terminating characters\n     * - build the header\n     * - no data\n     * - terminate it\n     */\n    http_data = malloc(EST_HTTP_REQ_TOTAL_LEN);\n    if (http_data == NULL) {\n        EST_LOG_ERR(\"Unable to allocate memory for http_data\");\n        return EST_ERR_MALLOC;\n    }\n    \n    hdr_len = est_client_build_cacerts_header(ctx, http_data);\n    /*\n     * terminate the HTTP header\n     */\n    snprintf(http_data + hdr_len, EST_HTTP_REQ_TOTAL_LEN-hdr_len,\"\\r\\n\");\n    hdr_len += 2;\n\n    /*\n     * no data is being sent so go ahead and terminate the HTTP request\n     */\n    snprintf(http_data + hdr_len,EST_HTTP_REQ_TOTAL_LEN-hdr_len, \"\\r\\n\");\n    hdr_len += 2;\n    \n    /*\n     * Send the request to the server and wait for a response\n     */\n    ctx->last_http_status = 0;\n    write_size = SSL_write(ssl, http_data, hdr_len);\n    if (write_size < 0) {\n        EST_LOG_ERR(\"TLS write error\");\n\tossl_dump_ssl_errors();\n        rv = EST_ERR_SSL_WRITE;\n    } else {\n        EST_LOG_INFO(\"TLS wrote %d bytes, attempted %d bytes\\n\",\n                     write_size, hdr_len);\n\n        /*\n         * Try to get the response from the server\n         */\n        rv = est_io_get_response(ctx, ssl, EST_OP_CACERTS,\n                                 &ca_certs_buf, &ca_certs_buf_len);\n\n        switch (rv) {\n        case EST_ERR_NONE:\n            \n            /*\n             * Make sure that even though we got a success return code, that we\n             * actually received something\n             */\n            if (ca_certs_buf_len == 0) {\n                EST_LOG_ERR(\"Retrieved CA Cert buf is zero bytes in length\");\n                rv = EST_ERR_ZERO_LENGTH_BUF;\n                break;\n            }\n            if (ca_certs_buf_len+1 > EST_CA_MAX) {\n                EST_LOG_ERR(\"Retrieved CA Cert buf is larger than maximum allowed\");\n                rv = EST_ERR_BUF_EXCEEDS_MAX_LEN;\n                break;\n            }\n            \n            /*\n             * Resize the buffer holding the retrieved CA cert and link it\n             * into the ctx.  Get rid of the http hdr and any extra space on\n             * the back.\n             */\n            if (ctx->retrieved_ca_certs != NULL){\n                free(ctx->retrieved_ca_certs);\n            }\n            ctx->retrieved_ca_certs = malloc(ca_certs_buf_len+1);\n            if (ctx->retrieved_ca_certs == NULL) {\n                \n                EST_LOG_ERR(\"Unable to allocate CA certs buffer\");\n                rv = EST_ERR_MALLOC;\n                break;\n            }\n            \n            ctx->retrieved_ca_certs[ca_certs_buf_len] = '\\0';\n            memcpy_s(ctx->retrieved_ca_certs, ca_certs_buf_len+1, ca_certs_buf,\n                   ca_certs_buf_len);\n            ctx->retrieved_ca_certs_len = ca_certs_buf_len;\n\n            /*\n             * Verify the returned CA cert chain\n             */\n            rv = verify_cacert_resp(ctx, ctx->retrieved_ca_certs,\n                                    &ctx->retrieved_ca_certs_len);\n            if (rv != EST_ERR_NONE) {\n                EST_LOG_ERR(\"Returned CACerts chain was invalid\");\n\n                free(ctx->retrieved_ca_certs);\n                ctx->retrieved_ca_certs = NULL;\n                ctx->retrieved_ca_certs_len = 0;\n                *ca_certs_len = ctx->retrieved_ca_certs_len;\n                break;\n            }\n            \n            /*\n             * pass back the length of the retrieved CA cert buffer\n             */\n            *ca_certs_len = ctx->retrieved_ca_certs_len;\n            \n            EST_LOG_INFO(\"CACerts buf: %s\", ctx->retrieved_ca_certs);\n            EST_LOG_INFO(\"CACerts length: %d\", ctx->retrieved_ca_certs_len);\n            break;\n        case EST_ERR_AUTH_FAIL:\n            EST_LOG_ERR(\"HTTP auth failure\");\n            break;\n        case EST_ERR_CA_ENROLL_RETRY:\n            EST_LOG_INFO(\"HTTP request failed with a RETRY AFTER resp\");\n            break;\n        default:\n            EST_LOG_ERR(\"EST request failed: %d (%s)\", rv, EST_ERR_NUM_TO_STR(rv));\n            break;\n        }\n    }\n    \n    if (http_data) {\n        free(http_data);\n    }\n    if (ca_certs_buf) {\n        free(ca_certs_buf);\n    }\n    \n    return (rv);\n}\n/*\n * This function does the work for the CACerts request flow.\n *\n * Parameters:\n *\tctx:\t    EST context\n *\tssl:\t    SSL context\n *      ca_certs_len: pointer to the unsigned int that will hold the length of the\n *                    returned CA certs.\n */\nEST_ERROR est_client_set_uid_pw (EST_CTX *ctx, const char *uid, const char *pwd) \n{\n    /*\n     * If there's a userid, there must be a password, and vice versa.\n     * The userid can still be an empty string ( \"\" ), but it cannot\n     * be NULL if there's a password. (3.2.3).\n     */\n    if (uid != NULL && pwd == NULL) {\n        EST_LOG_ERR(\"User ID provided with no password\");\n        return EST_ERR_INVALID_PARAMETERS;\n    }        \n    if (uid == NULL && pwd != NULL) {\n        EST_LOG_ERR(\"Password provided with no user ID\");\n        return EST_ERR_INVALID_PARAMETERS;\n    }\n\n    /*\n     * if uid/pwd set, then we're doing basic/digest authentication\n     */\n    if (uid != NULL) {\n        if (EOK != strncpy_s(ctx->userid, MAX_UIDPWD, uid, MAX_UIDPWD)) {\n            EST_LOG_ERR(\"Invalid User ID provided\");\n            return EST_ERR_INVALID_PARAMETERS;   \n        }\n        if (EOK != strncpy_s(ctx->password, MAX_UIDPWD, pwd, MAX_UIDPWD)) {\n            EST_LOG_ERR(\"Invalid Password provided\");\n            return EST_ERR_INVALID_PARAMETERS;\n        }\n    }\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_enroll_csr() performs the simple enroll request with the EST\n     server using a PKCS10 CSR provided by the application layer.\n \n    @param ctx Pointer to an EST context\n    @param csr Pointer to the PKCS10 CSR data, which is defined as an OpenSSL\n    X509_REQ.\n    @param pkcs7_len Pointer to an integer to hold the length of the PKCS7\n    buffer.\n    @param priv_key Pointer to the private key that will be used to sign the CSR,\n    or NULL\n \n    @return EST_ERROR\n\n    est_client_enroll_csr() connects to the EST server, establishes a SSL/TLS\n    connection to the EST server that was configured with the previous call to\n    est_client_set_server(), and sends the simple enroll request.  The application\n    layer must provide the PKCS10 CSR that will be enrolled.\n    If the priv_key argument given is not NULL, then the CSR should not\n    need to be signed by the private key. However, the CSR must contain everything \n    else that is required, including the public key. If the private key is provided\n    with an already signed CSR, then the EST library will re-sign the CSR. \n    \n    The enroll response is stored in the EST context and the length \n    is passed back to the application through the pkcs7_len paramter of this \n    function.  The application can then allocate a correctly sized buffer and \n    call est_client_copy_enrolled_cert() to retrieve the new client certificate \n    from the context.\n\n    Unless the CSR is not already signed, which is indicated by a NULL priv_key,\n    the application must provide a pointer to the private key used to sign the CSR.\n    This is required by the EST library in the event that the EST server has\n    requested the proof-of-possession value be included in the CSR.  The EST library\n    will automatically include the proof-of-posession value and sign the CSR\n    again.\n\n    Be aware that the X509_REQ data passed to this function must be valid.  Passing\n    corrupted CSR data may result in a system crash.  libEST utilizes the OpenSSL\n    ASN decoding logic to read the X509_REQ data.  OpenSSL does not perform\n    safety checks on the X509_REQ data when parsing.  If your application is\n    reading externally generated PEM or DER encoded CSR data, then please use\n    the est_read_x509_request() helper function to convert the PEM/DER CSR into a\n    valid X509_REQ pointer.\n */\nEST_ERROR est_client_enroll_csr (EST_CTX *ctx, X509_REQ *csr, int *pkcs7_len, EVP_PKEY *priv_key)\n{\n    EST_ERROR rv;\n    SSL *ssl = NULL;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!csr) {\n        return (EST_ERR_NO_CSR);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    /*\n     * Establish TLS session with the EST server\n     */\n    rv = est_client_connect(ctx, &ssl);\n    if (rv != EST_ERR_NONE) {\n        goto err;\n    }\n\n    if (priv_key) {\n      rv = est_client_enroll_pkcs10(ctx, ssl, csr, pkcs7_len, priv_key, 0);\n    } else {\n        rv = est_client_enroll_req(ctx, ssl, csr, pkcs7_len, 0);\n    }\n    est_client_disconnect(ctx, &ssl);\n    if (rv == EST_ERR_AUTH_FAIL &&\n        (ctx->auth_mode == AUTH_DIGEST ||\n         ctx->auth_mode == AUTH_BASIC  ||\n         ctx->auth_mode == AUTH_TOKEN)) {\n\n        /*\n         * HTTPS digest mode requires the use of MD5.  Make sure we're not\n         * in FIPS mode and can use MD5\n         */\n        if (ctx->auth_mode == AUTH_DIGEST && (FIPS_mode())){\n\t    EST_LOG_ERR(\"HTTP digest auth not allowed while in FIPS mode\");\n\t    rv = EST_ERR_BAD_MODE;\n            goto err;\n        }\n        \n        /* Try one more time if we're doing Digest auth */\n        EST_LOG_INFO(\"HTTP Auth failed, trying again with digest/basic parameters\");\n        rv = est_client_connect(ctx, &ssl);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Connection failed on second attempt with basic/digest parameters\");\n            goto err;\n        }\n\tif (priv_key) {\n\t  rv = est_client_enroll_pkcs10(ctx, ssl, csr, pkcs7_len, priv_key, 0);\n\t} else {\n\t  rv = est_client_enroll_req(ctx, ssl, csr, pkcs7_len, 0);\n\t}\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Enroll failed on second attempt during basic/digest authentication\");\n        }\n        est_client_disconnect(ctx, &ssl);\n    }\n\nerr:    \n    if (ssl) {\n        SSL_shutdown(ssl);\n        SSL_free(ssl);\n    }\n\n    return (rv);\n\n}\n/*! @brief est_client_enroll() performs the simple enroll request with the EST\n     server\n \n    @param ctx Pointer to an EST context\n    @param cn Pointer to the Common Name value to be used in the enrollment\n    request.\n    @param pkcs7_len Pointer to an integer to hold the length of the PKCS7\n    buffer.\n    @param new_public_key Pointer an EVP_PKEY structure that holds the\n    client's key pair to be used in the simple enroll request .  The public\n    key is included in the Certificate Signing Request (CSR) sent to the CA\n    Server, and the private key is used to sign the request.\n \n    @return EST_ERROR\n\n    est_client_enroll() connects to the EST server, builds a simple enroll\n    request using the Common Name passed in cn, establishes a SSL/TLS\n    connection to the EST server that was configured with the previous call to\n    est_client_set_server(), and sends the simple enroll request.  The\n    response is stored in the EST context and the length is passed back to the\n    application through the pkcs7_len parameter of this function.  The\n    application can then allocate a correctly sized buffer and call\n    est_client_copy_enrolled_cert() to retrieve the new client certificate\n    from the context.\n */\nEST_ERROR est_client_enroll (EST_CTX *ctx, char *cn, int *pkcs7_len,\n                             EVP_PKEY *new_public_key)\n{\n    EST_ERROR rv;\n    SSL *ssl = NULL;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!new_public_key) {\n        return (EST_ERR_NO_KEY);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    rv = est_client_connect(ctx, &ssl);\n    if (rv != EST_ERR_NONE) {\n        goto err;\n    }\n    rv = est_client_enroll_cn(ctx, ssl, cn, pkcs7_len, new_public_key);\n    est_client_disconnect(ctx, &ssl);\n    if (rv == EST_ERR_AUTH_FAIL &&\n        (ctx->auth_mode == AUTH_DIGEST ||\n         ctx->auth_mode == AUTH_BASIC  ||\n         ctx->auth_mode == AUTH_TOKEN)) {\n\n        /*\n         * HTTPS digest mode requires the use of MD5.  Make sure we're not\n         * in FIPS mode and can use MD5\n         */\n        if (ctx->auth_mode == AUTH_DIGEST && (FIPS_mode())){\n\t    EST_LOG_ERR(\"HTTP digest auth not allowed while in FIPS mode\");\n\t    rv = EST_ERR_BAD_MODE;\n            goto err;\n        }\n        \n        /* Try one more time if we're doing Digest auth */\n        EST_LOG_INFO(\"HTTP Auth failed, trying again with basic/digest/token parameters\");\n        rv = est_client_connect(ctx, &ssl);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Connection failed on second attempt with basic/digest/token parameters\");\n            goto err;\n        }\n        rv = est_client_enroll_cn(ctx, ssl, cn, pkcs7_len, new_public_key);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Enroll failed on second attempt during basic/digest authentication\");\n\n            /*\n             * If we're attempting token mode for the second time, and\n             * the server responded with error attributes, log them now\n             */\n            if (ctx->token_error[0] != '\\0' || ctx->token_error_desc[0] != '\\0') {\n                EST_LOG_ERR(\"Token Auth mode failed, server provided error information: \\n\"\n                            \"   Error = %s\\n Error description: %s\",\n                            ctx->token_error, ctx->token_error_desc);\n                ctx->token_error[0] = '\\0';\n                ctx->token_error_desc[0] = '\\0';\n            }            \n        }\n        \n        est_client_disconnect(ctx, &ssl);\n    }\n\n    ctx->auth_mode = AUTH_NONE;\n\n  err:    \n    if (ssl) {\n        SSL_shutdown(ssl);\n        SSL_free(ssl);\n    }\n\n    return (rv);\n}\n/*! @brief est_client_provision_cert() performs the full sequence of\n    EST operations to enroll a new certificate using a trusted message flow.\n \n    @param ctx Pointer to an EST context\n    @param cn Pointer to the Common Name value to be used in the enrollment\n    request.\n    @param pkcs7_len Pointer to an integer to hold the length of the PKCS7\n    certificate returned from the RA or CA.\n    @param ca_cert_len Pointer to an integer to hold the length of the buffer \n    that will hold the new trusted CA certificates.\n    @param new_public_key Pointer an EVP_PKEY structure that holds the\n    client's key pair to be used in the simple enroll request .  The public\n    key is included in the Certificate Signing Request (CSR) sent to the CA\n    Server, and the private key is used to sign the request.\n \n    @return EST_ERROR\n\n    est_client_provision_cert() connects to the EST server, retrieves the\n    latest trusted CA certifictes from the server, retrieves the CSR attributes\n    from the server, and sends the simple enroll request to the server to\n    provision a new certificate from the RA or CA.  This is a convenience \n    function that is equivalent to invoking the following three functions\n    in order:\n\n    est_client_get_cacerts()\n    est_client_get_csrattrs()\n    est_client_enroll() \n\n    This function takes a Common Name (CN) as the only entity identifier\n    that will be used in the CSR.  If additional X509 attributes\n    or extensions are required because the EST server is enforcing the\n    presence of all the CSR attributes, then this function should not be used\n    to provision a certificate.  The est_client_enroll_csr() function should\n    be used when additional X509 attributes are to be included in the\n    enroll request. \n\n    The provisioning response is stored in the EST context and the length is passed \n    back to the application through the pkcs7_len parameter of this function.  The\n    application can then allocate a correctly sized buffer and call\n    est_client_copy_enrolled_cert() to retrieve the new client certificate\n    from the context.\n\n    The provisioning response also includes the latest copy of the trusted\n    CA certificates from the EST server.  These should be persisted locally\n    by the application for future use.  The ca_cert_len argument will contain the \n    length of the certicates, which can then be retrieved by invoking \n    est_client_copy_cacerts().\n */\nEST_ERROR est_client_provision_cert (EST_CTX *ctx, char *cn, \n\t                             int *pkcs7_len,\n\t\t\t\t     int *ca_cert_len,\n                                     EVP_PKEY *new_public_key)\n{\n    EST_ERROR rv;\n    unsigned char *new_ta_p7;\n    unsigned char *new_ta_pem;\n    unsigned char *attr_data = NULL;\n    int attr_len;\n    int new_ta_len;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    /*\n     * Make sure we have non-NULL pointers for the lengths\n     */\n    if (!pkcs7_len || !ca_cert_len) {\n\treturn (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    if (!new_public_key) {\n        return (EST_ERR_NO_KEY);\n    }\n\n    /*\n     * First, get the latest trust anchor certs from the server.\n     */\n    rv = est_client_get_cacerts(ctx, ca_cert_len);\n    if (rv != EST_ERR_NONE) {\n\treturn rv;\n    }\n    new_ta_p7 = malloc(*ca_cert_len);\n    if (new_ta_p7 == NULL) {\n        EST_LOG_ERR(\"Unable to allocate CA certs buffer\");\n        rv = EST_ERR_MALLOC;\n        return rv;\n    }\n    rv = est_client_copy_cacerts(ctx, new_ta_p7);\n    if (rv != EST_ERR_NONE) {\n\tfree(new_ta_p7);\n\treturn (rv);\n    }\n\n    /*\n     * The certs are base64 DER encoded.  We need to convert\n     * them to PEM.\n     */\n    new_ta_len = est_convert_p7b64_to_pem (new_ta_p7, *ca_cert_len, &new_ta_pem);\n    free(new_ta_p7);\n    if (new_ta_len <= 0) {\n\treturn (EST_ERR_PEM_READ);\n    }\n\n    /*\n     * We now have the new trust anchor and it's PEM encoded.\n     * Let's load it into the current EST context.  All\n     * future EST operations will then be using this new\n     * trust anchor.\n     */\n    if (ctx->trusted_certs_store != NULL) {\n        X509_STORE_free(ctx->trusted_certs_store);\n    }\n    rv = est_load_trusted_certs(ctx, new_ta_pem, new_ta_len);\n    free(new_ta_pem);\n    if (rv != EST_ERR_NONE) {\n        return rv;\n    }\n    \n    /*\n     * Since we've reset the trust store, mark the client\n     * context as initialized.\n     */\n    ctx->est_client_initialized = 1;\n\n    /*\n     * Next we need to get the CSR attributes, which allows libEST\n     * to know if the challengePassword needs to be included in the\n     * CSR.\n     */\n    rv = est_client_get_csrattrs(ctx, &attr_data, &attr_len);\n    if (rv != EST_ERR_NONE) {\n\tEST_LOG_ERR(\"Unable to get CSR attributes while provisioning a new certificate\");\n\treturn (rv);\n    }\n\n    /*\n     * Finally, we can attempt to enroll a new certificate using the\n     * Common Name provided by the application.\n     */\n    rv = est_client_enroll(ctx, cn, pkcs7_len, new_public_key);\n\n    return (rv);\n}\n/*! @brief est_client_reenroll() performs a re-enroll request with the EST\n     server using an existing X509 certificate.\n \n    @param ctx Pointer to an EST context\n    @param cert Pointer to the X509 certificate, which is defined as an OpenSSL\n    X509.\n    @param pkcs7_len Pointer to an integer to hold the length of the PKCS7\n    buffer.\n    @param priv_key Pointer to the private key that will be used to sign the CSR.\n \n    @return EST_ERROR\n\n    est_client_reenroll() connects to the EST server, establishes a SSL/TLS\n    connection to the EST server that was configured with the previous call to\n    est_client_set_server(), and sends the re-enroll request.  The application\n    layer must provide the X509 certificate that will be enrolled.  This certificate\n    should have previously been enrolled with the CA.  The application also\n    needs to provide the private key associated with the public key in the\n    X509 certificate.  This private key is required to sign the CSR that is\n    generated from the X509 certificate. \n    \n    The enroll response is stored in the EST context and the length \n    is passed back to the application through the pkcs7_len paramter of this \n    function.  The application can then allocate a correctly sized buffer and \n    call est_client_copy_enrolled_cert() to retrieve the new client certificate \n    from the context.\n\n    The application must provide a pointer to the private key used to sign the CSR.\n    This is required by the EST library in the event that the EST server has\n    requested the proof-of-possession value be included in the CSR.  The EST library\n    will automatically include the proof-of-posession value and sign the CSR\n    again.\n\n    Be aware that only the public key and subject name from the X509 certificate\n    are included in the re-enroll request sent to the EST server.  The CA is\n    responsible for re-applying any X509 extensions that are to be issued with\n    the renewed certificate.\n */\nEST_ERROR est_client_reenroll (EST_CTX *ctx, X509 *cert, int *pkcs7_len, EVP_PKEY *priv_key)\n{\n    X509_REQ *req;\n    EST_ERROR rv;\n    SSL *ssl = NULL;\n    int ossl_rv;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!cert) {\n        return (EST_ERR_NO_CERT);\n    }\n\n    if (!priv_key) {\n        return (EST_ERR_NO_KEY);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return (EST_ERR_CLIENT_NOT_INITIALIZED);\n    }\n\n    /*\n     * Check the X509 given to us\n     */\n    rv = est_client_check_x509(cert);\n    if (rv != EST_ERR_NONE) {\n\treturn (rv);\n    }\n\n    /*\n     * Check that the private key matches the public key\n     * in the cert.\n     */\n    if (X509_check_private_key(cert, priv_key) <= 0) {\n        return (EST_ERR_CLIENT_INVALID_KEY);\n    }\n\n    /*\n     * Convert the existing certificate to a CSR\n     * This will copy the subject name from the cert into\n     * a new CSR.  We pass in NULL for the private key parameter\n     * below because we will sign this CSR ourselves later.\n     */\n    req = X509_to_X509_REQ(cert, NULL, ctx->signing_digest);\n    if (!req) {\n\tEST_LOG_ERR(\"X509 to CSR conversion failed.\");\n        ossl_dump_ssl_errors();\n        return (EST_ERR_NO_CSR);\n    }\n\n    /*\n     * Copy the X509 extensions from the old certificate\n     * to the CSR.  The CA may or may not retain these, as\n     * this behavior depends on policy.  When using the \n     * OpenSSL test CA, set the copy_extensions setting \n     * in the config file to copyall to retain the\n     * extensions in the CSR when issuing a new cert.\n     */\n    if (cert->cert_info && cert->cert_info->extensions) {\n\tossl_rv = X509_REQ_add_extensions(req, cert->cert_info->extensions);\n\tif (!ossl_rv) {\n\t    EST_LOG_WARN(\"Failed to copy X509 extensions to the CSR. Your new certificate may not contain the extensions present in the old certificate.\");\n\t}\n    }\n\n    /*\n     * Establish TLS session with the EST server\n     */\n    rv = est_client_connect(ctx, &ssl);\n    if (rv != EST_ERR_NONE) {\n        goto err;\n    }\n\n    /*\n     * Send the re-enroll request\n     */\n    rv = est_client_enroll_pkcs10(ctx, ssl, req, pkcs7_len, priv_key, 1);\n    est_client_disconnect(ctx, &ssl);\n    if (rv == EST_ERR_AUTH_FAIL &&\n        (ctx->auth_mode == AUTH_DIGEST ||\n         ctx->auth_mode == AUTH_BASIC  ||\n         ctx->auth_mode == AUTH_TOKEN)) {\n\n        /*\n         * HTTPS digest mode requires the use of MD5.  Make sure we're not\n         * in FIPS mode and can use MD5\n         */\n        if (ctx->auth_mode == AUTH_DIGEST && (FIPS_mode())){\n\t    EST_LOG_ERR(\"HTTP digest auth not allowed while in FIPS mode\");\n\t    rv = EST_ERR_BAD_MODE;\n            goto err;\n        }\n        \n        /* Try one more time if we're doing Digest auth */\n        EST_LOG_INFO(\"HTTP Auth failed, trying again with digest/basic parameters\");\n        rv = est_client_connect(ctx, &ssl);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Connection failed on second attempt with basic/digest parameters\");\n            goto err;\n        }\n        rv = est_client_enroll_pkcs10(ctx, ssl, req, pkcs7_len, priv_key, 1);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Reenroll failed on second attempt during basic/digest authentication\");\n            \n            /*\n             * If we're attempting token mode for the second time, and\n             * the server responded with error attributes, log them now\n             */\n            if (ctx->token_error[0] != '\\0' || ctx->token_error_desc[0] != '\\0') {\n                EST_LOG_ERR(\"Token Auth mode failed, server provided error information: \\n\"\n                            \"   Error = %s\\n Error description: %s\",\n                            ctx->token_error, ctx->token_error_desc);\n                ctx->token_error[0] = '\\0';\n                ctx->token_error_desc[0] = '\\0';\n            }            \n            \n        }\n        est_client_disconnect(ctx, &ssl);\n    }\n\nerr:    \n    if (ssl) {\n        SSL_shutdown(ssl);\n        SSL_free(ssl);\n    }\n    X509_REQ_free(req);\n\n    return (rv);\n\n    \n}\n/*! @brief est_client_copy_enrolled_cert() passes back the client certificate\n    that was previously obtained from the EST server by the call to\n    est_client_enroll().\n \n    @param ctx Pointer to an EST context\n    @param cn Pointer to the Common Name value to be used in the enrollment\n    request.\n    @param pkcs7 Pointer to a pointer that will point to the buffer that\n    contains the newly enrolled client certificate.\n \n    @return EST_ERROR\n\n    est_client_copy_enrolled_cert() copies the previously obtained client\n    certificate from the EST context to the application's buffer.  Once this\n    client certificate is copied out of the context it is removed from the\n    context.\n */\nEST_ERROR est_client_copy_enrolled_cert (EST_CTX *ctx, unsigned char *pkcs7)\n{\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    if (pkcs7 == NULL){\n        EST_LOG_ERR(\"EST Client: Simple Enroll, invalid parameter\");\n        return EST_ERR_INVALID_PARAMETERS;\n    }\n         \n    if (ctx->enrolled_client_cert == NULL){\n        EST_LOG_ERR(\"No client certificate to copy\");\n        return(EST_ERR_NO_CERTIFICATE);\n    }\n\n    memzero_s(pkcs7, ctx->enrolled_client_cert_len);\n    memcpy_s(pkcs7, ctx->enrolled_client_cert_len, ctx->enrolled_client_cert,\n             ctx->enrolled_client_cert_len);\n    \n    /*\n     * Now that the copy in the context has been handed over,\n     * free it up\n     */\n    free(ctx->enrolled_client_cert);\n    ctx->enrolled_client_cert = NULL;\n    ctx->enrolled_client_cert_len = 0;\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_get_cacerts() performs a CAcerts GET request to the EST server\n \n    @param ctx Pointer to an EST context\n    @param ca_certs_len Pointer to an integer to hold the length of the CA certs\n    buffer\n \n    @return EST_ERROR\n\n    est_client_get_cacerts() connects to the EST server, builds a CA certs\n    request, and sends the GET CA certs request.  The response is placed in a\n    buffer allocated and maintained by the EST client library and a pointer to\n    this buffer is returned to the calling application.  The returned CA certs\n    are in base64 encoded DER format and is stored in a NULL terminated string\n    buffer.\n\n    Once the CA certificates are retrieved from the EST server, the ET Client\n    library must be reset.  The retrieved CA certificates should now be passed\n    into the EST client initialization function as the explicit TA database.\n */\nEST_ERROR est_client_get_cacerts (EST_CTX *ctx, int *ca_certs_len)\n{\n    EST_ERROR rv = EST_ERR_NONE;\n    SSL *ssl = NULL;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    if (ca_certs_len == NULL) {\n        EST_LOG_ERR(\"EST Client: Get CACerts, invalid parameter\");\n        return EST_ERR_INVALID_PARAMETERS;\n    }\n    \n    rv = est_client_connect(ctx, &ssl);\n    if (rv != EST_ERR_NONE) {\n        if (ssl) {\n            SSL_shutdown(ssl);\n            SSL_free(ssl);\n        }        \n        return (rv);\n    }\n    rv = est_client_send_cacerts_request(ctx, ssl, ca_certs_len);\n    est_client_disconnect(ctx, &ssl);\n\n    if (ssl) {\n        SSL_shutdown(ssl);    \n        SSL_free(ssl);\n    }\n    \n    return (rv);\n}\n/*! @brief est_client_copy_cacerts() copies the previously retrieved CA\n    certificates to the application's buffer.\n \n    @param ctx Pointer to the current EST context.\n    @param ca_certs Pointer to the buffer into which the retrieved CA certificates\n    are to be copied. \n \n    @return EST_ERROR\n\n    est_client_copy_cacerts() copies the most recently retrieved CA\n    certificates from the EST server.  Once these CA certificates are copied\n    to the application's buffer pointed to by ca_certs they are removed from\n    the EST clietn context.\n\n    Once the CA certificates are retrieved by the application, the EST client\n    library must be reset.  When this reset is performed, the CA certificates\n    retrieved in this est_client_copy_cacerts call should be passed into the\n    EST client initialization function as the explicit TA database.\n */\nEST_ERROR est_client_copy_cacerts (EST_CTX *ctx, unsigned char *ca_certs)\n{\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    if (ca_certs == NULL) {\n        EST_LOG_ERR(\"EST Client: Get CACerts, invalid parameter\");\n        return EST_ERR_INVALID_PARAMETERS;\n    }\n    \n    if (ctx->retrieved_ca_certs == NULL) {\n        EST_LOG_ERR(\"No CA certificates to copy\");\n        return(EST_ERR_NO_CERTIFICATE);\n    }\n\n    memzero_s(ca_certs, ctx->retrieved_ca_certs_len);\n    memcpy_s(ca_certs, ctx->retrieved_ca_certs_len, ctx->retrieved_ca_certs,\n             ctx->retrieved_ca_certs_len);\n\n    /*\n     * if the CA certs were obtained, then the client lib needs to be reset.\n     */\n    ctx->est_client_initialized = 0;\n    \n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_get_csrattrs() performs the CSR attributes request to\n    the EST server.\n \n    @param ctx Pointer to EST context for a client session\n    @param csr_data Pointer to a buffer that is to hold the returned CSR\n    attributes\n    @param csr_len Pointer to an integer that is to hold the length of the CSR\n    attributes buffer\n \n    @return EST_ERROR\n\n    est_client_get_csrattrs() connects to the EST server, sends the CSR attributes\n    request to the server, saves aways the returned CSR attribute data, and then\n    disconnects from the EST server.\n */\nEST_ERROR est_client_get_csrattrs (EST_CTX *ctx, unsigned char **csr_data, int *csr_len)\n{\n    int rv, new_csr_len, pop_required = 0;\n    SSL *ssl = NULL;\n    unsigned char *new_csr_data;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!csr_data) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    if (!csr_len) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    /* assume defeat */\n    *csr_data = NULL;\n    *csr_len = 0;\n    \n    /*\n     * Connect to the EST server\n     */\n    rv = est_client_connect(ctx, &ssl);\n    if (rv != EST_ERR_NONE) {\n        if (ssl) {\n            SSL_shutdown(ssl);\n            SSL_free(ssl);\n        }\n\n        return (rv);\n    }\n\n    /*\n     * free the current attributes if cached\n     */\n    if (ctx->retrieved_csrattrs) {\n        free(ctx->retrieved_csrattrs);\n\tctx->retrieved_csrattrs = NULL;\n        ctx->retrieved_csrattrs_len = 0;\n    }\n    ctx->retrieved_csrattrs_len = 0;\n    ctx->retrieved_csrattrs = NULL;\n\n    /*\n     * Send the HTTP request to the EST server\n     */\n    rv = est_client_send_csrattrs_request(ctx, ssl, &new_csr_data, &new_csr_len);\n    est_client_disconnect(ctx, &ssl);\n\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"CSR request failed, error code is %d (%s)\", rv, EST_ERR_NUM_TO_STR(rv));\n\tif (new_csr_data) {\n\t    free(new_csr_data);\n\t}\n\tif (ssl) {\n\t    SSL_shutdown(ssl);\n\t    SSL_free(ssl);\n\t}\n\treturn (rv);\n    }\n\n    if (ssl) {\n        SSL_shutdown(ssl);\n        SSL_free(ssl);\n    }\n\n    if (new_csr_data == NULL) {\n        EST_LOG_INFO(\"CSR attributes are: NULL\");\n\treturn (EST_ERR_NONE);\n    }\n    /* \n     * have to allocate the new memory prior to \n     * parsing to be sure it is null terminated.\n     */\n    ctx->retrieved_csrattrs = malloc(new_csr_len + 1);\n    if (!ctx->retrieved_csrattrs) {\n        free(new_csr_data);\n\treturn (EST_ERR_MALLOC);\n    }\n\n    ctx->retrieved_csrattrs_len = new_csr_len;\n    memcpy_s(ctx->retrieved_csrattrs, new_csr_len+1, new_csr_data, new_csr_len);\n    ctx->retrieved_csrattrs[new_csr_len] = 0;\n    EST_LOG_INFO(\"CSR attributes are(%d): %s\", ctx->retrieved_csrattrs_len, \n\t\t ctx->retrieved_csrattrs);\n    free(new_csr_data);\n\n    /* Now make sure the data is valid */\n    rv = est_asn1_parse_attributes((char *)ctx->retrieved_csrattrs, ctx->retrieved_csrattrs_len,\n\t\t\t\t   &pop_required);\n    if (rv != EST_ERR_NONE) {\n\tfree(ctx->retrieved_csrattrs);\n        ctx->retrieved_csrattrs = NULL;\n        ctx->retrieved_csrattrs_len = 0;\n    } else {\n        *csr_data = ctx->retrieved_csrattrs;\n        *csr_len = ctx->retrieved_csrattrs_len;\n    }\n    ctx->csr_pop_required = pop_required;\n    \n    return (rv);\n}\n/*! @brief est_client_enable_srp() is used by an application to enable\n    TLS-SRP as the transport, which is used in place of traditional\n    TLS.  TLS-SRP allows for secure transport when an X.509 certificate\n    is not available or when a trust anchor is not available.\n \n    @param ctx EST context obtained from the est_client_init() call.\n    @param strength Specifies the SRP strength to use.\n    @param uid char buffer containing the user id to be used as the\n    SRP user name. \n    @param pwd char buffer containing the passowrd to be used as the\n    SRP password.\n\n    This function allows an application to enable TLS-SRP cipher suites,\n    which is another form for TLS.  This could be used when the EST client\n    does not have an X.509 certificate to identify itself to the EST\n    server.  It can also be used by the EST client when a trust anchor\n    is not available to authenticate the EST server identity.  \n    The EST server must support TLS-SRP when using this API. \n\n    This function must be invoked after est_client_init() and prior to \n    issuing any EST commands..\n\n    All string parameters are NULL terminated strings.\n    \n    @return EST_ERROR.  \n*/\nEST_ERROR est_client_enable_srp (EST_CTX *ctx, int strength, char *uid, char *pwd) \n{\n    X509_STORE *store;\n    int rv;\n\n    if (ctx == NULL) {\n\tEST_LOG_ERR(\"Null context passed\");\n        return (EST_ERR_NO_CTX);\n    }    \n\n    if (ctx->ssl_ctx == NULL) {\n\tEST_LOG_ERR(\"SSL context has not been initialized\");\n        return (EST_ERR_NO_SSL_CTX);\n    }\n    \n    if (strength < EST_SRP_STRENGTH_MIN) {\n\tEST_LOG_ERR(\"SRP strength must be greater than %d\", EST_SRP_STRENGTH_MIN);\n        return (EST_ERR_SRP_STRENGTH_LOW);\n    }\n\n    if (uid == NULL) {\n\tEST_LOG_ERR(\"SRP user ID must be provided\");\n\treturn (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    if (pwd == NULL) {\n\tEST_LOG_ERR(\"SRP password must be provided\");\n\treturn (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    ctx->enable_srp = 1;\n\n    /*\n     * Enable just the SRP cipher suites.  When SRP is enabled,\n     * it's used exclusively.\n     *\n     * Check if we have a trust anchor configured.  We will\n     * enable the DSS and RSA auth cipher suites if we do.\n     */\n    store = SSL_CTX_get_cert_store(ctx->ssl_ctx);\n    if (store && store->objs && sk_X509_OBJECT_num(store->objs) > 0) {\n\tEST_LOG_INFO(\"Enable SSL SRP cipher suites with RSA/DSS\\n\");\n        rv = SSL_CTX_set_cipher_list(ctx->ssl_ctx, EST_CIPHER_LIST_SRP_AUTH);\n    } else {\n\tEST_LOG_INFO(\"Enable SSL SRP cipher suites w/o RSA/DSS\\n\");\n        rv = SSL_CTX_set_cipher_list(ctx->ssl_ctx, EST_CIPHER_LIST_SRP_ONLY);\n    }\n    if (!rv) { \n\tEST_LOG_ERR(\"Failed to set SSL SRP cipher suites\\n\");\n\tossl_dump_ssl_errors();\n\treturn EST_ERR_SSL_CIPHER_LIST;\n    }\n\t\n    /* \n     * Set the SRP user name and password.  \n     */\n    if (!SSL_CTX_set_srp_username(ctx->ssl_ctx, uid)) {\n\tEST_LOG_ERR(\"Unable to set SRP username\\n\");\n\tossl_dump_ssl_errors();\n\treturn EST_ERR_UNKNOWN; \n    }\n    if (!SSL_CTX_set_srp_password(ctx->ssl_ctx, pwd)) {\n\tEST_LOG_ERR(\"Unable to set SRP password\\n\");\n\tossl_dump_ssl_errors();\n\treturn EST_ERR_UNKNOWN; \n    }\n    SSL_CTX_set_srp_strength(ctx->ssl_ctx, strength);\n\n    EST_LOG_INFO(\"TLS-SRP enabled\");\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_set_auth() is used by an application to set up the\n    authentication parameters to be used.\n \n    @param ctx EST context obtained from the est_client_init() call.\n    @param uid char buffer containing the user id to be used for basic\n    and digest based authentication\n    @param pwd char buffer containing the passowrd to be used for basic\n    and digest based authentication\n    @param client_cert_raw char buffer containing the client application\n    certificate.\n    @param pkey_raw Private key that can be used with the client cert\n    @param pkey_len Length of buffer holding the private key\n\n    This function allows an application to provide the information required\n    for authenticating the EST client with the EST server.  Until this call is\n    made, the only accepted request is the GET CA Certs.  If the user id is\n    provided, a password must also be provided.\n\n    The application may pass the private key (pkey_raw/pkey_len) to be used\n    for signing requests to the server, otherwise, only basic or digest based\n    authentication will be performed on the TLS session for these requests.\n    If the private key is passed, it must contain the private key that matches\n    the public key contained in the client_cert parameter.\n\n    All string parameters are NULL terminated strings.\n    \n    @return EST_ERROR.  If error, NULL.\n*/\nEST_ERROR est_client_set_auth (EST_CTX *ctx, const char *uid, const char *pwd,\n                               X509 *client_cert, EVP_PKEY *private_key)\n{\n    EST_ERROR rv = EST_ERR_NONE;\n    \n    if (ctx == NULL) {\n\tEST_LOG_ERR(\"Null context passed\");\n        return (EST_ERR_NO_CTX);\n    }    \n\n    rv = est_client_set_uid_pw(ctx, uid, pwd);\n    if (rv != EST_ERR_NONE) {\n        return (rv);\n    }            \n\n    ctx->auth_mode = AUTH_NONE;\n\n    /*\n     * cache away the client cert and the associated private key, then\n     * get them loaded into the SSL context so that they'll be used.\n     */\n    ctx->client_key = private_key;\n    ctx->client_cert = client_cert;\n    \n    /*\n     * Load the client cert if it's available\n     */\n    if (ctx->client_cert && ctx->client_key) {\n        if (est_client_set_cert_and_key(ctx->ssl_ctx, ctx->client_cert, ctx->client_key)) {\n            EST_LOG_ERR(\"Unable to load local certificate and private key\");\n            return EST_ERR_CLIENT_INVALID_KEY;\n        }\n    } else {\n        EST_LOG_WARN(\"Not using client certificate for TLS session, HTTP basic or digest auth will be used.\");\n    }\n    \n    return EST_ERR_NONE;\n}\n/*! @brief est_client_set_auth_cred_cb() is used by an application to register\n  its callback function.\n    \n  @param ctx EST context obtained from the est_client_init() call.\n  @param auth_credentials_cb  Function pointer to the application layer callback\n\n  The registered callback function is used by the EST client library to obtain\n  authentication credentials.  The application can provide authentication\n  credentials during initialization if they are available, such as the userid\n  and password used with HTTP basic authentication.  During the processing of\n  a request, the EST client library will call this application callback in the\n  event that it does not have the authentication credentials that are being\n  requested by the EST server.\n\n  The callback function definition must match the following function\n  prototype,\n\n  int (*auth_credentials_cb)(EST_HTTP_AUTH_HDR *auth_credentials);\n\n  auth_credentials - A pointer to a EST_HTTP_AUTH_HDR structure.  The\n                     structure is provided by the EST library and the callback\n                     function fills in the specific credentials being\n                     requested.  These credential values must be passed in the\n                     format in which they will be sent to the server, that is,\n                     the EST client library will perform no reformatting of\n                     these credentials.  Ownership of the memory holding these\n                     credential values is transferred from the application\n                     layer to the EST library when the application layer\n                     returns these values to the EST library.  This allows the\n                     EST library to free up this memory as soon as it is done\n                     using these values.\n                         \n  The return value from the callback must be one of the following values:\n\n  EST_HTTP_AUTH_CRED_SUCCESS - If the callback was able to provide the\n                               requested credentials.\n  EST_HTTP_AUTH_CRED_NOT_AVAILABLE - If the callback could not provide the\n                                     requested credentials.\n\n  The auth_credentials_cb parameter can be set to NULL to reset the callback\n  function.\n  \n  All string parameters are NULL terminated strings.\n    \n  @return EST_ERROR.\n  EST_ERR_NONE - Success.\n  EST_ERR_NO_CTX\n*/\nEST_ERROR est_client_set_auth_cred_cb (EST_CTX *ctx, auth_credentials_cb callback)\n{\n    if (ctx == NULL) {\n\tEST_LOG_ERR(\"Null context passed\");\n        return (EST_ERR_NO_CTX);\n    }\n    \n    ctx->auth_credentials_cb = callback;\n    \n    return EST_ERR_NONE;\n}\n/*! @brief est_client_enable_basic_auth_hint() is used by an application to \n    reduce overhead at the TCP and TLS layers when the client knows that\n    the EST server is using HTTP Basic Authentication. \n \n    @param ctx Pointer to EST context for a client session\n\n    Normally libEST will send an anonymous HTTP request when doing the\n    initial request from the EST server.  This function allows an application \n    to improve performance by sending the HTTP Basic Auth header in the initial \n    request sent to the EST server.  This eliminates the need for the server to send\n    the HTTP authentication challene response, which eliminates a round-trip\n    between the EST client and server.  This function should be called immediately\n    after invoking est_client_set_auth().\n\n    Precautions should be taken by your application to ensure this hint is\n    only enabled when it is known that the EST server is configured for HTTP\n    Basic Authentication.  If the EST server is configured for HTTP Digest\n    Authentication, then enabling this hint will cause the EST transaction\n    to fail.\n \n    @return EST_ERROR\n    EST_ERR_NONE - Success.\n*/\nEST_ERROR est_client_enable_basic_auth_hint (EST_CTX *ctx)\n{\n    if (ctx == NULL) {\n\tEST_LOG_ERR(\"Null context passed\");\n        return (EST_ERR_NO_CTX);\n    }    \n\n    ctx->auth_mode = AUTH_BASIC;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_init() is used by an application to create\n    a context in the EST library.  This context is used when invoking\n    other functions in the client API.\n \n    @param ca_chain Required char buffer containing CA certificates as raw byte\n    data, to be used for authenticating the EST server\n    @param ca_chain_len length of ca_chain char buffer.\n    @param cert_format defines the format of the certificates that will be\n    passed down during this instantiation of the EST client library.  Currently,\n    the only value accepted is EST_CERT_FORMAT_PEM\n    @param cert_verify_cb A pointer to a function in the EST client application\n    that is called when a received server identity certificate has failed\n    verification from the SSL code.  This function takes as input two\n    parameters, a pointer to the X509 structure containing the server's\n    certificate, and a integer value set to the OpenSSL defined error\n    for this certificate.  This callback function returns a 0 if the server's\n    identity certificate has been rejected, and any other value if it\n    has been approved.\n\n    This function allows an application to initialize an EST client context.\n    The application must provide the local CA certificates\n    (ca_chain/ca_chain_len) to use for client operation.  The certificates\n    provided must be in the format specified by the cert_format parameter.\n    Currently, only PEM encoded certificates are supported.  The length\n    parameters for the certificates (ca_chain_len) are to be used when DER\n    formatted certificates are passed.  The CA certificates may contain CRL\n    entries that will be used when authenticating the certificates received\n    from the server.\n \n    @return EST_CTX.  If error, NULL.\n*/\nEST_CTX *est_client_init (unsigned char *ca_chain, int ca_chain_len,\n                          EST_CERT_FORMAT cert_format,\n                          int (*cert_verify_cb)(X509 *, int))\n{\n    EST_CTX *ctx;\n    volatile int len;\n    int rv;\n\t\n#ifdef WIN32\n\tint iResult;\n\n\t/*\n\t*Initialize Winsock\n\t*/\n\tiResult = WSAStartup(MAKEWORD(2, 2), &wsaData);\n\tif (iResult != 0) {\n\t\tEST_LOG_ERR(\"WSAStartup Failed: %d\\n\", iResult);\n\t\treturn 0;\n\n\t}\n#endif\t\n\n    if (cert_format != EST_CERT_FORMAT_PEM) {\n        EST_LOG_ERR(\"Only PEM encoding of certificates is supported.\");\n        return NULL;\n    }\n        \n    /* \n     * If a CA chain was passed in, then check the length value passed in.  It\n     * should match the calculated length of the buffer.  This will verify\n     * both that the length value is correct, and that the buffer is properly\n     * null terminated.\n     */\n    if (ca_chain) {    \n        len = (int) strnlen_s((char *)ca_chain, EST_CA_MAX);\n        if (len != ca_chain_len) {\n            EST_LOG_ERR(\"Length of ca_chain doesn't match passed ca_chain_len\");\n            return NULL;\n        }\n    }\n    \n    ctx = malloc(sizeof(EST_CTX));\n    if (!ctx) {\n        EST_LOG_ERR(\"Unable to allocate memory for EST Context\");\n        return NULL;\n    }\n    memzero_s(ctx, sizeof(EST_CTX));\n    ctx->est_mode = EST_CLIENT;\n\n    /*\n     * Load the local CA certificates into memory and retain\n     * for future use.  This will be used for /CACerts requests.\n     */\n    if (est_load_trusted_certs(ctx, ca_chain, ca_chain_len)) {\n        EST_LOG_ERR(\"Failed to load trusted certificate store\");\n        est_destroy(ctx);\n        return NULL;\n    }\n\n    rv = est_client_init_ssl_ctx(ctx);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Failed to initialize SSL context with certificiate and private key passed\");\n        est_destroy(ctx);\n        return NULL;\n    }\n\n    /*\n     * save away the client's callback function that allows for manual verification of\n     * the server's identity certificate\n     */\n    ctx->manual_cert_verify_cb = cert_verify_cb;\n    \n    /*\n     * Set the default value for the  socket read timeout.\n     */\n    ctx->read_timeout = EST_SSL_READ_TIMEOUT_DEF;\n\n    /*\n     * We use SHA-256 as the default hash algorithm\n     * for signing the CSR.  This can be changed by the\n     * application by using the est_client_set_sign_digest() \n     * function.\n     */\n    ctx->signing_digest = EVP_sha256(); \n\n    ctx->retry_after_delay = 0;\n    ctx->retry_after_date = 0;\n    \n    ctx->est_client_initialized = 1;\n    return (ctx);\n}\n/*! @brief est_client_init() is used by an application to create\n    a context in the EST library.  This context is used when invoking\n    other functions in the client API.\n \n    @param ca_chain Required char buffer containing CA certificates as raw byte\n    data, to be used for authenticating the EST server\n    @param ca_chain_len length of ca_chain char buffer.\n    @param cert_format defines the format of the certificates that will be\n    passed down during this instantiation of the EST client library.  Currently,\n    the only value accepted is EST_CERT_FORMAT_PEM\n    @param cert_verify_cb A pointer to a function in the EST client application\n    that is called when a received server identity certificate has failed\n    verification from the SSL code.  This function takes as input two\n    parameters, a pointer to the X509 structure containing the server's\n    certificate, and a integer value set to the OpenSSL defined error\n    for this certificate.  This callback function returns a 0 if the server's\n    identity certificate has been rejected, and any other value if it\n    has been approved.\n\n    This function allows an application to initialize an EST client context.\n    The application must provide the local CA certificates\n    (ca_chain/ca_chain_len) to use for client operation.  The certificates\n    provided must be in the format specified by the cert_format parameter.\n    Currently, only PEM encoded certificates are supported.  The length\n    parameters for the certificates (ca_chain_len) are to be used when DER\n    formatted certificates are passed.  The CA certificates may contain CRL\n    entries that will be used when authenticating the certificates received\n    from the server.\n \n    @return EST_CTX.  If error, NULL.\n*/\nstatic EST_ERROR est_client_parse_path_seg (char *path_seg) \n{\n    UriParserStateA state;\n    UriUriA parsed_uri;\n    int uriparse_rc;\n    UriPathSegmentA *cur_seg = NULL;\n    char *cur_seg_str = NULL;\n    EST_OPERATION operation;\n    char canned_uri[EST_URI_MAX_LEN];\n\n    /*\n     * build out a canned URI to pass to the uriparser library.\n     * This will cause the incoming path segment to be in the\n     * correct spot within a URI as it gets validated.  Main issue\n     * is the possible use of a ':' in the path segment becoming a\n     * theme delimiter\n     */\n    memzero_s(canned_uri, EST_URI_MAX_LEN);\n    strcpy_s(canned_uri, EST_URI_MAX_LEN, \"/.well-known/est/\");\n    strcat_s(canned_uri, EST_URI_MAX_LEN, path_seg);\n\n    state.uri = &parsed_uri;\n    uriparse_rc = uriParseUriA(&state, canned_uri);\n    if (uriparse_rc != URI_SUCCESS) {\n        uriFreeUriMembersA(state.uri);\n        return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n    }\n\n    cur_seg = parsed_uri.pathHead;\n    if (cur_seg == NULL) {\n        EST_LOG_ERR(\"No valid path segment in supplied string\");\n        uriFreeUriMembersA(state.uri);\n        return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n    }\n\n    cur_seg = cur_seg->next->next;\n    cur_seg_str = (char *)cur_seg->text.first;\n    operation = est_parse_operation(cur_seg_str);\n        /*\n         * look to see if the operation path comes next:\n         * cacerts, csrattrs, simpleenroll, simplereenroll.\n         * If any of the operations occur in this path segment\n         * string, then this is a problem.\n         */\n    if (operation != EST_OP_MAX) {\n        EST_LOG_ERR(\"Path segment string contains an operation value. path segment passed in =  %s\\n\", cur_seg_str);\n        uriFreeUriMembersA(state.uri);\n        return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n    }\n\n    /*\n     * Look to see if there are multiple segments\n     */\n    if ((char *)cur_seg->next != NULL || *(cur_seg->text.afterLast) != '\\0') {\n        EST_LOG_ERR(\"Path segment string contains multiple path segments or more than a path segment\");\n        uriFreeUriMembersA(state.uri);        \n        return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n    }\n    \n    uriFreeUriMembersA(state.uri);    \n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_set_server() is called by the application layer to\n     specify the address/port of the EST server. It must be called after\n     est_client_init() and prior to issuing any EST commands.\n \n    @param ctx Pointer to EST context for a client session\n    @param server Name of the EST server to connect to.  The ASCII string\n    representing the name of the server is limited to 254 characters\n    @param port TCP port on the EST server to connect\n    @param path_segment A string containing the optional path segment\n    to be added to the URI.  If not used, set to NULL.\n \n    @return EST_ERROR\n    EST_ERR_NONE - Success.\n    EST_ERR_NO_CTX - NULL value passed for EST context\n    EST_ERR_INVALID_SERVER_NAME - NULL value passed for EST server name, or\n    server name string too long\n    EST_ERR_CLIENT_NOT_INITIALIZED - Called before est_client_init()\n    EST_ERR_INVALID_PORT_NUM - Invalid port number input, less than zero or\n    greater than 65535\n\n    est_client_set_server error checks its input parameters and then stores\n    both the hostname and port number into the EST context.\n */\nEST_ERROR est_client_set_server (EST_CTX *ctx, const char *server, int port,\n                                 char *path_segment)\n{\n    \n    if (!ctx) {\n        return EST_ERR_NO_CTX;\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    if (server == NULL) {\n        return EST_ERR_INVALID_SERVER_NAME;\n    }\n    \n    if (port <= 0 || port > 65535) {\n        return EST_ERR_INVALID_PORT_NUM;\n    }\n    \n    if (EOK != strncpy_s(ctx->est_server, EST_MAX_SERVERNAME_LEN, server,\n                         EST_MAX_SERVERNAME_LEN)) {\n        return EST_ERR_INVALID_SERVER_NAME;\n    }   \n\n    ctx->est_port_num = port;\n\n#ifdef HAVE_URIPARSER\n    {\n        int path_segment_len;\n        EST_ERROR rc;\n\n        if (path_segment != NULL) {\n\n            if (*path_segment == '\\0') {\n                return EST_ERR_HTTP_INVALID_PATH_SEGMENT;\n            }\n            \n            /*\n             * Make sure it's not too long\n             */\n            path_segment_len = strnlen_s(path_segment, EST_MAX_PATH_SEGMENT_LEN+1);\n            if (path_segment_len > EST_MAX_PATH_SEGMENT_LEN) {\n                return EST_ERR_HTTP_INVALID_PATH_SEGMENT;\n            }\n\n            /*\n             * Validate the incoming path segment string\n             */\n            rc = est_client_parse_path_seg(path_segment);\n            if (rc != EST_ERR_NONE) {\n                EST_LOG_ERR(\"path segment failed validation.\");\n                return (rc);\n            }\n\n            /*\n             * valid.  store it away in the context\n             */\n            rc = est_store_path_segment(ctx, path_segment, path_segment_len);\n            if (rc != EST_ERR_NONE) {\n                EST_LOG_ERR(\"Failed to store URI path segment.\");\n                return (rc);\n            }        \n        }\n    }\n#else\n    {\n        /*\n         * If no uriparser support, then we cannot support\n         * a path segment being passed in\n         */\n        if (path_segment) {\n            EST_LOG_ERR(\"Use of path segments not supported in this build of libEST.\");\n            return EST_ERR_HTTP_PATH_SEGMENT_NOT_SUPPORTED;\n        }  \n    }\n#endif\n    return EST_ERR_NONE;\n}\n/*! @brief est_client_set_proxy() is called by the application layer to\n    specify the proxy to the EST server. It must be called after\n    est_client_init() and prior to issuing any EST commands.\n\n    @param ctx Pointer to EST context for a client session\n    @param proxy_proto Proxy protocol\n    @param proxy_server Name of the proxy server to connect to.  The ASCII string\n    representing the name of the server is limited to 254 characters (EST_MAX_SERVERNAME_LEN)\n    @param port TCP port on the proxy server to connect\n    @param proxy_auth Proxy authentication method\n    @param username Username to use to authenticate with the proxy\n    @param password Password to use to authenticate with the proxy\n\n    @return EST_ERROR\n    EST_ERR_NONE - Success.\n    EST_ERR_NO_CTX - NULL value passed for EST context\n    EST_ERR_INVALID_SERVER_NAME - NULL value passed for EST server name, or\n    server name string too long\n    EST_ERR_INVALID_PORT_NUM - port num to proxy server is invalid\n    EST_ERR_CLIENT_NOT_INITIALIZED - Called before est_client_init()\n    EST_ERR_INVALID_PARAMETERS - NULL value passed for either username or password\n    OR username or password is too long\n    EST_ERR_CLIENT_PROXY_MODE_NOT_SUPPORTED - client proxy mode is only supported when\n    built with libcurl support\n    EST_ERR_INVALID_CLIENT_PROXY_PROTOCOL - An invalid proxy protocol has been specified \n    \n    est_client_set_proxy error checks its input parameters and then stores\n    the proxy information into the EST context.\n\n    NOTE: HTTP proxy tunnelling is not supported by libEST in server mode.\n    If configuring libEST in client mode to communicate with libEST in\n    server mode, then EST_CLIENT_PROXY_HTTP_NOTUNNEL must be specified\n    for the proxy protocol.\n */\nEST_ERROR est_client_set_proxy (EST_CTX *ctx, EST_CLIENT_PROXY_PROTO proxy_proto,\n                                const char *proxy_server, unsigned short int proxy_port,\n                                unsigned int proxy_auth, const char *username,\n                                const char *password)\n{\n#ifdef HAVE_LIBCURL\n    if (!ctx) {\n        return EST_ERR_NO_CTX;\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    if (proxy_server == NULL || proxy_server[0] == '\\0') {\n        return EST_ERR_INVALID_SERVER_NAME;\n    }\n\n    if (EST_MAX_SERVERNAME_LEN < strnlen_s(proxy_server, EST_MAX_SERVERNAME_LEN+2)) {\n        return EST_ERR_INVALID_SERVER_NAME;\n    }\n\n    ctx->proxy_server[0] = '\\0';\n    if (EOK != strncpy_s(ctx->proxy_server, sizeof(ctx->proxy_server),\n                         proxy_server, sizeof(ctx->proxy_server))) {\n        return EST_ERR_INVALID_SERVER_NAME;\n    }\n\n    if (proxy_port <= 0 || proxy_port > 65535) {\n        return EST_ERR_INVALID_PORT_NUM;\n    }\n    ctx->proxy_port = proxy_port;\n    \n    if (proxy_proto < EST_CLIENT_PROXY_HTTP_NOTUNNEL ||\n        proxy_proto > EST_CLIENT_PROXY_SOCKS5_HOSTNAME) {\n        return EST_ERR_INVALID_CLIENT_PROXY_PROTOCOL;\n    }\n    ctx->proxy_proto = proxy_proto;\n\n    if (proxy_auth != EST_CLIENT_PROXY_AUTH_NONE &&\n        (0 != (proxy_auth & ~(EST_CLIENT_PROXY_AUTH_BASIC|EST_CLIENT_PROXY_AUTH_NTLM)))) {\n        return EST_ERR_INVALID_CLIENT_PROXY_AUTH;\n    }\n    ctx->proxy_auth = proxy_auth;\n\n    if (username && password && proxy_auth != EST_CLIENT_PROXY_AUTH_NONE) {\n        \n        if (MAX_UIDPWD < strnlen_s(username, MAX_UIDPWD+2)) {\n            return EST_ERR_INVALID_PARAMETERS;\n        }\n\n        if (username[0] == '\\0') {\n            return EST_ERR_INVALID_PARAMETERS;\n        }\n\n        ctx->proxy_username[0] = '\\0';\n        if (EOK != strncpy_s(ctx->proxy_username, sizeof(ctx->proxy_username),\n                             username, sizeof(ctx->proxy_username))) {\n            return EST_ERR_INVALID_PARAMETERS;\n        }\n\n        if (MAX_UIDPWD < strnlen_s(password, MAX_UIDPWD+2)) {\n            return EST_ERR_INVALID_PARAMETERS;\n        }\n\n        if (password[0] == '\\0') {\n            return EST_ERR_INVALID_PARAMETERS;\n        }\n\n        ctx->proxy_password[0] = '\\0';\n        if (EOK != strncpy_s(ctx->proxy_password, sizeof(ctx->proxy_password), password,\n                             sizeof(ctx->proxy_password))) {\n            return EST_ERR_INVALID_PARAMETERS;\n        }\n\n        ctx->proxy_auth = proxy_auth;\n    }\n\n    ctx->use_proxy = 1;\n    \n    return EST_ERR_NONE;\n#else\n    /*\n     * If the EST library was not built with support for libcurl then client\n     * proxy mode is not supported.\n     */\n    EST_LOG_ERR(\"Client proxy mode requires libest to be built with libcurl.\");\n    return EST_ERR_CLIENT_PROXY_MODE_NOT_SUPPORTED;\n#endif    \n}\n/*! @brief est_client_set_sign_digest() is called by the application layer to\n     specify the hash algorithm used to sign the PKCS10 CSR during the\n     enroll operation. It must be called after\n     est_client_init() and prior to issuing any EST commands.\n \n    @param ctx Pointer to EST context for a client session\n    @param nid This is the NID value defined in the OpenSSL header file obj_mac.h\n               for the desired digest to use for signing.  \n \n    @return EST_ERROR\n    EST_ERR_NONE - Success.\n    EST_ERR_NO_CTX - NULL value passed for EST context\n    EST_ERR_INVALID_DIGEST - An unsupported NID was provided.\n\n    libEST supports SHA1, SHA224, SHA256, SHA384, and SHA512 digests.  \n    SHA256 is the default digest to use for signing.  There's no need\n    to invoke this function unless another digest is desired. The\n    supported NID values are:\n\tNID_sha1\n\tNID_sha224 \n\tNID_sha256 \n\tNID_sha384 \n\tNID_sha512 \n    \n */\nEST_ERROR est_client_set_sign_digest (EST_CTX *ctx, int nid) \n{\n    if (!ctx) {\n        return EST_ERR_NO_CTX;\n    }\n\n    switch (nid) {\n    case NID_sha512:\n        ctx->signing_digest = EVP_sha512(); \n        break;\n    case NID_sha384:\n        ctx->signing_digest = EVP_sha384(); \n        break;\n    case NID_sha256:\n        ctx->signing_digest = EVP_sha256(); \n        break;\n    case NID_sha224:\n        ctx->signing_digest = EVP_sha224(); \n        break;\n    case NID_sha1:\n        ctx->signing_digest = EVP_sha1(); \n        break;\n    default:\n\treturn (EST_ERR_INVALID_DIGEST);\n        break;\n    }\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_copy_retry_after() copies the retry after value stored\n    in this client context.\n \n    @param ctx Pointer to the current EST context.\n    \n    @param retry_delay Pointer to the integer where the retry-after delay secs\n    value is copied.  If the server sent a retry-after in delay seconds format\n    then it will be passed here.  If it did not, then this value will be zero.\n    \n    @param retry_time Pointer to the time_t where the retry-after time date\n    value is copied.  If the server sent a retry-after in time and date string\n    format then this string is converted into a time_t value and passed up\n    in this parameter.  This value will only be set if the server sent a time\n    and date string response, otherwise, this value is set to zero.\n \n    @return EST_ERROR\n\n    When a response is received from the EST server the headers are checked to\n    see if the server has included a Retry-After header, indicating that this\n    request currently cannot be processed.  If a Retry-After HTTP header is\n    included in the received response from the server the delay value is saved\n    in the context and an EST error code is given to the application on this\n    request indicating that the client must retry the request at a later time.\n\n    The value specified by the server can be in one of two basic formats, a\n    string version of a integer value that represents the number of seconds\n    the client must wait before retrying the request, and a string containing\n    a date and time when the client can retry the request.  The date and time\n    string can be in any format specified in RFC 2616.  If the second delay\n    value is sent it is converted into an integer and saved in the EST context\n    and if the date time string value is sent it is converted into a time_t\n    value and saved into the EST context.  The application must then call\n    est_client_copy_retry_after() to obtain the amount of time to wait before\n    retrying the request.  est_client_copy_retry_after() copies the current\n    retry-after value from the client context and returns it to the\n    application.  Only one of the two return values will be set with a\n    non-zero value.\n\n    NOTE: The processing of a Retry-After value in time/date format is currently\n    not supported.  The EST Client will always return only a retry delay\n    value in seconds.\n */\nEST_ERROR est_client_copy_retry_after (EST_CTX *ctx, int *retry_delay,\n                                       time_t *retry_time)\n{\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!ctx->est_client_initialized) {\n        return EST_ERR_CLIENT_NOT_INITIALIZED;\n    }\n\n    *retry_delay = ctx->retry_after_delay;\n    ctx->retry_after_delay = 0;\n\n    *retry_time = ctx->retry_after_date;\n    ctx->retry_after_date = 0;\n    \n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_force_pop() is used by an application to enable \n    the proof-of-possession generation at the EST client.  This proves\n    that the EST client that sent the CSR to the server/proxy is in possession\n    of the private key that was used to sign the CSR.  This binds the TLS \n    session ID to the CSR.\n\n    Note, if the CSR attributes configured on the server require PoP \n    checking, then there is no need to call this function to enable\n    PoP.  The PoP will be enabled automatically under this scenario\n    when the CSR attributes are requested from the server/proxy.\n    \n    @param ctx Pointer to the EST context\n\n    This function may be called at any time.   \n \n    @return EST_ERROR.\n */\nEST_ERROR est_client_force_pop (EST_CTX *ctx)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->client_force_pop = 1;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_unforce_pop() is used by an application to disable \n    the proof-of-possession generation at the EST client.  Please see\n    the documenation for est_client_force_pop() for more information\n    on the proof-of-possession check.\n\n    @param ctx Pointer to the EST context\n\n    This function may be called at any time.   \n \n    @return EST_ERROR.\n */\nEST_ERROR est_client_unforce_pop (EST_CTX *ctx)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->client_force_pop = 0;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_set_read_timeout() is used by an application to set\n    timeout value of read operations.  After the EST client sends a request to\n    the EST server it will attempt to read the response from the server.  This\n    timeout value limits the amount of time the client will wait for the\n    response.\n\n    @param ctx Pointer to the EST context\n    @param timeout Integer value representing the read timeout in seconds.\n    The minimum value is EST_SSL_READ_TIMEOUT_MIN and the maximum value is\n    EST_SSL_READ_TIMEOUT_MAX.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_client_set_read_timeout (EST_CTX *ctx, int timeout)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (timeout < EST_SSL_READ_TIMEOUT_MIN ||\n        timeout > EST_SSL_READ_TIMEOUT_MAX) {\n\tEST_LOG_ERR(\"Invalid read timeout value passed: %d \", timeout);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n        \n    ctx->read_timeout = timeout;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_client_get_last_http_status() is used by an application to get\n    the HTTP status code returned by the EST server for the most recent\n    operation. \n\n    @param ctx Pointer to the EST context\n\n    This can be called after an EST operation, such as an enroll operation.\n    This function will return the most recent HTTP status code received\n    from the EST server.  Normally, a status of 200 would be returned\n    by the EST server to indicate a successful operation.  However, if the\n    operation failed for some reason, the HTTP status code may be useful\n    to understand the reason for failure.  For instance, the EST server \n    would return a HTTP status of 401 if the EST client was not authorized.\n    Please see RFC 2616 for a description of the various HTTP status codes.\n \n    @return int value representing the HTTP status code, or NULL if the\n    a NULL EST context was provided.\n */\nint est_client_get_last_http_status (EST_CTX *ctx)\n{\n    if (ctx) {\n\treturn ctx->last_http_status;\n    } else {\n\treturn 0;\n    }\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcb4"},"name":"est.c","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc99"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc83"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca4"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc87"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaf"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcad"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc82"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc98"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9c"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca0"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc90"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc92"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc95"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca1"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8a"}]],"contents":"static void (*est_log_func)(char *, va_list) = NULL;\n/*\n * This is our default logger routine, which just\n * dumps log data to stderr.  The application can\n * override this by calling est_init_logger() and\n * passing in a function pointer to a function\n * that implements this prototype.\n */\nstatic void est_logger_stderr (char *format, va_list l)\n{\n#ifndef WIN32\n\tflockfile(stderr);\n#endif\n\tvfprintf(stderr, format, l);\n\tfflush(stderr);\n#ifndef WIN32\n\tfunlockfile(stderr);\n#endif\n}\n/*\n * This is our default logger routine, which just\n * dumps log data to stderr.  The application can\n * override this by calling est_init_logger() and\n * passing in a function pointer to a function\n * that implements this prototype.\n */\nstatic void est_log_msg (char *format, ...)\n{\n    va_list arguments;\n\n    /*\n     * Pull the arguments from the stack and invoke\n     * the logger function\n     */\n    va_start(arguments, format);\n    if (est_log_func != NULL) {\n        (*est_log_func)(format, arguments);\n    } else {\n        est_logger_stderr(format, arguments);\n    }\n    va_end(arguments);\n}\n/*\n * Global function to be called to log something\n */\nvoid est_log (EST_LOG_LEVEL lvl, char *format, ...)\n{\n    va_list arguments;\n\n    /*\n     * check if user is interested in this log message\n     */\n    if (lvl > est_desired_log_lvl) {\n        return;\n    }\n\n    /*\n     * Pull the arguments from the stack and invoke\n     * the logger function\n     */\n    va_start(arguments, format);\n    if (est_log_func != NULL) {\n        (*est_log_func)(format, arguments);\n    } else {\n        est_logger_stderr(format, arguments);\n    }\n    va_end(arguments);\n\n}\n/*\n * Global function to be called to log something\n */\nstatic void printStackTrace(void) {\n\tunsigned int i;\n\tvoid *stack[100];\n\tunsigned short frames;\n\tSYMBOL_INFO * symbol;\n\tHANDLE        process;\n\n\tprocess = GetCurrentProcess();\n\n\tSymInitialize(process, NULL, TRUE);\n\n\tframes = CaptureStackBackTrace(0, 100, stack, NULL);\n\tsymbol = (SYMBOL_INFO *)calloc(sizeof(SYMBOL_INFO) + 256 * sizeof(char), 1);\n\tsymbol->MaxNameLen = 255;\n\tsymbol->SizeOfStruct = sizeof(SYMBOL_INFO);\n\tfor (i = 0; i < frames; i++) {\n\t\tSymFromAddr(process, (DWORD64)(stack[i]), 0, symbol);\n\t\test_log_msg(\"\\n%i: [0x%0X] %s\", (frames - i - 1), symbol->Address, symbol->Name);\n\n\t}\n\n\tfree(symbol);\n}\n/*\n * Global function to be called to log something\n */\nvoid est_log_backtrace (void)\n{\n#ifndef DISABLE_BACKTRACE\n#ifdef WIN32\n\t/*\n\t* Spit out a backtrace if this is enabled globally\n\t*/\n\tif (est_backtrace_enabled) {\n\t\tprintStackTrace();\n\t}\n#else\n    void* callstack[128];\n    char **strs;\n    int i, frames;\n\n    /*\n     * Spit out a backtrace if this is enabled globally\n     */\n    if (est_backtrace_enabled) {\n        frames = backtrace(callstack, 128);\n        strs = backtrace_symbols(callstack, frames);\n        for (i = 0; i < frames; ++i) {\n\t    est_log_msg(\"\\n%s\", strs[i]);\n            //fprintf(stderr, \"%s\\n\", strs[i]);\n        }\n\test_log_msg(\"\\n\\n\");\n        free(strs);\n    }\n#endif /* WIN32*/\n#endif /* DISABLE_BACKTRACE*/\n}\n/*! @brief est_get_version() allows the application to retrieve\n    the libEST version string.  Returns a char* array containing\n    the full version string value for the library.\n \n    @return const char*\n */\nconst char * est_get_version (void) {\n    return EST_VER_STRING; \n}\n/*! @brief est_get_api_level() allows the application to retrieve\n    the libEST API level.  This is a numeric value that\n    indicates the API level of the library.  When new versions of\n    libEST are released and the API changes, this value will be\n    incremented.  Applications can use this to determine which capabilities\n    in the libEST library should or should not be attempted.\n \n    @return int\n */\nint est_get_api_level (void) {\n    return EST_API_LEVEL; \n}\n/*\n * Use this to log the libEST version to an information\n * log message.  Also logs the compile-time and run-time \n * OpenSSL versions.\n */\nvoid est_log_version (void)\n{\n    EST_LOG_INFO(\"%s (API level %d)\", est_get_version(), est_get_api_level());\n#ifdef SOURCE_REVISION\n    EST_LOG_INFO(\"Source repository revision# %d\", SOURCE_REVISION);\n#endif\n    EST_LOG_INFO(\"Compiled against %s\", OPENSSL_VERSION_TEXT);\n    EST_LOG_INFO(\"Linking to %s\", SSLeay_version(SSLEAY_VERSION));\n}\n/*! @brief est_init_logger() allows the application to override the \n    default log handler for EST logging messages.\n \n    @param lvl Sets the desired logging level to EST_LOG_LEVEL\n    @param loggerfunc Sets the callback function to handle logging\n \n    This function allows an application that uses EST to provide\n    a function for logging EST messages.  EST provides a default handler\n    that sends messages to stderr.  Applications may desire to send\n    messages to syslog or some other logging facility.  An application\n    would provide a function pointer using this method to intercept\n    and handle EST log messages.  This setting is global to the library\n    and will impact all contexts.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_init_logger (EST_LOG_LEVEL lvl, void (*loggerfunc)(char *, va_list))\n{\n    /* Initialize the logger */\n    if (loggerfunc) {\n        est_log_func = loggerfunc;\n    } else {\n        /* install our default logger */\n        est_log_func = &est_logger_stderr;\n    }\n\n    /*\n     * Set the desired logging level\n     */\n    est_desired_log_lvl = lvl;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_enable_backtrace() allows the application to toggle\n    whether the stack trace is displayed for WARNING and ERROR\n    log messages coming from libEST.   \n \n    @param enable Set to zero to disable stack traces, non-zero to\n                  enable stack traces through the logging facility.\n \n    This function allows an application to enable stack traces, which\n    may be useful for troubleshooting the libEST library.  Stack\n    traces are disabled by default.  Call this function with a \n    non-zero argument to enable stack traces for both WARNING and\n    ERROR log messages.  This setting is global to the library and\n    will impact all contexts.\n \n    @return void.\n */\nvoid est_enable_backtrace (int enable)\n{\n    est_backtrace_enabled = enable;\n}\n/*! @brief est_read_x509_request() is a helper function that reads\n *  a char* and converts it to an OpenSSL X509_REQ*.  The char* data\n *  can be either PEM or DER encoded.   \n \n    @param csr This is the char* that contains the PEM or DER encoded\n               X509 CSR.\n    @param csr_len This is the length of the csr char*.  DER encoded data\n               may contain zeros, which requires the length to be provided\n\t       by the application layer.\n    @param csr_format This parameter specifies the encoding method of the\n               csr char* that was provided.  Set this to either EST_CERT_FORMAT_PEM\n\t       or EST_CERT_FORMAT_DER.\n \n    This function converts a PEM or DER encoded char* to the OpenSSL\n    X509_REQ structure.  This function will return NULL if the PEM/DER\n    data is corrupted or unable to be parsed by the OpenSSL library.\n    This function will allocate memory for the X509_REQ data.  You must\n    free the memory in your application when it's no longer needed by\n    calling X509_REQ_free().\n \n    @return X509_REQ*\n */\nX509_REQ *est_read_x509_request (unsigned char *csr, int csr_len,\n\t                         EST_CERT_FORMAT csr_format)\n{\n    X509_REQ *req = NULL;\n    BIO *in;\n    unsigned long err;\n\n    if (!csr) {\n\tEST_LOG_ERR(\"CSR may not be NULL\");\n\treturn (NULL);\n    }\n\n    if (csr_len > EST_RAW_CSR_LEN_MAX) {\n\tEST_LOG_ERR(\"CSR length is greater than maximum allowed (%d)\", EST_RAW_CSR_LEN_MAX);\n\treturn (NULL);\n    }\n\n    if (csr_format != EST_CERT_FORMAT_PEM && csr_format != EST_CERT_FORMAT_DER) {\n\tEST_LOG_ERR(\"Only PEM and DER encoding formats are supported.\");\n\treturn (NULL);\n    }\n\n    in = BIO_new_mem_buf(csr, csr_len);\n    if (in == NULL) {\n        EST_LOG_ERR(\"Unable to open the CSR memory buffer\");\n        return (NULL);\n    }\n\n    switch (csr_format) {\n    case EST_CERT_FORMAT_PEM:\n\treq = PEM_read_bio_X509_REQ(in,NULL,NULL,NULL);\n\tbreak;\n    case EST_CERT_FORMAT_DER:\n\treq = d2i_X509_REQ_bio(in,NULL);\n\tbreak;\n    default:\n\tEST_LOG_ERR(\"Invalid CSR format specified.\");\n        break;\n    }\n\n    /*\n     * Check for an error while parsing the input data\n     */\n    if (!req) {\n        EST_LOG_ERR(\"An error occurred in the OpenSSL library while reading the CSR data.\");\n\terr = ERR_get_error();\n\tEST_LOG_ERR(\"OpenSSL error string: %s\", ERR_error_string(err, NULL));\n    }\n\n    BIO_free_all(in);\n    return (req);\n}\n/*! @brief est_load_key() is a helper function that reads\n *  a char* and converts it to an OpenSSL EVP_PKEY*.  The char* data\n *  can be either PEM or DER encoded.   \n \n    @param key This is the char* that contains the PEM or DER encoded\n               key pair.\n    @param key_len This is the length of the key char*.  DER encoded data\n               may contain zeros, which requires the length to be provided\n\t       by the application layer.\n    @param key_format This parameter specifies the encoding method of the\n               key char* that was provided.  Set this to either EST_FORMAT_PEM\n\t       or EST_FORMAT_DER.\n \n    This function converts a PEM or DER encoded char* to the OpenSSL\n    EVP_PKEY* structure.  This function will return NULL if the PEM/DER\n    data is corrupted or unable to be parsed by the OpenSSL library.\n    This function will allocate memory for the EVP_PKEY data.  You must\n    free the memory in your application when it's no longer needed by\n    calling EVP_PKEY_free().\n \n    @return EVP_PKEY*\n */\nEVP_PKEY *est_load_key (unsigned char *key, int key_len, int format)\n{\n    BIO *in = NULL;\n    EVP_PKEY *pkey = NULL;\n\n    if (key == NULL) {\n        EST_LOG_ERR(\"no key data provided\");\n        return NULL;\n    }\n\n    in = BIO_new_mem_buf(key, key_len);\n    if (in == NULL) {\n        EST_LOG_ERR(\"Unable to open the provided key buffer\");\n        return (NULL);\n    }\n\n    switch (format) {\n    case EST_FORMAT_PEM:\n        pkey = PEM_read_bio_PrivateKey(in, NULL, NULL, NULL);\n        break;\n    case EST_FORMAT_DER:\n        pkey = d2i_PrivateKey_bio(in, NULL);\n        break;\n    default:\n        EST_LOG_ERR(\"Invalid key format\");\n        BIO_free(in);\n        return NULL;\n        break;\n    }\n    BIO_free(in);\n\n    return (pkey);\n}\n/*\n * Converts from PEM to pkcs7 encoded certs.  Optionally\n * applies base64 encoding to the output.  This is used\n * when creating the cached cacerts response.  The returned\n * BIO contains the PKCS7 encoded certs.  The response\n * can optionally be base64 encoded by passing in a\n * non-zero value for the do_base_64 argument.  The caller\n * of this function should invoke BIO_free_all() on the\n * return value to avoid memory leaks.  Note, BIO_free() \n * will not be sufficient.\n */\nstatic BIO * est_get_certs_pkcs7 (BIO *in, int do_base_64)\n{\n    STACK_OF(X509) * cert_stack = NULL;\n    PKCS7_SIGNED *p7s = NULL;\n    PKCS7 *p7 = NULL;\n    BIO *out = NULL;\n    BIO *b64;\n    int buflen = 0;\n\n\n    /*\n     * Create a PKCS7 object \n     */\n    if ((p7 = PKCS7_new()) == NULL) {\n        EST_LOG_ERR(\"pkcs7_new failed\");\n\tgoto cleanup;\n    }\n    /*\n     * Create the PKCS7 signed object\n     */\n    if ((p7s = PKCS7_SIGNED_new()) == NULL) {\n        EST_LOG_ERR(\"pkcs7_signed_new failed\");\n\tgoto cleanup;\n    }\n    /*\n     * Set the version\n     */\n    if (!ASN1_INTEGER_set(p7s->version, 1)) {\n        EST_LOG_ERR(\"ASN1_integer_set failed\");\n\tgoto cleanup;\n    }\n\n    /*\n     * Create a stack of X509 certs\n     */\n    if ((cert_stack = sk_X509_new_null()) == NULL) {\n        EST_LOG_ERR(\"stack malloc failed\");\n\tgoto cleanup;\n    }\n\n    /*\n     * Populate the cert stack\n     */\n    if (est_add_certs_from_BIO(cert_stack, in) < 0) {\n        EST_LOG_ERR(\"Unable to load certificates\");\n\tossl_dump_ssl_errors();\n\tgoto cleanup;\n    }\n\n    /*\n     * Create the BIO which will receive the output\n     */\n    out = BIO_new(BIO_s_mem());\n    if (!out) {\n        EST_LOG_ERR(\"BIO_new failed\");\n\tgoto cleanup;\n    }\n\n    /*\n     * Add the base64 encoder if needed\n     */\n    if (do_base_64) {\n\tb64 = BIO_new(BIO_f_base64());\n        if (b64 == NULL) {\n            EST_LOG_ERR(\"BIO_new failed while attempting to create base64 BIO\");\n            ossl_dump_ssl_errors();\n            goto cleanup;\n        }    \n\tout = BIO_push(b64, out);\n    }\n\n    p7->type = OBJ_nid2obj(NID_pkcs7_signed);\n    p7->d.sign = p7s;\n    p7s->contents->type = OBJ_nid2obj(NID_pkcs7_data);\n    p7s->cert = cert_stack;\n\n    /*\n     * Convert from PEM to PKCS7\n     */\n    buflen = i2d_PKCS7_bio(out, p7);\n    if (!buflen) {\n        EST_LOG_ERR(\"PEM_write_bio_PKCS7 failed\");\n\tossl_dump_ssl_errors();\n\tBIO_free_all(out);\n        out = NULL;\n\tgoto cleanup;\n    }\n    (void)BIO_flush(out);\n\ncleanup:\n    /* \n     * Only need to cleanup p7.  This frees up the p7s and\n     * cert_stack allocations for us since these are linked\n     * to the p7.\n     */\n    if (p7) {\n        PKCS7_free(p7);\n    }\n\n    return out;\n}\n/*\n * Takes a raw char array containg the CA certificates, reads the data\n * in and loads the certificates on to the context as pkcs7 certs.  This is\n * stored on the EST context and used to respond to the /cacerts request,\n * which requires PKCS7 encoding.\n *\n * This function also loads the x509 store on the context used to\n * verify the peer.\n */\nEST_ERROR est_load_ca_certs (EST_CTX *ctx, unsigned char *raw, int size)\n{\n    BIO *cacerts = NULL;\n    BIO *in;\n    unsigned char *retval;\n\n    /*\n     * Only the server and proxy modes may load the cacerts response\n     */\n    if (ctx->est_mode == EST_CLIENT) {\n\treturn EST_ERR_BAD_MODE;\n    }\n\n    in = BIO_new_mem_buf(raw, size);\n    if (in == NULL) {\n        EST_LOG_ERR(\"Unable to open the raw cert buffer\");\n        return (EST_ERR_LOAD_CACERTS);\n    }\n\n    /*\n     * convert the CA certs to PKCS7 encoded char array\n     * This is used by an EST server to respond to the\n     * cacerts request.\n     */\n    cacerts = est_get_certs_pkcs7(in, 1);\n    if (!cacerts) {\n        EST_LOG_ERR(\"est_get_certs_pkcs7 failed\");\n        BIO_free(in);\n        return (EST_ERR_LOAD_CACERTS);\n    }\n\n    ctx->ca_certs_len = (int) BIO_get_mem_data(cacerts, (char**)&retval);\n    if (ctx->ca_certs_len <= 0) {\n        EST_LOG_ERR(\"Failed to copy PKCS7 data\");\n        BIO_free_all(cacerts);\n        BIO_free(in);\n        return (EST_ERR_LOAD_CACERTS);\n    }\n\n    ctx->ca_certs = malloc(ctx->ca_certs_len);\n    if (!ctx->ca_certs) {\n        EST_LOG_ERR(\"malloc failed\");\n        BIO_free_all(cacerts);\n        BIO_free(in);\n        return (EST_ERR_LOAD_CACERTS);\n    }\n    memcpy_s(ctx->ca_certs, ctx->ca_certs_len, retval, ctx->ca_certs_len);\n    BIO_free_all(cacerts);\n    BIO_free(in);\n    return (EST_ERR_NONE);\n}\n/*\n * Takes a char array containing the PEM encoded CA certificates,\n * both implicit and explict certs.  These are decoded and loaded\n * into the trusted_certs_store member on the EST context.  This cert\n * store is used by the TLS stack for peer verification at the TLS\n * layer.\n * Note: we do not include defensive code to check for NULL arguments\n *       because this function is not part of the public API.  These\n *       checks should have already been performed.\n */\nEST_ERROR est_load_trusted_certs (EST_CTX *ctx, unsigned char *certs, int certs_len)\n{\n    EST_ERROR rv;\n\n    /*\n     * Create the combined cert store on the context\n     * This contains both the implicit and explicit certs\n     */\n    ctx->trusted_certs_store = X509_STORE_new();\n    if (ctx->trusted_certs_store == NULL) {\n        EST_LOG_ERR(\"Unable to allocate combined cert store\");\n        return (EST_ERR_LOAD_TRUST_CERTS);\n    }\n    X509_STORE_set_verify_cb(ctx->trusted_certs_store, ossl_verify_cb);\n    rv = ossl_init_cert_store(ctx->trusted_certs_store, certs, certs_len);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Unable to populate combined cert store\");\n\treturn (rv);\n    }\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_set_ex_data() sets the application specific data\n    on the EST context. \n \n    @param ctx Pointer to an EST context\n    @param ex_data Pointer to application specific data that will be\n                   passed through to the EST callbacks.\n \n    @return EST_ERROR\n\n    This function is used to link application specific data to the\n    EST_CTX structure.  This can be used by an application to bind\n    application specific data to an EST operation.  libEST does \n    not use the application specific data.  The *ex_data pointer is\n    passed back to the application when libEST invokes the \n    enroll, re-enroll, CSR attributes, and HTTP auth callbacks.\n\n    libEST will not free the memory referenced by the *ex_data\n    parameter when est_destroy() is invoked.  The application is\n    responsible for releasing its application specific data. \n */\nEST_ERROR est_set_ex_data (EST_CTX *ctx, void *ex_data)\n{\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n    if (ctx->ex_data) {\n\tEST_LOG_WARN(\"ex_data was already set, possible memory leak\");\n    }\n    ctx->ex_data = ex_data;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_get_ex_data() retrieves the application specific data\n    on the EST context. \n \n    @param ctx Pointer to an EST context\n \n    @return void* \n\n    This function is used to attain a reference to the application \n    specific data on the EST_CTX structure.  This data should have\n    been set by invoking est_set_ex_data() earlier.  Otherwise it\n    will return NULL. \n */\nvoid * est_get_ex_data (EST_CTX *ctx)\n{\n    if (!ctx) {\n        return (NULL);\n    }\n    return (ctx->ex_data);\n}\n/*! @brief est_destroy() frees an EST context \n \n    @param ctx Pointer to an EST context\n \n    @return EST_ERROR\n\n    This function is used to release all the memory allocated under\n    the EST_CTX*.  This should be called last after performing EST\n    operations using the context.\n */\nEST_ERROR est_destroy (EST_CTX *ctx)\n{\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (ctx->trusted_certs_store != NULL) {\n        X509_STORE_free(ctx->trusted_certs_store);\n    }\n\n    if (ctx->ca_certs) {\n        free(ctx->ca_certs);\n    }\n\n    if (ctx->retrieved_ca_certs) {\n        free(ctx->retrieved_ca_certs);\n    }\n\n    if (ctx->retrieved_csrattrs) {\n        free(ctx->retrieved_csrattrs);\n    }\n\n    if (ctx->server_csrattrs) {\n        free(ctx->server_csrattrs);\n    }\n\n    if (ctx->enrolled_client_cert) {\n        free(ctx->enrolled_client_cert);\n    }\n\n    if (ctx->ca_chain_raw) {\n        free(ctx->ca_chain_raw);\n    }\n\n    if (ctx->uri_path_segment) {\n        free(ctx->uri_path_segment);\n    }\n\n    if (ctx->dh_tmp) {\n\tDH_free(ctx->dh_tmp);\n    }\n\n    /* Only free the SSL context when acting as a client.  When\n     * operating as a server, it's expected the web server\n     * will free the context */\n    if (ctx->ssl_ctx &&\n        ((ctx->est_mode == EST_CLIENT)||(ctx->est_mode == EST_PROXY))) {\n        /*\n         * If the SSL session had been cached, this means that\n         * SSL_get1_session() has been called, so now it needs to be explictly\n         * freed to get its ref count decrememnted.\n         */\n        if (ctx->sess) {\n            SSL_SESSION_free(ctx->sess);\n        }\n        SSL_CTX_free(ctx->ssl_ctx);\n    }\n\n    if (ctx->est_mode == EST_PROXY) {\n        proxy_cleanup(ctx);\n    }\n\n    /*\n     * And finally free the EST context itself\n     */\n    free(ctx);\n    return (EST_ERR_NONE);\n}\n/*\n * This routine is used to determine whether the BIO_FLAGS_BASE64_NO_NL \n * option needs to be used when using the OpenSSL\n * base64 decoder.  It takes a string as input and\n * checks if it contains newline characters.\n *\n * Returns 1 if OpenSSL should use the BIO_FLAGS_BASE64_NO_NL option\n * Returns 0 otherwise\n */\nstatic int est_base64_contains_nl (const char *src, int len)\n{\n    int i;\n\n    if (len < 64) {\n\t/* \n\t * Any base64 less than 64 bytes shouldn't be a \n\t * problem for OpenSSL since this is the minimum\n\t * line length for base64 encoding.\n\t */\n\treturn 0;\n    }\n\n    /*\n     * Start looking for newlines at the 64th position\n     */\n    for (i = 63; i < len-1; i++) {\n\tif (src[i] == 0xA) {\n\t    return 1;\n\t}\n    }\n    return 0;\n}\n/*\n * This routine is used to decode base64 encoded data.\n * Pass in the base64 encoded data and a pointer to a buffer\n * to receive the decoded data.  The length of the decoded \n * data is returned.  If the return value is zero or negative, then\n * an error occurred.  The dst_size parameter is the maximum\n * allowed size of the decoded data.\n */\nint est_base64_decode (const char *src, char *dst, int dst_size)\n{\n    BIO *b64, *b64in;\n    int len;\n    int max_in;\n\n    /*\n     * When decoding base64, the output will always be smaller by a\n     * ratio of 4:3.  Determine what the max size can be for the input\n     * based on the size of the given output buffer and then make sure that\n     * the actual input buffer is not too big.\n     */\n    max_in = ((dst_size * 4) / 3) + 1;\n    /*\n     * Get the length of the base64 encoded data.  Make sure it's not too\n     * big\n     */\n    len = strnlen_s(src, max_in+1); \n    if (len > max_in) {\n        EST_LOG_ERR(\"Source buffer for base64 decode is loo large for destination buffer. \"\n                    \"source buf len = %d, max input len = %d, max dest len = %d\",\n                    len, max_in, dst_size);\n\treturn (0);\n    }\n\n    b64 = BIO_new(BIO_f_base64());\n    if (b64 == NULL) {\n        EST_LOG_ERR(\"BIO_new failed while attempting to create base64 BIO\");\n        ossl_dump_ssl_errors();\n\treturn (0);\n    }\n    b64in = BIO_new_mem_buf((char *)src, len); \n    if (b64in == NULL) {\n        EST_LOG_ERR(\"BIO_new failed while attempting to create mem BIO\");\n        ossl_dump_ssl_errors();\n\treturn (0);\n    }\n    if (!est_base64_contains_nl (src, len)) {\n\t/*\n\t * Enable the no newlines option if the input\n\t * data doesn't contain any newline characters.\n\t * It's too bad OpenSSL doesn't do this implicitly.\n\t */\n        BIO_set_flags(b64,BIO_FLAGS_BASE64_NO_NL);\n    }\n    b64in = BIO_push(b64, b64in);\n    len = BIO_read(b64in, dst, dst_size);\n    if (len <= 0) {\n\tEST_LOG_WARN(\"BIO_read failed while decoding base64 data (%d)\", len);\n    } else {\n        /*\n         * Make sure the response is null terminated\n         */\n        dst[len] = 0;\n    }\n\n    BIO_free_all(b64in);\n    return (len);\n}\n/*\n * This routine is used to encode base64 data.\n * Pass in the unencoded data, the length of the source buffer,\n * and a pointer to a buffer to receive the encoded data.\n * The length of the encoded data is returned.  If the return value\n * is zero, then an error occurred.  The max_dest_len parameter\n * is the maximum allowed size of the encoded data.\n */\nint est_base64_encode (const char *src, int actual_src_len, char *dst,\n                       int max_dst_len)\n{\n    BIO *b64;\n    BIO *out;\n    int max_src_len;\n    int actual_dst_len = 0;\n    int write_cnt = 0;\n    BUF_MEM *bptr = NULL;\n    \n    /*\n     * When encoding base64, the output will always be larger by a\n     * ratio of 3:4.  Determine what the max size can be for the input\n     * based on the size of the given output buffer and then make sure that\n     * the actual input buffer is not too big.\n     */\n    max_src_len = ((max_dst_len * 3) / 4) + 1;\n    if (actual_src_len > max_src_len) {\n        EST_LOG_ERR(\"Source buffer for base64 encode is loo large for destination buffer. \"\n                    \"max source len = %d, actual_source len = %d\",\n                    max_src_len, actual_src_len);\n\treturn 0;\n    }\n\n    b64 = BIO_new(BIO_f_base64());\n    if (b64 == NULL) {\n        EST_LOG_ERR(\"BIO_new failed while attempting to create base64 BIO\");\n        ossl_dump_ssl_errors();\n        return 0;\n    }    \n\n    out = BIO_new(BIO_s_mem());\n    if (out == NULL) {\n        EST_LOG_ERR(\"BIO_new failed while attempting to create mem based BIO\");\n        ossl_dump_ssl_errors();\n        BIO_free_all(b64);\n        return 0;\n    }\n    out = BIO_push(b64, out);\n\n    /*\n     * We don't ever insert new lines\n     */\n    BIO_set_flags(out, BIO_FLAGS_BASE64_NO_NL);\n\n    /*\n     * Write the source buffer through the BIOs and then get a pointer\n     * to the resulting memory buffer on the other side to obtain the\n     * result.\n     */\n    write_cnt = BIO_write(out, src, actual_src_len);\n    (void)BIO_flush(out);\n    BIO_get_mem_ptr(out, &bptr);\n    if (write_cnt <= 0) {\n\tEST_LOG_WARN(\"BIO_write failed while encoding base64 data (%d)\", write_cnt);\n    } else {\n        /*\n         * copy out the resulting base64 encoded string, make sure it's\n         * null terminated, and return the length\n         */\n        memcpy_s(dst, max_dst_len, bptr->data, bptr->length);\n        dst[bptr->length] = '\\0';\n        actual_dst_len = bptr->length;\n    }\n\n    BIO_free_all(b64);\n    return (actual_dst_len);\n}\n/*\n * This routine is used to encode base64 data.\n * Pass in the unencoded data, the length of the source buffer,\n * and a pointer to a buffer to receive the encoded data.\n * The length of the encoded data is returned.  If the return value\n * is zero, then an error occurred.  The max_dest_len parameter\n * is the maximum allowed size of the encoded data.\n */\nchar * est_get_tls_uid (SSL *ssl, int is_client)\n{\n    char finished[MAX_FINISHED];\n    BIO *bio = NULL, *b64 = NULL;\n    BUF_MEM *bptr = NULL;\n    int len;\n    char *rv = NULL;\n\n    /*\n     * RFC5929 states the *first* finished message is used\n     * to derive the tls-unique-id.  When session resumption\n     * is used, the server sends the first finished message.\n     * Normally the client sends the first finished messaged.\n     */\n    if ((is_client && !SSL_session_reused(ssl)) ||\n        (!is_client && SSL_session_reused(ssl))) {\n        len = (int) SSL_get_finished(ssl, finished, MAX_FINISHED);\n    } else {\n        len = (int) SSL_get_peer_finished(ssl, finished, MAX_FINISHED);\n    }\n\n    b64 = BIO_new(BIO_f_base64());\n    if (b64 == NULL) {\n        EST_LOG_ERR(\"BIO_new failed while attempting to create base64 BIO\");\n        ossl_dump_ssl_errors();\n\treturn rv;\n    }\n    bio = BIO_new(BIO_s_mem());\n    if (bio == NULL) {\n        EST_LOG_ERR(\"BIO_new failed while attempting to create mem based BIO\");\n        ossl_dump_ssl_errors();\n\treturn rv;\n    }\n    (void)BIO_flush(bio);\n    bio = BIO_push(b64, bio);\n    BIO_write(bio, finished, len);\n    (void)BIO_flush(bio);\n    BIO_get_mem_ptr(bio, &bptr);\n\n    /*\n     * Be aware that OpenSSL adds a newline character at the\n     * end of the base64 encoded data\n     */\n    if (bptr->length != EST_TLS_UID_LEN) {\n        EST_LOG_WARN(\"TLS UID length mismatch (%d/%d)\", bptr->length,\n                     EST_TLS_UID_LEN);\n    } else {\n        rv = malloc(EST_TLS_UID_LEN + 1);\n        if (rv == NULL) {\n            EST_LOG_ERR(\"Failed to allocate buffer\");\n            return rv;\n        }    \n        memcpy_s(rv, EST_TLS_UID_LEN, bptr->data, EST_TLS_UID_LEN);\n        rv[EST_TLS_UID_LEN-1] = '\\0';\n        EST_LOG_INFO(\"TLS UID was found\");\n    }\n    BIO_free_all(bio);\n    return rv;\n}\n/*\n * This is a utility function to convert a hex value\n * to a string. This is used with the HTTP digest\n * authentication logic.\n */\nvoid est_hex_to_str (char *dst, unsigned char *src, int len)\n{\n    static const char *hex = \"0123456789abcdef\";\n\n    for (; len--; src++) {\n        *dst++ = hex[src[0] >> 4];\n        *dst++ = hex[src[0] & 0x0f];\n    }\n    *dst = '\\0';\n}\n/*! @brief est_enable_crl() is used by an application to enable \n    checking of a certificate revocation list when validating the client\n    TLS peer certificate during the TLS handshake. When enabled, \n    the ca_chain parameter provided to either est_server_init()\n    or est_client_init() should contain both the trusted certificates \n    along with the CRL entries.  The CRL entries should be appened\n    at the end.\n \n    @param ctx Pointer to the EST context\n\n    CRL checking is disabled by default.  This function must be called \n    after invoking est_server_init() or est_client_init() and prior \n    to performing any EST operations.  Therefore, there is no 'disable' \n    version of this method.  \n \n    @return EST_ERROR.\n */\nEST_ERROR est_enable_crl (EST_CTX *ctx)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->enable_crl = 1;\n    return (EST_ERR_NONE);\n}\n/*\n * est_asn1_sanity_test - perform a sanity test on the CSR\n * attribute string.  This function operates on an ASN.1 hex\n * string, so it should already be un-based64.\n *\n * return EST_ERROR and the presence of challengePassword\n */\nstatic \nEST_ERROR est_asn1_sanity_test (const unsigned char *string, long out_len, \n\t\t\t\tint *pop_present)\n{\n    int tag, xclass, j, nid;\n    long out_len_save = out_len;\n    long len;\n    const unsigned char *ostring = string;\n    ASN1_OBJECT *a_object;\n    int max_len = MAX_CSRATTRS;\n\n    /*\n     * Assume the challengePassword OID is not present\n     */\n    *pop_present = 0;\n\n    /* make sure its long enough to be ASN.1 */\n    if (out_len < MIN_ASN1_CSRATTRS) {\n        return (EST_ERR_BAD_ASN1_HEX_TOO_SHORT);\n    }\n\n    while (out_len > 0) {\n\tj = ASN1_get_object(&string, &len, &tag, &xclass, out_len);\n\n\tEST_LOG_INFO(\"Sanity: tag=%d, len=%d, j=%d, out_len=%d\", tag, len, j, out_len);\n\tif (j & 0x80) {\n\t    return (EST_ERR_BAD_ASN1_HEX);\n        }\n\tswitch (tag)\n\t{\n\tcase V_ASN1_OBJECT:\n            a_object = c2i_ASN1_OBJECT(NULL, &string, len);\n\t    if (a_object != NULL) {\n\t        nid = OBJ_obj2nid(a_object);\n\t\tEST_LOG_INFO(\"NID=%d\", nid);\n\t\tif (nid == NID_pkcs9_challengePassword) {\n\t            EST_LOG_INFO(\"challengePassword OID found\");\n\t\t    *pop_present = 1; /* just signifiy it's there */\n\t\t    max_len = MAX_CSRATTRS_WITHPOP;\n\t\t}\n\t\tASN1_OBJECT_free(a_object);\n            }\n\t    break;\n\tdefault:\n\t    /* have to adjust string pointer here */\n\t    string += len;\n\t    break;\n\tcase V_ASN1_SET:\n\tcase V_ASN1_SEQUENCE:\n\t    break;\n\t}\n\tout_len = (out_len_save - (string - ostring));\t\n    }\n    if (out_len != 0) {\n        return (EST_ERR_BAD_ASN1_HEX);\n    }\n    if (out_len_save > max_len) {\n        return (EST_ERR_BAD_ASN1_HEX_TOO_LONG);\n    }\n    return (EST_ERR_NONE);\n}\n/*\n * est_is_challengePassword_present - take a base64 \n * encoded ASN.1 string and scan through it to see \n * if challengePassword is included.\n *\n * return EST_ERROR and the presence of challengePassword\n */\nEST_ERROR est_is_challengePassword_present (const char *base64_ptr, int b64_len, int *presence)\n{\n\n    /* assume its not there */\n    *presence = 0;\n\n    /* just return if no data */\n    if ((base64_ptr == NULL) || (b64_len == 0)) {\n        return (EST_ERR_NONE);\n    }\n    return (est_asn1_parse_attributes(base64_ptr, b64_len, presence));\n}\n/*\n * est_asn1_parse_attributes - base64 decode and sanity test\n * the given attributes string\n *\n * return EST_ERROR and the presence of challengePassword\n */\nEST_ERROR est_asn1_parse_attributes (const char *p, int len, int *pop_present)\n{\n    unsigned char *der_ptr;\n    int der_len, rv;\n\n    /* \n     * check smallest possible base64 case here for now \n     * and sanity test will check min/max value for ASN.1 data\n     */\n    if (len < MIN_CSRATTRS) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    der_ptr = malloc(len*2);\n    if (!der_ptr) {\n        return (EST_ERR_MALLOC);\n    }\n\n    der_len = est_base64_decode(p, (char *)der_ptr, len*2);\n    if (der_len <= 0) {\n        EST_LOG_ERR(\"Invalid base64 encoded data\");\n\tfree(der_ptr);\n        return (EST_ERR_BAD_BASE64);\n    }\n\n    rv = est_asn1_sanity_test(der_ptr, der_len, pop_present);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Invalid ASN1 encoded data. rv = %d (%s)\",\n                    rv, EST_ERR_NUM_TO_STR(rv));\n\tfree(der_ptr);\n\treturn (rv);\n    }\n    free(der_ptr);\n    return (EST_ERR_NONE);\n}\n/* \n * est_add_challengePassword - caller has verified that challengePassword \n * is configured and not included, so add it to the attributes here.\n * No sanity check is needed since est_is_challengePassword_present\n * has already been called.\n */\nEST_ERROR est_add_challengePassword (const char *base64_ptr, int b64_len, \n\t\t\t\t     char **new_csr, int *pop_len)\n{\n    const unsigned char *der_ptr;\n    char *orig_ptr, *new_der = NULL, *csrattrs;\n    int der_len, tag, xclass, new_len;\n    long len;\n    int enc_len;\n\n    der_ptr = malloc(b64_len*2);\n    if (!der_ptr) {\n        return (EST_ERR_MALLOC);\n    }\n\n    der_len = est_base64_decode(base64_ptr, (char *)der_ptr, b64_len*2);\n    if (der_len <= 0) {\n        EST_LOG_ERR(\"Malformed base64 data\");\n\tfree((void *)der_ptr);\n        return (EST_ERR_MALLOC);\n    }\n\n    orig_ptr = (char *)der_ptr;\n\n    /* grab the first one and do the POP stuff */\n    (void)ASN1_get_object(&der_ptr, &len, &tag, &xclass, der_len);\n\n    if (tag != V_ASN1_SEQUENCE) {\n        EST_LOG_ERR(\"Malformed ASN.1 Hex, no leanding Sequence\");\n\tfree(orig_ptr);\n\treturn (EST_ERR_BAD_ASN1_HEX);\n    }\n\n    len = (char *)der_ptr - orig_ptr;\n    new_len = der_len - (int)len + sizeof(hex_chpw);\n\t    \n    /* remove leading sequence and length and copy to new buffer */\n    /* if >= 256 need 4 byte Seq header */\n    if ((der_len - len + sizeof(hex_chpw)) >= 256) {\n        new_len += 4;\n\tnew_der = malloc(new_len);\n\tif (!new_der) {\n\t    free(orig_ptr);\n\t    return (EST_ERR_MALLOC);\n\t}\n        memzero_s(new_der, new_len);\n\t*(new_der + 1) = 0x82;\n        *(new_der + 2) = (new_len - 4) >> 8;\n        *(new_der + 3) = ((new_len - 4) & 0xff);\n        memcpy_s(new_der+4, der_len - (unsigned int) len, der_ptr, der_len - (unsigned int)len);\n\t/* if <= 256, but >= 128 need 3 byte Seq header */\n    } else if ((der_len - len + sizeof(hex_chpw)) >= 128) {\n        new_len += 3;\n\tnew_der = malloc(new_len);\n\tif (!new_der) {\n\t    free(orig_ptr);\n\t    return (EST_ERR_MALLOC);\n\t}\n        memzero_s(new_der, new_len);\n        *(new_der + 1) = 0x81;\n        *(new_der + 2) = new_len - 3;\n        memcpy_s(new_der+3, der_len - ((rsize_t) len), der_ptr, der_len - ((rsize_t) len));\n        /* else just need 2 byte header */\n    } else {\n        new_len += 2;\n        new_der = malloc(new_len);\n\tif (!new_der) {\n\t    free(orig_ptr);\n\t    return (EST_ERR_MALLOC);\n\t}\n        memzero_s(new_der, new_len);\n        *(new_der + 1) = new_len - 2;\n\tif ((der_len - len) != 0) {\n            memcpy_s(new_der+2, der_len - ((rsize_t) len), der_ptr, der_len - ((rsize_t) len));\n\t}\n    }\n    *new_der = 0x30;\n    memcpy_s(new_der + (new_len - sizeof(hex_chpw)), sizeof(hex_chpw),\n\t     hex_chpw, sizeof(hex_chpw));\n\n    csrattrs = malloc(new_len*2);\n    if (!csrattrs) {\n        free(orig_ptr);\n        free(new_der);\n\treturn (EST_ERR_MALLOC);\n    }\n    memzero_s(csrattrs, new_len*2);\n    \n    enc_len = est_base64_encode((const char *)new_der, new_len, (char *)csrattrs, new_len*2);\n    if (enc_len <= 0) {\n        EST_LOG_ERR(\"Invalid base64 encoded data\");\n        free(orig_ptr);\n        free(new_der);\n        free(csrattrs);\n        return (EST_ERR_BAD_BASE64);\n    }\n\n    *new_csr = csrattrs;\n    *pop_len = (int) strnlen_s(csrattrs, new_len*2);\n    EST_LOG_INFO(\"CSR reconstituted attributes are(%d/%d): %s\", b64_len, *pop_len, csrattrs);\n\n    if (new_der) {\n        free(new_der);\n    }\n    if (orig_ptr) {\n        free(orig_ptr);\n    }\n    return (EST_ERR_NONE);\n}\n/*! @brief est_add_attributes_helper() Add a NID and its character string to\n    an X509_REQ as an attribute.\n \n    @param req an X509_REQ structure used for the CSR request\n    @param nid NID to be added as an attribute\n    @param string pointer to the NID string if needed\n    @param chtype type of string used with this NID\n \n    @return EST_ERROR\n\n    This function is used to add a CSR attribute to a CSR request by the\n    EST client.\n */\nEST_ERROR est_add_attributes_helper (X509_REQ *req, int nid, void *string, int chtype)\n{\n    \n    if (req == NULL) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    if (nid == 0) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    if (string == NULL) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    /* Only MBSTRING_ASC used today, but callers could pass in other values */\n    if (chtype == 0) {\n        chtype = MBSTRING_ASC;\n    }\n\n    if(!X509_REQ_add1_attr_by_NID(req, nid, chtype,\n\t\t\t\t  (unsigned char *)string, -1)) {\n\tEST_LOG_WARN(\"Error adding attribute\");\n\treturn (EST_ERR_X509_ATTR);\n    }\n    return (EST_ERR_NONE);\n}\n/*! @brief est_decode_attributes_helper() Decode a base64 encoded string\n    into DER format(ASN.1 hex).\n \n    @param csrattrs pointer to a base64 encoded string\n    @param csrattrs_len base64 string length\n    @param der_ptr pointer to a pointer to store the DER encoded string\n    @param der_len pointer to store the DER string length\n \n    @return EST_ERROR\n\n    This function is used decode a base64 encoded CSR attributes string\n    into DER format.  It also performs range checking on the input parameters.\n */\nEST_ERROR est_decode_attributes_helper (char *csrattrs, int csrattrs_len, \n\t\t\t\t\tunsigned char **der, int *len)\n{\n    unsigned char *der_ptr;\n    int der_len;\n\n    /* just return if no data */\n    if ((csrattrs == NULL) || (csrattrs_len == 0)) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    if ((der == NULL) || (len == NULL)) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    /* \n     * check smallest possible base64 case here for now \n     * and sanity test will check min/max value for ASN.1 data\n     */\n    if (csrattrs_len < MIN_CSRATTRS) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n\n    der_ptr = malloc(csrattrs_len*2);\n    if (!der_ptr) {\n        return (EST_ERR_MALLOC);\n    }\n\n    der_len = est_base64_decode(csrattrs, (char *)der_ptr, csrattrs_len*2);\n    if (der_len <= 0) {\n        EST_LOG_WARN(\"Invalid base64 encoded data\");\n\tfree(der_ptr);\n\treturn (EST_ERR_BAD_BASE64);\n    }\n\n    *der = der_ptr;\n    *len = der_len;\n\n    return (EST_ERR_NONE);\n\n}\n/*! @brief est_get_attributes_helper() get attributes NID from a DER\n    encoded string.\n \n    @param der_ptr pointer to a pointer of DER encoded string\n    @param der_len pointer to the DER encoded string length\n    @param new_nid pointer to storage for NID, if found\n \n    @return EST_ERROR\n\n    This function is used to find the next NID in a DER encoded string.\n    If no NID is found before reaching the end of the string, then\n    new_nid returned as zero and EST_ERR_BAD_ASN1_HEX.\n */\nEST_ERROR est_get_attributes_helper (unsigned char **der_ptr, int *der_len, int *new_nid)\n{\n    int tag, xclass, j, nid = 0;\n    int out_len_save;\n    long out_len;\n    long len;\n    const unsigned char *string;\n    const unsigned char *ostring;\n    ASN1_OBJECT *a_object = NULL;\n\n\n    if (der_ptr == NULL) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n    string = *der_ptr;\n    ostring = *der_ptr;\n\n    if (der_len == NULL) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n    out_len = *der_len;\n    out_len_save = *der_len;\n\n    if (new_nid == NULL) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    while (out_len > 0) {\n\tj = ASN1_get_object(&string, &len, &tag, &xclass, out_len);\n\n\tif (j & 0x80) {\n\t    return (EST_ERR_BAD_ASN1_HEX);\n        }\n\tswitch (tag) {\n\n\tcase V_ASN1_OBJECT:\n            a_object = c2i_ASN1_OBJECT(NULL, &string, len);\n\t    if (a_object != NULL) {\n\t        nid = OBJ_obj2nid(a_object);\n\t\tEST_LOG_INFO(\"NID=%d\", nid);\n\t\t*new_nid = nid;\n\t\t*der_len = (out_len_save - (int) (string - ostring));\n\t\t*der_ptr = (unsigned char *)string;\n\t        ASN1_OBJECT_free(a_object);\n\t\treturn (EST_ERR_NONE);\n            }\n\t    break;\n\tdefault:\n\t    /* have to adjust string pointer here */\n\t    string += len;\n\t    break;\n\tcase V_ASN1_SET:\n\tcase V_ASN1_SEQUENCE:\n\t    break;\n\t}\n\tout_len = (out_len_save - (string - ostring));\t\n    }\n\n    return (EST_ERR_NONE);\n}\n/* \n * cleanse_auth_credentials - Walk through the auth_credentials structure and\n * overwrite and free each value.\n */\nvoid cleanse_auth_credentials(EST_HTTP_AUTH_HDR *auth_cred)\n{\n\n    if (auth_cred == NULL) {\n        return;\n    }\n    \n    if (auth_cred->user) {\n        OPENSSL_cleanse(auth_cred->user, strnlen_s(auth_cred->user, MAX_UIDPWD));\n        free(auth_cred->user);\n        auth_cred->user = NULL;\n    }\n    \n    if (auth_cred->pwd) {\n        OPENSSL_cleanse(auth_cred->pwd, strnlen_s(auth_cred->pwd, MAX_UIDPWD));\n        free(auth_cred->pwd);\n        auth_cred->pwd = NULL;\n    }\n    \n    if (auth_cred->uri) {\n        OPENSSL_cleanse(auth_cred->uri, strnlen_s(auth_cred->uri, EST_URI_MAX_LEN));\n        free(auth_cred->uri);\n        auth_cred->uri = NULL;\n    }\n    \n    if (auth_cred->cnonce) {\n        OPENSSL_cleanse(auth_cred->cnonce, strnlen_s(auth_cred->cnonce, MAX_NONCE));\n        free(auth_cred->cnonce);\n        auth_cred->cnonce = NULL;\n    }\n    \n    if (auth_cred->qop) {\n        OPENSSL_cleanse(auth_cred->qop, strnlen_s(auth_cred->qop, MAX_QOP));\n        free(auth_cred->qop);\n        auth_cred->qop = NULL;\n    }\n    \n    if (auth_cred->nc) {\n        OPENSSL_cleanse(auth_cred->nc, strnlen_s(auth_cred->nc, MAX_NC));\n        free(auth_cred->nc);\n        auth_cred->nc = NULL;\n    }\n    \n    if (auth_cred->nonce) {\n        OPENSSL_cleanse(auth_cred->nonce, strnlen_s(auth_cred->nonce,\n                                                    MAX_NONCE));\n        free(auth_cred->nonce);\n        auth_cred->nonce = NULL;\n    }\n    \n    if (auth_cred->response) {\n        OPENSSL_cleanse(auth_cred->response, strnlen_s(auth_cred->response,\n                                                       MAX_RESPONSE));\n        free(auth_cred->response);\n        auth_cred->response = NULL;\n    }\n    \n    if (auth_cred->auth_token) {\n        OPENSSL_cleanse(auth_cred->auth_token, strnlen_s(auth_cred->auth_token,\n                                                         MAX_AUTH_TOKEN_LEN));\n        free(auth_cred->auth_token);\n        auth_cred->auth_token = NULL;\n    }        \n    \n    return;\n}\n/*\n * Given an input string, look for the four valid operations\n */\nEST_OPERATION est_parse_operation (char *op_path) \n{\n    EST_OPERATION operation;\n\n    if (!est_strcasecmp_s(op_path, EST_GET_CACERTS)) {\n        operation = EST_OP_CACERTS;\n    } else if (!est_strcasecmp_s(op_path, EST_GET_CSRATTRS)) {\n        operation = EST_OP_CSRATTRS;\n    } else if (!est_strcasecmp_s(op_path, EST_SIMPLE_ENROLL)) {\n        operation = EST_OP_SIMPLE_ENROLL;\n    } else if (!est_strcasecmp_s(op_path, EST_SIMPLE_REENROLL)) {\n        operation = EST_OP_SIMPLE_REENROLL;\n    } else {\n        operation = EST_OP_MAX;\n    }\n    \n    return (operation);\n}\n/*\n * Given an input string, look for the four valid operations\n */\nEST_ERROR est_parse_uri (char *uri, EST_OPERATION *operation,\n                         char **path_seg) \n{\n    /* char *path_seg_end; */\n    /* int   path_seg_len = 0; */\n    UriParserStateA state;\n    UriUriA parsed_uri;\n    EST_ERROR rv = EST_ERR_NONE;\n    int uriparse_rc;\n    errno_t safec_rc;    \n    int diff;\n\n    *path_seg = NULL;\n    state.uri = &parsed_uri;\n    uriparse_rc = uriParseUriA(&state, uri);\n    if (uriparse_rc != URI_SUCCESS) {\n        uriFreeUriMembersA(state.uri);\n        return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n    }\n\n    if (parsed_uri.pathHead) {\n        \n        /*\n         * validate the URI\n         * - parse the path-prefix (/.well-known/est)\n         * - look to see if there is a path segment extension\n         * - determine which operation it is\n         */        \n        UriPathSegmentA *cur_seg = parsed_uri.pathHead;\n        char *cur_seg_str = (char *)cur_seg->text.first;\n        int cur_seg_len = 0;\n        char *segment = NULL;\n        \n        safec_rc = memcmp_s(cur_seg_str, WELL_KNOWN_SEGMENT_LEN,\n                            \".well-known\", WELL_KNOWN_SEGMENT_LEN, &diff);\n        if (diff || safec_rc != EOK) {\n            EST_LOG_ERR(\"URI path does not start with %s, safec_rc = 0x%xO\\n\",\n                        WELL_KNOWN_SEGMENT, safec_rc);\n            uriFreeUriMembersA(state.uri);\n            return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n        }\n        \n        cur_seg = cur_seg->next;\n        cur_seg_str = (char *)cur_seg->text.first;\n        safec_rc = memcmp_s(cur_seg_str, EST_SEGMENT_LEN,\n                            \"est\", EST_SEGMENT_LEN, &diff);\n        if (diff || safec_rc != EOK) {\n            EST_LOG_ERR(\"URI does not contain %s segment 0x%xO\\n\",\n                        EST_SEGMENT, safec_rc);\n            uriFreeUriMembersA(state.uri);\n            return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n        }\n        \n        /*\n         * This next segment is either a segment extension\n         * or it's the operation \n         */\n        cur_seg = cur_seg->next;\n        cur_seg_str = (char *)cur_seg->text.first;\n\n        /*\n         * If there's another segment after this one then use it\n         * to find the end, else walk this one for the length\n         */\n        if (cur_seg->text.afterLast) {\n            cur_seg_len = ((char *)cur_seg->text.afterLast) - cur_seg_str;\n        } else {\n            cur_seg_len = strnlen_s(cur_seg_str, EST_MAX_PATH_SEGMENT_LEN+1);\n        }\n        if (cur_seg_len > EST_MAX_PATH_SEGMENT_LEN) {\n            EST_LOG_ERR(\"path segment exceeds maximum of %d\\n\",\n                        EST_MAX_PATH_SEGMENT_LEN);\n            uriFreeUriMembersA(state.uri);\n            return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n        }\n\n        /*\n         * See if the current segment needs to be put into its own\n         * string\n         */\n        if ((cur_seg->text.afterLast != NULL) &&\n            *(cur_seg->text.afterLast) != '\\0') {\n            segment = STRNDUP(cur_seg_str, cur_seg_len);\n        } else {\n            segment = STRNDUP(cur_seg_str, EST_MAX_PATH_SEGMENT_LEN);\n        }\n        \n        /*\n         * look to see if the operation path comes next:\n         * cacerts, csrattrs, simpleenroll, simplereenroll\n         */\n        *operation = est_parse_operation(segment);\n        if (*operation == EST_OP_MAX) {\n            \n            /*\n             * It wasn't one of the 4 known operations so\n             * it must be a path segment.  parse it out.\n             *\n             * Find the end of the path segment,\n             * determine the length,\n             * save it away\n             */\n            /* path_seg_end = (char *)cur_seg->text.afterLast; */\n            \n            /* if (path_seg_end != NULL) { */\n            /*     path_seg_len = path_seg_end - cur_seg_str; */\n            /* } */\n            \n            *path_seg = malloc(cur_seg_len+1);\n            if (*path_seg == NULL) {\n                free(segment);\n                uriFreeUriMembersA(state.uri);\n                return (EST_ERR_MALLOC);\n            }\n            \n            safec_rc = memcpy_s(*path_seg, cur_seg_len+1,\n                                segment, cur_seg_len);\n            if (safec_rc != EOK) {\n                EST_LOG_ERR(\"URI path seg could not copied into the context\");\n                free(segment);\n                free(*path_seg);\n                *path_seg = NULL;\n                uriFreeUriMembersA(state.uri);                \n                return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n            }\n            *((*path_seg)+cur_seg_len) = '\\0';\n            \n            /*\n             * now that we have the path segment parsed, try\n             * for the operation again.  jump over the path segment\n             * and the next '/'\n             */\n            cur_seg_str = cur_seg_str + cur_seg_len + 1;\n            *operation = est_parse_operation(cur_seg_str);\n            \n            if (*operation == EST_OP_MAX) {\n                /*\n                 * Operation code was suppose to be next but is not\n                 */\n                free(segment);\n                free(*path_seg);\n                *path_seg = NULL;\n                uriFreeUriMembersA(state.uri);                \n                return (EST_ERR_HTTP_BAD_REQ);\n            }\n        } else {\n            /*\n             * It was one of the operations, make sure it's the end\n             */\n            if ((cur_seg->text.afterLast != NULL) &&\n                *(cur_seg->text.afterLast) != '\\0') {\n                EST_LOG_ERR(\"Invalid path segment: contains an operation value\");\n                free(segment);\n                free(*path_seg);\n                *path_seg = NULL;\n                *operation = EST_OP_MAX;\n                uriFreeUriMembersA(state.uri);\n                return (EST_ERR_HTTP_INVALID_PATH_SEGMENT);\n            }\n        }\n        free(segment);\n        uriFreeUriMembersA(state.uri);        \n    }    \n    return (rv);\n}\n/*\n * Given an input string, look for the four valid operations\n */\nEST_ERROR est_parse_uri (char *uri, EST_OPERATION *operation,\n                         char **path_seg) \n{\n    EST_ERROR rc = EST_ERR_NONE;\n    *path_seg = NULL;\n    /*\n     * Assume that the uri is pointing to\n     *   /.well-known/est/<operation>\n     */\n    if (strncmp(uri, EST_CACERTS_URI, EST_URI_MAX_LEN) == 0) {\n        *operation = EST_OP_CACERTS;\n    } else if (strncmp(uri, EST_SIMPLE_ENROLL_URI, EST_URI_MAX_LEN) == 0) {\n        *operation = EST_OP_SIMPLE_ENROLL;\n    } else if (strncmp(uri, EST_RE_ENROLL_URI, EST_URI_MAX_LEN) == 0) {\n        *operation = EST_OP_SIMPLE_REENROLL;\n    } else if (strncmp(uri, EST_CSR_ATTRS_URI, EST_URI_MAX_LEN) == 0) {\n        *operation = EST_OP_CSRATTRS;\n    } else {\n        *operation = EST_OP_MAX;\n        rc = EST_ERR_HTTP_INVALID_PATH_SEGMENT;\n        \n    }\n    \n    return rc;\n}\n/*\n * Store the path segment into the context.\n */\nEST_ERROR est_store_path_segment (EST_CTX *ctx, char *path_segment,\n                                  int path_segment_len)\n{\n    /*\n     * reset what might already be cached\n     */\n    if (ctx->uri_path_segment) {\n        free(ctx->uri_path_segment);\n        ctx->uri_path_segment = NULL;\n    }\n    \n    ctx->uri_path_segment = malloc(strnlen_s(path_segment, path_segment_len)+1);\n    if (ctx->uri_path_segment == NULL) {\n        return EST_ERR_MALLOC;\n    }\n    \n    if (EOK != strncpy_s(ctx->uri_path_segment, path_segment_len+1,\n                         path_segment, path_segment_len)) {\n        return EST_ERR_HTTP_INVALID_PATH_SEGMENT;\n    }\n    ctx->uri_path_segment[path_segment_len] = '\\0';\n\n    return EST_ERR_NONE;   \n}\n/*\n * Store the path segment into the context.\n */\nint est_strcasecmp_s (char *s1, char *s2)\n{\n    errno_t safec_rc;\n    int diff;\n    \n    safec_rc = strcasecmp_s(s1, strnlen_s(s1, RSIZE_MAX_STR), s2, &diff);\n\n    if (safec_rc != EOK) {\n    \t/*\n    \t * Log that we encountered a SafeC error\n     \t */\n     \tEST_LOG_INFO(\"strcasecmp_s error 0x%xO\\n\", safec_rc);\n    } \n\n    return diff;\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcb5"},"name":"est_server_http.c","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc86"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca9"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcb2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcac"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc7f"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc82"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca0"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc92"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8e"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc95"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcd3"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcd0"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcc5"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcca"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbccc"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbccb"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcc2"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcd1"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcc1"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcc8"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbccf"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcc9"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcd2"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbccd"}],["test_raw",{"$oid":"5ea8c50bb2d857f8956dbcc6"}]],"contents":"static pthread_t pthread_self (void)\n{\n    return GetCurrentThreadId();\n}\nconst void* mg_get_conn_ssl (struct mg_connection *conn)\n{\n    return conn ? conn->ssl : NULL;\n}\nstatic void sockaddr_to_string (char *buf, size_t len,\n                                const union usa *usa)\n{\n    buf[0] = '\\0';\n#if defined(USE_IPV6)\n    inet_ntop(usa->sa.sa_family, usa->sa.sa_family == AF_INET ?\n              (void*)&usa->sin.sin_addr :\n              (void*)&usa->sin6.sin6_addr, buf, (socklen_t) len);\n#elif defined(_WIN32)\n    // Only Windoze Vista (and newer) have inet_ntop()\n    strncpy_s(buf, MAX_SRC_ADDR, inet_ntoa(usa->sin.sin_addr), len);\n#else\n    inet_ntop(usa->sa.sa_family, (void*)&usa->sin.sin_addr, buf, len);\n#endif\n}\n// Print error message to the opened error log stream.\nstatic void cry (struct mg_connection *conn, const char *fmt, ...)\n{\n    char buf[MG_BUF_LEN], src_addr[MAX_SRC_ADDR];\n    va_list ap;\n    time_t timestamp;\n\n    va_start(ap, fmt);\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    // Do not lock when getting the callback value, here and below.\n    // I suppose this is fine, since function cannot disappear in the\n    // same way string option can.\n    conn->request_info.ev_data = buf;\n    timestamp = time(NULL);\n\n    sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n    EST_LOG_ERR(\"[%010lu] [error] [client %s] \", (unsigned long)timestamp, src_addr);\n\n    if (conn->request_info.request_method != NULL) {\n        EST_LOG_ERR(\"%s %s: \", conn->request_info.request_method, conn->request_info.uri);\n    }\n    EST_LOG_ERR(\"%s\", buf);\n    conn->request_info.ev_data = NULL;\n}\n// is not applicable at the moment of logging.\nstatic struct mg_connection *fc (struct mg_context *ctx)\n{\n    static struct mg_connection fake_connection;\n\n    fake_connection.ctx = ctx;\n    return &fake_connection;\n}\n// is not applicable at the moment of logging.\nconst char *mg_version (void)\n{\n    return MONGOOSE_VERSION;\n}\n// is not applicable at the moment of logging.\nstruct mg_request_info *mg_get_request_info (struct mg_connection *conn)\n{\n    return &conn->request_info;\n}\n// is not applicable at the moment of logging.\nvoid mg_strlcpy (register char *dst, register const char *src, size_t n)\n{\n    for (; *src != '\\0' && n > 1; n--) {\n        *dst++ = *src++;\n    }\n    *dst = '\\0';\n}\n// is not applicable at the moment of logging.\nchar * mg_strndup(const char *ptr, size_t len) {\n\n\tchar *p;\n\n\tif ((p = (char *)malloc(len + 1)) != NULL) {\n\t\tmg_strlcpy(p, ptr, len + 1);\n\t}\n\n\treturn p;\n}\n// is not applicable at the moment of logging.\nstatic int lowercase (const char *s)\n{\n    return tolower(*(const unsigned char*)s);\n}\n// is not applicable at the moment of logging.\nstatic int mg_strncasecmp (const char *s1, const char *s2, size_t len)\n{\n    int diff = 0;\n\n    if (len > 0) {\n        do {\n            diff = lowercase(s1++) - lowercase(s2++);\n        } while (diff == 0 && s1[-1] != '\\0' && --len > 0);\n    }\n\n    return diff;\n}\n// is not applicable at the moment of logging.\nstatic int mg_strcasecmp (const char *s1, const char *s2)\n{\n    int diff;\n\n    do {\n        diff = lowercase(s1++) - lowercase(s2++);\n    } while (diff == 0 && s1[-1] != '\\0');\n\n    return diff;\n}\n// in his audit report.\nstatic int mg_vsnprintf (struct mg_connection *conn, char *buf, size_t buflen,\n                         const char *fmt, va_list ap)\n{\n    int n;\n\n    if (buflen == 0) {\n        return 0;\n    }\n\n    n = vsnprintf(buf, buflen, fmt, ap);\n\n    if (n < 0) {\n        cry(conn, \"vsnprintf error\");\n        n = 0;\n    } else if (n >= (int)buflen) {\n        cry(conn, \"truncating vsnprintf buffer: [%.*s]\",\n            n > 200 ? 200 : n, buf);\n        n = (int)buflen - 1;\n    }\n    buf[n] = '\\0';\n\n    return n;\n}\n//PRINTF_ARGS(4, 5);\nstatic int mg_snprintf (struct mg_connection *conn, char *buf, size_t buflen,\n                        const char *fmt, ...)\n{\n    va_list ap;\n    int n;\n\n    va_start(ap, fmt);\n    n = mg_vsnprintf(conn, buf, buflen, fmt, ap);\n    va_end(ap);\n\n    return n;\n}\n//PRINTF_ARGS(4, 5);\nstatic size_t est_strcspn(const char * str1,const char * str2){\n\n    rsize_t count;\n    errno_t safec_rc; \n\n    if ((str1 != NULL) && (str1[0] == '\\0')) {\n        return 0; \n    }\n\n    safec_rc = strcspn_s(str1, strnlen_s(str1, RSIZE_MAX_STR),\n            str2, RSIZE_MAX_STR, &count);\n    if (safec_rc != EOK) {\n        EST_LOG_INFO(\"strcspn_s error 0x%xO\\n\", safec_rc);\n        return 0;\n    }\n\n    return count; \n\n\n}\n//PRINTF_ARGS(4, 5);\nstatic size_t est_strspn(const char * str1,const char  * str2) {\n\n    rsize_t count;\n    errno_t safec_rc; \n\n    if ((str1 != NULL) && (str1[0] == '\\0')) {\n        return 0; \n    }\n\n    safec_rc = strspn_s(str1, strnlen_s(str1, RSIZE_MAX_STR), \n            str2, RSIZE_MAX_STR, &count);\n    if (safec_rc != EOK) {\n        EST_LOG_INFO(\"strspn_s error 0x%xO\\n\", safec_rc);\n        return 0; \n    }\n\n    return count; \n\n}\n// Delimiters can be quoted with quotechar.\nchar *skip_quoted (char **buf, const char *delimiters,\n                   const char *whitespace, char quotechar)\n{\n    char *p, *begin_word, *end_word, *end_whitespace;\n\n    begin_word = *buf;\n\n    end_word = begin_word + est_strcspn(begin_word,delimiters);\n\n    // Check for quotechar\n    if (end_word > begin_word) {\n        p = end_word - 1;\n        while (*p == quotechar) {\n            // If there is anything beyond end_word, copy it\n            if (*end_word == '\\0') {\n                *p = '\\0';\n                break;\n            } else {\n\n                rsize_t end_off = (rsize_t) est_strcspn(end_word + 1, delimiters);\n                memmove_s(p, end_off + 1, end_word, end_off + 1);\n                p += end_off; // p must correspond to end_word - 1\n                end_word += end_off + 1;\n            }\n        }\n        for (p++; p < end_word; p++) {\n            *p = '\\0';\n        }\n    }\n\n    if (*end_word == '\\0') {\n        *buf = end_word;\n    } else {\n\n        end_whitespace = end_word + 1 + est_strspn(end_word + 1, whitespace);\n\n        for (p = end_word; p < end_whitespace; p++) {\n            *p = '\\0';\n        }\n\n        *buf = end_whitespace;\n    }\n\n    return begin_word;\n}\n// and whitespace == delimiters\nchar *skip (char **buf, const char *delimiters)\n{\n    return skip_quoted(buf, delimiters, delimiters, 0);\n}\n// Return HTTP header value, or NULL if not found.\nstatic const char *get_header (const struct mg_request_info *ri,\n                               const char *name)\n{\n    int i;\n\n    for (i = 0; i < ri->num_headers; i++) {\n        if (!mg_strcasecmp(name, ri->http_headers[i].name)) {\n            return ri->http_headers[i].value;\n        }\n    }\n\n    return NULL;\n}\n// Return HTTP header value, or NULL if not found.\nconst char *mg_get_header (const struct mg_connection *conn, const char *name)\n{\n    return get_header(&conn->request_info, name);\n}\n// set up, for example if request parsing failed.\nstatic int should_keep_alive (const struct mg_connection *conn)\n{\n    const char *http_version = conn->request_info.http_version;\n    const char *header = mg_get_header(conn, \"Connection\");\n\n    /*\n     * Slight deviation from Mongoose behavior here.  We will close the\n     * connection when sending a 202 Accepted response.  We will also\n     * close the connection for any 4xx response, where Mongoose was only\n     * closing for the 401 Unauthorized\n     */\n    if (conn->must_close ||\n\tconn->status_code == EST_HTTP_STAT_202 ||\n        conn->status_code >= 400 ||\n        !conn->ctx->enable_keepalives ||\n        (header != NULL && mg_strcasecmp(header, \"keep-alive\") != 0) ||\n        (header == NULL && http_version && strncmp(http_version, \"1.1\", 3))) {\n        return 0;\n    }\n    return 1;\n}\n// set up, for example if request parsing failed.\nstatic const char *suggest_connection_header (const struct mg_connection *conn)\n{\n    return should_keep_alive(conn) ? \"keep-alive\" : \"close\";\n}\n// set up, for example if request parsing failed.\nvoid mg_send_http_error (struct mg_connection *conn, int status,\n                         const char *reason, const char *fmt, ...)\n{\n    char buf[MG_BUF_LEN];\n    va_list ap;\n    int len;\n\n    conn->status_code = status;\n    conn->request_info.ev_data = (void*)(long)status;\n    buf[0] = '\\0';\n    len = 0;\n\n    // Errors 1xx, 204 and 304 MUST NOT send a body\n    if (status > 199 && status != 204 && status != 304) {\n        len = mg_snprintf(conn, buf, sizeof(buf), \"Error %d: %s\", status, reason);\n        buf[len++] = '\\n';\n\n        va_start(ap, fmt);\n        len += mg_vsnprintf(conn, buf + len, sizeof(buf) - len, fmt, ap);\n        va_end(ap);\n    }\n    EST_LOG_INFO(\"[%s]\", buf);\n\n    mg_printf(conn, \"HTTP/1.1 %d %s\\r\\n\"\n              \"Content-Length: %d\\r\\n\"\n              \"Connection: %s\\r\\n\\r\\n\", status, reason, len,\n              suggest_connection_header(conn));\n    conn->num_bytes_sent += mg_printf(conn, \"%s\", buf);\n}\n// For Windows, change all slashes to backslashes in path names.\nstatic void change_slashes_to_backslashes (char *path)\n{\n    int i;\n\n    for (i = 0; path[i] != '\\0'; i++) {\n        if (path[i] == '/') {\n            path[i] = '\\\\';\n        }\n        // i > 0 check is to preserve UNC paths, like \\\\server\\file.txt\n        if (path[i] == '\\\\' && i > 0) {\n            while (path[i + 1] == '\\\\' || path[i + 1] == '/') {\n                (void)memmove_s(path + i + 1, EST_URI_MAX_LEN,\n                                path + i + 2, strnlen_s(path + i + 1, \n\t\t\t\t                      EST_URI_MAX_LEN));\n            }\n        }\n    }\n}\n// wbuf and wbuf_len is a target buffer and its length.\nstatic void to_unicode (const char *path, wchar_t *wbuf, size_t wbuf_len)\n{\n    char buf[PATH_MAX], buf2[PATH_MAX], *p;\n\n    mg_strlcpy(buf, path, sizeof(buf));\n    change_slashes_to_backslashes(buf);\n\n    // Point p to the end of the file name\n    p = buf + strnlen_s(buf, EST_URI_MAX_LEN) - 1;\n\n    // Convert to Unicode and back. If doubly-converted string does not\n    // match the original, something is fishy, reject.\n    memzero_s(wbuf, wbuf_len * sizeof(wchar_t));\n    MultiByteToWideChar(CP_UTF8, 0, buf, -1, wbuf, (int)wbuf_len);\n    WideCharToMultiByte(CP_UTF8, 0, wbuf, (int)wbuf_len, buf2, sizeof(buf2),\n                        NULL, NULL);\n    if (strcmp(buf, buf2) != 0) {\n        wbuf[0] = L'\\0';\n    }\n}\n// This function returns non-0 if path ends with some garbage.\nstatic int path_cannot_disclose_cgi (const char *path)\n{\n    static const char *allowed_last_characters = \"_-\";\n    int last = path[strnlen_s(path, EST_URI_MAX_LEN) - 1];\n\n    return isalnum(last) || strchr(allowed_last_characters, last) != NULL;\n}\n// This function returns non-0 if path ends with some garbage.\nstatic HANDLE dlopen (const char *dll_name, int flags)\n{\n    wchar_t wbuf[PATH_MAX];\n\n    flags = 0; // Unused\n    to_unicode(dll_name, wbuf, ARRAY_SIZE(wbuf));\n    return LoadLibraryW(wbuf);\n}\n// descriptor. Return number of bytes written.\nstatic int64_t push (FILE *fp, SOCKET sock, SSL *ssl, const char *buf,\n                     int64_t len)\n{\n    int64_t sent;\n    int n, k;\n\n    sent = 0;\n    while (sent < len) {\n\n        // How many bytes we send in this iteration\n        k = len - sent > INT_MAX ? INT_MAX : (int)(len - sent);\n\n        if (ssl != NULL) {\n            n = SSL_write(ssl, buf + sent, k);\n        } else if (fp != NULL) {\n            n = (int)fwrite(buf + sent, 1, (size_t)k, fp);\n            if (ferror(fp)) {\n                n = -1;\n            }\n        } else {\n            n = (int) send(sock, buf + sent, (size_t)k, MSG_NOSIGNAL);\n        }\n\n        if (n < 0) {\n            break;\n        }\n\n        sent += n;\n    }\n\n    return sent;\n}\n// reading, must give up and close the connection and exit serving thread.\nstatic int wait_until_socket_is_readable (struct mg_connection *conn)\n{\n    struct pollfd pfd;\n    int result;\n    int times_up = 0;\n    EST_UINT total_wait_time = 0;\n    EST_UINT read_timeout = conn->read_timeout * 1000;\n\n    do {\n        /* accumlate the total amount of time waited */\n        total_wait_time += MSEC_POLL_WAIT_TIME;\n\n        pfd.fd = conn->client.sock;\n        pfd.events = POLLIN;\n        pfd.revents = 0;\n\n        errno = 0;\n        result = POLL(&pfd, 1, MSEC_POLL_WAIT_TIME);\n        if (result == 0 && conn->ssl != NULL) {\n            result = SSL_pending(conn->ssl);\n        }\n        \n        /*\n         * check to see if it's time to give up.  If it is, set\n         * things accordingly to close the session down\n         */\n        if ((total_wait_time > read_timeout) && result == 0) {\n            times_up = 1;\n            conn->must_close = 1;\n            result = -1;\n        }\n        /*\n         * Continue waiting,\n         * - while there's nothing to read from the socket or\n         *   the poll was interrupted by a signal AND\n         * - the master process has not indicated to stop AND\n         * - the waiting for read timeout has not occurred\n         */                \n    } while ((result == 0 || (result < 0 && ERRNO == EINTR)) &&\n             conn->ctx->stop_flag == 0 &&\n             !times_up);\n\n    return conn->ctx->stop_flag || result < 0 ? 0 : 1;\n}\n// Return negative value on error, or number of bytes read on success.\nstatic int pull (FILE *fp, struct mg_connection *conn, char *buf, int len)\n{\n    int nread;\n    int err_cd;\n\n    if (fp != NULL) {\n        // Use read() instead of fread(), because if we're reading from the CGI\n        // pipe, fread() may block until IO buffer is filled up. We cannot afford\n        // to block and must pass all read bytes immediately to the client.\n        nread = (int) read(fileno(fp), buf, (size_t)len);\n    } else if (!conn->must_close && !wait_until_socket_is_readable(conn)) {\n        nread = -1;\n    } else if (conn->ssl != NULL) {\n        nread = SSL_read(conn->ssl, buf, len);\n\terr_cd = SSL_get_error(conn->ssl ,nread);\n\tswitch(err_cd) {\n\tcase SSL_ERROR_NONE:\n\t    /* Nothing to do, it's a graceful shutdown */\n\t    break;\n\tcase SSL_ERROR_WANT_READ:\n\t    /*\n\t     * More data may be coming, change nread to zero\n\t     * so Mongoose will attempt to read more data\n\t     * from the peer.  This would occur if the peer\n\t     * initiated an SSL renegotation.\n\t     */\n\t    nread = 0;\n\t    break;\n\tcase SSL_ERROR_WANT_X509_LOOKUP:\n\t    EST_LOG_ERR(\"SSL_read error, wants lookup\\n\");\n\t    break;\n\tdefault:\n\t    /*\n\t     * For all other errors, simply log the error\n\t     * and make sure nread is -1 to indicate an\n\t     * error to the function above us.\n\t     */\n\t    EST_LOG_ERR(\"SSL_read error, code: %d\\n\", err_cd);\n\t    nread = -1;\n\t    break;\n\t}\n    } else {\n        nread = (int) recv(conn->client.sock, buf, (size_t)len, 0);\n    }\n\n    return conn->ctx->stop_flag ? -1 : nread;\n}\n// Return negative value on error, or number of bytes read on success.\nint mg_read (struct mg_connection *conn, void *buf, size_t len)\n{\n    int n, buffered_len, nread;\n    const char *body;\n    rsize_t max_len;\n\n    nread = 0;\n    max_len = (rsize_t) len;\n    if (conn->consumed_content < conn->content_len) {\n        // Adjust number of bytes to read.\n        int64_t to_read = conn->content_len - conn->consumed_content;\n        if (to_read < (int64_t)len) {\n            len = (size_t)to_read;\n        }\n\n        // Return buffered data\n        body = conn->buf + conn->request_len + conn->consumed_content;\n        buffered_len = (int) (&conn->buf[conn->data_len] - body);\n        if (buffered_len > 0) {\n            if (len < (size_t)buffered_len) {\n                buffered_len = (int)len;\n            }\n            memcpy_s(buf, max_len, body, (rsize_t)buffered_len);\n            len -= buffered_len;\n            conn->consumed_content += buffered_len;\n            nread += buffered_len;\n            buf = (char*)buf + buffered_len;\n        }\n\n        // We have returned all buffered data. Read new data from the remote socket.\n        while (len > 0) {\n            n = pull(NULL, conn, (char*)buf, (int)len);\n            if (n < 0) {\n                nread = n; // Propagate the error\n                break;\n            } else if (n > 0) {\n                buf = (char*)buf + n;\n                conn->consumed_content += n;\n                nread += n;\n                len -= n;\n            } else {\n                /* n == 0. retry */\n            }   \n        }\n    }\n    return nread;\n}\n// Return negative value on error, or number of bytes read on success.\nint mg_write (struct mg_connection *conn, const void *buf, size_t len)\n{\n    int64_t total;\n\n    total = push(NULL, conn->client.sock, conn->ssl, (const char*)buf,\n                 (int64_t)len);\n    return (int)total;\n}\n// Return negative value on error, or number of bytes read on success.\nint mg_printf (struct mg_connection *conn, const char *fmt, ...)\n{\n    char mem[MG_BUF_LEN], *buf = mem;\n    int len;\n    va_list ap;\n\n    // Print in a local buffer first, hoping that it is large enough to\n    // hold the whole message\n    va_start(ap, fmt);\n    len = vsnprintf(mem, sizeof(mem), fmt, ap);\n    va_end(ap);\n\n    if (len == 0) {\n        // Do nothing. mg_printf(conn, \"%s\", \"\") was called.\n    } else if (len < 0) {\n        // vsnprintf() error, give up\n        len = -1;\n        cry(conn, \"%s(%s, ...): vsnprintf() error\", __func__, fmt);\n    } else if (len > (int)sizeof(mem) && (buf = (char*)malloc(len + 1)) != NULL) {\n        // Local buffer is not large enough, allocate big buffer on heap\n        va_start(ap, fmt);\n        vsnprintf(buf, len + 1, fmt, ap);\n        va_end(ap);\n        len = mg_write(conn, buf, (size_t)len);\n        free(buf);\n    } else if (len > (int)sizeof(mem)) {\n        // Failed to allocate large enough buffer, give up\n        cry(conn, \"%s(%s, ...): Can't allocate %d bytes, not printing anything\",\n            __func__, fmt, len);\n        len = -1;\n    } else {\n        // Copy to the local buffer succeeded\n        len = mg_write(conn, buf, (size_t)len);\n    }\n\n    return len;\n}\n// http://ftp.ics.uci.edu/pub/ietf/html/rfc1866.txt\nstatic int url_decode (const char *src, int src_len, char *dst,\n                       int dst_len, int is_form_url_encoded)\n{\n    int i, j, a, b;\n\n#define HEXTOI(x) (isdigit(x) ? x - '0' : x - 'W')\n\n    for (i = j = 0; i < src_len && j < dst_len - 1; i++, j++) {\n        if (src[i] == '%' &&\n            isxdigit(*(const unsigned char*)(src + i + 1)) &&\n            isxdigit(*(const unsigned char*)(src + i + 2))) {\n            a = tolower(*(const unsigned char*)(src + i + 1));\n            b = tolower(*(const unsigned char*)(src + i + 2));\n            dst[j] = (char)((HEXTOI(a) << 4) | HEXTOI(b));\n            i += 2;\n        } else if (is_form_url_encoded && src[i] == '+') {\n            dst[j] = ' ';\n        } else {\n            dst[j] = src[i];\n        }\n    }\n\n    dst[j] = '\\0'; // Null-terminate the destination\n\n    return i >= src_len ? j : -1;\n}\n//   >0  actual request length, including last \\r\\n\\r\\n\nstatic int get_request_len (const char *buf, int buflen)\n{\n    const char *s, *e;\n    int len = 0;\n\n    for (s = buf, e = s + buflen - 1; len <= 0 && s < e; s++) {\n        // Control characters are not allowed but >=128 is.\n        if (!isprint(*(const unsigned char*)s) && *s != '\\r' &&\n            *s != '\\n' && *(const unsigned char*)s < 128) {\n            len = -1;\n            break; // [i_a] abort scan as soon as one malformed character is found; don't let subsequent \\r\\n\\r\\n win us over anyhow\n        } else if (s[0] == '\\n' && s[1] == '\\n') {\n            len = (int)(s - buf) + 2;\n        } else if (s[0] == '\\n' && &s[1] < e &&\n                   s[1] == '\\r' && s[2] == '\\n') {\n            len = (int)(s - buf) + 3;\n        }\n    }\n\n    return len;\n}\n// excessive '/' and '\\' characters\nstatic void remove_double_dots_and_double_slashes (char *s)\n{\n    char *p = s;\n\n    while (*s != '\\0') {\n        *p++ = *s++;\n        if (s[-1] == '/' || s[-1] == '\\\\') {\n            // Skip all following slashes, backslashes and double-dots\n            while (s[0] != '\\0') {\n                if (s[0] == '/' || s[0] == '\\\\') {\n                    s++;\n                } else if (s[0] == '.' && s[1] == '.') {\n                    s += 2;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n    *p = '\\0';\n}\n/*\n * Performs parsing of HTTP Authentication header from\n * the client when Basic authentication is used.\n */\nstatic void mg_parse_auth_hdr_basic (struct mg_connection *conn, \n\t\t\t\t     const char *auth_header,\n\t                             EST_HTTP_AUTH_HDR *ah)\n{\n    char *value, *s;\n    char *save_ptr;\n    char both[MAX_UIDPWD*2+2]; /* will contain both UID and PWD */\n    rsize_t len;\n    char *sep = \":\";\n    int colon_found;\n    char *possible_pw;\n    \n    s = (char *) auth_header + 6;\n\n    // Gobble initial spaces\n    while (isspace(*(unsigned char*)s)) {\n\ts++;\n    }\n    value = s;\n\n    len = est_base64_decode(value, both, (MAX_UIDPWD * 2 + 2));\n    if (len <= 0) {\n\tEST_LOG_WARN(\"Base64 decode of HTTP auth header failed, HTTP auth will fail\");\n\treturn;\n    }\n\n    /*\n     * Make sure there's a ':' in the string\n     */\n    colon_found = strstr_s(both, len, \":\", 1, &possible_pw);\n    if (colon_found != EOK) {\n\tEST_LOG_WARN(\"Invalid format of Basic HTTP credentials, missing :\");\n        memzero_s(both, (MAX_UIDPWD*2+2));\n\treturn;\n    }\n\n    /*\n     * did it start with a colon, meaning no userid?\n     */\n    if (both[0] == ':') {\n        if (len > 1) {\n            /* just a password */\n            possible_pw++;\n            ah->pwd = STRNDUP(possible_pw, MAX_UIDPWD);\n            EST_LOG_INFO(\"HTTP Authentication header contains only password\");\n        } else {\n            /* We got neither userid nor password */\n            EST_LOG_INFO(\"HTTP Authentication header contains no userid or password\");            \n            memzero_s(both, (MAX_UIDPWD*2+2));\n            return;\n        }\n    } else {\n        /* Started with a userid, \n         * Parse the username and password, which are separated by a \":\"\n         */\n        value = strtok_s(both, &len, sep, &save_ptr);\n        if (value) {\n            ah->user = STRNDUP(value, MAX_UIDPWD);\n            ah->pwd = STRNDUP(save_ptr, MAX_UIDPWD);\n        }\n    }\n    ah->mode = AUTH_BASIC;\n    \n    memzero_s(both, (MAX_UIDPWD*2+2));\n}\n/*\n * Performs parsing of HTTP Authentication header from\n * the client when Digest authentication is used.\n */\nstatic void mg_parse_auth_hdr_digest (struct mg_connection *conn, \n\t\t\t\t      const char *auth_header,\n\t                              EST_HTTP_AUTH_HDR *ah)\n{\n    char *name, *value, *s;\n    char buf[MAX_AUTH_HDR_LEN];\n    int i;\n\n    ah->mode = AUTH_DIGEST;\n\n    // Make modifiable copy of the auth header\n    strncpy_s(buf, MAX_AUTH_HDR_LEN, auth_header + 7, MAX_AUTH_HDR_LEN);\n    s = buf;\n\n    // Parse authorization header\n    while (1) {\n        // Gobble initial spaces\n        while (isspace(*(unsigned char*)s)) {\n\t    s++;\n\t}\n\tname = skip_quoted(&s, \"=\", \" \", 0);\n\t// Value is either quote-delimited, or ends at first comma or space.\n\tif (s[0] == '\\\"') {\n\t    s++;\n\t    value = skip_quoted(&s, \"\\\"\", \" \", '\\\\');\n\t    if (s[0] == ',') {\n\t\ts++;\n\t    }\n\t} else {\n\t    value = skip_quoted(&s, \", \", \" \", 0); // IE uses commas, FF uses spaces\n\t}\n\tif (*name == '\\0') {\n\t    break;\n\t}\n\n        memcmp_s(name, 8, \"username\", 8, &i);\n        if (!i) {\n\t    ah->user = STRNDUP(value, MAX_UIDPWD);\n\t    continue;\n\t} \n\n        memcmp_s(name, 6, \"cnonce\", 6, &i);\n\tif (!i) {\n            ah->cnonce = STRNDUP(value, MAX_NONCE);\n\t    continue;\n\t} \n\n\tmemcmp_s(name, 8, \"response\", 8, &i);\n\tif (!i) {\n            ah->response = STRNDUP(value, MAX_RESPONSE);\n\t    continue;\n        } \n\n\tmemcmp_s(name, 3, \"uri\", 3, &i);\n\tif (!i) {\n\t    ah->uri = STRNDUP(value, MAX_REALM);\n\t    continue;\n\t} \n\n\tmemcmp_s(name, 3, \"qop\", 3, &i);\n\tif (!i) {\n            ah->qop = STRNDUP(value, MAX_QOP);\n\t    continue;\n\t} \n\n\tmemcmp_s(name, 2, \"nc\", 2, &i);\n\tif (!i) {\n\t    ah->nc = STRNDUP(value, MAX_NC);\n\t    continue;\n        } \n\n\tmemcmp_s(name, 5, \"nonce\", 5, &i);\n\tif (!i) {\n\t    ah->nonce = STRNDUP(value, MAX_NONCE);\n\t}\n    }\n}\n/*\n * Performs parsing of HTTP Authentication header from\n * the client when Token(bearer) authentication is used.\n */\nstatic void mg_parse_auth_hdr_token (struct mg_connection *conn, \n\t\t\t\t     const char *auth_header,\n\t                             EST_HTTP_AUTH_HDR *ah)\n{\n    char *value, *s;\n    char value_decoded[MAX_AUTH_TOKEN_LEN*2];\n    int len;\n    \n    s = (char *) auth_header + (strlen(EST_BEARER_TOKEN_STR)-1);\n\n    // Gobble initial spaces\n    while (isspace(*(unsigned char*)s)) {\n\ts++;\n    }\n\n    value = s;\n    memzero_s(value_decoded, MAX_AUTH_TOKEN_LEN*2);\n    len = est_base64_decode(value, value_decoded, (MAX_AUTH_TOKEN_LEN*2));\n    if (len <= 0) {\n\tEST_LOG_WARN(\"Base64 decode of HTTP auth credentials failed, HTTP auth will fail\");\n\treturn;\n    }\n\n    if (*s != '\\0') {\n        /*Copy the token into the auth header structure. */\n        ah->auth_token = STRNDUP(value_decoded, MAX_AUTH_TOKEN_LEN);\n        ah->mode = AUTH_TOKEN;\n        if (ah->auth_token == NULL) {\n            EST_LOG_ERR(\"Failed to obtain memory for authentication token buffer\");\n        }\n    } else {\n\tEST_LOG_ERR(\"Authentication header from client contained no Token\");\n    }   \n}\n/*\n * This function parses the HTTP Authentication header\n * from the client.  It will fill in the fields on the\n * EST_HTTP_AUTH_HDR struct, which are used later for\n * verifying the user's credentials using either HTTP\n * Basic or HTTP Digest authentication. The ah parameter\n * should already be allocated when calling this function.\n *\n * Return either good, bad, or missing \n */\nEST_HTTP_AUTH_HDR_RESULT mg_parse_auth_header (struct mg_connection *conn, \n                                               EST_HTTP_AUTH_HDR *ah)\n{\n    const char *auth_header;\n\n    /*\n     * Get the Auth header from the HTTP client \n     */\n    if ((auth_header = mg_get_header(conn, \"Authorization\")) == NULL) {\n\treturn EST_AUTH_HDR_MISSING;\n    }\n\n    if (mg_strncasecmp(auth_header, \"Digest \", 7) == 0) {\n\t/* Make sure server is configured for digest auth */\n\tif (conn->ctx->est_ctx->auth_mode != AUTH_DIGEST) {\n\t    return EST_AUTH_HDR_BAD;\n\t}\n\tmg_parse_auth_hdr_digest(conn, auth_header, ah); \n    } else if (mg_strncasecmp(auth_header, \"Basic \", 6) == 0) {\n\t/* Make sure server is configured for basic auth */\n\tif (conn->ctx->est_ctx->auth_mode != AUTH_BASIC) {\n\t    return EST_AUTH_HDR_BAD;\n\t}\n\tmg_parse_auth_hdr_basic(conn, auth_header, ah);\n    } else if (mg_strncasecmp(auth_header, EST_BEARER_TOKEN_STR,\n                              strlen(EST_BEARER_TOKEN_STR)) == 0) {\n\t/* Make sure server is configured for bearer(token) auth */\n\tif (conn->ctx->est_ctx->auth_mode != AUTH_TOKEN) {\n\t    return EST_AUTH_HDR_BAD;\n\t}\n\tmg_parse_auth_hdr_token(conn, auth_header, ah);\n    } else {\n\t/* Only Basic, Digest and Bearer Token authentication are supported */\n\tah->mode = AUTH_FAIL;\n        return EST_AUTH_HDR_BAD;\n    }\n\n    /* \n     * If we're doing digest auth, make sure all the values\n     * were parsed\n     */\n    if (ah->mode == AUTH_DIGEST && (!ah->uri ||\n\t\t                    !ah->nonce ||\n\t\t\t\t    !ah->nc ||\n\t\t\t\t    !ah->cnonce)) {\n\tEST_LOG_ERR(\"Parsing of HTTP auth header failed\");\n\treturn EST_AUTH_HDR_BAD;\n    }\n\n    /* If we were not able to parse a user ID and we're not\n     * in token auth mode, then make sure we fail the authentication.\n     */\n    if (ah->user == NULL && ah->mode != AUTH_TOKEN) {\n        return EST_AUTH_HDR_BAD;\n    }\n\n    if (ah->mode != AUTH_TOKEN) {   \n        /*\n         * Save the user ID on the connection context.\n         * We will want to pass this to the CA later.\n         */\n        strncpy_s(conn->user_id, MG_UID_MAX, ah->user, MG_UID_MAX);\n    }\n    \n    return EST_AUTH_HDR_GOOD;\n}\n/*\n * This function parses the HTTP Authentication header\n * from the client.  It will fill in the fields on the\n * EST_HTTP_AUTH_HDR struct, which are used later for\n * verifying the user's credentials using either HTTP\n * Basic or HTTP Digest authentication. The ah parameter\n * should already be allocated when calling this function.\n *\n * Return either good, bad, or missing \n */\nvoid mg_send_authorization_request (struct mg_connection *conn)\n{\n    conn->status_code = 401;\n    switch (conn->ctx->est_ctx->auth_mode) {\n    case AUTH_BASIC:\n\tmg_printf(conn,\n              \"%s\\r\\n\"\n              \"%s: 0\\r\\n\"\n              \"%s: Basic realm=\\\"%s\\\"\\r\\n\\r\\n\",\n\t      EST_HTTP_HDR_401,\n\t      EST_HTTP_HDR_CL,\n\t      EST_HTTP_HDR_AUTH,\n              conn->ctx->est_ctx->realm);\n\tbreak;\n    case AUTH_DIGEST:\n\tmg_printf(conn,\n              \"%s\\r\\n\"\n              \"%s: 0\\r\\n\"\n              \"%s: Digest qop=\\\"auth\\\", \"\n              \"realm=\\\"%s\\\", nonce=\\\"%lu\\\"\\r\\n\\r\\n\",\n\t      EST_HTTP_HDR_401,\n\t      EST_HTTP_HDR_CL,\n\t      EST_HTTP_HDR_AUTH,\n              conn->ctx->est_ctx->realm,\n              (unsigned long)time(NULL));\n\tbreak;\n    case AUTH_TOKEN:\n\tmg_printf(conn,\n              \"%s\\r\\n\"\n              \"%s: 0\\r\\n\"\n              \"%s: Bearer realm=\\\"%s\\\"\\r\\n\\r\\n\",\n\t      EST_HTTP_HDR_401,\n\t      EST_HTTP_HDR_CL,\n\t      EST_HTTP_HDR_AUTH,\n              conn->ctx->est_ctx->realm);\n\tbreak;\n    case AUTH_FAIL:\n    case AUTH_NONE:\n    default:\n\t/* These modes are not valid at this point\n\t * nothing to do here. */\n\tbreak;\n    }\n}\n// where parsing stopped.\nstatic void parse_http_headers (char **buf, struct mg_request_info *ri)\n{\n    int i;\n\n    for (i = 0; i < (int)ARRAY_SIZE(ri->http_headers); i++) {\n        ri->http_headers[i].name = skip_quoted(buf, \":\", \" \", 0);\n        ri->http_headers[i].value = skip(buf, \"\\r\\n\");\n        if (ri->http_headers[i].name[0] == '\\0') {\n            break;\n        }\n        ri->num_headers = i + 1;\n    }\n}\n// where parsing stopped.\nstatic int is_valid_http_method (const char *method)\n{\n    /* EST only allows GET & POST */\n    return !strncmp(method, \"GET\", 3) || !strncmp(method, \"POST\", 4);\n}\n// HTTP request components, header names and header values.\nstatic int parse_http_message (char *buf, int len, struct mg_request_info *ri)\n{\n    int request_length = get_request_len(buf, len);\n\n    if (request_length > 0) {\n        // Reset attributes. DO NOT TOUCH is_ssl, remote_ip, remote_port\n        ri->request_method = ri->uri = ri->http_version = NULL;\n        ri->num_headers = 0;\n\n        buf[request_length - 1] = '\\0';\n\n        // RFC says that all initial whitespaces should be ingored\n        while (*buf != '\\0' && isspace(*(unsigned char*)buf)) {\n            buf++;\n        }\n        ri->request_method = skip(&buf, \" \");\n        ri->uri = skip(&buf, \" \");\n        ri->http_version = skip(&buf, \"\\r\\n\");\n        parse_http_headers(&buf, ri);\n    }\n    EST_LOG_INFO(\"request_len=%d\", request_length);\n    EST_LOG_INFO(\"request uri=%s\", ri->uri);\n    return request_length;\n}\n// HTTP request components, header names and header values.\nstatic int parse_http_request (char *buf, int len, struct mg_request_info *ri)\n{\n    int result = parse_http_message(buf, len, ri);\n\n    if (result > 0 &&\n        is_valid_http_method(ri->request_method) &&\n        !strncmp(ri->http_version, \"HTTP/\", 5)) {\n        ri->http_version += 5; // Skip \"HTTP/\"\n    } else {\n        result = -1;\n    }\n    return result;\n}\n// Upon every read operation, increase nread by the number of bytes read.\nstatic int read_request (FILE *fp, struct mg_connection *conn,\n                         char *buf, int bufsiz, int *nread)\n{\n    int request_len, n = 1;\n\n    request_len = get_request_len(buf, *nread);\n    while (*nread < bufsiz && request_len == 0 && n >= 0) {\n        n = pull(fp, conn, buf + *nread, bufsiz - *nread);\n        if (n > 0) {\n            *nread += n;\n            request_len = get_request_len(buf, *nread);\n        }\n    }\n\n    if (n < 0) {\n        // recv() error -> propagate error; do not process a b0rked-with-very-high-probability request\n        return -1;\n    }\n    return request_len;\n}\n/*\n * This function is called by the Mongoose code when an\n * incoming HTTP request is processed.\n * Returns 0 on success, non-zero if the request wasn't\n * handled.\n */\nstatic int est_mg_handler (struct mg_connection *conn)\n{\n    const struct mg_request_info *request_info = mg_get_request_info(conn);\n    EST_CTX *ectx = conn->ctx->est_ctx;\n    char *body;\n    int cl;\n    int est_rv = EST_ERR_NONE;\n    const char *cl_hdr; /* content length html header */\n    const char *ct_hdr; /* content type html header */\n\n    cl_hdr = mg_get_header(conn, \"Content-Length\");\n    if (cl_hdr) {\n        /*\n         * At this point, Content-Length value has already been\n         * error checked and is guaranteed to be within the correct\n         * range.  Obtain the length, allocate the buffer for the\n         * body, and read it in.\n         */\n        cl = atoi(cl_hdr);\n        body = malloc(cl+1);\n        mg_read(conn, body, cl);\n\t/* Make sure the buffer is null terminated */\n\tbody[cl] = 0x0;\n    } else {\n        cl = 0;\n        body = NULL;\n    }\n    ct_hdr = mg_get_header(conn, \"Content-Type\");\n    if (ectx->est_mode == EST_SERVER) {\n        est_rv = est_http_request(ectx, conn,\n                                  (char*)request_info->request_method,\n                                  (char*)request_info->uri, body, cl, ct_hdr);\n    } else if (ectx->est_mode == EST_PROXY) {\n        est_rv = est_proxy_http_request(ectx, conn,\n                                        (char*)request_info->request_method,\n                                        (char*)request_info->uri, body, cl, ct_hdr);\n    }\n    if (est_rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"EST error response code: %d (%s)\\n\", \n\t\t    est_rv, EST_ERR_NUM_TO_STR(est_rv));\n    }\n    if (cl_hdr) {\n        free(body);\n    }\n    return est_rv;\n}\n// a directory, or call embedded function, etcetera.\nstatic void handle_request (struct mg_connection *conn)\n{\n    struct mg_request_info *ri = &conn->request_info;\n    int uri_len;\n    int rv;\n\n    if ((conn->request_info.query_string = strchr(ri->uri, '?')) != NULL) {\n        *((char*)conn->request_info.query_string++) = '\\0';\n    }\n    uri_len = (int)strnlen_s(ri->uri, EST_URI_MAX_LEN);\n    url_decode(ri->uri, uri_len, (char*)ri->uri, uri_len + 1, 0);\n    remove_double_dots_and_double_slashes((char*)ri->uri);\n\n    EST_LOG_INFO(\"%s\", ri->uri);\n    /*\n     * Process the request\n     */\n    rv = est_mg_handler(conn);\n    if (EST_ERR_NONE != rv) {\n\tEST_LOG_WARN(\"Incoming request failed rv=%d (%s)\", \n\t\t     rv, EST_ERR_NUM_TO_STR(rv));\n    }\n}\n// a directory, or call embedded function, etcetera.\nstatic void log_header (const struct mg_connection *conn, const char *header)\n{\n    const char *header_value;\n\n    if ((header_value = mg_get_header(conn, header)) == NULL) {\n        EST_LOG_INFO(\"%s\", \" -\");\n    } else {\n        EST_LOG_INFO(\" \\\"%s\\\"\", header_value);\n    }\n}\n// a directory, or call embedded function, etcetera.\nstatic void log_access (const struct mg_connection *conn)\n{\n    const struct mg_request_info *ri;\n    char date[64], src_addr[20];\n\n\n    strftime(date, sizeof(date), \"%d/%b/%Y:%H:%M:%S %z\",\n             localtime(&conn->birth_time));\n\n    ri = &conn->request_info;\n\n    sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n    EST_LOG_INFO(\"%s [%s] \\\"%s %s HTTP/%s\\\" %d %\" INT64_FMT,\n                 src_addr, date,\n                 ri->request_method ? ri->request_method : \"-\",\n                 ri->uri ? ri->uri : \"-\", ri->http_version,\n                 conn->status_code, conn->num_bytes_sent);\n    log_header(conn, \"Referer\");\n    log_header(conn, \"User-Agent\");\n}\n// Return OpenSSL error message\nstatic const char *ssl_error (void)\n{\n    unsigned long err;\n\n    err = ERR_get_error();\n    return err == 0 ? \"\" : ERR_error_string(err, NULL);\n}\n// Dynamically load SSL library. Set up ctx->ssl_ctx pointer.\nstatic int set_ssl_option (struct mg_context *ctx)\n{\n    struct mg_connection *conn;\n    EST_CTX *ectx;\n    SSL_CTX *ssl_ctx;\n    EC_KEY *ecdh = NULL;\n    X509_VERIFY_PARAM *vpm = NULL;\n    char sic[12] = \"EST\";\n\n    if ((ssl_ctx = SSL_CTX_new(SSLv23_server_method())) == NULL) {\n        cry(fc(ctx), \"SSL_CTX_new (server) error: %s\", ssl_error());\n        return 0;\n    }\n    ctx->ssl_ctx = ssl_ctx;\n    ectx = ctx->est_ctx;\n\n    conn = fc(ctx);\n    conn->request_info.ev_data = ctx->ssl_ctx;\n\n\n    SSL_CTX_set_verify(ssl_ctx, SSL_VERIFY_PEER, NULL);\n\n    /*\n     * Set the Session ID context to enable OpenSSL session\n     * reuse, which improves performance.  We set the ID to\n     * ESTxxxxxxxx, where the x values are random numbers\n     */\n    if (!RAND_bytes((unsigned char*)&sic[3], 8)) {\n\tEST_LOG_WARN(\"RNG failure while setting SIC: %s\", ssl_error());\n    }\n    SSL_CTX_set_session_id_context(ssl_ctx, (void*)&sic, 11);\n\n    // load in the CA cert(s) used to verify client certificates\n    SSL_CTX_set_cert_store(ssl_ctx, ectx->trusted_certs_store);\n    //The ssl code will free this store from ssl_ctx later\n    ectx->trusted_certs_store = NULL;  \n\n    /*\n     * Note that we disable TLS tickets, which is another\n     * way to reuse TLS sessions to avoid all the key exchange\n     * overhead of the TLS handshake.  We've enabled session\n     * reuse above.  But session reuse will not \n     * work when ticket support is enabled on the server.\n     * We may want to look into enabling tickets\n     * in the future, but for now the session reuse\n     * above gives us a performance boost.\n     *\n     * The other options set here are to improve forward\n     * secrecty and comply with the EST draft.\n     */\n\n    SSL_CTX_set_options(ssl_ctx, SSL_OP_NO_SSLv2 |\n                        SSL_OP_NO_SSLv3 |\n                        SSL_OP_NO_TLSv1 |\n                        SSL_OP_SINGLE_ECDH_USE |\n                        SSL_OP_NO_TICKET);\n\n\n    /* \n     * Set the ECDH single use parms.  Use the configured\n     * curve, or use prime256v1 as the default.\n     */\n    if (ectx->ecdhe_nid) {\n\t/* Setup the user selected curve */\n\tecdh = EC_KEY_new_by_curve_name(ectx->ecdhe_nid);\n\tEST_LOG_INFO(\"Using non-default ECDHE curve (nid=%d)\", ectx->ecdhe_nid);\n    } else {\n\t/* Default to prime256 curve */\n\tecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);\n\tEST_LOG_INFO(\"Using default ECDHE curve (prime256v1)\");\n    }\n    if (ecdh == NULL) {\n        EST_LOG_ERR(\"Failed to generate temp ecdh parameters\\n\");\n        return 0;\n    }\n    SSL_CTX_set_tmp_ecdh(ssl_ctx, ecdh);\n    EC_KEY_free(ecdh);\n\n    /*\n     * Setup additional cert checks including CRL, depth\n     * and purpose.\n     */\n    vpm = X509_VERIFY_PARAM_new();\n    /* Enable CRL checks */\n    if (ectx->enable_crl) {\n\tX509_VERIFY_PARAM_set_flags(vpm, X509_V_FLAG_CRL_CHECK |\n                                    X509_V_FLAG_CRL_CHECK_ALL);\n    }\n    X509_VERIFY_PARAM_set_depth(vpm, EST_TLS_VERIFY_DEPTH);\n    /* Note: the purpose is only checked when the keyusage\n     * value is present in the client's cert */\n    X509_VERIFY_PARAM_set_purpose(vpm, X509_PURPOSE_SSL_CLIENT);\n    SSL_CTX_set1_param(ssl_ctx, vpm);\n    X509_VERIFY_PARAM_free(vpm);\n\n    /*\n     * Set the single-use DH parameters if the application\n     * has requested this capability.\n     */\n    if (ectx->dh_tmp) {\n\tSSL_CTX_set_options(ssl_ctx, SSL_OP_SINGLE_DH_USE);\n\tSSL_CTX_set_tmp_dh(ssl_ctx, ectx->dh_tmp);\n\tDH_free(ectx->dh_tmp);\n\tectx->dh_tmp = NULL;\n    }\n\n    if (ectx->enable_srp) {\n\tEST_LOG_INFO(\"Enabling TLS SRP mode\\n\");\n\tif (!SSL_CTX_set_cipher_list(ssl_ctx, EST_CIPHER_LIST_SRP_SERVER)) { \n\t    EST_LOG_ERR(\"Failed to set SSL cipher suites\\n\");\n\t    return 0;\n\t}\n\t/*\n\t * Set the application specific handler for\n\t * providing the SRP parameters during user \n\t * authentication.\n\t */\n\tSSL_CTX_set_srp_username_callback(ssl_ctx, ectx->est_srp_username_cb);\n    } else {\n\tEST_LOG_INFO(\"TLS SRP not enabled\");\n\t/*\n\t * Set the TLS cipher suites that should be allowed.\n\t * This disables anonymous and null ciphers\n\t */\n\tif (!SSL_CTX_set_cipher_list(ssl_ctx, EST_CIPHER_LIST)) { \n\t    EST_LOG_ERR(\"Failed to set SSL cipher suites\\n\");\n\t    return 0;\n\t}\n    }\n\n    if (SSL_CTX_use_certificate(ssl_ctx, ectx->server_cert) == 0) {\n\tEST_LOG_ERR(\"Unable to set server certificate\");\n        return 0;\n    }\n    if (SSL_CTX_use_PrivateKey(ssl_ctx, ectx->server_priv_key) == 0) {\n\tEST_LOG_ERR(\"Unable to set server private key\");\n        return 0;\n    }\n\n    /*\n     * There should be no need to include the cert chain for the\n     * server's certificate in the TLS Certificate message from\n     * the server.  The reason is the EST draft specifies that\n     * all the subordinate CA certs should be included in the\n     * cacerts message flow.  Hence, the client will already have\n     * the full cert chain.  Therfore, the TLS handshake will only\n     * contain the server's cert, not the full chain. \n     *\n      SSL_CTX_use_certificate_chain_file(ctx->ssl_ctx,\n                                         ctx->est_ctx->http_cert_file);\n     */\n\n    return 1;\n}\n// Dynamically load SSL library. Set up ctx->ssl_ctx pointer.\nstatic void reset_per_request_attributes (struct mg_connection *conn)\n{\n    conn->path_info = conn->request_info.ev_data = NULL;\n    conn->num_bytes_sent = conn->consumed_content = 0;\n    conn->status_code = -1;\n    conn->must_close = conn->request_len = 0;\n}\n// Dynamically load SSL library. Set up ctx->ssl_ctx pointer.\nstatic int is_valid_uri (const char *uri)\n{\n    // Conform to http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n    // URI can be an asterisk (*) or should start with slash.\n    return uri[0] == '/' || (uri[0] == '*' && uri[1] == '\\0');\n}\n// Dynamically load SSL library. Set up ctx->ssl_ctx pointer.\nstatic void process_new_connection (struct mg_connection *conn)\n{\n    struct mg_request_info *ri = &conn->request_info;\n    int keep_alive_enabled, keep_alive, discard_len;\n    const char *cl;\n\n    keep_alive_enabled = conn->ctx->enable_keepalives;\n    keep_alive = 0;\n\n    // Important: on new connection, reset the receiving buffer. Credit goes\n    // to crule42.\n    conn->data_len = 0;\n    do {\n        reset_per_request_attributes(conn);\n        conn->request_len = read_request(NULL, conn, conn->buf, conn->buf_size,\n                                         &conn->data_len);\n        assert(conn->request_len < 0 || conn->data_len >= conn->request_len);\n        if (conn->request_len == 0 && conn->data_len == conn->buf_size) {\n            send_http_error(conn, 413, \"Request Too Large\", \"%s\", \"\");\n            return;\n        }\n        if (conn->request_len <= 0) {\n            return; // Remote end closed the connection\n        }\n        if (parse_http_request(conn->buf, conn->buf_size, ri) <= 0 ||\n            !is_valid_uri(ri->uri)) {\n            // Do not put garbage in the access log, just send it back to the client\n            send_http_error(conn, 400, \"Bad Request\",\n                            \"Cannot parse HTTP request: [%.*s]\", conn->data_len, conn->buf);\n            conn->must_close = 1;\n        } else if (strncmp(ri->http_version, \"1.0\", 3) &&\n                   strncmp(ri->http_version, \"1.1\", 3)) {\n            // Request seems valid, but HTTP version is strange\n            send_http_error(conn, 505, \"HTTP version not supported\", \"%s\", \"\");\n            log_access(conn);\n        } else {\n            // Request is valid, handle it\n            if ((cl = get_header(ri, \"Content-Length\")) != NULL) {\n                conn->content_len = strtoll(cl, NULL, 10);\n            } else if (!mg_strcasecmp(ri->request_method, \"POST\") ||\n                       !mg_strcasecmp(ri->request_method, \"PUT\")) {\n                conn->content_len = -1;\n            } else {\n                conn->content_len = 0;\n            }\n            /*\n             * Ensure that the content-length value is a size that\n             * the EST code is willing to accept\n             */\n            if (conn->content_len > EST_MAX_CONTENT_LEN) {\n                EST_LOG_WARN(\"HTTP request content length greater than EST\"\n                             \" maximum supported content length (%d)\", \n                             EST_MAX_CONTENT_LEN);                \n                send_http_error(conn, 413, \"Content-Length too large\", \"%s\", \"\");\n                log_access(conn);\n            } else if (conn->content_len < 0) {\n                EST_LOG_WARN(\"HTTP request content length is a negative value\");\n                send_http_error(conn, 400, \"Bad Request\",\n                                \"Content-Length is negative\",\n                                conn->data_len, conn->buf);\n                log_access(conn);\n            } else {\n                conn->birth_time = time(NULL);\n                handle_request(conn);\n                log_access(conn);\n            } \n        }\n\n        // NOTE(lsm): order is important here. should_keep_alive() call\n        // is using parsed request, which will be invalid after memmove's below.\n        // Therefore, memorize should_keep_alive() result now for later use\n        // in loop exit condition.\n        keep_alive = should_keep_alive(conn);\n\n        // Discard all buffered data for this request\n        discard_len = conn->content_len >= 0 &&\n                      conn->request_len + conn->content_len < (int64_t)conn->data_len ?\n                      (int)(conn->request_len + conn->content_len) : conn->data_len;\n\tif ((conn->data_len - discard_len) > 0) {\n\t    memmove_s(conn->buf, MAX_REQUEST_SIZE,\n\t\t      conn->buf + discard_len, conn->data_len - discard_len);\n\t}\n        conn->data_len -= discard_len;\n        assert(conn->data_len >= 0);\n        assert(conn->data_len <= conn->buf_size);\n\n    } while (conn->ctx->stop_flag == 0 &&\n             keep_alive_enabled &&\n             conn->content_len >= 0 &&\n             keep_alive);\n}\n/*! @brief est_server_handle_request() is used by an application \n    to process an EST request.  The application is responsible\n    for opening a listener socket.  When an EST request comes in\n    on the socket, the application uses this function to hand-off\n    the request to libEST.\n\n    @param ctx Pointer to the EST_CTX, which was provided\n               when est_server_init()  or est_proxy_init() was invoked.\n    @param fd File descriptor that will be read to retrieve the\n              HTTP request from the client.  This is typically\n\t      a TCP socket file descriptor.\n\n    est_server_handle_request() is used by an application \n    when an incoming EST request needs to be processed.  This request\n    would be a cacerts, simpleenroll, reenroll, or csrattrs request. \n    This is used when implementing an EST server.  The application \n    is responsible for opening and listening to a TCP socket for\n    incoming EST requests.  When data is ready to be read from\n    the socket, this API entry point should be used to allow libEST\n    to read the request from the socket and respond to the request.\n \n\n    @return EST_ERROR.\n*/\nEST_ERROR est_server_handle_request (EST_CTX *ctx, int fd)\n{\n    struct mg_connection *conn;\n    struct socket accepted;\n    socklen_t len;\n    char ipstr[INET6_ADDRSTRLEN];\n    int port;\n    struct sockaddr_storage addr;\n    int ssl_err, err_code;\n    EST_ERROR rv = EST_ERR_NONE;\n    int rc;\n\n    if (!ctx) {\n        EST_LOG_ERR(\"Null EST context\");\n        return (EST_ERR_NO_CTX);\n    }\n    if (!ctx->mg_ctx) {\n        EST_LOG_ERR(\"Null EST MG context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    accepted.sock = fd;\n    accepted.next = NULL;\n    \n    len = sizeof(struct sockaddr_storage);\n    rc = getpeername(fd, (struct sockaddr*)&addr, &len);\n    if (rc < 0) {\n\tEST_LOG_ERR(\"getpeername() failed\");\n\t/* This should never happen, not sure what would cause this */\n\treturn (EST_ERR_UNKNOWN);\n    }\n    // deal with both IPv4 and IPv6:\n    if (addr.ss_family == AF_INET) {\n        memcpy_s(&accepted.rsa.sin, sizeof(struct sockaddr_in),\n\t\t &addr, sizeof(struct sockaddr_in));\n        port = ntohs(accepted.rsa.sin.sin_port);\n        inet_ntop(AF_INET, &accepted.rsa.sin.sin_addr, ipstr, sizeof ipstr);\n    } else { // AF_INET6\n        memcpy_s(&accepted.rsa.sin6, sizeof(struct sockaddr_in6),\n\t\t &addr, sizeof(struct sockaddr_in6));\n        port = ntohs(accepted.rsa.sin6.sin6_port);\n        inet_ntop(AF_INET6, &accepted.rsa.sin6.sin6_addr, ipstr, sizeof ipstr);\n    }\n    EST_LOG_INFO(\"Peer IP address: %s\", ipstr);\n    EST_LOG_INFO(\"Peer port      : %d\", port);\n\n    conn = (struct mg_connection*)calloc(1, sizeof(*conn) + MAX_REQUEST_SIZE);\n    if (conn == NULL) {\n        cry(fc(ctx->mg_ctx), \"%s\", \"Cannot create new connection struct, OOM\");\n\treturn (EST_ERR_MALLOC);\n    } else {\n        conn->buf_size = MAX_REQUEST_SIZE;\n        conn->buf = (char*)(conn + 1);\n\n        conn->client = accepted;\n        conn->birth_time = time(NULL);\n        conn->ctx = ctx->mg_ctx;\n        conn->read_timeout = ctx->server_read_timeout;\n\n        // Fill in IP, port info early so even if SSL setup below fails,\n        // error handler would have the corresponding info.\n        conn->request_info.remote_port = ntohs(conn->client.rsa.sin.sin_port);\n        memcpy_s(&conn->request_info.remote_ip, 4,\n                 &conn->client.rsa.sin.sin_addr.s_addr, 4);\n        conn->request_info.remote_ip = ntohl(conn->request_info.remote_ip);\n        conn->request_info.is_ssl = 1;\n\n        /*\n         * EST require TLS,  Setup the TLS tunnel\n         */\n        conn->ssl = SSL_new(conn->ctx->ssl_ctx);\n        if (conn->ssl != NULL) {\n            SSL_set_fd(conn->ssl, conn->client.sock);\n            ssl_err = SSL_accept(conn->ssl); \n            if (ssl_err <= 0) {\n\t\terr_code = SSL_get_error(conn->ssl, ssl_err);\n\t\tswitch (err_code) {\n\t\tcase SSL_ERROR_SYSCALL:\n\t\t    EST_LOG_ERR(\"OpenSSL system call error\");\n\t\t    rv = EST_ERR_SYSCALL;\n\t\t    break;\n\t\tcase SSL_ERROR_SSL:\n\t\t    /* Some unknown OpenSSL error, dump the \n\t\t     * OpenSSL error log to learn more about this */\n\t\t    ossl_dump_ssl_errors();\n\t\t    rv = EST_ERR_UNKNOWN;\n\t\t    break;\n\t\tcase SSL_ERROR_WANT_READ:\n\t\tcase SSL_ERROR_WANT_WRITE:\n\t\t    EST_LOG_INFO(\"App using non-blocking socket\");\n\t\t    process_new_connection(conn);\n\t\t    break;\n\t\tcase SSL_ERROR_WANT_X509_LOOKUP:\n\t\t    EST_LOG_ERR(\"SSL_accept error, wants lookup\");\n\t\t    rv = EST_ERR_UNKNOWN;\n\t\t    break;\n\t\tcase SSL_ERROR_NONE:\n\t\tdefault:\n\t\t    break;\n\t\t}\n\t    } else {\n\t\tprocess_new_connection(conn);\n\t    }\n            ssl_err = SSL_shutdown(conn->ssl);\n\t    switch (ssl_err) {\n\t    case 0:\n\t\t/* OpenSSL docs say to call shutdown again for this case */\n\t\tSSL_shutdown(conn->ssl);\n\t\tEST_LOG_INFO(\"Two-phase SSL_shutdown initiated\");\n\t\tbreak;\n\t    case 1:\n\t\t/* Nothing to do, shutdown worked */\n\t\tEST_LOG_INFO(\"SSL_shutdown succeeded\");\n\t\tbreak;\n\t    default:\n\t\t/* Log an error */\n\t\tEST_LOG_WARN(\"SSL_shutdown failed\");\n\t\tbreak;\n\t    }\n            SSL_free(conn->ssl);\n            conn->ssl = NULL;\n        }\n        memzero_s(conn, sizeof(*conn) + MAX_REQUEST_SIZE);\n        free(conn);\n    }\n    return (rv);\n}\n/*! @brief est_server_handle_request() is used by an application \n    to process an EST request.  The application is responsible\n    for opening a listener socket.  When an EST request comes in\n    on the socket, the application uses this function to hand-off\n    the request to libEST.\n\n    @param ctx Pointer to the EST_CTX, which was provided\n               when est_server_init()  or est_proxy_init() was invoked.\n    @param fd File descriptor that will be read to retrieve the\n              HTTP request from the client.  This is typically\n\t      a TCP socket file descriptor.\n\n    est_server_handle_request() is used by an application \n    when an incoming EST request needs to be processed.  This request\n    would be a cacerts, simpleenroll, reenroll, or csrattrs request. \n    This is used when implementing an EST server.  The application \n    is responsible for opening and listening to a TCP socket for\n    incoming EST requests.  When data is ready to be read from\n    the socket, this API entry point should be used to allow libEST\n    to read the request from the socket and respond to the request.\n \n\n    @return EST_ERROR.\n*/\nstatic void free_context (struct mg_context *ctx)\n{\n    // Deallocate SSL context\n    if (ctx->ssl_ctx != NULL) {\n        SSL_CTX_free(ctx->ssl_ctx);\n    }\n\n    // Deallocate context itself\n    free(ctx);\n}\n/*! @brief est_server_handle_request() is used by an application \n    to process an EST request.  The application is responsible\n    for opening a listener socket.  When an EST request comes in\n    on the socket, the application uses this function to hand-off\n    the request to libEST.\n\n    @param ctx Pointer to the EST_CTX, which was provided\n               when est_server_init()  or est_proxy_init() was invoked.\n    @param fd File descriptor that will be read to retrieve the\n              HTTP request from the client.  This is typically\n\t      a TCP socket file descriptor.\n\n    est_server_handle_request() is used by an application \n    when an incoming EST request needs to be processed.  This request\n    would be a cacerts, simpleenroll, reenroll, or csrattrs request. \n    This is used when implementing an EST server.  The application \n    is responsible for opening and listening to a TCP socket for\n    incoming EST requests.  When data is ready to be read from\n    the socket, this API entry point should be used to allow libEST\n    to read the request from the socket and respond to the request.\n \n\n    @return EST_ERROR.\n*/\nvoid mg_stop (struct mg_context *ctx)\n{\n    ctx->stop_flag = 1;\n\n    free_context(ctx);\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n    (void)WSACleanup();\n#endif // _WIN32\n}\n/*! @brief est_server_handle_request() is used by an application \n    to process an EST request.  The application is responsible\n    for opening a listener socket.  When an EST request comes in\n    on the socket, the application uses this function to hand-off\n    the request to libEST.\n\n    @param ctx Pointer to the EST_CTX, which was provided\n               when est_server_init()  or est_proxy_init() was invoked.\n    @param fd File descriptor that will be read to retrieve the\n              HTTP request from the client.  This is typically\n\t      a TCP socket file descriptor.\n\n    est_server_handle_request() is used by an application \n    when an incoming EST request needs to be processed.  This request\n    would be a cacerts, simpleenroll, reenroll, or csrattrs request. \n    This is used when implementing an EST server.  The application \n    is responsible for opening and listening to a TCP socket for\n    incoming EST requests.  When data is ready to be read from\n    the socket, this API entry point should be used to allow libEST\n    to read the request from the socket and respond to the request.\n \n\n    @return EST_ERROR.\n*/\nstruct mg_context *mg_start (void *user_data)\n{\n    struct mg_context *ctx;\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n    WSADATA data;\n    WSAStartup(MAKEWORD(2, 2), &data);\n    InitializeCriticalSection(&global_log_file_lock);\n#endif // _WIN32\n\n    // Allocate context and initialize reasonable general case defaults.\n    // TODO(lsm): do proper error handling here.\n    if ((ctx = (struct mg_context*)calloc(1, sizeof(*ctx))) == NULL) {\n        return NULL;\n    }\n    ctx->user_data = user_data;\n    ctx->est_ctx = (EST_CTX*)user_data;\n    ctx->enable_keepalives = 1; \n    if (!set_ssl_option(ctx)) {\n        free_context(ctx);\n        return NULL;\n    }\n\n    return ctx;\n}\n/*! @brief est_server_handle_request() is used by an application \n    to process an EST request.  The application is responsible\n    for opening a listener socket.  When an EST request comes in\n    on the socket, the application uses this function to hand-off\n    the request to libEST.\n\n    @param ctx Pointer to the EST_CTX, which was provided\n               when est_server_init()  or est_proxy_init() was invoked.\n    @param fd File descriptor that will be read to retrieve the\n              HTTP request from the client.  This is typically\n\t      a TCP socket file descriptor.\n\n    est_server_handle_request() is used by an application \n    when an incoming EST request needs to be processed.  This request\n    would be a cacerts, simpleenroll, reenroll, or csrattrs request. \n    This is used when implementing an EST server.  The application \n    is responsible for opening and listening to a TCP socket for\n    incoming EST requests.  When data is ready to be read from\n    the socket, this API entry point should be used to allow libEST\n    to read the request from the socket and respond to the request.\n \n\n    @return EST_ERROR.\n*/\nEST_ERROR est_send_csrattr_data (EST_CTX *ctx, char *csr_data, int csr_len, void *http_ctx)\n{\n   char http_hdr[EST_HTTP_HDR_MAX];\n   int hdrlen;\n\n   if ((csr_len > 0) && csr_data) {\n        /*\n         * Send HTTP 200 header\n         */\n        snprintf(http_hdr, EST_HTTP_HDR_MAX, \"%s%s%s%s\", EST_HTTP_HDR_200, EST_HTTP_HDR_EOL,\n                 EST_HTTP_HDR_STAT_200, EST_HTTP_HDR_EOL);\n        hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n        snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CT,\n                 EST_HTTP_CT_CSRATTRS, EST_HTTP_HDR_EOL);\n        hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n        snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CE,\n                 EST_HTTP_CE_BASE64, EST_HTTP_HDR_EOL);\n        hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n        snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %d%s%s\", EST_HTTP_HDR_CL,\n                 csr_len, EST_HTTP_HDR_EOL, EST_HTTP_HDR_EOL);\n        if (!mg_write(http_ctx, http_hdr, strnlen_s(http_hdr, EST_HTTP_HDR_MAX))) {\n            free(csr_data);\n            return (EST_ERR_HTTP_WRITE);\n        }\n\n        /*\n         * Send the CSR in the body\n         */\n        if (!mg_write(http_ctx, csr_data, csr_len)) {\n            free(csr_data);\n            return (EST_ERR_HTTP_WRITE);\n        }\n        free(csr_data);\n    } else {\n\tif (csr_data) {\n            free(csr_data);\n\t}\n        /* Send a 204 response indicating the server doesn't have a CSR */\n\test_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n    }\n    return (EST_ERR_NONE);\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcb6"},"name":"est_client_proxy.c","system":"LibEST","applied_transformations":[],"ground_truth":[],"contents":"/* Use WSAAddressToStringA instead of inet_ntop on Windows as inet_ntop does not\n * exist on Windows XP.\n * Can't use `const struct sockaddr *` here because WSAAddressToStringA takes\n * a LPSOCKADDR.\n */\nstatic int addr_to_str (struct sockaddr *addr, char *str, size_t str_size,\n                        unsigned short int *port)\n{\n    int ret = -1;\n#ifdef WIN32\n    DWORD dw_str_size;\n    size_t addr_len = 0;\n\n    switch (addr->sa_family) {\n        case AF_INET:\n            addr_len = sizeof(struct sockaddr_in);\n            *port = ntohs(((struct sockaddr_in *)addr)->sin_port);\n            break;\n        case AF_INET6:\n            addr_len = sizeof(struct sockaddr_in6);\n            *port = ntohs(((struct sockaddr_in6 *)addr)->sin6_port);\n            break;\n        default:\n            break;\n    }\n    dw_str_size = str_size;\n    if (addr_len != 0 &&\n            WSAAddressToStringW(addr, addr_len, NULL, (LPWSTR)str, &dw_str_size) == 0) {\n        ret = 0;\n    }\n#else\n    switch (addr->sa_family) {\n        case AF_INET:\n            *port = ntohs(((struct sockaddr_in *)addr)->sin_port);\n            if (inet_ntop(addr->sa_family,\n                    &((struct sockaddr_in *)addr)->sin_addr,\n                    str,\n                    str_size)) {\n                ret = 0;\n            }\n            break;\n        case AF_INET6:\n            *port = ntohs(((struct sockaddr_in6 *)addr)->sin6_port);\n            if (inet_ntop(addr->sa_family,\n                    &((struct sockaddr_in6 *)addr)->sin6_addr,\n                    str,\n                    str_size)) {\n                ret = 0;\n            }\n            break;\n        default:\n            break;\n    }\n#endif\n\n    return ret;\n}\n/* Use WSAAddressToStringA instead of inet_ntop on Windows as inet_ntop does not\n * exist on Windows XP.\n * Can't use `const struct sockaddr *` here because WSAAddressToStringA takes\n * a LPSOCKADDR.\n */\nstatic tcw_err_t tcw_direct_close (tcw_sock_t *sock)\n{\n    tcw_err_t ret = TCW_OK;\n\n    if (CLOSE_SOCKET(sock->sock_fd) != 0) {\n        EST_LOG_ERR(\"close failed: %d\", GET_SOCK_ERR());\n        ret = TCW_ERR_CLOSE;\n        /* SOCK_ERR already set */\n        goto done;\n    }\n    sock->sock_fd = SOCK_INVALID;\n\ndone:\n    return ret;\n}\n/*\n * Establish a direct socket connection with the EST server using\n * normal system calls\n */\nstatic tcw_err_t tcw_direct_connect (tcw_sock_t *sock, tcw_opts_t *opts,\n                                      const char *host, unsigned short int port)\n{\n    tcw_err_t ret = TCW_OK;\n    struct addrinfo *addrs = NULL;\n    struct addrinfo *cur_addr;\n    SOCK_TYPE fd;\n    int err;\n    int saved_err;\n    char port_str[10];\n    char sock_addr_str[INET6_ADDRSTRLEN];\n    unsigned short int sock_port;\n    struct addrinfo hints = { 0 };\n    int n;\n\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags    = AI_ADDRCONFIG;\n\n    n = snprintf(port_str, sizeof(port_str), \"%hu\", port);\n    if (n < 0 || n >= (int)sizeof(port_str)) {\n        errno = ENOMEM;\n        ret = TCW_ERR_ALLOC;\n        goto done;\n    }\n    EST_LOG_INFO(\"getaddrinfo(%s, %s)\", host, port_str);\n    if ((err = getaddrinfo(host, port_str, &hints, &addrs)) != 0) {\n        EST_LOG_ERR(\"getaddrinfo returned %d: %s\", err, gai_strerror(err));\n        ret = TCW_ERR_RESOLV;\n#ifdef WIN32\n        /* SOCK_ERR already set */\n#else\n        switch (err) {\n            case EAI_SYSTEM:\n                /* SOCK_ERR already set */\n                break;\n            case EAI_MEMORY:\n                SET_SOCK_ERR_NOMEM();\n                break;\n            default:\n                /* Could not resolve host */\n                SET_SOCK_ERR_NONAME();\n                break;\n        }\n#endif\n        goto done;\n    }\n    cur_addr = addrs;\n    while (cur_addr) {\n        ret = TCW_OK;\n        fd = socket(cur_addr->ai_family, SOCK_STREAM, IPPROTO_TCP);\n        if (fd < 0) {\n            EST_LOG_WARN(\"socket failed: %d\", GET_SOCK_ERR());\n            ret = TCW_ERR_SOCKET;\n            cur_addr = cur_addr->ai_next;\n            continue;\n        }\n\n        err = addr_to_str(cur_addr->ai_addr, sock_addr_str, sizeof(sock_addr_str),\n                          &sock_port);\n        if (!err) {\n            EST_LOG_INFO(\"connect(%s port %hu)\", sock_addr_str, sock_port);\n        }\n        if (connect(fd, cur_addr->ai_addr, cur_addr->ai_addrlen) < 0) {\n            EST_LOG_WARN(\"connect failed: %d\", GET_SOCK_ERR());\n            ret = TCW_ERR_CONNECT;\n            /* CLOSE_SOCKET() may clobber SOCK_ERR */\n            saved_err = GET_SOCK_ERR();\n            CLOSE_SOCKET(fd);\n            fd = SOCK_INVALID;\n            SET_SOCK_ERR(saved_err);\n            cur_addr = cur_addr->ai_next;\n            continue;\n        }\n        break;\n    }\n    if (fd >= 0) {\n        sock->sock_fd = fd;\n    } else {\n        EST_LOG_ERR(\"Could not connect to %s:%hu\", host, port);\n        /* ret and SOCK_ERR already set */\n    }\ndone:\n    return ret;\n}\n/*\n * Establish a direct socket connection with the EST server using\n * normal system calls\n */\nstatic tcw_err_t tcw_curl_close (tcw_sock_t *sock)\n{\n    tcw_err_t ret = TCW_OK;\n\n    if (sock->curl_handle) {\n        curl_easy_cleanup(sock->curl_handle);\n    }\n    sock->curl_handle = NULL;\n    sock->sock_fd = SOCK_INVALID;\n\n    return ret;\n}\n/*\n * Establish a direct socket connection with the EST server using\n * normal system calls\n */\nstatic tcw_err_t set_blocking_mode (tcw_sock_t *sock, int blocking)\n{\n    tcw_err_t ret = TCW_OK;\n\n#ifdef WIN32\n    int result;\n    unsigned long mode = blocking ? 0 : 1;\n\n    result = ioctlsocket(sock->sock_fd, FIONBIO, &mode);\n    if (result != NO_ERROR) {\n        /*\n         * As per:\n         * https://msdn.microsoft.com/en-us/library/windows/desktop/ms740126(v=vs.85).aspx\n         *\n         * Ioctl and Ioctlsocket/WSAIoctl\n         *\n         * Various C language run-time systems use the IOCTLs for purposes\n         * unrelated to Windows Sockets. As a consequence, the ioctlsocket\n         * function and the WSAIoctl function were defined to handle socket\n         * functions that were performed by IOCTL and fcntl in the Berkeley\n         * Software Distribution.\n         *\n         * Since ioctlsocket is the Windows equivalent of ioctl/fcntl, just\n         * set return type accordingly.\n         */\n        ret = TCW_ERR_FCNTL;\n        goto done;\n    }\n#else\n    int flags = fcntl(sock->sock_fd, F_GETFL);\n    if (flags < 0) {\n        EST_LOG_ERR(\"fcntl(F_GETFL) failed: %d\", GET_SOCK_ERR());\n        /* SOCK_ERR is already set */\n        ret = TCW_ERR_FCNTL;\n        goto done;\n    }\n    flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n    if (fcntl(sock->sock_fd, F_SETFL, flags) < 0) {\n        EST_LOG_ERR(\"fcntl(F_SETFL) failed: %d\", GET_SOCK_ERR());\n        /* SOCK_ERR is already set */\n        ret = TCW_ERR_FCNTL;\n        goto done;\n    }\n#endif /* WIN32 */\n\ndone:\n    return ret;\n}\n/*\n * Establish a socket with the remote server using libcurl. Do not have it\n * actually send a URL. Leverage libcurl's proxy support to just establish\n * the connection.\n */\nstatic tcw_err_t tcw_curl_connect (tcw_sock_t *sock, tcw_opts_t *opts,\n                                   const char *host, unsigned short int port)\n{\n    tcw_err_t ret = TCW_OK;\n    size_t url_size;\n    char *url = NULL;\n    CURLcode curlcode;\n    long curl_socket;\n    long auth_bits;\n    long proxy_type = -1;\n    int saved_err;\n    const char *proxy_type_str = \"NONE\";\n    int n;\n\n    sock->curl_handle = curl_easy_init();\n    if (!sock->curl_handle) {\n        EST_LOG_ERR(\"curl_easy_init failed\");\n        errno = ENOMEM;\n        ret = TCW_ERR_ALLOC;\n        goto done;\n    }\n    /*\n     * All we want libcurl to do here is establish the connection to\n     * the proxy server.  Once that's done we'll use the socket\n     * as we normally do on a direct connect to the EST server\n     */\n    curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_CONNECT_ONLY, 1);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_CONNECT_ONLY) returned %d: %s\",\n                    curlcode, curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n    url_size = strlen(host) + TCW_URL_SCHEMA_PORT_SIZE;\n    url = (char *)calloc(1, url_size);\n    if (!url) {\n        EST_LOG_ERR(\"calloc failed\");\n        errno = ENOMEM;\n        ret = TCW_ERR_ALLOC;\n        goto done;\n    }\n    /*\n     * \"http\" here is telling libcurl not to wrap whatever data we send in\n     *  SSL. \n     */\n    n = snprintf(url, url_size-1, \"http://%s:%hu\", host, port);\n    if (n < 0 || n >= (int)url_size) {\n        errno = ENOMEM;\n        ret = TCW_ERR_ALLOC;\n        goto done;\n    }\n    curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_URL, url);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_URL) returned %d: %s\", curlcode,\n                    curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n\n    /*\n     * proxy host and port\n     */\n    curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_PROXY, opts->proxy_host);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_PROXY) returned %d: %s\", curlcode,\n                    curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n    curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_PROXYPORT, opts->proxy_port);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_PROXYPORT) returned %d: %s\", curlcode,\n                    curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n\n    /*\n     * proxy protocol including HTTP tunnel mode\n     */\n    if (opts->proxy_proto == EST_CLIENT_PROXY_HTTP_NOTUNNEL) {\n        proxy_type = CURLPROXY_HTTP;\n        proxy_type_str = \"HTTP (no tunneling)\";\n    } else if (opts->proxy_proto == EST_CLIENT_PROXY_HTTP_TUNNEL) {\n        proxy_type = CURLPROXY_HTTP;\n        proxy_type_str = \"HTTP (tunneling)\";\n    } else if (opts->proxy_proto == EST_CLIENT_PROXY_SOCKS4) {\n        proxy_type = CURLPROXY_SOCKS4;\n        proxy_type_str = \"SOCKS4\";\n    } else if (opts->proxy_proto == EST_CLIENT_PROXY_SOCKS5) {\n        proxy_type = CURLPROXY_SOCKS5;\n        proxy_type_str = \"SOCKS5\";\n    } else if (opts->proxy_proto == EST_CLIENT_PROXY_SOCKS4A) {\n        proxy_type = CURLPROXY_SOCKS4A;\n        proxy_type_str = \"SOCKS4A\";\n    } else if (opts->proxy_proto == EST_CLIENT_PROXY_SOCKS5_HOSTNAME) {\n        proxy_type = CURLPROXY_SOCKS5_HOSTNAME;\n        proxy_type_str = \"SOCKS5_HOSTNAME\";\n    }\n    curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_PROXYTYPE, proxy_type);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_PROXYTYPE) returned %d: %s\",\n                    curlcode, curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n    if (opts->proxy_proto == EST_CLIENT_PROXY_HTTP_TUNNEL) {\n        curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_HTTPPROXYTUNNEL, 1);\n        if (curlcode != CURLE_OK) {\n            EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_HTTPPROXYTUNNEL) returned %d: %s\",\n                        curlcode, curl_easy_strerror(curlcode));\n            errno = EINVAL;\n            ret = TCW_ERR_OTHER;\n            goto done;\n        }\n    }\n\n    curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_PROXYAUTH, CURLAUTH_BASIC|CURLAUTH_ONLY);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_PROXYAUTH) returned %d: %s\",\n                    curlcode, curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n\n    /*\n     * username and password\n     */\n    if (opts->proxy_username && opts->proxy_password) {\n        curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_PROXYUSERNAME,\n                                    opts->proxy_username);\n        if (curlcode != CURLE_OK) {\n            EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_PROXYUSERNAME) returned %d: %s\",\n                        curlcode, curl_easy_strerror(curlcode));\n            errno = EINVAL;\n            ret = TCW_ERR_OTHER;\n            goto done;\n        }\n        curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_PROXYPASSWORD,\n                                    opts->proxy_password);\n        if (curlcode != CURLE_OK) {\n            EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_PROXYPASSWORD) returned %d: %s\",\n                        curlcode, curl_easy_strerror(curlcode));\n            errno = EINVAL;\n            ret = TCW_ERR_OTHER;\n            goto done;\n        }\n        auth_bits = 0;\n        if (opts->proxy_auth & EST_CLIENT_PROXY_AUTH_BASIC) {\n            auth_bits |= CURLAUTH_BASIC;\n        }\n        if (opts->proxy_auth & EST_CLIENT_PROXY_AUTH_NTLM) {\n            auth_bits |= CURLAUTH_NTLM;\n        }\n        if (auth_bits) {\n            curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_PROXYAUTH, auth_bits);\n            if (curlcode != CURLE_OK) {\n                EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_PROXYAUTH) returned %d: %s\",\n                            curlcode, curl_easy_strerror(curlcode));\n                errno = EINVAL;\n                ret = TCW_ERR_OTHER;\n                goto done;\n            }\n        }\n    }\n\n    /*\n     * no signals generated from libcurl\n     */\n    curlcode = curl_easy_setopt(sock->curl_handle, CURLOPT_NOSIGNAL, 1);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_setopt(CURLOPT_NOSIGNAL) returned %d: %s\",\n                    curlcode, curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n\n    /*\n     * perform the curl request\n     */\n    EST_LOG_INFO(\"curl_easy_perform(%s), proxy type %s\", url, proxy_type_str);\n    curlcode = curl_easy_perform(sock->curl_handle);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_perform(%s) returned %d: %s\", url, curlcode,\n                    curl_easy_strerror(curlcode));\n        if (curlcode == CURLE_COULDNT_RESOLVE_PROXY ||\n            curlcode == CURLE_COULDNT_RESOLVE_HOST) {\n            SET_SOCK_ERR_NONAME();\n            ret = TCW_ERR_RESOLV;\n            goto done;\n        } else {\n            SET_SOCK_ERR_CONN();\n            ret = TCW_ERR_CONNECT;\n            goto done;\n        }\n    }\n\n    /*\n     * retrieve the socket from libcurl\n     */\n    curlcode = curl_easy_getinfo(sock->curl_handle, CURLINFO_LASTSOCKET,\n                                 &curl_socket);\n    if (curlcode != CURLE_OK) {\n        EST_LOG_ERR(\"curl_easy_getinfo(CURLINFO_LASTSOCKET) returned %d: %s\",\n                    curlcode, curl_easy_strerror(curlcode));\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n    if (curl_socket == -1) {\n        EST_LOG_ERR(\"CURLINFO_LASTSOCKET: invalid socket\");\n        errno = EINVAL;\n        ret = TCW_ERR_OTHER;\n        goto done;\n    }\n    sock->sock_fd = curl_socket;\n\n    /* after connection is made, set socket to blocking */\n    ret = set_blocking_mode(sock, 1);\n    if (ret != TCW_OK) {\n        /* SOCK_ERR is already set */\n        EST_LOG_ERR(\"Failed to set socket to blocking\");\n        goto done;\n    }\n\n  done:\n    free(url);\n    url = NULL;\n    if (ret != TCW_OK) {\n        saved_err = GET_SOCK_ERR();\n        tcw_curl_close(sock);\n        SET_SOCK_ERR(saved_err);\n    }\n\n    return ret;\n}\n/*\n * entry point to establish a connection with the remote EST server\n */\ntcw_err_t tcw_connect (tcw_sock_t *sock, tcw_opts_t *opts, const char *host,\n                       unsigned short int port, SOCK_TYPE *sock_fd)\n{\n    tcw_err_t ret = TCW_OK;\n\n    memset(sock, 0, sizeof(tcw_sock_t));\n    sock->sock_fd = SOCK_INVALID;\n\n    sock->proxy_proto = opts->proxy_proto;\n    if (sock->proxy_proto != EST_CLIENT_PROXY_NONE) {\n#ifdef HAVE_LIBCURL\n        ret = tcw_curl_connect(sock, opts, host, port);\n#else\n        /*\n         * We should not make it this far, but if we do,\n         * log a message as to why this is wrong and return\n         */\n        EST_LOG_ERR(\"Proxy settings currently require libcurl\");\n        errno = EINVAL;\n        ret = TCW_ERR_ARG;\n        goto done;\n#endif\n    } else {\n        ret = tcw_direct_connect(sock, opts, host, port);\n    }\n    if (ret != TCW_OK) {\n        goto done;\n    }\n    EST_LOG_INFO(\"Successfully connected to %s:%hu\", host, port);\n    *sock_fd = sock->sock_fd;\n\ndone:\n    return ret;\n}\n/*\n * entry point to establish a connection with the remote EST server\n */\ntcw_err_t tcw_close (tcw_sock_t *sock)\n{\n    tcw_err_t ret = TCW_OK;\n\n    if (sock->proxy_proto == EST_CLIENT_PROXY_NONE) {\n        ret = tcw_direct_close(sock);\n    } else {\n#ifdef HAVE_LIBCURL\n        ret = tcw_curl_close(sock);\n#endif\n    }\n\n    return ret;\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcb7"},"name":"est_proxy.c","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc99"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9a"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc81"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc83"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc86"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc85"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc87"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca9"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaf"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcad"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcac"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc7f"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc82"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca0"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc90"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8e"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc97"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc95"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca1"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8a"}]],"contents":"/*\n * Since we hijack the OpenSSL BUF_MEM with our\n * own data, this utility function allows us\n * to free the BUF_MEM without freeing the\n * underlying data.\n */\nstatic void est_proxy_free_ossl_bufmem (BUF_MEM *b)\n{\n    b->data = NULL;\n    BUF_MEM_free(b);\n}\n/*\n * bsearch_compare is used by the bsearch function to perform the\n * comparison of the nodes within the client context array.\n */\nstatic int bsearch_compare(const void *pa, const void *pb)\n{\n    int result;\n    CLIENT_CTX_LU_NODE_T *a = (CLIENT_CTX_LU_NODE_T *)pa;\n    CLIENT_CTX_LU_NODE_T *b = (CLIENT_CTX_LU_NODE_T *)pb;\n    \n    if (a->threadid > b->threadid) result = 1;\n    if (a->threadid < b->threadid) result = -1;\n    if (a->threadid == b->threadid) result = 0;\n\n    return (result);\n}\n/*\n * get_client_ctx() performs a search through a ordered array.\n * The key for the search is the current thread id and the value returned\n * is the client context that's been created for this thread.  If no\n * entry exists in the array for this thread id, a new one is created.\n */\nstatic EST_CTX *get_client_ctx (EST_CTX *p_ctx) \n{\n    EST_CTX *c_ctx = NULL;\n    EST_ERROR rv;\n    unsigned long cur_threadid = 0;\n    unsigned long cur_pid = GETPID();\n    CLIENT_CTX_LU_NODE_T *found_node;\n    unsigned long zero_threadid = 0x0;\n    CLIENT_CTX_LU_NODE_T *empty_node;\n    int empty_index;\n\n    /*\n     * Windows TODO: This will likely need to be replaced with\n     * GetCurrentThreadId()\n     * In addition, this is really returning a pointer to an opaque value, so\n     * what's being used here is typically a pointer in pthread based\n     * environments and not the actual pthread id.  The only helper API to\n     * access the actual id is pthread_equal().  If this must be used, then\n     * the array search would best be changed to a linear search.\n     * We mix in the PID of the current process with the thread ID in\n     * case the application is forking new processes (e.g. NGINX).  \n     */\n#ifndef DISABLE_PTHREADS\n    cur_threadid = (unsigned long) pthread_self();\n#endif\n    cur_threadid += cur_pid;\n\n    found_node = (CLIENT_CTX_LU_NODE_T *) bsearch(&cur_threadid,\n                                                  p_ctx->client_ctx_array,\n                                                  cur_max_ctx_array,\n                                                  sizeof(CLIENT_CTX_LU_NODE_T),\n                                                  bsearch_compare);\n    if (found_node == NULL) {\n        \n        /*\n         * need to allocate a context and get it ready to be used.\n         */\n        c_ctx = est_client_init(p_ctx->ca_chain_raw, p_ctx->ca_chain_raw_len,\n                                EST_CERT_FORMAT_PEM, NULL);\n        if (c_ctx == NULL) {\n            EST_LOG_ERR(\"Unable to allocate and initialize EST client context for Proxy use\");\n            return (NULL);\n        }\n\n        /*\n         * The name is a bit misleading.  The identity cert and private\n         * key used for proxy mode are the ones stored in the server_cert and\n         * server_priv_key, however they are used in both directions, so here\n         * when setting up the client side, it looks mixed up.  Might want to\n         * change the name in context to hold these.\n         */\n        rv = est_client_set_auth(c_ctx, p_ctx->userid, p_ctx->password,\n                                 p_ctx->server_cert, p_ctx->server_priv_key);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Unable to set authentication configuration in the client context for Proxy use\");\n\t    est_destroy(c_ctx);\n            return (NULL);\n\t}        \n\n        rv = est_client_set_auth_cred_cb(c_ctx, p_ctx->auth_credentials_cb);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Unable to register authentication credential callback.\");\n            return (NULL);\n        }\n\n        /*\n         * wrt path segment, unlike true client mode, the path segment will\n         * be changing on every request going upstream, so no need to\n         * obtain it locally at a proxy and set it one time, so it\n         * should be left NULL.\n         */\n\trv = est_client_set_server(c_ctx, p_ctx->est_server, p_ctx->est_port_num, NULL);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Unable to set the upstream server configuration in the client context for Proxy use\");\n\t    est_destroy(c_ctx);\n            return (NULL);\n\t}\n\n        rv = est_client_set_read_timeout(c_ctx, p_ctx->read_timeout);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Unable to set the SSL read timeout in the client context\");\n\t    est_destroy(c_ctx);\n            return (NULL);\n\t}        \n\n        /*\n         * make sure there's room for another entry\n         */\n        empty_node = (CLIENT_CTX_LU_NODE_T *) bsearch(&zero_threadid,\n                                                      p_ctx->client_ctx_array,\n                                                      cur_max_ctx_array,\n                                                      sizeof(CLIENT_CTX_LU_NODE_T),\n                                                      bsearch_compare);\n\n        if (empty_node == NULL) {\n            /*\n             * we're out of space.  allocate a new array and copy over what's\n             * already there.  Double the size of the current one.\n             */\n            CLIENT_CTX_LU_NODE_T *temp_array;\n            \n            cur_max_ctx_array *= 2;\n            temp_array = (CLIENT_CTX_LU_NODE_T *) malloc(sizeof(CLIENT_CTX_LU_NODE_T)*cur_max_ctx_array);\n            memzero_s(temp_array, sizeof(CLIENT_CTX_LU_NODE_T)*cur_max_ctx_array); \n            memcpy_s(temp_array, sizeof(CLIENT_CTX_LU_NODE_T)*cur_max_ctx_array,\n                     p_ctx->client_ctx_array,sizeof(CLIENT_CTX_LU_NODE_T)*cur_max_ctx_array/2);\n            free(p_ctx->client_ctx_array);\n            p_ctx->client_ctx_array = temp_array;\n            \n            qsort(p_ctx->client_ctx_array, cur_max_ctx_array,\n                  sizeof(CLIENT_CTX_LU_NODE_T), \n                  bsearch_compare);\n\n            empty_node = (CLIENT_CTX_LU_NODE_T *) bsearch(&zero_threadid,\n                                                          p_ctx->client_ctx_array,\n                                                          cur_max_ctx_array,\n                                                          sizeof(CLIENT_CTX_LU_NODE_T),\n                                                          bsearch_compare);\n        }\n        empty_index = (int) (empty_node - p_ctx->client_ctx_array);\n\n        /*\n         * add to the array and sort it into its proper place\n         */\n        p_ctx->client_ctx_array[empty_index].threadid = cur_threadid;\n        p_ctx->client_ctx_array[empty_index].client_ctx = c_ctx;\n        \n        qsort(p_ctx->client_ctx_array, cur_max_ctx_array,\n              sizeof(CLIENT_CTX_LU_NODE_T), \n              bsearch_compare);\n    } else {\n        /*\n         * the entry was found in the tree, return the client context for this\n         * pid\n         */\n        c_ctx = found_node->client_ctx;\n    }\n    \n    return(c_ctx);   \n}\n/*\n * proxy_cleanup() is invoked from est_destroy when the\n * current context is for proxy mode.\n */\nvoid proxy_cleanup (EST_CTX *p_ctx) \n{\n    int i;\n    \n    if (p_ctx->client_ctx_array == NULL) {\n        return;\n    }\n\n    for (i=0; i<cur_max_ctx_array; i++) {\n        if (p_ctx->client_ctx_array[i].client_ctx) {\n            est_destroy(p_ctx->client_ctx_array[i].client_ctx);\n        }\n    }\n    free(p_ctx->client_ctx_array);\n    p_ctx->client_ctx_array = NULL;\n}\n/*\n * This routine will check the result code from an enroll\n * attempt and propagate the retry-after message to the \n * client if needed.\n */\nstatic EST_ERROR est_proxy_propagate_retry (EST_CTX *ctx, void *http_ctx)\n{\n    /*\n     * The CA did not sign the request and has asked the\n     * client to retry in the future.  This may occur if\n     * the CA is not configured for automatic enrollment.\n     * Send the HTTP retry response to the client.\n     * We need to propagate the retry-after response to\n     * the client.\n     */\n    EST_LOG_INFO(\"CA server requests retry, propagate this to the client (%d)\", \n        ctx->retry_after_delay);\n    if (EST_ERR_NONE != est_server_send_http_retry_after(ctx, http_ctx, ctx->retry_after_delay)) {\n        return (EST_ERR_HTTP_WRITE);\n    }\n    return (EST_ERR_NONE);\n}\n/*\n * This routine will send a PKCS7 encoded certificate to\n * the EST client via HTTP. \n */\nstatic EST_ERROR est_proxy_propagate_pkcs7 (void *http_ctx, unsigned char *pkcs7, int pkcs7_len)\n{\n    char http_hdr[EST_HTTP_HDR_MAX];\n    int hdrlen;\n\n    /*\n     * Send HTTP header\n     */\n    snprintf(http_hdr, EST_HTTP_HDR_MAX, \"%s%s%s%s\", EST_HTTP_HDR_200, EST_HTTP_HDR_EOL,\n             EST_HTTP_HDR_STAT_200, EST_HTTP_HDR_EOL);\n    hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n    snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CT,\n             EST_HTTP_CT_PKCS7_CO, EST_HTTP_HDR_EOL);\n    hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n    snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CE,\n             EST_HTTP_CE_BASE64, EST_HTTP_HDR_EOL);\n    hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n    snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %d%s%s\", EST_HTTP_HDR_CL,\n             pkcs7_len, EST_HTTP_HDR_EOL, EST_HTTP_HDR_EOL);\n    if (!mg_write(http_ctx, http_hdr, strnlen_s(http_hdr, EST_HTTP_HDR_MAX))) {\n            return (EST_ERR_HTTP_WRITE);\n    }\n\n    /*\n     * Send the signed PKCS7 certificate in the body\n     */\n    if (!mg_write(http_ctx, pkcs7, pkcs7_len)) {\n        EST_LOG_ERR(\"HTTP write error while propagating pkcs7\");\n        return (EST_ERR_HTTP_WRITE);\n    }\n    return (EST_ERR_NONE);\n}\n/*\n * est_proxy_retrieve_cacerts() issues a request to the server to obtain the\n * CA Certs chain to be used for Get CA Certs requests from clients.\n * The CA Cert chain returned from the server are passed back to the caller.\n *\n * It's the responsibility of the caller to free up this buffer.\n */\nEST_ERROR est_proxy_retrieve_cacerts (EST_CTX *ctx, unsigned char **cacerts_rtn,\n                                      int *cacerts_rtn_len)\n{\n    EST_CTX *client_ctx;\n    EST_ERROR rv;\n    int rcvd_cacerts_len;\n    unsigned char *rcvd_cacerts;\n\n    if (ctx == NULL) {\n        EST_LOG_ERR(\"Ctx not passed to %s\", __FUNCTION__);\n        return (EST_ERR_NO_CTX);\n    }\n    if (cacerts_rtn == NULL || cacerts_rtn_len == NULL) {\n        EST_LOG_ERR(\"Ctx not passed to %s\", __FUNCTION__);\n        return (EST_ERR_INVALID_PARAMETERS);        \n    }\n    \n    *cacerts_rtn = NULL;\n    *cacerts_rtn_len = 0;\n\n    /*\n     * Get the client context for this thread\n     */\n    client_ctx = get_client_ctx(ctx);\n    if (!client_ctx) {\n        EST_LOG_ERR(\"Unable to obtain client context for proxy operation\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    rv = est_client_get_cacerts(client_ctx, &rcvd_cacerts_len);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Unable to retrieve CA Certs from upstream server RC = %s\",\n                    EST_ERR_NUM_TO_STR(rv));\n        return (rv);\n    }\n    \n    /*\n     * Allocate a buffer to retrieve the CA certs\n     * and get them copied in\n     */\n    rcvd_cacerts = malloc(rcvd_cacerts_len);\n    if (rcvd_cacerts == NULL) {\n        EST_LOG_ERR(\"Unable to malloc buffer for cacerts received from server\");\n        return (EST_ERR_MALLOC);\n    }\n    \n    rv = est_client_copy_cacerts(client_ctx, rcvd_cacerts);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Unable to copy CA Certs from upstream server RC = %s\",\n                    EST_ERR_NUM_TO_STR(rv));\n        free(rcvd_cacerts);\n        return (rv);\n    }\n\n    /*\n     * The retrieving of the CA certs through the normal client\n     * interface causes the client to go back into an uninitialized state.\n     * In this case though, we're getting it just for passing it back\n     * to the downstream clients, so we're going to put this client\n     * context back into the initialized state\n     */\n    client_ctx->est_client_initialized = 1;\n    \n    *cacerts_rtn = rcvd_cacerts;\n    *cacerts_rtn_len = rcvd_cacerts_len;\n    return (EST_ERR_NONE);\n}\n/*\n * This routine will connect to the EST server and attempt\n * to enroll the CSR in the *pkcs10 buffer. Upon success\n * it will return the X509 cert in the *pkcs7 buffer.  The\n * length of the returned cert will be in *pkcs7_len.  \n * The *pkcs7 buffer should be allocated by the caller.\n */\nstatic EST_ERROR est_proxy_send_enroll_request (EST_CTX *clnt_ctx, \n\t                                        BUF_MEM *pkcs10, unsigned char *pkcs7,\n\t\t\t\t\t\tint *pkcs7_len, int reenroll)\n{\n    EST_ERROR rv;\n    SSL *ssl_client;\n\n    /*\n     * Connect to the server\n     */\n    rv = est_client_connect(clnt_ctx, &ssl_client);\n    if (rv != EST_ERR_NONE) {\n        return (rv);\n    }\n\n    /*\n     * Send the enroll request\n     */\n    rv = est_client_send_enroll_request(clnt_ctx, ssl_client,\n                                        pkcs10, pkcs7, pkcs7_len, reenroll);\n\n    /*\n     * Disconnect from the server\n     */\n    est_client_disconnect(clnt_ctx, &ssl_client);\n\n    return (rv);\n}\n/*\n * This routine will connect to the EST server and attempt\n * to enroll the CSR in the *pkcs10 buffer. Upon success\n * it will return the X509 cert in the *pkcs7 buffer.  The\n * length of the returned cert will be in *pkcs7_len.  \n * The *pkcs7 buffer should be allocated by the caller.\n */\nstatic EST_ERROR est_proxy_set_path_segment (EST_CTX *client_ctx,\n                                             char *path_segment)\n{\n    int path_segment_len;\n    EST_ERROR rc;\n\n    path_segment_len = strnlen_s(path_segment, EST_MAX_PATH_SEGMENT_LEN);\n    \n    rc = est_store_path_segment(client_ctx, path_segment, path_segment_len);\n    if (rc != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Failed to store URI path segment.\");\n        return (rc);\n    }\n    return EST_ERR_NONE;\n}\n/*\n * This function is used by the server side of the EST proxy to respond to an\n * incoming Simple Enroll request.  This function is similar to the Client API\n * function, est_client_enroll_req(), except it bypasses some things that are\n * not done when functioning as a proxy, such as signing the CSR, not\n * inserting the TLS unique id and instead including the id-kp-cmcRA usage\n * extension.\n */\nstatic EST_ERROR est_proxy_handle_simple_enroll (EST_CTX *ctx, void *http_ctx,\n                                                 SSL *ssl, const char *ct,\n                                                 char *body, int body_len,\n\t\t\t\t\t         char *path_seg, int reenroll)\n{\n    EST_ERROR rv;\n    BUF_MEM *pkcs10;\n    unsigned char *pkcs7;\n    int pkcs7_len = 0;\n    int diff;\n    X509_REQ *csr = NULL;\n    EST_CTX *client_ctx;\n    errno_t safec_rc;\n     \n    /*\n     * Make sure the client has sent us a PKCS10 CSR request\n     */\n\n    safec_rc = memcmp_s(ct, sizeof(\"application/pkcs10\"), \"application/pkcs10\",\n        sizeof(\"application/pkcs10\"), &diff);\n\n    if (safec_rc != EOK) {\n        EST_LOG_INFO(\"memcmp_s error 0x%xO\\n\", safec_rc);\n    }\n\n    if (diff) {\n        return (EST_ERR_BAD_CONTENT_TYPE);\n    }\n\n    /*\n     * Authenticate the client\n     */\n    switch (est_enroll_auth(ctx, http_ctx, ssl, path_seg, reenroll)) {\n    case EST_HTTP_AUTH:\n    case EST_SRP_AUTH:\n    case EST_CERT_AUTH:\n        break;\n    case EST_HTTP_AUTH_PENDING:\n        return (EST_ERR_AUTH_PENDING);\n        break;\n    case EST_UNAUTHORIZED:\n    default:\n        return (EST_ERR_AUTH_FAIL);\n        break;\n    }\n\n    /*\n     * Parse the PKCS10 CSR from the client\n     */\n    csr = est_server_parse_csr((unsigned char*)body, body_len);\n    if (!csr) {\n\tEST_LOG_ERR(\"Unable to parse the PKCS10 CSR sent by the client\");\n\treturn (EST_ERR_BAD_PKCS10);\n    }\n    \n    /*\n     * Perform a sanity check on the CSR\n     */\n    if (est_server_check_csr(csr)) {\n\tEST_LOG_ERR(\"PKCS10 CSR sent by the client failed sanity check\");\n\tX509_REQ_free(csr);\n\treturn (EST_ERR_BAD_PKCS10);\n    }\n\n    /*\n     * Do the PoP check (Proof of Possession).  The challenge password\n     * in the pkcs10 request should match the TLS unique ID.\n     */\n    rv = est_tls_uid_auth(ctx, ssl, csr);\n    X509_REQ_free(csr);\n\n    if (rv != EST_ERR_NONE) {\n        return (EST_ERR_AUTH_FAIL_TLSUID);\n    }\n\n    /*\n     * body now points to the pkcs10 data, pass\n     * this to the enrollment routine.  Need to hi-jack\n     * a BUF_MEM.  Attach the body to a new BUF_MEM\n     */\n    pkcs10 = BUF_MEM_new();\n    pkcs10->data = body;\n    pkcs10->length = body_len;\n    pkcs10->max = body_len;\n\n    /*\n     * get the client context for this thread\n     */\n    client_ctx = get_client_ctx(ctx);\n    if (!client_ctx) {\n        EST_LOG_ERR(\"Unable to obtain client context for proxy operation\");\n        est_proxy_free_ossl_bufmem(pkcs10);\n\treturn (EST_ERR_NO_CTX);\n    }\n\n    /*\n     * path_segment.  The path seg value is coming in from the\n     * downstream client on this request.  It's already been validated,\n     * place it in ctx for use by client code.\n     */\n    if (path_seg) {\n        est_proxy_set_path_segment(client_ctx, path_seg);\n    }\n\n    /*\n     * Allocate some space to hold the cert that we\n     * expect to receive from the EST server.\n     */\n    pkcs7 = malloc(EST_CA_MAX); \n\n    /*\n     * Attempt to enroll the CSR from the client\n     */\n    rv = est_proxy_send_enroll_request(client_ctx, pkcs10, pkcs7, &pkcs7_len,\n                                       reenroll);\n\n    /*\n     * Handle any errors that likely occurred\n     */\n    switch (rv) {\n    case EST_ERR_AUTH_FAIL:\n        /* Try one more time if we're doing Digest auth */\n        if ((ctx->auth_mode == AUTH_DIGEST ||\n             ctx->auth_mode == AUTH_BASIC  ||\n             ctx->auth_mode == AUTH_TOKEN)) {\n            \n            EST_LOG_INFO(\"HTTP Auth failed, trying again with digest/basic parameters\");\n\n            rv = est_proxy_send_enroll_request(client_ctx, pkcs10, pkcs7, &pkcs7_len, reenroll);\n\t    if (rv == EST_ERR_CA_ENROLL_RETRY) {\n\t        rv = est_proxy_propagate_retry(client_ctx, http_ctx);\n\t    } else if (rv != EST_ERR_NONE) {\n                EST_LOG_WARN(\"EST enrollment failed, error code is %d\", rv);\n            }\n        }\n        break;\n    case EST_ERR_CA_ENROLL_RETRY:\n\trv = est_proxy_propagate_retry(client_ctx, http_ctx);\n\tbreak;\n    default:\n        EST_LOG_WARN(\"Initial EST enrollment request error code is %d\", rv);\n\tbreak;\n    }\n\n    client_ctx->auth_mode = AUTH_NONE;\n    \n    /*\n     * Prevent OpenSSL from freeing our data\n     */\n    est_proxy_free_ossl_bufmem(pkcs10);\n\n    /*\n     * If we have a cert response from the EST server, let's forward\n     * it back to the EST client\n     */\n    if (pkcs7_len > 0) {\n        rv = est_proxy_propagate_pkcs7(http_ctx, pkcs7, pkcs7_len);\n    }\n    free(pkcs7);\n\n    return (rv);\n}\n/*\n * This function is used by the server side of the EST proxy to respond to an\n * incoming cacerts request.  If the CA certs response has been set locally\n * then respond with this locally set buffer.  If not set, then issue a\n * request to the upstream server.\n */\nstatic int est_proxy_handle_cacerts (EST_CTX *ctx, void *http_ctx,\n                                     char *path_seg)\n{\n    EST_ERROR rv = EST_ERR_NONE;\n    EST_CTX *client_ctx;\n    int cacerts_len;\n\n    if (ctx->ca_certs != NULL) {\n        EST_LOG_INFO(\"Proxy: CA certs set locally, responding with locally set CA certs response\");\n        return(est_handle_cacerts(ctx, ctx->ca_certs, ctx->ca_certs_len,\n                                  http_ctx, path_seg));\n    } else {\n        \n        /*\n         * get the client context for this thread\n         */\n        client_ctx = get_client_ctx(ctx);\n        if (!client_ctx) {\n            EST_LOG_ERR(\"Unable to obtain client context for proxy operation\");\n            return (EST_ERR_NO_CTX);\n        }\n\n        /*\n         * path_segment.  The path seg value is coming in from the\n         * downstream client on this request.  It's already been validated,\n         * place it in ctx for use by client code.\n         */\n        if (path_seg) {    \n            rv = est_proxy_set_path_segment(client_ctx, path_seg);\n            if (rv != EST_ERR_NONE) {\n                EST_LOG_ERR(\"Unable to save the path segment from the URI into the client context\");\n                return (rv);\n            }\n        }        \n\n        /*\n         * Invoke client code to retrieve the cacerts.\n         * Note: there is no need to authenticate the client (see sec 4.5)\n         */\n        EST_LOG_INFO(\"Proxy: Attempting to retrieve CA certs from upstream server\");\n        rv = est_client_get_cacerts(client_ctx, &cacerts_len);\n\n        /*\n         * If the upstream request was successful, the retrieved CA certs will be\n         * in the context\n         */\n        if (rv == EST_ERR_NONE) {\n            EST_LOG_INFO(\"Proxy: CA certs retrieved successfully from server. Forwarding to EST client.\");\n            return(est_handle_cacerts(client_ctx, client_ctx->retrieved_ca_certs,\n                                      client_ctx->retrieved_ca_certs_len,\n                                      http_ctx, path_seg));\n        } else {\n            /*\n             * Something went wrong with the upstream request to the\n             * server.  Treat this as a not found condition.\n             */\n            EST_LOG_ERR(\"Proxy: Server not reachable or sent corrupt CA Certs\");\n            rv = EST_ERR_HTTP_NOT_FOUND;\n        }\n    }\n    \n    return (rv);\n}\n/*\n * This function is used by the server side of the EST proxy to respond to an\n * incoming CSR Attributes request.  This function is similar to the Client API\n * function, est_client_get_csrattrs().\n  */\nstatic int est_proxy_handle_csr_attrs (EST_CTX *ctx, void *http_ctx,\n                                       char *path_seg)\n{\n    int rv = EST_ERR_NONE;\n    int pop_present;\n    char *csr_data, *csr_data_pop;\n    int csr_len, csr_pop_len;\n    EST_CTX *client_ctx;\n\n    /*\n     * get the client context for this thread\n     */\n    client_ctx = get_client_ctx(ctx);\n    if (!client_ctx) {\n        EST_LOG_ERR(\"Unable to obtain client context for proxy operation\");\n\treturn (EST_ERR_NO_CTX);\n    }\n\n    /*\n     * path_segment.  The path seg value is coming in from the\n     * downstream client on this request.  It's already been validated,\n     * place it in ctx for use by client code.\n     */\n    if (path_seg) {\n        rv = est_proxy_set_path_segment(client_ctx, path_seg);\n        if (rv != EST_ERR_NONE) {\n            EST_LOG_ERR(\"Unable to save the path segment from the URI into the client context\");\n            return (rv);\n        }\n    }\n\n    /*\n     * Invoke client code to retrieve the CSR attributes.\n     * Note: there is no need to authenticate the client (see sec 4.5)\n     */\n    EST_LOG_INFO(\"Proxy: Attempting to retrieve CSR attrs from upstream server\");\n    rv = est_client_get_csrattrs(client_ctx, (unsigned char **)&csr_data, &csr_len);\n    /*\n     * csr_data points to the memory allocated to hold the csr attributes,\n     * which will be freed in this call stack.  To prevent a double-free\n     * we null the to pointer on the client context.\n     */\n    client_ctx->retrieved_csrattrs = NULL;\n    client_ctx->retrieved_csrattrs_len = 0;\n    if (rv == EST_ERR_NONE) {\n\tctx->csr_pop_present = 0;\n\tif (ctx->server_enable_pop) {\n\t    rv = est_is_challengePassword_present(csr_data, csr_len, &pop_present);\n\t    if (rv != EST_ERR_NONE) {\n\t\tEST_LOG_ERR(\"Error during PoP/sanity check\");\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n\t\treturn (EST_ERR_NONE);\n\t    }\n\t    ctx->csr_pop_present = pop_present;\n\n\t    if (!ctx->csr_pop_present) {\n\t\tif (csr_len == 0) {\n                    csr_data = malloc(EST_CSRATTRS_POP_LEN + 1);\n\t\t    if (!csr_data) {\n\t\t\treturn (EST_ERR_MALLOC);\n\t\t    }\n\t\t    strncpy_s(csr_data, EST_CSRATTRS_POP_LEN + 1, \n\t\t\t      EST_CSRATTRS_POP, EST_CSRATTRS_POP_LEN);\n\t\t    csr_data[EST_CSRATTRS_POP_LEN] = 0;\n\t\t    csr_len = EST_CSRATTRS_POP_LEN;\n\t\t    return (est_send_csrattr_data(ctx, csr_data, csr_len, http_ctx));\n\t\t}\n\t\trv = est_add_challengePassword(csr_data, csr_len, &csr_data_pop, &csr_pop_len);\n\t\tif (rv != EST_ERR_NONE) {\n\t\t    if (csr_data) {\n\t\t        free(csr_data);\n\t\t    }\n\t\t    EST_LOG_ERR(\"Error during add PoP\");\n\t\t    est_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n\t\t    return (EST_ERR_NONE);\n\t\t}\n\t\tif (csr_data) {\n\t\t    free(csr_data);\n\t\t}\n\t\tcsr_data = csr_data_pop;\n\t\tcsr_len = csr_pop_len;\n\t    }\n\t}\n    } else {\n\tEST_LOG_ERR(\"Server not reachable or sent corrupt attributes\");\n\test_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n\treturn (EST_ERR_NONE);\n    }\n    return (est_send_csrattr_data(ctx, csr_data, csr_len, http_ctx));\n}\n/*\n * This function should be called by the web server layer when\n * a HTTP request arrives on the listening port of the EST proxy.\n * It will determine the EST request type and dispatch the request\n * to the appropriate handler.\n *\n * Paramters:\n *      ctx:\t    Pointer to EST_CTX\n *      http_ctx:   Context pointer from web server\n *      method:     The HTML method in the request, should be either \"GET\" or \"POST\"\n *\turi:\t    pointer to HTTP URI\n *\tbody:\t    pointer to full HTML body contents\n *\tbody_len:   length of HTML body\n *\tct:         HTML content type header\n */\nEST_ERROR est_proxy_http_request (EST_CTX *ctx, void *http_ctx,\n                                  char *method, char *uri,\n                                  char *body, int body_len, const char *ct)\n{\n    SSL *ssl;\n    EST_ERROR rc;\n    int diff;\n    errno_t safec_rc;\n    EST_OPERATION operation;\n    char *path_seg = NULL;    \n    EST_ERROR rv = EST_ERR_NONE;\n\n    if (!ctx) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    /*\n     * Verify the context is for a proxy, not a client or server\n     */\n    if (ctx->est_mode != EST_PROXY) {\n        return (EST_ERR_BAD_MODE);\n    }\n    \n    rv = est_parse_uri(uri, &operation, &path_seg);\n    if (rv != EST_ERR_NONE) {\n        est_send_http_error(ctx, http_ctx, rv);\n        return (rv);\n    }\n    \n    /*\n     * See if this is a cacerts request\n     */\n    if (operation == EST_OP_CACERTS) {\n        /* Only GET is allowed */\n        safec_rc = strcmp_s(method, MAX_HTTP_METHOD_LEN, \"GET\", &diff);\n        if (safec_rc != EOK) {\n            EST_LOG_INFO(\"strcmp_s error 0x%xO\\n\", safec_rc);\n        }\n\n        if (diff) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n        \n        rc = est_proxy_handle_cacerts(ctx, http_ctx, path_seg);\n        if (rc != EST_ERR_NONE) {\n            est_send_http_error(ctx, http_ctx, rc);\n            free(path_seg);\n            path_seg = NULL;\n            return (rc);\n        }            \n    }\n\n    /*\n     * See if this is a simple enrollment request\n     */\n    else if (operation == EST_OP_SIMPLE_ENROLL) {\n        /* Only POST is allowed */\n        safec_rc = strcmp_s(method, MAX_HTTP_METHOD_LEN, \"POST\", &diff);\n        if (safec_rc != EOK) {\n            EST_LOG_INFO(\"strcmp_s error 0x%xO\\n\", safec_rc);\n        }\n\n        if (diff) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n\tif (!ct) {\n            EST_LOG_WARN(\"Incoming HTTP header has no Content-Type header\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n            free(path_seg);\n            path_seg = NULL;\n\t    return (EST_ERR_BAD_CONTENT_TYPE); \n\t}\n        /*\n         * In this case body is indicating that no content was passed in, and\n         * this is a enroll request.  This cannot be correct because a CSR is\n         * required.  If this continues, and we're in proxy mode, we'll try to\n         * forward this non-existent CSR\n         */\n        if (body == NULL) {\n            EST_LOG_WARN(\"Incoming HTTP header has no CSR content.\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_BAD_CONTENT_LEN);\n        }\n        \n        /*\n         * Get the SSL context, which is required for authenticating\n         * the client.\n         */\n        ssl = (SSL*)mg_get_conn_ssl(http_ctx);\n        if (!ssl) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_NO_SSL_CTX);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_NO_SSL_CTX);\n        }\n\n        rc = est_proxy_handle_simple_enroll(ctx, http_ctx, ssl, ct, body, body_len, path_seg, 0);\n        if (rc != EST_ERR_NONE && rc != EST_ERR_AUTH_PENDING) {\n            EST_LOG_WARN(\"Enrollment failed with rc=%d (%s)\\n\", \n\t\t         rc, EST_ERR_NUM_TO_STR(rc));\n\t    if (rc == EST_ERR_AUTH_FAIL) {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_AUTH_FAIL);\n\t    } else {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n\t    }\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_BAD_PKCS10);\n        }\n    }\n\n    /*\n     * See if this is a re-enrollment request\n     */\n    else if (operation == EST_OP_SIMPLE_REENROLL) {\n        /* Only POST is allowed */\n        safec_rc = strcmp_s(method, MAX_HTTP_METHOD_LEN, \"POST\", &diff);\n        if (safec_rc != EOK) {\n            EST_LOG_INFO(\"strcmp_s error 0x%xO\\n\", safec_rc);\n        }\n\n        if (diff) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n\tif (!ct) {\n            EST_LOG_WARN(\"Incoming HTTP header has no Content-Type header\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n            free(path_seg);\n            path_seg = NULL;\n\t    return (EST_ERR_BAD_CONTENT_TYPE); \n\t}\n        /*\n         * In this case body is indicating that no content was passed in, and\n         * this is a enroll request.  This cannot be correct because a CSR is\n         * required.  If this continues, and we're in proxy mode, we'll try to\n         * forward this non-existent CSR\n         */\n        if (body == NULL) {\n            EST_LOG_WARN(\"Incoming HTTP header has no CSR content.\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_BAD_CONTENT_LEN);\n        }\n        \n        /*\n         * Get the SSL context, which is required for authenticating\n         * the client.\n         */\n        ssl = (SSL*)mg_get_conn_ssl(http_ctx);\n        if (!ssl) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_NO_SSL_CTX);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_NO_SSL_CTX);\n        }\n\n        rc = est_proxy_handle_simple_enroll(ctx, http_ctx, ssl, ct, body, body_len, path_seg, 1);\n        if (rc != EST_ERR_NONE && rc != EST_ERR_AUTH_PENDING) {\n            EST_LOG_WARN(\"Reenroll failed with rc=%d (%s)\\n\", \n\t\t         rc, EST_ERR_NUM_TO_STR(rc));\n\t    if (rc == EST_ERR_AUTH_FAIL) {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_AUTH_FAIL);\n\t    } else {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n\t    }\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_BAD_PKCS10);\n        }\n    }\n\n#if 0\n    /*\n     * See if this is a keygen request\n     * FIXME: this is currently not implemented\n     */\n    else if (strncmp(uri, EST_KEYGEN_URI, EST_URI_MAX_LEN) == 0) {\n\n        /* Only POST is allowed */\n        safec_rc = strcmp_s(method, MAX_HTTP_METHOD_LEN, \"POST\", &diff);\n        if (safec_rc != EOK) {\n            EST_LOG_INFO(\"strcmp_s error 0x%xO\\n\", safec_rc);\n        }\n\n        if (diff) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            return (EST_ERR_WRONG_METHOD);\n        }\n\tif (!ct) {\n            EST_LOG_WARN(\"Incoming HTTP header has no Content-Type header\\n\");\n\t    return (EST_ERR_BAD_CONTENT_TYPE); \n\t}\n        if (est_proxy_handle_keygen(ctx)) {\n            est_send_http_error(ctx, http_ctx, 0); //FIXME: last param should not be zero\n            return (EST_ERR_HTTP_WRITE);           //FIXME: need the appropriate return code\n        }\n    }\n#endif\n\n    /*\n     * See if this is a CSR attributes request\n     */\n    else if (operation == EST_OP_CSRATTRS) {\n        /* Only GET is allowed */\n        safec_rc = strcmp_s(method, MAX_HTTP_METHOD_LEN, \"GET\", &diff);\n        if (safec_rc != EOK) {\n            EST_LOG_INFO(\"strcmp_s error 0x%xO\\n\", safec_rc);\n        }\n\n        if (diff) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n        rc = est_proxy_handle_csr_attrs(ctx, http_ctx, path_seg);\n\t if (rc != EST_ERR_NONE) {\n            est_send_http_error(ctx, http_ctx, rc); \n            free(path_seg);\n            path_seg = NULL;\n            return (rc);\n        }\n    }\n\n    /*\n     * Send a 404 error if the URI didn't match \n     */\n    else {\n        est_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NOT_FOUND);\n    }\n\n    free(path_seg);\n    path_seg = NULL;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_proxy_start() is used by an application to start the EST proxy\n    after est_proxy_init() and est_proxy_set_server() have been called and all\n    the required callback functions have been provided by the application.\n\n    @param ctx Pointer to the EST context\n\n    libEST uses HTTP code from the Mongoose HTTP server.\n    This function allows the application to start the HTTP\n    services layer, which is required by EST.\n \n    @return EST_ERROR.    \n */\nEST_ERROR est_proxy_start (EST_CTX *ctx)\n{\n    EST_MG_CONTEXT *mgctx;\n\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n\treturn (EST_ERR_NO_CTX);\n    }\n\n    mgctx = mg_start(ctx);\n    if (mgctx) {\n        ctx->mg_ctx = mgctx;\n        return (EST_ERR_NONE);\n    } else {\n        return (EST_ERR_NO_SSL_CTX);\n    }\n}\n/*! @brief est_proxy_stop() is used by an application to stop\n    the EST proxy.  This should be called prior to est_destroy().\n \n    @param ctx Pointer to the EST context\n\n    libEST uses HTTP code from the Mongoose HTTP server.\n    This function allows the application to stop the HTTP\n    services layer.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_proxy_stop (EST_CTX *ctx)\n{\n    EST_MG_CONTEXT *mgctx;\n\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n\treturn (EST_ERR_NO_CTX);\n    }\n\n    mgctx = (EST_MG_CONTEXT*)ctx->mg_ctx;\n    if (mgctx) {\n        mg_stop(mgctx);\n    }\n    return (EST_ERR_NONE);\n}\n/*! @brief est_proxy_init() is used by an application to create\n    a context in the EST library.  This context is used when invoking\n    other functions in the API while in Proxy mode.\n \n    @param ca_chain     Char array containing PEM encoded CA certs & CRL entries.\n                        This chain of certificates is used as the trust anchor when\n                        establishing a TLS connection.\n    @param ca_chain_len Length of ca_chain char array. \n    @param cacerts_resp_chain Char array containing PEM encoded CA certs to\n                              include in the /cacerts response.  This is\n                              an optional parameter.  If it set, it contains\n                              the chain of certificates used by the proxy to\n                              respond to GET CA Certs requests from EST Clients.\n                              If this parameter is not included, then the proxy\n                              will obtain the CA certificate chain from the\n                              configured upstream EST server.  If this parameter\n                              is not NULL, then the correct length of this\n                              buffer must be specified in cacerts_resp_chain_len.\n    @param cacerts_resp_chain_len Length of cacerts_resp_chain char array\n    @param cert_format Specifies the encoding of the local and external\n                       certificate chains (PEM/DER).  \n    @param http_realm Char array containing HTTP realm name for HTTP auth\n    @param tls_id_cert Pointer to X509 that contains the proxy's certificate\n                    for the TLS layer.\n    @param tls_id_key Pointer to EVP_PKEY that contains the private key\n                   associated with the proxy's certificate.\n    @param uid  User ID to use for authenticating with server\n    @param pwd  Password to use for authenticating with server\n\n    This function allows an application to initialize an EST server context\n    for proxy mode operation, which is used when operating as an RA.  The\n    application must provide the trusted CA certificates to use for server\n    operation using the ca_chain parameter.  This certificate set should\n    include the explicit trust anchor certificate, any number of implicit\n    trust anchor certificates, and any intermediate sub-CA certificates\n    required to complete the chain of trust between the identity certificate\n    passed into the tls_id_cert parameter and the root certificate for that\n    identity certificate.  The CA certificates should be encoded using the\n    format specified in the cert_format parameter (e.g. PEM) and may contain\n    CRL entries that will be used when authenticating EST clients connecting\n    to the server.  The applications must also provide the HTTP realm to use\n    for HTTP authentication and the server cerificate/private key to use for\n    TLS.\n    \n    Warning: Including additional intermediate sub-CA certificates that are\n             not needed to complete the chain of trust may result in a\n\t     potential MITM attack.  \n \n    @return EST_CTX.\n */\nEST_CTX * est_proxy_init (unsigned char *ca_chain, int ca_chain_len,\n                          unsigned char *cacerts_resp_chain, int cacerts_resp_chain_len,\n\t\t\t  EST_CERT_FORMAT cert_format,\n                          char *http_realm, \n\t\t\t  X509 *tls_id_cert, EVP_PKEY *tls_id_key,\n                          char *uid, char *pwd)\n{\n    EST_CTX *ctx;\n    int len;\n\n    est_log_version();\n\n    /*\n     * Sanity check the input\n     */\n    if (ca_chain == NULL) {\n        EST_LOG_ERR(\"Trusted CA certificate set is empty\");\n        return NULL;\n    }\n    if (tls_id_cert == NULL) {\n        EST_LOG_ERR(\"TLS cert is empty\");\n        return NULL;\n    }\n    if (tls_id_key == NULL) {\n        EST_LOG_ERR(\"TLS private key is empty\");\n        return NULL;\n    }\n    if (http_realm == NULL) {\n        EST_LOG_ERR(\"EST HTTP realm is NULL\");\n        return NULL;\n    }\n    if (cert_format != EST_CERT_FORMAT_PEM) {\n        EST_LOG_ERR(\"Only PEM encoding of certificates is supported.\");\n        return NULL;\n    }    \n\n    /*\n     * Verify the lengths of the cert chains \n     */\n    len = (int) strnlen_s((char *)ca_chain, EST_CA_MAX);\n    if (len != ca_chain_len) {\n\tEST_LOG_ERR(\"Length of ca_chain doesn't match ca_chain_len\");\n        return NULL;\n    }\n    if (cacerts_resp_chain) {    \n        len = (int) strnlen_s((char *)cacerts_resp_chain, EST_CA_MAX);\n        if (len != cacerts_resp_chain_len) {\n            EST_LOG_ERR(\"Length of cacerts_resp_chain doesn't match cacerts_resp_chain_len\");\n            return NULL;\n        }\n    }\n    \n    /*\n     * Allocate and set up the Proxy based EST Context.  This context will be\n     * use when operating as the Server to the downstream clients.  EST Proxy mode\n     * is basically a server function that requires client capabilities to\n     * communicate to the upstream server when needed. \n     */\n    ctx = malloc(sizeof(EST_CTX));\n    if (!ctx) {\n        EST_LOG_ERR(\"malloc failed\");\n        return NULL;\n    }\n    memzero_s(ctx, sizeof(EST_CTX));\n    ctx->est_mode = EST_PROXY;\n    ctx->retry_period = EST_RETRY_PERIOD_DEF;\n    ctx->server_enable_pop = 1;\n    ctx->require_http_auth = HTTP_AUTH_REQUIRED;\n    ctx->server_read_timeout = EST_SSL_READ_TIMEOUT_DEF;\n\n    if (est_client_set_uid_pw(ctx, uid, pwd) != EST_ERR_NONE) {\n        EST_LOG_ERR(\"Failed to store the userid and password during proxy initialization\");\n        free(ctx);\n        return NULL;\n    }        \n    \n    /*\n     * Load the CA certificates into local memory and retain\n     * for future use.  This will be used for /cacerts requests.\n     */\n    if (cacerts_resp_chain) {    \n        if (est_load_ca_certs(ctx, cacerts_resp_chain, cacerts_resp_chain_len)) {\n            EST_LOG_ERR(\"Failed to load CA certificates response buffer\");\n            free(ctx);\n            return NULL;\n        }\n    }\n    \n    /*\n     * Load the CA certificate chain into an X509 store structure\n     * This will be used in verifying incoming certs during TLS\n     * establishement.\n     * Also save a way a raw copy of the ca_chain buffer so that\n     * it can be used when creating client contexts used to communincate\n     * to the upstream server.\n     */\n    if (est_load_trusted_certs(ctx, ca_chain, ca_chain_len)) {\n        EST_LOG_ERR(\"Failed to load trusted certificate store\");\n\test_destroy(ctx);\n        return NULL;\n    }\n    ctx->ca_chain_raw =  malloc(ca_chain_len+1);\n    if (!ctx->ca_chain_raw) {\n        EST_LOG_ERR(\"malloc failed\");\n\test_destroy(ctx);\n        return NULL;\n    }\n    memcpy_s((char *)ctx->ca_chain_raw, ca_chain_len+1, (char *)ca_chain, ca_chain_len);\n    ctx->ca_chain_raw[ca_chain_len] = '\\0';\n    ctx->ca_chain_raw_len = ca_chain_len;\n    \n    strncpy_s(ctx->realm, MAX_REALM, http_realm, MAX_REALM);\n    ctx->server_cert = tls_id_cert;\n    ctx->server_priv_key = tls_id_key;\n    ctx->auth_mode = AUTH_BASIC;\n    ctx->read_timeout = EST_SSL_READ_TIMEOUT_DEF;\n    ctx->retry_after_delay = 0;\n    ctx->retry_after_date = 0;\n\n    ctx->client_ctx_array = (CLIENT_CTX_LU_NODE_T *) malloc( sizeof(CLIENT_CTX_LU_NODE_T)*cur_max_ctx_array);\n    memzero_s(ctx->client_ctx_array, sizeof(CLIENT_CTX_LU_NODE_T)*cur_max_ctx_array);\n    \n    return (ctx);\n}\n/*! @brief est_proxy_set_auth_mode() is used by an application layer to\n    configure the HTTP authentication method to use for validating the\n    identity of an EST client.\n \n    @param ctx Pointer to the EST proxy context.  This was returned from\n    est_proxy_init().\n    @param amode Should be either AUTH_BASIC or AUTH_DIGEST\n\n    This function can optionally be invoked by the application layer to change\n    the default HTTP authentication mode.  The default mode is HTTP Basic\n    authentication.  An application may desire to use Digest authentication\n    instead, in which case this function can be used to set that mode.  This\n    function should be invoked prior to starting the EST proxy.\n\n    @return EST_ERROR.\n */\nEST_ERROR est_proxy_set_auth_mode (EST_CTX *ctx, EST_HTTP_AUTH_MODE amode)\n{\n    return(est_server_set_auth_mode(ctx, amode));\n}\n/*! @brief est_proxy_set_auth_cred_cb() is used by an application to register\n  its callback function. \n    \n  @param ctx EST context obtained from the est_proxy_init() call.\n  @param auth_credentials_cb  Function pointer to the application layer callback\n\n  The registered callback function is used by the EST client library to obtain\n  authentication credentials.  The application can provide authentication\n  credentials during initialization if they are available, such as the userid\n  and password used with HTTP basic authentication.  During the processing of\n  a request, the EST client library will call this application callback in the\n  event that it does not have the authentication credentials that are being\n  requested by the EST server.\n\n  The callback function definition must match the following function\n  prototype,\n\n  int (*auth_credentials_cb)(EST_HTTP_AUTH_HDR *auth_credentials);\n\n  auth_credentials - A pointer to a EST_HTTP_AUTH_HDR structure.  The\n                     structure is provided by the EST library and the callback\n                     function fills in the specific credentials being\n                     requested.  These credential values must be passed in the\n                     format in which they will be sent to the server, that is,\n                     the EST client library will perform no reformatting of\n                     these credentials.  Ownership of the memory holding these\n                     credential values is transferred from the application\n                     layer to the EST library when the application layer\n                     returns these values to the EST library.  This allows the\n                     EST library to free up this memory as soon as it is done\n                     using these values.\n                         \n  The return value from the callback must be one of the following values:\n\n  EST_HTTP_AUTH_CRED_SUCCESS - If the callback was able to provide the\n                               requested credentials.\n  EST_HTTP_AUTH_CRED_NOT_AVAILABLE - If the callback could not provide the\n                                     requested credentials.\n\n  The auth_credentials_cb parameter can be set to NULL to reset the callback\n  function.\n  \n  All string parameters are NULL terminated strings.\n    \n  @return EST_ERROR.\n  EST_ERR_NONE - Success.\n  EST_ERR_NO_CTX\n*/\nEST_ERROR est_proxy_set_auth_cred_cb (EST_CTX *ctx, auth_credentials_cb callback)\n{\n    return(est_client_set_auth_cred_cb(ctx, callback));\n}\n/*! @brief est_proxy_set_read_timeout() is used by an application to set\n    timeout value of read operations.  After the EST proxy sends a request to\n    the EST server it will attempt to read the response from the server.  This\n    timeout value limits the amount of time the proxy will wait for the\n    response.\n\n    @param ctx Pointer to the EST context\n    @param timeout Integer value representing the read timeout in seconds.\n    The minimum value is EST_SSL_READ_TIMEOUT_MIN and the maximum value is\n    EST_SSL_READ_TIMEOUT_MAX.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_proxy_set_read_timeout (EST_CTX *ctx, int timeout)\n{\n    return(est_client_set_read_timeout(ctx, timeout));\n}\n/*! @brief est_proxy_set_server() is called by the application layer to\n     specify the address/port of the EST server. It must be called after\n     est_proxy_init() and prior to issuing any EST commands.\n \n    @param ctx Pointer to EST context for a client session\n    @param server Name of the EST server to connect to.  The ASCII string\n    representing the name of the server is limited to 254 characters\n    @param port TCP port on the EST server to connect\n \n    @return EST_ERROR\n    EST_ERR_NONE - Success.\n    EST_ERR_NO_CTX - NULL value passed for EST context\n    EST_ERR_INVALID_SERVER_NAME - NULL value passed for EST server name, or\n    server name string too long\n    EST_ERR_INVALID_PORT_NUM - Invalid port number input, less than zero or\n    greater than 65535\n\n    est_proxy_set_server error checks its input parameters and then stores\n    both the hostname and port number into the EST context.\n */\nEST_ERROR est_proxy_set_server (EST_CTX *ctx, const char *server, int port)\n{\n    \n    if (!ctx) {\n        return EST_ERR_NO_CTX;\n    }\n\n    if (server == NULL) {\n        return EST_ERR_INVALID_SERVER_NAME;\n    }\n    if (EST_MAX_SERVERNAME_LEN-1 < strnlen_s(server, EST_MAX_SERVERNAME_LEN)) {\n        return EST_ERR_INVALID_SERVER_NAME;\n    }   \n    \n    if (port <= 0 || port > 65535) {\n        return EST_ERR_INVALID_PORT_NUM;\n    }\n    \n    strncpy_s(ctx->est_server, EST_MAX_SERVERNAME_LEN, server, \n              EST_MAX_SERVERNAME_LEN);\n    ctx->est_port_num = port;\n    \n    return EST_ERR_NONE;\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcb8"},"name":"est_ossl_util.c","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc99"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaf"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc98"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9c"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc90"}]],"contents":"/*****************************************************************************************\n* Authorization routines\n*****************************************************************************************/\nint ossl_verify_cb (int ok, X509_STORE_CTX *ctx)\n{\n    int cert_error = X509_STORE_CTX_get_error(ctx);\n    X509 *current_cert = X509_STORE_CTX_get_current_cert(ctx);\n\n    EST_LOG_INFO(\"enter function: ok=%d cert_error=%d\", ok, cert_error);\n\n    if (!ok) {\n        if (current_cert) {\n            X509_NAME_print_ex_fp(stdout,\n                                  X509_get_subject_name(current_cert),\n                                  0, XN_FLAG_ONELINE);\n            printf(\"\\n\");\n        }\n        EST_LOG_INFO(\"%serror %d at %d depth lookup:%s\\n\",\n                     X509_STORE_CTX_get0_parent_ctx(ctx) ? \"[CRL path]\" : \"\",\n                     cert_error,\n                     X509_STORE_CTX_get_error_depth(ctx),\n                     X509_verify_cert_error_string(cert_error));\n        switch (cert_error) {\n        case X509_V_ERR_UNABLE_TO_GET_CRL:\n            /*\n             * We've enabled CRL checking in the TLS stack.  If\n             * the application hasn't loaded a CRL, then this\n             * verify error can occur.  The peer's cert is valid,\n             * but we can't confirm if it was revoked.  We'll\n             * warn the application.\n             */\n            EST_LOG_WARN(\"No CRL loaded, TLS peer will be allowed.\");\n            ok = 1;\n            break;\n        case X509_V_ERR_NO_EXPLICIT_POLICY:\n        case X509_V_ERR_CERT_HAS_EXPIRED:\n\n        /* since we are just checking the certificates, it is\n         * ok if they are self signed. But we should still warn\n         * the user.\n         */\n\n        case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:\n        /* Continue after extension errors too */\n        case X509_V_ERR_INVALID_CA:\n        case X509_V_ERR_INVALID_NON_CA:\n        case X509_V_ERR_PATH_LENGTH_EXCEEDED:\n        case X509_V_ERR_INVALID_PURPOSE:\n        case X509_V_ERR_CRL_HAS_EXPIRED:\n        case X509_V_ERR_CRL_NOT_YET_VALID:\n        case X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION:\n        case X509_V_ERR_CERT_REVOKED:\n        default:\n            EST_LOG_WARN(\"Certificate verify failed (reason=%d)\",\n                         cert_error);\n            break;\n        }\n        return ok;\n    }\n    return (ok);\n}\n/*\n * This function is used to load an X509_STORE using raw\n * data from a buffer.  The data is expected to be PEM\n * encoded.\n *\n * Returns the number of certs added to the store\n */\nstatic int ossl_init_cert_store_from_raw (X509_STORE *store,\n                                           unsigned char *raw, int size)\n{\n    STACK_OF(X509_INFO) * sk = NULL;\n    X509_INFO *xi;\n    BIO *in;\n    int cert_cnt = 0;\n\n    in = BIO_new_mem_buf(raw, size);\n    if (in == NULL) {\n        EST_LOG_ERR(\"Unable to open the raw CA cert buffer\\n\");\n        return 0;\n    }\n\n    /* This loads from a file, a stack of x509/crl/pkey sets */\n    sk = PEM_X509_INFO_read_bio(in, NULL, NULL, NULL);\n    if (sk == NULL) {\n        EST_LOG_ERR(\"Unable to read PEM encoded certs from BIO\");\n        BIO_free(in);\n        return 0;\n    }\n    BIO_free(in);\n\n    /* scan over it and pull out the CRL's */\n    while (sk_X509_INFO_num(sk)) {\n        xi = sk_X509_INFO_shift(sk);\n        if (xi->x509 != NULL) {\n            EST_LOG_INFO(\"Adding cert to store (%s)\", xi->x509->name);\n            X509_STORE_add_cert(store, xi->x509);\n\t    cert_cnt++;\n        }\n        if (xi->crl != NULL) {\n            EST_LOG_INFO(\"Adding CRL to store\");\n            X509_STORE_add_crl(store, xi->crl);\n        }\n        X509_INFO_free(xi);\n    }\n\n    if (sk != NULL) {\n        sk_X509_INFO_pop_free(sk, X509_INFO_free);\n    }\n    return (cert_cnt);\n}\n/*\n * This function is used to populate an X509_STORE structure,\n * which can be used by the OpenSSL TLS stack to verifying\n * a TLS peer.  The X509_STORE should already have been allocated.\n *\n * Parameters:\n *  store   - Pointer to X509_STORE structure to hold the certs\n *  raw1    - char array containing PEM encoded certs to put\n *            into the store.\n *  size1   - Length of the raw1 char array\n */\nEST_ERROR ossl_init_cert_store (X509_STORE *store,\n                                unsigned char *raw1, int size1)\n{\n    X509_STORE_set_flags(store, 0);\n    int cnt;\n\n    if (raw1) {\n        cnt = ossl_init_cert_store_from_raw(store, raw1, size1);\n\tif (!cnt) {\n\t    EST_LOG_ERR(\"Cert count is zero for store\");\n\t    return (EST_ERR_NO_CERTS_FOUND);\n\t}\n    }\n    return (EST_ERR_NONE);\n}\n/*\n * This function can be used to output the OpenSSL\n * error buffer.  This is useful when an OpenSSL\n * API call fails and you'd like to provide some\n * detail to the user regarding the cause of the\n * failure.\n */\nvoid ossl_dump_ssl_errors ()\n{\n    BIO\t\t*e = NULL;\n    BUF_MEM\t*bptr = NULL;\n\n    e = BIO_new(BIO_s_mem());\n    if (!e) {\n\tEST_LOG_ERR(\"BIO_new failed\");\n\treturn;\n    }\n    ERR_print_errors(e);\n    (void)BIO_flush(e);\n    BIO_get_mem_ptr(e, &bptr);\n    EST_LOG_WARN(\"OSSL error: %s\", bptr->data); \n    BIO_free_all(e);\n}\n/*! @brief est_convert_p7b64_to_pem() converts the base64 encoded\n    PKCS7 response from the EST server into PEM format.   \n \n    @param certs_p7 Points to a buffer containing the base64 encoded pkcs7 data.\n    @param certs_len Indicates the size of the *certs_p7 buffer.\n    @param pem Double pointer that will receive the PEM encoded data. \n \n    Several of the EST message return data that contains base64 encoded PKCS7\n    certificates.  This function is used to convert the data to PEM format.\n    This function will allocate memory pointed to by the **pem argument.\n    The caller is responsible for releasing this memory.  The return value\n    is the length of the PEM buffer, or -1 on error.\n \n    @return int.\n */\nint est_convert_p7b64_to_pem (unsigned char *certs_p7, int certs_len, unsigned char **pem)\n{\n    X509 *x;\n    STACK_OF(X509) *certs = NULL;\n    BIO *b64, *in, *out;\n    unsigned char *cacerts_decoded = NULL;\n    int  cacerts_decoded_len = 0;\n    BIO *p7bio_in = NULL;\n    PKCS7 *p7=NULL;\n    int i, nid;\n    unsigned char *pem_data;\n    int pem_len;\n\n    /*\n     * Base64 decode the incoming ca certs buffer.  Decoding will\n     * always take up no more than the original buffer.\n     */\n    b64 = BIO_new(BIO_f_base64());\n    if (!b64) {\n\tEST_LOG_ERR(\"BIO_new failed\");\n\treturn (-1);\n    }    \n    in = BIO_new_mem_buf(certs_p7, certs_len);    \n    if (!in) {\n\tEST_LOG_ERR(\"BIO_new failed\");\n\treturn (-1);\n    }\n    in = BIO_push(b64, in);    \n    cacerts_decoded = malloc(certs_len);\n    if (!cacerts_decoded) {\n\tEST_LOG_ERR(\"malloc failed\");\n\treturn (-1);\n    }\n    cacerts_decoded_len = BIO_read(in, cacerts_decoded, certs_len);    \n    BIO_free_all(in);\n    /*\n     * Now get the PKCS7 formatted buffer of certificates read into a stack of\n     * X509 certs\n     */\n    p7bio_in = BIO_new_mem_buf(cacerts_decoded, cacerts_decoded_len);\n    if (!p7bio_in) {\n        EST_LOG_ERR(\"BIO_new failed while attempting to create mem BIO\");\n        ossl_dump_ssl_errors();\n        free(cacerts_decoded);\n        return (-1);\n    }\n    p7 = d2i_PKCS7_bio(p7bio_in, NULL);\n    if (!p7) {\n\tEST_LOG_ERR(\"PEM_read_bio_PKCS7 failed\");\n\tossl_dump_ssl_errors();\n        free(cacerts_decoded);\n\treturn (-1);\n    }\n    BIO_free_all(p7bio_in);\n    free(cacerts_decoded);\n    \n    /*\n     * Now that we've decoded the certs, get a reference\n     * the the stack of certs\n     */\n    nid=OBJ_obj2nid(p7->type);\n    switch (nid)\n        {\n        case NID_pkcs7_signed:\n            certs = p7->d.sign->cert;\n            break;\n        case NID_pkcs7_signedAndEnveloped:\n            certs = p7->d.signed_and_enveloped->cert;\n            break;\n        default:\n            EST_LOG_ERR(\"Invalid NID value on PKCS7 structure\");\n\t    PKCS7_free(p7);\n\t    return (-1);\n            break;\n        }\n\n    if (!certs) {\n        EST_LOG_ERR(\"Failed to attain X509 cert stack from PKCS7 data\");\n\tPKCS7_free(p7);\n\treturn (-1);\n    }\n\n    /*\n     * Output the certs to a new BIO using the PEM format \n     */\n    out = BIO_new(BIO_s_mem());\n    if (!out) {\n        EST_LOG_ERR(\"BIO_new failed\");\n\tPKCS7_free(p7);\n\treturn (-1);\n    }\n    for (i=0; i<sk_X509_num(certs); i++) {\n        x=sk_X509_value(certs, i);\n\tPEM_write_bio_X509(out, x);\n\tBIO_puts(out, \"\\n\");\n    }\n    (void)BIO_flush(out);\n\n    /*\n     * Now convert the BIO to char*\n     */\n    pem_len = (int) BIO_get_mem_data(out, (char**)&pem_data);\n    if (pem_len <= 0) {\n        EST_LOG_ERR(\"BIO_get_mem_data failed\");\n\tPKCS7_free(p7);\n\treturn (-1);\n    }\n\n    *pem = malloc(pem_len + 1);\n    if (!*pem) {\n        EST_LOG_ERR(\"malloc failed\");\n\tPKCS7_free(p7);\n\treturn (-1);\n    }\n    memcpy_s(*pem, pem_len, pem_data, pem_len);   \n    (*pem)[pem_len] = 0;  //Make sure it's null termianted\n    BIO_free_all(out);\n    PKCS7_free(p7);\n    return (pem_len);\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcb9"},"name":"est_server.c","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc99"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9e"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc81"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc83"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc89"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc86"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc85"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcb0"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca5"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca4"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaa"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc87"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca3"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca9"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaf"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcb2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcad"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcac"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc7f"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc98"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc94"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc90"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc92"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8e"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc97"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc95"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca1"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8a"}]],"contents":"/*\n * This function sends EST specific HTTP error responses.\n */\nvoid est_send_http_error (EST_CTX *ctx, void *http_ctx, int fail_code)\n{\n    struct mg_connection *conn = (struct mg_connection*)http_ctx;\n\n    switch (fail_code) {\n    case EST_ERR_BAD_PKCS10:\n\tmg_send_http_error(conn, EST_HTTP_STAT_400, EST_HTTP_STAT_400_TXT, EST_BODY_BAD_PKCS10);\n        break;\n    case EST_ERR_AUTH_FAIL:\n\tmg_send_http_error(conn, EST_HTTP_STAT_401, EST_HTTP_STAT_401_TXT, EST_BODY_UNAUTHORIZED);\n        break;\n    case EST_ERR_WRONG_METHOD:\n\tmg_send_http_error(conn, EST_HTTP_STAT_400, EST_HTTP_STAT_400_TXT, EST_BODY_BAD_METH);\n        break;\n    case EST_ERR_NO_SSL_CTX:\n\tmg_send_http_error(conn, EST_HTTP_STAT_400, EST_HTTP_STAT_400_TXT, EST_BODY_BAD_SSL);\n        break;\n    case EST_ERR_HTTP_NOT_FOUND:\n\tmg_send_http_error(conn, EST_HTTP_STAT_404, EST_HTTP_STAT_404_TXT, EST_BODY_NOT_FOUND);\n        break;\n    case EST_ERR_HTTP_NO_CONTENT:\n\tmg_send_http_error(conn, EST_HTTP_STAT_204, EST_HTTP_STAT_204_TXT, \"\");\n        break;\n    default:\n\tmg_send_http_error(conn, EST_HTTP_STAT_400, EST_HTTP_STAT_400_TXT, EST_BODY_UNKNOWN_ERR);\n        break;\n    }\n}\n/*\n * This function sends a HTTP 202 Accepted response to the \n * client with the retry-after value from the CA. This\n * notifies the client that it should check back later to\n * see if the CSR was approved.\n */\nEST_ERROR est_server_send_http_retry_after (EST_CTX *ctx, void *http_ctx, int delay)\n{\n    char http_hdr[EST_HTTP_HDR_MAX];\n    struct mg_connection *conn = (struct mg_connection*)http_ctx;\n\n    snprintf(http_hdr, EST_HTTP_HDR_MAX, \"%s%s%s%s%s: %d%s%s\", \n\tEST_HTTP_HDR_202,\n        EST_HTTP_HDR_EOL, \n\tEST_HTTP_HDR_STAT_202, \n\tEST_HTTP_HDR_EOL,\n\tEST_HTTP_HDR_RETRY_AFTER, \n\tdelay, \n\tEST_HTTP_HDR_EOL, \n\tEST_HTTP_HDR_EOL);\n\n    conn->status_code = EST_HTTP_STAT_202;\n    if (!mg_write(http_ctx, http_hdr, strnlen_s(http_hdr, EST_HTTP_HDR_MAX))) {\n        EST_LOG_ERR(\"HTTP write error while propagating retry-after\");\n        return (EST_ERR_HTTP_WRITE);\n    }\n    return (EST_ERR_NONE);\n}\n/*\n * This function handles an incoming cacerts request from\n * the client.\n */\nint est_handle_cacerts (EST_CTX *ctx, unsigned char *ca_certs, int ca_certs_len,\n                        void *http_ctx, char *path_seg)\n{\n    char http_hdr[EST_HTTP_HDR_MAX];\n    int hdrlen;    \n    \n    if (ca_certs  == NULL) {\n        return (EST_ERR_HTTP_NOT_FOUND);\n    }\n        \n    /*\n     * Send HTTP header\n     */\n    snprintf(http_hdr, EST_HTTP_HDR_MAX, \"%s%s%s%s\", EST_HTTP_HDR_200, EST_HTTP_HDR_EOL,\n             EST_HTTP_HDR_STAT_200, EST_HTTP_HDR_EOL);\n    hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n    snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CT,\n             EST_HTTP_CT_PKCS7, EST_HTTP_HDR_EOL);\n    hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n    snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CE,\n             EST_HTTP_CE_BASE64, EST_HTTP_HDR_EOL);\n    hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n    snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %d%s%s\", EST_HTTP_HDR_CL,\n             ca_certs_len, EST_HTTP_HDR_EOL, EST_HTTP_HDR_EOL);\n    if (!mg_write(http_ctx, http_hdr, strnlen_s(http_hdr, EST_HTTP_HDR_MAX))) {\n        return (EST_ERR_HTTP_WRITE);\n    }\n\n    /*\n     * Send the CA certs in the body\n     */\n    if (!mg_write(http_ctx, ca_certs, ca_certs_len)) {\n        return (EST_ERR_HTTP_WRITE);\n    }\n\n    EST_LOG_INFO(\"CA certs successfully sent to EST client\");\n    return (EST_ERR_NONE);\n}\n/*\n * Handle a CA certs request.  If the application layer has\n * registered a callback then call it.  Else, if the application\n * layer has provided a locally configured buffer then send it.\n * Else, return an error indicating that there are no CA Certs\n * available.\n */\nstatic int est_server_handle_cacerts (EST_CTX *ctx, void *http_ctx,\n                                      char *path_seg)\n{\n    EST_ERROR rv;\n    int ca_certs_len;\n    unsigned char *ca_certs;\n\n    /*\n     * If there is a call back set then call it.\n     * otherwise, if there is a locally configured cacerts buffer,\n     * then return that.\n     * otherwise, return an error indicating that we don't have any cacerts\n     */\n    if (ctx->est_get_cacerts_cb) {\n\n        EST_LOG_INFO(\"Server: Retrieving CA certs from application layer\");\n        ca_certs = ctx->est_get_cacerts_cb(&ca_certs_len, path_seg,ctx->ex_data);\n        if (ca_certs) {\n\n            EST_LOG_INFO(\"Server: Successfully retrieved CA certs from \"\n                         \"application layer\");\n            rv = est_handle_cacerts(ctx, ca_certs, ca_certs_len, http_ctx,\n                                    path_seg);\n        } else {\n            est_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n            rv = EST_ERR_NONE;\n        }\n    } else if (ctx->ca_certs) {\n        \n        EST_LOG_INFO(\"Server: CA certs set locally, responding with \"\n                     \"locally set CA certs response\");\n        rv = est_handle_cacerts(ctx, ctx->ca_certs, ctx->ca_certs_len,\n                                      http_ctx, path_seg);\n    } else {\n        \n        est_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n        rv = EST_ERR_NONE;\n    }\n    return (rv);\n}\n/*! @brief est_server_generate_auth_digest() is used by an application \n    to calculate the HTTP Digest value based on the header values\n    provided by an EST client.  \n \n    @param ah Authentication header values from client, provided by libEST\n    @param HA1 The precalculated HA1 value for the user.  HA1 is defined in\n           RFC 2617.  It's the MD5 calculation of the user's ID, HTTP realm,\n\t   and the user's password.\n\n    This is a helper function that an application can use to calculate\n    the HTTP Digest value when performing HTTP Digest Authentication\n    of an EST client.  libEST does not maintain a user database. \n    This is left up to the application, with the intent of integrating  \n    an external user database (e.g. Radius/AAA).\n    \n    The HA1 value should be calculated by the application as\n    defined in RFC 2617.  HA1 is the MD5 hash of the user ID, HTTP realm,\n    and user password.  This MD5 value is then converted to a hex string.\n    HA1 is expected to be 32 bytes long.\n \n    @return char* containing the digest, or NULL if an error occurred.\n */\nchar *est_server_generate_auth_digest (EST_HTTP_AUTH_HDR *ah, char *HA1)\n{\n    EVP_MD_CTX *mdctx;\n    const EVP_MD *md = EVP_md5();\n    uint8_t ha2[EVP_MAX_MD_SIZE];\n    unsigned int ha2_len;\n    char ha2_str[33];\n    unsigned char digest[EVP_MAX_MD_SIZE];\n    unsigned int d_len;\n    char *rv;\n\n    if (!ah) {\n\tEST_LOG_ERR(\"Null auth header\");\n        return (NULL);\n    }\n\n    if (!HA1) {\n\tEST_LOG_ERR(\"Null HA1\");\n        return (NULL);\n    }\n\n    /*\n     * Calculate HA2 using method, URI,\n     */\n    mdctx = EVP_MD_CTX_create();\n    EVP_DigestInit_ex(mdctx, md, NULL);\n    EVP_DigestUpdate(mdctx, \"POST\", 4); \n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ah->uri, strnlen_s(ah->uri, MAX_REALM));\n    EVP_DigestFinal(mdctx, ha2, &ha2_len);\n    EVP_MD_CTX_destroy(mdctx);\n    est_hex_to_str(ha2_str, ha2, ha2_len);\n\n    /*\n     * Calculate auth digest using HA1, nonce, nonce count, client nonce, qop, HA2\n     */\n    mdctx = EVP_MD_CTX_create();\n    EVP_DigestInit_ex(mdctx, md, NULL);\n    EVP_DigestUpdate(mdctx, HA1, 32); \n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ah->nonce, strnlen_s(ah->nonce, MAX_NONCE));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ah->nc, strnlen_s(ah->nc, MAX_NC));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ah->cnonce, strnlen_s(ah->cnonce, MAX_NONCE));\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, \"auth\", 4);\n    EVP_DigestUpdate(mdctx, \":\", 1);\n    EVP_DigestUpdate(mdctx, ha2_str, ha2_len * 2);\n    EVP_DigestFinal(mdctx, digest, &d_len);\n    EVP_MD_CTX_destroy(mdctx);\n\n    rv = malloc(33);\n    est_hex_to_str(rv, digest, d_len);\n    return (rv);\n}\n/*\n * This function allocates an HTTP authentication header\n * structure, which is used to pass the auth credentials\n * to the application layer to allow the app to authenticate\n * an EST client.\n */\nstatic EST_HTTP_AUTH_HDR * est_create_ah()\n{\n    EST_HTTP_AUTH_HDR *ah;\n\n    ah = malloc(sizeof(EST_HTTP_AUTH_HDR));\n    memzero_s(ah, sizeof(EST_HTTP_AUTH_HDR));\n    return (ah);\n}\n/*\n * This function frees all the elements on an HTTP\n * authentication header structure.\n */\nstatic void est_destroy_ah(EST_HTTP_AUTH_HDR *ah)\n{\n    int len;\n\n    if (!ah) return;\n    if (ah->user) free(ah->user);\n    if (ah->pwd) {\n\t/*\n\t * Get the length of the password so it can be zeroized \n\t */\n\tlen = strnlen_s(ah->pwd, MAX_UIDPWD);\n\tif (len) {\n\t    memzero_s(ah->pwd, len);\n\t}\n\tfree(ah->pwd);\n    }\n    if (ah->uri) free(ah->uri);\n    if (ah->cnonce) free(ah->cnonce);\n    if (ah->qop) free(ah->qop);\n    if (ah->nc) free(ah->nc);\n    if (ah->nonce) free(ah->nonce);\n    if (ah->response) free(ah->response);\n    if (ah->auth_token) {\n\tlen = strnlen_s(ah->auth_token, MAX_AUTH_TOKEN_LEN);\n\tif (len) {\n\t    memzero_s(ah->auth_token, len);\n\t}\n\tfree(ah->auth_token);\n    }\n    free(ah);\n}\n/*\n * This function verifies that the peer either provided a certificate\n * that was verifed by the TLS stack, or HTTP authentication\n * credentials were provided. \n *\n * Returns a EST_AUTH_STATE authorization result \n */\nEST_AUTH_STATE est_enroll_auth (EST_CTX *ctx, void *http_ctx, SSL *ssl,\n\t                        char *path_seg, int reenroll)\n{\n    EST_AUTH_STATE rv = EST_UNAUTHORIZED;\n    X509 *peer = NULL;\n    struct mg_connection *conn = (struct mg_connection*)http_ctx;\n    EST_HTTP_AUTH_HDR *ah;\n    EST_HTTP_AUTH_HDR_RESULT pr;\n    int v_result;\n\n    /*\n     * Get client certificate from TLS stack.  \n     */\n    if ((peer = SSL_get_peer_certificate(ssl)) != NULL) {\n        // check TLS based client authorization (is client cert authorized)\n        v_result = (int) SSL_get_verify_result(ssl);\n        if (X509_V_OK == v_result) {\n            EST_LOG_INFO(\"TLS: client certificate is valid\");\n\t    rv = EST_CERT_AUTH;\n\t}\n\telse if (X509_V_ERR_UNABLE_TO_GET_CRL == v_result) {\n            EST_LOG_WARN(\"Peer cert is valid, but no CRL was loaded. Unable to determine if peer cert is revoked.\");\n\t    rv = EST_CERT_AUTH;\n        } else {\n            EST_LOG_INFO(\"TLS: client certificate not verified (v_result=%d)\",\n\t\t         v_result);\n\t    /* We need to bail since the client is using a bogus cert,\n\t     * no need to contiue with HTTP authentication below */\n\t    X509_free(peer);\n\t    return(EST_UNAUTHORIZED);\n        }\n    } else {\n        EST_LOG_INFO(\"TLS: no peer certificate\");\n\trv = EST_UNAUTHORIZED;\n    }\n\n    /*\n     * See if SRP is being used.  If so, there will be no\n     * certificate.\n     */\n    if (rv != EST_CERT_AUTH && SSL_get_srp_username(ssl) != NULL) {\n        EST_LOG_INFO(\"TLS: no certificate from client, SRP login is %s\",\n\t\tSSL_get_srp_username(ssl));\n\trv = EST_SRP_AUTH;\n    }\n\n    /*\n     * If the application layer has enabled HTTP authentication we\n     * will attempt HTTP authentication when TLS client auth fails\n     * or when the require_http_auth flag is set by the application.\n     * All this assumes the application layer has provided the HTTP auth\n     * callback facility.\n     */\n    if (ctx->est_http_auth_cb && \n\t(rv == EST_UNAUTHORIZED || HTTP_AUTH_REQUIRED == ctx->require_http_auth)) {\n        /*\n         * Try HTTP authentication.\n         */\n\tah = est_create_ah();\n        pr = mg_parse_auth_header(conn, ah);\n\tswitch (pr) {\n        case EST_AUTH_HDR_GOOD:\n\t    /*\n\t     * Invoke the application specific auth check now \n\t     * that we have the user's credentials\n\t     */\n\t    if (ctx->est_http_auth_cb(ctx, ah, peer, path_seg, ctx->ex_data)) {\n\t\trv = EST_HTTP_AUTH;\n\t    } else {\n                EST_LOG_WARN(\"HTTP authentication failed. Auth type=%d\", \n                             ah->mode);\n\t\trv = EST_UNAUTHORIZED;\n\t    }\n\t    break;\n        case EST_AUTH_HDR_MISSING:\n            // ask client to send us authorization headers\n            mg_send_authorization_request(conn);\n\t    EST_LOG_INFO(\"HTTP auth headers missing, sending HTTP auth request to client.\");\n            rv = EST_HTTP_AUTH_PENDING;\n\t    break;\n        case EST_AUTH_HDR_BAD:\n\tdefault:\n            EST_LOG_WARN(\"Client sent incomplete HTTP authorization header\"); \n\t    if (reenroll && rv == EST_CERT_AUTH) {\n\t\tEST_LOG_INFO(\"Client cert was authenticated, HTTP auth not required for reenroll\"); \n\t    } else {\n\t\trv = EST_UNAUTHORIZED;\n\t    }\n\t    break;\n\t}\n\test_destroy_ah(ah);\n    } \n    if (peer) {\n\tX509_free(peer);\n    }\n    return (rv);\n\n}\n/*\n * This function is used to determine if the EST client, which could be\n * an RA, is using a certificate that contains the id-kp-cmcRA usage\n * extension.  When this usage bit is present, the PoP check is disabled\n * to allow the RA use case. \n *\n * This logic was taken from x509v3_cache_extensions() in v3_purp.c (OpenSSL).\n *\n * Returns 1 if the cert contains id-kp-cmcRA extended key usage extension.\n * Otherwise it returns 0.\n */\nstatic int est_check_cmcRA (X509 *cert) \n{\n    int cmcRA_found = 0;\n    EXTENDED_KEY_USAGE *extusage;\n    int i;\n    ASN1_OBJECT *obj;\n\n    /*\n     * Get the extended key usage extension.  If found\n     * loop through the values and look for the ik-kp-cmcRA\n     * value in this extension.\n     */\n    if((extusage = X509_get_ext_d2i(cert, NID_ext_key_usage, NULL, NULL))) {\n\t/*\n\t * Iterate through the extended key usage values\n\t */\n        for(i = 0; i < sk_ASN1_OBJECT_num(extusage); i++) {\n\t    obj =  sk_ASN1_OBJECT_value(extusage,i);\n\t    /*\n\t     * Compare the current iteration with the global\n\t     * id-kp-cmcRA value that was created earlier\n\t     */\n            if (!OBJ_cmp(obj, o_cmcRA)) {\n                cmcRA_found = 1; \n                break;\n            }\n        }\n        sk_ASN1_OBJECT_pop_free(extusage, ASN1_OBJECT_free);\n    }\n\n    return (cmcRA_found);\n}\n/*\n * This is a utility function to convert the base64 DER encoded\n * CSR to an OpenSSL X509_REQ pointer.  Returns NULL if there\n * was a problem.\n */\nX509_REQ * est_server_parse_csr (unsigned char *pkcs10, int pkcs10_len)\n{\n    BIO *in, *b64;\n    X509_REQ *req;\n\n    /*\n     * Get the original pkcs10 request from the client\n     */\n    b64 = BIO_new(BIO_f_base64());\n    if (b64 == NULL) {\n\tEST_LOG_ERR(\"Unable to open PKCS10 b64 buffer\");\n\treturn (NULL);\n    }\n    in = BIO_new_mem_buf(pkcs10, pkcs10_len);\n    if (in == NULL) {\n\tEST_LOG_ERR(\"Unable to open PKCS10 raw buffer\");\n\tBIO_free(b64);\n\treturn (NULL);\n    }\n    in = BIO_push(b64, in);\n\n    /*\n     * Read the PEM encoded pkcs10 cert request\n     */\n    if ((req = d2i_X509_REQ_bio(in, NULL)) == NULL) {\n        EST_LOG_ERR(\"Problem reading DER encoded certificate request\");\n\tossl_dump_ssl_errors();\n        BIO_free_all(in);\n\treturn (NULL);\n    }\n    BIO_free_all(in);\n\n    return req;\n}\n/*\n * This function implements the Proof of Posession check (PoP).  The TLS UID has\n * already been saved from the TLS session earlier.  This TLS UID should match the\n * value of the challengePassword attribute in the pkcs10 client certificate.  The\n * client will have provided this value when signing the pkcs10 cert request\n * with its private key, which proves the client is in possession of the private key.\n * This check is enforced as follows:\n *     1. If CSR contains the PoP, it must be valid.\n *     2. If CSR didn't contain the PoP and the server is configured\n *        to require the PoP, then the authentication fails.\n *     3. Otherwise, if CSR didn't contain the PoP and the server is not\n *        configured to require PoP, then authentication passes.\n *\n * Parameters:\n *\tctx:\t    Pointer to EST context\n *\tssl:        Pointer to SSL context\n *\tpkcs10:\t    Pointer to raw PKCS10 data\n *\tpkcs10_len: Length of raw PKCS10 data\n *\n * Return value:\n *\tEST_ERR_NONE when PoP check passes\n */\nint est_tls_uid_auth (EST_CTX *ctx, SSL *ssl, X509_REQ *req) \n{\n    X509_ATTRIBUTE *attr;\n    int i, j;\n\n    ASN1_TYPE *at;\n    ASN1_BIT_STRING *bs = NULL;\n    ASN1_TYPE *t;\n    int rv = EST_ERR_NONE;\n    char *tls_uid;\n    int diff;\n\n    /*\n     * Get the index of the challengePassword attribute in the request\n     */\n    i = X509_REQ_get_attr_by_NID(req, NID_pkcs9_challengePassword, -1);\n    if (i < 0) {\n        EST_LOG_INFO(\"Cert request does not contain PoP challengePassword attribute\");\n\t/*\n\t * If PoP is enabled, we must fail at this point\n\t * since the client didn't send the channel binding\n\t * info in the CSR.\n\t */\n\tif (ctx->server_enable_pop) {\n\t    EST_LOG_WARN(\"PoP enabled, CSR was not authenticated\");\n            return (EST_ERR_AUTH_FAIL_TLSUID);\n\t} else {\n\t    return (EST_ERR_NONE);\n\t}\n    } else {\n        /*\n         * Get a reference to the attribute now that we know where it's located\n\t * RFC 7030 requires that we check the PoP when it's present\n         */\n        attr = X509_REQ_get_attr(req, i);\n\n        /*\n         * If we found the attribute, get the actual value of the challengePassword\n         */\n        if (attr) {\n            if (attr->single) {\n                t = attr->value.single;\n                bs = t->value.bit_string;\n            } else {\n                j = 0;\n                at = sk_ASN1_TYPE_value(attr->value.set, j);\n                bs = at->value.asn1_string;\n            }\n        } else {\n            EST_LOG_WARN(\"PoP challengePassword attribute not found in client cert request\");\n            return (EST_ERR_AUTH_FAIL_TLSUID);\n        }\n\n        /*\n         * Now that we have the challengePassword from the client cert request,\n         * compare it to the TLS UID we calculated on the server side.\n         * This implements the PoP check to verify the client holds the private\n         * key used to sign the cert request.\n         */\n        tls_uid = est_get_tls_uid(ssl, 0);\n        if (tls_uid) {\n\t    i = memcmp_s(tls_uid, EST_TLS_UID_LEN, bs->data, EST_TLS_UID_LEN, &diff);\n            if (i == EOK && !diff) {\n                EST_LOG_INFO(\"PoP is valid\");\n                rv = EST_ERR_NONE;\n            } else {\n                EST_LOG_WARN(\"PoP is not valid\");\n                rv = EST_ERR_AUTH_FAIL_TLSUID;\n            }\n            free(tls_uid);\n        } else {\n            EST_LOG_WARN(\"Local TLS channel binding info is not available\");\n            rv = EST_ERR_AUTH_FAIL_TLSUID;\n        }\n    }\n\n    return rv;\n}\n/*\n * This function performs a simple sanity check on a PKCS10\n * CSR.  It will check the signature in the CSR.\n * Returns 0 for success, non-zero if the sanity check failed.\n */\nint est_server_check_csr (X509_REQ *req) \n{\n    EVP_PKEY *pub_key = NULL;\n    int rc;\n\n    /*\n     * Extract the public key from the CSR\n     */\n    if ((pub_key = X509_REQ_get_pubkey(req)) == NULL) {\n\tEST_LOG_ERR(\"Unable to extract public key from CSR\");\n\treturn 1;\n    }\n\n    /*\n     * Verify the signature in the CSR \n     */\n    rc = X509_REQ_verify(req, pub_key);\n    EVP_PKEY_free(pub_key);\n\n    /*\n     * Check the result\n     */\n    if (rc < 0) {\n\tEST_LOG_ERR(\"CSR signature check failed\");\n        return 1;\n    } else if (rc == 0) {\n\tEST_LOG_ERR(\"CSR signature mismatch\");\n        return 1;\n    } else {\n        return 0;\n    }\n}\n/*\n * Frees the linked-list containing the attributes in\n * the client CSR.\n */\nstatic void est_server_free_csr_oid_list (EST_OID_LIST *head)\n{\n    EST_OID_LIST *next_entry;\n\n    if (!head) {\n\treturn;\n    }\n\n    next_entry = head->next;\n    while (next_entry) {\n\tfree(head);\n\thead = next_entry;\n\tnext_entry = head->next;\n    }\n    free(head);\n}\n/*\n * Adds a new entry to the tail of the list of attributes\n * in the client CSR.\n */\nstatic void est_server_add_oid_to_list (EST_OID_LIST **list, EST_OID_LIST *new_entry) \n{\n    EST_OID_LIST *head = *list;\n\n    /*\n     * If the list doesn't have a head yet, the new entry\n     * simply becomes the head\n     */\n    if (head == NULL) { \n\t*list = new_entry;\n    } else {\n\t/*\n\t * Walk the list to find the tail, add the new entry to the end\n\t */\n\twhile (head->next) {\n\t    head = head->next;\n\t}\n\thead->next = new_entry;\n    }\n}\n/*\n * This is a recursive routine that walks through an ASN.1 blob\n * looking for ASN.1 object definitions.  For any that are\n * found, the OID for the object is added to the EST_OID_LIST (first argument).\n * The end result of this routine is **list will contain all the OID\n * values for every ASN.1 object in the blob.\n * This code was shamelessly taken from OpenSSL ans1_parse2(), which\n * explains some of the poorly chosen variable names.\n */\nstatic int est_server_csr_asn1_parse (EST_OID_LIST **list, const unsigned char **blob, long length, int offset)\n{\n    EST_OID_LIST *new_entry;\n    const unsigned char *ptr, *ep, *tot, *op, *opp;\n    long len;\n    int tag, xclass;\n    int hl, j, r;\n    ASN1_OBJECT *a_object = NULL;\n    errno_t safec_rc; \n\n    ptr = *blob;\n    tot = ptr + length;\n    op = ptr - 1;\n    while ((ptr < tot) && (op < ptr)) {\n\top = ptr;\n\tj = ASN1_get_object(&ptr, &len, &tag, &xclass, length);\n\tif (j & 0x80) {\n\t    EST_LOG_ERR(\"Error in encoding\"); \n\t    *blob = ptr;\n\t    return (0);\n\t}\n\thl = ptr - op;\n\tlength -= hl;\n\n\tif (j & V_ASN1_CONSTRUCTED) {\n\t    ep = ptr + len;\n\t    if (len > length) {\n\t\tEST_LOG_ERR(\"length is greater than %ld\",length);\n\t\t*blob = ptr;\n\t\treturn (0);\n\t    }\n\t    if ((j == 0x21) && (len == 0)) {\n\t\tr = est_server_csr_asn1_parse(list, &ptr, (long)(tot-ptr), offset+(ptr - *blob));\n\t\tif (r == 0) { \n\t\t    *blob = ptr;\n\t\t    return (0);\n\t\t}\n\t\tif ((r == 2) || (ptr >= tot)) break;\n\t    } else {\n\t\twhile (ptr < ep) {\n\t\t    r = est_server_csr_asn1_parse(list, &ptr, (long)len, offset+(ptr - *blob));\n\t\t    if (r == 0) { \n\t\t\t*blob = ptr;\n\t\t\treturn (0);\n\t\t    }\n\t\t}\n\t    }\n\t} else if (xclass != 0) {\n\t    ptr += len;\n\t} else {\n\t    if (tag == V_ASN1_OBJECT) {\n\t\topp = op;\n\t\tif (d2i_ASN1_OBJECT(&a_object, &opp, len+hl) != NULL) {\n\t\t    new_entry = malloc(sizeof(EST_OID_LIST));\n\t\t    if (!new_entry) {\n\t\t\tEST_LOG_ERR(\"malloc failure\");\n\t\t\test_server_free_csr_oid_list(*list);\n\t\t\tif (a_object != NULL) { ASN1_OBJECT_free(a_object); }\n\t\t\t*blob = ptr;\n\t\t\treturn (0);\n\t\t    }\n\t\t    safec_rc = memset_s(new_entry, sizeof(EST_OID_LIST), 0x0, sizeof(EST_OID_LIST));\n\t\t    if (safec_rc != EOK) {\n\t\t        EST_LOG_INFO(\"memset_s error 0x%xO\\n\", safec_rc);\n\t\t    }\n\t\t    i2t_ASN1_OBJECT(new_entry->oid, EST_MAX_ATTR_LEN, a_object);\n\t\t    EST_LOG_INFO(\"Build CSR OID list: %s\", new_entry->oid);\n\t\t    est_server_add_oid_to_list(list, new_entry);\n\t\t    if (a_object != NULL) {\n\t\t\tASN1_OBJECT_free(a_object);\n\t\t\ta_object = NULL;\n\t\t    }\n\t\t} else {\n\t\t    EST_LOG_ERR(\"Bad ASN.1 object\");\n\t\t    if (a_object != NULL) { ASN1_OBJECT_free(a_object); }\n\t\t    *blob = ptr;\n\t\t    return (0);\n\t\t}\n\t    } \n\t    ptr += len;\n\t    if ((tag == V_ASN1_EOC) && (xclass == 0)) {\n\t\t*blob = ptr;\n\t\treturn (2);\n\t    }\n\t}\n\tlength -= len;\n    }\n    *blob = ptr;\n    return (1);\n}\n/*\n * Utility function that populates a linked-list containing\n * the OID (or name) of the attributes present in the\n * client CSR.\n */\nstatic EST_ERROR est_server_build_csr_oid_list (EST_OID_LIST **list, char *body, int body_len)\n{\n    unsigned char *der_data, *der_ptr;\n    int der_len;\n    int rv;\n\n    /*\n     * grab some space to hold the decoded CSR data\n     */\n    der_ptr = der_data = malloc(body_len*2);\n    if (!der_data) {\n\tEST_LOG_ERR(\"malloc failed\");\n        return (EST_ERR_MALLOC);\n    }\n\n    /*\n     * Decode the CSR data\n     */\n    der_len = est_base64_decode((char *)body, (char *)der_data, body_len*2);\n    if (der_len <= 0) {\n        EST_LOG_ERR(\"Invalid base64 encoded data\");\n\tfree(der_data);\n        return (EST_ERR_BAD_BASE64);\n    }\n\n    rv = est_server_csr_asn1_parse(list, (const unsigned char **)&der_data, der_len, 0);\n    if (!rv) {\n\tEST_LOG_ERR(\"Failed to build OID list from client provided CSR\");\n\test_server_free_csr_oid_list(*list);\n\tfree(der_ptr);\n\treturn (EST_ERR_UNKNOWN);\n    }\n    free(der_ptr);\n    return (EST_ERR_NONE);\n}\n/*\n * This function checks the locally configured CSR attributes\n * against the attributes in the CSR.  If any attributes are\n * missing from the CSR, then an error is returned.\n */\nstatic EST_ERROR est_server_all_csrattrs_present(EST_CTX *ctx, char *body, int body_len) \n{\n    int tag, xclass, j, found_match, nid;\n    long len;\n    unsigned char *der_ptr, *save_ptr;\n    ASN1_OBJECT *a_object;\n    int max_len = MAX_CSRATTRS;\n    char *csr_data;\n    int csr_len;\n    long out_len_save;\n    unsigned char *der_data;\n    int der_len, out_len;\n    int a_len;\n    char tbuf[EST_MAX_ATTR_LEN];\n    EST_OID_LIST *csr_attr_oids = NULL; \n    EST_OID_LIST *oid_entry;\n    int comparator;\n    EST_ERROR rv;\n\n    EST_LOG_INFO(\"CSR attributes enforcement is enabled\");\n\n    if (!ctx->server_csrattrs && !ctx->est_get_csr_cb) {\n\tEST_LOG_WARN(\"CSR attributes enforcement is enabled, but no attributes have been configured\");\n\treturn EST_ERR_NONE;\n    }\n\n    /*\n     * Build the list of attributes present in the CSR.  This list will be\n     * used later when we confirm the required attributes are present.\n     */\n    rv =  est_server_build_csr_oid_list(&csr_attr_oids, body, body_len);\n    if (rv != EST_ERR_NONE) {\n\treturn (rv);\n    }\n\n    /*\n     * Get the CSR attributes configured on the server.  We'll need to \n     * look in the CSR to make sure the CSR provided each of these. \n     * Use the callback if configured, otherwise use the local copy.\n     */\n    if (ctx->est_get_csr_cb) {\n\tcsr_data = (char *)ctx->est_get_csr_cb(&csr_len, NULL, ctx->ex_data);\n\tif (!csr_data) {\n\t    EST_LOG_ERR(\"Application layer failed to return CSR attributes\");\n\t    est_server_free_csr_oid_list(csr_attr_oids);\n\t    return (EST_ERR_CB_FAILED);\n\t}\n    } else {\n        csr_data = malloc(ctx->server_csrattrs_len + 1);\n\tif (!csr_data) {\n\t    EST_LOG_ERR(\"malloc failure\");\n\t    est_server_free_csr_oid_list(csr_attr_oids);\n            return (EST_ERR_MALLOC);\n        }\n        strncpy_s(csr_data, ctx->server_csrattrs_len + 1, \n\t\t  (char *)ctx->server_csrattrs, ctx->server_csrattrs_len);\n\tcsr_data[ctx->server_csrattrs_len] = 0;\n\tcsr_len = ctx->server_csrattrs_len;\n    }\n    EST_LOG_INFO(\"Checking CSR attrs present in CSR: %s\", csr_data);\n\n    /* \n     * We have the CSR configured on the server and it needs base64 decoding.\n     * Check smallest possible base64 case here for now \n     * and sanity test will check min/max value for ASN.1 data\n     */\n    if (csr_len < MIN_CSRATTRS) {\n\test_server_free_csr_oid_list(csr_attr_oids);\n\tfree(csr_data);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    /*\n     * grab some space to hold the decoded CSR data\n     */\n    der_data = malloc(csr_len*2);\n    if (!der_data) {\n\tEST_LOG_ERR(\"malloc failed\");\n\test_server_free_csr_oid_list(csr_attr_oids);\n\tfree(csr_data);\n        return (EST_ERR_MALLOC);\n    }\n\n    /*\n     * Decode the CSR data\n     */\n    der_len = est_base64_decode(csr_data, (char *)der_data, csr_len*2);\n    free(csr_data);\n    if (der_len <= 0) {\n        EST_LOG_ERR(\"Invalid base64 encoded data\");\n\test_server_free_csr_oid_list(csr_attr_oids);\n\tfree(der_data);\n        return (EST_ERR_BAD_BASE64);\n    }\n\n    /*\n     * pointer fun starts here, joy to OpenSSL\n     */\n    out_len_save = out_len = der_len;\n    der_ptr = save_ptr = der_data;\n\n    if (out_len_save > max_len) {\n\tEST_LOG_ERR(\"DER length exceeds max\");\n\test_server_free_csr_oid_list(csr_attr_oids);\n\tfree(der_data);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    /* make sure its long enough to be ASN.1 */\n    if (der_len < MIN_ASN1_CSRATTRS) {\n\tEST_LOG_ERR(\"DER too short\");\n\test_server_free_csr_oid_list(csr_attr_oids);\n\tfree(der_data);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    /*\n     * Iterate through the CSR attributes configured on the server\n     */\n    while (out_len > 0) {\n\t/*\n\t * Get the next attributes\n\t */\n\tj = ASN1_get_object((const unsigned char**)&der_ptr, &len, &tag, &xclass, out_len);\n\n\tEST_LOG_INFO(\"Sanity: tag=%d, len=%d, j=%d, out_len=%d\", tag, len, j, out_len);\n\tif (j & 0x80) {\n\t    EST_LOG_ERR(\"Bad ASN1 hex\");\n\t    est_server_free_csr_oid_list(csr_attr_oids);\n\t    free(der_data);\n\t    return (EST_ERR_BAD_ASN1_HEX);\n        }\n\tswitch (tag) {\n\tcase V_ASN1_OBJECT:\n            a_object = c2i_ASN1_OBJECT(NULL, (const unsigned char**)&der_ptr, len);\n\t    if (!a_object) {\n\t\tEST_LOG_ERR(\"a_object is null\");\n\t        est_server_free_csr_oid_list(csr_attr_oids);\n\t\tfree(der_data);\n\t\treturn (EST_ERR_UNKNOWN);\n\t    }\n\t    /*\n\t     * If this is the challengePassword, no need to check it.\n\t     * This is already covered when authenticating the client\n\t     */\n\t    nid = OBJ_obj2nid(a_object);\n\t    if (nid == NID_pkcs9_challengePassword) {\n\t\tASN1_OBJECT_free(a_object);\n\t\tbreak;\n\t    }\n\n\t    a_len = i2t_ASN1_OBJECT(tbuf, EST_MAX_ATTR_LEN, a_object);\n\t    EST_LOG_INFO(\"Looking for attr=%s in the CSR\", tbuf);\n\t    ASN1_OBJECT_free(a_object);\n\n\t    /*\n\t     * If there were no attrubutes in the CSR, we can\n\t     * bail now.\n\t     */\n\t    if (csr_attr_oids == NULL) {\n\t\tEST_LOG_WARN(\"CSR did not contain any attributes, CSR will be rejected\", tbuf);\n\t\tfree(der_data);\n\t        return (EST_ERR_CSR_ATTR_MISSING);\n\t    }\n\n\t    found_match = 0;\n\t    oid_entry = csr_attr_oids;\n\t    /*\n\t     * Iterate through the attributes that are in the CSR\n\t     */\n\t    while (oid_entry) { \n\t\tEST_LOG_INFO(\"Comparing %s to %s\", tbuf, oid_entry->oid);\n\t\tstrcmp_s(oid_entry->oid, (a_len < EST_MAX_ATTR_LEN ? a_len : EST_MAX_ATTR_LEN), tbuf, &comparator);\n\t\tif (!comparator) {\n\t\t    found_match = 1;\n\t\t    break;\n\t\t}\n\t\toid_entry = oid_entry->next;\n\t    } \n\n\t    if (!found_match) {\n\t\tEST_LOG_WARN(\"CSR did not contain %s attribute, CSR will be rejected\", tbuf);\n\t        est_server_free_csr_oid_list(csr_attr_oids);\n\t\tfree(der_data);\n\t        return (EST_ERR_CSR_ATTR_MISSING);\n\t    }\n\t    break;\n\tdefault:\n\t    /* have to adjust string pointer here, move on to the next item */\n\t    der_ptr += len;\n\t    break;\n\tcase V_ASN1_SET:\n\tcase V_ASN1_SEQUENCE:\n\t    break;\n\t}\n\tout_len = out_len_save - (der_ptr - save_ptr);\n    }\n    \n    /*\n     * One file check to ensure we didn't missing something when parsing\n     * the locally configured CSR attributes.\n     */\n    if (out_len != 0) {\n\tEST_LOG_ERR(\"DER length not zero (%d)\", out_len);\n\test_server_free_csr_oid_list(csr_attr_oids);\n\tfree(der_data);\n        return (EST_ERR_BAD_ASN1_HEX);\n    }\n\n    /*\n     * If we're lucky enough to make it this far, then it means all the\n     * locally configured CSR attributes were found in the client's CSR.\n     */\n    est_server_free_csr_oid_list(csr_attr_oids);\n    free(der_data);\n    return (EST_ERR_NONE);\n}\n/*\n * This function is used by the server to process an incoming\n * Simple Enroll request from the client.\n */\nstatic EST_ERROR est_handle_simple_enroll (EST_CTX *ctx, void *http_ctx, SSL *ssl,\n                                           const char *ct, char *body, int body_len,\n                                           char *path_seg, int reenroll)\n{\n    int rv, cert_len;\n    struct mg_connection *conn = (struct mg_connection*)http_ctx;\n    unsigned char *cert;\n    char http_hdr[EST_HTTP_HDR_MAX];\n    int hdrlen;\n    X509 *peer_cert;\n    X509_REQ *csr = NULL;\n    int client_is_ra = 0;\n\n    if (!reenroll && !ctx->est_enroll_pkcs10_cb) {\n\tEST_LOG_ERR(\"Null enrollment callback\");\n        return (EST_ERR_NULL_CALLBACK);\n    }\n\n    if (reenroll && !ctx->est_reenroll_pkcs10_cb) {\n\tEST_LOG_ERR(\"Null reenroll callback\");\n        return (EST_ERR_NULL_CALLBACK);\n    }\n\n    /*\n     * Make sure the client has sent us a PKCS10 CSR request\n     */\n    if (strncmp(ct, \"application/pkcs10\", 18)) {\n        return (EST_ERR_BAD_CONTENT_TYPE);\n    }\n\n    /*\n     * Authenticate the client\n     */\n    switch (est_enroll_auth(ctx, http_ctx, ssl, path_seg, reenroll)) {\n    case EST_HTTP_AUTH:\n    case EST_SRP_AUTH:\n    case EST_CERT_AUTH:\n\t/*\n\t * this means the user was authorized, either through\n\t * HTTP authoriztion or certificate authorization\n\t */\n        break;\n    case EST_HTTP_AUTH_PENDING:\n        return (EST_ERR_AUTH_PENDING);\n        break;\n    case EST_UNAUTHORIZED:\n    default:\n        return (EST_ERR_AUTH_FAIL);\n        break;\n    }\n\n    /*\n     * Parse the PKCS10 CSR from the client\n     */\n    csr = est_server_parse_csr((unsigned char*)body, body_len);\n    if (!csr) {\n\tEST_LOG_ERR(\"Unable to parse the PKCS10 CSR sent by the client\");\n\treturn (EST_ERR_BAD_PKCS10);\n    }\n    \n    /*\n     * Perform a sanity check on the CSR\n     */\n    if (est_server_check_csr(csr)) {\n\tEST_LOG_ERR(\"PKCS10 CSR sent by the client failed sanity check\");\n\tX509_REQ_free(csr);\n\treturn (EST_ERR_BAD_PKCS10);\n    }\n\n    /*\n     * Get the peer certificate if available.  This\n     * identifies the client. The CA may desire\n     * this information.\n     */\n    peer_cert = SSL_get_peer_certificate(ssl);\n\n    if (peer_cert) {\n\tclient_is_ra = est_check_cmcRA (peer_cert);\n    }\n    EST_LOG_INFO(\"id-kp-cmcRA present: %d\", client_is_ra);\n\n    /*\n     * Do the PoP check (Proof of Possession).  The challenge password\n     * in the pkcs10 request should match the TLS unique ID.\n     * The PoP check is not performend when the client is an RA.\n     */\n    if (!client_is_ra) {\n\trv = est_tls_uid_auth(ctx, ssl, csr);\n\tif (rv != EST_ERR_NONE) {\n\t    X509_REQ_free(csr);\n\t    X509_free(peer_cert);\n\t    return (EST_ERR_AUTH_FAIL_TLSUID);\n\t} \n    }\n\n    /*\n     * Check if we need to ensure the client included all the\n     * CSR attributes required by the CA.\n     */\n    if (ctx->enforce_csrattrs) {\n\tif (EST_ERR_NONE != est_server_all_csrattrs_present(ctx, body, body_len)) {\n\t    X509_REQ_free(csr);\n\t    X509_free(peer_cert);\n\t    return (EST_ERR_CSR_ATTR_MISSING);\n\t}\n    }\n\n    /* body now points to the pkcs10 data, pass\n     * this to the enrollment routine */\n    if (reenroll) {\n        rv = ctx->est_reenroll_pkcs10_cb((unsigned char*)body, body_len, \n                                         &cert, (int*)&cert_len,\n                                         conn->user_id, peer_cert,\n                                         path_seg, ctx->ex_data);\n    } else {\n        rv = ctx->est_enroll_pkcs10_cb((unsigned char*)body, body_len, \n                                       &cert, (int*)&cert_len,\n                                       conn->user_id, peer_cert,\n                                       path_seg, ctx->ex_data);\n    }\n\n    /*\n     * Peer cert is no longer needed, delete it if we have one\n     */\n    if (peer_cert) {\n\tX509_free(peer_cert);\n    }\n\n    if (rv == EST_ERR_NONE && cert_len > 0) {\n        /*\n         * Send HTTP header\n         */\n        snprintf(http_hdr, EST_HTTP_HDR_MAX, \"%s%s%s%s\", EST_HTTP_HDR_200, EST_HTTP_HDR_EOL,\n                 EST_HTTP_HDR_STAT_200, EST_HTTP_HDR_EOL);\n        hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n        snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CT,\n                 EST_HTTP_CT_PKCS7_CO, EST_HTTP_HDR_EOL);\n        hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n        snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %s%s\", EST_HTTP_HDR_CE,\n                 EST_HTTP_CE_BASE64, EST_HTTP_HDR_EOL);\n        hdrlen = strnlen_s(http_hdr, EST_HTTP_HDR_MAX);\n        snprintf(http_hdr + hdrlen, EST_HTTP_HDR_MAX, \"%s: %d%s%s\", EST_HTTP_HDR_CL,\n                 cert_len, EST_HTTP_HDR_EOL, EST_HTTP_HDR_EOL);\n        if (!mg_write(http_ctx, http_hdr, strnlen_s(http_hdr, EST_HTTP_HDR_MAX))) {\n            free(cert);\n\t    X509_REQ_free(csr);\n            return (EST_ERR_HTTP_WRITE);\n        }\n\n        /*\n         * Send the signed PKCS7 certificate in the body\n         */\n        if (!mg_write(http_ctx, cert, cert_len)) {\n            free(cert);\n\t    X509_REQ_free(csr);\n            return (EST_ERR_HTTP_WRITE);\n        }\n        free(cert);\n    } else if (rv == EST_ERR_CA_ENROLL_RETRY) {\n        /*\n         * The CA did not sign the request and has asked the\n         * client to retry in the future.  This may occur if\n         * the CA is not configured for automatic enrollment.\n         * Send the HTTP retry response to the client.\n         */\n        EST_LOG_INFO(\"CA server requests retry, possibly it's not setup for auto-enroll\");\n\tif (EST_ERR_NONE != est_server_send_http_retry_after(ctx, http_ctx, ctx->retry_period)) { \n\t    X509_REQ_free(csr);\n            return (EST_ERR_HTTP_WRITE);\n\t}\n    } else {\n\tX509_REQ_free(csr);\n        return (EST_ERR_CA_ENROLL_FAIL);\n    }\n\n    X509_REQ_free(csr);\n    return (EST_ERR_NONE);\n}\n/*\n * This function is used by the server to process an incoming\n * csr attributes request from the client.\n */\nstatic int est_handle_csr_attrs (EST_CTX *ctx, void *http_ctx, char *path_seg)\n{\n    int rv = EST_ERR_NONE;\n    int pop_present;\n    char *csr_data, *csr_data_pop;\n    int csr_len, csr_pop_len;\n\n    if (!ctx->server_csrattrs && !ctx->est_get_csr_cb) {\n        if (!ctx->server_enable_pop) {\n  \t        EST_LOG_ERR(\"Null csr callback\");\n\t\t/* Send a 204 response indicating the server doesn't have a CSR */\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n\t\treturn (EST_ERR_NONE);\n        } else {\n\t  csr_data = malloc(EST_CSRATTRS_POP_LEN + 1);\n\t    if (!csr_data) {\n                return (EST_ERR_MALLOC);\n\t    }\n\t    strncpy_s(csr_data, EST_CSRATTRS_POP_LEN + 1, EST_CSRATTRS_POP, \n\t\t      EST_CSRATTRS_POP_LEN);\n\t    csr_data[EST_CSRATTRS_POP_LEN] = 0;\n\t    csr_len = EST_CSRATTRS_POP_LEN;\n\t    return (est_send_csrattr_data(ctx, csr_data, csr_len, http_ctx));\n        }\n    }\n\n    /*\n     * Invoke CA server callback to retrieve the CSR.  Callback takes priority\n     * over saved values in the context.\n     * Note: there is no need to authenticate the client (see sec 4.5)\n     */\n    if (ctx->est_get_csr_cb) {\n\tcsr_data = (char *)ctx->est_get_csr_cb(&csr_len, path_seg, ctx->ex_data);\n\trv = est_asn1_parse_attributes(csr_data, csr_len, &pop_present);\n\tif (csr_len && (rv != EST_ERR_NONE)) {\n            if (csr_data) {\n                free(csr_data);\n            }\n\t    est_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n\t    return (EST_ERR_NONE);\n\t}\n\n\tctx->csr_pop_present = 0;\n\tif (ctx->server_enable_pop) {\n\t    rv = est_is_challengePassword_present(csr_data, csr_len, &pop_present);\n\t    if (rv != EST_ERR_NONE) {\n\t\tEST_LOG_ERR(\"Error during PoP/sanity check\");\n\t\tif (csr_data) {\n\t\t    free(csr_data);\n\t\t}\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n\t\treturn (EST_ERR_NONE);\n\t    }\n\t    ctx->csr_pop_present = pop_present;\n\n\t    if (!ctx->csr_pop_present) {\n\t\tif (csr_len == 0) {\n                    csr_data = malloc(EST_CSRATTRS_POP_LEN + 1);\n\t\t    if (!csr_data) {\n\t\t\treturn (EST_ERR_MALLOC);\n\t\t    }\n\t\t    strncpy_s(csr_data, EST_CSRATTRS_POP_LEN + 1, \n\t\t\t      EST_CSRATTRS_POP, EST_CSRATTRS_POP_LEN);\n\t\t    csr_data[EST_CSRATTRS_POP_LEN] = 0;\n\t\t    csr_len = EST_CSRATTRS_POP_LEN;\n\t\t    return (est_send_csrattr_data(ctx, csr_data, csr_len, http_ctx));\n\t\t}\n\t\trv = est_add_challengePassword(csr_data, csr_len, &csr_data_pop, &csr_pop_len);\n\t\tif (rv != EST_ERR_NONE) {\n\t\t    if (csr_data) {\n\t\t        free(csr_data);\n\t\t    }\n\t\t    EST_LOG_ERR(\"Error during add PoP\");\n\t\t    est_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NO_CONTENT);\n\t\t    return (EST_ERR_NONE);\n\t\t}\n\t\tfree(csr_data);\n\t\tcsr_data = csr_data_pop;\n\t\tcsr_len = csr_pop_len;\n\t    }\n\t}\n    } else {\n        csr_data = malloc(ctx->server_csrattrs_len + 1);\n\tif (!csr_data) {\n            return (EST_ERR_MALLOC);\n        }\n        strncpy_s(csr_data, ctx->server_csrattrs_len + 1, \n\t\t  (char *)ctx->server_csrattrs, ctx->server_csrattrs_len);\n\tcsr_data[ctx->server_csrattrs_len] = 0;\n\tcsr_len = ctx->server_csrattrs_len;\n    }\n    return (est_send_csrattr_data(ctx, csr_data, csr_len, http_ctx));\n}\n/*\n * This function should be called by the web server layer when\n * a HTTP request arrives on the listening port of the EST server.\n * It will determine the EST request type and dispatch the request\n * to the appropriate handler.\n *\n * Paramters:\n *      ctx:\t    Pointer to EST_CTX\n *      http_ctx:   Context pointer from web server\n *      method:     The HTML method in the request, should be either \"GET\" or \"POST\"\n *\turi:\t    pointer to HTTP URI\n *\tbody:\t    pointer to full HTML body contents\n *\tbody_len:   length of HTML body\n *\tct:         HTML content type header\n */\nint est_http_request (EST_CTX *ctx, void *http_ctx,\n                      char *method, char *uri,\n                      char *body, int body_len, const char *ct)\n{\n    SSL *ssl;\n    int rc;\n    EST_OPERATION operation;\n    char *path_seg;\n    EST_ERROR rv = EST_ERR_NONE;\n    \n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    /*\n     * Verify the context is for a server, not a client\n     */\n    if (ctx->est_mode != EST_SERVER) {\n        return (EST_ERR_BAD_MODE);\n    }\n\n    rv = est_parse_uri(uri, &operation, (char **)&path_seg);\n    if (rv != EST_ERR_NONE) {\n        est_send_http_error(ctx, http_ctx, rv);\n        return (rv);\n    }\n\n    /*\n     * See if this is a cacerts request\n     */\n    if (operation == EST_OP_CACERTS) {\n        /* Only GET is allowed */\n        if (strncmp(method, \"GET\", 3)) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n\n        /* rc = est_handle_cacerts(ctx, ctx->ca_certs, ctx->ca_certs_len, */\n        /*                         http_ctx, path_seg); */\n        rc = est_server_handle_cacerts(ctx, http_ctx, path_seg);\n        /* rc = est_server_handle_cacerts(ctx, http_ctx, path_seg); */\n        if (rc != EST_ERR_NONE) {\n            est_send_http_error(ctx, http_ctx, rc);\n            free(path_seg);\n            path_seg = NULL;\n            return (rc);\n        }\n    }\n\n    /*\n     * See if this is a simple enrollment request\n     */\n    else if (operation == EST_OP_SIMPLE_ENROLL) {\n        /* Only POST is allowed */\n        if (strncmp(method, \"POST\", 4)) {\n            EST_LOG_WARN(\"Incoming HTTP request used wrong method\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n\tif (!ct) {\n            EST_LOG_WARN(\"Incoming HTTP header has no Content-Type header\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n            free(path_seg);\n            path_seg = NULL;\n\t    return (EST_ERR_BAD_CONTENT_TYPE); \n\t}\n        /*\n         * Get the SSL context, which is required for authenticating\n         * the client.\n         */\n        ssl = (SSL*)mg_get_conn_ssl(http_ctx);\n        if (!ssl) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_NO_SSL_CTX);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_NO_SSL_CTX);\n        }\n\n        rc = est_handle_simple_enroll(ctx, http_ctx, ssl, ct, body, body_len,\n                                      path_seg, 0);\n        if (rc != EST_ERR_NONE && rc != EST_ERR_AUTH_PENDING) {\n            EST_LOG_WARN(\"Enrollment failed with rc=%d (%s)\\n\", \n\t\t         rc, EST_ERR_NUM_TO_STR(rc));\n\t    if (rc == EST_ERR_AUTH_FAIL) {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_AUTH_FAIL);\n\t    } else {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n\t    }\n            free(path_seg);\n            path_seg = NULL;\n            return rc;\n        }\n    }\n\n    /*\n     * See if this is a re-enrollment request\n     */\n    else if (operation == EST_OP_SIMPLE_REENROLL) {\n        /* Only POST is allowed */\n        if (strncmp(method, \"POST\", 4)) {\n            EST_LOG_WARN(\"Incoming HTTP request used wrong method\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n\tif (!ct) {\n            EST_LOG_WARN(\"Incoming HTTP header has no Content-Type header\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n            free(path_seg);\n            path_seg = NULL;\n\t    return (EST_ERR_BAD_CONTENT_TYPE); \n\t}\n        /*\n         * Get the SSL context, which is required for authenticating\n         * the client.\n         */\n        ssl = (SSL*)mg_get_conn_ssl(http_ctx);\n        if (!ssl) {\n            est_send_http_error(ctx, http_ctx, EST_ERR_NO_SSL_CTX);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_NO_SSL_CTX);\n        }\n\n        rc = est_handle_simple_enroll(ctx, http_ctx, ssl, ct, body, body_len,\n                                      path_seg, 1);\n        if (rc != EST_ERR_NONE && rc != EST_ERR_AUTH_PENDING) {\n            EST_LOG_WARN(\"Reenroll failed with rc=%d (%s)\\n\", \n\t\t         rc, EST_ERR_NUM_TO_STR(rc));\n\t    if (rc == EST_ERR_AUTH_FAIL) {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_AUTH_FAIL);\n\t    } else {\n\t\test_send_http_error(ctx, http_ctx, EST_ERR_BAD_PKCS10);\n\t    }\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_BAD_PKCS10);\n        }\n    }\n\n#if 0\n    /*\n     * See if this is a keygen request\n     * FIXME: this is currently not implemented\n     */\n    else if (strncmp(uri, EST_KEYGEN_URI, EST_URI_MAX_LEN) == 0) {\n        /* Only POST is allowed */\n        if (strncmp(method, \"POST\", 4)) {\n            EST_LOG_WARN(\"Incoming HTTP request used wrong method\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            return (EST_ERR_WRONG_METHOD);\n        }\n\tif (!ct) {\n            EST_LOG_WARN(\"Incoming HTTP header has no Content-Type header\\n\");\n\t    return (EST_ERR_BAD_CONTENT_TYPE); \n\t}\n        if (est_handle_keygen(ctx)) {\n            est_send_http_error(ctx, http_ctx, 0); //FIXME: last param should not be zero\n            return (EST_ERR_HTTP_WRITE);           //FIXME: need the appropriate return code\n        }\n    }\n#endif\n\n    /*\n     * See if this is a CSR attributes request\n     */\n    else if (operation == EST_OP_CSRATTRS) {\n        /* Only GET is allowed */\n        if (strncmp(method, \"GET\", 4)) {\n            EST_LOG_WARN(\"Incoming HTTP request used wrong method\\n\");\n            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);\n            free(path_seg);\n            path_seg = NULL;\n            return (EST_ERR_WRONG_METHOD);\n        }\n\n        rc = est_handle_csr_attrs(ctx, http_ctx, path_seg);\n\tif (rc != EST_ERR_NONE) {\n            est_send_http_error(ctx, http_ctx, rc); \n            free(path_seg);\n            path_seg = NULL;\n            return (rc);\n        }\n    }\n\n    /*\n     * Send a 404 error if the URI didn't match \n     */\n    else {\n        est_send_http_error(ctx, http_ctx, EST_ERR_HTTP_NOT_FOUND);\n    }\n    \n    free(path_seg);\n    path_seg = NULL;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_start() is used by an application to start\n    the EST server after est_server_init() has been called and\n    all the required callback functions have been provided by\n    the application.   \n \n    @param ctx Pointer to the EST context\n\n    libEST uses HTTP code from the Mongoose HTTP server.\n    This function allows the application to start the HTTP\n    services layer, which is required by EST.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_start (EST_CTX *ctx)\n{\n    EST_MG_CONTEXT *mgctx;\n\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n\treturn (EST_ERR_NO_CTX);\n    }\n\n    mgctx = mg_start(ctx);\n    if (mgctx) {\n        ctx->mg_ctx = mgctx;\n        return (EST_ERR_NONE);\n    } else {\n        return (EST_ERR_NO_SSL_CTX);\n    }\n}\n/*! @brief est_server_stop() is used by an application to stop\n    the EST server.  This should be called prior to est_destroy().\n \n    @param ctx Pointer to the EST context\n\n    libEST uses HTTP code from the Mongoose HTTP server.\n    This function allows the application to stop the HTTP\n    services layer.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_stop (EST_CTX *ctx)\n{\n    EST_MG_CONTEXT *mgctx;\n\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n\treturn (EST_ERR_NO_CTX);\n    }\n\n    mgctx = (EST_MG_CONTEXT*)ctx->mg_ctx;\n    if (mgctx) {\n        mg_stop(mgctx);\n    }\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_init() is used by an application to create\n    a context in the EST library when operating as an EST server that\n    fronts a CA.  This context is used when invoking other functions in the API.\n \n    @param ca_chain     Char array containing PEM encoded CA certs & CRL entries \n    @param ca_chain_len Length of ca_chain char array \n    @param cacerts_resp_chain Char array containing PEM encoded CA certs to include\n                              in the /cacerts response\n    @param cacerts_resp_chain_len Length of cacerts_resp_chain char array\n    @param cert_format Specifies the encoding of the local and external\n                       certificate chains (PEM/DER).  \n    @param http_realm Char array containing HTTP realm name for HTTP auth\n    @param tls_id_cert Pointer to X509 that contains the server's certificate\n                    for the TLS layer.\n    @param tls_id_key Pointer to EVP_PKEY that contains the private key\n                   associated with the server's certificate.\n\n    This function allows an application to initialize an EST server context\n    that is used with a CA (not an RA).\n    The application must provide the trusted CA certificates to use\n    for server operation using the ca_chain parameter.  This certificate\n    set should include the explicit trust anchor certificate, any number\n    of implicit trust anchor certificates, and any intermediate sub-CA\n    certificates required to complete the chain of trust between the\n    identity certificate passed into the tls_id_cert parameter and the\n    root certificate for that identity certificate.  \n    The CA certificates should be encoded using\n    the format specified in the cert_format parameter (e.g. PEM) and\n    may contain CRL entries that will be used when authenticating\n    EST clients connecting to the server.  \n    The applications must also provide the HTTP realm to use for \n    HTTP authentication and the server cerificate/private key to use\n    for the TLS stack to identify the server.\n    \n    Warning: Including additional intermediate sub-CA certificates that are\n             not needed to complete the chain of trust may result in a\n\t     potential MITM attack.  \n \n    @return EST_CTX.\n */\nEST_CTX * est_server_init (unsigned char *ca_chain, int ca_chain_len,\n                           unsigned char *cacerts_resp_chain, int cacerts_resp_chain_len,\n\t\t\t   EST_CERT_FORMAT cert_format,\n                           char *http_realm, \n\t\t\t   X509 *tls_id_cert, EVP_PKEY *tls_id_key)\n{\n    EST_CTX *ctx;\n    int len;\n\n    est_log_version();\n\n    /*\n     * Sanity check the input\n     */\n    if (ca_chain == NULL) {\n        EST_LOG_ERR(\"Trusted CA certificate set is empty\");\n        return NULL;\n    }\n    if (cert_format != EST_CERT_FORMAT_PEM) {\n        EST_LOG_ERR(\"Only PEM encoding of certificate changes is supported.\");\n        return NULL;\n    }\n\n    /* \n     * Check the length value, it should match.\n     */\n    len = (int) strnlen_s((char *)ca_chain, EST_CA_MAX);\n    if (len != ca_chain_len) {\n\tEST_LOG_ERR(\"Length of ca_chain doesn't match ca_chain_len\");\n        return NULL;\n    }\n    if (cacerts_resp_chain) {        \n        len = (int) strnlen_s((char *)cacerts_resp_chain, EST_CA_MAX);\n        if (len != cacerts_resp_chain_len) {\n            EST_LOG_ERR(\"Actual length of cacerts_resp_chain does not match \"\n                        \"passed in length value\");\n            return NULL;\n        }\n    }\n\n    if (tls_id_cert == NULL) {\n        EST_LOG_ERR(\"TLS identity cert is empty\");\n        return NULL;\n    }\n\n    if (tls_id_key == NULL) {\n        EST_LOG_ERR(\"Private key associated with TLS identity cert is empty\");\n        return NULL;\n    }\n    if (http_realm == NULL) {\n        EST_LOG_ERR(\"EST HTTP realm is NULL\");\n        return NULL;\n    }\n\n    ctx = malloc(sizeof(EST_CTX));\n    if (!ctx) {\n        EST_LOG_ERR(\"malloc failed\");\n        return NULL;\n    }\n    memzero_s(ctx, sizeof(EST_CTX));\n    ctx->est_mode = EST_SERVER;\n    ctx->retry_period = EST_RETRY_PERIOD_DEF;\n    ctx->require_http_auth = HTTP_AUTH_REQUIRED;\n    ctx->server_read_timeout = EST_SSL_READ_TIMEOUT_DEF;\n\n    /*\n     * Load the CA certificates into local memory and retain\n     * for future use.  This will be used for /cacerts requests.\n     * They are optional parameters.  The alternative is for the\n     * app layer to provide callback and return them on the fly.\n     */\n    if (cacerts_resp_chain) \n    {   \n        if (est_load_ca_certs(ctx, cacerts_resp_chain, cacerts_resp_chain_len)) {\n            EST_LOG_ERR(\"Failed to load CA certificates response buffer\");\n            free(ctx);\n            return NULL;\n        }\n    }\n    if (est_load_trusted_certs(ctx, ca_chain, ca_chain_len)) {\n        EST_LOG_ERR(\"Failed to load trusted certficate store\");\n\tfree(ctx);\n        return NULL;\n    }\n\n    strncpy_s(ctx->realm, MAX_REALM, http_realm, MAX_REALM);\n    ctx->server_cert = tls_id_cert;\n    ctx->server_priv_key = tls_id_key;\n    ctx->auth_mode = AUTH_BASIC;\n    ctx->server_enable_pop = 1;\n    ctx->local_cacerts_processing = 1;\n\n    /* \n     * Create a new ASN object for the id-kp-cmcRA OID.  \n     * OpenSSL doesn't define this, so we need to create it\n     * ourselves.\n     * http://www.openssl.org/docs/crypto/OBJ_nid2obj.html\n     */\n    if (!o_cmcRA) {\n\to_cmcRA = OBJ_txt2obj(\"1.3.6.1.5.5.7.3.28\", 1);\n\tif (!o_cmcRA) {\n\t    EST_LOG_WARN(\"Failed to create OID for id-kp-cmcRA key usage checks\");\n\t}\n    }\n\n    return (ctx);\n}\n/*! @brief est_server_set_auth_mode() is used by an application to configure\n    the HTTP authentication method to use for validating the identity of\n    an EST client.\n \n    @param ctx   Pointer to the EST context\n    @param amode Must be one of the following: AUTH_BASIC, AUTH_DIGEST, AUTH_TOKEN\n\n    This function can optionally be invoked by the application to change the\n    default HTTP authentication mode.  The default mode is HTTP Basic\n    authentication.  An application may desire to use Digest or Token\n    authentication instead, in which case this function can be used to set\n    that mode.  This function must be invoked prior to starting the EST\n    server.\n\n    @return EST_ERROR.\n */\nEST_ERROR est_server_set_auth_mode (EST_CTX *ctx, EST_HTTP_AUTH_MODE amode)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    switch (amode) {\n    case AUTH_DIGEST:\n        /*\n         * Since HTTP digest auth uses MD5, make sure we're not in FIPS mode.\n         */\n\tif (FIPS_mode()) {\n\t    EST_LOG_ERR(\"HTTP digest auth not allowed while in FIPS mode\");\n\t    return (EST_ERR_BAD_MODE);\n\t}\n        /* fallthrough */\n    case AUTH_BASIC:        \n    case AUTH_TOKEN:        \n\tctx->auth_mode = amode;\n\treturn (EST_ERR_NONE);\n\tbreak;\n    default:\n        EST_LOG_ERR(\"Unsupported HTTP authentication mode, only Basic, Digest and Token allowed\");\n\treturn (EST_ERR_BAD_MODE);\n\tbreak;\n    }\n}\n/*! @brief est_set_ca_enroll_cb() is used by an application to install\n    a handler for signing incoming PKCS10 requests.  \n \n    @param ctx Pointer to the EST context\n    @param cb Function address of the handler\n\n    This function must be called prior to starting the EST server.  The\n    callback function must match the following prototype:\n\n        int func(unsigned char*, int, unsigned char**, int*, char*, X509*, char *, void *);\n\n    This function is called by libEST when a certificate request\n    needs to be signed by the CA server.  The application will need\n    to forward the request to the signing authority and return\n    the response.  The response should be a PKCS7 signed certificate.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_set_ca_enroll_cb (EST_CTX *ctx, int (*cb)(unsigned char *pkcs10, int p10_len,\n                                                        unsigned char **pkcs7, int *pkcs7_len,\n                                                        char *user_id, X509 *peer_cert,\n                                                        char *path_seg, void *ex_data))\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->est_enroll_pkcs10_cb = cb;\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_set_ca_reenroll_cb() is used by an application to install\n    a handler for re-enrolling certificates.  \n \n    @param ctx Pointer to the EST context\n    @param cb Function address of the handler\n\n    This function must be called prior to starting the EST server.  The\n    callback function must match the following prototype:\n\n        int func(unsigned char*, int, unsigned char**, int*, char*, X509*)\n\n    This function is called by libEST when a certificate \n    needs to be renewed by the CA server.  The application will need\n    to forward the request to the signing authority and return\n    the response.  The response should be a PKCS7 signed certificate.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_set_ca_reenroll_cb (EST_CTX *ctx, int (*cb)(unsigned char *pkcs10, int p10_len,\n                                                          unsigned char **pkcs7, int *pkcs7_len,\n                                                          char *user_id, X509 *peer_cert,\n                                                          char *path_seg, void *ex_data))\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->est_reenroll_pkcs10_cb = cb;\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_set_http_auth_cb() is used by an application to install\n    a handler for authenticating EST clients.\n \n    @param ctx Pointer to the EST context\n    @param cb Function address of the handler\n\n    This function must be called prior to starting the EST server.  The\n    callback function must match the following prototype:\n\n    int (*cb)(EST_CTX *ctx, EST_HTTP_AUTH_HDR *ah, X509 *peer_cert,\n              char *path_seg, void *ex_data)\n\n    This function is called by libEST when performing HTTP authentication.\n    libEST will pass the EST_HTTP_AUTH_HDR struct to the application,\n    allowing the application to hook into a Radius, AAA, or some user\n    authentication database.  The X509 certificate from the TLS \n    peer (EST client) is also provided through this callback facility, allowing\n    the application layer to check for specific attributes in the \n    X509 certificate such as an 802.1AR device ID.  In addition,\n    the path segment string is passed up if there was one in the\n    request URI.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_set_http_auth_cb (EST_CTX *ctx, \n                                int (*cb)(EST_CTX *ctx, EST_HTTP_AUTH_HDR *ah, \n                                          X509 *peer_cert, char *path_seg,\n\t\t\t\t\t  void *ex_data))\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->est_http_auth_cb = cb;\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_set_http_auth_required() is used by an application to define whether\n    HTTP authentication should be required in addition to using client certificates.\n \n    @param ctx Pointer to the EST context\n    @param required Flag indicating that HTTP authentication is required. Set \n    to HTTP_AUTH_REQUIRED value to require HTTP auth.  Set to HTTP_AUTH_NOT_REQUIRED \n    if HTTP auth should occur only when TLS client authentication fails.\n \n    @return EST_ERROR.\n\n    The default mode is HTTP_AUTH_REQUIRED.  This means that HTTP authentication\n    will be attempted even when TLS client authentication succeeds.  If HTTP\n    authentication is only needed when TLS client auth fails, then set this\n    to HTTP_AUTH_NOT_REQUIRED.\n */\nEST_ERROR est_set_http_auth_required (EST_CTX *ctx, EST_HTTP_AUTH_REQUIRED required)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->require_http_auth = required;\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_enable_srp() is used by an application to enable \n    the TLS-SRP authentication.  This allows EST clients that provide \n    SRP credentials at the TLS layer to be authenticated by the EST\n    server.  This function must be invoked to enable server-side\n    SRP support. \n\n    @param ctx Pointer to the EST context\n    @param cb Function address of the application specific SRP verifier handler\n\n    This function should be invoked prior to starting the EST server.   \n    This is used to specify the handler for SRP authentication at the TLS\n    layer.  When a TLS-SRP cipher suite is negotiated at the TLS layer,\n    the handler will be invoked by libEST to retrieve the SRP parameters\n    for user authentication.  Your application must provide the SRP parameters\n    for the user.  \n    \n    The handler should use the following logic:\n\n    1. Invoke SSL_get_srp_username() to get the SRP user name from the\n       TLS layer.\n    2. Lookup the user's SRP parameters in the application specific\n       user database.  These parameters include the N, g, s, and v \n       parameters.\n    3. Invoke SSL_set_srp_server_param() to forward the SRP parameters\n       to the TLS layer, allowing the TLS handshake to proceed.\n       \n    libEST includes an example server application that uses this handler\n    for SRP support.  This example uses the OpenSSL SRP verifier file capability\n    to manage SRP parameters for individual users.  Your application could use\n    this approach, or it may utilize another facility for managing user specific\n    SRP parameters.  Please refer to RFC 2945 and RFC 5054 for a full understanding\n    of SRP.\n\n    @return EST_ERROR.\n */\nEST_ERROR est_server_enable_srp (EST_CTX *ctx, int (*cb)(SSL *s, int *ad, void *arg))\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (!cb) {\n\tEST_LOG_ERR(\"Null callback\");\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    ctx->est_srp_username_cb = cb;\n    ctx->enable_srp = 1;\n\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_enable_pop() is used by an application to enable \n    the proof-of-possession check on the EST server.  This proves the \n    EST client that sent the CSR to the server is in possesion of the \n    private key that was used to sign the CSR.  This binds the TLS \n    session ID to the CSR.\n\n    Note, if the CSR attributes configured on the server require PoP \n    checking, then there is no need to call this function to enable\n    PoP.  The PoP will be enabled automatically under this scenario.\n    \n    Note, PoP checking is not possible when an EST proxy is used to\n    between the EST client and EST server.  Since the proxy will not \n    be in possession of the private key, an EST server woul fail the\n    PoP check.  However, an EST proxy can enable this feature to ensure \n    the EST client has the signing key.\n\n    @param ctx Pointer to the EST context\n\n    This function may be called at any time.   \n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_enable_pop (EST_CTX *ctx)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->server_enable_pop = 1;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_disable_pop() is used by an application to disable \n    the proof-of-possession check on the EST server.  Please see\n    the documenation for est_server_enable_pop() for more information\n    on the proof-of-possession check.\n\n    @param ctx Pointer to the EST context\n\n    This function may be called at any time.   \n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_disable_pop (EST_CTX *ctx)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    ctx->server_enable_pop = 0;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_set_retry_period() is used by an application to  \n    change the default retry-after period sent to the EST client when\n    the CA server is not configured for auto-enroll.  This retry-after\n    value notifies the client about how long it should wait before\n    attempting the enroll operation again to see if the CA has \n    approved the original CSR. \n \n    @param ctx Pointer to the EST context\n    @param seconds Number of seconds the server will use in the\n           retry-after response.\n\n    This function may be called at any time after a context has\n    been created.   \n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_set_retry_period (EST_CTX *ctx, int seconds)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (seconds > EST_RETRY_PERIOD_MAX) {\n\tEST_LOG_ERR(\"Maximum retry-after period is %d seconds\",\n\t\tEST_RETRY_PERIOD_MAX);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    if (seconds < EST_RETRY_PERIOD_MIN) {\n\tEST_LOG_ERR(\"Minimum retry-after period is %d seconds\",\n\t\tEST_RETRY_PERIOD_MIN);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    ctx->retry_period = seconds;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_set_ecdhe_curve() is used by an application to \n    specify the ECC curve that should be used for ephemeral diffie-hellman\n    keys during the TLS handshake.  Ephemeral diffie-hellman is enabled\n    by libEST and provides better forward secrecy.  If the curve\n    is not specified by the application using this function, then\n    the prime256v1 curve is used as the default curve.  \n \n    @param ctx Pointer to the EST context\n    @param nid OpenSSL NID value for the desired curve\n\n    This function must be called prior to starting the EST server.  \n    The NID values are defined in <openssl/obj_mac.h>.  Typical NID \n    values provided to this function would include:\n\t\n\tNID_X9_62_prime192v1\n\tNID_X9_62_prime256v1\n\tNID_secp384r1\n\tNID_secp521r1\n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_set_ecdhe_curve (EST_CTX *ctx, int nid)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n    if (nid <= 0) {\n\tEST_LOG_ERR(\"Invalid NID value\");\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    ctx->ecdhe_nid = nid;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_set_dh_parms() is used by an application to \n    specify the Diffie-Hellman parameters to be used for single\n    use DH key generation during the TLS handshake.  If these \n    parameters are not used, then single-use DH key generation\n    is not enabled.  This should be enabled to improve the \n    forward secrecy of the TLS handshake operation.  \n    \n    The DH parameters provided through this API should not be\n    hard-coded in the application.  The parameters should be\n    generated at the time of product installation.  Reusing the\n    parameters across multiple installations of the product\n    results in a vulnerable product.  \n \n    @param ctx Pointer to the EST context\n    @param parms Pointer to OpenSSL DH parameters\n\n    This function must be called prior to starting the EST server.  \n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_set_dh_parms (EST_CTX *ctx, DH *parms)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n    if (!parms) {\n        EST_LOG_ERR(\"Null DH parameters\");\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n    ctx->dh_tmp = DHparams_dup(parms);\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_init_csrattrs() is used by an application to \n    initialize a fixed set of CSR attributes.  These attributes will\n    be used by libEST in response to a client CSR attributes\n    request.  The attributes must be an ASN.1 base64 encoded character\n    string.\n\n    @param ctx Pointer to the EST context\n    @param csrattrs Pointer CSR attributes in ASN.1 base64 encoded format,\n                    a NULL pointer clears the attributes and length.\n    @param csrattrs_len Length of the CSR attributes character string\n\n    The est_get_csr_cb callback function maintains precendence over this\n    method for CSR attributes. If est_get_csr_cb is initialized by the\n    application it will be used.  If not, then libEST will use the\n    attributes initialized here.\n\n    This function should be called prior to starting the EST server.  \n    PoP configuration(est_server_enable_pop or est_server_disable_pop)\n    should be called prior to this function.\n    \n    @return EST_ERROR.\n */\nEST_ERROR est_server_init_csrattrs (EST_CTX *ctx, char *csrattrs, int csrattrs_len)\n{\n    int csrattrs_pop_len, pop_present, rv;\n    char *csrattrs_data_pop = NULL;\n\n    if (ctx == NULL) {\n        return (EST_ERR_NO_CTX);\n    }\n\n    /*\n     * Verify the context is for a server, not a client or proxy\n     */\n    if (ctx->est_mode != EST_SERVER) {\n        return (EST_ERR_BAD_MODE);\n    }\n\n    EST_LOG_INFO(\"Attributes pointer is %p, len=%d\", \n\t\t ctx->server_csrattrs, ctx->server_csrattrs_len);\n\n    /* Free old version if previously initialized */\n    if (ctx->server_csrattrs != NULL) {\n        free(ctx->server_csrattrs);\n        ctx->server_csrattrs = NULL;\n        ctx->server_csrattrs_len = 0;\n    }\n\n    /* caller just wanted to clear it, so return */\n    if (csrattrs == NULL) {\n\treturn (EST_ERR_NONE);\n    }\n\n    /*\n     * In order to run Client negative unit testing the parameter, \n     * PoP and parse checks all need to be disabled via #define\n     * in a couple of places here.\n     */\n\n    /* \n     * check smallest possible base64 case here for now \n     * and sanity test will check min/max value for ASN.1 data\n     */\n    if (csrattrs_len < MIN_CSRATTRS) {\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n\n    /* assume PoP not in CSR attributes */\n    ctx->csr_pop_present = 0;\n    if (ctx->server_enable_pop) {\n        rv = est_is_challengePassword_present(csrattrs, csrattrs_len, &pop_present);\n\tif (rv != EST_ERR_NONE) {\n\t    EST_LOG_ERR(\"Error during PoP/sanity check\");\n\t    return (EST_ERR_INVALID_PARAMETERS);\n\t}\n\tctx->csr_pop_present = pop_present;\n\n\tif (!ctx->csr_pop_present) {\n\t    rv = est_add_challengePassword(csrattrs, csrattrs_len, \n\t\t\t\t\t   &csrattrs_data_pop, &csrattrs_pop_len);\n\t    if (rv != EST_ERR_NONE) {\n\t\tEST_LOG_ERR(\"Error during add PoP\");\n\t\treturn (EST_ERR_INVALID_PARAMETERS);\n\t    }\n\t    csrattrs = csrattrs_data_pop;\n\t    csrattrs_len = csrattrs_pop_len;\n\t}\n    } else {\n        rv = est_asn1_parse_attributes(csrattrs, csrattrs_len, &pop_present);\n\tif (rv != EST_ERR_NONE) {\n\t    EST_LOG_ERR(\"Corrupt CSR Attributes\");\n\t    return (EST_ERR_INVALID_PARAMETERS);\n\t}\n    }    \n\n    ctx->server_csrattrs = malloc(csrattrs_len + 1);\n    if (!ctx->server_csrattrs) {\n        if (csrattrs_data_pop) {\n            free(csrattrs_data_pop);\n\t}\n        return (EST_ERR_MALLOC);\n    }\n    ctx->server_csrattrs_len = csrattrs_len;\n\n    strncpy_s((char *)ctx->server_csrattrs, csrattrs_len + 1, csrattrs, csrattrs_len);\n    ctx->server_csrattrs[csrattrs_len] = 0;\n    if (csrattrs_data_pop) {\n      free(csrattrs_data_pop);\n    }\n    EST_LOG_INFO(\"Attributes pointer is %p, len=%d\", ctx->server_csrattrs, \n\t\t ctx->server_csrattrs_len);\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_enable_tls10() is a deprecated function. TLS 1.0\n    is a violation of RFC7030 and it is no longer supported by the EST library.\n    This function will log an error message and return EST_ERR_BAD_MODE.\n    \n    @param ctx Pointer to the EST context\n\n    This function must be called prior to starting the EST server.  \n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_enable_tls10 (EST_CTX *ctx)\n{\n\tEST_LOG_ERR(\"TLS 1.0 is a violation of RFC7030 and therefore not supported\");\n        return (EST_ERR_BAD_MODE);\n\n}\n/*! @brief est_server_enforce_csrattrs() is used by an application to \n    enable checking of the CSR attributes on the EST server.  When\n    enabled, the EST client must provide all the CSR attributes that\n    were in the /csrattrs response sent by the server.  The enrollment\n    will fail if the client fails to provide all the CSR attributes.\n    This setting applies to simple enroll and reenroll operations.\n    This setting applies only to server mode and has no bearing on\n    proxy mode operation.\n    \n    @param ctx Pointer to the EST context\n\n    This function must be called prior to starting the EST server.  \n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_enforce_csrattr (EST_CTX *ctx)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n    ctx->enforce_csrattrs = 1;\n    return (EST_ERR_NONE);\n}\n/*! @brief est_server_set_read_timeout() is used by an application to set\n    timeout value of server read operations.  Once a socket is opened the\n    EST server begins attempting to read from this socket.  This\n    timeout value limits the amount of time the client will wait for the\n    response.  The default value is set to EST_SSL_READ_TIMEOUT_DEF.\n\n    @param ctx Pointer to the EST context\n    @param timeout Integer value representing the read timeout in seconds.\n    The minimum value is EST_SSL_READ_TIMEOUT_MIN and the maximum value is\n    EST_SSL_READ_TIMEOUT_MAX.\n \n    @return EST_ERROR.\n */\nEST_ERROR est_server_set_read_timeout (EST_CTX *ctx, int timeout)\n{\n    if (!ctx) {\n\tEST_LOG_ERR(\"Null context\");\n        return (EST_ERR_NO_CTX);\n    }\n\n    if (timeout < EST_SSL_READ_TIMEOUT_MIN ||\n        timeout > EST_SSL_READ_TIMEOUT_MAX) {\n\tEST_LOG_ERR(\"Invalid read timeout value passed: %d \", timeout);\n        return (EST_ERR_INVALID_PARAMETERS);\n    }\n        \n    ctx->server_read_timeout = timeout;\n    return (EST_ERR_NONE);\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcba"},"name":"est_client_http.c","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc83"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc7f"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9d"}]],"contents":"/*\n** signed long to signed int\n*/\nint curlx_sltosi(long slnum)\n{\n#ifdef __INTEL_COMPILER\n#  pragma warning(push)\n#  pragma warning(disable:810) /* conversion may lose significant bits */\n#endif\n\n  assert(slnum >= 0);\n#if (SIZEOF_INT < CURL_SIZEOF_LONG)\n  assert((unsigned long) slnum <= (unsigned long) CURL_MASK_SINT);\n#endif\n  return (int)(slnum & (long) CURL_MASK_SINT);\n\n#ifdef __INTEL_COMPILER\n#  pragma warning(pop)\n#endif\n}\n/*\n * parsedate()\n *\n * Returns:\n *\n * PARSEDATE_OK     - a fine conversion\n * PARSEDATE_FAIL   - failed to convert\n * PARSEDATE_LATER  - time overflow at the far end of time_t\n * PARSEDATE_SOONER - time underflow at the low end of time_t\n */\nstatic int parsedate(const char *date, time_t *output);\n/* returns:\n   -1 no day\n   0 monday - 6 sunday\n*/\nstatic int checkday(const char *check, size_t len)\n{\n  int i;\n  const char * const *what;\n  int found= 0;\n  if(len > 3)\n    what = &weekday[0];\n  else\n    what = &Curl_wkday[0];\n  for(i=0; i<7; i++) {\n    if(est_client_Curl_raw_equal(check, what[0])) {\n      found=1;\n      break;\n    }\n    what++;\n  }\n  return found?i:-1;\n}\n/* returns:\n   -1 no day\n   0 monday - 6 sunday\n*/\nstatic int checkmonth(const char *check)\n{\n  int i;\n  const char * const *what;\n  int found= 0;\n\n  what = &Curl_month[0];\n  for(i=0; i<12; i++) {\n    if(est_client_Curl_raw_equal(check, what[0])) {\n        found=1;\n      break;\n    }\n    what++;\n  }\n  return found?i:-1; /* return the offset or -1, no real offset is -1 */\n}\n/* return the time zone offset between GMT and the input one, in number\n   of seconds or -1 if the timezone wasn't found/legal */\nstatic int checktz(const char *check)\n{\n  unsigned int i;\n  const struct tzinfo *what;\n  int found= 0;\n\n  what = tz;\n  for(i=0; i< sizeof(tz)/sizeof(tz[0]); i++) {\n    if(est_client_Curl_raw_equal(check, what->name)) {\n      found=1;\n      break;\n    }\n    what++;\n  }\n  return found?what->offset*60:-1;\n}\n/* return the time zone offset between GMT and the input one, in number\n   of seconds or -1 if the timezone wasn't found/legal */\nstatic void skip_over_white(const char **date)\n{\n  /* skip everything that aren't letters or digits */\n  while(**date && !ISALNUM(**date))\n    (*date)++;\n}\n/* struct tm to time since epoch in GMT time zone.\n * This is similar to the standard mktime function but for GMT only, and\n * doesn't suffer from the various bugs and portability problems that\n * some systems' implementations have.\n */\nstatic time_t my_timegm(struct my_tm *tm)\n{\n  static const int month_days_cumulative [12] =\n    { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };\n  int month, year, leap_days;\n\n  if(tm->tm_year < 70)\n    /* we don't support years before 1970 as they will cause this function\n       to return a negative value */\n    return -1;\n\n  year = tm->tm_year + 1900;\n  month = tm->tm_mon;\n  if(month < 0) {\n    year += (11 - month) / 12;\n    month = 11 - (11 - month) % 12;\n  }\n  else if(month >= 12) {\n    year -= month / 12;\n    month = month % 12;\n  }\n\n  leap_days = year - (tm->tm_mon <= 1);\n  leap_days = ((leap_days / 4) - (leap_days / 100) + (leap_days / 400)\n               - (1969 / 4) + (1969 / 100) - (1969 / 400));\n\n  return ((((time_t) (year - 1970) * 365\n            + leap_days + month_days_cumulative [month] + tm->tm_mday - 1) * 24\n           + tm->tm_hour) * 60 + tm->tm_min) * 60 + tm->tm_sec;\n}\n/*\n * parsedate()\n *\n * Returns:\n *\n * PARSEDATE_OK     - a fine conversion\n * PARSEDATE_FAIL   - failed to convert\n * PARSEDATE_LATER  - time overflow at the far end of time_t\n * PARSEDATE_SOONER - time underflow at the low end of time_t\n */\nstatic int parsedate(const char *date, time_t *output)\n{\n  time_t t = 0;\n  int wdaynum=-1;  /* day of the week number, 0-6 (mon-sun) */\n  int monnum=-1;   /* month of the year number, 0-11 */\n  int mdaynum=-1; /* day of month, 1 - 31 */\n  int hournum=-1;\n  int minnum=-1;\n  int secnum=-1;\n  int yearnum=-1;\n  int tzoff=-1;\n  struct my_tm tm;\n  enum assume dignext = DATE_MDAY;\n  const char *indate = date; /* save the original pointer */\n  int part = 0; /* max 6 parts */\n\n  while(*date && (part < 6)) {\n    int found=0;\n\n    skip_over_white(&date);\n\n    if(ISALPHA(*date)) {\n      /* a name coming up */\n      char buf[EST_CURL_MAX_NAME_STR]=\"\";\n      size_t len;\n      sscanf(date, \"%31[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]\",\n             buf);\n      len = strnlen_s(buf, EST_CURL_MAX_NAME_STR);\n\n      if(wdaynum == -1) {\n        wdaynum = checkday(buf, len);\n        if(wdaynum != -1)\n          found = 1;\n      }\n      if(!found && (monnum == -1)) {\n        monnum = checkmonth(buf);\n        if(monnum != -1)\n          found = 1;\n      }\n\n      if(!found && (tzoff == -1)) {\n        /* this just must be a time zone string */\n        tzoff = checktz(buf);\n        if(tzoff != -1)\n          found = 1;\n      }\n\n      if(!found)\n        return PARSEDATE_FAIL; /* bad string */\n\n      date += len;\n    }\n    else if(ISDIGIT(*date)) {\n      /* a digit */\n      int val;\n      char *end;\n      if((secnum == -1) &&\n         (3 == sscanf(date, \"%02d:%02d:%02d\", &hournum, &minnum, &secnum))) {\n        /* time stamp! */\n        date += 8;\n      }\n      else if((secnum == -1) &&\n              (2 == sscanf(date, \"%02d:%02d\", &hournum, &minnum))) {\n        /* time stamp without seconds */\n        date += 5;\n        secnum = 0;\n      }\n      else {\n        long lval;\n        int error;\n        int old_errno;\n\n        old_errno = ERRNO;\n        SET_ERRNO(0);\n        lval = strtol(date, &end, 10);\n        error = ERRNO;\n        if(error != old_errno)\n          SET_ERRNO(old_errno);\n\n        if(error)\n          return PARSEDATE_FAIL;\n\n        if((lval > (long)INT_MAX) || (lval < (long)INT_MIN))\n          return PARSEDATE_FAIL;\n\n        val = curlx_sltosi(lval);\n\n        if((tzoff == -1) &&\n           ((end - date) == 4) &&\n           (val <= 1400) &&\n           (indate< date) &&\n           ((date[-1] == '+' || date[-1] == '-'))) {\n          /* four digits and a value less than or equal to 1400 (to take into\n             account all sorts of funny time zone diffs) and it is preceded\n             with a plus or minus. This is a time zone indication.  1400 is\n             picked since +1300 is frequently used and +1400 is mentioned as\n             an edge number in the document \"ISO C 200X Proposal: Timezone\n             Functions\" at http://david.tribble.com/text/c0xtimezone.html If\n             anyone has a more authoritative source for the exact maximum time\n             zone offsets, please speak up! */\n          found = 1;\n          tzoff = (val/100 * 60 + val%100)*60;\n\n          /* the + and - prefix indicates the local time compared to GMT,\n             this we need ther reversed math to get what we want */\n          tzoff = date[-1]=='+'?-tzoff:tzoff;\n        }\n\n        if(((end - date) == 8) &&\n           (yearnum == -1) &&\n           (monnum == -1) &&\n           (mdaynum == -1)) {\n          /* 8 digits, no year, month or day yet. This is YYYYMMDD */\n          found = 1;\n          yearnum = val/10000;\n          monnum = (val%10000)/100-1; /* month is 0 - 11 */\n          mdaynum = val%100;\n        }\n\n        if(!found && (dignext == DATE_MDAY) && (mdaynum == -1)) {\n          if((val > 0) && (val<32)) {\n            mdaynum = val;\n            found = 1;\n          }\n          dignext = DATE_YEAR;\n        }\n\n        if(!found && (dignext == DATE_YEAR) && (yearnum == -1)) {\n          yearnum = val;\n          found = 1;\n          if(yearnum < 1900) {\n            if(yearnum > 70)\n              yearnum += 1900;\n            else\n              yearnum += 2000;\n          }\n          if(mdaynum == -1)\n            dignext = DATE_MDAY;\n        }\n\n        if(!found)\n          return PARSEDATE_FAIL;\n\n        date = end;\n      }\n    }\n\n    part++;\n  }\n\n  if(-1 == secnum)\n    secnum = minnum = hournum = 0; /* no time, make it zero */\n\n  if((-1 == mdaynum) ||\n     (-1 == monnum) ||\n     (-1 == yearnum))\n    /* lacks vital info, fail */\n    return PARSEDATE_FAIL;\n\n#if SIZEOF_TIME_T < 5\n  /* 32 bit time_t can only hold dates to the beginning of 2038 */\n  if(yearnum > 2037) {\n    *output = 0x7fffffff;\n    return PARSEDATE_LATER;\n  }\n#endif\n\n  if(yearnum < 1970) {\n    *output = 0;\n    return PARSEDATE_SOONER;\n  }\n\n  if((mdaynum > 31) || (monnum > 11) ||\n     (hournum > 23) || (minnum > 59) || (secnum > 60))\n    return PARSEDATE_FAIL; /* clearly an illegal date */\n\n  tm.tm_sec = secnum;\n  tm.tm_min = minnum;\n  tm.tm_hour = hournum;\n  tm.tm_mday = mdaynum;\n  tm.tm_mon = monnum;\n  tm.tm_year = yearnum - 1900;\n\n  /* my_timegm() returns a time_t. time_t is often 32 bits, even on many\n     architectures that feature 64 bit 'long'.\n\n     Some systems have 64 bit time_t and deal with years beyond 2038. However,\n     even on some of the systems with 64 bit time_t mktime() returns -1 for\n     dates beyond 03:14:07 UTC, January 19, 2038. (Such as AIX 5100-06)\n  */\n  t = my_timegm(&tm);\n\n  /* time zone adjust (cast t to int to compare to negative one) */\n  if(-1 != (int)t) {\n\n    /* Add the time zone diff between local time zone and GMT. */\n    long delta = (long)(tzoff!=-1?tzoff:0);\n\n    if((delta>0) && (t + delta < t))\n      return -1; /* time_t overflow */\n\n    t += delta;\n  }\n\n  *output = t;\n\n  return PARSEDATE_OK;\n}\n/*\tFind next Field\n**\t---------------\n**\tFinds the next RFC822 token in a string\n**\tOn entry,\n**\t*pstr\tpoints to a string containing a word separated\n**\t\tby white white space \",\" \";\" or \"=\". The word\n**\t\tcan optionally be quoted using <\"> or \"<\" \">\"\n**\t\tComments surrrounded by '(' ')' are filtered out\n**\n**  On exit,\n**\t*pstr\thas been moved to the first delimiter past the\n**\t\tfield\n**\t\tTHE STRING HAS BEEN MUTILATED by a 0 terminator\n**\n**\tReturns\ta pointer to the first word or NULL on error\n*/\nstatic char * HTNextField (char ** pstr)\n{\n    char * p;\n    char * start = NULL;\n\n    if (!pstr || !*pstr) {\n        return NULL;\n    }\n    p = *pstr;\n    \n    while (1) {\n        /* Strip white space and other delimiters */\n        while (*p && (isspace((int)*p) || *p == ',' || *p == ';' || *p == '=')) {\n            p++;\n        }\n        if (!*p) {\n            *pstr = p;\n            return NULL;                                         /* No field */\n        }\n\n        if (*p == '\"') {                                     /* quoted field */\n            start = ++p;\n            for (; *p && *p != '\"'; p++) {\n                if (*p == '\\\\' && *(p + 1)) {\n                    p++;                               /* Skip escaped chars */\n                }\n            }\n            break;                          /* kr95-10-9: needs to stop here */\n        } else if (*p == '<') {             /* quoted field */\n            start = ++p;\n            for (; *p && *p != '>'; p++) {\n                if (*p == '\\\\' && *(p + 1)) {\n                    p++;                               /* Skip escaped chars */\n                }\n            }\n            break;                          /* kr95-10-9: needs to stop here */\n        } else if (*p == '(') {             /* Comment */\n            for (; *p && *p != ')'; p++) {\n                if (*p == '\\\\' && *(p + 1)) {\n                    p++;                               /* Skip escaped chars */\n                }\n            }\n            p++;\n        } else {                                              /* Spool field */\n            start = p;\n            while (*p && !isspace((int)*p) && *p != ',' && *p != ';' && *p != '=') {\n                p++;\n            }\n            break;                                                 /* Got it */\n        }\n    }\n    if (*p) {\n        *p++ = '\\0';\n    }\n    *pstr = p;\n    return start;\n}\n/*\n * This function parses the authentication tokens from\n * the server when the server is requesting HTTP digest\n * authentication.  The tokens are required to generate\n * a valid authentication response in future HTTP\n * requests.\n */\nstatic EST_ERROR est_io_parse_auth_tokens (EST_CTX *ctx, char *hdr)\n{\n    int rv = EST_ERR_NONE;\n    char *p = hdr;\n    char *token = NULL;\n    char *value = NULL;\n    int diff;\n    errno_t safec_rc;\n\n    /*\n     * header will come in with the basic or digest field still on the front.\n     * skip over it.\n     */\n\n    token = HTNextField(&p);\n\n    while ((token = HTNextField(&p))) {\n        if (!est_strcasecmp_s(token, \"realm\")) {\n            if ((value = HTNextField(&p))) {\n                if (EOK != strncpy_s(ctx->realm, MAX_REALM, value, MAX_REALM)) {\n                    rv = EST_ERR_INVALID_TOKEN;\n                }\n            } else {\n                rv = EST_ERR_INVALID_TOKEN;\n            }\n        } else if (!est_strcasecmp_s(token, \"nonce\")) {\n            if ((value = HTNextField(&p))) {\n                if (EOK != strncpy_s(ctx->s_nonce, MAX_NONCE, value, MAX_NONCE)) {\n                    rv = EST_ERR_INVALID_TOKEN;\n                }                \n            } else {\n                rv = EST_ERR_INVALID_TOKEN;\n            }\n        } else if (!est_strcasecmp_s(token, \"qop\")) {\n            if ((value = HTNextField(&p))) {\n\n                if (value[0] == '\\0') {\n                    EST_LOG_WARN(\"Unsupported qop value: %s\", value);\n                } else {\n                    safec_rc = memcmp_s(value, sizeof(\"auth\"), \"auth\", sizeof(\"auth\"), &diff);\n                    if (safec_rc != EOK) {\n                        EST_LOG_INFO(\"memcmp_s error 0x%xO\\n\", safec_rc);\n                    }\n                    if (diff && (safec_rc == EOK)) {\n                        EST_LOG_WARN(\"Unsupported qop value: %s\", value);\n                    }\n                }\n            } else {\n                rv = EST_ERR_INVALID_TOKEN;\n            }\n        } else if (!est_strcasecmp_s(token, \"algorithm\")) {\n            if ((value = HTNextField(&p)) && est_strcasecmp_s(value, \"md5\")) {\n                EST_LOG_ERR(\"Unsupported digest algorithm: %s\", value);\n                /*\n                 **  We only support MD5 for the moment\n                 */\n                rv = EST_ERR_INVALID_TOKEN;\n            }\n        } else if (!est_strcasecmp_s(token, \"error\")) {\n            if ((value = HTNextField(&p))) {\n                if (EOK != strncpy_s(ctx->token_error, MAX_TOKEN_ERROR, value, MAX_TOKEN_ERROR)) {\n                    rv = EST_ERR_INVALID_TOKEN;\n                }\n            } else {\n                rv = EST_ERR_INVALID_TOKEN;\n            }\n        } else if (!est_strcasecmp_s(token, \"error_description\")) {\n            if ((value = HTNextField(&p))) {\n                if (EOK != strncpy_s(ctx->token_error_desc, MAX_TOKEN_ERROR_DESC, value, MAX_TOKEN_ERROR_DESC)) {\n                    rv = EST_ERR_INVALID_TOKEN;\n                }\n            } else {\n                rv = EST_ERR_INVALID_TOKEN;\n            }\n        } else {\n            EST_LOG_WARN(\"Unsupported auth token ignored: %s\", token);\n        }\n\n        if (rv == EST_ERR_INVALID_TOKEN) {\n            memzero_s(ctx->s_nonce, MAX_NONCE+1);\n            break;\n        }   \n    }\n    return (rv);\n}\n/*\n * This function parses the authentication tokens from\n * the server when the server is requesting HTTP digest\n * authentication.  The tokens are required to generate\n * a valid authentication response in future HTTP\n * requests.\n */\nstatic HTTP_HEADER * parse_http_headers (unsigned char **buf, int *num_headers)\n{\n    int i;\n    HTTP_HEADER *hdrs;\n    char *hdr_end;\n    errno_t safec_rc;\n\n    *num_headers = 0;\n    hdrs = malloc(sizeof(HTTP_HEADER) * MAX_HEADERS);\n    if (!hdrs) {\n        EST_LOG_ERR(\"malloc failure\");\n        return (NULL);\n    }\n\n    /*\n     * Find offset of header deliminter\n     */\n    safec_rc = strstr_s((char *) *buf, strnlen_s((char *) *buf, RSIZE_MAX_STR),\n            \"\\r\\n\\r\\n\", MAX_HEADER_DELIMITER_LEN, &hdr_end);\n\n    if (safec_rc != EOK) {\n        EST_LOG_INFO(\"strstr_s error 0x%xO\\n\", safec_rc);\n    }\n\n    /*\n     * Skip the first line\n     */\n    skip((char **)buf, \"\\r\\n\");\n\n    for (i = 0; i < MAX_HEADERS; i++) {\n        hdrs[i].name = skip_quoted((char **)buf, \":\", \" \", 0);\n        hdrs[i].value = skip((char **)buf, \"\\r\\n\");\n        fflush(stdout);\n        EST_LOG_INFO(\"Found HTTP header -> %s:%s\", hdrs[i].name, hdrs[i].value);\n        fflush(stdout);\n        if (hdrs[i].name[0] == '\\0') {\n            break;\n        }\n        *num_headers = i + 1;\n        if ((*buf) > (unsigned char *)hdr_end) {\n            break;\n        }\n    }\n    EST_LOG_INFO(\"Found %d HTTP headers\\n\", *num_headers);\n    return (hdrs);\n}\n/*\n * This function parses the HTTP status code\n * in the first header.  Only a handful of codes are\n * handled by EST.  We are not a full HTTP stack.  Any\n * unrecognized codes will result in an error.\n * Note that HTTP 1.1 is expected.\n */\nstatic int est_io_parse_response_status_code (unsigned char *buf)\n{\n    if (!strncmp((const char *)buf, EST_HTTP_HDR_200,\n                        strnlen_s(EST_HTTP_HDR_200, EST_HTTP_HDR_MAX))) {\n        return 200;\n    } else if (!strncmp((const char *)buf, EST_HTTP_HDR_202,\n                        strnlen_s(EST_HTTP_HDR_202, EST_HTTP_HDR_MAX))) {\n        return 202;\n    } else if (!strncmp((const char *)buf, EST_HTTP_HDR_204,\n                        strnlen_s(EST_HTTP_HDR_204, EST_HTTP_HDR_MAX))) {\n        return 204;\n    } else if (!strncmp((const char *)buf, EST_HTTP_HDR_400,\n                        strnlen_s(EST_HTTP_HDR_400, EST_HTTP_HDR_MAX))) {\n        return 400;\n    } else if (!strncmp((const char *)buf, EST_HTTP_HDR_401,\n                        strnlen_s(EST_HTTP_HDR_401, EST_HTTP_HDR_MAX))) {\n        return 401;\n    } else if (!strncmp((const char *)buf, EST_HTTP_HDR_404,\n                        strnlen_s(EST_HTTP_HDR_404, EST_HTTP_HDR_MAX))) {\n        return 404;\n    } else if (!strncmp((const char *)buf, EST_HTTP_HDR_423,\n                        strnlen_s(EST_HTTP_HDR_423, EST_HTTP_HDR_MAX))) {\n        return 423;\n    } else {\n        EST_LOG_ERR(\"Unhandled HTTP response %s\", buf);\n        return -1;\n    }\n}\n/*\n * This function searches for and processes the WWW-Authenticate header from\n * the server.  The result is the setting of the auth_mode value in the\n * context.  If there is no WWW-Authenticate header, or the values in the\n * header are invalid, it will set the auth_mode to a failure setting.  If\n * there are multiple Authenticate headers, only the first one will be\n * processed.\n */\nstatic void est_io_parse_http_auth_request (EST_CTX *ctx,\n                                            HTTP_HEADER *hdrs,\n                                            int hdr_cnt)\n{\n    int i;\n    EST_ERROR rv;\n    int auth_found = 0;\n\n    /*\n     * Walk the headers looking for the WWW-Authenticate.  We'll\n     * only process the first one.  If an erroneous second one\n     * is included, it will be ignored.\n     */\n    for (i = 0; i < hdr_cnt; i++) {\n        if (!strncmp(hdrs[i].name, EST_HTTP_HDR_AUTH, 16)) {\n\n            auth_found = 1;\n            \n            if (!strncmp(hdrs[i].value, \"Basic\", 5)) {\n                ctx->auth_mode = AUTH_BASIC;\n                /* Parse the realm */\n                rv = est_io_parse_auth_tokens(ctx, hdrs[i].value);\n                if (rv != EST_ERR_NONE) {\n                    ctx->auth_mode = AUTH_FAIL;\n                }    \n            } else\n            if (!strncmp(hdrs[i].value, \"Digest\", 6)) {\n                ctx->auth_mode = AUTH_DIGEST;\n                /* Parse the realm and nonce */\n                rv = est_io_parse_auth_tokens(ctx, hdrs[i].value);\n                if (rv != EST_ERR_NONE) {\n                    ctx->auth_mode = AUTH_FAIL;\n                }    \n            } else if (!strncmp(hdrs[i].value, \"Bearer\", 6)) {\n                ctx->auth_mode = AUTH_TOKEN;\n                /* Parse the realm and possible token error fields */\n                rv = est_io_parse_auth_tokens(ctx, hdrs[i].value);\n                if (rv != EST_ERR_NONE) {\n                    ctx->auth_mode = AUTH_FAIL;\n                }    \n            } else {\n                EST_LOG_ERR(\"Unsupported WWW-Authenticate method\");\n                ctx->auth_mode = AUTH_FAIL;\n            }\n\n            break;\n        }\n    }\n\n    if (!auth_found) {\n        EST_LOG_ERR(\"No WWW-Authenticate header found\");\n        ctx->auth_mode = AUTH_FAIL;\n    }    \n    return;\n}\n/*\n * This function takes in the list of headers that were in the server's\n * response, it walks through the headers looking for a Retry-After response\n * header.  If one is found, the value is parsed and saved away in the EST\n * context.  This value can be in one of two formats, both are represented as\n * an ASCII string.  The first format can be a count of the number of seconds\n * the client should wait before retrying the request.  The second format is a\n * time/date stamp of the point in time at which the client should retry the\n * request.  The result of this function is the setting of the retry_after\n * values in the context.  If no retry-after header was received, or was\n * received and could not be parsed, the values will be zero, otherwise, they\n * are set to the value received.\n *\n * NOTE: The EST client currently does not support the time/date format\n * response and will not process a response in this format.\n */\nstatic EST_ERROR est_io_parse_http_retry_after_resp (EST_CTX *ctx,\n                                                     HTTP_HEADER *hdrs,\n                                                     int hdr_cnt)\n{\n    EST_ERROR rv = EST_ERR_INVALID_RETRY_VALUE;\n    int i;\n    int cmp_result, diff;\n    int rc;\n    long long int temp_ll;\n    int found = 0;\n    \n    /*\n     * Initialize assuming there was no retry-after header.\n     */\n    ctx->retry_after_delay = 0;\n    ctx->retry_after_date = 0;\n    \n    for (i = 0; i < hdr_cnt; i++) {\n        \n        cmp_result = strcasecmp_s(hdrs[i].name, sizeof(EST_HTTP_HDR_RETRY_AFTER),\n                                  EST_HTTP_HDR_RETRY_AFTER, &diff);\n        if (cmp_result == EOK && !diff) {\n            \n            EST_LOG_INFO(\"Retry-After value = %s\", hdrs[i].value);\n            found = 1;\n            /*\n             * Determine whether or not the value is a date/time string\n             * or is an integer representing the number of seconds\n             * that the client must wait.\n             */\n            if (isalpha(*(char *)hdrs[i].value)) {\n#ifdef RETRY_AFTER_DELAY_TIME_SUPPORT\n                int rc;\n                /*\n                 * Convert the date/time string into a time_t\n                 */\n                rc = parsedate(hdrs[i].value, &ctx->retry_after_date);\n                if (rc != PARSEDATE_OK) {\n                    EST_LOG_ERR(\"Retry-After value could not be parsed\");\n                }\n#else\n                /*\n                 * This format is not currently supported.\n                 */\n                EST_LOG_ERR(\"Retry-After value not in the correct format\");\n#endif                \n            } else {\n                /*\n                 * make sure it's all digits, make sure it's no larger than a\n                 * four byte integer, and cache away the value returned for\n                 * the retry delay.\n                 */\n                rc = strisdigit_s(hdrs[i].value, 10); // max of 10 decimal places\n                if (rc) {\n                    temp_ll = atoll(hdrs[i].value);\n                    if (temp_ll <= INT_MAX) {\n                        ctx->retry_after_delay = (int) temp_ll;\n                        rv = EST_ERR_CA_ENROLL_RETRY;\n                    } else {\n                        EST_LOG_ERR(\"Retry-After value too large\");\n                    }\n                    \n                } else {\n                    EST_LOG_ERR(\"Retry-After value could not be parsed\");\n                }\n            }\n        }\n    }\n    if (found == 0) {\n        EST_LOG_ERR(\"Retry-After header missing\");\n    }    \n    return rv;\n}\n/*\n * This function verifies the content type header and also\n * returns the length of the content header.  The\n * content type is important.  For example, the content\n * type is expected to be pkcs7 on a simple enrollment.\n */\nstatic int est_io_check_http_hdrs (HTTP_HEADER *hdrs, int hdr_cnt,\n                                   EST_OPERATION op)\n{\n    int i;\n    int cl = 0;\n    int content_type_present = 0, content_length_present = 0;\n    int cmp_result;\n\n    /*\n     * Traverse all the http headers and process the ones that need to be\n     * checked\n     */\n    for (i = 0; i < hdr_cnt; i++) {\n        /*\n         * Content type\n         */\n        memcmp_s(hdrs[i].name, sizeof(EST_HTTP_HDR_CT), EST_HTTP_HDR_CT,\n            sizeof(EST_HTTP_HDR_CT), &cmp_result);\n        if (!cmp_result) {\n            content_type_present = 1;\n            /*\n             * Verify content is pkcs7 data\n             */\n            memcmp_s(hdrs[i].value,\n                     strnlen_s(est_op_map[op].content_type, est_op_map[op].length),\n                     est_op_map[op].content_type, strnlen_s(est_op_map[op].content_type, est_op_map[op].length),\n                      &cmp_result);\n            if (cmp_result) {\n                EST_LOG_ERR(\"HTTP content type is %s\", hdrs[i].value);\n                return 0;\n                }\n        } else {\n            /*\n             * Content Length\n             */\n            memcmp_s(hdrs[i].name, sizeof(EST_HTTP_HDR_CL), EST_HTTP_HDR_CL,\n                sizeof(EST_HTTP_HDR_CL), &cmp_result);\n            if (!cmp_result) {\n                content_length_present = 1;\n                cl = atoi(hdrs[i].value);\n            }\n        }\n    }\n    \n    /*\n     * Make sure all the necessary headers were present.\n     */\n    if (content_type_present == 0 ) {\n        EST_LOG_ERR(\"Missing HTTP content type  header\");\n        return 0;\n    } else if (content_length_present == 0 ) {\n        EST_LOG_ERR(\"Missing HTTP content length header\");\n        return 0;\n    } \n    \n    return cl;\n}\n/*\n * This function verifies the content type header and also\n * returns the length of the content header.  The\n * content type is important.  For example, the content\n * type is expected to be pkcs7 on a simple enrollment.\n */\nstatic int est_ssl_read (SSL *ssl, unsigned char *buf, int buf_max,\n                       int sock_read_timeout) \n{\n    int timeout;\n    int read_fd;\n    int rv;\n    struct pollfd pfd;\n    \n    /*\n     * load up the timeval struct to be passed to the select\n     */\n    timeout = sock_read_timeout * 1000;\n\n    read_fd = SSL_get_fd(ssl);\n    pfd.fd = read_fd;\n    pfd.events = POLLIN;\n    pfd.revents = 0;\n\n    errno = 0;\n    rv = POLL(&pfd, 1, timeout);\n    if (rv == 0) {\n        EST_LOG_ERR(\"Socket poll timeout.  No data received from server.\");\n        return -1;\n    } else if ( rv == -1) {\n        EST_LOG_ERR(\"Socket read failure. errno = %d\", errno);\n        return -1;\n    } else {\n        return (SSL_read(ssl, buf, buf_max));\n    }\n}\n/*\n * This function extracts data from the SSL context and puts\n * it into a buffer.\n */\nstatic int est_io_read_raw (SSL *ssl, unsigned char *buf, int buf_max,\n                            int *read_cnt, int sock_read_timeout)\n{\n    int cur_cnt;\n    char peek_read_buf;\n\n    *read_cnt = 0;\n    cur_cnt  = est_ssl_read(ssl, buf, buf_max, sock_read_timeout);\n    if (cur_cnt < 0) {\n        EST_LOG_ERR(\"TLS read error 1\");\n\tossl_dump_ssl_errors();\n        return (EST_ERR_SSL_READ);\n    }\n    *read_cnt += cur_cnt;\n\n    /*\n     * Multiple calls to SSL_read may be required to get the full\n     * HTTP payload.\n     */\n    while (cur_cnt > 0 && *read_cnt < buf_max) {\n        cur_cnt = est_ssl_read(ssl, (buf + *read_cnt), (buf_max - *read_cnt),\n                               sock_read_timeout);\n        if (cur_cnt < 0) {\n            EST_LOG_ERR(\"TLS read error\");\n\t    ossl_dump_ssl_errors();\n            return (EST_ERR_SSL_READ);\n        }\n        *read_cnt += cur_cnt;\n    }\n\n    if ((*read_cnt == buf_max) && SSL_peek(ssl, &peek_read_buf, 1)) {\n        EST_LOG_ERR(\"Buffer too small for received message\");\n        return(EST_ERR_READ_BUFFER_TOO_SMALL);\n    }\n    \n    return (EST_ERR_NONE);\n}\n/*\n * This function provides the primary entry point into\n * this module.  It's used by the EST client to read the\n * HTTP response from the server.  The data is read from\n * the SSL context and HTTP parsing is invoked.\n *\n * If EST_ERR_NONE is returned then the raw_buf buffer must\n * be freed by the caller, otherwise, it is freed here.\n */\nEST_ERROR est_io_get_response (EST_CTX *ctx, SSL *ssl, EST_OPERATION op,\n                               unsigned char **buf, int *payload_len)\n{\n    int rv = EST_ERR_NONE;\n    HTTP_HEADER *hdrs;\n    int hdr_cnt;\n    int http_status;\n    unsigned char *raw_buf, *payload_buf, *payload;    \n    int raw_len = 0;\n    \n\n    raw_buf = malloc(EST_CA_MAX);\n    if (raw_buf == NULL) {\n        EST_LOG_ERR(\"Unable to allocate memory\");\n        return EST_ERR_MALLOC;\n    }\n    memzero_s(raw_buf, EST_CA_MAX);\n    payload = raw_buf;\n    \n    /*\n     * Read the raw data from the SSL connection\n     */\n    rv = est_io_read_raw(ssl, raw_buf, EST_CA_MAX, &raw_len, ctx->read_timeout);\n    if (rv != EST_ERR_NONE) {\n        EST_LOG_INFO(\"No valid response to process\");\n        free(raw_buf);\n        return (rv);\n    }\n    if (raw_len <= 0) {\n        EST_LOG_WARN(\"Received empty HTTP response from server\");\n        free(raw_buf);\n        return (EST_ERR_HTTP_NOT_FOUND);\n    }\n    EST_LOG_INFO(\"Read %d bytes of HTTP data\", raw_len);\n    \n    /*\n     * Parse the HTTP header to get the status\n     * Look for status 200 for success\n     */\n    http_status = est_io_parse_response_status_code(raw_buf);\n    ctx->last_http_status = http_status;\n    hdrs = parse_http_headers(&payload, &hdr_cnt);\n    EST_LOG_INFO(\"HTTP status %d received\", http_status);\n\n    /*\n     * Check the Status header first to see\n     * if the server accepted our request.\n     */\n    switch (http_status) {\n    case 200:\n        /* Server reported OK, nothing to do */\n        break;\n    case 204:\n    case 404:\n        EST_LOG_ERR(\"Server responded with 204/404, no content or not found\");\n        if (op == EST_OP_CSRATTRS) {\n\t    rv = EST_ERR_NONE;\n        } else if (http_status == 404) {\n            rv = EST_ERR_HTTP_NOT_FOUND;            \n        } else {\n            rv = EST_ERR_UNKNOWN;\n        }\n        break;\n    case 202:\n        /* Server is asking for a retry */\n        EST_LOG_INFO(\"EST server responded with retry-after\");\n        rv = est_io_parse_http_retry_after_resp(ctx, hdrs, hdr_cnt);\n        break;\n    case 400:\n        EST_LOG_ERR(\"HTTP response from EST server was BAD REQUEST\");\n        rv = EST_ERR_HTTP_BAD_REQ;\n\tbreak;\n    case 401:\n        /* Server is requesting user auth credentials */\n        EST_LOG_INFO(\"EST server requesting user authentication\");\n\n        /* Check if we've already tried authenticating, if so, then bail\n         * First time through, auth_mode will be set to NONE\n         */\n        if (ctx->auth_mode == AUTH_DIGEST ||\n            ctx->auth_mode == AUTH_BASIC ||\n            ctx->auth_mode == AUTH_TOKEN) {\n            ctx->auth_mode = AUTH_FAIL;\n            rv = EST_ERR_AUTH_FAIL;\n            break;\n        }\n        est_io_parse_http_auth_request(ctx, hdrs, hdr_cnt);\n        rv = EST_ERR_AUTH_FAIL;\n        break;\n            \n    case 423:\n        EST_LOG_ERR(\"Server responded with 423, the content we are attempting to access is locked\");\n        rv = EST_ERR_HTTP_LOCKED;\n        break;\n    case -1:\n        /* Unsupported HTTP response */\n        EST_LOG_ERR(\"Unsupported HTTP response from EST server (%d)\", http_status);\n        rv = EST_ERR_UNKNOWN;\n        break;\n    default:\n        /* Some other HTTP response was given, do we want to handle these? */\n        EST_LOG_ERR(\"HTTP response from EST server was %d\", http_status);\n        rv = EST_ERR_HTTP_UNSUPPORTED;\n        break;\n    }\n\n    if (rv == EST_ERR_NONE) {\n        /*\n         * Get the Content-Type and Content-Length headers\n         * and verify the HTTP response contains the correct amount\n         * of data.\n         */\n        *payload_len = est_io_check_http_hdrs(hdrs, hdr_cnt, op);\n        EST_LOG_INFO(\"HTTP Content len=%d\", *payload_len);\n\n        if (*payload_len > EST_CA_MAX) {\n            EST_LOG_ERR(\"Content Length larger than maximum value of %d.\",\n                        EST_CA_MAX);\n            rv = EST_ERR_UNKNOWN;\n            *payload_len = 0;\n            *buf = NULL;\n        } else if (*payload_len == 0) {\n            *payload_len = 0;\n            *buf = NULL;\n        } else {\n            /*\n             * Allocate the buffer to hold the payload to be passed back\n             */\n            payload_buf = malloc(*payload_len);   \n            if (!payload_buf) {\n                EST_LOG_ERR(\"Unable to allocate memory\");\n                free(raw_buf);\n                free(hdrs);\n                return EST_ERR_MALLOC;\n            }\n            memcpy_s(payload_buf, *payload_len, payload, *payload_len);\n            *buf = payload_buf;\n        }\n    }\n    \n    if (raw_buf) {\n        free(raw_buf);\n    }\n    if (hdrs) {\n        free(hdrs);\n    }\n    return (rv);\n}\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcbb"},"name":"est_client_proxy.h","system":"LibEST","applied_transformations":[],"ground_truth":[],"contents":"tcw_err_t tcw_connect(tcw_sock_t *sock, tcw_opts_t *opts, const char *host,\n                      unsigned short int port, SOCK_TYPE *fd);\ntcw_err_t tcw_close(tcw_sock_t *sock);\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcbc"},"name":"est_server_http.h","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}]],"contents":"// MINGW typedefs pid_t to int. Using #define here.\nstatic int pthread_mutex_lock(pthread_mutex_t *);\n// MINGW typedefs pid_t to int. Using #define here.\nstatic int pthread_mutex_unlock(pthread_mutex_t *);\n// MINGW typedefs pid_t to int. Using #define here.\nstatic void to_unicode(const char *path, wchar_t *wbuf, size_t wbuf_len);\n"}
{"_id":{"$oid":"5ea8c50ab2d857f8956dbcbd"},"name":"est_server.h","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc83"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc85"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca4"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca9"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaf"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcad"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8a"}]],"contents":"/*\n * These prototypes are private to est_server.c and are\n * not part of the public API.\n */\nvoid est_send_http_error(EST_CTX *ctx, void *http_ctx, int fail_code);\n/*\n * These prototypes are private to est_server.c and are\n * not part of the public API.\n */\nint est_enroll_auth(EST_CTX *ctx, void *http_ctx, SSL *ssl, char *path_seg,\n                    int reenroll);\n/*\n * These prototypes are private to est_server.c and are\n * not part of the public API.\n */\nint est_handle_cacerts (EST_CTX *ctx, unsigned char *ca_certs, int ca_certs_len,\n                        void *http_ctx, char *path_seg);\n/*\n * These prototypes are private to est_server.c and are\n * not part of the public API.\n */\nint est_tls_uid_auth(EST_CTX *ctx, SSL *ssl, X509_REQ *req);\n/*\n * These prototypes are private to est_server.c and are\n * not part of the public API.\n */\nX509_REQ * est_server_parse_csr(unsigned char *pkcs10, int pkcs10_len);\n/*\n * These prototypes are private to est_server.c and are\n * not part of the public API.\n */\nint est_server_check_csr(X509_REQ *req);\n/*\n * These prototypes are private to est_server.c and are\n * not part of the public API.\n */\nEST_ERROR est_server_send_http_retry_after(EST_CTX *ctx, void *http_ctx, int delay);\n"}
{"_id":{"$oid":"5ea8c50bb2d857f8956dbcbe"},"name":"est_ossl_util.h","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc99"}]],"contents":"int ossl_verify_cb(int ok, X509_STORE_CTX *ctx);\nLIBEST_TEST_API void ossl_dump_ssl_errors(void);\nEST_ERROR ossl_init_cert_store (X509_STORE *store,\n                                unsigned char *raw1, int size1);\n"}
{"_id":{"$oid":"5ea8c50bb2d857f8956dbcbf"},"name":"est_locl.h","system":"LibEST","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9a"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc81"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc83"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc86"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc84"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc85"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca6"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca2"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcb0"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcab"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca5"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca4"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca7"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc87"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca8"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca9"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcaf"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbcad"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc7f"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc82"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc98"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9c"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca0"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc90"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc95"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9b"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbca1"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc9d"}],["requirement_raw",{"$oid":"5ea8c50ab2d857f8956dbc8a"}]],"contents":"LIBEST_TEST_API void est_log (EST_LOG_LEVEL lvl, char *format, ...);\nLIBEST_TEST_API void est_log_backtrace (void);\n/* From est.c */\nchar * est_get_tls_uid(SSL *ssl, int is_client);\n/* From est.c */\nLIBEST_TEST_API EST_ERROR est_load_ca_certs(EST_CTX *ctx, unsigned char *raw, int size);\n/* From est.c */\nLIBEST_TEST_API EST_ERROR est_load_trusted_certs(EST_CTX *ctx, unsigned char *certs, int certs_len);\n/* From est.c */\nvoid est_log(EST_LOG_LEVEL lvl, char *format, ...);\n/* From est.c */\nLIBEST_TEST_API void est_log_version(void);\n/* From est.c */\nvoid est_hex_to_str(char *dst, unsigned char *src, int len);\n/* From est.c */\nint est_base64_encode (const char *src, int actual_src_len, char *dst, int max_dst_len);\n/* From est.c */\nLIBEST_TEST_API int est_base64_decode(const char *src, char *dst, int max_len);\n/* From est_server.c */\nint est_http_request(EST_CTX *ctx, void *http_ctx,\n                     char *method, char *uri,\n                     char *body, int body_len, const char *ct);\n/* From est_client.c */\nLIBEST_TEST_API EST_ERROR est_client_connect(EST_CTX *ctx, SSL **ssl);\n/* From est_client.c */\nint est_client_send_enroll_request(EST_CTX *ctx, SSL *ssl, BUF_MEM *bptr,\n                                   unsigned char *pkcs7, int *pkcs7_len,\n\t\t\t\t   int reenroll);\n/* From est_client.c */\nLIBEST_TEST_API void est_client_disconnect(EST_CTX *ctx, SSL **ssl);\n/* From est_client.c */\nLIBEST_TEST_API int est_client_set_cert_and_key(SSL_CTX *ctx, X509 *cert, EVP_PKEY *key);\n/* From est_client.c */\nEST_ERROR est_client_set_uid_pw(EST_CTX *ctx, const char *uid, const char *pwd);\n/* From est_client_http.c */\nEST_ERROR est_io_get_response (EST_CTX *ctx, SSL *ssl, EST_OPERATION op,\n                         unsigned char **buf, int *payload_len);\n/* From est_proxy.c */\nLIBEST_TEST_API EST_ERROR est_proxy_http_request(EST_CTX *ctx, void *http_ctx,\n                           char *method, char *uri,\n                           char *body, int body_len, const char *ct);\n/* From est_proxy.c */\nvoid proxy_cleanup(EST_CTX *p_ctx);\n/* From est_proxy.c */\nEST_ERROR est_asn1_parse_attributes(const char *p, int len, int *offset);\n/* From est_proxy.c */\nEST_ERROR est_is_challengePassword_present(const char *base64_ptr, int b64_len, int *offset);\n/* From est_proxy.c */\nEST_ERROR est_add_challengePassword(const char *base64_ptr, int b64_len, char **new_csr, int *pop_len);\n/* From est_proxy.c */\nLIBEST_TEST_API EST_ERROR est_proxy_retrieve_cacerts (EST_CTX *ctx, unsigned char **cacerts_rtn,\n                                      int *cacerts_rtn_len);\n/* From est_proxy.c */\nEST_ERROR est_send_csrattr_data(EST_CTX *ctx, char *csr_data, int csr_len, void *http_ctx);\n/* From est_proxy.c */\nvoid cleanse_auth_credentials(EST_HTTP_AUTH_HDR *auth_cred);\n/* From est_proxy.c */\nEST_ERROR est_parse_uri (char *uri, EST_OPERATION *operation,\n                         char **path_seg);\n/* From est_proxy.c */\nEST_ERROR est_store_path_segment (EST_CTX *ctx, char *path_segment,\n                                  int path_segment_len);\n/* From est_proxy.c */\nEST_OPERATION est_parse_operation (char *op_path);\n/* From est_proxy.c */\nint est_strcasecmp_s (char *s1, char *s2);\n"}
{"_id":{"$oid":"5ea8c50bb2d857f8956dbcc0"},"name":"est.h","system":"LibEST","applied_transformations":[],"ground_truth":[],"contents":"/** @file */\n/*------------------------------------------------------------------\n * est/est.h - Public API for Enrollment over Secure Transport\n *\n * November, 2012\n *\n * Copyright (c) 2012-2014, 2016, 2017 by cisco Systems, Inc.\n * All rights reserved.\n **------------------------------------------------------------------\n */\n#ifndef HEADER_EST_H\n#define HEADER_EST_H\n\n#ifdef WIN32\n#ifdef LIBEST_EXPORTS\n#define LIBEST_API __declspec(dllexport) \n#else\n#define LIBEST_API __declspec(dllimport) \n#endif\n#else\n#define LIBEST_API\n#endif\n\n#include <openssl/ssl.h>\n#include <openssl/engine.h>\n#include <openssl/conf.h>\n#include <openssl/srp.h>\n\n#ifdef  __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * Allow for runtime checking of the path segment support\n */\n#ifdef HAVE_URIPARSER\n#define PATH_SEGMENT_SUPPORT_ENABLED 1\n#endif\n    \n#define EST_MAX_FILE_LEN    (255)\n#define EST_MAX_SERVERNAME_LEN    (255)\n#define EST_PORTNUM_LEN          (sizeof(int))\n#define EST_MAX_SERVERNAME_AND_PORT_LEN    (EST_MAX_SERVERNAME_LEN+EST_PORTNUM_LEN)\n#define EST_MAX_CLIENT_CERT_LEN  (4096)\n#define EST_MAX_PATH_SEGMENT_LEN (128)\n\ntypedef enum {\n    EST_SERVER,\n    EST_CLIENT,\n    EST_PROXY\n} EST_MODE;\n\n    \ntypedef enum {\n    EST_CLIENT_PROXY_NONE = -1,\n    EST_CLIENT_PROXY_HTTP_NOTUNNEL = 0,\n    EST_CLIENT_PROXY_HTTP_TUNNEL = 1,\n    EST_CLIENT_PROXY_SOCKS4 = 4,\n    EST_CLIENT_PROXY_SOCKS5 = 5,\n    EST_CLIENT_PROXY_SOCKS4A = 6,\n    EST_CLIENT_PROXY_SOCKS5_HOSTNAME = 7,\n} EST_CLIENT_PROXY_PROTO;\n    \n/* These values can be ORed together: */\n#define EST_CLIENT_PROXY_AUTH_NONE 0\n#define EST_CLIENT_PROXY_AUTH_BASIC 1\n#define EST_CLIENT_PROXY_AUTH_NTLM 8\n\n\n#define FOREACH_EST_ERROR(E) \\\n    E(EST_ERR_NO_CTX) \\\n    E(EST_ERR_NO_CSR) \\\n    E(EST_ERR_NO_CERT) \\\n    E(EST_ERR_NO_KEY) \\\n    E(EST_ERR_INVALID_PARAMETERS) \\\n    E(EST_ERR_LOAD_CACERTS) \\\n    E(EST_ERR_LOAD_TRUST_CERTS) \\\n    E(EST_ERR_BAD_MODE) \\\n    E(EST_ERR_BAD_PKCS10) \\\n    E(EST_ERR_HTTP_WRITE) \\\n    E(EST_ERR_HTTP_UNSUPPORTED) \\\n    E(EST_ERR_HTTP_CANNOT_BUILD_HEADER) \\\n    E(EST_ERR_HTTP_BAD_REQ) \\\n    E(EST_ERR_HTTP_NOT_FOUND) \\\n    E(EST_ERR_HTTP_NO_CONTENT) \\\n    E(EST_ERR_HTTP_LOCKED) \\\n    E(EST_ERR_HTTP_INVALID_PATH_SEGMENT) \\\n    E(EST_ERR_HTTP_PATH_SEGMENT_NOT_SUPPORTED) \\\n    E(EST_ERR_BAD_CONTENT_TYPE) \\\n    E(EST_ERR_BAD_CONTENT_LEN) \\\n    E(EST_ERR_NO_SSL_CTX) \\\n    E(EST_ERR_AUTH_FAIL) \\\n    E(EST_ERR_AUTH_FAIL_TLSUID) \\\n    E(EST_ERR_AUTH_PENDING) \\\n    E(EST_ERR_CA_ENROLL_FAIL) \\\n    E(EST_ERR_CA_ENROLL_RETRY) \\\n    E(EST_ERR_WRONG_METHOD) \\\n    E(EST_ERR_X509_SIGN) \\\n    E(EST_ERR_X509_VER) \\\n    E(EST_ERR_X509_CN) \\\n    E(EST_ERR_X509_ATTR) \\\n    E(EST_ERR_X509_PUBKEY) \\\n    E(EST_ERR_MALLOC) \\\n    E(EST_ERR_SSL_WRITE) \\\n    E(EST_ERR_SSL_READ) \\\n    E(EST_ERR_SSL_NEW) \\\n    E(EST_ERR_SSL_CTX_NEW) \\\n    E(EST_ERR_SSL_CONNECT) \\\n    E(EST_ERR_SSL_CIPHER_LIST) \\\n    E(EST_ERR_PEM_READ) \\\n    E(EST_ERR_NULL_CALLBACK) \\\n    E(EST_ERR_IP_GETADDR) \\\n    E(EST_ERR_IP_CONNECT) \\\n    E(EST_ERR_INVALID_SERVER_NAME) \\\n    E(EST_ERR_INVALID_PORT_NUM) \\\n    E(EST_ERR_CLIENT_INVALID_KEY) \\\n    E(EST_ERR_CLIENT_NOT_INITIALIZED) \\\n    E(EST_ERR_ZERO_LENGTH_BUF) \\\n    E(EST_ERR_READ_BUFFER_TOO_SMALL) \\\n    E(EST_ERR_BUF_EXCEEDS_MAX_LEN) \\\n    E(EST_ERR_NO_CERTIFICATE) \\\n    E(EST_ERR_NO_CERTS_FOUND) \\\n    E(EST_ERR_FQDN_MISMATCH) \\\n    E(EST_ERR_SYSCALL) \\\n    E(EST_ERR_CSR_ALREADY_SIGNED) \\\n    E(EST_ERR_CSR_ATTR_MISSING) \\\n    E(EST_ERR_INVALID_DIGEST) \\\n    E(EST_ERR_CACERT_VERIFICATION) \\\n    E(EST_ERR_INVALID_TOKEN) \\\n    E(EST_ERR_INVALID_RETRY_VALUE) \\\n    E(EST_ERR_BAD_X509) \\\n    E(EST_ERR_BAD_BASE64) \\\n    E(EST_ERR_BAD_ASN1_HEX) \\\n    E(EST_ERR_BAD_ASN1_HEX_TOO_SHORT) \\\n    E(EST_ERR_BAD_ASN1_HEX_TOO_LONG) \\\n    E(EST_ERR_SRP_STRENGTH_LOW) \\\n    E(EST_ERR_SRP_USERID_BAD) \\\n    E(EST_ERR_SRP_PWD_BAD) \\\n    E(EST_ERR_CB_FAILED) \\\n    E(EST_ERR_CLIENT_PROXY_MODE_NOT_SUPPORTED) \\\n    E(EST_ERR_INVALID_CLIENT_PROXY_PROTOCOL)    \\\n    E(EST_ERR_INVALID_CLIENT_PROXY_AUTH)    \\\n    E(EST_ERR_UNKNOWN)\n\n#define GENERATE_ENUM(ENUM) ENUM,\n#define GENERATE_STRING(STRING) #STRING,\n\n/*! @enum EST_ERROR\n *  @brief This enum is used to indicate error conditions to the application layer.\n *         Most of the libEST functions return an error indication from this\n *         enumeration.  Applications should always check the returned error\n *         indication and gracefully handle errors.  When no error occurs, libEST\n *         will return EST_ERR_NONE, which has the value zero.\n\\n\n\\n EST_ERR_NONE  No error occurred.\n\\n EST_ERR_NO_CTX  The EST_CTX* was not provided when invoking the function.\n\\n EST_ERR_NO_CSR  The PKCS10 CSR was not provided when invoking the function.\n\\n EST_ERR_NO_CERT  No valid X509 certificate was provided when invoking the function.\n\\n EST_ERR_NO_KEY  The EVP_PKEY* was not provided when invoking the function.\n\\n EST_ERR_INVALID_PARAMETERS  An invalid argument was provided to the function.\n\\n EST_ERR_LOAD_CACERTS  The CA certifictes provided were not loaded.\n\\n EST_ERR_LOAD_TRUST_CERTS  The certificate chain of trusted certificates was not loaded.\n\\n EST_ERR_BAD_MODE  An EST operation was attempted while using the wrong mode of operation.  The valid modes are client, server, and proxy.  Some EST operations may only be performed in certain modes.\n\\n EST_ERR_BAD_PKCS10  The PKCS10 CSR received from the client is corrupted.\n\\n EST_ERR_HTTP_WRITE  An error occurred while writing the HTTP response on the socket. \n\\n EST_ERR_HTTP_UNSUPPORTED  The EST server sent an unsupported HTTP status code in the response.\n\\n EST_ERR_HTTP_CANNOT_BUILD_HEADER  The HTTP header could not be built correctly.\n\\n EST_ERR_HTTP_BAD_REQ  The HTTP request was bad as reported by the server. \n\\n EST_ERR_HTTP_NOT_FOUND  The HTTP requested information that is currently not found on the server. \n\\n EST_ERR_HTTP_NO_CONTENT  The content requested is not available.\n\\n EST_ERR_HTTP_LOCKED  The resource that is being accessed is locked.\n\\n EST_ERR_HTTP_INVALID_PATH_SEGMENT  The URI path segment passed in is invalid, either too long or contains invalid characters.\n\\n EST_ERR_HTTP_PATH_SEGMENT_NOT_SUPPORTED  This build of EST does not support the use of an additional path segment in the URI.  EST needs to be rebuilt with the uriparser library to support path segments.\n\\n EST_ERR_BAD_CONTENT_TYPE  The HTTP content type header in the request was invalid.\n\\n EST_ERR_BAD_CONTENT_LEN  The HTTP content length header in the request specified a value that was too large.\n\\n EST_ERR_NO_SSL_CTX  The application did not provide a valid SSL_CTX* reference to the API.\n\\n EST_ERR_AUTH_FAIL  The EST server was unable to authentication the EST client.\n\\n EST_ERR_AUTH_FAIL_TLSUID  The authentication failure was due to an invalid challenge password in the PKCS10 CSR.\n\\n EST_ERR_AUTH_PENDING  An HTTP authentication challenge was sent to the client and the response is yet to arrive.\n\\n EST_ERR_CA_ENROLL_FAIL  The certificate authority was unable to sign the PKCS10 CSR. \n\\n EST_ERR_CA_ENROLL_RETRY  The certificate authority has requested the client to retry the enroll request in the future, likely due to the CA not being configured for automatic enrollment.\n\\n EST_ERR_WRONG_METHOD  An invalid HTTP method (GET/POST) was used for the request.\n\\n EST_ERR_X509_SIGN  An error occurred in the OpenSSL library while trying to sign the PKCS10 CSR.\n\\n EST_ERR_X509_VER  An error occurred in the OpenSSL library while trying to set the version on the PKCS10 CSR.\n\\n EST_ERR_X509_CN  An error occurred in the OpenSSL library while trying to set the common name in the PKCS10 CSR.\n\\n EST_ERR_X509_ATTR  An error occurred in the OpenSSL library while trying to set the X509 attributes in the PKCS10 CSR.\n\\n EST_ERR_X509_PUBKEY  An error occurred in the OpenSSL library while trying to set the public key in the PKCS10 CSR.\n\\n EST_ERR_MALLOC  Unable to allocation malloc.  This likely indicates a critical failure on the host system.\n\\n EST_ERR_SSL_WRITE  An error occurred at the TLS layer while trying to write to the socket.\n\\n EST_ERR_SSL_READ  An error occurred at the TLS layer while trying to read from the socket.\n\\n EST_ERR_SSL_NEW  An error occurred in the OpenSSL library while trying to allocate the SSL* reference.\n\\n EST_ERR_SSL_CTX_NEW  An error occurred in the OpenSSL library while trying to allocate the SSL_CTX* reference.\n\\n EST_ERR_SSL_CONNECT  An error occurred in the OpenSSL library while trying to establish a TLS session with the server.\n\\n EST_ERR_SSL_CIPHER_LIST  An error occurred in the OpenSSL library while trying to set the allowed TLS cipher suites.\n\\n EST_ERR_PEM_READ  An error occurred in the OpenSSL library while trying to read the PEM encoded PKCS10 CSR.  This may be due to a corrupted PKCS10.\n\\n EST_ERR_NULL_CALLBACK  The application layer failed to provide the required callback function for the requested EST operation.\n\\n EST_ERR_IP_GETADDR  Unable to resolve the server host name.\n\\n EST_ERR_IP_CONNECT  Unable to connect to requested host/port.\n\\n EST_ERR_INVALID_SERVER_NAME  The server name provided to libEST was invalid.  It may not be NULL and it may not exceed the maximum server name length.\n\\n EST_ERR_INVALID_PORT_NUM  The TCP port number provided to libEST was invalid.  It must be greater than 0 and less than 65536.\n\\n EST_ERR_CLIENT_INVALID_KEY  The certificate and private key provided to libEST could not be loaded.  The private key must match the public key in the certificate.\n\\n EST_ERR_CLIENT_NOT_INITIALIZED  The application attempted to use a libEST API prior to invoking est_client_init().\n\\n EST_ERR_ZERO_LENGTH_BUF  The certificate received from the server had an invalid length.\n\\n EST_ERR_READ_BUFFER_TOO_SMALL  The I/O buffer provided for reading data from the socket is not large enough to receive the response from the server.\n\\n EST_ERR_BUF_EXCEEDS_MAX_LEN  The EST server sent a cacerts response that exceeded the maximum size allowed.\n\\n EST_ERR_NO_CERTIFICATE  An attempt was made to copy the certs from the context prior to the EST operation being performed.\n\\n EST_ERR_NO_CERTS_FOUND  No certificates were found in the trusted certificate list provided to libEST.\n\\n EST_ERR_FQDN_MISMATCH  The EST server name did not match the fully qualified domain name in the server's X509 certificate.\n\\n EST_ERR_SYSCALL  The OpenSSL library reported a system call error when attempting to establish the TLS session.\n\\n EST_ERR_CSR_ALREADY_SIGNED  The PKCS10 CSR provided to libEST already contained a signature.  libEST requires the CSR to not be signed since libEST is responsible for signing the CSR.\n\\n EST_ERR_CSR_ATTR_MISSING  The PKCS10 CSR received from the EST client does not contain all the required CSR attributes.\n\\n EST_ERR_INVALID_DIGEST  An invalid digest type was requested.   \n\\n EST_ERR_CACERT_VERIFICATION  Validation of the CA certificate chain received from the EST server has failed.\n\\n EST_ERR_INVALID_TOKEN  An invalid authorization token was received.\n\\n EST_ERR_INVALID_RETRY_VALUE  An invalid or missing retry-after was received from the server.\n\\n EST_ERR_BAD_X509  An invalid or corrupted X509 certificate was provided to libEST.  \n\\n EST_ERR_BAD_BASE64  An invalid or corrupted CSR Attribute Base64 encoded string was provided. \n\\n EST_ERR_BAD_ASN1_HEX  An invalid or corrupted CSR Attribute ASN1 Hex string was provided.\n\\n EST_ERR_BAD_ASN1_HEX_TOO_SHORT  A CSR Attribute ASN1 Hex string is too short.\n\\n EST_ERR_BAD_ASN1_HEX_TOO_LONG  A CSR Attribute ASN1 Hex string is too long.\n\\n EST_ERR_SRP_STRENGTH_LOW  The SRP strength requested by the application was too small.\n\\n EST_ERR_SRP_USERID_BAD  The SRP user ID was not accepted.\n\\n EST_ERR_SRP_PWD_BAD  The SRP password was not accepted.\n\\n EST_ERR_CB_FAILED  The application layer call-back facility failed.\n\\n EST_ERR_CLIENT_PROXY_MODE_NOT_SUPPORTED  LibEST was not built with libcurl support.  Libcurl is required for client proxy mode.\n\\n EST_ERR_INVALID_CLIENT_PROXY_PROTOCOL Invalid proxy protocol specified when configuring client mode for HTTP/Socks proxy.\n\\n EST_ERR_INVALID_CLIENT_PROXY_AUTH Invalid proxy authentication mode specified when configuring client mode for HTTP/Socks proxy.\n\\n EST_ERR_LAST  Last error in the enum definition. Should never be used.\n*/\ntypedef enum {\n    EST_ERR_NONE = 0,\n    FOREACH_EST_ERROR(GENERATE_ENUM)\n    EST_ERR_LAST\n} EST_ERROR;\nLIBEST_API extern const char *EST_ERR_STRINGS[]; \n#define EST_ERR_NUM_TO_STR(x) EST_ERR_STRINGS[x] \n\ntypedef enum {\n    AUTH_NONE,\n    AUTH_BASIC,\n    AUTH_DIGEST,\n    AUTH_TOKEN,\n    AUTH_FAIL\n} EST_HTTP_AUTH_MODE;\n\ntypedef enum {\n    HTTP_AUTH_NOT_REQUIRED = 0,\n    HTTP_AUTH_REQUIRED,\n} EST_HTTP_AUTH_REQUIRED;\n\ntypedef enum {\n    EST_CERT_FORMAT_PEM = 1,\n    EST_CERT_FORMAT_DER,\n    EST_CERT_FORMAT_MAX\n} EST_CERT_FORMAT;\n\n#define EST_FORMAT_PEM EST_CERT_FORMAT_PEM\n#define EST_FORMAT_DER EST_CERT_FORMAT_DER\n    \n/*\n * This enum allows the logging to be filtered to the\n * desired detailed level.  This is not a bitmask filter.  If\n * adding a new logging level, the order should be\n * maintained based on the urgency of the log message.\n */\ntypedef enum {\n    EST_LOG_LVL_ERR = 1,\n    EST_LOG_LVL_WARN,\n    EST_LOG_LVL_INFO\n} EST_LOG_LEVEL;\n\n#define MAX_REALM 255\n#define MAX_NONCE 64\n#define MAX_UIDPWD 255\n#define MAX_NC 9\n#define MAX_QOP 10\n#define MAX_RESPONSE 64\n#define MIN_CSRATTRS 4\n#define MAX_CSRATTRS 1024\n#define MIN_ASN1_CSRATTRS 2\n#define MAX_CSRATTRS_WITHPOP 1035\n#define MAX_TOKEN_ERROR (255)\n#define MAX_TOKEN_ERROR_DESC (255)\n#define MAX_AUTH_TOKEN_LEN (512) \n#define MAX_HTTP_METHOD_LEN (5)\n\n/*\n * The following values define the minimum, maximum, and default\n * values for the timeout value for the SSL read operations.\n * These values are used for both EST Client and Proxy operations.\n */\n#define EST_SSL_READ_TIMEOUT_MIN 1\n#define EST_SSL_READ_TIMEOUT_MAX 3600\n#define EST_SSL_READ_TIMEOUT_DEF 10\n\n/*! @struct EST_HTTP_AUTH_HDR\n *  @brief This structure is used to pass HTTP authentication parameters to\n *         the application.  libEST does not contain a user database\n *         for authenticating users.  It is expected the application will\n *         perform the user authentication against an external authentication\n *         server such as Radius.  This structure allows the HTTP authentication\n *         credentials to be passed from the libEST HTTP layer to\n *         the application.\n *  @var EST_HTTP_AUTH_HDR::mode\n *\tContains the HTTP authentication mode being used (Basic or Digest).\n *  @var EST_HTTP_AUTH_HDR::user\n *\tContains the user ID from the EST client to be authenticated.\n *  @var EST_HTTP_AUTH_HDR::pwd\n *\tContains the password from the EST client to be authenticated\n *\twhen HTTP basic authentication is used.\n *  @var EST_HTTP_AUTH_HDR::uri\n *\tContains the URI from the EST client for HTTP digest authentication.\n *  @var EST_HTTP_AUTH_HDR::cnonce\n *\tContains the nonce from the EST client for HTTP digest authentication.\n *  @var EST_HTTP_AUTH_HDR::qop\n *\tContains the operation from the EST client for HTTP digest authentication.\n *  @var EST_HTTP_AUTH_HDR::nc\n *\tContains the nonce count from the EST client for HTTP digest authentication.\n *  @var EST_HTTP_AUTH_HDR::nonce\n *\tContains the server nonce for HTTP digest authentication.\n *  @var EST_HTTP_AUTH_HDR::response\n *\tContains the client's digest value to verify.\n *  @var EST_HTTP_AUTH_HDR::auth_token\n *\tContains the client's token value to verify.\n */\ntypedef struct {\n    EST_HTTP_AUTH_MODE mode;\n    char *user;\n    char *pwd;\n    char *uri;\n    char *cnonce;\n    char *qop;\n    char *nc;\n    char *nonce;\n    char *response;\n    char *auth_token;\n} EST_HTTP_AUTH_HDR;\n\n/*\n * Defines the valid return codes that the application layer's auth credential\n * callback function can provide.\n */\ntypedef enum {\n    EST_HTTP_AUTH_CRED_SUCCESS = 1,\n    EST_HTTP_AUTH_CRED_NOT_AVAILABLE,\n} EST_HTTP_AUTH_CRED_RC;\n    \n        \n/*! @struct EST_CTX\n *  @brief This structure is used to maintain the state of EST operations\n *         on behalf of the application.  A single context can be used to\n *         represent a single instance of either an EST client, EST server,\n *         or EST proxy server.  None of the members on this structure\n *         are publically accessible.  Application should use the functions\n *         provided by the libEST API to manage the context.  A context\n *         is created using one of: est_client_init(), est_server_init(),\n *         or est_proxy_init().  When the context is no longer needed,\n *         the application shoud invoke est_destroy() to release all memory\n *         associated with the context.  \n */\ntypedef struct est_ctx EST_CTX;\n\n\n/*! @typedef auth_credentials_cb\n *  @brief This typedef defines the prototype of the callback function\n *         that is to reside in the application code.  The application\n *         can register this function callback using the est_client_set_auth_cred_cb()\n *         API function.  This callback is called by the EST client library\n *         when it requires HTTP authentication credentials.\n *         This callback function takes as input a pointer to a EST_HTTP_AUTH_HDR\n *         structure.  The callback function must look at the mode structure\n *         element to determine which type of credentials are required.  If the\n *         mode is set to AUTH_BASIC or AUTH_DIGEST, the callback function must\n *         supply the user and pwd values.  If the mode is set to AUTH_TOKEN, the\n *         the callback must supply the auth_token value.  The auth_token value\n *         must be a base64 encoded string representing the access token.\n */\ntypedef EST_HTTP_AUTH_CRED_RC (*auth_credentials_cb)(EST_HTTP_AUTH_HDR *auth_credentials);\n\n\n/*\n * Begin the public API prototypes\n */\nLIBEST_API EST_ERROR est_enable_crl(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_init_logger(EST_LOG_LEVEL lvl, void (*loggerfunc)(char *, va_list));\nLIBEST_API int est_get_api_level(void); \nLIBEST_API const char * est_get_version(void); \nLIBEST_API void est_enable_backtrace(int enable);\nLIBEST_API EST_ERROR est_set_ex_data(EST_CTX *ctx, void *ex_data);\nLIBEST_API void * est_get_ex_data(EST_CTX *ctx);\nLIBEST_API EST_CTX * est_server_init(unsigned char *ca_chain, int ca_chain_len,\n                          unsigned char *cacerts_resp_chain, int cacerts_resp_chain_len,\n\t\t\t  EST_CERT_FORMAT cert_format,\n                          char *http_realm, X509 *tls_cert,\n                          EVP_PKEY *tls_key);\nLIBEST_API EST_CTX * est_proxy_init(unsigned char *ca_chain, int ca_chain_len,\n                         unsigned char *cacerts_resp_chain, int cacerts_resp_chain_len,\n\t\t\t EST_CERT_FORMAT cert_format,\n                         char *http_realm, X509 *tls_cert,\n                         EVP_PKEY *tls_key,\n                         char *uid, char *pwd);\nLIBEST_API EST_ERROR est_destroy(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_server_set_auth_mode(EST_CTX *ctx, EST_HTTP_AUTH_MODE amode);\nLIBEST_API char *est_server_generate_auth_digest(EST_HTTP_AUTH_HDR *ah, char *HA1);\nLIBEST_API EST_ERROR est_server_start(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_server_stop(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_server_enable_tls10(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_server_enable_srp(EST_CTX *ctx, int (*cb)(SSL *s, int *ad, void *arg));\nLIBEST_API EST_ERROR est_server_enable_pop(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_server_disable_pop(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_server_handle_request(EST_CTX *ctx, int fd);\nLIBEST_API EST_ERROR est_server_set_dh_parms(EST_CTX *ctx, DH *dh);\nLIBEST_API EST_ERROR est_server_init_csrattrs(EST_CTX *ctx, char *csrattrs, int crsattrs_len);\nLIBEST_API EST_ERROR est_server_set_retry_period(EST_CTX *ctx, int seconds);\nLIBEST_API EST_ERROR est_server_set_ecdhe_curve(EST_CTX *ctx, int nid);\nLIBEST_API EST_ERROR est_server_enforce_csrattr(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_server_set_read_timeout (EST_CTX *ctx, int timeout);\n    \n/*\n * EST proxy specific functions\n */\nLIBEST_API EST_ERROR est_proxy_start(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_proxy_stop(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_proxy_set_server(EST_CTX *ctx, const char *server, int port);\nLIBEST_API EST_ERROR est_proxy_set_auth_mode(EST_CTX *ctx, EST_HTTP_AUTH_MODE amode);\nLIBEST_API EST_ERROR est_proxy_set_read_timeout(EST_CTX *ctx, int timeout);\nLIBEST_API EST_ERROR est_proxy_set_auth_cred_cb(EST_CTX *ctx, auth_credentials_cb);\n\n/*\n * The following functions are used by an EST client\n */\nLIBEST_API EST_CTX *est_client_init(unsigned char *ca_chain, int ca_chain_len,\n                         EST_CERT_FORMAT cert_format,\n                         int (*cert_verify_cb)(X509 *, int));\nLIBEST_API EST_ERROR est_client_set_auth(EST_CTX *ctx, const char *uid, const char *pwd,\n                              X509 *client_cert, EVP_PKEY *private_key);\nLIBEST_API EST_ERROR est_client_set_auth_cred_cb(EST_CTX *ctx, auth_credentials_cb);\nLIBEST_API EST_ERROR est_client_set_server(EST_CTX *ctx, const char *server, int port, char *path_segment);\nLIBEST_API EST_ERROR est_client_set_proxy(EST_CTX *ctx,\n                                          EST_CLIENT_PROXY_PROTO proxy_proto,\n                                          const char *proxy_server,\n                                          unsigned short int proxy_port,\n                                          unsigned int proxy_auth,\n                                          const char *username,\n                                          const char *password);    \nLIBEST_API EST_ERROR est_client_provision_cert(EST_CTX *ctx, char *cn, \n\t                            int *pkcs7_len,\n\t\t\t\t    int *ca_cert_len,\n                                    EVP_PKEY *new_public_key);\nLIBEST_API EST_ERROR est_client_enroll(EST_CTX *ctx, char *cn, int *pkcs7_len,\n                            EVP_PKEY *new_public_key);\nLIBEST_API EST_ERROR est_client_enroll_csr(EST_CTX *ctx, X509_REQ *csr, int *pkcs7_len, EVP_PKEY *priv_key);\nLIBEST_API EST_ERROR est_client_reenroll(EST_CTX *ctx, X509 *cert, int *pkcs7_len, EVP_PKEY *priv_key);\nLIBEST_API EST_ERROR est_client_copy_enrolled_cert(EST_CTX *ctx, unsigned char *pkcs7);\nLIBEST_API EST_ERROR est_client_get_csrattrs(EST_CTX *ctx, unsigned char **csr_data, int *csr_len);\nLIBEST_API EST_ERROR est_client_get_cacerts(EST_CTX *ctx, int *ca_certs_len);\nLIBEST_API EST_ERROR est_client_copy_cacerts(EST_CTX *ctx, unsigned char *ca_certs);\nLIBEST_API EST_ERROR est_client_set_sign_digest(EST_CTX *ctx, int nid); \nLIBEST_API EST_ERROR est_client_copy_retry_after(EST_CTX *ctx, int *retry_delay,\n                                       time_t *retry_time);\nLIBEST_API EST_ERROR est_client_set_read_timeout(EST_CTX *ctx, int timeout);\nLIBEST_API EST_ERROR est_client_enable_basic_auth_hint(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_client_force_pop(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_client_unforce_pop(EST_CTX *ctx);\nLIBEST_API EST_ERROR est_client_enable_srp(EST_CTX *ctx, int strength, char *uid, char *pwd); \nLIBEST_API int est_client_get_last_http_status(EST_CTX *ctx);\n\n/*\n * The following callback entry points must be set by the application\n * when acting as an EST server or proxy.\n */\nLIBEST_API EST_ERROR est_set_ca_enroll_cb(EST_CTX *ctx, int (*cb)(unsigned char * pkcs10, int p10_len,\n                                                       unsigned char **pkcs7, int *pkcs7_len, \n                                                       char *user_id, X509 *peer_cert,\n                                                       char *path_seg, void *ex_data));\nLIBEST_API EST_ERROR est_set_ca_reenroll_cb(EST_CTX *ctx, int (*cb)(unsigned char * pkcs10, int p10_len,\n                                                         unsigned char **pkcs7, int *pkcs7_len, \n                                                         char *user_id, X509 *peer_cert,\n                                                         char *path_seg, void *ex_data));\nLIBEST_API EST_ERROR est_set_csr_cb(EST_CTX * ctx, unsigned char *(*cb)(int*csr_len, char *path_seg, void *ex_data));\nLIBEST_API EST_ERROR est_set_cacerts_cb(EST_CTX * ctx, unsigned char *(*cb)(int*csr_len, char *path_seg, void *ex_data));\nLIBEST_API EST_ERROR est_set_http_auth_cb(EST_CTX * ctx,\n                                          int (*cb)(EST_CTX*, EST_HTTP_AUTH_HDR*,\n                                                    X509*, char *, void*));\n\n    \nLIBEST_API EST_ERROR est_set_http_auth_required(EST_CTX * ctx, EST_HTTP_AUTH_REQUIRED required);\nLIBEST_API EST_ERROR est_add_attributes_helper(X509_REQ *req, int nid, void *string, int chtype);\nLIBEST_API EST_ERROR est_get_attributes_helper(unsigned char **der_ptr, int *der_len, int *new_nid);\nLIBEST_API EST_ERROR est_decode_attributes_helper(char *csrattrs, int csrattrs_len, \n  \t\t\t\t       unsigned char **der_ptr, int *der_len);\n\n/*\n * The following are helper functions to deal with\n * the OpenSSL data types for certs, keys, etc.\n */\nLIBEST_API X509_REQ *est_read_x509_request(unsigned char *csr, int csr_len,\n\t                         EST_CERT_FORMAT csr_format);\nLIBEST_API EVP_PKEY *est_load_key(unsigned char *key, int key_len, int format);\nLIBEST_API int est_convert_p7b64_to_pem(unsigned char *certs_p7, int certs_len, unsigned char **pem);\n\n/*\n * These are helper macros that an application can use\n * to initialize/de-initialize OpenSSL.  \n */\n/*! @brief est_apps_startup() is used by an application to initialize \n    the OpenSSL library.  This should be called first prior to using\n    any other functions in the libEST API. This is a helper function which invokes\n    CRYPTO_malloc_init(), ERR_load_crypto_strings(), OpenSSL_add_all_algorithms(),\n    ENGINE_load_builtin_engines(), SSL_library_init(), and SSL_load_error_strings().\n \n    @return void.\n */\n#define est_apps_startup() \\\n    do { CRYPTO_malloc_init(); \\\n         ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \\\n         ENGINE_load_builtin_engines(); \\\n         SSL_library_init(); \\\n         SSL_load_error_strings(); } while (0)\n\n/*! @brief est_apps_shutdown() is used by an application to de-initialize \n    the OpenSSL library.  This should be called to prevent memory\n    leaks in the OpenSSL library.  This is a helper function which invokes\n    CONF_modules_unload(), OBJ_cleanup(), EVP_cleanup(), ENGINE_cleanup(),\n    CRYPTO_cleanup_all_ex_data(), ERR_remove_thread_state(), and\n    ERR_free_strings().\n \n    @return void.\n */\n#define est_apps_shutdown() \\\n    do { CONF_modules_unload(1); \\\n         OBJ_cleanup(); EVP_cleanup(); ENGINE_cleanup(); \\\n         CRYPTO_cleanup_all_ex_data(); ERR_remove_thread_state(NULL); \\\n         ERR_free_strings(); } while (0)\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c5a"},"name":"WebRoot/util/getUser.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c59"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5d"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c69"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6a"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c75"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca0"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cae"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7caf"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb3"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc9"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cec"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d05"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0b"}]],"contents":"<%@ page import=\"java.net.URLEncoder\" %>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.GetUserNameAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n\n<html>\n<head>\n  <title>iTrust - Find User</title>\n  <style type=\"text/css\">\n.getUserBody {\n\tbackground-color: White; \n\tborder: solid 2px #37609f; \n\tmargin: 0px;\n\tcolor: #37609f;\n\twhite-space: nowrap;\n\twidth: 446px;\n\theight: 146px;\n\toverflow: hidden;\n}\n.getUserTitle {\n\twidth: 100%; \n\ttext-align: center; \n\tbackground-color:#11213b; \n\tcolor: White; \n\tfont-weight: bold;\n\tfont-size: 11pt;\n\tpadding: 2px 0px 2px 0px;\n}\n.getUserTitleClose {\n\tfloat: right; \n\tdisplay: block; \n\tposition: absolute; \n\ttop: 4px;\n\tleft: 410px;  \n}\n.getUserCloseLink {\n\tfont-size: 12px;\n\tcolor: Red;\n}\n.getUserCloseLink:hover {\n\ttext-decoration: none;\n\tcolor: White;\n}\n.getUserSearchButton {\n\tcolor: White; \n\tfont-weight: bold;\n\twidth: 180px; \n\tbackground-color: #11213b; \n\tborder: solid 2px #37609f;\n}\n.getUserSearchButton:hover {\n\tbackground-color: #44546e; \n}\n.getUserName {\n\tfont-size: 14pt;\n\tcolor: Black;\n\tfont-weight: bold;\n}\n.getUserCorrect {\n\tborder: 1px solid #66ff66; \n\tbackground-color: #eeffee;\n\tcolor: #11aa11;\n\tfont-weight: bold;\n}\n.getUserCorrect:hover {\n\tborder: 1px solid #44ee44;\n\tbackground-color: #bbffbb;\n}\n.getUserIncorrect {\n\tborder: 1px solid #ff6666; \n\tbackground-color: #ffeeee;\n\tcolor: #aa1111;\n\tfont-weight: bold;\n}\n.getUserIncorrect:hover {\n\tborder: 1px solid #ee4444;\n\tbackground-color: #ffbbbb;\n}\n.resultTable tr td {\n\tpadding: 0px 3px 0px 3px;\n}\n  </style>\n</head>\n<body class=\"getUserBody\">\n<div class=\"getUserTitle\">\n\tiTrust User Search <div class=\"getUserTitleClose\"><a class=\"getUserCloseLink\" href=\"javascript:void(0);\" onclick=\"parent.getUserClose();\">Close</a></div>\n</div>\n\t<form method=\"post\">\n<% \n\tString mid = request.getParameter(\"mid\");\n\tString paramS = request.getParameter(\"s\");\n\tif(mid != null && mid.trim() != \"\") {\n\t\ttry {\n\t\t\t\tString userName = new GetUserNameAction(DAOFactory.getProductionInstance()).getUserName(mid);\n\t\t\t\tString action = \"\";\n\t\t\t\tif(paramS != null) \n\t\t\t\t\taction = \"parent.setUser('\" + paramS +\"','\" + mid + \"','\" + userName + \"');\";\n\t\t\t\t%>\n\t\t\t\t<table align=\"center\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td style=\"text-align: center; white-space: nowrap;\">\n\t\t\t\t\t\t\tFound User: <span class=\"getUserName\"><br /><%=userName%></span><br /><br />\n\t\t\t\t\t\t\tPlease confirm that this is the user you wish to select.<br /><br style=\"line-height: 6px;\" />\n\t\t\t\t\t\t\t<input type=\"button\" name=\"correct\" value=\"This user is correct\" class=\"getUserCorrect\" onclick=\"<%=action %>\" />  \t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<input type=\"submit\" name=\"incorrect\" value=\"Find another user\" class=\"getUserIncorrect\" />&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t\t<%\n\t\t\t} catch (iTrustException e) {\n\t\t\t\tresponse.sendRedirect(\"getUser.jsp?s=\" + paramS + \"&error=\" + URLEncoder.encode(e.getMessage(),\"UTF-8\") );\n\t\t\t}\n\t} else { %>\n\t\t<table align=\"center\">\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center; padding-bottom: 10px;\">\n\t\t\t\t\t<b>Please enter a User ID to search for.</b>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: right; font-weight: bold; color: black;\">User ID (MID):</td>\n\t\t\t\t<td><input name=\"mid\" maxlength=\"10\" type=\"text\" autocomplete=\"off\" /></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center; padding-top: 2px;\">\n\t\t\t\t\t<input type=\"submit\" value=\"Search for User\" class=\"getUserSearchButton\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t<% if(mid == \"\") { %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center; font-weight: bold; color: Red;\">\n\t\t\t\t\tPlease enter an MID\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t<% } else if(request.getParameter(\"error\") != null) { %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center; font-weight: bold; color: Red;\">\n\t\t\t\t\t<%=request.getParameter(\"error\") %>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t<% } %>\n\t\t</table>\n  <% }%>\t\t\n\t</form>\n  </body>\n</html>"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c5b"},"name":"src/edu/ncsu/csc/itrust/action/GetUserNameAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c59"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5d"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c69"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6a"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c75"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca0"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cae"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7caf"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb3"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc9"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cec"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d05"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0b"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Handles Getting the person's name associated with a certain mid Used by getUser.jsp\n * \n * @author laurenhayward\n * \n */\npublic class GetUserNameAction {\n\tprivate DAOFactory factory;\n\n\t/**\n\t * Set up defaults\n\t * \n\t * @param factory The DAOFactory used for creating the DAOs for this action.\n\t */\n\tpublic GetUserNameAction(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns the person's name that matches the inputMID param\n\t * \n\t * @param inputMID The MID to look up.\n\t * @return the person's name\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic String getUserName(String inputMID) throws iTrustException {\n\t\ttry {\n\t\t\tlong mid = Long.valueOf(inputMID);\n\t\t\treturn factory.getAuthDAO().getUserName(mid);\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new iTrustException(\"MID not in correct form\");\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c5c"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/AuthDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c59"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5d"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c69"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6a"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c72"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c75"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca0"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cab"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cae"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7caf"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb3"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc9"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce0"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce3"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cec"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d05"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0b"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d11"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d16"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2d"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d30"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d43"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.RandomPassword;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * AuthDAO is for anything that has to do with authentication. Most methods access the users table.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class AuthDAO {\n\tpublic static final long LOGIN_TIMEOUT = 15 * 60 * 1000;// 15 min\n\tprivate DAOFactory factory;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic AuthDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).\n\t * Initially sets security question to a random set of characters, so that nobody should be able to guess\n\t * its value.\n\t * \n\t * @param mid The user's MID as a Long.\n\t * @param role The role of the user as a Role enum {@link Role}\n\t * @param password The password for the new user.\n\t * @return A string representing the newly added randomly-generated password. \n\t * @throws DBException\n\t */\n\tpublic String addUser(Long mid, Role role, String password) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement pstmt = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tpstmt = conn\n\t\t\t\t\t.prepareStatement(\"INSERT INTO Users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\n\t\t\tpstmt.setLong(1, mid);\n\t\t\tpstmt.setString(2, password);\n\t\t\tpstmt.setString(3, role.toString());\n\t\t\tpstmt.setString(4, \"Enter the random password given in your account email\");\n\t\t\tString pwd = RandomPassword.getRandomPassword();\n\t\t\tpstmt.setString(5, pwd);\n\t\t\tpstmt.executeUpdate();\n\t\t\treturn pwd;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, pstmt);\n\t\t}\n\t}\n\n\t/**\n\t * Reset the security question and answer for a particular user\n\t * \n\t * @param question The security question as a string.\n\t * @param answer The security answer as a string.\n\t * @param mid The MID of the user as a long.\n\t * @throws DBException\n\t */\n\tpublic void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement pstmt = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tpstmt = conn.prepareStatement(\"UPDATE Users SET sQuestion = ?, sAnswer = ? WHERE MID = ?\");\n\t\t\tpstmt.setString(1, question);\n\t\t\tpstmt.setString(2, answer);\n\t\t\tpstmt.setLong(3, mid);\n\t\t\tpstmt.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, pstmt);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the user name of a user from just the MID\n\t * \n\t * @param mid The MID of the user to get the name of.\n\t * @return The user's name as a String.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic String getUserName(long mid) throws DBException, iTrustException {\n\t\tRole role = getUserRole(mid);\n\t\tswitch (role) {\n\t\t\tcase HCP:\n\t\t\tcase PHA:\n\t\t\tcase ADMIN:\n\t\t\tcase UAP:\n\t\t\tcase ER:\n\t\t\t\treturn factory.getPersonnelDAO().getName(mid);\n\t\t\tcase PATIENT:\n\t\t\t\treturn factory.getPatientDAO().getName(mid);\n\t\t\tcase TESTER:\n\t\t\t\treturn String.valueOf(mid);\n\t\t\tdefault:\n\t\t\t\tthrow new iTrustException(\"Role \" + role + \" not supported\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns the role of a particular MID\n\t * \n\t * @param mid The MID of the user to look up.\n\t * @return The {@link Role} of the user as an enum.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic Role getUserRole(long mid) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement pstmt = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tpstmt = conn.prepareStatement(\"SELECT role FROM Users WHERE MID=?\");\n\t\t\tpstmt.setLong(1, mid);\n\t\t\tResultSet rs;\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\treturn Role.parse(rs.getString(\"role\"));\n\t\t\t} else {\n\t\t\t\tthrow new iTrustException(\"User does not exist\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, pstmt);\n\t\t}\n\t}\n\n\t/**\n\t * Change the password of a particular user\n\t * \n\t * @param mid The MID of the user whose password we are changing.\n\t * @param password The new password.\n\t * @throws DBException\n\t */\n\tpublic void resetPassword(long mid, String password) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE Users SET password=? WHERE MID=?\");\n\t\t\tps.setString(1, password);\n\t\t\tps.setLong(2, mid);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return the security question for a particular user.\n\t * \n\t * @param mid The MID of the user we are looking up.\n\t * @return The security question of the user we are looking up.\n\t * @throws iTrustException\n\t */\n\tpublic String getSecurityQuestion(long mid) throws iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT sQuestion FROM Users WHERE MID=?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet r = ps.executeQuery();\n\t\t\tif (r.next())\n\t\t\t\treturn r.getString(\"sQuestion\");\n\t\t\telse\n\t\t\t\tthrow new iTrustException(\"No security question set for MID: \" + mid);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return the security answer of a particular user\n\t * \n\t * @param mid The MID of the user we are looking up.\n\t * @return The security answer as a String.\n\t * @throws iTrustException\n\t */\n\tpublic String getSecurityAnswer(long mid) throws iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT sAnswer FROM Users WHERE MID=?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet r = ps.executeQuery();\n\t\t\tif (r.next())\n\t\t\t\treturn r.getString(\"sAnswer\");\n\t\t\telse\n\t\t\t\tthrow new iTrustException(\"No security answer set for MID \" + mid);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where\n\t * the key is the user's IP address. If the user's IP address is not in the table, a row with \"1\" is\n\t * added.\n\t * \n\t * @param ipAddr The IP address of the user as a String.\n\t * @throws DBException\n\t */\n\tpublic void recordLoginFailure(String ipAddr) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"UPDATE LoginFailures SET FailureCount=FailureCount+1, lastFailure=CURRENT_TIMESTAMP WHERE IPAddress=?\");\n\t\t\t\t\t//.prepareStatement(\"INSERT INTO LoginFailures VALUES(?,?,?)\");\n\t\t\tps.setString(1, ipAddr);\n\t\t\t//ps.setInt(2, failures);\n\t\t\t//ps.setDate(3, Calendar.getInstance().getTime());\n\t\t\tint numUpdated = ps.executeUpdate();\n\t\t\tif (numUpdated == 0) // if there wasn't an empty row to begin with\n\t\t\t\tinsertLoginFailureRow(ipAddr, 1, conn);// now they have a row AND a strike against\n\t\t\t// 'em\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash\n\t * table where the key is the user's IP address. If the user's IP address is not in the table, a row with\n\t * \"1\" is added.\n\t * \n\t * @param ipAddr The IP address of the user as a String.\n\t * @throws DBException\n\t */\n\tpublic void recordResetPasswordFailure(String ipAddr) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"UPDATE ResetPasswordFailures SET failurecount=failurecount+1 WHERE ipaddress=?\");\n\t\t\tps.setString(1, ipAddr);\n\t\t\tint numUpdated = ps.executeUpdate();\n\t\t\tif (numUpdated == 0) // if there wasn't an empty row to begin with\n\t\t\t\tinsertResetPasswordRow(ipAddr, 1, conn);// now they have a row AND a strike against\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return the number of failures from resetting a password, given an IP address.\n\t * \n\t * @param ipAddr An IP address for the associated attempt as a String.\n\t * @return An int representing the number of failures.\n\t * @throws DBException\n\t */\n\tpublic int getResetPasswordFailures(String ipAddr) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ResetPasswordFailures WHERE IPADDRESS=?\");\n\t\t\tps.setString(1, ipAddr);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\t// if we're more than X minutes out, clear the failure count\n\t\t\t\tif (System.currentTimeMillis() - rs.getTimestamp(\"lastFailure\").getTime() > LOGIN_TIMEOUT) {\n\t\t\t\t\tupdateResetFailuresToZero(ipAddr, conn);\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn rs.getInt(\"failureCount\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinsertResetPasswordRow(ipAddr, 0, conn);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return the number of failures from login failures a password, given an IP address.\n\t * \n\t * @param ipAddr The IP address for this attempt as a String.\n\t * @return An int representing the number of failures which have occured.\n\t * @throws DBException\n\t */\n\tpublic int getLoginFailures(String ipAddr) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LoginFailures WHERE IPADDRESS=?\");\n\t\t\tps.setString(1, ipAddr);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\t// if we're more than X minutes out, clear the failure count\n\t\t\t\tif (System.currentTimeMillis() - rs.getTimestamp(\"lastFailure\").getTime() > LOGIN_TIMEOUT) {\n\t\t\t\t\tupdateFailuresToZero(ipAddr, conn);\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn rs.getInt(\"failureCount\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinsertLoginFailureRow(ipAddr, 0, conn);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\tprivate void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException,\n\t\t\tSQLException {\n\t\tPreparedStatement ps = conn\n\t\t\t\t.prepareStatement(\"INSERT INTO LoginFailures(IPAddress, failureCount) VALUES(?,?)\");\n\t\tps.setString(1, ipAddr);\n\t\tps.setInt(2, failureCount);\n\t\tps.executeUpdate();\n\t}\n\n\tprivate void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException,\n\t\t\tSQLException {\n\t\tPreparedStatement ps = conn\n\t\t\t\t.prepareStatement(\"INSERT INTO ResetPasswordFailures(IPAddress, failureCount) VALUES(?,?)\");\n\t\tps.setString(1, ipAddr);\n\t\tps.setInt(2, failureCount);\n\t\tps.executeUpdate();\n\t}\n\n\tprivate void updateFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\n\t\tPreparedStatement ps = conn\n\t\t\t\t.prepareStatement(\"UPDATE LoginFailures SET failureCount=0 WHERE IPAddress=?\");\n\t\tps.setString(1, ipAddr);\n\t\tps.executeUpdate();\n\t}\n\t\n\tpublic void resetLoginFailuresToZero(String ipAddr) throws DBException, SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry{\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"UPDATE LoginFailures SET failureCount=0 WHERE IPAddress=?\");\n\t\t\tps.setString(1, ipAddr);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\tprivate void updateResetFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\n\t\tPreparedStatement ps = conn\n\t\t\t\t.prepareStatement(\"UPDATE ResetPasswordFailures SET failureCount=0 WHERE IPAddress=?\");\n\t\tps.setString(1, ipAddr);\n\t\tps.executeUpdate();\n\t}\n\n\t/**\n\t * Check that a user actually exists.\n\t * \n\t * @param mid\n\t * @return\n\t * @throws DBException\n\t */\n\tpublic boolean checkUserExists(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Users WHERE MID=?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn rs.next();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c5f"},"name":"src/edu/ncsu/csc/itrust/action/EditPHRAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.action.base.PatientBaseAction;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.AllergyBean;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.FamilyMemberBean;\nimport edu.ncsu.csc.itrust.beans.HealthRecord;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.NoHealthRecordsException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator;\nimport edu.ncsu.csc.itrust.risk.RiskChecker;\nimport edu.ncsu.csc.itrust.validate.AllergyBeanValidator;\n\n\n/**\n * Edits the patient health record for a given patient Used by editPHR.jsp\n * \n * @author laurenhayward\n * \n */\npublic class EditPHRAction extends PatientBaseAction {\n\tprivate DAOFactory factory;\n\tprivate PatientDAO patientDAO;\n\tprivate AllergyDAO allergyDAO;\n\tprivate FamilyDAO familyDAO;\n\tprivate HealthRecordsDAO hrDAO;\n\tprivate OfficeVisitDAO ovDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate ICDCodesDAO icdDAO;\n\tprivate long loggedInMID;\n\tprivate ChronicDiseaseMediator diseaseMediator;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate PersonnelBean HCPUAP;\n\tprivate PatientBean patient;\n\tprivate EmailUtil emailutil;\n\t\n\t/**\n\t * Super class validates the patient id\n\t * \n\t * @param factory The DAOFactory to be used in creating DAOs for this action.\n\t * @param loggedInMID The MID of the currently logged in user who is authorizing this action.\n\t * @param pidString The MID of the patient whose personal health records are being added.\n\t * @throws iTrustException\n\t * @throws DBException\n\t * @throws NoHealthRecordsException\n\t */\n\tpublic EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException,\n\t\t\tDBException {\n\t\tsuper(factory, pidString);\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.allergyDAO = factory.getAllergyDAO();\n\t\tthis.familyDAO = factory.getFamilyDAO();\n\t\tthis.hrDAO = factory.getHealthRecordsDAO();\n\t\tthis.ovDAO = factory.getOfficeVisitDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.icdDAO = factory.getICDCodesDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\n\t\tthis.patient = patientDAO.getPatient(pid);\n\t\temailutil = new EmailUtil(factory);\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Adds an allergy to the patient's records\n\t * \n\t * @param pid\n\t * @param description\n\t * @return \"Allergy Added\", exception message, a list of invalid fields, or \"\" (only if description is\n\t *         null)\n\t * @throws iTrustException\n\t */\n\tpublic String updateAllergies(long pid, String description) throws iTrustException {\n\t\t\n\t\temailutil.sendEmail(makeEmail());\n\t\t\n\t\tif (description != null && !description.equals(\"\")) {\n\t\t\ttry {\n\t\t\t\tAllergyBean bean = new AllergyBean();\n\t\t\t\tbean.setDescription(description);\n\t\t\t\tAllergyBeanValidator abv = new AllergyBeanValidator();\n\t\t\t\tabv.validate(bean);\n\t\t\t\tallergyDAO.addAllergy(pid, description);\n\t\t\t\ttransDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, \"EditPHR - added allergy \" + description);\n\t\t\t\treturn \"Allergy Added\";\n\t\t\t} catch (FormValidationException e2) {\n\t\t\t\treturn \"<span class=error>Error: Invalid Fields--\" + e2.getErrorList() + \"</span><p />\";\n\t\t\t}\n\t\t} else\n\t\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns a PatientBean for the patient\n\t * \n\t * @return PatientBean\n\t * @throws iTrustException\n\t */\n\tpublic PatientBean getPatient() throws iTrustException {\n\t\ttransDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, \"EditPHR - view patient record \");\n\t\treturn patientDAO.getPatient(pid);\n\t}\n\n\t/**\n\t * Returns a list of AllergyBeans for the patient\n\t * \n\t * @return list of AllergyBeans\n\t * @throws iTrustException\n\t */\n\tpublic List<AllergyBean> getAllergies() throws iTrustException {\n\t\treturn allergyDAO.getAllergies(pid);\n\t}\n\n\t/**\n\t * Returns a list of FamilyMemberBeans for the patient\n\t * \n\t * @return list of FamilyMemberBeans\n\t * @throws iTrustException\n\t */\n\tpublic List<FamilyMemberBean> getFamily() throws iTrustException {\n\t\tList<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\n\t\tList<FamilyMemberBean> parents = null;\n\t\tparents = familyDAO.getParents(pid);\n\t\tfam.addAll(parents);\n\t\tfam.addAll(familyDAO.getSiblings(pid));\n\t\tfam.addAll(familyDAO.getChildren(pid));\n\n\t\t\n\t\tif(parents != null) {\n\t\t\tList<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\n\t\t\tfor(FamilyMemberBean parent : parents) {\n\t\t\t\tgrandparents.addAll(familyDAO.getParents(parent.getMid()));\n\t\t\t}\n\t\t\t\n\t\t\tfam.addAll(grandparents);\n\t\t\t\n\t\t\tfor(FamilyMemberBean gp : grandparents) {\n\t\t\t\tgp.setRelation(\"Grandparent\");\n\t\t\t}\n\t\t}\n\t\ttransDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, \"EditPHR - view patient family information \");\n\t\treturn fam;\n\t}\n\n\n\t/**\n\t * Returns a list of HealthRecords for the patient\n\t * \n\t * @return\n\t * @throws iTrustException\n\t */\n\tpublic List<HealthRecord> getAllHealthRecords() throws iTrustException {\n\t\tList<HealthRecord> allHealthRecords = hrDAO.getAllHealthRecords(pid);\n\t\ttransDAO.logTransaction(TransactionType.VIEW_HEALTH_RECORDS, loggedInMID, pid, \"EditPHR - Viewed patient records\");\n\t\treturn allHealthRecords;\n\t}\n\n\t/**\n\t * Returns a list of OfficeVisitBeans\n\t * \n\t * @return\n\t * @throws iTrustException\n\t */\n\tpublic List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {\n\t\ttransDAO.logTransaction(TransactionType.VIEW_OFFICE_VISIT, loggedInMID, pid, \"EditPHR - view patient office visits \");\n\t\treturn ovDAO.getAllOfficeVisits(pid);\n\t}\n\n\t/**\n\t * Returns a complete OfficeVisitBean given a visitID\n\t * \n\t * @return\n\t * @throws iTrustException\n\t */\n\tpublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\n\t\treturn ovDAO.getOfficeVisit(visitID);\n\t}\n\t\n\t/**\n\t * Returns a list of diseases for which the patient is at risk\n\t * \n\t * @return list of RiskCheckers\n\t * @throws iTrustException\n\t * @throws DBException\n\t */\n\tpublic List<RiskChecker> getDiseasesAtRisk() throws NoHealthRecordsException,iTrustException,DBException {\n\t\tthis.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\n\t\ttransDAO.logTransaction(TransactionType.IDENTIFY_RISK_FACTORS, loggedInMID, pid, \"Check for risk factors\");\n\t\treturn diseaseMediator.getDiseaseAtRisk();\n\t}\n\t\n\t/**\n\t * Checks to see if a particular family member has high blood pressure\n\t * \n\t * @param member the family member to check\n\t * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure\n\t * @throws iTrustException\n\t */\n\tpublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\n\t\tList<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n\t\tif(records.size() == 0)\n\t\t\treturn false;\n\t\tfor(HealthRecord record : records) {\n\t\t\tif(record.getBloodPressureSystolic() > 240 || record.getBloodPressureDiastolic() > 120 )\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if a particular family member has high cholesterol\n\t * \n\t * @param member the family member to check\n\t * @return true if the family member has high cholesterol.  False if there are no records or the family member does not\n\t * @throws iTrustException\n\t */\t\n\tpublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\n\t\tList<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n\t\tif(records.size() == 0)\n\t\t\treturn false;\n\t\tfor(HealthRecord record : records) {\n\t\t\tif(record.getCholesterolHDL() < 35 || record.getCholesterolLDL() > 250 )\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if a particular family member has diabetes\n\t * \n\t * @param member the family member to check\n\t * @return true if the family member has diabetes.  False if there are no records or the family member does not\n\t * @throws iTrustException\n\t */\t\n\n\tpublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\n\t\tList<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\n\t\tif(diagnoses.size() == 0)\n\t\t\treturn false;\n\t\tfor(DiagnosisBean diag : diagnoses) {\n\t\t\tif(diag.getICDCode().startsWith(\"250\"))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if a particular family member has cancer\n\t * \n\t * @param member the family member to check\n\t * @return true if the family member has cancer.  False if there are no records or the family member does not\n\t * @throws iTrustException\n\t */\t\n\n\tpublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\n\t\tList<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\n\t\tif(diagnoses.size() == 0)\n\t\t\treturn false;\n\t\tfor(DiagnosisBean diag : diagnoses) {\n\t\t\tif(diag.getICDCode().startsWith(\"199\"))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if a particular family member has heart disease\n\t * \n\t * @param member the family member to check\n\t * @return true if the family member has heart disease.  False if there are no records or the family member does not\n\t * @throws iTrustException\n\t */\t\n\tpublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\n\t\tList<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\n\t\tif(diagnoses.size() == 0)\n\t\t\treturn false;\n\t\tfor(DiagnosisBean diag : diagnoses) {\n\t\t\tif(diag.getICDCode().startsWith(\"402\"))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if a particular family member smokes\n\t * \n\t * @param member the family member to check\n\t * @return true if the family member smokes.  False if there are no records or the family member does not\n\t * @throws iTrustException\n\t */\t\n\tpublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\n\t\tList<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n\t\tif(records.size() == 0)\n\t\t\treturn false;\n\t\tfor(HealthRecord record : records) {\n\t\t\tif(record.isSmoker())\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\n\t/**\n\t * Checks to see if the family member is dead and returns their cause of death if so\n\t * \n\t * @param member the family member to check\n\t * @return the cause of death if there is one; otherwise null\n\t * @throws iTrustException\n\t */\n\tpublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\n\t\tPatientBean patient = patientDAO.getPatient(member.getMid());\n\t\tif(patient.getCauseOfDeath() == null)\n\t\t\treturn \"\";\n\t\tDiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\n\t\tif(diag == null)\n\t\t\treturn \"\";\n\t\treturn diag.getDescription();\n\t}\n\t\n\t/**\n\t * Creates a fake e-mail to notify the user that their records have been altered.\n\t * \n\t * @return the e-mail to be sent\n\t * @throws DBException\n\t */\n\tprivate Email makeEmail() throws DBException{\n\n\t\tEmail email = new Email();\n\t\tList<PatientBean> reps = patientDAO.getRepresenting(patient.getMID());\n\t\t\n\t\tList<String> toAddrs = new ArrayList<String>();\n\t\ttoAddrs.add(patient.getEmail());\n\t\tfor (PatientBean r: reps) {\n\t\t\ttoAddrs.add(r.getEmail());\n\t\t}\n\t\t\n\t\temail.setFrom(\"no-reply@itrust.com\");\n    \temail.setToList(toAddrs); // patient and personal representative\n    \temail.setSubject(String.format(\"Your medical records have been altered\"));\n    \temail.setBody(\"Health care professional \"+ HCPUAP.getFullName() +\" has altered your medical records. \" +\n    \t\t\t\t\"She is not on your list of designated health care professionals.\");\n\t\treturn email;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c60"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/PersonnelDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cdb"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce0"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce3"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf5"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cfc"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d01"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d04"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d24"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d43"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d48"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4d"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Vector;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.HospitalBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.enums.Role;\n\n\n/**\n * Used for managing information related to personnel: HCPs, UAPs, Admins\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class PersonnelDAO {\n\tprivate DAOFactory factory;\n\tprivate PersonnelLoader personnelLoader;\n\tprivate HospitalBeanLoader hospitalBeanLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic PersonnelDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tpersonnelLoader = new PersonnelLoader();\n\t\thospitalBeanLoader = new HospitalBeanLoader();\n\t}\n\n\t/**\n\t * Returns the name for a given MID\n\t * \n\t * @param mid The MID of the personnel in question.\n\t * @return A String representing the name of the personnel.\n\t * @throws iTrustException\n\t * @throws DBException\n\t */\n\tpublic String getName(long mid) throws iTrustException, DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement pstmt = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tpstmt = conn.prepareStatement(\"SELECT firstName, lastName FROM Personnel WHERE MID=?\");\n\t\t\tpstmt.setLong(1, mid);\n\t\t\tResultSet rs;\n\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\treturn rs.getString(\"firstName\") + \" \" + rs.getString(\"lastName\");\n\t\t\t} else {\n\t\t\t\tthrow new iTrustException(\"User does not exist\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, pstmt);\n\t\t}\n\t}\n\n\t/**\n\t * Adds an empty personnel, and returns the MID.\n\t * \n\t * @return A long indicating the new MID.\n\t * @param role A {@link Role} enum indicating the personnel's specific role.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic long addEmptyPersonnel(Role role) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tlong newID;\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO Personnel(Role) VALUES(?)\");\n\t\t\tps.setString(1, role.name());\n\t\t\tps.executeUpdate();\n\t\t\tnewID = DBUtil.getLastInsert(conn);\n\t\t\treturn newID;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves a PersonnelBean with all of the specific information for a given employee.\n\t * \n\t * @param mid The MID of the personnel in question.\n\t * @return A PersonnelBean representing the employee.\n\t * @throws DBException\n\t */\n\tpublic PersonnelBean getPersonnel(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID = ?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\treturn personnelLoader.loadSingle(rs);\n\t\t\t} else\n\t\t\t\treturn null;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the demographics for a personnel.\n\t * \n\t * @param p The personnel bean with the updated information.\n\t * @throws DBException\n\t */\n\tpublic void editPersonnel(PersonnelBean p) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE Personnel SET AMID=?,firstName=?,lastName=?,\"\n\t\t\t\t\t+ \"phone1=?,phone2=?,phone3=?, address1=?,address2=?,city=?, state=?, zip=?, zip1=?, zip2=?, email=?, MessageFilter=?\"\n\t\t\t\t\t+ \" WHERE MID=?\");\n\t\t\tpersonnelLoader.loadParameters(ps, p);\n\t\t\tps.setLong(16, p.getMID());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether a certain personnel is in the database.\n\t * \n\t * @param pid The MID of the personnel in question.\n\t * @return A boolean indicating whether this personnel exists.\n\t * @throws DBException\n\t */\n\tpublic boolean checkPersonnelExists(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID=?\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn rs.next();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns all of the hospitals this LHCP is associated with.\n\t * \n\t * @param mid The MID of the personnel in question.\n\t * @return A java.util.List of HospitalBeans.\n\t * @throws DBException\n\t */\n\tpublic List<HospitalBean> getHospitals(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM HCPAssignedHos hah,Hospitals h \"\n\t\t\t\t\t+ \"WHERE hah.HCPID=? AND hah.HosID=h.HospitalID ORDER BY HospitalName ASC\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn hospitalBeanLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Returns all personnel in the database.\n\t * \n\t * @return A java.util.List of personnel.\n\t * @throws DBException\n\t */\n\tpublic List<PersonnelBean> getAllPersonnel() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM personnel where role in ('hcp','uap','er') \");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn personnelLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of UAPs who work for this LHCP.\n\t * \n\t * @param hcpid The MID of the personnel in question.\n\t * @return A java.util.List of UAPs.\n\t * @throws DBException\n\t */\n\tpublic List<PersonnelBean> getUAPsForHCP(long hcpid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID IN (SELECT UAP FROM HCPRelations WHERE HCP=?)\");\n\t\t\tps.setLong(1, hcpid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn personnelLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Given a prescription that has been given, this method returns all the information for the\n\t * doctor who authorized that prescription.\n\t * \n\t * @param prescription The PrescriptionBean describing the prescription in question.\n\t * @return The PersonnelBean describing the doctor who authorized it.\n\t * @throws DBException\n\t */\n\tpublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID IN (SELECT HCPID FROM OfficeVisits WHERE ID=?)\");\n\t\t\tps.setLong(1, prescription.getVisitID());\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn personnelLoader.loadList(rs).get(0);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.\n\t * \n\t * @param first The first name to be searched for.\n\t * @param last The last name to be searched for.\n\t * @return A java.util.List of personnel who match these names.\n\t * @throws DBException\n\t */\n\tpublic List<PersonnelBean> searchForPersonnelWithName(String first, String last) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\tif (first.equals(\"%\") && last.equals(\"%\")) return new Vector<PersonnelBean>();\n\t\t\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\t\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?\");\n\t\t\tps.setString(1, first);\n\t\t\tps.setString(2, last);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn personnelLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c61"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/HealthRecordsDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c8b"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d52"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.HealthRecord;\nimport edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used for all health records where a whole history is kept.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class HealthRecordsDAO {\n\tprivate HealthRecordsBeanLoader loader = new HealthRecordsBeanLoader();\n\tprivate DAOFactory factory;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic HealthRecordsDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns a list of all health records for a particular patient\n\t * \n\t * @param mid The MID of the patient to look up.\n\t * @return A java.util.List of HealthRecords.\n\t * @throws DBException\n\t */\n\tpublic List<HealthRecord> getAllHealthRecords(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM PersonalHealthInformation \"\n\t\t\t\t\t+ \"WHERE PatientID=? ORDER BY ASOFDATE DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs;\n\t\t\trs = ps.executeQuery();\n\t\t\treturn loader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a health record for a particular patient\n\t * \n\t * @param record The HealthRecord object to insert.\n\t * @return A boolean indicating whether the insert was successful.\n\t * @throws DBException\n\t */\n\tpublic boolean add(HealthRecord record) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO PersonalHealthInformation(PatientID,Height,Weight,\"\n\t\t\t\t\t+ \"Smoker,BloodPressureN,BloodPressureD,CholesterolHDL,CholesterolLDL,CholesterolTri,\"\n\t\t\t\t\t+ \"HCPID) VALUES(?,?,?,?,?,?,?,?,?,?)\");\n\t\t\tloader.loadParameters(ps, record);\n\t\t\tint numInserted = ps.executeUpdate();\n\t\t\treturn (numInserted == 1);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c62"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/OfficeVisitDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6b"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cdb"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d26"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d36"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d52"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.ArrayList;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.LabProcedureBean;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionReportBean;\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\nimport edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used for doing tasks related to office visits. Use this for linking diagnoses to office visits, and similar\n * tasks.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class OfficeVisitDAO {\n\tprivate DAOFactory factory;\n\tprivate OfficeVisitLoader officeVisitLoader = new OfficeVisitLoader();\n\tprivate DiagnosisBeanLoader diagnosisLoader = new DiagnosisBeanLoader(true);\n\tprivate PrescriptionBeanLoader prescriptionLoader = new PrescriptionBeanLoader();\n\tprivate PrescriptionReportBeanLoader prescriptionReportBeanLoader = new PrescriptionReportBeanLoader();\n\tprivate ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader(true);\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic OfficeVisitDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Adds an visit and return its ID\n\t * \n\t * @param ov The OfficeVisitBean to be added.\n\t * @return A long indicating the unique ID for the office visit.\n\t * @throws DBException\n\t */\n\tpublic long add(OfficeVisitBean ov) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"INSERT INTO OfficeVisits (VisitDate, Notes, HCPID, PatientID, HospitalID) VALUES (?,?,?,?,?)\");\n\t\t\tsetValues(ps, ov);\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\tprivate void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {\n\t\tps.setDate(1, new java.sql.Date(ov.getVisitDate().getTime()));\n\t\tps.setString(2, ov.getNotes());\n\t\tps.setLong(3, ov.getHcpID());\n\t\tps.setLong(4, ov.getPatientID());\n\t\tps.setString(5, ov.getHospitalID());\n\t}\n\n\t/**\n\t * Updates the information in a particular office visit.\n\t * \n\t * @param ov The Office Visit bean representing the changes.\n\t * @throws DBException\n\t */\n\tpublic void update(OfficeVisitBean ov) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE OfficeVisits SET VisitDate=?, Notes=?, HCPID=?, \"\n\t\t\t\t\t+ \"PatientID=?, HospitalID=? WHERE ID=?\");\n\t\t\tsetValues(ps, ov);\n\t\t\tps.setLong(6, ov.getID());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a particular office visit given an ID\n\t * \n\t * @param visitID The unique ID of the office visit.\n\t * @return An OfficeVisitBean with the specifics for that office visit.\n\t * @throws DBException\n\t */\n\tpublic OfficeVisitBean getOfficeVisit(long visitID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From OfficeVisits Where ID = ?\");\n\t\t\tps.setLong(1, visitID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next())\n\t\t\t\treturn loadFullOfficeVist(rs, visitID);\n\t\t\telse\n\t\t\t\treturn null;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\tprivate OfficeVisitBean loadFullOfficeVist(ResultSet rs, long visitID) throws SQLException, DBException {\n\t\tOfficeVisitBean ov = new OfficeVisitBean(visitID);\n\t\tov.setVisitDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"VisitDate\")\n\t\t\t\t.getTime())));\n\t\tov.setHcpID(rs.getLong(\"HCPID\"));\n\t\tov.setNotes(rs.getString(\"notes\"));\n\t\tov.setPatientID(rs.getLong(\"PatientID\"));\n\t\tov.setHospitalID(rs.getString(\"HospitalID\"));\n\t\tov.setDiagnoses(getDiagnoses(visitID));\n\t\tov.setPrescriptions(getPrescriptions(visitID));\n\t\tov.setProcedures(getProcedures(visitID));\n\n\t\treturn ov;\n\t}\n\n\t/**\n\t * Returns all of the procedures associated with the given office visit\n\t * \n\t * @param visitID The unique ID of the office visit.\n\t * @return A java.util.List of procedures.\n\t * @throws DBException\n\t */\n\tpublic List<ProcedureBean> getProcedures(long visitID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tList<ProcedureBean> procs;\n\t\t\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"select * from ovprocedure ovp, officevisits ov, cptcodes cpt where ov.id=? and ovp.visitid=? and cpt.code=ovp.cptcode\");\n\t\t\tps.setLong(1, visitID);\n\t\t\tps.setLong(2, visitID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tprocs = procedureBeanLoader.loadList(rs);\n\t\t} \n\t\tcatch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} \n\t\tfinally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t\t\n\t\treturn procs;\n\t}\n\n\t\n\t/**\n\t * Returns all of the prescriptions associated with the given office visit\n\t * \n\t * @param visitID The ID of the office visit.\n\t * @return A java.util.List of prescriptions.\n\t * @throws DBException\n\t */\n\tpublic List<PrescriptionBean> getPrescriptions(long visitID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From OVMedication,NDCodes Where OVMedication.VisitID = ? \"\n\t\t\t\t\t+ \"AND NDCodes.Code=OVMedication.NDCode\");\n\t\t\tps.setLong(1, visitID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn prescriptionLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns all of the diagnoses associated with the given office visit\n\t * \n\t * @param visitID The unique ID of the office visit.\n\t * @return A java.util.List of diagnoses.\n\t * @throws DBException\n\t */\n\tpublic List<DiagnosisBean> getDiagnoses(long visitID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From OVDiagnosis,ICDCodes Where OVDiagnosis.VisitID = ? \"\n\t\t\t\t\t+ \"AND ICDCodes.Code=OVDiagnosis.ICDCode\");\n\t\t\tps.setLong(1, visitID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn diagnosisLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds the given CPT codes to the given office visit\n\t * \n\t * @param cptCode\n\t * @param visitID\n\t * @return\n\t * @throws DBException\n\t */\n\tpublic long addProcedureToOfficeVisit (String cptCode, long visitID, String hcpid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO OVProcedure (CPTCode,VisitID,HCPID) VALUES (?,?,?)\");\n\t\t\tps.setString(1, cptCode);\n\t\t\tps.setLong(2, visitID);\n\t\t\tps.setString(3, hcpid);\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the given procedure from its office visit\n\t * \n\t * @param ovProcedureID The unique ID of the office visit procedure.\n\t * @throws DBException\n\t */\n\tpublic void removeProcedureFromOfficeVisit(long ovProcedureID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM OVProcedure WHERE ID=? \");\n\t\t\tps.setLong(1, ovProcedureID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a prescription bean to the database.\n\t * @param pres The prescription bean to be added.\n\t * @return The unique ID of the newly added bean.\n\t * @throws DBException\n\t */\n\tpublic long addPrescription(PrescriptionBean pres) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"INSERT INTO OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)\");\n\t\t\tprescriptionLoader.loadParameters(ps, pres);\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Edits an existing prescription bean.\n\t * \n\t * @param pres The newly updated prescription bean.\n\t * @return A long indicating the ID of the newly updated prescription bean.\n\t * @throws DBException\n\t */\n\tpublic long editPrescription(PrescriptionBean pres) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\t//ps = conn.prepareStatement(\"UPDATE OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)\");\n\t\t\tString statement = \"UPDATE OVMedication \" +\n\t\t\t\t\"SET VisitID=?, NDCode=?, StartDate=?, EndDate=?, Dosage=?, Instructions=? \" +\n\t\t\t\t\"WHERE ID=?\";\n\t\t\tps = conn.prepareStatement(statement);\n\t\t\tprescriptionLoader.loadParameters(ps, pres);\n\t\t\tps.setLong(7, pres.getId());\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the given medication from its office visit\n\t * \n\t * @param ovMedicationID The unique ID of the medication to be removed.\n\t * @throws DBException\n\t */\n\tpublic void removePrescription(long ovMedicationID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM OVMedication WHERE ID=? \");\n\t\t\tps.setLong(1, ovMedicationID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds the given CPT codes to the given office visit\n\t * @param icd A double representing the ICD code to be added.\n\t * @param visitID The ID of the office visit we are adding the code to.\n\t * @return A long for the new ICD code's ID.\n\t * @throws DBException\n\t */\n\tpublic long addDiagnosisToOfficeVisit(double icd, long visitID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO OVDiagnosis (ICDCode,VisitID) VALUES (?,?)\");\n\t\t\tps.setDouble(1, icd);\n\t\t\tps.setLong(2, visitID);\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * Removes a particular diagnosis from its office visit\n\t * \n\t * @param ovDiagnosisID The ID for the office visit diagnosis to be removed. \n\t * @throws DBException\n\t */\n\tpublic void removeDiagnosisFromOfficeVisit(long ovDiagnosisID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM OVDiagnosis WHERE ID=? \");\n\t\t\tps.setLong(1, ovDiagnosisID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a LOINCCode to an office visit.\n\t * \n\t * @param LOINCCode A string of the code being added.\n\t * @param visitID The ID of the office visit the code is being added to.\n\t * @param pid The patient's MID associated with this transaction.\n\t * @return The unique ID of the code that was added.\n\t * @throws DBException\n\t */\n\tpublic long addLabProcedureToOfficeVisit(String LOINCCode, long visitID, long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO LabProcedure (LaboratoryProcedureCode,OfficeVisitID,\" +\n\t\t\t\t\t\"Commentary, Results, PatientMID, Status, Rights) VALUES (?,?,?,?,?,?,?)\");\n\t\t\tps.setString(1, LOINCCode);\n\t\t\tps.setLong(2, visitID);\n\t\t\tps.setString(3, \"\");\n\t\t\tps.setString(4, \"\");\n\t\t\tps.setLong(5, pid);\n\t\t\tps.setString(6, LabProcedureBean.Not_Received);\n\t\t\tps.setString(7, \"ALLOWED\");\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a given lab procedure.\n\t * \n\t * @param labProcedureID The unique ID of the lab procedure.\n\t * @throws DBException\n\t */\n\tpublic void removeLabProcedureFromOfficeVisit(long labProcedureID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM LabProcedure WHERE LaboratoryProcedureID=?\");\n\t\t\tps.setLong(1, labProcedureID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns whether or not an office visit actually exists\n\t * \n\t * @param ovID The ID of the office visit to be checked.\n\t * @param pid The MID of the patient associated with this transaction.\n\t * @return A boolean indicating its existence.\n\t * @throws DBException\n\t */\n\tpublic boolean checkOfficeVisitExists(long ovID, long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM OfficeVisits WHERE ID=? AND PatientID=?\");\n\t\t\tps.setLong(1, ovID);\n\t\t\tps.setLong(2, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn rs.next();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of all office visits for a given patient\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of OfficeVisitBeans.\n\t * @throws DBException\n\t */\n\tpublic List<OfficeVisitBean> getAllOfficeVisits(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM OfficeVisits WHERE PatientID=? ORDER BY VisitDate DESC\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn officeVisitLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns a list of all office visits for a given patient\n\t * \n\t * @param mid The MID of the LHCP you are looking up.\n\t * @return A java.util.List of Office Visits.\n\t * @throws DBException\n\t */\n\tpublic List<OfficeVisitBean> getAllOfficeVisitsForLHCP(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (mid == 0L) throw new SQLException(\"HCPID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM OfficeVisits WHERE HCPID=? ORDER BY VisitDate DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn officeVisitLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of all office visits for a given patient\n\t * \n\t * @param pid The MID of the patient.\n\t * @return A java.util.List of Office Visits.\n\t * @throws DBException\n\t */\n\tpublic List<OfficeVisitBean> getOfficeVisitsWithNoSurvey(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM OfficeVisits where id not in (select visitid from OVSurvey) and PatientID = ? ORDER BY VisitDate DESC\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn officeVisitLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of information related to prescription reports given all of the office visits and the\n\t * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\n\t * disambiguation is for security reasons).\n\t * \n\t * @param ovIDs A java.util.List of Longs for the office visits.\n\t * @param patientID A long representing the MID of the patient in question.\n\t * @return A java.util.List of prescription reports.\n\t * @throws DBException\n\t */\n\tpublic List<PrescriptionReportBean> getPrescriptionReportsByDate(long patientID, String startDate, String endDate)\n\t\t\tthrows DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM NDCodes, OVMedication, OfficeVisits \"\n\t\t\t\t\t+ \"WHERE NDCodes.Code=OVMedication.NDCode AND OVMedication.VisitID=OfficeVisits.ID \"\n\t\t\t\t\t+ \"AND PatientID=? AND ((DATE(?) < OVMedication.EndDate AND DATE(?) > OVMedication.StartDate)\"\n\t\t\t\t\t+ \"OR (DATE(?) > OVMedication.StartDate  AND DATE(?) < OVMedication.EndDate ) OR \"\n\t\t\t\t\t+ \"(DATE(?) <= OVMedication.StartDate AND DATE(?) >= OVMedication.StartDate)) \"\n\t\t\t\t\t+ \"ORDER BY VisitDate DESC\");\n\t\t\tps.setLong(1, patientID);\n\t\t\tps.setString(2, startDate);\n\t\t\tps.setString(3, startDate);\n\t\t\tps.setString(4, endDate);\n\t\t\tps.setString(5, endDate);\n\t\t\tps.setString(6, startDate);\n\t\t\tps.setString(7, endDate);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn prescriptionReportBeanLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of information related to prescription reports given all of the office visits and the\n\t * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\n\t * disambiguation is for security reasons).\n\t * \n\t * @param ovIDs A java.util.List of Longs for the office visits.\n\t * @param patientID A long representing the MID of the patient in question.\n\t * @return A java.util.List of prescription reports.\n\t * @throws DBException\n\t */\n\tpublic List<PrescriptionReportBean> getPrescriptionReports(List<Long> ovIDs, long patientID)\n\t\t\tthrows DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tString preps = buildPreps(ovIDs.size());\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM NDCodes, OVMedication, OfficeVisits \"\n\t\t\t\t\t+ \"WHERE NDCodes.Code=OVMedication.NDCode AND OVMedication.VisitID=OfficeVisits.ID \"\n\t\t\t\t\t+ \"AND PatientID=? AND VisitID IN(\" + preps + \") ORDER BY VisitDate DESC\");\n\t\t\tps.setLong(1, patientID);\n\t\t\tprepareOVIDs(ps, ovIDs);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn prescriptionReportBeanLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\tprivate void prepareOVIDs(PreparedStatement ps, List<Long> ovIDs) throws SQLException {\n\t\tfor (int i = 0; i < ovIDs.size(); i++) {\n\t\t\tps.setLong(i + 2, ovIDs.get(i));\n\t\t}\n\t}\n\n\tprivate String buildPreps(int size) {\n\t\tString prep = \"\";\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tprep += \"?,\";\n\t\t}\n\t\tif (prep.length() > 0)\n\t\t\treturn prep.substring(0, prep.length() - 1);\n\t\telse\n\t\t\treturn prep;\n\t}\n\t\n\t/**\n\t * Returns a list of all office visits at a given hospital\n\t * @param hospitalID the id of the hospital\n\t * @return a list of the OfficeVisitBeans that hold the office visits\n\t * @throws DBException in the event of a database error\n\t */\n\tpublic List<OfficeVisitBean> getOfficeVisitsFromHospital(String hospitalID) throws DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE hospitalID = ? ORDER BY ID DESC\");\n\t\t\tps.setString(1, hospitalID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn officeVisitLoader.loadList(rs);\n\t\t} catch (SQLException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Gets all office visits corresponding to a particular ICD diagnosis.\n\t * \n\t * @param icdcode A string represnting the ICD diagnosis to look up.\n\t * @return A java.util.List of Office visits.\n\t * @throws DBException\n\t */\n\tpublic List<OfficeVisitBean> getAllOfficeVisitsForDiagnosis(String icdcode) throws DBException {\n\t\t\n\t\tList<DiagnosisBean> diags = null;\n\t\tList<OfficeVisitBean> ovs = new ArrayList<OfficeVisitBean>();\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs= null;\n\t\t\n\t\ttry {\n\t\t\tif (icdcode == null) \n\t\t\t\tthrow new SQLException(\"icdcode cannot be null\");\n\t\t\t\n\t\t\tconn = factory.getConnection();\n\t\t\t\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis ovd, icdcodes icd WHERE ovd.ICDCode=? and icd.Code=?\");\n\t\t\tps.setString(1, icdcode);\n\t\t\tps.setString(2, icdcode);\n\t\t\trs = ps.executeQuery();\n\t\t\tdiags = diagnosisLoader.loadList(rs);\n\t\t\trs.close();\n\t\t\tps.close();\n\t\t\tps = null;\n\t\t\trs = null;\n\t\t\t\n\t\t\tfor (DiagnosisBean bean: diags) {\n\t\t\t\tps = conn.prepareStatement(\"SELECT * FROM officevisits ov WHERE ov.ID=?\");\n\t\t\t\tps.setInt(1, (int)bean.getVisitID());\n\t\t\t\trs = ps.executeQuery();\n\t\t\t\t\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\tovs.add(loadFullOfficeVist(rs, bean.getVisitID()));\n\t\t\t\t}\n\t\t\t\trs.close();\n\t\t\t\tps.close();\n\t\t\t}\n\t\t\t\n\t\t\treturn ovs;\n\t\t\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\t\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c63"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/FamilyDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d53"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.FamilyMemberBean;\nimport edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used for queries related to families.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class FamilyDAO {\n\tprivate DAOFactory factory;\n\tprivate FamilyBeanLoader familyBeanLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic FamilyDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Return the information of the mother and father of this patient\n\t * \n\t * @param pid -\n\t *            this patient\n\t * @return\n\t * @throws DBException\n\t */\n\tpublic List<FamilyMemberBean> getParents(long pid) throws DBException {\n\t\treturn getFamilyMembers(pid, \"Parent\",\n\t\t\t\t\"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID \"\n\t\t\t\t\t\t+ \"FROM Patients p1, Patients p2 \"\n\t\t\t\t\t\t+ \"WHERE p1.MID=? AND (p1.MotherMID=p2.MID OR p1.FatherMID=p2.MID)\", false);\n\t}\n\n\t/**\n\t * Return a list of patients who share at least one parent (and that parent is not '0') with this patient\n\t * \n\t * @param pid -\n\t *            this patient\n\t * @return A java.util.list of FamilyMemberBeans.\n\t * @throws DBException\n\t */\n\tpublic List<FamilyMemberBean> getSiblings(long pid) throws DBException {\n\t\treturn getFamilyMembers(pid, \"Sibling\",\n\t\t\t\t\"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID \"\n\t\t\t\t\t\t+ \"FROM Patients p1, Patients p2 \" + \"WHERE p1.MID=? AND p1.MID<>p2.MID \"\n\t\t\t\t\t\t+ \"AND( (p1.MotherMID=p2.MotherMID AND p2.MotherMID<>0)\"\n\t\t\t\t\t\t+ \"  OR (p1.FatherMID=p2.FatherMID AND p1.FatherMID<>0))\", false);\n\t}\n\n\t/**\n\t * Return a list of patients whose mother or father is this patient\n\t * \n\t * @param pid -\n\t *            this patient\n\t * @return A java.util.List of FamilyMemberBeans.\n\t * @throws DBException\n\t */\n\tpublic List<FamilyMemberBean> getChildren(long pid) throws DBException {\n\t\treturn getFamilyMembers(pid, \"Child\", \"SELECT FirstName, LastName, MID FROM Patients \"\n\t\t\t\t+ \"WHERE MotherMID=? or FatherMID=?\", true);\n\t}\n\n\t/**\n\t * Private helper method (since all three are alike)\n\t * \n\t * @param pid\n\t * @param relation\n\t * @param query\n\t * @param secondParam -\n\t *            add the pid as the second parameter (the 3rd query was a little different)\n\t * \n\t * @return A java.util.List of FamilyMemberBeans.\n\t * @throws DBException\n\t */\n\tprivate List<FamilyMemberBean> getFamilyMembers(long pid, String relation, String query,\n\t\t\tboolean secondParam) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tfamilyBeanLoader = new FamilyBeanLoader(relation);\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(query);\n\t\t\tps.setLong(1, pid);\n\t\t\tif (secondParam)\n\t\t\t\tps.setLong(2, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn familyBeanLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c64"},"name":"WebRoot/auth/hcp-uap/editBasicHealth.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.EditHealthHistoryAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HealthRecord\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Edit Basic Health Record\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n/* Require a Patient ID first */\nString pidString = (String)session.getAttribute(\"pid\");\nif (pidString == null || 1 > pidString.length()) {\n\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\");\n   \treturn;\n}\n//else {\n//\tsession.removeAttribute(\"pid\");\n//}\n\t\nEditHealthHistoryAction action = new EditHealthHistoryAction(prodDAO,loggedInMID.longValue(), pidString);\nlong pid = action.getPid();\nString patientName = action.getPatientName();\nString confirm = \"\";\nif (\"true\".equals(request.getParameter(\"formIsFilled\"))) {\n\ttry { \n\t\tconfirm = action.addHealthRecord(pid, new BeanBuilder<HealthRecordForm>().build(request.getParameterMap(), new HealthRecordForm()));\n\t} catch(FormValidationException e){\n%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%e.printHTML(pageContext.getOut());%></span>\n\t\t</div>\n\t\t<br />\n<%\n\t}\n}\nList<HealthRecord> records = action.getAllHealthRecords(pid);\nHealthRecord mostRecent = (records.size() > 0) ? records.get(0) : new HealthRecord(); //for the default values\n%>\n\n<script type=\"text/javascript\">\nfunction showAddRow(){\n\tdocument.getElementById(\"addRow\").style.display=\"inline\";\n\tdocument.getElementById(\"addRowButton\").style.display=\"none\";\n\tdocument.forms[0].height.focus();\n}\n</script>\n\n<%\nif (!\"\".equals(confirm)) {\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustMessage\"><%=confirm%></span>\n\t</div>\n<%\n}\n%>\n\n<br />\n<div align=center>\n\t<table align=\"center\" class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"10\">Basic Health History</th>\n\t\t</tr>\n\t\t<tr class = \"subHeader\">\n\t\t\t<td>Height</td>\n\t\t\t<td>Weight</td>\n\t\t\t<td>Smokes?</td>\n\t\t\t<td>Blood Pressure</td>\n\t\t\t<td>HDL</td>\n\t\t\t<td>LDL</td>\n\t\t\t<td>Triglycerides</td>\n\t\t\t<td>Total Cholesterol</td>\n\t\t\t<td>Last Recorded</td>\n\t\t\t<td>By Personnel</td>\n\t\t</tr>\n\t<%\n\tfor (HealthRecord hr : records) {\n\t%>\n\t\t<tr>\n\t\t\t<td align=center><%=hr.getHeight()%>in</td>\n\t\t\t<td align=center><%=hr.getWeight()%>lbs</td>\n\t\t\t<td align=center><%=hr.isSmoker() ? \"Y\" : \"N\"%></td>\n\t\t\t<td align=center><%=hr.getBloodPressure()%> mmHg</td>\n\t\t\t<td align=center><%=hr.getCholesterolHDL()%> mg/dL</td>\n\t\t\t<td align=center><%=hr.getCholesterolLDL()%> mg/dL</td>\n\t\t\t<td align=center><%=hr.getCholesterolTri()%> mg/dL</td>\n\t\t\t<td align=center><%=hr.getTotalCholesterol()%> mg/dL</td>\n\t\t\t<td align=center><%=hr.getDateRecorded()%></td>\n<%\n\t\tPersonnelBean p = prodDAO.getPersonnelDAO().getPersonnel(hr.getPersonnelID());\n%>\n\t\t\t<td align=center><%=p.getFullName()%></td>\n\t\t</tr>\n\t<%\n\t}\n\t%>\n\t</table>\n\t<br />\n\t<a href=\"javascript:showAddRow();\" id=\"addRowButton\" style=\"text-decoration:none;\" >\n\t\t<input type=button value=\"Add Record\" onClick=\"showAddRow();\"> \n\t</a>\n</div>\n<br />\n<div id=\"addRow\" style=\"display: none;\" align=center>\n<form action=\"editBasicHealth.jsp\" method=\"post\">\n<input type=\"hidden\" name=\"formIsFilled\" value=\"true\">\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"2\" style=\"background-color:silver;\">Record Information</th>\n\t</tr>\t\n\t<tr>\n\t\t<td class=\"subHeader\">Height (in.):</td>\n\t\t<td ><input name=\"height\"\n\t\t\tvalue=\"<%=mostRecent.getHeight()%>\" style=\"width: 50px\" type=\"text\"\n\t\t\tmaxlength=\"5\"></td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeader\">Weight (lbs.):</td>\n\t\t<td ><input name=\"weight\"\n\t\t\tvalue=\"<%=mostRecent.getWeight()%>\" style=\"width: 50px\" type=\"text\"\n\t\t\tmaxlength=\"5\"></td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeader\">Smoker?:</td>\n\t\t<td ><input type=\"radio\" name=\"isSmoker\"\n\t\t\tvalue=\"false\" checked /> No <input type=\"radio\" name=\"isSmoker\"\n\t\t\tvalue=\"true\" /> Yes</td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeader\">Blood Pressure (mmHg):</td>\n\t\t<td >\n\t\t\t<input name=\"bloodPressureN\" value=\"<%=mostRecent.getBloodPressureN()%>\" style=\"width: 40px\" maxlength=\"3\" type=\"text\" /> \n\t\t\t/ <input name=\"bloodPressureD\" value=\"<%=mostRecent.getBloodPressureD()%>\" style=\"width: 40px\" maxlength=\"3\" type=\"text\" />\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeader\">Cholesterol (mg/dL):</td>\n\t\t<td >\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: right\">HDL:</td>\n\t\t\t\t<td><input name=\"cholesterolHDL\" value=\"<%=mostRecent.getCholesterolHDL()%>\" \n\t\t\t\tstyle=\"width: 38px\" maxlength=\"3\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: right\">LDL:</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input name=\"cholesterolLDL\" value=\"<%=mostRecent.getCholesterolLDL()%>\" style=\"width: 38px\" maxlength=\"3\" type=\"text\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: right\">Tri:</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input name=\"cholesterolTri\" value=\"<%=mostRecent.getCholesterolTri()%>\" style=\"width: 38px\" maxlength=\"3\" type=\"text\">\n\t\t\t    </td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" value=\"Add Record\">\n</form>\n</div>\n\n<br />\n<br />\n<br />\n<itrust:patientNav thisTitle=\"Basic Health History\" />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c65"},"name":"src/edu/ncsu/csc/itrust/action/EditHealthHistoryAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c5e"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.action.base.PatientBaseAction;\nimport edu.ncsu.csc.itrust.beans.HealthRecord;\nimport edu.ncsu.csc.itrust.beans.forms.HealthRecordForm;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.HealthRecordFormValidator;\n\n/**\n * Edits the health history of a patient, used by editBasicHealth.jsp\n * \n * @author laurenhayward\n * \n */\npublic class EditHealthHistoryAction extends PatientBaseAction {\n\tprivate TransactionDAO transDAO;\n\tprivate HealthRecordsDAO hrDAO;\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\tprivate HealthRecordFormValidator validator = new HealthRecordFormValidator();\n\n\t/**\n\t * The patient ID is validated by the superclass\n\t * \n\t * @param factory The DAOFactory which will be used to generate the DAOs used for this action.\n\t * @param loggedInMID The user authorizing this action.\n\t * @param pidString The patient (or other user) who is being edited.\n\t * @throws iTrustException\n\t */\n\tpublic EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString)\n\t\t\tthrows iTrustException {\n\t\tsuper(factory, pidString);\n\t\tthis.hrDAO = factory.getHealthRecordsDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\n\t/**\n\t * returns the patient name\n\t * \n\t * @return patient name\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic String getPatientName() throws DBException, iTrustException {\n\t\treturn authDAO.getUserName(pid);\n\t}\n\n\t/**\n\t * Adds a health record for the given patient\n\t * \n\t * @param pid  The patient record who is being edited.\n\t * @param hr  The filled out health record form to be added.\n\t * @return message - \"Information Recorded\" or exception's message\n\t * @throws FormValidationException\n\t */\n\tpublic String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException,\n\t\t\tiTrustException {\n\t\tvalidator.validate(hr);\n\t\tHealthRecord record = transferForm(pid, hr);\n\t\thrDAO.add(record);\n\t\ttransDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, \"EditHealthHistory - Add Record\");\n\t\treturn \"Information Recorded\";\n\t}\n\n\t\n/**\n * Moves the information from the form to a HealthRecord\n * \n * @param pid Patient of interest\n * @param form Form to be translated\n * @return a HealthRecord containing all the information in the form\n * @throws FormValidationException\n */\n\t\n\tprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\n\t\tHealthRecord record = new HealthRecord();\n\t\trecord.setPatientID(pid);\n\t\trecord.setPersonnelID(loggedInMID);\n\t\trecord.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\n\t\trecord.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\n\t\trecord.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\n\t\trecord.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\n\t\trecord.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\n\t\tif (record.getTotalCholesterol() < 100 || record.getTotalCholesterol() > 600)\n\t\t\tthrow new FormValidationException(\"Total cholesterol must be in [100,600]\");\n\t\trecord.setHeight(Double.valueOf(form.getHeight()));\n\t\trecord.setWeight(Double.valueOf(form.getWeight()));\n\t\trecord.setSmoker(Boolean.valueOf(form.getIsSmoker()));\n\t\treturn record;\n\t}\n\n\t/**\n\t * Returns a list of all HealthRecords for the given patient\n\t * \n\t * @param pid  The ID of the patient to look up\n\t * @return list of HealthRecords\n\t * @throws iTrustException\n\t */\n\tpublic List<HealthRecord> getAllHealthRecords(long pid) throws iTrustException {\n\t\ttransDAO.logTransaction(TransactionType.VIEW_HEALTH_RECORDS, loggedInMID, pid, \"EditHealthHistory - View Records\");\n\t\treturn hrDAO.getAllHealthRecords(pid);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c67"},"name":"WebRoot/auth/patient/home.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c66"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd3"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.beans.OfficeVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LabProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.TransactionBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyRecordsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ReportRequestBean\"%>\n<%@page import=\"java.util.Hashtable\"%>\n<%@page import=\"java.sql.Timestamp\"%>\n<%@page import=\"java.util.Date\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"java.util.LinkedList\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Patient Home\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nsession.removeAttribute(\"personnelList\");\nViewMyRecordsAction surveyAction = new ViewMyRecordsAction(prodDAO,loggedInMID.longValue());\nList <OfficeVisitBean> surList = prodDAO.getOfficeVisitDAO().getOfficeVisitsWithNoSurvey(loggedInMID.longValue());\nPatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue());\nList<ReportRequestBean> reports = surveyAction.getReportRequests();\nViewMyReportRequestsAction reportAction = new ViewMyReportRequestsAction(prodDAO, loggedInMID.longValue());\nLabProcedureDAO lpDAO = new LabProcedureDAO(prodDAO);\nList<LabProcedureBean> labProcedures = lpDAO.getLabProceduresForPatientForNextMonth(loggedInMID.longValue());\nList<PatientBean> represented = new PatientDAO(prodDAO).getRepresented(loggedInMID.longValue());\nTransactionDAO transDAO = new TransactionDAO(prodDAO);\nPersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);\n// Create an ArrayList and index to hide MIDs from user\nList<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();\nint personnel_counter = 0;\n%>\n\n<%\n\nif(request.getParameter(\"rep\") != null && request.getParameter(\"rep\").equals(\"1\")){\n%>\n<div align=center>\n\t\t\t\t<span class=\"iTrustMessage\"><%=\"Adverse Event Successfully Reported\"%></span>\n</div>\n<%} %>\n\n\n<div id=\"Header\">\n<h1>Welcome <%=prodDAO.getAuthDAO().getUserName(Long.valueOf(request.getUserPrincipal().getName()))%>!</h1>\n</div>\n\n<div id=\"Content\" align=\"left\">\n\n\n\n<h3>Announcements</h3>\n<i>New features in iTrust</i>\n\n<ul>\n<li>Very happy or upset about your last office visit? Fill out a survey and let us know!</li>\n<li>No more typing in a date! We now have a calendar pop-up that makes setting dates incredibly easy!.</li>\n</ul>\n\n<h3>Notifications</h3>\n\n\n<h4>Surveys that still need to be completed</h4>\n\n<%\nif (0 != surList.size()) {\n%>\n<ul>\n<%\n\tfor (OfficeVisitBean ov : surList) {\n\t\tif (!surveyAction.isSurveyCompleted(ov.getID())){\n%>\n\t\t\t<li><a href=\"survey.jsp?ovID=<%=ov.getVisitID()%>&ovDate=<%=ov.getVisitDateStr()%>\">Complete survey</a> for your office visit on <%=ov.getVisitDateStr()%></li>\n<%\n\t\t}\n\t}\n%>\n</ul>\n<%\n}\nelse {\n%>\n\t<i>No Unfinished Surveys</i>\n<%\n}\n%>\n\n<h4>Comprehensive Report History</h4>\n<%\nif (reports.size() != 0) {\n%>\n<ul>\n<%\n\tfor (ReportRequestBean report : reports) {\n%>\n\t\t<li><%=reportAction.getLongStatus(report.getID())%></li>\n<%\n\t}\n%>\n</ul>\n<%\n} \nelse {\n%>\n\t<i>No Report Requests</i>\n<%\n}\n%>\n\n<h4>Lab Procedures Completed in the Last Month</h4>\n<span>Lab Procedures for you</span><br />\n\n<%\nif (0 != labProcedures.size()) {\n%>\n\t<ul>\n<%\n\tfor (LabProcedureBean bean : labProcedures) {\n%>\n\t\t<li>Lab Procedure <%=bean.getLoinc()%> from Office Visit <a href=\"viewOfficeVisit.jsp?ovID=<%=bean.getOvID()%>\"><%=bean.getOvID()%></a><br />\n\t\tResults:\n<%\n\t\tif (bean.getResults().equals(\"\")) {\n%> \n\t\t\t<i>none</i>\n<%\n\t\t}\n\t\telse {\n%>\n\t\t\t<%=bean.getResults()%><%\n\t\t}\n%>\n\t\t</li>\n<%\n\t}\n%>\n\t</ul>\n<%\n}\nelse {\n%>\n\t<i>No Recent Lab Procedures</i><br />\n<%\n}\n%>\n\n<span>Lab Procedures for Represented Patients</span><br />\n<%\nif (0 != represented.size()) {\n%>\n\t<ul>\n<%\n\tfor (PatientBean patientBean : represented) {\n%>\n\t\t<b>Patient <%=patientBean.getFullName()%></b>\n<%\n\t\tList<LabProcedureBean> labBeans = lpDAO.getLabProceduresForPatientForNextMonth(patientBean.getMID());\n\t\tif (0 != labBeans.size()) {\n%>\n\t\t\t<ul>\n<%\n\t\t\tfor (LabProcedureBean bean : labBeans) {\n%>\n\t\t\t\t<li>Lab Procedure <%=bean.getLoinc()%><br /> Results:\n<%\n\t\t\t\tif (bean.getResults().equals(\"\")) {\n%> \n\t\t\t\t\t<i>none</i> \n<%\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout.print(bean.getResults());\n\t\t\t\t}\n%>\n\t\t\t\t</li>\n<%\n\t\t\t}\n%>\n\t\t\t</ul>\n<%\n\t\t}\n\t\telse {\n%>\n\t\t\t<i>No Recent Lab Procedures</i><br />\n<%\n\t\t}\n\t}\n%>\n\t</ul>\n<%\n}\nelse {\n%>\n\t\t\t<i>No Recent Lab Procedures</i><br />\n<%\n}\n%>\n\n\n<h4>Access by Undesignated Personnel</h4>\n<%\n\n\nDate today = new Date();\nDate earlier = new Date();\nearlier.setDate(today.getDate() - 90);\n\nList<TransactionBean> transactions = transDAO.getRecordAccesses(patient.getMID(), earlier, today, false);\n\nif (transactions.size() > 0) {\n%>\n\t<ul>\n<%\n\tHashtable<Long, LinkedList<String>> ht = new Hashtable<Long, LinkedList<String>>();\n\tfor (TransactionBean transaction : transactions) {\n\t\tTimestamp accessTime = transaction.getTimeLogged();\n\t\t\n\t\t// Begin - remove duplicate entries from the display\n\t\tLong mid = new Long(transaction.getLoggedInMID());\n\t\tString date = new String(accessTime.getMonth() + \"/\" + accessTime.getDate());\n\t\t\n\t\tboolean skip = false;\n\t\tif(!ht.containsKey(transaction.getLoggedInMID())) {\n\t\t\tht.put(mid, new LinkedList<String>());\n\t\t}\n\t\t\n\t\tLinkedList<String> ll = (LinkedList<String>) ht.get(mid);\n\t\tif(ll.contains(date)) {\n\t\t\tskip = true;\n\t\t}\n\t\telse {\n\t\t\tll.add(date);\n\t\t}\n\t\t// End - remove duplicate entries from the display\n\t\t\n\t\tif(!skip) {\n%>\n\t\t<li><%=authDAO.getUserName(mid.longValue())%> accessed your records on <%=date %></li>\n<%\n\t\t}\n\t}\n%>\n\t</ul>\n\n<%\n}\nelse {\n%>\n\t<i>None reported</i>\n<%\n}\n%>\n</div>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c68"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/TransactionDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c66"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c70"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cab"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d45"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d46"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d47"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4e"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d51"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.sql.Date;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.OperationalProfile;\nimport edu.ncsu.csc.itrust.beans.TransactionBean;\nimport edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used for the logging mechanism.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class TransactionDAO {\n\tprivate DAOFactory factory;\n\tprivate TransactionBeanLoader loader = new TransactionBeanLoader();\n\tprivate OperationalProfileLoader operationalProfileLoader = new OperationalProfileLoader();\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic TransactionDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns the whole transaction log\n\t * \n\t * @return\n\t * @throws DBException\n\t */\n\tpublic List<TransactionBean> getAllTransactions() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM TransactionLog ORDER BY timeLogged DESC\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn loader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Log a transaction, just giving it the person who is logged in and the type\n\t * \n\t * @param type The {@link TransactionType} enum representing the type this transaction is.\n\t * @param loggedInMID The MID of the user who is logged in.\n\t * @throws DBException\n\t */\n\tpublic void logTransaction(TransactionType type, long loggedInMID) throws DBException {\n\t\tlogTransaction(type, loggedInMID, 0L, \"\");\n\t}\n\n\t/**\n\t * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\n\t * the transaction type.\n\t * \n\t * @param type The {@link TransactionType} enum representing the type this transaction is.\n\t * @param loggedInMID The MID of the user who is logged in.\n\t * @param secondaryMID Typically, the MID of the user who is being acted upon.\n\t * @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity).\n\t * @throws DBException\n\t */\n\tpublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo)\n\t\t\tthrows DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO TransactionLog(loggedInMID, secondaryMID, \"\n\t\t\t\t\t+ \"transactionCode, addedInfo) VALUES(?,?,?,?)\");\n\t\t\tps.setLong(1, loggedInMID);\n\t\t\tps.setLong(2, secondaryMID);\n\t\t\tps.setInt(3, type.getCode());\n\t\t\tps.setString(4, addedInfo);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all transactions in which an HCP accessed the given patient's record\n\t * \n\t * @param patientID The MID of the patient in question.\n\t * @return A java.util.List of transactions.\n\t * @throws DBException\n\t */\n\tpublic List<TransactionBean> getAllRecordAccesses(long patientID, boolean getByRole) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM TransactionLog WHERE secondaryMID=? AND transactionCode \"\n\t\t\t\t\t\t\t+ \"IN(\" + TransactionType.patientViewableStr + \") ORDER BY timeLogged DESC\");\n\t\t\tps.setLong(1, patientID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tList<TransactionBean> tbList = loader.loadList(rs);\n\n\t\t\ttbList = addAndSortRoles(tbList, patientID, getByRole);\n\t\t\t\n\t\t\treturn tbList;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * The Most Thorough Fetch \n\t * @param loggedInRole Role of loggedIn\n\t * @param secondaryRole Role of secondary\n\t * @param begin Beginning of date range\n\t * @param end End of date range\n\t * @param type Type of transaction\n\t * @return\n\t * @throws DBException\n\t */\n\tpublic List<TransactionBean> getTransactionsFor(String loggedInRole, String secondaryRole, Date begin, Date end, TransactionType type) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif(loggedInRole.compareTo(\"any\") == 0) {\n\t\t\t\tloggedInRole = \"*\";\n\t\t\t}\n\t\t\tif(secondaryRole.compareTo(\"any\") == 0) {\n\t\t\t\tsecondaryRole = \"*\";\n\t\t\t}\n\t\t\t\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM TransactionLog, Users  WHERE (MID=loggedInMID OR MID=secondaryMID) AND (Role=? OR Role=?) \"\n\t\t\t\t\t\t\t+ \" AND transactionCode=? AND timeLogged >= ? AND timeLogged <= ?\" + \" ORDER BY timeLogged DESC\");\n\t\t\tps.setString(1, loggedInRole);\n\t\t\tps.setString(2, secondaryRole);\n\t\t\tps.setInt(3, type.getCode());\n\t\t\tps.setDate(4, begin);\n\t\t\tps.setDate(5, end);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tList<TransactionBean> tbList = loader.loadList(rs);\n\n\t\t\t//tbList = addAndSortRoles(tbList, patientID, getByRole);\n\t\t\t\n\t\t\treturn tbList;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all transactions in which an HCP accessed the given patient's record, within the dates\n\t * \n\t * @param patientID The MID of the patient in question.\n\t * @param lower The starting date as a java.util.Date\n\t * @param upper The ending date as a java.util.Date\n\t * @return A java.util.List of transactions.\n\t * @throws DBException\n\t */\n\tpublic List<TransactionBean> getRecordAccesses(long patientID, java.util.Date lower, java.util.Date upper, boolean getByRole) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM TransactionLog WHERE secondaryMID=? AND transactionCode IN (\"\n\t\t\t\t\t\t\t+ TransactionType.patientViewableStr\n\t\t\t\t\t\t\t+ \") \"\n\t\t\t\t\t\t\t+ \"AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\n\t\t\tps.setLong(1, patientID);\n\t\t\tps.setTimestamp(2, new Timestamp(lower.getTime()));\n\t\t\t// add 1 day's worth to include the upper\n\t\t\tps.setTimestamp(3, new Timestamp(upper.getTime() + 1000L * 60L * 60 * 24L));\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tList<TransactionBean> tbList = loader.loadList(rs);\n\n\t\t\ttbList = addAndSortRoles(tbList, patientID, getByRole);\n\t\t\t\n\t\t\treturn tbList;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the operation profile\n\t * \n\t * @return The OperationalProfile as a bean.\n\t * @throws DBException\n\t */\n\tpublic OperationalProfile getOperationalProfile() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT TransactionCode, count(transactionID) as TotalCount, \"\n\t\t\t\t\t+ \"count(if(loggedInMID<9000000000, transactionID, null)) as PatientCount, \"\n\t\t\t\t\t+ \"count(if(loggedInMID>=9000000000, transactionID, null)) as PersonnelCount \"\n\t\t\t\t\t+ \"FROM TransactionLog GROUP BY transactionCode ORDER BY transactionCode ASC\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn operationalProfileLoader.loadSingle(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * \n\t * @param tbList\n\t * @param patientID\n\t * @param sortByRole\n\t * @return\n\t * @throws DBException\n\t */\n\tprivate List<TransactionBean> addAndSortRoles(List<TransactionBean> tbList, long patientID, boolean sortByRole) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\t\n\t\t\tfor(TransactionBean t : tbList) {\n\t\t\t\t\n\t\t\t\tps = conn\n\t\t\t\t\t\t.prepareStatement(\"SELECT Role FROM Users WHERE MID=?\");\n\t\t\t\tps.setLong(1, t.getLoggedInMID());\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\tString role = \"\";\n\t\t\t\tif(rs.next())\n\t\t\t\t\trole = rs.getString(\"Role\");\n\t\t\t\tif(role.equals(\"er\"))\n\t\t\t\t\trole = \"Emergency Responder\";\n\t\t\t\telse if(role.equals(\"uap\"))\n\t\t\t\t\trole = \"UAP\";\n\t\t\t\telse if(role.equals(\"hcp\")) {\n\t\t\t\t\trole = \"LHCP\";\n\t\t\t\t\tps = conn\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT PatientID FROM DeclaredHCP WHERE HCPID=?\");\n\t\t\t\t\tps.setLong(1, t.getLoggedInMID());\n\t\t\t\t\tResultSet rs2 = ps.executeQuery();\n\t\t\t\t\twhile(rs2.next()) {\n\t\t\t\t\t\tif (rs2.getLong(\"PatientID\") == patientID){\n\t\t\t\t\t\t\trole = \"DLHCP\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(role.equals(\"patient\")){\n\t\t\t\t\trole = \"Patient\";\n\t\t\t\t\tps = conn\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT representeeMID FROM Representatives WHERE representerMID=?\");\n\t\t\t\t\tps.setLong(1, t.getLoggedInMID());\n\t\t\t\t\tResultSet rs2 = ps.executeQuery();\n\t\t\t\t\twhile(rs2.next()) {\n\t\t\t\t\t\tif (rs2.getLong(\"representeeMID\") == patientID){\n\t\t\t\t\t\t\trole = \"Personal Health Representative\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tt.setRole(role);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(sortByRole){\n\t\t\t\tTransactionBean[] array = new TransactionBean[tbList.size()];\n\t\t\t\tarray[0] = tbList.get(0);\n\t\t\t\tTransactionBean t;\n\t\t\t\tfor(int i = 1; i < tbList.size(); i++) {\n\t\t\t\t\tt = tbList.get(i);\n\t\t\t\t\tString role = t.getRole();\n\t\t\t\t\tint j = 0;\n\t\t\t\t\twhile(array[j] != null && role.compareToIgnoreCase(array[j].getRole()) >= 0)\n\t\t\t\t\t\tj++;\n\t\t\t\t\tfor(int k = i; k > j; k--) {\n\t\t\t\t\t\tarray[k] = array[k-1];\n\t\t\t\t\t}\n\t\t\t\t\tarray[j] = t;\n\t\t\t\t}\n\t\t\t\tint size = tbList.size();\n\t\t\t\tfor(int i = 0; i < size; i++)\n\t\t\t\t\ttbList.set(i, array[i]);\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\treturn tbList;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c6c"},"name":"WebRoot/auth/hcp-uap/editOfficeVisit.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6b"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d25"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d26"}]],"contents":"<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.Map\"%>\n<%@page import=\"java.text.SimpleDateFormat\"%>\n<%@page import=\"java.util.Date\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.EmailUtil\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.OfficeVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LabProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LOINCbean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.DiagnosisBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MedicationBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.EditOfficeVisitAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HospitalBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Document Office Visit\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tString ovIDString = request.getParameter(\"ovID\");\n\n\tString pidString = (String)session.getAttribute(\"pid\");\n\tif (pidString == null || 1 > pidString.length()) {\n\t\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp-uap/editOfficeVisit.jsp?ovID=\" + ovIDString);\n\t   \treturn;\n\t}\n\t//else {\n\t//\tsession.removeAttribute(\"pid\");\n\t//}\n\t\n    EditOfficeVisitAction action = new EditOfficeVisitAction(prodDAO, loggedInMID, pidString, ovIDString);\n\tlong ovID = action.getOvID();\n\tOfficeVisitBean visit = action.getOfficeVisit();\n\tString confirm = \"\";\n\tString warning = \"\";\n\tif (request.getParameter(\"startDate\") != null && request.getParameter(\"endDate\") != null){\n\t\twarning = action.hasInteraction(request.getParameter(\"addMedID\"), pidString, request.getParameter(\"startDate\"), request.getParameter(\"endDate\"));\n\t}\n\t\twarning += action.isAllergyOnList(pidString,request.getParameter(\"addMedID\"));\n\t\n\tif (\"true\".equals(request.getParameter(\"formIsFilled\"))) {\n\t\tEditOfficeVisitForm form = new BeanBuilder<EditOfficeVisitForm>().build(request.getParameterMap(), new EditOfficeVisitForm());\n\t\tif (\"\".equals(warning) || \"true\".equals(request.getParameter(\"checkPresc\"))){\t\t\t\n\t\t\tif (\"true\".equals(request.getParameter(\"checkPresc\"))){\n\t\t\t\tform.setAddMedID(request.getParameter(\"testMed\"));\n\t\t\t\tform.setStartDate(request.getParameter(\"medStart\"));\n\t\t\t\tform.setDosage(request.getParameter(\"medDos\"));\n\t\t\t\tform.setEndDate(request.getParameter(\"medEnd\"));\n\t\t\t\tform.setInstructions(request.getParameter(\"medInst\"));\n\t\t\t\tString problem = action.hasInteraction(request.getParameter(\"testMed\"), pidString, request.getParameter(\"medStart\"), request.getParameter(\"medEnd\"));\n\t\t\t\tproblem += action.isAllergyOnList(pidString,request.getParameter(\"testMed\"));\n\t\t\t\tnew EmailUtil(prodDAO).sendEmail(action.makeEmailApp(loggedInMID,pidString,problem));\n\t\t\t}\n\t\t\t\n\t\t\tform.setHcpID(\"\" + visit.getHcpID());\n\t\t\tform.setPatientID(\"\" + visit.getPatientID());\n\t\t\ttry {\n\t\t\t\tconfirm = action.updateInformation(form);\n\t\t\t}\n\t\t\tcatch (FormValidationException e) {\n\t\t\t\te.printHTML(pageContext.getOut());\n\t\t\t\tconfirm = \"Input not valid\";\n\t\t\t}\n\t\t}\n\t}\n\tOfficeVisitBean ov = action.getOfficeVisit();\n\tList<HospitalBean> hcpHospitals = action.getHospitals(ov.getHcpID());\n\tList <LabProcedureBean> lpBeans = action.getLabProcedures(Long.parseLong(pidString), ovID);\n%>\n\n<div align=center>\n<%\nif (!\"\".equals(confirm)) {\n\tif (request.getParameter(\"checkPresc\").equals(\"false\")){ %>\n\t\t<span class=\"iTrustMessage\">Operation Canceled</span>\n\t<% } else if (\"success\".equals(confirm)) { %>\n\t\t<span class=\"iTrustMessage\">Information Successfully Updated</span>\n<%\t}\n\telse { %>\n\t\t<span class=\"iTrustError\"><%=confirm%></span>\t\t\n<%\t}\n}\t\n%>\n</div>\n\n\n<script type=\"text/javascript\">\n\tfunction removeID(type, value) {\n\t\tdocument.getElementById(type).value = value;\n\t\tdocument.forms[0].submit();\n\t}\n\n\tfunction setVar(){\n\t\tvar medID = document.getElementById(\"addMedID\");\n\t\tvar medIDindex = medID.options.selectedIndex;\n\t\tvar medIDtxt = medID.options[medIDindex].value;\n\t\tvar medDostxt = document.getElementById(\"dosage\").value;\n\t\tvar medStarttxt = document.getElementById(\"startDate\").value;\n\t\tvar medEndtxt = document.getElementById(\"endDate\").value;\n\t\tvar medInsttxt = document.getElementById(\"instructions\").value;\n\t\tdocument.getElementById(\"testMed\").value = medIDtxt;\n\t\tdocument.getElementById(\"medDos\").value = medDostxt;\n\t\tdocument.getElementById(\"medStart\").value = medStarttxt;\n\t\tdocument.getElementById(\"medEnd\").value = medEndtxt;\n\t\tdocument.getElementById(\"medInst\").value = medInsttxt;\n\t\tdocument.forms[0].submit();\n\t}\n\n\tfunction presCont(){\n\t\tdocument.getElementById(\"checkPresc\").value = \"true\";\n\t\tdocument.forms[0].submit();\n\t}\n\n\tfunction presCanc(){\n\t\tvar medID = document.getElementById(\"addMedID\");\n\t\tvar medIDindex = medID.options.selectedIndex;\n\t\tvar medIDtxt = medID.options[medIDindex].value;\n\t\tvar medDostxt = document.getElementById(\"dosage\").value;\n\t\tvar medStarttxt = document.getElementById(\"startDate\").value;\n\t\tvar medEndtxt = document.getElementById(\"endDate\").value;\n\t\tvar medInsttxt = document.getElementById(\"instructions\").value;\n\n\t\tdocument.getElementById(\"testMed\").value = \"\";\n\t\tdocument.getElementById(\"medDos\").value = \"\";\n\t\tdocument.getElementById(\"medStart\").value = \"\";\n\t\tdocument.getElementById(\"medEnd\").value = \"\";\n\t\tdocument.getElementById(\"medInst\").value = \"\";\n\t\tdocument.getElementById(\"checkPresc\").value = \"false\";\n\t\tdocument.forms[0].submit();\n\t}\n\t\n</script>\n\n<form action=\"editOfficeVisit.jsp\" method=\"post\" id=\"mainForm\">\n\t<input type=\"hidden\" name=\"formIsFilled\" value=\"true\" />\n\t<input type=\"hidden\" name=\"ovID\" value=\"<%=ovID%>\" />\n\t<input type=\"hidden\" id=\"removeDiagID\" name=\"removeDiagID\" value=\"\" />\n\t<input type=\"hidden\" id=\"removeMedID\" name=\"removeMedID\" value=\"\" />\n\t<input type=\"hidden\" id=\"removeProcID\" name=\"removeProcID\" value=\"\" />\n\t<input type=\"hidden\" id=\"removeImmunizationID\" name=\"removeImmunizationID\" value=\"\" />\n\t<input type=\"hidden\" id=\"removeLabProcID\" name=\"removeLabProcID\" value=\"\" />\n\t<input type=\"hidden\" id=\"checkPresc\" name=\"checkPresc\" value=\"\" />\n\t<input type=\"hidden\" id=\"testMed\" name=\"testMed\" value=<%=request.getParameter(\"testMed\") %> />\n\t<input type=\"hidden\" id=\"medDos\" name=\"medDos\" value=<%=request.getParameter(\"medDos\") %> />\n\t<input type=\"hidden\" id=\"medStart\" name=\"medStart\" value=<%=request.getParameter(\"medStart\") %> />\n\t<input type=\"hidden\" id=\"medEnd\" name=\"medEnd\" value=<%=request.getParameter(\"medEnd\") %> />\n\t<input type=\"hidden\" id=\"medInst\" name=\"medInst\" value=<%=request.getParameter(\"medInst\") %> />\n\n<div align=center>\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"2\">Office Visit</th>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Patient ID:</td>\n\t\t<td><%=prodDAO.getAuthDAO().getUserName(ov.getPatientID())%> </td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Date of Visit:</td>\n\t\t<td><input name=\"visitDate\" value=\"<%=ov.getVisitDateStr()%>\" /><input type=\"button\" value=\"Select Date\" onclick=\"displayDatePicker('visitDate');\" /></td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Hospital:</td>\n\t\t<td><select name=\"hospitalID\">\n\t\t\t\t<option value=\"\">N/A</option>\n\t\t\t\t<%for(HospitalBean hos : hcpHospitals) {%>\n\t\t\t\t\t<option value=\"<%=hos.getHospitalID()%>\" \n\t\t\t\t\t\t<%=hos.getHospitalID().equals(ov.getHospitalID()) ? \"selected=selected\" : \"\"%> > \n\t\t\t\t\t\t<%=hos.getHospitalName()%>\n\t\t\t\t\t</option>\n\t\t\t\t<%} %>\t\t\t\t\n\t\t\t</select>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Notes:</td>\n\t\t<td><textarea rows=\"4\" style=\"width: 100%;\" name=\"notes\"><%=ov.getNotes()%></textarea></td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" name=\"update\" id=\"update\" value=\"Update\" >\n</div>\n<br /><br />\n<div align=center>\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"6\">Prescriptions</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<td>Medication</td>\n\t\t<td>Dosage</td>\n\t\t<td>Dates</td>\n\t\t<td colspan=2>Instructions</td>\n\t\t<td style=\"width: 60px;\">Action</td>\n\t</tr>\n\t\n\t<%if(ov.getPrescriptions().size()==0){ %>\n\t\t<tr>\n\t\t\t<td colspan=\"6\" style=\"text-align: center;\">No Prescriptions on record</td>\n\t\t</tr>\n\t<%}else{ %>\n\t\t<%for(PrescriptionBean pres : ov.getPrescriptions()){ %>\n\t\t<tr>\n\t\t\t<td align=center><a href=\"./editPrescription.jsp?presID=<%=pres.getId()%>&ovID=<%=ovIDString%>\"><%=pres.getMedication().getDescription()%> (<%=pres.getMedication().getNDCode()%>)</a></td>\n\t\t\t<td align=center><%=pres.getDosage()%>mg</td>\n\t\t\t<td align=center><%=pres.getStartDateStr()%> to <%=pres.getEndDateStr()%></td>\t\t\t\t\t\t\n\t\t\t<td align=center colspan=2><%=pres.getInstructions()%></td>\t\t\t\t\t\t\n\t\t\t<td align=center><a href=\"javascript:removeID('removeMedID','<%=pres.getId()%>');\">Remove</a></td>\n\t\t</tr>\n\t\t<%}\n\t}%>\n\t<tr>\n\t\t<th colspan=\"6\" style=\"text-align: center;\">Add New</th>\n\t</tr>\n\t <tr>\n\t \t<td align=center>\n\t \t\t<select name=\"addMedID\" id=\"addMedID\" style=\"font-size:10px;\">\n\t \t\t\t<option value=\"\"> -- Please Select a Medication -- </option>\n\t \t\t\t<%for(MedicationBean med : prodDAO.getNDCodesDAO().getAllNDCodes()){%>\n\t\t \t\t\t<option value=\"<%=med.getNDCode()%>\"><%=med.getNDCode()%> - <%=med.getDescription()%></option>\n\t\t \t\t\t\t\t\t \t\t\t\n\t \t\t\t<%}%>\n\t \t\t</select>\n\t \t</td>\n\t \t<td align=center>\n\t \t\t<input type=\"text\" name=\"dosage\" id=\"dosage\" maxlength=\"6\" style=\"width: 50px;\"> mg\n\t \t</td>\n\t \t<td align=center colspan=2>\n\t \t\t<input type=\"text\" name=\"startDate\" id=\"startDate\" style=\"width: 80px;\" \n\t \t\t\tonclick=\"displayDatePicker('startDate');\" \n\t \t\t\tonselect=\"displayDatePicker('startDate');\"\n\t \t\t\tvalue=\"<%=new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date())%>\"> \n\t \t\tto \n\t\t\t<input type=\"text\" name=\"endDate\" id=\"endDate\" style=\"width: 80px;\"\n\t\t\t\tonclick=\"displayDatePicker('endDate');\" \n\t \t\t\tonselect=\"displayDatePicker('endDate');\"\n\t \t\t\tvalue=\"<%=new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date())%>\">\n\t \t</td>\n\t \t<td align=center>\n\t \t\t<input type=\"text\" name=\"instructions\" id=\"instructions\" value=\"-- Instructions --\" maxlength=500>\n\t \t</td>\n\t \t<td>\n\t\t \t<input type=\"button\" id=\"addprescription\" onclick=\"setVar()\" value=\"Add Prescription\">\n\t \t</td>\n\t </tr>\n</table>\n<%\nif (!(\"\".equals(warning) )){ %>\n<br/>\n\t<div style=\"background-color:yellow;color:black\" align=\"center\"><%=warning %></div>\n\t<div style=\"background-color:yellow\" align=\"center\"><input type=\"button\" onclick=\"presCont()\" value=\"Continue\" name=\"continue\" id=\"continue\"/>\n\t<input type=\"button\" onclick=\"location.href='/iTrust/auth/hcp-uap/editPHR.jsp'\" value=\"Cancel\" name=\"cancel\" id=\"cancel\"/>\n\t</div><BR>\n<%}; %>\n\n\n</div>\n<br /><br />\n<div align=center>\n\t<table class=\"fTable\" align=\"center\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"5\">Laboratory Procedures</th>\n\t\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>LOINC Code</td>\n\t\t\t\t<td>Status</td>\n\t\t\t\t<td>Commentary</td>\n\t\t\t\t<td>Results</td>\n\t\t\t\t<td style=\"width: 60px;\">Updated Date</td>\n\t\t\t</tr>\n\t\t\t<%if(lpBeans.size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"5\" style=\"text-align: center;\">No Laboratory Procedures on\trecord</td>\n\t\t\t</tr>\n\t\t\t<%} else { %>\n\t\t\t<%for(LabProcedureBean labproc : lpBeans){ %>\n\t\t\t<tr>\n\t\t\t\t<td align=center><%=labproc.getLoinc()%></td>\n\t\t\t\t<td align=center><%=labproc.getStatus()%></td>\n\t\t\t\t<td align=center><%=labproc.getCommentary()%></td>\n\t\t\t\t<td align=center><%=labproc.getResults()%></td>\n\t\t\t\t<td align=center><%=labproc.getTimestamp()%></td>\n\t\t\t\t<td ><a\n\t\t\t\t\thref=\"javascript:removeID('removeLabProcID','<%=labproc.getProcedureID()%>');\">Remove</a></td>\n\t\t\t</tr>\n\t\t\t<%} %>\n\t\t\t<%} %>\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"5\" style=\"text-align: center;\">New</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"5\" align=\"center\">\n\t\t\t\t\t<select name=\"addLabProcID\"\tstyle=\"font-size: 10px;\">\n\t\t\t\t\t\t<option value=\"\">-- Please Select a Procedure --</option>\n\t\t\t\t\t\t\t<% for(LOINCbean loinc : prodDAO.getLOINCDAO().getAllLOINC()) { %>\n\t\t\t\t\t\t<option value=\"<%=loinc.getLabProcedureCode()%>\"> <%=loinc.getLabProcedureCode()%>\n\t\t\t\t\t \t\t- <%=loinc.getComponent()%> - <%=loinc.getKindOfProperty()%> - <%=loinc.getTimeAspect()%>\n\t\t\t\t\t \t\t- <%=loinc.getSystem()%> - <%=loinc.getScaleType()%> \n\t\t\t\t\t \t\t- <%=loinc.getMethodType()%></option>\n\t\t\t\t\t\t\t<% } %>\n\t\t\t\t\t</select>\n\t\t\t\t\t<input\ttype=\"submit\" name=\"addLP\" value=\"Add Lab Procedure\" >\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n<br /><br />\n<div align=center>\n\t<div style=\"display: inline-table; margin-right:10px;\">\n\t\t<table class=\"fTable\" align=\"center\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"3\">Diagnoses</th>\n\t\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>ICD Code</td>\n\t\t\t\t<td>Description</td>\n\t\t\t\t<td style=\"width: 60px;\">Action</td>\n\t\t\t</tr>\n\n\t\t\t<%if(ov.getDiagnoses().size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td  colspan=\"3\" style=\"text-align: center;\">No Diagnoses on record</td>\n\t\t\t</tr>\n\t\t\t<%} else { \n\t\t\t\t\tfor(DiagnosisBean d : ov.getDiagnoses()) { %>\n\t\t\t<tr>\n\t\t\t\t<td align=center><%=d.getICDCode()%></td>\n\t\t\t\t<td ><%=d.getDescription()%></td>\n\t\t\t\t<td ><a\n\t\t\t\t\thref=\"javascript:removeID('removeDiagID','<%=d.getOvDiagnosisID()%>');\">Remove</a></td>\n\t\t\t</tr>\n\t\t\t<%\t\t}\n\t\t\t\t}%>\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"3\" style=\"text-align: center;\">New</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"3\" align=center><select name=\"addDiagID\" style=\"font-size:10\">\n\t\t\t\t\t<option value=\"\">-- None Selected --</option>\n\t\t\t\t\t<%for(DiagnosisBean diag : prodDAO.getICDCodesDAO().getAllICDCodes()) { %>\n\t\t\t\t\t<option value=\"<%=diag.getICDCode()%>\"><%=diag.getICDCode()%>\n\t\t\t\t\t- <%=diag.getDescription()%></option>\n\t\t\t\t\t<%}%>\n\t\t\t\t\t</select>\n\t\t\t\t\t<input type=\"submit\" value=\"Add Diagnosis\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n\t<div style=\"display: inline-table; margin-right:10px;\">\n\t\t<table class=\"fTable\" align=\"center\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"3\">Procedures</th>\n\t\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>CPT Code</td>\n\t\t\t\t<td>Description</td>\n\t\t\t\t<td style=\"width: 60px;\">Action</td>\n\t\t\t</tr>\n\t\t\t<% if (0 == ov.getProcedures().size()) { %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"3\" style=\"text-align: center;\">No Procedures on record</td>\n\t\t\t</tr>\n\t\t\t<% } \n\t\t\t   else { %>\n\t\t\t<% for (ProcedureBean proc : ov.getProcedures()) { \n\t\t\t\tif (null == proc.getAttribute() || !proc.getAttribute().equals(\"immunization\")) {%>\n\t\t\t<tr>\n\t\t\t\t<td align=\"center\"><%=proc.getCPTCode()%></td>\n\t\t\t\t<td ><%=proc.getDescription()%></td>\n\t\t\t\t<td ><a href=\"javascript:removeID('removeProcID','<%=proc.getOvProcedureID()%>');\">Remove</a></td>\n\t\t\t</tr>\n\t\t\t<% } } } %>\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"3\" style=\"text-align: center;\">New</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"3\" align=\"center\">\n\t\t\t\t\t<select name=\"addProcID\" style=\"font-size: 10px;\">\n\t\t\t\t\t\t<option value=\"\">-- Please Select a Procedure --</option>\n\t\t\t\t\t\t<% for (ProcedureBean proc : prodDAO.getCPTCodesDAO().getAllCPTCodes()) {\n\t\t\t\t\t\t\tif (null == proc.getAttribute() || !proc.getAttribute().equals(\"immunization\")) { %>\n\t\t\t\t\t\t<option value=\"<%=proc.getCPTCode() %>\"><%=proc.getCPTCode() %> - <%=proc.getDescription() %></option>\n\t\t\t\t\t\t<% } } %>\n\t\t\t\t\t</select>\n\t\t\t\t\t<input type=\"submit\" name=\"addP\" value=\"Add Procedure\" >\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n\t<div style=\"display: inline-table;\">\n\t\t<table class=\"fTable\" align=\"center\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"3\">Immunizations</th>\n\t\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>CPT Code</td>\n\t\t\t\t<td>Description</td>\n\t\t\t\t<td style=\"width: 60px;\">Action</td>\n\t\t\t</tr>\n\t\t\t<% if (0 == ov.getProcedures().size()) { %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"3\" style=\"text-align: center;\">No immunizations on record</td>\n\t\t\t</tr>\n\t\t\t<% } \n\t\t\t   else { %>\n\t\t\t<%\tfor (ProcedureBean proc : ov.getProcedures()) { \n\t\t\t\t\tif (null != proc.getAttribute() && proc.getAttribute().equals(\"immunization\")) { %>\n\t\t\t<tr>\n\t\t\t\t<td align=\"center\"><%=proc.getCPTCode()%></td>\n\t\t\t\t<td ><%=proc.getDescription()%></td>\n\t\t\t\t<td ><a href=\"javascript:removeID('removeImmunizationID','<%=proc.getOvProcedureID()%>');\">Remove</a></td>\n\t\t\t</tr>\n\t\t\t<% } } } %>\n\t\t\t<tr >\n\t\t\t\t<th colspan=\"3\" style=\"text-align: center;\">New</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"3\" align=\"center\">\n\t\t\t\t\t<select name=\"addImmunizationID\" style=\"font-size: 10px;\">\n\t\t\t\t\t\t<option value=\"\">-- Please Select a Procedure --</option>\n\t\t\t\t\t\t<% for (ProcedureBean proc : prodDAO.getCPTCodesDAO().getImmunizationCPTCodes()) {%>\n\t\t\t\t\t\t\t<option value=\"<%=proc.getCPTCode()%>\"><%=proc.getCPTCode()%> - <%=proc.getDescription()%></option>\n\t\t\t\t\t\t<% } %>\n\t\t\t\t\t</select>\n\t\t\t\t\t<input type=\"submit\" name=\"addImmu\" value=\"Add Immunization\" >\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n</div>\n\n<br /><br /><br />\n<itrust:patientNav />\n<br />\n\n</form>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c6d"},"name":"src/edu/ncsu/csc/itrust/action/EditOfficeVisitAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6b"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d25"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d26"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d28"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.HospitalBean;\nimport edu.ncsu.csc.itrust.beans.LabProcedureBean;\nimport edu.ncsu.csc.itrust.beans.MedicationBean;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.DrugInteractionBean;\nimport edu.ncsu.csc.itrust.beans.AllergyBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionReportBean;\nimport edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator;\n\n/**\n * Edits the office visits of a patient Used by editOfficeVisit.jsp\n * \n * @author laurenhayward\n * \n */\npublic class EditOfficeVisitAction extends OfficeVisitBaseAction {\n\tprivate EditOfficeVisitValidator validator = new EditOfficeVisitValidator();\n\tprivate PersonnelDAO personnelDAO;\n\tprivate HospitalsDAO hospitalDAO;\n\tprivate OfficeVisitDAO ovDAO;\n\tprivate LabProcedureDAO lpDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate DrugInteractionDAO drugDAO;\n\tprivate AllergyDAO allergyDAO;\n\tprivate PatientDAO patDAO;\n\tprivate NDCodesDAO ndcDAO;\n\tprivate long loggedInMID;\n\tprivate long pid;\n\n\t/**\n\t * Used to identify the subactions that can comprise an office visit action.\n\t * Subactions help direct the action's logic because sometimes multiple \n\t * office visit actions can occur within one transaction.\n\t */\n\tprivate enum OVSubAction {\n\t\tADD_DIAGNOSIS,\n\t\tREMOVE_DIAGNOSIS,\n\t\tADD_PROCEDURE,\n\t\tREMOVE_PROCEDURE,\n\t\tADD_MEDICATION,\n\t\tREMOVE_MEDICATION,\n\t\tADD_LAB_PROCEDURE,\n\t\tREMOVE_LAB_PROCEDURE,\n\t\tADD_IMMUNIZATION,\n\t\tREMOVE_IMMUNIZATION\n\t};\n\n\t/**\n\t * Patient id and office visit id validated by super class\n\t * \n\t * @param factory The DAOFactory to be used in creating the DAOs for this action.\n\t * @param loggedInMID The MID of the user who is authorizing this action.\n\t * @param pidString The patient who this action is performed on.\n\t * @param ovIDString The ID of the office visit in play.\n\t * @throws iTrustException\n\t */\n\tpublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString)\n\t\t\tthrows iTrustException {\n\t\tsuper(factory, pidString, ovIDString);\n\t\tpid = Long.parseLong(pidString);\n\t\tovDAO = factory.getOfficeVisitDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.hospitalDAO = factory.getHospitalsDAO();\n\t\tthis.lpDAO = factory.getLabProcedureDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.drugDAO = factory.getDrugInteractionDAO();\n\t\tthis.allergyDAO = factory.getAllergyDAO();\n\t\tthis.ndcDAO = factory.getNDCodesDAO();\n\t\tthis.patDAO = factory.getPatientDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\n\t/**\n\t * Returns the office visit bean for the office visit\n\t * \n\t * @return the OfficeVisitBean of the office visit\n\t * @throws iTrustException\n\t */\n\tpublic OfficeVisitBean getOfficeVisit() throws iTrustException {\n\t\tOfficeVisitBean officeVisit = ovDAO.getOfficeVisit(ovID);\n\t\ttransDAO.logTransaction(TransactionType.VIEW_OFFICE_VISIT, loggedInMID, pid, \"EditOffceVisit - View office visits\");\n\t\treturn officeVisit;\n\t}\n\t\n\t/**\n\t * Returns a list of the lab procedures that have been done in an office visit.\n\t * \n\t * @param mid the doctor the visit was with\n\t * @param ovid the office visit's id\n\t * @return a list of the lab procedures that were done in that visit\n\t * @throws DBException\n\t */\n\n\tpublic List<LabProcedureBean> getLabProcedures(long mid, long ovid) throws DBException {\n\t\ttransDAO.logTransaction(TransactionType.VIEW_LAB_PROCEDURE, loggedInMID, pid, \"EditOffceVisit - View lab procedures\");\n\t\treturn lpDAO.getAllLabProceduresForDocOV(mid, ovid);\n\t}\n\n\t/**\n\t * This is a list of all hospitals, ordered by the office visit's hcp FIRST\n\t * \n\t * @param hcpID\n\t * @return\n\t * @throws iTrustException\n\t */\n\tpublic List<HospitalBean> getHospitals(long hcpID) throws iTrustException {\n\t\tList<HospitalBean> hcpsHospitals = personnelDAO.getHospitals(hcpID);\n\t\tList<HospitalBean> allHospitals = hospitalDAO.getAllHospitals();\n\t\treturn combineLists(hcpsHospitals, allHospitals);\n\t}\n\n\t\n\t/**\n\t * Combines two lists of hospitals\n\t * \n\t * @param hcpsHospitals hospitals the HCP is assigned to\n\t * @param allHospitals all hopsitals\n\t * @return the combined list\n\t */\n\tprivate List<HospitalBean> combineLists(List<HospitalBean> hcpsHospitals, List<HospitalBean> allHospitals) {\n\t\tfor (HospitalBean hos : allHospitals) {\n\t\t\tif (!hcpsHospitals.contains(hos))\n\t\t\t\thcpsHospitals.add(hos);\n\t\t}\n\t\treturn hcpsHospitals;\n\t}\n\n\t/**\n\t * Updates the office visit with information from the form passed in\n\t * \n\t * @param form\n\t *            information to update\n\t * @return \"success\" or exception's message\n\t * @throws FormValidationException\n\t */\n\tpublic String updateInformation(EditOfficeVisitForm form) throws FormValidationException {\n\t\tString confirm = \"\";\n\t\ttry {\n\t\t\tcheckAddSubAction(OVSubAction.ADD_DIAGNOSIS, form.getAddDiagID(), ovID, null);\n\t\t\tcheckAddSubAction(OVSubAction.ADD_PROCEDURE, form.getAddProcID(), ovID, null);\n\t\t\tcheckAddSubAction(OVSubAction.ADD_IMMUNIZATION, form.getAddImmunizationID(), ovID, null, form.getHcpID());\n\t\t\tcheckAddSubAction(OVSubAction.ADD_LAB_PROCEDURE, form.getAddLabProcID(), ovID, null);\n\t\t\tcheckAddPrescription(form, ovID);\n\t\t\tcheckRemoveSubAction(OVSubAction.REMOVE_DIAGNOSIS, form.getRemoveDiagID());\n\t\t\tcheckRemoveSubAction(OVSubAction.REMOVE_LAB_PROCEDURE, form.getRemoveLabProcID());\n\t\t\tcheckRemoveSubAction(OVSubAction.REMOVE_PROCEDURE, form.getRemoveProcID());\n\t\t\tcheckRemoveSubAction(OVSubAction.REMOVE_IMMUNIZATION, form.getRemoveImmunizationID());\n\t\t\tcheckRemoveSubAction(OVSubAction.REMOVE_MEDICATION, form.getRemoveMedID());\n\t\t\tupdateOv(form);\n\t\t\ttransDAO.logTransaction(TransactionType.DOCUMENT_OFFICE_VISIT, loggedInMID, getOfficeVisit().getPatientID(), \"EditOfficeVisit - edited office visit \" + ovID);\n\t\t\tconfirm = \"success\";\n\t\t\treturn confirm;\n\t\t} catch (iTrustException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\t\n\tpublic String hasInteraction(String drug, String pid, String startdate, String enddate) throws iTrustException{\n\t\tString response = \"\";\n\t\ttry {\n\n\t\t\tSimpleDateFormat original = new SimpleDateFormat(\"MM/dd/yyyy\");\n\t\t\tSimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\n\t\t\t\n\t\t\tDate start = original.parse(startdate);\n\t\t\tstartdate = needed.format(start);\n\t\t\tDate end = original.parse(enddate);\n\t\t\tenddate = needed.format(end);\n\t\t\t\n\t\t\t\n\t\t\tstartdate = startdate.replaceAll(\"/\", \"-\");\n\t\t\tenddate = enddate.replaceAll(\"/\", \"-\");\n\t\t\tList<PrescriptionReportBean> prBeanList = ovDAO.getPrescriptionReportsByDate(Long.parseLong(pid), startdate, enddate);\n\t\t\tList<DrugInteractionBean> dBeanList = drugDAO.getInteractions(drug);\n\t\t\tfor (PrescriptionReportBean prBean : prBeanList){\n\t\t\t\tString presDrug = prBean.getPrescription().getMedication().getNDCode();\n\t\t\t\tfor (DrugInteractionBean dBean : dBeanList){\n\t\t\t\t\tString intDrug1 = dBean.getFirstDrug();\n\t\t\t\t\tString intDrug2 = dBean.getSecondDrug();\n\t\t\t\t\t\n\t\t\t\t\tif (presDrug.equals(intDrug1) && drug.equals(intDrug2)){\n\t\t\t\t\t\tresponse += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \n\t\t\t\t\t\t\". Start Date: \" + prBean.getPrescription().getStartDateStr() \n\t\t\t\t\t\t+ \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\n\t\t\t\t\t\tresponse += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode((dBean.getSecondDrug())).getDescription() + \". \";\n\t\t\t\t\t\tresponse += \"Description: \" + dBean.getDescription() + \"  \";\n\t\t\t\t\t} else if (presDrug.equals(intDrug2) && drug.equals(intDrug1)){\n\t\t\t\t\t\tresponse += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() \n\t\t\t\t\t\t+ \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\n\t\t\t\t\t\tresponse += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode(dBean.getFirstDrug()).getDescription() + \". \";\n\t\t\t\t\t\tresponse += \"Description: \" + dBean.getDescription() + \"  \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (DBException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t} catch (ParseException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t}\n\t\treturn response;\n\t}\n\t\n\tpublic String  isAllergyOnList(String patMID, String ndcode) throws iTrustException{\n\t\tString response = \"\";\n\t\ttry {\n\t\t\tList<AllergyBean> allergyList = allergyDAO.getAllergies(Long.parseLong(patMID));\n\t\t\tif (allergyList.isEmpty()) return response;\n\t\t\tMedicationBean medBean = ndcDAO.getNDCode(ndcode);\n\t\t\tif(medBean == null) return response;\n\t\t\tString newDrug = medBean.getDescription();\n\t\t\tfor (AllergyBean allergyBean : allergyList){\n\t\t\t\tString currentAllerDrug = allergyBean.getDescription();\n\t\t\t\t//Allergy: Aspirin. First Found: 12/20/2008. \n\t\t\t\tif (newDrug.equals(currentAllerDrug)){\n\t\t\t\t\tresponse += \"Allergy: \" + newDrug + \". First Found: \" + allergyBean.getFirstFoundStr();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (DBException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t}\n\t\treturn response;\n\t}\n\t\n\t/**\n\t * \n\t * Sends e-mail regarding the prescribed dangerous drug.\n\t * \n\t * @param hcpID HCP the prescription is made by\n\t * @param patID ID of the patient prescription is for\n\t * @param problem The allergy and/or interaction that is the problem\n\t * @return the sent e-mail\n\t * @throws DBException\n\t */\t\n\tpublic Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {\n\t\tPatientBean p = patDAO.getPatient(Long.parseLong(patID));\n\t\tString hcpName = personnelDAO.getName(hcpID);\n\t\tEmail email = new Email();\n\t\temail.setFrom(\"no-reply@itrust.com\");\n\t\temail.setToList(Arrays.asList(p.getEmail()));\n\t\temail.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\n\t\temail.setBody(String\n\t\t\t\t.format(\n\t\t\t\t\t\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\",\n\t\t\t\t\thcpName, problem));\n\t\treturn email;\n\t}\n\t\n/**\n * Adds a prescription to an office visit\n * \n * @param form the information about the prescription\n * @param ovID the id for the office visit\n * @throws DBException\n * @throws FormValidationException\n */\n\t\n\tprivate void checkAddPrescription(EditOfficeVisitForm form, long ovID) throws DBException,\n\t\t\tFormValidationException {\n\t\tif (form.getAddMedID() != null && !\"\".equals(form.getAddMedID())) {\n\t\t\tnew EditOfficeVisitValidator(true).validate(form);\n\t\t\tPrescriptionBean pres = new PrescriptionBean();\n\t\t\tpres.setDosage(Integer.valueOf(form.getDosage()));\n\t\t\tpres.setEndDateStr(form.getEndDate());\n\t\t\tpres.setStartDateStr(form.getStartDate());\n\t\t\tpres.setInstructions(form.getInstructions());\n\t\t\tMedicationBean med = new MedicationBean();\n\t\t\tmed.setNDCode(form.getAddMedID());\n\t\t\tpres.setMedication(med);\n\t\t\tpres.setVisitID(ovID);\n\t\t\ttransDAO.logTransaction(TransactionType.ADD_PRESCRIPTION, loggedInMID, pid, \"EditOffceVisit - Add prescription - \" + pres.getMedication().getNDCode());\n\t\t\tovDAO.addPrescription(pres);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the office visit.\n\t * \n\t * @param form form with all the information\n\t * @throws DBException\n\t * @throws FormValidationException\n\t */\n\tprivate void updateOv(EditOfficeVisitForm form) throws DBException, FormValidationException {\n\t\tvalidator.validate(form);\n\t\tOfficeVisitBean ov = new OfficeVisitBean(ovID);\n\t\tov.setNotes(form.getNotes());\n\t\tov.setVisitDateStr(form.getVisitDate());\n\t\tov.setHcpID(Long.valueOf(form.getHcpID()));\n\t\tov.setPatientID(Long.valueOf(form.getPatientID()));\n\t\tov.setHospitalID(form.getHospitalID());\n\t\ttransDAO.logTransaction(TransactionType.UPDATE_OFFICE_VISIT, loggedInMID, pid, \"EditOffceVisit - Update office visit\");\n\t\tovDAO.update(ov);\n\t}\n\n\t\n\t/**\n\t * Adds a diagnosis or a procedure to an office visit\n\t * \n\t * @param action the type of action to add\n\t * @param code the CPT code of the action\n\t * @param visitID the office visit to add the action to\n\t * @param dateOfDeath the date of death, if needed\n\t * @return true if the operation completed; false if the code was null\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\t\n\tprivate boolean checkAddSubAction(OVSubAction action, String code, long visitID, String dateOfDeath)\n\t\t\tthrows DBException, iTrustException {\n\t\tif (code == null || \"\".equals(code)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tswitch (action) {\n\t\t\tcase ADD_DIAGNOSIS:\n\t\t\t\tovDAO.addDiagnosisToOfficeVisit(Double.valueOf(code), visitID);\n\t\t\t\tbreak;\n\t\t\tcase ADD_IMMUNIZATION:\n\t\t\tcase ADD_PROCEDURE:\n\t\t\t\tovDAO.addProcedureToOfficeVisit(code, visitID, \"\");\n\t\t\t\tbreak;\n\t\t\tcase ADD_LAB_PROCEDURE:\n\t\t\t\tovDAO.addLabProcedureToOfficeVisit(code, visitID, pid);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tprivate boolean checkAddSubAction(OVSubAction action, String code, long visitID, String dateOfDeath, String hcpid)\n\tthrows DBException, iTrustException {\n\t\tif (code == null || \"\".equals(code)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tovDAO.addProcedureToOfficeVisit(code, visitID, hcpid);\n\t\t\treturn true;\n\t\t}\n\t }\n\t\n\t/**\n\t * Removes an action from an office visit\n\t * \n\t * @param action type of action to remove\n\t * @param input id for the action to remove\n\t * @return true if the operation completed; false if the code was null\n\t * @throws DBException\n\t */\n\n\tprivate boolean checkRemoveSubAction(OVSubAction action, String input) throws DBException {\n\t\tif (input == null || \"\".equals(input))\n\t\t\treturn false;\n\t\tlong removeID;\n\t\ttry {\n\t\t\tremoveID = Long.valueOf(input);\n\t\t} catch (NumberFormatException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t\tswitch (action) {\n\t\tcase REMOVE_DIAGNOSIS:\n\t\t\tovDAO.removeDiagnosisFromOfficeVisit(removeID);\n\t\t\tbreak;\n\t\tcase REMOVE_IMMUNIZATION:\n\t\tcase REMOVE_PROCEDURE:\n\t\t\tovDAO.removeProcedureFromOfficeVisit(removeID);\n\t\t\tbreak;\n\t\tcase REMOVE_MEDICATION:\n\t\t\tovDAO.removePrescription(removeID);\n\t\t\tbreak;\n\t\tcase REMOVE_LAB_PROCEDURE:\n\t\t\tovDAO.removeLabProcedureFromOfficeVisit(removeID);\n\t\t\tbreak;\n\t\t}\n\t\treturn true;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c6e"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/AllergyDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6b"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c6f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb0"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d25"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d52"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.AllergyBean;\nimport edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class AllergyDAO {\n\tprivate DAOFactory factory;\n\tprivate AllergyBeanLoader allergyBeanLoader = new AllergyBeanLoader();\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic AllergyDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns a list of patient's allergies.\n\t * @param pid A long for the MID of the patient we are looking up.\n\t * @return A java.util.List of AllergyBeans associated with this patient.\n\t * @throws DBException\n\t */\n\tpublic List<AllergyBean> getAllergies(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Allergies WHERE PatientID=? ORDER BY FirstFound DESC\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn allergyBeanLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds an allergy to this patient's list.\n\t * @param pid The MID of the patient whose allergy we are adding.\n\t * @param description The name of the allergen.\n\t * @throws DBException\n\t */\n\tpublic void addAllergy(long pid, String description) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO Allergies(PatientID, Description) VALUES (?,?)\");\n\t\t\tps.setLong(1, pid);\n\t\t\tps.setString(2, description);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c71"},"name":"WebRoot/auth/tester/home.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c70"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.enums.TransactionType\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.OperationalProfile\"%>\n<%@page import=\"java.text.NumberFormat\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Tester Home\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<div style=\"text-align: center;\">\n<h1>Operational Profile</h1>\n<%\n\ttry {\n\t\tOperationalProfile op = prodDAO.getTransactionDAO().getOperationalProfile();\n\t\t\n\t\tNumberFormat formatter = NumberFormat.getPercentInstance();\n\t\t\n%>\n\n<table class=\"fancyTable\" align=\"center\" border=1 cellpadding=2 cellspacing=2>\n\t<tr>\n\t\t<th>Operation</th>\n\t\t<th colspan=2 >Total</th>\n\t\t<th colspan=2 >Patients Only</th>\n\t\t<th colspan=2 >Personnel Only</th>\n\t</tr>\n<%\n\tint i = 1;\n\tfor (TransactionType type : TransactionType.values()) {\n%>\n\t<tr <%= (i++%2 == 0)?\" class=\\\"alt\\\"\":\"\" %>>\n\t\t<td align=left><%=type.getDescription()%></td>\n\t\t<td align=center><%=op.getTotalCount().get(type)%></td>\n\t\t<td align=center><%=formatter.format((double)op.getTotalCount().get(type) / op.getNumTotalTransactions())%></td>\n\t\t<td align=center><%=op.getPatientCount().get(type)%></td>\n\t\t<td align=center><%=formatter.format((double)op.getPatientCount().get(type) / op.getNumPatientTransactions())%></td>\n\t\t<td align=center><%=op.getPersonnelCount().get(type)%></td>\n\t\t<td align=center><%=formatter.format((double)op.getPersonnelCount().get(type) / op.getNumPersonnelTransactions())%></td>\n\t</tr>\n<%\n\t}\n%>\n\t<tr>\n\t\t<td><b>Totals</b></td>\n\t\t<td colspan=2 align=center><%=op.getNumTotalTransactions()%></td>\n\t\t<td colspan=2 align=center><%=op.getNumPatientTransactions()%></td>\n\t\t<td colspan=2 align=center><%=op.getNumPersonnelTransactions()%></td>\n\t</tr>\n</table>\n\n</div>\n\n<%\n\t} catch (Exception e) {\n%>\n\t<span >Exception Occurred</span>\n\t<br />\n\t<%=e.getMessage()%>\n<%\ne.printStackTrace();\n}\n%>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c73"},"name":"src/edu/ncsu/csc/itrust/action/EditRepresentativesAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c72"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d19"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.action.base.PatientBaseAction;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Edits a patient's personal representatives. Used by hcp/editRepresentatives.jsp\n * \n * @author laurenhayward\n * \n */\npublic class EditRepresentativesAction extends PatientBaseAction {\n\tprivate PatientDAO patientDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Super class validates the patient mid\n\t * \n\t * @param factory The DAOFactory used in creating the DAOs for this action.\n\t * @param loggedInMID The MID of the patient editing his/her representatives.\n\t * @param pidString The MID of the representative in question.\n\t * @throws iTrustException\n\t */\n\tpublic EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString)\n\t\t\tthrows iTrustException {\n\t\tsuper(factory, pidString);\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t}\n\n\t/**\n\t * Return a list of patients that pid represents\n\t * \n\t * @param pid The id of the personnel we are looking up representees for.\n\t * @return a list of PatientBeans\n\t * @throws iTrustException\n\t */\n\tpublic List<PatientBean> getRepresented(long pid) throws iTrustException {\n\t\treturn patientDAO.getRepresented(pid);\n\t}\n\n\t/**\n\t * Makes the patient (pid) represent the input mid parameter\n\t * \n\t * @param pidString\n\t *            the mid of the person who will be represented (the representee)\n\t * @return a message\n\t * @throws iTrustException\n\t */\n\tpublic String addRepresentative(String pidString) throws iTrustException {\n\t\ttry {\n\t\t\tlong representee = Long.valueOf(pidString);\n\t\t\tif (authDAO.getUserRole(representee) != Role.PATIENT)\n\t\t\t\tthrow new iTrustException(\"This user is not a patient!\");\n\t\t\telse if (super.pid == representee)\n\t\t\t\tthrow new iTrustException(\"This user cannot represent themselves.\");\n\n\t\t\tboolean confirm = patientDAO.addRepresentative(pid, representee);\n\t\t\tif (confirm) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, \"patient \"\n\t\t\t\t\t\t+ pid + \" now represents patient \" + representee);\n\t\t\t\treturn \"Patient represented\";\n\t\t\t} else\n\t\t\t\treturn \"No change made\";\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn \"MID not a number\";\n\t\t}\n\t}\n\n\t/**\n\t * Makes the patient (pid) no longer represent the input mid param\n\t * \n\t * @param input\n\t *            the mid of the person be represented (representee)\n\t * @return a message\n\t * @throws iTrustException\n\t */\n\tpublic String removeRepresentative(String input) throws iTrustException {\n\t\ttry {\n\t\t\tlong representee = Long.valueOf(input);\n\t\t\tboolean confirm = patientDAO.removeRepresentative(pid, representee);\n\t\t\tif (confirm) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, \"patient \"\n\t\t\t\t\t\t+ pid + \" no longer represents patient \" + representee);\n\t\t\t\treturn \"Patient represented\";\n\t\t\t} else\n\t\t\t\treturn \"No change made\";\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn \"MID not a number\";\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c74"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/PatientDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c72"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca2"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cab"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb0"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cdb"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cec"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf5"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cfc"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d01"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d04"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d14"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d19"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1a"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d23"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d28"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d41"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d48"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4b"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Vector;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\nimport edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.PatientLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader;\nimport edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.DateUtil;\n\n/**\n * Used for managing all static information related to a patient. For other information related to all aspects\n * of patient care, see the other DAOs.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class PatientDAO {\n\tprivate DAOFactory factory;\n\tprivate PatientLoader patientLoader;\n\tprivate PersonnelLoader personnelLoader;\n\tprivate DiagnosisBeanLoader diagnosisLoader;\n\tprivate PrescriptionBeanLoader prescriptionLoader;\n\tprivate ProcedureBeanLoader procedureLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic PatientDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tthis.patientLoader = new PatientLoader();\n\t\tthis.personnelLoader = new PersonnelLoader();\n\t\tthis.diagnosisLoader = new DiagnosisBeanLoader(true);\n\t\tthis.prescriptionLoader = new PrescriptionBeanLoader();\n\t\tthis.procedureLoader = new ProcedureBeanLoader(true);\n\t}\n\n\t/**\n\t * Returns the name for the given MID\n\t * \n\t * @param mid The MID of the patient in question.\n\t * @return A String representing the patient's first name and last name.\n\t * @throws iTrustException\n\t * @throws DBException\n\t */\n\tpublic String getName(long mid) throws iTrustException, DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT firstName, lastName FROM Patients WHERE MID=?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs;\n\t\t\trs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\treturn rs.getString(\"firstName\") + \" \" + rs.getString(\"lastName\");\n\t\t\t} else {\n\t\t\t\tthrow new iTrustException(\"User does not exist\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO\n\t * \n\t * @param mid The MID of the patient in question.\n\t * @param role A String representing the role of the patient.\n\t * @return A String representing the patient's role.\n\t * @throws iTrustException\n\t * @throws DBException\n\t */\n\tpublic String getRole(long mid, String role) throws iTrustException, DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT role FROM Users WHERE MID=? AND Role=?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tps.setString(2, role);\n\t\t\tResultSet rs;\n\t\t\trs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\treturn rs.getString(\"role\");\n\t\t\t} else {\n\t\t\t\tthrow new iTrustException(\"User does not exist with the designated role\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds an empty patient to the table, returns the new MID\n\t * \n\t * @return The MID of the patient as a long.\n\t * @throws DBException\n\t */\n\tpublic long addEmptyPatient() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO Patients(MID) VALUES(NULL)\");\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the patient's information for a given ID\n\t * \n\t * @param mid The MID of the patient to retrieve.\n\t * @return A PatientBean representing the patient.\n\t * @throws DBException\n\t */\n\tpublic PatientBean getPatient(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Patients WHERE MID = ?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t// pdao.logTransaction(type, loggedInMID, secondaryMID, addedInfo)\n\t\t\tif (rs.next()) {\n\t\t\t\treturn patientLoader.loadSingle(rs);\n\t\t\t} else\n\t\t\t\treturn null;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a patient's information for the given MID\n\t * \n\t * @param p The patient bean representing the new information for the patient.\n\t * @throws DBException\n\t */\n\tpublic void editPatient(PatientBean p) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE Patients SET firstName=?,lastName=?,email=?,\"\n\t\t\t\t\t+ \"address1=?,address2=?,city=?,state=?,zip1=?, zip2=?,phone1=?,phone2=?,phone3=?,\"\n\t\t\t\t\t+ \"eName=?,ePhone1=?,ePhone2=?,ePhone3=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\"\n\t\t\t\t\t+ \"ICState=?,iCZip1=?, iCZip2=?, iCPhone1=?,iCPhone2=?,iCPhone3=?,iCID=?,DateOfBirth=?,\"\n\t\t\t\t\t+ \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\"\n\t\t\t\t\t+ \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, MessageFilter=? WHERE MID=?\");\n\t\t\tpatientLoader.loadParameters(ps, p);\n\t\t\tps.setLong(40, p.getMID());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether or not the patient exists\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A boolean indicating whether the patient exists.\n\t * @throws DBException\n\t */\n\tpublic boolean checkPatientExists(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Patients WHERE MID=?\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn rs.next();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of HCPs who are declared by the given patient\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of Personnel Beans.\n\t * @throws DBException\n\t */\n\tpublic List<PersonnelBean> getDeclaredHCPs(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM DeclaredHCP, Personnel \"\n\t\t\t\t\t+ \"WHERE PatientID=? AND Personnel.MID=DeclaredHCP.HCPID\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn personnelLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Declares an HCP for a particular patient\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @param hcpID The HCP's MID.\n\t * @return A boolean as to whether the insertion was successful.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean declareHCP(long pid, long hcpID) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO DeclaredHCP(PatientID, HCPID) VALUES(?,?)\");\n\t\t\tps.setLong(1, pid);\n\t\t\tps.setLong(2, hcpID);\n\t\t\treturn 1 == ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"HCP \" + hcpID + \" has already been declared for patient \" + pid);\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Undeclare an HCP for a given patient\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @param hcpID The MID of the HCP in question.\n\t * @return A boolean indicating whether the action was successful.\n\t * @throws DBException\n\t */\n\tpublic boolean undeclareHCP(long pid, long hcpID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM DeclaredHCP WHERE PatientID=? AND HCPID=?\");\n\t\t\tps.setLong(1, pid);\n\t\t\tps.setLong(2, hcpID);\n\t\t\treturn 1 == ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Check if a patient has declared the given HCP\n\t * \n\t * @param pid The MID of the patient in question as a long.\n\t * @param hcpid The MID of the HCP in question as a long.\n\t * @return\n\t * @throws DBException\n\t */\n\tpublic boolean checkDeclaredHCP(long pid, long hcpid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM DeclaredHCP WHERE PatientID=? AND HCPID=?\");\n\t\t\tps.setLong(1, pid);\n\t\t\tps.setLong(2, hcpid);\n\t\t\treturn ps.executeQuery().next();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of patients that the given patient represents\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of PatientBeans\n\t * @throws DBException\n\t */\n\tpublic List<PatientBean> getRepresented(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT Patients.* FROM Representatives, Patients \"\n\t\t\t\t\t+ \"WHERE RepresenterMID=? AND RepresenteeMID=Patients.MID\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn patientLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of patients that the given patient is represented by\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of PatientBeans.\n\t * @throws DBException\n\t */\n\tpublic List<PatientBean> getRepresenting(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT Patients.* FROM Representatives, Patients \"\n\t\t\t\t\t+ \"WHERE RepresenteeMID=? AND RepresenterMID=Patients.MID\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn patientLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Check if the given representer represents the representee\n\t * \n\t * @param representer The MID of the representer in question.\n\t * @param representee The MID of the representee in question.\n\t * @return A boolean indicating whether represenation is in place.\n\t * @throws DBException\n\t */\n\tpublic boolean represents(long representer, long representee) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\n\t\t\tps.setLong(1, representer);\n\t\t\tps.setLong(2, representee);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn rs.next();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Assign a representer to the representee\n\t * \n\t * @param representer The MID of the representer as a long.\n\t * @param representee The MID of the representee as a long.\n\t * @return A boolean as to whether the insertion was correct.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean addRepresentative(long representer, long representee) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"INSERT INTO Representatives(RepresenterMID,RepresenteeMID) VALUES (?,?)\");\n\t\t\tps.setLong(1, representer);\n\t\t\tps.setLong(2, representee);\n\t\t\treturn 1 == ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"Patient \" + representer + \" already represents patient \"\n\t\t\t\t\t\t+ representee);\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Unassign the representation\n\t * \n\t * @param representer The MID of the representer in question.\n\t * @param representee The MID of the representee in question.\n\t * @return A boolean indicating whether the unassignment was sucessful.\n\t * @throws DBException\n\t */\n\tpublic boolean removeRepresentative(long representer, long representee) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn\n\t\t\t\t\t.prepareStatement(\"DELETE FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\n\t\t\tps.setLong(1, representer);\n\t\t\tps.setLong(2, representee);\n\t\t\treturn 1 == ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all diagnoses for a given patient\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of Diagnoses.\n\t * @throws DBException\n\t */\n\tpublic List<DiagnosisBean> getDiagnoses(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM OVDiagnosis ovd, OfficeVisits ov, ICDCodes icd \"\n\t\t\t\t\t+ \"WHERE ovd.VisitID=ov.ID and icd.Code=ovd.ICDCode and ov.PatientID=? \"\n\t\t\t\t\t+ \"ORDER BY ov.visitDate DESC\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn diagnosisLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n \n\t/**\n\t * Return a list of all procedures for a given patient\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of all the procedures.\n\t * @throws DBException\n\t */\n\tpublic List<ProcedureBean> getProcedures(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \"\n\t\t\t\t\t+ \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? \"\n\t\t\t\t\t+ \"ORDER BY ov.visitDate desc\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn procedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all immunization procedures for a given patient\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of the procedures.\n\t * @throws DBException\n\t */\n\tpublic List<ProcedureBean> getImmunizationProcedures(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \"\n\t\t\t\t\t+ \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute='immunization'\"\n\t\t\t\t\t+ \"ORDER BY ov.visitDate desc\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn procedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t\n\t/**\n\t * Return a list of all prescriptions for a patient\n\t * \n\t * @param patientID The MID of the patient in question.\n\t * @return A java.util.List of prescriptions.\n\t * @throws DBException\n\t */\n\tpublic List<PrescriptionBean> getPrescriptions(long patientID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (patientID == 0L) throw new SQLException(\"pid cannot be 0\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \"\n\t\t\t\t\t+ \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \"\n\t\t\t\t\t+ \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode \"\n\t\t\t\t\t+ \"ORDER BY OfficeVisits.visitDate DESC, OVMedication.NDCode ASC;\");\n\t\t\tps.setLong(1, patientID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn prescriptionLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of prescriptions which are currently prescribed for a patient\n\t * \n\t * @param patientID The MID of the patient in question.\n\t * @return A java.util.List of prescription beans.\n\t * @throws DBException\n\t */\n\tpublic List<PrescriptionBean> getCurrentPrescriptions(long patientID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (patientID == 0L) throw new SQLException(\"pid cannot be 0\");\n\t\t\tconn = factory.getConnection();\n\t\t\t\n\t\t\tps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \"\n\t\t\t\t\t+ \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \"\n\t\t\t\t\t+ \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \"\n\t\t\t\t\t+ \"OVMedication.EndDate >= ?\" + \"ORDER BY OVMedication.ID DESC;\");\n\t\t\tps.setLong(1, patientID);\n\t\t\tps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(91));\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn prescriptionLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Return a list of prescriptions which are expired prescription for a patient\n\t * \n\t * @param patientID The MID of the patient in question.\n\t * @return A java.util.List of prescriptions.\n\t * @throws DBException\n\t **/\n\t \n\tpublic List<PrescriptionBean> getExpiredPrescriptions (long patientID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (patientID == 0L) throw new SQLException(\"pid cannot be 0\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \"\n\t\t\t\t\t+ \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \"\n\t\t\t\t\t+ \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \"\n\t\t\t\t\t+ \"OVMedication.EndDate < ?\" + \"ORDER BY OVMedication.ID DESC;\");\n\t\t\tps.setLong(1, patientID);\n\t\t\tps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn prescriptionLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Lists every patient in the database.\n\t * \n\t * @return A java.util.List of PatientBeans representing the patients.\n\t * @throws DBException\n\t */\n\tpublic List<PatientBean> getAllPatients() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM patients \");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn patientLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Return a list of patients with a special-diagnosis-history who\n\t * have the logged in HCP as a DHCP and whose medications are going to\n\t * expire within seven days.\n\t * \n\t * @param hcpMID The MID of the logged in HCP\n\t * @return A list of patients satisfying the conditions.\n\t * @throws DBException\n\t */\n\tpublic List<PatientBean> getRenewalNeedsPatients(long hcpMID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\t\n\t\t\t\t\n\t\t\t\tps = conn.prepareStatement(\"SELECT * FROM ( \" + \n\n\t\t\t\t\"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \n\t\t\t\t\"Where \" + \n\t\t\t\t\n\t\t\t\t\"declaredHCP.HCPID = ? AND \" + \n\t\t\t\t\"patients.MID = declaredhcp.PatientID AND \" + \n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\"( \" + \n\t\t\t\t\"ovdiagnosis.VisitID = officevisits.ID AND officevisits.PatientID = declaredhcp.PatientID \" + \n\t\t\t\t\"AND \" + \n\t\t\t\t\n\t\t\t\t\"((ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \" + \n\t\t\t\t\"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \" + \n\t\t\t\t\"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?)) \" + \n\t\t\t\t\") \" + \n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\"UNION ALL \" + \n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \n\t\t\t\t\"Where \" + \n\t\t\t\t\n\t\t\t\t\"declaredHCP.HCPID = ? AND \" + \n\t\t\t\t\"patients.MID = declaredhcp.PatientID AND \" + \n\t\t\t\t\n\t\t\t\t\"( \" + \n\t\t\t\t\"declaredhcp.PatientID = officevisits.PatientID AND officevisits.ID = ovmedication.VisitID \" + \n\t\t\t\t\"AND \" + \n\t\t\t\t\"ovmedication.EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) \" + \n\t\t\t\t\") \" + \n\t\t\t\t\n\t\t\t\t\") AS final \" + \n\t\t\t\t\n\t\t\t\t\"GROUP BY final.MID HAVING COUNT(*) = 2 \" + \n\t\t\t\t\n\t\t\t\t\"ORDER BY final.lastname ASC, final.firstname ASC\"); \n\t\t\t\n\t\t\tps.setLong(1, hcpMID);\n\t\t\t\n\t\t\tps.setFloat(2, 250.0f);\n\t\t\tps.setFloat(3, 251.0f);\n\t\t\t\t\n\t\t\tps.setFloat(4, 493.0f);\n\t\t\tps.setFloat(5, 494.0f);\n\t\t\t\n\t\t\tps.setFloat(6, 390.0f);\n\t\t\tps.setFloat(7, 460.99f);\n\n\t\t\tps.setLong(8, hcpMID);\n\t\t\t\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn patientLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns all patients with names \"LIKE\" (as in SQL) the passed in parameters.\n\t * \n\t * @param first The patient's first name.\n\t * @param last The patient's last name.\n\t * @return A java.util.List of PatientBeans.\n\t * @throws DBException\n\t */\n\tpublic List<PatientBean> searchForPatientsWithName(String first, String last) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\tif (first.equals(\"%\") && last.equals(\"%\")) return new Vector<PatientBean>();\n\t\t\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\t\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\n\t\t\tps.setString(1, first);\n\t\t\tps.setString(2, last);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn patientLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c77"},"name":"src/edu/ncsu/csc/itrust/validate/LOINCBeanValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c76"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\n\nimport edu.ncsu.csc.itrust.beans.LOINCbean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n\n/**\n * Validator used to validate LOINCbean\n */\npublic class LOINCBeanValidator extends BeanValidator<LOINCbean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic LOINCBeanValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(LOINCbean m) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\tif(m.getLabProcedureCode()==null || m.getComponent()==null || m.getKindOfProperty()==null){\n\t\t\tthrow new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\n\t\t}\n\t\terrorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\n\t\terrorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\n\t\terrorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\n\t\terrorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\n\t\terrorList.addIfNotNull(checkFormat(\"ScaleType\",m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\n\t\terrorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\n\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c78"},"name":"src/edu/ncsu/csc/itrust/validate/MedicationBeanValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c76"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.UpdateNDCodeListAction;\nimport edu.ncsu.csc.itrust.beans.MedicationBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Validates ND code beans, from {@link UpdateNDCodeListAction}\n * \n * @author Andy\n * \n */\npublic class MedicationBeanValidator extends BeanValidator<MedicationBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic MedicationBeanValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(MedicationBean m) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"ND Code\", m.getNDCode(), ValidationFormat.ND, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Description\", m.getDescription(),\n\t\t\t\tValidationFormat.ND_CODE_DESCRIPTION, false));\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c79"},"name":"src/edu/ncsu/csc/itrust/validate/DiagnosisBeanValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c76"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Validates an ICD9CM code\n * \n * @author Andy\n * \n */\npublic class DiagnosisBeanValidator extends BeanValidator<DiagnosisBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic DiagnosisBeanValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(DiagnosisBean d) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"ICD9CM Code\", d.getICDCode(), ValidationFormat.ICD9CM, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Description\", d.getDescription(),\n\t\t\t\tValidationFormat.ICD_CODE_DESCRIPTION, false));\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c7a"},"name":"src/edu/ncsu/csc/itrust/validate/ProcedureBeanValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c76"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.UpdateNDCodeListAction;\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Validates an ND code, from {@link UpdateNDCodeListAction}\n * \n * @author Andy\n * \n */\npublic class ProcedureBeanValidator extends BeanValidator<ProcedureBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic ProcedureBeanValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(ProcedureBean p) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"CPT Code\", p.getCPTCode(), ValidationFormat.CPT, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Description\", p.getDescription(),\n\t\t\t\tValidationFormat.CPT_CODE_DESCRIPTION, false));\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c7c"},"name":"WebRoot/auth/admin/editCPTProcedureCodes.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c7b"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.HtmlEncoder\"%>\n<%@page import=\"java.net.URLEncoder\" %>\n<%@page import=\"java.util.List\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Maintain CPT Codes\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tString headerMessage = \"Viewing Current CPT Procedure Codes\";\n\t\n\tUpdateCPTCodeListAction cptUpdater = new UpdateCPTCodeListAction(prodDAO, loggedInMID.longValue());\n\tString attribute = null;\n\tif (request.getParameter(\"add\") != null || request.getParameter(\"update\") != null) {\n\t\ttry {\n\t\t\tif (null != request.getParameter(\"attribute\")) {\n\t\t\t\tattribute = new String(\"immunization\");\n\t\t\t}\n\t\t\t\n\t\t\tProcedureBean proc = new ProcedureBean(request.getParameter(\"code\"), request.getParameter(\"description\"), attribute );\n\t\t\theaderMessage = (request.getParameter(\"add\") != null) ? cptUpdater.addCPTCode(proc)\t: cptUpdater.updateInformation(proc);\n\t\t} \n\t\tcatch(FormValidationException e) {\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t</div>\n<%\n\t\t\theaderMessage = \"Validation Errors\";\n\t\t}\n\t\t\n\t}\n\tString headerColor = (headerMessage.indexOf(\"Error\") > -1)\n\t\t\t? \"#ffcccc\"\n\t\t\t: \"#00CCCC\";\n%>\n<script type=\"text/javascript\">\n\nfunction fillUpdate(code) {\n\tdocument.getElementById(\"code\").value = code;\n\tdocument.getElementById(\"description\").value = unescape(document.getElementById(\"UPD\" + code).value);\n\tdocument.getElementById(\"oldDescrip\").value = unescape(document.getElementById(\"UPD\" + code).value);\n\tif (\"immunization\" == document.getElementById(\"CLASS\"+code).value) {\n\t\tdocument.getElementById(\"attribute\").checked = \"checked\";\n\t}\n\telse {\n\t\tdocument.getElementById(\"attribute\").checked = \"\";\n\t}\n}\n</script>\n\n<div align=\"center\">\n<br />\n<span class=\"iTrustMessage\"><%=headerMessage %></span>\n<br />\n<br />\n\n<form name=\"mainForm\" action=\"editCPTProcedureCodes.jsp\" method=\"post\">\n\t<input type=\"hidden\" id=\"updateID\" name=\"updateID\" value=\"\" />\n\t<input type=\"hidden\" id=\"oldDescrip\" name=\"oldDescrip\" value=\"\" />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<td colspan=\"3\">Update CPT Procedure Code List</td>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<td>Code</td>\n\t\t<td>Description</td>\n\t\t<td>Immunization?</td>\n\t</tr>\n\t<tr>\n\t\t<td><input type=\"text\" name=\"code\" id=\"code\" size=\"5\" maxlength=\"5\" /></td>\n\t\t<td><input type=\"text\" name=\"description\" id=\"description\" size=\"60\" maxlength=\"256\" /></td>\n\t\t<td><input type=\"checkbox\" name=\"attribute\" id=\"attribute\" value=\"yes\"/></td> \n\t</tr>\n</table>\n<input type=\"submit\" name=\"add\" value=\"Add Code\" />\n<input type=\"submit\" name=\"update\" value=\"Update Code\" />\n\n<br />\n<br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"3\">Current CPT Procedure Codes</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<td>Code</td>\n\t\t<td>Description</td>\n\t\t<td>Immunization?</td>\n\t</tr>\n\t<%\n\t\tList<ProcedureBean> codeList = prodDAO.getCPTCodesDAO().getAllCPTCodes();\n\t\tString tempCode = \"\";\n\t\tString tempDescrip = \"\";\n\t\tString escapedDescrip = \"\";\n\t\tString tempClass = \"\";\n\t\tfor (ProcedureBean codeEntry : codeList) {\n\t\t\ttempCode = codeEntry.getCPTCode();\n\t\t\ttempDescrip = codeEntry.getDescription();\n\t\t\ttempClass = codeEntry.getAttribute();\n\t\t\tescapedDescrip = URLEncoder.encode(tempDescrip, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n\t%>\n\t\t<tr>\n\t\t\t<td><%=tempCode %></td>\n\t\t\t<td><a href=\"javascript:void(0)\" onclick=\"fillUpdate('<%=tempCode %>')\"><%=HtmlEncoder.encode(tempDescrip)%></a>\n\t\t\t\t<input type=\"hidden\" id=\"UPD<%=tempCode %>\"\tname=\"UPD<%=tempCode %>\" value=\"<%=escapedDescrip %>\" />\n\t\t\t\t<input type=\"hidden\" id=\"CLASS<%=tempCode%>\" name=\"CLASS<%=tempCode%>\" value=\"<%=tempClass%>\" />\t\t\n\t\t\t</td>\n\t\t\t<td><%=(\"immunization\".equals(codeEntry.getAttribute()))?\"Yes\":\"No\"%></td>\n\t\t</tr>\n\t<% } %>\n</table>\n</form>\n</div>\n<br />\n\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c7d"},"name":"src/edu/ncsu/csc/itrust/action/UpdateCPTCodeListAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c7b"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.ProcedureBeanValidator;\n\n/**\n * Updates the CPT Code (Medical Procedures) List Used by editCPTProcedureCodes.jsp\n * \n * The CPT code set accurately describes medical, surgical, and diagnostic services \n * and is designed to communicate uniform information about medical services and procedures \n * among physicians, coders, patients, accreditation organizations, and payers for administrative, \n * financial, and analytical purposes.\n *\n * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml\n * @author laurenhayward\n */\npublic class UpdateCPTCodeListAction {\n\tprivate long loggedInMID;\n\tprivate TransactionDAO transDAO;\n\tprivate CPTCodesDAO cptDAO;\n\tprivate ProcedureBeanValidator validator = new ProcedureBeanValidator();\n\n\t/**\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the administrator who is updating the CPTs.\n\t */\n\tpublic UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.cptDAO = factory.getCPTCodesDAO();\n\t}\n\n\t/**\n\t * Adds a new cpt code (med procedure)\n\t * \n\t * @param proc\n\t *            ProcedureBean that holds the new cpt code\n\t * @return status message\n\t * @throws FormValidationException\n\t */\n\tpublic String addCPTCode(ProcedureBean proc) throws FormValidationException {\n\t\tvalidator.validate(proc);\n\t\ttry {\n\t\t\tif (cptDAO.addCPTCode(proc)) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MANAGE_PROCEDURE_CODE, loggedInMID, 0L,\n\t\t\t\t\t\t\"added CPT code \" + proc.getCPTCode());\n\t\t\t\treturn \"Success: \" + proc.getCPTCode() + \" - \" + proc.getDescription() + \" added\";\n\t\t\t} else\n\t\t\t\treturn \"The database has become corrupt. Please contact the system administrator for assistance.\";\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t} catch (iTrustException e) {\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Updates a procedure with new information from the ProcedureBean\n\t * \n\t * @param proc\n\t *            ProcedureBean with new information (but same CPT code)\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String updateInformation(ProcedureBean proc) throws FormValidationException {\n\t\tvalidator.validate(proc);\n\t\ttry {\n\t\t\tint rows = updateCode(proc);\n\t\t\tif (0 == rows) {\n\t\t\t\treturn \"Error: Code not found. To edit an actual code, \"\n\t\t\t\t\t\t+ \"change the description and add a new code with the old description\";\n\t\t\t} else {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MANAGE_PROCEDURE_CODE, loggedInMID, 0L,\n\t\t\t\t\t\t\"updated CPT code \" + proc.getCPTCode());\n\t\t\t\treturn \"Success: \" + rows + \" row(s) updated\";\n\t\t\t}\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Updates the cpt code\n\t * \n\t * @param proc the code to be updated\n\t * @return updated code\n\t * @throws DBException\n\t */\n\tprivate int updateCode(ProcedureBean proc) throws DBException {\n\t\treturn cptDAO.updateCode(proc);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c7e"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/CPTCodesDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c7b"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\nimport edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Used for managing CPT codes.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * The CPT code set accurately describes medical, surgical, and diagnostic services \n * and is designed to communicate uniform information about medical services and procedures \n * among physicians, coders, patients, accreditation organizations, and payers for administrative, \n * financial, and analytical purposes.\n *\n * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml\n * @author Andy\n * \n */\npublic class CPTCodesDAO {\n\tprivate DAOFactory factory;\n\tprivate ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader();\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic CPTCodesDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns a list of all CPT codes.\n\t * \n\t * @return A java.util.List of ProcedureBeans for the CPT codes.\n\t * @throws DBException\n\t */\n\tpublic List<ProcedureBean> getAllCPTCodes() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM CPTCodes ORDER BY CODE\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn procedureBeanLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns a list of all CPT codes.\n\t * \n\t * @return A java.util.List of all Immunization-related CPT codes.\n\t * @throws DBException\n\t */\n\tpublic List<ProcedureBean> getImmunizationCPTCodes() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"select * from cptcodes where attribute='immunization' order by code\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn procedureBeanLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a particular procedure description for a code.\n\t * \n\t * @param code The string representation of the code.\n\t * @return The textual description of the code.\n\t * @throws DBException\n\t */\n\tpublic ProcedureBean getCPTCode(String code) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM CPTCodes WHERE Code = ?\");\n\t\t\tps.setString(1, code);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next())\n\t\t\t\treturn procedureBeanLoader.loadSingle(rs);\n\t\t\treturn null;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a new CPT code, returns that it was added successfully\n\t * \n\t * @param proc A ProcedureBean representing the new code information.\n\t * @return A boolean for whether the operation was successful.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean addCPTCode(ProcedureBean proc) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO CPTCodes (Code, Description, Attribute) \" + \"VALUES (?,?,?)\");\n\t\t\tps.setString(1, proc.getCPTCode());\n\t\t\tps.setString(2, proc.getDescription());\n\t\t\tps.setString(3, proc.getAttribute());\n\t\t\treturn (1 == ps.executeUpdate());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"Error: Code already exists.\");\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Change the procedure description for a particular CPT code\n\t * \n\t * @param proc A ProcedureBean representing the new code information.\n\t * @return A boolean for whether the operation was successful.\n\t * @throws DBException\n\t */\n\tpublic int updateCode(ProcedureBean proc) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE CPTCodes SET Description = ?, Attribute = ? WHERE Code = ?\");\n\t\t\tps.setString(1, proc.getDescription());\n\t\t\tps.setString(2, proc.getAttribute());\n\t\t\tps.setString(3, proc.getCPTCode());\n\t\t\treturn ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c80"},"name":"WebRoot/auth/admin/editICDCodes.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c7f"}]],"contents":"<%@page import=\"java.net.URLEncoder\" %>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.DiagnosisBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Maintain ICD Codes\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nString headerMessage = \"Viewing Current ICD Codes\";\n\t\nUpdateICDCodeListAction icdUpdater = new UpdateICDCodeListAction(prodDAO, loggedInMID.longValue());\n\nif (request.getParameter(\"add\") != null || request.getParameter(\"update\") != null) {\n\ttry {\n\t\tDiagnosisBean diag = \n\t\t\tnew DiagnosisBean(request.getParameter(\"code\"), request.getParameter(\"description\"), request.getParameter(\"classification\"));\n\t\theaderMessage = (request.getParameter(\"add\") != null)?icdUpdater.addICDCode(diag):icdUpdater.updateInformation(diag);\n\t} catch(FormValidationException e) {\n%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t</div>\n<%\n\t\theaderMessage = \"Validation Errors\";\n\t}\n\t\n}\nString headerColor = (headerMessage.indexOf(\"Error\") > -1) ? \"#ffcccc\" : \"#00CCCC\";\n%>\n\n<div align=center>\n<form name=\"mainForm\" method=\"post\">\n<input type=\"hidden\" id=\"updateID\" name=\"updateID\" value=\"\" />\n<input type=\"hidden\" id=\"oldDescrip\" name=\"oldDescrip\" value=\"\" />\n<script type=\"text/javascript\">\n\tfunction fillUpdate(code) {\n\t\tdocument.getElementById(\"code\").value = code;\n\t\tdocument.getElementById(\"description\").value = unescape(document.getElementById(\"UPD\" + code).value);\n\t\tif (\"yes\" == document.getElementById(\"CLASS\"+code).value) {\n\t\t\tdocument.getElementById(\"classification\").checked = \"checked\";\n\t\t}\n\t\telse {\n\t\t\tdocument.getElementById(\"classification\").checked = \"\";\n\t\t}\n\t\t\n\t}\n</script>\n\n<br />\n\n<span class=\"iTrustMessage\"><%=headerMessage %></span>\n\n<br />\n<br />\n\n<table class=\"fTable\" align=\"center\">\n<tr>\n\t<th colspan=\"3\">Update ICD Code List</th>\n</tr>\n<tr class=\"subHeader\">\n\t\t<th>Code</th>\n\t\t<th>Chronic?</th>\n\t\t<th>Description</th>\n</tr>\n\t<tr>\n\t\t<td><input type=\"text\" name=\"code\" id=\"code\" size=\"8\" maxlength=\"8\" /></td>\n\t\t<td><input type=\"checkbox\" name=\"classification\" id=\"classification\" value=\"yes\" /></td>\n\t\t<td><input type=\"text\" name=\"description\" id=\"description\" size=\"40\" maxlength=\"100\" /></td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" name=\"add\" value=\"Add Code\" />\n<input type=\"submit\" name=\"update\" value=\"Update Code\" />\n<br />\n<br />\n\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"3\">Current ICD Codes</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Code</th>\n\t\t<th>Chronic?</th>\n\t\t<th>Description</th>\n\t</tr>\n<%\n\tList<DiagnosisBean> codeList = prodDAO.getICDCodesDAO().getAllICDCodes();\n\tString tempCode = \"\";\n\tString tempDescrip = \"\";\n\tString tempClass = \"\";\n\tString escapedDescrip = \"\";\n\tfor (DiagnosisBean codeEntry : codeList) {\n\t\ttempCode = codeEntry.getICDCode() + \"\";\n\t\ttempDescrip = codeEntry.getDescription();\n\t\ttempClass = codeEntry.getClassification();\n\t\tescapedDescrip = URLEncoder.encode(tempDescrip, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n%>\n<tr>\n\t<td align=\"center\"><%=tempCode%></td>\n\t<td align=\"center\"><%=tempClass%></td>\n\t<td align=\"center\">\n\t\t<a href=\"javascript:void(0)\" onclick=\"fillUpdate('<%=tempCode %>')\"><%=tempDescrip%></a>\n\t\t<input type=\"hidden\" id=\"UPD<%=tempCode%>\" name=\"UPD<%=tempCode%>\" value=\"<%=escapedDescrip%>\" />\n\t\t<input type=\"hidden\" id=\"CLASS<%=tempCode%>\" name=\"CLASS<%=tempCode%>\" value=\"<%=tempClass%>\" />\n\t</td>\n</tr>\n\n<% } %>\n\n</table>\n</form>\n</div>\n<br />\n\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c81"},"name":"src/edu/ncsu/csc/itrust/action/UpdateICDCodeListAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c7f"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator;\n\n/**\n * Handles updating the ICD Code (Diagnosis) List Used by editICDCodes.jsp\n * \n * The International Statistical Classification of Diseases and Related Health Problems \n * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a \n * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and \n * external causes of injury or disease. \n * \n * @see http://www.cdc.gov/nchs/icd9.htm\n * @author laurenhayward\n * \n */\npublic class UpdateICDCodeListAction {\n\tprivate long performerID = 0;\n\tprivate ICDCodesDAO icdDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate DiagnosisBeanValidator validator = new DiagnosisBeanValidator();\n\n\t/**\n\t * Set up\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param performerID The MID of the person udpating the ICDs.\n\t */\n\tpublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\n\t\tthis.performerID = performerID;\n\t\ttransDAO = factory.getTransactionDAO();\n\t\ticdDAO = factory.getICDCodesDAO();\n\t}\n\n\t/**\n\t * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param\n\t * \n\t * @param diagn\n\t *            The new diagnosis (ICD code)\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String addICDCode(DiagnosisBean diagn) throws FormValidationException {\n\t\tvalidator.validate(diagn);\n\t\ttry {\n\t\t\tif (icdDAO.addICDCode(diagn)) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L,\n\t\t\t\t\t\t\"added ICD code \" + diagn.getICDCode());\n\t\t\t\treturn \"Success: \" + diagn.getICDCode() + \" - \" + diagn.getDescription() + \" added\";\n\t\t\t} else\n\t\t\t\treturn \"The database has become corrupt. Please contact the system administrator for assistance.\";\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t} catch (iTrustException e) {\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Updates a diagnosis with new information from the DiagnosisBean passed as a param\n\t * \n\t * @param diagn\n\t *            new information to update (but same code)\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String updateInformation(DiagnosisBean diagn) throws FormValidationException {\n\t\tvalidator.validate(diagn);\n\t\ttry {\n\t\t\tint rows = icdDAO.updateCode(diagn);\n\t\t\tif (0 == rows) {\n\t\t\t\treturn \"Error: Code not found.\";\n\t\t\t} else {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L,\n\t\t\t\t\t\t\"updated ICD code \" + diagn.getICDCode());\n\t\t\t\treturn \"Success: \" + rows + \" row(s) updated\";\n\t\t\t}\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c82"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/ICDCodesDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c7f"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Used for managing all ICD codes.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * The International Statistical Classification of Diseases and Related Health Problems \n * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a \n * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and \n * external causes of injury or disease. \n * \n * @see http://www.cdc.gov/nchs/icd9.htm\n * @author Andy\n * \n */\npublic class ICDCodesDAO {\n\tprivate DAOFactory factory;\n\tprivate DiagnosisBeanLoader diagnosisLoader = new DiagnosisBeanLoader();\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic ICDCodesDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns all ICD9CM codes sorted by code\n\t * \n\t * @return java.util.List of DiagnosisBeans\n\t * @throws DBException\n\t */\n\tpublic List<DiagnosisBean> getAllICDCodes() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ICDCodes ORDER BY CODE\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn diagnosisLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a particular description for a given code\n\t * \n\t * @param code The String representation of the code.\n\t * @return A DiagnosisBean of the code.\n\t * @throws DBException\n\t */\n\tpublic DiagnosisBean getICDCode(String code) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ICDCodes WHERE Code = ?\");\n\t\t\tps.setString(1, code);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next())\n\t\t\t\treturn diagnosisLoader.loadSingle(rs);\n\t\t\treturn null;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds an ICD9CM code. Returns whether or not the change was made.\n\t * \n\t * @param diag The DiagnosisBean representing the changes.\n\t * @return A boolean indicating success.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean addICDCode(DiagnosisBean diag) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO ICDCodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\");\n\t\t\tps.setString(1, diag.getICDCode());\n\t\t\tps.setString(2, diag.getDescription());\n\t\t\tps.setString(3, diag.getClassification());\n\t\t\treturn (1 == ps.executeUpdate());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"Error: Code already exists.\");\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Changes a the description of a particular code.\n\t * \n\t * @param diag A DiagnosisBean representing the changes.\n\t * @return A boolean indicating the number of updated rows.\n\t * @throws DBException\n\t */\n\tpublic int updateCode(DiagnosisBean diag) throws DBException {\n\t\tint rows;\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE ICDCodes SET Description = ?, Chronic = ? WHERE Code = ?\");\n\t\t\tps.setString(1, diag.getDescription());\n\t\t\tps.setString(2, diag.getClassification());\n\t\t\tps.setString(3, diag.getICDCode());\n\t\t\trows = ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t\treturn rows;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c84"},"name":"WebRoot/auth/admin/editNDCodes.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c83"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2c"}]],"contents":"<%@page import=\"java.net.URLEncoder\" %>\n<%@page import=\"java.net.URLDecoder\" %>\n<%@page import=\"java.util.List\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.beans.MedicationBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.DrugInteractionBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.DrugInteractionAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Maintain ND Codes\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tUpdateNDCodeListAction ndUpdater = new UpdateNDCodeListAction(prodDAO, loggedInMID.longValue());\n\tDrugInteractionAction interactionAction = new DrugInteractionAction(prodDAO, loggedInMID.longValue());\n\t\n\tString headerMessage = \"Viewing Current ND Codes\";\n\tString code1 = request.getParameter(\"code1\") != null\n\t\t\t? request.getParameter(\"code1\").trim()\n\t\t\t: \"\";\n\tString code2 = request.getParameter(\"code2\") != null\n\t\t\t? request.getParameter(\"code2\").trim()\n\t\t\t: \"\";\n\tString code = code1 + code2;\n\t\n\tif (request.getParameter(\"add\") != null || request.getParameter(\"update\") != null || request.getParameter(\"delete\") != null) {\n\t\ttry {\n\t\t\tif(request.getParameter(\"add\") != null || request.getParameter(\"update\") != null) {\n\t\t\t\tMedicationBean med =\n\t\t\t\t\tnew MedicationBean(code, request.getParameter(\"description\"));\n\t\t\t\theaderMessage = (request.getParameter(\"add\") != null)\n\t\t\t\t\t\t? ndUpdater.addNDCode(med)\n\t\t\t\t\t\t: ndUpdater.updateInformation(med);\n\t\t\t} else {\n\t\t\t\tif(request.getParameter(\"codeToDelete\") != null) {\n\t\t\t\t\tinteractionAction.deleteInteraction(code, request.getParameter(\"codeToDelete\").trim());\n\t\t\t\t\theaderMessage = \"Interaction deleted successfully\";\n\t\t\t\t} else\n\t\t\t\t\theaderMessage = \"Interaction does not exist\";\n\t\t\t}\n\t\t} catch(FormValidationException e) {\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t\theaderMessage = \"Validation Errors\";\n\t\t} catch(iTrustException e) {\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t\theaderMessage = \"Validation Errors\";\n\t\t}\n\t\t\n\t}\n\t\t\t\n\tString headerColor = (headerMessage.indexOf(\"Error\") > -1)\n\t\t\t? \"#ffcccc\"\n\t\t\t: \"#00CCCC\";\n%>\n\n<br />\n<div align=center>\n<form name=\"mainForm\" method=\"post\">\n<input type=\"hidden\" id=\"codeToDelete\" name=\"codeToDelete\" value=\"\">\n<input type=\"hidden\" id=\"updateID\" name=\"updateID\" value=\"\">\n<input type=\"hidden\" id=\"oldDescrip\" name=\"oldDescrip\" value=\"\">\n<script type=\"text/javascript\">\n\tfunction fillUpdate(code) {\n\t\tdocument.getElementById(\"code1\").value = code.substring(0,5);\n\t\tdocument.getElementById(\"code2\").value = code.substring(5);\n\t\tdocument.getElementById(\"description\").value\n\t\t\t= unescape(document.getElementById(\"UPD\" + code).value);\n\t\tdocument.getElementById(\"oldDescrip\").value\n\t\t\t= unescape(document.getElementById(\"UPD\" + code).value);\n\t\tdocument.getElementById(\"interactions\").innerHTML = \"\";\n\t\tdocument.getElementById(\"intDesc\").innerHTML = \"\";\n\t\tdrugs = document.getElementById(\"INTDRUG\" + code).value.split(\"\\n\");\n\t\tdescs = document.getElementById(\"INTDESC\" + code).value.split(\"\\n\");\n\t\tfor(d in drugs) {\n\t\t\tif(d == drugs.length - 1) break;\t\t\t\n\t\t\tintLink = document.createElement(\"a\");\n\t\t\tintLink.href = \"javascript:void(0)\";\n\t\t\tintLink.id = \"drugInteraction\" + d; \n\t\t\t\n\t\t\tif(d == 0) {\n\t\t\t\taddIntDesc(drugs[d], descs[d]);\n\t\t\t}\n\t\t\t\n\t\t\tif(document.all) {\n\t\t\t\tintLink.attachEvent(\"onclick\", addIntDescIE);\n\t\t\t\t//Strip newline off end of drug code\n\t\t\t\tdrugs[d] = drugs[d].substring(0, drugs[d].length-1);\n\t\t\t} else {\n\t\t\t\tintLink.setAttribute(\"onclick\", \"addIntDesc('\" + drugs[d] + \"', '\" + descs[d] + \"');\");\n\t\t\t}\n\n\t\t\tvar intText = drugs[d];\t\n\t\t\tif(document.getElementById(\"UPD\" + intText).value != \"\" && document.getElementById(\"UPD\" + intText).value != \"undefined\") {\n\t\t\t\tintText = intText + \" \" + unescape(document.getElementById(\"UPD\" + drugs[d]).value);\n\t\t\t}\n\t\t\tintText = intText.substring(0,5) + \"-\" + intText.substring(5);\n\t\t\t\n\t\t\tintLinkText = document.createTextNode(intText);\n\t\t\tintLink.appendChild(intLinkText);\n\t\t\tdocument.getElementById(\"interactions\").appendChild(intLink);\n\t\t\tdocument.getElementById(\"interactions\").appendChild(document.createElement('br'));\n\t\t\t\n\t\t}\n\t\tif(drugs.length <= 1) {\n\t\t\tdocument.getElementById(\"interactions\").innerHTML = \"No Interactions\";\n\t\t\tif(document.getElementById(\"delete\").style != null) {\n\t\t\t\tdocument.getElementById(\"delete\").style.visibility = \"hidden\";\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\n\t}\n\n\tfunction addIntDescIE() {\n\t\tlinkID = event.srcElement.id;\n\t\tlinkID = linkID.substring(15); //Get number after \"drugInteraction\"\n\t\tlinkNumber = eval(linkID);\n\t\taddIntDesc(drugs[linkNumber], descs[linkNumber]);\n\t}\n\n\tfunction addIntDesc(code, desc) {\n\t\tdocument.getElementById(\"intDesc\").innerHTML = desc;\n\t\tdocument.getElementById(\"delete\").style.visibility = \"\"; \n\t\tdocument.getElementById(\"codeToDelete\").value = code;\n\t}\n</script>\n\n\n<span class=\"iTrustMessage\"><%=headerMessage %></span>\n\n<br />\n<br />\n\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"3\">Update ND Code List</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Code</th>\n\t\t<th>Description</th>\n\t</tr>\n\t<tr>\n\t\t<td style=\"padding-right: 10px;\">\n\t\t\t<input  type=\"text\"\n\t\t\t\t\tid=\"code1\"\n\t\t\t\t\tname=\"code1\"\n\t\t\t\t\tsize=\"5\"\n\t\t\t\t\tmaxlength=\"5\"\n\t\t\t/>-<input type=\"text\"\n\t\t\t\t\tid=\"code2\"\n\t\t\t\t\tname=\"code2\"\n\t\t\t\t\tsize=\"4\"\n\t\t\t\t\tmaxlength=\"4\"/>\n\t\t</td>\n\t\t<td>\n\t\t\t<input  type=\"text\"\n\t\t\t\t\tid=\"description\"\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tsize=\"40\"\n\t\t\t\t\tmaxlength=\"50\" />\n\t\t</td>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Interaction</th>\n\t\t<th>Description</th>\n\t</tr>\n\t<tr>\n\t\t<td style=\"padding-right: 10px;\" id=\"interactions\">\n\n\t\t</td>\n\t\t<td>\n\t\t\t<div id=\"intDesc\"></div>\n\t\t\t<div align=\"center\"><input type=\"submit\" value=\"Delete Interaction\" name=\"delete\" id=\"delete\" style=\"visibility: hidden\"/></div>\n\t\t</td>\t\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" name=\"add\" value=\"Add Code\" />\n<input type=\"submit\" name=\"update\" value=\"Update Code\" />\n\n<br />\n<br />\n\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"2\">Current NDCs</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Code</th>\n\t\t<th>Description</th>\n\t</tr>\n\t<%\n\t\tList<MedicationBean> medList = prodDAO.getNDCodesDAO().getAllNDCodes();\n\t\tList<DrugInteractionBean> interactionList;\n\t\tString tempCode = \"\";\n\t\tString tempDescrip = \"\";\n\t\tString escapedDescrip = \"\";\n\t\tString intDrugsString = \"\";\n\t\tString intDescsString = \"\";\n\t\t\n\t\tfor (MedicationBean medEntry : medList) {\n\t\t\ttempCode = medEntry.getNDCode();\n\t\t\ttempDescrip = medEntry.getDescription();\n\t\t\tescapedDescrip = URLEncoder.encode(tempDescrip, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n\t\t\tinteractionList = interactionAction.getInteractions(tempCode);\n\t\t\tintDrugsString = \"\";\n\t\t\tintDescsString = \"\";\n\t\t\tfor(DrugInteractionBean b : interactionList) {\n\t\t\t\tif(tempCode.equals(b.getFirstDrug())) intDrugsString += b.getSecondDrug() + \"\\n\";\n\t\t\t\tif(tempCode.equals(b.getSecondDrug())) intDrugsString += b.getFirstDrug() + \"\\n\";\n\t\t\t\tintDescsString += b.getDescription() + \"\\n\";\n\t\t\t}\n\t\t\t//intDrugsString = URLEncoder.encode(intDrugsString, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n\t\t\t//intDescsString = URLEncoder.encode(intDescsString, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n\t%>\n\t\t<tr>\n\t\t\t<td><%=5 > tempCode.length() ? tempCode : tempCode.substring(0, 5)\n\t\t\t\t%>-<%=5 > tempCode.length() ? \"\" : tempCode.substring(5) %>\n\t\t\t</td>\n\t\t\t<td><a href=\"javascript:void(0)\"\n\t\t\t\t\tonclick=\"fillUpdate('<%=tempCode %>')\"\n\t\t\t\t\t\t><%=tempDescrip %></a>\n\t\t\t\t<input type=\"hidden\"\n\t\t\t\t\t\tid=\"UPD<%=tempCode %>\"\n\t\t\t\t\t\tname=\"UPD<%=tempCode %>\"\n\t\t\t\t\t\tvalue=\"<%=escapedDescrip %>\">\n\t\t\t\t<input type=\"hidden\"\n\t\t\t\t\t\tid=\"INTDRUG<%=tempCode %>\"\n\t\t\t\t\t\tname=\"INTDRUG<%=tempCode %>\"\n\t\t\t\t\t\tvalue=\"<%=intDrugsString %>\">\n\t\t\t\t<input type=\"hidden\"\n\t\t\t\t\t\tid=\"INTDESC<%=tempCode %>\"\n\t\t\t\t\t\tname=\"INTDESC<%=tempCode %>\"\n\t\t\t\t\t\tvalue=\"<%=intDescsString %>\">\n\t\t\t</td>\n\t\t</tr>\n\t<% } %>\n</table>\n</form>\n<br />\n<br />\n<a href=\"editNDCInteractions.jsp\">Edit Interactions</a>\n</div>\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c85"},"name":"src/edu/ncsu/csc/itrust/action/UpdateNDCodeListAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c83"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.beans.MedicationBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.MedicationBeanValidator;\n\n/**\n * Handles updating the ND Code (Prescription) List Used by editNDCodes.jsp\n * \n * The National Drug Code (NDC) is a universal product identifier used in the\n * United States for drugs intended for human use.\n * \n * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm\n * @author laurenhayward\n */\npublic class UpdateNDCodeListAction {\n\tprivate long performerID = 0;\n\tprivate TransactionDAO transDAO;\n\tprivate NDCodesDAO ndDAO;\n\tprivate MedicationBeanValidator validator = new MedicationBeanValidator();\n\n\t/**\n\t * Set up defaults.\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param performerID The MID of the user updating the ND lists.\n\t */\n\tpublic UpdateNDCodeListAction(DAOFactory factory, long performerID) {\n\t\tthis.performerID = performerID;\n\t\tndDAO = factory.getNDCodesDAO();\n\t\ttransDAO = factory.getTransactionDAO();\n\t}\n\n\t/**\n\t * Adds a new ND Code (prescription) to the list\n\t * \n\t * @param med\n\t *            The new ND Code to be added\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String addNDCode(MedicationBean med) throws FormValidationException {\n\t\tvalidator.validate(med);\n\t\ttry {\n\t\t\tif (ndDAO.addNDCode(med)) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MANAGE_DRUG_CODE, performerID, 0L, \"added ND code \"\n\t\t\t\t\t\t+ med.getNDCode());\n\t\t\t\treturn \"Success: \" + med.getNDCode() + \" - \" + med.getDescription() + \" added\";\n\t\t\t} else\n\t\t\t\treturn \"The database has become corrupt. Please contact the system administrator for assistance.\";\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t} catch (iTrustException e) {\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Updates the ND Code with new information from the MedicationBean\n\t * \n\t * @param med\n\t *            the MedicationBean that holds new information but the same code\n\t * @return status message\n\t * @throws FormValidationException\n\t */\n\tpublic String updateInformation(MedicationBean med) throws FormValidationException {\n\t\tvalidator.validate(med);\n\t\ttry {\n\t\t\tint rows = updateCode(med);\n\t\t\tif (0 == rows) {\n\t\t\t\treturn \"Error: Code not found.\";\n\t\t\t} else {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MANAGE_DRUG_CODE, performerID, 0L, \"updated ND code \"\n\t\t\t\t\t\t+ med.getNDCode());\n\t\t\t\treturn \"Success: \" + rows + \" row(s) updated\";\n\t\t\t}\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Medication information should already be validated\n\t * \n\t * @param med\n\t * @return\n\t * @throws DBException\n\t */\n\tprivate int updateCode(MedicationBean med) throws DBException {\n\t\treturn ndDAO.updateCode(med);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c86"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/NDCodesDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c83"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.MedicationBean;\nimport edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Used for managing the ND Codes.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * The National Drug Code (NDC) is a universal product identifier used in the\n * United States for drugs intended for human use.\n * \n * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm\n * @author Andy\n * \n */\npublic class NDCodesDAO {\n\tprivate DAOFactory factory;\n\tprivate MedicationBeanLoader medicationLoader = new MedicationBeanLoader();\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic NDCodesDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns a list of all ND codes\n\t * \n\t * @return A java.util.List of MedicationBeans.\n\t * @throws DBException\n\t */\n\tpublic List<MedicationBean> getAllNDCodes() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM NDCodes ORDER BY CODE\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn medicationLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a particular description for a given code.\n\t * \n\t * @param code The ND code to be looked up.\n\t * @return A bean representing the Medication that was looked up.\n\t * @throws DBException\n\t */\n\tpublic MedicationBean getNDCode(String code) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM NDCodes WHERE Code = ?\");\n\t\t\tps.setString(1, code);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next())\n\t\t\t\treturn medicationLoader.loadSingle(rs);\n\t\t\treturn null;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a new ND code, returns whether or not the change was made. If the code already exists, an\n\t * iTrustException is thrown.\n\t * \n\t * @param med The medication bean to be added.\n\t * @return A boolean indicating success or failure.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean addNDCode(MedicationBean med) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO NDCodes (Code, Description) \" + \"VALUES (?,?)\");\n\t\t\tps.setString(1, med.getNDCode());\n\t\t\tps.setString(2, med.getDescription());\n\t\t\treturn (1 == ps.executeUpdate());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"Error: Code already exists.\");\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a particular code's description\n\t * \n\t * @param med A bean representing the particular medication to be updated.\n\t * @return An int representing the number of updated rows.\n\t * @throws DBException\n\t */\n\tpublic int updateCode(MedicationBean med) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE NDCodes SET Description = ? \" + \"WHERE Code = ?\");\n\t\t\tps.setString(1, med.getDescription());\n\t\t\tps.setString(2, med.getNDCode());\n\t\t\treturn ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c88"},"name":"WebRoot/auth/admin/editLOINCCodes.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c87"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LOINCbean\"%>\n<%--@page import=\"edu.ncsu.csc.itrust.action.UpdateLabProcListAction\"--%>\n<%@page import=\"edu.ncsu.csc.itrust.action.UpdateLOINCListAction\"%> \n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Maintain LOINC Codes\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tString headerMessage = \"Viewing Current LOINC Codes\";\n\t\n/*UpdateLabProcListAction icdUpdater =\n\t\tnew UpdateLabProcListAction(prodDAO, loggedInMID.longValue());*/\nUpdateLOINCListAction icdUpdater =\n\t\tnew UpdateLOINCListAction(prodDAO, loggedInMID.longValue());\t\t\n\t\n\tif (request.getParameter(\"add\") != null || request.getParameter(\"update\") != null) {\n\t\ttry {\n\t\t\tLOINCbean diag =\n\t\t\t\tnew LOINCbean();\n\t\t\t\tdiag.setLabProcedureCode(request.getParameter(\"code\"));\n\t\t\tdiag.setComponent(request.getParameter(\"comp\"));\n\t\t\tdiag.setKindOfProperty(request.getParameter(\"kop\"));\n\t\t\tdiag.setTimeAspect(request.getParameter(\"time\"));\n\t\t\tdiag.setSystem(request.getParameter(\"system\"));\n\t\t\tdiag.setScaleType(request.getParameter(\"scale\"));\n\t\t\tdiag.setMethodType(request.getParameter(\"method\"));\n\t\t\t\n\t\t\theaderMessage = (request.getParameter(\"add\") != null)\n\t\t\t\t\t? icdUpdater.add(diag)\n\t\t\t\t\t: icdUpdater.updateInformation(diag);\n\t\t} catch(FormValidationException e) {\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t\theaderMessage = \"Validation Errors\";\n\t\t}\n\t\t\n\t}\n\tString headerColor = (headerMessage.indexOf(\"Error\") > -1)\n\t\t\t? \"#ffcccc\"\n\t\t\t: \"#00CCCC\";\n%>\n\n<div align=center>\n<form name=\"mainForm\" method=\"post\">\n<input type=\"hidden\" id=\"updateID\" name=\"updateID\" value=\"\">\n<input type=\"hidden\" id=\"oldDescrip\" name=\"oldDescrip\" value=\"\">\n\n<script type=\"text/javascript\">\n\tfunction fillUpdate(comp) {\n\t\tdocument.getElementById(\"code\").value = comp;\n\t\t\t\t\n\t}\n\tfunction fillUpdate2(comp) {\n\t\tdocument.getElementById(\"comp\").value = comp;\n\t}\n\tfunction fillUpdate3(comp) {\n\t\tdocument.getElementById(\"kop\").value = comp;\n\t}\n\tfunction fillUpdate4(comp) {\n\t\tdocument.getElementById(\"time\").value = comp;\n\t}\n\tfunction fillUpdate5(comp) {\n\t\tdocument.getElementById(\"system\").value = comp;\n\t}\n\tfunction fillUpdate6(comp) {\n\t\tdocument.getElementById(\"scale\").value = comp;\n\t}\n\tfunction fillUpdate7(comp) {\n\t\tdocument.getElementById(\"method\").value = comp;\n\t\t\t\t\t\n\t}\n\t\n\t\n</script>\n\n<br />\n\n<span class=\"iTrustMessage\"><%=headerMessage %></span>\n<br />\n\n<br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"4\">Update LOINC Code List</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th colspan=3 >Code</th>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\" colspan=3>\n\t\t\t<input type=\"text\" name=\"code\" id=\"code\" size=\"7\" maxlength=\"7\" />\n\t\t</td>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Component</th>\n\t\t<th>Kind Of Property</th>\n\t\t<th>Time Aspect</th>\n\t</tr>\n\t<tr>\n\t\t<td><input type=\"text\" name=\"comp\" id=\"comp\"\n\t\t\t\t\t\t\t\tsize=\"40\" maxlength=\"100\" /></td>\n\t\t<td><input type=\"text\" name=\"kop\" id=\"kop\"\n\t\t\t\t\t\t\t\tsize=\"40\" maxlength=\"100\" /></td>\n\t\t<td><input type=\"text\" name=\"time\" id=\"time\"\n\t\t\t\t\t\t\t\tsize=\"40\" maxlength=\"100\" /></td>\n\t</tr>\n\t<tr class=\"subHeader\">\t\t\n\t\t<th>System</th>\n\t\t<th>Scale Type</th>\n\t\t<th>Method Type</th>\n\t</tr>\n<tr>\n\t\t<td><input type=\"text\" name=\"system\" id=\"system\"\n\t\t\t\t\t\t\t\tsize=\"40\" maxlength=\"100\" /></td>\n\t\t<td><input type=\"text\" name=\"scale\" id=\"scale\"\n\t\t\t\t\t\t\t\tsize=\"40\" maxlength=\"100\" /></td>\n\t\t<td><input type=\"text\" name=\"method\" id=\"method\"\n\t\t\t\t\t\t\t\tsize=\"40\" maxlength=\"100\" /></td>\n\t\t\t\t\t\t\t\t\n\t</tr>\n</table>\n<span style=\"font-size:14px;\">NOTE: When updating, please enter original information in fields you do not want to change</span>\n<br />\n<br />\n<input type=\"submit\" name=\"add\" value=\"Add Code\" />\n<input type=\"submit\" name=\"update\" value=\"Update Code\" />\n<br />\n<br />\n\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"7\">Current LOINC Codes</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<td>Code</td>\n\t\t<td>Component</td>\n\t\t<td>Kind Of Property</td>\n\t\t<td>Time Aspect</td>\n\t\t<td>System</td>\n\t\t<td>Scale Type</td>\n\t\t<td>Method Type</td>\n\t</tr>\n\t<%\n\t\tList<LOINCbean> codeList = prodDAO.getLOINCDAO().getAllLOINC();\n\t\tString tempCode = \"\";\n\t\tString tempcomp = \"\";\n\t\tString tempkop = \"\";\n\t\tString temptime = \"\";\n\t\tString tempsystem=\"\";\n\t\tString tempscale = \"\";\n\t\tString tempmethod=\"\";\n\n\t\t\n\t\tfor (LOINCbean codeEntry : codeList) {\n\t\t\ttempCode = codeEntry.getLabProcedureCode();\n\t\t\ttempcomp = codeEntry.getComponent();\n\t\t\ttempkop = codeEntry.getKindOfProperty();\n\t\t\ttemptime = codeEntry.getTimeAspect();\n\t\t\ttempsystem = codeEntry.getSystem();\n\t\t\ttempscale = codeEntry.getScaleType();\n\t\t\ttempmethod = codeEntry.getMethodType();\n\t\t\t\n\n\t%>\n\t\t<tr>\n\t\t\t<td ><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate('<%=tempCode%>')\"><%=tempCode%></a>\n\t\t\t<td ><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate2('<%=tempcomp%>')\"><%=tempcomp%></a>\n\t\t\t<td ><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate3('<%=tempkop%>')\"><%=tempkop%></a>\n\t\t\t<td ><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate4('<%=temptime%>')\"><%=temptime%></a>\n\t\t\t<td ><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate5('<%=tempsystem%>')\"><%=tempsystem%></a>\n\t\t\t<td nowrap><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate6('<%=tempscale%>')\"><%=tempscale%></a>\n\t\t\t<td nowrap><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate7('<%=tempmethod%>')\"><%=tempmethod%></a>\n\t\t</tr>\n\t<% } %>\n</table>\n</form>\n</div>\n<br />\n\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c89"},"name":"src/edu/ncsu/csc/itrust/action/UpdateLOINCListAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c87"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.LOINCbean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.LOINCDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.LOINCBeanValidator;\n\n/**\n * Handles updating the LOINC Used.\n * \n * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal\n *  standard for identifying medical laboratory observations. \n *  \n * @see http://loinc.org/\n */\npublic class UpdateLOINCListAction {\n\tprivate long performerID = 0;\n\tprivate LOINCDAO lDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate LOINCBeanValidator validator = new LOINCBeanValidator();\n\n\t/**\n\t * Sets up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param performerID The MID of the person updating the LOINCs.\n\t */\n\tpublic UpdateLOINCListAction(DAOFactory factory, long performerID) {\n\t\tthis.performerID = performerID;\n\t\ttransDAO = factory.getTransactionDAO();\n\t\tlDAO = factory.getLOINCDAO();\n\t}\n\n\t/**\n\t * Adds a new LOINC\n\t * \n\t * @param diagn\n\t *            New LOINC\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String add(LOINCbean diagn) throws FormValidationException, iTrustException {\n\t\tvalidator.validate(diagn);\n\n\t\tList<LOINCbean> lblist = lDAO.getAllLOINC();\n\n\t\tboolean correctID = false;\n\t\tfor (int i = 0; i < lblist.size(); i++) {\n\t\t\tif (lblist.get(i).getLabProcedureCode().equals(diagn.getLabProcedureCode())) {\n\t\t\t\tcorrectID = true;\n\t\t\t\ti = lblist.size();\n\t\t\t}\n\t\t}\n\t\tif (correctID) {\n\t\t\tthrow new FormValidationException(\"Error: Code already exists.\");\n\t\t}\n\t\tlDAO.addLOINC(diagn);\n\t\ttransDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \"added LOINC code \"\n\t\t\t\t+ diagn.getLabProcedureCode());\n\t\treturn \"Success: \" + diagn.getLabProcedureCode() + \" added\";\n\t}\n\n\t/**\n\t * Updates a LOINC\n\t * \n\t * @param diagn\n\t *            new information to update (but same code)\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String updateInformation(LOINCbean diagn) throws FormValidationException {\n\t\tvalidator.validate(diagn);\n\t\ttry {\n\t\t\tint rows = lDAO.update(diagn);\n\t\t\tif (0 == rows) {\n\t\t\t\treturn \"Error: Code not found.\";\n\t\t\t} else {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \"updated LOINC code \"\n\t\t\t\t\t\t+ diagn.getLabProcedureCode());\n\t\t\t\treturn \"Success: \" + diagn.getLabProcedureCode() + \" updated\";\n\t\t\t}\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c8a"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/LOINCDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c87"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.LOINCbean;\nimport edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal\n *  standard for identifying medical laboratory observations. \n *  \n * @see http://loinc.org/\n * @author Ben Smith\n */\npublic class LOINCDAO {\n\tprivate DAOFactory factory;\n\tprivate LOINCBeanLoader LOINCLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic LOINCDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tLOINCLoader = new LOINCBeanLoader();\n\t}\n\t\n\t/**\n\t * Adds a LOINC\n\t * \n\t * @param hosp The LOINCbean representing the new code to be added.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic void addLOINC(LOINCbean hosp) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO LOINC (LaboratoryProcedureCode, Component, KindOfProperty, TimeAspect, System, ScaleType, MethodType) \" + \"VALUES (?,?,?,?,?,?,?)\");\n\t\t\tps.setString(1, hosp.getLabProcedureCode());\n\t\t\tps.setString(2, hosp.getComponent());\n\t\t\tps.setString(3, hosp.getKindOfProperty());\n\t\t\tps.setString(4, hosp.getTimeAspect());\n\t\t\tps.setString(5, hosp.getSystem());\n\t\t\tps.setString(6, hosp.getScaleType());\n\t\t\tps.setString(7, hosp.getMethodType());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"Error: LOINC already exists.\");\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\t\n\n\t/**\n\t * Returns all LOINCs associated with LaboratoryProcedureCode\n\t * \n\t * @param visitID The code of the Laboratory Procedure Code as a String.\n\t * @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code.\n\t * @throws DBException\n\t */\n\tpublic List<LOINCbean> getProcedures(String visitID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"Select * From LOINC Where LaboratoryProcedureCode = ? \");\n\t\t\tps.setString(1, visitID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn LOINCLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Updates the information in LOINC.\n\t * \n\t * @param ov\n\t * @throws DBException\n\t */\n\tpublic int update(LOINCbean ov) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE LOINC SET Component=?, KindOfProperty=?, TimeAspect=?, System=?, ScaleType=?, MethodType=? WHERE LaboratoryProcedureCode=?\");\n\t\t\tps.setString(1, ov.getComponent());\n\t\t\tps.setString(2, ov.getKindOfProperty());\n\t\t\tps.setString(3, ov.getTimeAspect());\n\t\t\tps.setString(4, ov.getSystem());\n\t\t\tps.setString(5, ov.getScaleType());\n\t\t\tps.setString(6, ov.getMethodType());\n\t\t\tps.setString(7, ov.getLabProcedureCode());\n\t\t\treturn ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns all LOINCs as a list.\n\t * \n\t * @return A java.util.List of LOINCbeans.\n\t * @throws DBException\n\t */\n\tpublic List<LOINCbean> getAllLOINC() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LOINC\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn LOINCLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c8c"},"name":"WebRoot/auth/hcp-uap/chronicDiseaseRisks.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c8b"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.risk.RiskChecker\"%>\n<%@page import=\"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Risk Factors for Chronic Diseases\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%try{\n/* Require a Patient ID first */\nString pidString = (String)session.getAttribute(\"pid\");\nif (pidString == null || 1 > pidString.length()) {\n\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp-uap/chronicDiseaseRisks.jsp\");\n   \treturn;\n}\n//else {\n//\tsession.removeAttribute(\"pid\");\n//}\n\nChronicDiseaseRiskAction action = new ChronicDiseaseRiskAction(prodDAO, loggedInMID.longValue(), pidString);\nlong pid = action.getPatientID();\n%>\n\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"2\" >Disease Risk Factors</th>\n\t</tr>\n<%\n\tList<RiskChecker> diseases = action.getDiseasesAtRisk();\n\tif(diseases.size() > 0) {\n\t\tfor(RiskChecker disease: diseases) {\n%>\n    <tr>\n    \t<td colspan=\"2\" class=\"subHeaderVertical\"><%=disease.getName()%></td>\n    </tr>\n      <tr>\n\t      <td style=\"padding-left: 10px\">\n<%\n\t\t\tList<PatientRiskFactor> factors = disease.getPatientRiskFactors();\n\t\t\tfor(PatientRiskFactor factor : factors) {\n%>\n\t\t        <%=factor.getDescription()%><br />\n<%\n\t\t\t}\n%>\n\t      </td>\n      </tr>\n<%\n\t\t}\n\t}\n}\n\tcatch(Exception e) {\n%>\n\t<tr>\n    \t<td colspan=\"2\" align=center>No Data</td>\n    </tr>\n<%\n\t}\n%>\n</table>\n\n<br /><br /><br />\n<itrust:patientNav thisTitle=\"Risk Factors\" />\n\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c8d"},"name":"src/edu/ncsu/csc/itrust/action/ChronicDiseaseRiskAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c8b"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.action.base.PatientBaseAction;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.NoHealthRecordsException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator;\nimport edu.ncsu.csc.itrust.risk.RiskChecker;\n\n/**\n * \n * Used for chronicDiseaseRisks.jsp. Passes most of the logic off to {@link ChronicDiseaseMediator}, and the\n * various subclasses of {@link RiskChecker}.\n * \n * @author Andy Meneely\n * \n */\npublic class ChronicDiseaseRiskAction extends PatientBaseAction {\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\tprivate ChronicDiseaseMediator diseaseMediator;\n\tprivate TransactionDAO transDAO;\n\n\t/**\n\t * \n\t * @param factory\n\t * @param loggedInMID\n\t * @param pidString\n\t *            The patient ID to be validated and used\n\t * @throws iTrustException\n\t * @throws DBException\n\t * @throws NoHealthRecordsException\n\t *             This is thrown if a patient is added without any health records to be checked. Try to avoid\n\t *             having this exception be thrown in a normal flow of events.\n\t * @author Andy Meneely\n\t */\n\tpublic ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString)\n\t\t\tthrows iTrustException, DBException, NoHealthRecordsException {\n\t\tsuper(factory, pidString);\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\n\t}\n\n\t/**\n\t * Returns the ID of the patient to be checked.\n\t * \n\t * @return patient ID whose risk we are checking\n\t * @author Andy Meneely\n\t */\n\tpublic long getPatientID() {\n\t\treturn pid;\n\t}\n\n\t/**\n\t * Gives the full name of the patient\n\t * \n\t * @return Full name of the patient who we are checking\n\t * @throws DBException\n\t * @throws iTrustException\n\t * @author Andy Meneely\n\t */\n\tpublic String getUserName() throws DBException, iTrustException {\n\t\treturn authDAO.getUserName(pid);\n\t}\n\n\t/**\n\t * Returns the risks for which this patient is at risk for. All logic has been passed to\n\t * {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}.\n\t * \n\t * @return List of risks\n\t * @throws iTrustException\n\t * @throws DBException\n\t * @author Andy Meneely\n\t */\n\tpublic List<RiskChecker> getDiseasesAtRisk() throws iTrustException, DBException {\n\t\ttransDAO.logTransaction(TransactionType.IDENTIFY_RISK_FACTORS, loggedInMID, pid, \"\");\n\t\treturn diseaseMediator.getDiseaseAtRisk();\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c8e"},"name":"src/edu/ncsu/csc/itrust/risk/RiskChecker.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c8b"}]],"contents":"package edu.ncsu.csc.itrust.risk;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.HealthRecord;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.NoHealthRecordsException;\nimport edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;\n\n/**\n * An abstract class which has a number of utlity methods for checking risks.\n * \n * When extending this class, use the methods to fill in all of the necessary information. Then use isAtRisk\n * and getPatientRiskFactors to get the actual risks. See the known subclasses for an example\n * \n * @author Andy\n * \n */\nabstract public class RiskChecker {\n\tprivate static final int RISK_THRESHOLD = 3;\n\tprotected PatientBean patient;\n\tprotected HealthRecord currentHealthRecord;\n\tprotected DAOFactory factory;\n\n\tpublic RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\n\t\tthis.factory = factory;\n\t\tHealthRecordsDAO hrDAO = factory.getHealthRecordsDAO();\n\t\tList<HealthRecord> records = hrDAO.getAllHealthRecords(patientID);\n\t\tif (records.size() > 0)\n\t\t\tcurrentHealthRecord = records.get(0);\n\t\telse\n\t\t\tthrow new NoHealthRecordsException();\n\n\t\tpatient = factory.getPatientDAO().getPatient(patientID);\n\t}\n\n\t/**\n\t * @return The name of the disease being checked.\n\t */\n\tabstract public String getName();\n\n\t/**\n\t * @return A java.util.List of the risk factors increasing this patients disease risk.\n\t */\n\tabstract protected List<PatientRiskFactor> getDiseaseRiskFactors();\n\n\t/**\n\t * @return A boolean indicating whether the patient is at increased risk.\n\t */\n\tabstract public boolean qualifiesForDisease();\n\n\t/**\n\t * This method exists purely for performance - just stop once you hit the threshold. <br />\n\t * <br />\n\t * Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there\n\t * should be no double-querying\n\t * \n\t * @return isAtRisk\n\t */\n\tpublic boolean isAtRisk() {\n\t\tif (qualifiesForDisease()) {\n\t\t\tint numRisks = 0;\n\t\t\tList<PatientRiskFactor> diseaseRiskFactors = getDiseaseRiskFactors();\n\t\t\tfor (PatientRiskFactor factor : diseaseRiskFactors) {\n\t\t\t\tif (factor.hasRiskFactor())\n\t\t\t\t\tnumRisks++;\n\t\t\t\tif (numRisks >= RISK_THRESHOLD)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false; // both an else from qualifies or NOT over the threshold\n\t}\n\n\t/**\n\t * @return A java.util.List of patient risk factors associated with this disease.\n\t */\n\tpublic List<PatientRiskFactor> getPatientRiskFactors() {\n\t\tList<PatientRiskFactor> patientRiskFactors = new ArrayList<PatientRiskFactor>();\n\t\tList<PatientRiskFactor> diseaseRiskFactors = getDiseaseRiskFactors();\n\t\tfor (PatientRiskFactor factor : diseaseRiskFactors) {\n\t\t\tif (factor.hasRiskFactor()) {\n\t\t\t\tpatientRiskFactors.add(factor);\n\t\t\t}\n\t\t}\n\t\treturn patientRiskFactors;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c8f"},"name":"src/edu/ncsu/csc/itrust/risk/HeartDiseaseRisks.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c8b"}]],"contents":"package edu.ncsu.csc.itrust.risk;\n\nimport static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican;\nimport static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian;\nimport static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic;\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.enums.Gender;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.NoHealthRecordsException;\nimport edu.ncsu.csc.itrust.risk.factors.AgeFactor;\nimport edu.ncsu.csc.itrust.risk.factors.CholesterolFactor;\nimport edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;\nimport edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;\nimport edu.ncsu.csc.itrust.risk.factors.GenderFactor;\nimport edu.ncsu.csc.itrust.risk.factors.HypertensionFactor;\nimport edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;\nimport edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor;\nimport edu.ncsu.csc.itrust.risk.factors.SmokingFactor;\nimport edu.ncsu.csc.itrust.risk.factors.WeightFactor;\n\n/**\n * Checks to see if the given patient is at risk for Heart Disease\n * For details on what each method does, see {@link RiskChecker}\n * @author Andy\n * \n */\npublic class HeartDiseaseRisks extends RiskChecker {\n\tpublic HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\n\t\tsuper(factory, patientID);\n\t}\n\n\t@Override\n\tpublic boolean qualifiesForDisease() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tprotected List<PatientRiskFactor> getDiseaseRiskFactors() {\n\t\tList<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();\n\t\tfactors.add(new GenderFactor(patient, Gender.Male));\n\t\tfactors.add(new AgeFactor(patient, 45));\n\t\tfactors.add(new EthnicityFactor(patient, Hispanic, AfricanAmerican, AmericanIndian));\n\t\tfactors.add(new WeightFactor(currentHealthRecord, 30));\n\t\tfactors.add(new HypertensionFactor(currentHealthRecord));\n\t\tfactors.add(new CholesterolFactor(currentHealthRecord));\n\t\tfactors.add(new SmokingFactor(factory, patient.getMID()));\n\t\tfactors.add(new PriorDiagnosisFactor(factory, patient.getMID(), 250.0, 251.0));\n\t\tfactors.add(new FamilyHistoryFactor(factory, patient.getMID(), 350.0, 460.0));\n\t\treturn factors;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn \"Heart Disease\";\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c90"},"name":"src/edu/ncsu/csc/itrust/risk/Type1DiabetesRisks.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c8b"}]],"contents":"package edu.ncsu.csc.itrust.risk;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.enums.Ethnicity;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.NoHealthRecordsException;\nimport edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor;\nimport edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;\nimport edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;\nimport edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;\n\n/**\n * Checks to see if the given patient is at risk for Type 1 Diabetes.\n * For details on what each method does, see {@link RiskChecker}\n * \n * @author Andy\n * \n */\npublic class Type1DiabetesRisks extends RiskChecker {\n\tpublic Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException,\n\t\t\tNoHealthRecordsException {\n\t\tsuper(factory, patientID);\n\t}\n\n\t@Override\n\tpublic boolean qualifiesForDisease() {\n\t\treturn patient.getAge() < 12;\n\t}\n\n\t@Override\n\tprotected List<PatientRiskFactor> getDiseaseRiskFactors() {\n\t\tList<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();\n\t\tfactors.add(new EthnicityFactor(patient, Ethnicity.Caucasian));\n\t\tfactors.add(new FamilyHistoryFactor(factory, patient.getMID(), 250.0, 251.0));\n\t\tfactors.add(new ChildhoodInfectionFactor(factory, patient.getMID(), 79.30));\n\t\treturn factors;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn \"Type 1 Diabetes\";\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c91"},"name":"src/edu/ncsu/csc/itrust/risk/Type2DiabetesRisks.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c8b"}]],"contents":"package edu.ncsu.csc.itrust.risk;\n\nimport static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican;\nimport static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian;\nimport static edu.ncsu.csc.itrust.enums.Ethnicity.Asian;\nimport static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic;\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.NoHealthRecordsException;\nimport edu.ncsu.csc.itrust.risk.factors.AgeFactor;\nimport edu.ncsu.csc.itrust.risk.factors.CholesterolFactor;\nimport edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;\nimport edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;\nimport edu.ncsu.csc.itrust.risk.factors.HypertensionFactor;\nimport edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;\nimport edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor;\nimport edu.ncsu.csc.itrust.risk.factors.WeightFactor;\n\n/**\n * Checks to see if the given patient is at risk for Type II Diabetes.\n * For details on what each method does, see {@link RiskChecker}\n * \n * @author Andy\n * \n */\npublic class Type2DiabetesRisks extends RiskChecker {\n\tpublic Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException,\n\t\t\tNoHealthRecordsException {\n\t\tsuper(factory, patientID);\n\t}\n\n\t@Override\n\tpublic boolean qualifiesForDisease() {\n\t\treturn patient.getAge() >= 12;\n\t}\n\n\t@Override\n\tprotected List<PatientRiskFactor> getDiseaseRiskFactors() {\n\t\tList<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();\n\t\tfactors.add(new AgeFactor(patient, 45));\n\t\tfactors.add(new EthnicityFactor(patient, Hispanic, AfricanAmerican, AmericanIndian, Asian));\n\t\tfactors.add(new WeightFactor(currentHealthRecord, 25));\n\t\tfactors.add(new HypertensionFactor(currentHealthRecord));\n\t\tfactors.add(new CholesterolFactor(currentHealthRecord));\n\t\tfactors.add(new PriorDiagnosisFactor(factory, patient.getMID(), 250.0, 251.0));\n\t\tfactors.add(new FamilyHistoryFactor(factory, patient.getMID(), 250.0, 251.0));\n\t\treturn factors;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn \"Type 2 Diabetes\";\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c93"},"name":"WebRoot/auth/hcp/visitReminders.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c92"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.GetVisitRemindersAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.ReminderType\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.VisitFlag\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Visit Reminders\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nGetVisitRemindersAction action = new GetVisitRemindersAction(prodDAO, loggedInMID.longValue());\n%>\n<div align=\"center\">\n<h2>Patients Needing Visits</h2>\n\n<form action=\"visitReminders.jsp\" method=\"post\" id=\"reminderForm\">\n<input type=hidden id=\"formIsFilled\" value=\"true\" />\n<select id=\"ReminderType\" name=\"ReminderType\">\n<%\n\tfor (ReminderType rt : ReminderType.values()) {\n%>\n\t<option\t<%=rt.getTypeName().equals(request.getParameter(\"ReminderType\")) ? \" selected \" : \" \"%> \n\t\tvalue=\"<%=rt.getTypeName() %>\"><%=rt.getTypeName() %></option>\n<%\n\t}\n%>\n</select>\n<br />\n<br />\n<input type=\"submit\" id=\"getReminders\" name=\"getReminders\" value=\"Get Reminders\" />\n</form>\n<br />\n\n<%\nif(\"Get Reminders\".equals(request.getParameter(\"getReminders\"))) {\n\tList<VisitReminderReturnForm> reminders = action.getVisitReminders(ReminderType.getReminderType(request.getParameter(\"ReminderType\")));\n\tfor (VisitReminderReturnForm reminder : reminders) {\n%>\n\t\t<table class=\"fTable\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"2\">Patient Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Name:</td>\n\t\t\t\t<td >\n\t\t\t\t\t<a href=\"sendEmailNotification.jsp?mid=<%=reminder.getPatientID()%>\">\n\t\t\t\t\t<%=reminder.getFirstName()+\" \"+reminder.getLastName()%>\n\t\t\t\t\t</a>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Phone Number:</td>\n\t\t\t\t<td ><%=reminder.getPhoneNumber()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Reasons:</td>\n\t\t\t\t<td>\n<%\n\t\t\tfor(VisitFlag vf : reminder.getVisitFlags()) {\n%>\n\t\t\t\t\t<%=vf.getType() %>: &nbsp;&nbsp; <%=vf.getValue() %><br />\n<%\n\t\t\t}\n%>\n\t\t\t \t</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t\n<!--  This is the original Table format which has the first and last name on separate lines.  In favor of making\n\tthe link to send an email to a patient more friendly I've changed this to the above table which puts both names\n\ttogether.\n\t\t\n\t\t<table class=\"fTable\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"2\">Patient Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Last Name:</td>\n\t\t\t\t<td ><a href=\"sendEmailNotification.jsp?mid=<%=reminder.getPatientID()%>\"><%=reminder.getLastName()%></a></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">First Name:</td>\n\t\t\t\t<td ><%=reminder.getFirstName()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Phone Number:</td>\n\t\t\t\t<td ><%=reminder.getPhoneNumber()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Reasons:</td>\n\t\t\t\t<td>\n<%\n\t\t\tfor(VisitFlag vf : reminder.getVisitFlags()) {\n%>\n\t\t\t\t\t<%=vf.getType() %>: &nbsp;&nbsp; <%=vf.getValue() %><br />\n<%\n\t\t\t}\n%>\n\t\t\t \t</td>\n\t\t\t</tr>\n\t\t</table>\n-->\n\t\t<br />\n<%\n\t} \n}\n%>\n</div>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c94"},"name":"src/edu/ncsu/csc/itrust/action/GetVisitRemindersAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c92"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c96"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c97"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Calendar;\nimport edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.beans.VisitFlag;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.enums.Gender;\n\n/**\n * Gets the VisitReminders for a given patient Used by visitReminders.jsp\n * \n * @author laurenhayward\n * \n */\npublic class GetVisitRemindersAction {\n\n\t/**\n\t * Reminder Type enumeration.\n\t */\n\tpublic static enum ReminderType {\n\t\tDIAGNOSED_CARE_NEEDERS(\"Diagnosed Care Needers\"),\n\t\tFLU_SHOT_NEEDERS(\"Flu Shot Needers\"),\n\t\tIMMUNIZATION_NEEDERS(\"Immunization Needers\");\n\n\t\tprivate String typeName;\n\n\t\tprivate ReminderType(String typeName) {\n\t\t\tthis.typeName = typeName;\n\t\t}\n\n\t\tprivate static final HashMap<String, ReminderType> map = new HashMap<String, ReminderType>();\n\t\tstatic {\n\t\t\tfor (ReminderType rt : ReminderType.values()) {\n\t\t\t\tmap.put(rt.getTypeName(), rt);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Gets the ReminderType for the name passed as a param\n\t\t * \n\t\t * @param name\n\t\t * @return the ReminderType associated with the name\n\t\t */\n\t\tpublic static ReminderType getReminderType(String name) {\n\t\t\treturn map.get(name);\n\t\t}\n\n\t\t/**\n\t\t * Returns the type name as a string\n\t\t * \n\t\t * @return\n\t\t */\n\t\tpublic String getTypeName() {\n\t\t\treturn typeName;\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * Begin GetVisitRemindersAction code\n\t * \n\t */\n\tprivate TransactionDAO transDAO;\n\tprivate VisitRemindersDAO visitReminderDAO;\n\tprivate PatientDAO patientDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Set up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID MID of the person who is logged in\n\t * @throws iTrustException\n\t */\n\tpublic GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tvisitReminderDAO = factory.getVisitRemindersDAO();\n\t\tpatientDAO = factory.getPatientDAO();\n\t}\n\n\t/**\n\t * Returns a list of VisitReminderReturnForms for the type passed in as a param\n\t * \n\t * @param type\n\t *            the ReminderType\n\t * @return the list of VisitReminderReturnForms\n\t * @throws iTrustException\n\t * @throws FormValidationException\n\t */\n\tpublic List<VisitReminderReturnForm> getVisitReminders(ReminderType type) throws iTrustException, FormValidationException {\n\t\t\n\t\tif (null == type)\n\t\t\tthrow new iTrustException(\"Reminder Type DNE\");\n\t\t\n\t\ttransDAO.logTransaction(TransactionType.PATIENT_REMINDERS, loggedInMID, 0l, type.getTypeName());\n\t\tswitch (type) {\n\t\t\tcase DIAGNOSED_CARE_NEEDERS:\n\t\t\t\treturn stripDupes(visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID));\n\n\t\t\tcase FLU_SHOT_NEEDERS:\n\t\t\t\treturn visitReminderDAO.getFluShotDelinquents(loggedInMID);\n\t\t\t\t\n\t\t\tcase IMMUNIZATION_NEEDERS:\n\t\t\t\treturn getImmunizationNeeders(loggedInMID);\n\t\t\t\t\n\t\t\tdefault:\n\t\t\t\tthrow new iTrustException(\"Reminder Type DNE\");\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets a list of anyone who need immunizations\n\t * \n\t * @param mid the HCP whose patients are being checked\n\t * @return a list of all the people who need immunizations--done in a visit reminder\n\t * @throws iTrustException\n\t */\n\n\tprivate List<VisitReminderReturnForm> getImmunizationNeeders(long mid) throws iTrustException {\n\t\t\n\t\tList<VisitReminderReturnForm> formList;\n\t\tList<VisitReminderReturnForm> needList = new ArrayList<VisitReminderReturnForm>();\n\t\tString reason = \"\";\n\t\t// Get list of patients that designate this HCP\n\t\tformList = visitReminderDAO.getPatients(mid);\n\t\t\n\t\tfor (VisitReminderReturnForm r : formList) {\n\t\t\treason = checkImmunizations(r.getPatientID());\n\t\t\tif (0 < reason.length()) {\n\t\t\t\tneedList.add(r);\n\t\t\t\tr.addVisitFlag(new VisitFlag(VisitFlag.IMMUNIZATION, reason));\n\t\t\t}\n\t\t}\t\n\t\t\n\t\treturn needList;\n\t}\n\t\n\t\n\n\t/**\n\t * Checks a patient to see what immunizations they need\n\t * \n\t * @param pid patient to be checked\n\t * @return patient list of those lacking immunizations according to the schedule\n\t */\n\tprivate String checkImmunizations(long pid) throws iTrustException {\n\t\t\n\t\tString reason = \"\";\n\t\tList<ProcedureBean> procs = patientDAO.getProcedures(pid);\n\t\tPatientBean patient = patientDAO.getPatient(pid);\n\t\tlong patientAge = patient.getAgeInWeeks();\n\t\tGender gen = patient.getGender();\n\t\t\n\t\tint hepB = 0;\n\t\tlong hepBTime = 0;\n\n\t\tint rota = 0;\n\t\tlong rotaTime = 0;\n\n\t\tint diptet = 0;\n\t\tlong deptetTime = 0;\n\t\t\n\t\tint haemoflu = 0;\n\t\tlong haemofluTime = 0;\n\t\tlong haemofluTimeFirst = 0;\n\t\t\n\t\tint pneumo = 0;\n\t\tlong pneumoTime = 0;\n\t\tlong pneumofluTimeFirst = 0;\n\t\t\n\t\tint polio = 0;\n\t\tlong polioTime = 0;\n\t\t\n\t\tint measles = 0;\n\t\tlong measlesTime = 0;\n\t\t\n\t\tint varicella = 0;\n\t\tlong varicellaTime = 0;\n\t\t\n\t\tint hepA = 0;\n\t\tlong hepATime = 0;\n\t\t\n\t\tint hpv = 0;\n\t\tlong hpvTime = 0;\n\t\t\n\t\tfor (ProcedureBean proc: procs) {\n\t\t\n\t\t\tString cpt = proc.getCPTCode();\n\t\t\t\n\t\t\t// Hep B (90371)\n\t\t\tif (cpt.equals(\"90371\")) {\n\t\t\t\thepB++;\n\t\t\t\thepBTime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\t\n\t\t\t// Rotavirus (90681)\n\t\t\telse if (cpt.equals(\"90681\")) {\n\t\t\t\trota++;\n\t\t\t\trotaTime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\n\t\t\t// Diptheria, Tetanus, Pertussis (90696)\n\t\t\telse if (cpt.equals(\"90696\")) {\n\t\t\t\tdiptet++;\n\t\t\t\tdeptetTime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\n\t\t\t// Haemophilus influenza (90645)\n\t\t\telse if (cpt.equals(\"90645\")) {\n\t\t\t\tif (0 == haemoflu)\n\t\t\t\t\thaemofluTimeFirst = proc.getDate().getTime();\n\t\t\t\t\n\t\t\t\thaemoflu++;\n\t\t\t\thaemofluTime = proc.getDate().getTime();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t// Pneumococcal (90669)\n\t\t\telse if (cpt.equals(\"90669\")) {\n\t\t\t\tif (0 == pneumo)\n\t\t\t\t\tpneumofluTimeFirst = proc.getDate().getTime();\n\t\t\t\tpneumo++;\n\t\t\t\tpneumoTime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\n\t\t\t// Poliovirus (90712)\n\t\t\telse if (cpt.equals(\"90712\")) {\n\t\t\t\tpolio++;\n\t\t\t\tpolioTime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\n\t\t\t// Measles, Mumps, Rubella (90707)\n\t\t\telse if (cpt.equals(\"90707\")) {\n\t\t\t\tmeasles++;\n\t\t\t\tmeaslesTime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\n\t\t\t// Varicella (90396)\n\t\t\telse if (cpt.equals(\"90396\")) {\n\t\t\t\tvaricella++;\n\t\t\t\tvaricellaTime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\n\t\t\t// Hep A (90633)\n\t\t\telse if (cpt.equals(\"90633\")) {\n\t\t\t\thepA++;\n\t\t\t\thepATime = proc.getDate().getTime();\n\t\t\t}\n\t\t\t\n\t\t\t// Human Papillomaavirus (90649)\n\t\t\telse if (cpt.equals(\"90649\")) {\n\t\t\t\thpv++;\n\t\t\t\thpvTime = proc.getDate().getTime();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (3 > hepB) {\n\t\t\treason += testHepB(hepB, patientAge, hepBTime);\n\t\t}\n\t\t\n\t\tif (3 > rota) {\n\t\t\treason += testRotaVirus(rota, patientAge, rotaTime);\n\t\t}\n\t\t\n\t\tif (6 > diptet) {\n\t\t\treason += testDipTet(diptet, patientAge, deptetTime);\n\t\t}\n\t\t\n\t\tif (3 > haemoflu) {\n\t\t\treason += testHaemoFlu(haemoflu, patientAge, haemofluTime, haemofluTimeFirst);\n\t\t}\n\t\t\n\t\tif (4 > pneumo) {\n\t\t\treason += testPneumo(pneumo, patientAge, pneumoTime, pneumofluTimeFirst);\n\t\t}\n\t\t\n\t\tif (3 > polio) {\n\t\t\treason += testPolio(polio, patientAge, polioTime);\n\t\t}\n\t\t\n\t\tif (2 > measles) {\n\t\t\treason += testMeasles(measles, patientAge, measlesTime);\n\t\t}\n\t\t\n\t\tif (2 > varicella) {\n\t\t\treason += testVaricella(varicella, patientAge, varicellaTime);\n\t\t}\n\t\t\n\t\tif (2 > hepA) {\n\t\t\treason += testHepA(hepA, patientAge, hepATime);\n\t\t}\n\t\t\n\t\tif (3 > hpv && gen.getName().equals(\"Female\")) {\n\t\t\treason += testHPV(hpv, patientAge, hpvTime);\n\t\t}\n\t\n\t\treturn reason;\n\t}\n\t\n\t\n\t/**\n\t * Checks to see if a patient needs the HPV immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testHPV(int count, long patientAge, long time) {\n\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (468 <= patientAge)\n\t\t\t\treason += \"90649 Human Papillomavirus (9 years) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (476 <= patientAge && 8 <= weeks)\n\t\t\t\treason += \"90649 Human Papillomavirus (9 years, 2 months) \";\n\t\t}\n\t\telse if (2 == count) {\n\t\t\tif (494 <= patientAge && 16 <= weeks)\n\t\t\t\treason += \"90649 Human Papillomavirus (9 years, 6 months) \";\n\t\t}\n\t\t\n\t\treturn reason;\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Hepatits A immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testHepA(int count, long patientAge, long time) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (52 <= patientAge)\n\t\t\t\treason += \"90633 Hepatits A (12 months) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (78 <= patientAge && 26 <= weeks)\n\t\t\t\treason += \"90633 Hepatits A (18 months) \";\n\t\t}\n\t\t\n\t\treturn reason;\t\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Varicella immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testVaricella(int count, long patientAge, long time) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (52 <= patientAge)\n\t\t\t\treason += \"90396 Varicella (12 months) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (208 <= patientAge && 12 <= weeks)\n\t\t\t\treason += \"90396 Varicella (4 years) \";\n\t\t}\n\t\t\n\t\treturn reason;\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testMeasles(int count, long patientAge, long time) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (52 <= patientAge)\n\t\t\t\treason += \"90707 Measles, Mumps, Rubekka (12 months) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (208 <= patientAge && 12 <= weeks)\n\t\t\t\treason += \"90707 Measles, Mumps, Rubekka (4 years) \";\n\t\t}\n\t\t\n\t\treturn reason;\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Polio immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testPolio(int count, long patientAge, long time) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (6 <= patientAge)\n\t\t\t\treason += \"90712 Poliovirus (6 weeks) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (16 <= patientAge && 4 <= weeks)\n\t\t\t\treason += \"90712 Poliovirus (4 months) \";\n\t\t}\n\t\telse if (2 == count) {\n\t\t\tif (26 <= patientAge)\n\t\t\t\treason += \"90712 Poliovirus (6 months) \";\t\t\t\t\n\t\t}\n\t\t\n\t\treturn reason;\t\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Pneumococcal immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testPneumo(int count, long patientAge, long time, long firstDoseTime) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\tlong ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7)); \n\t\t\n\t\tif (0 == count) {\n\t\t\tif (6 <= patientAge)\n\t\t\t\treason += \"90669 Pneumococcal (6 weeks) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (16 <= patientAge && 52 > ageFirst && 4 <= weeks)\n\t\t\t\treason += \"90669 Pneumococcal (4 months) \";\n\t\t\telse if (16 <= patientAge && 52 <= ageFirst && 60 >= ageFirst && 8 <= weeks)\n\t\t\t\treason += \"90669 Pneumococcal (4 months) \";\n\t\t}\n\t\telse if (2 == count) {\n\t\t\tif (26 <= patientAge && 4 <= weeks && 52 >= ageFirst)\n\t\t\t\treason += \"90669 Pneumococcal (6 months) \";\t\t\t\t\n\t\t}\n\t\telse if (3 == count) {\n\t\t\tif (52 <= patientAge && 8 <= weeks && 52 >= ageFirst)\n\t\t\t\treason += \"90669 Pneumococcal (12 months) \";\t\t\t\t\n\t\t}\n\t\treturn reason;\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Haemophilus Infulenzae immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testHaemoFlu(int count, long patientAge, long time, long firstDoseTime) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\tlong ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7)); \n\t\t\t\n\t\tif (0 == count) {\n\t\t\tif (6 <= patientAge)\n\t\t\t\treason += \"90645 Haemophilus influenzae (6 weeks) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (16 <= patientAge && 52 > ageFirst && 4 <= weeks)\n\t\t\t\treason += \"90645 Haemophilus influenzae (4 months) \";\n\t\t\telse if (16 <= patientAge && 52 <= ageFirst && 60 >= ageFirst && 8 <= weeks)\n\t\t\t\treason += \"90645 Haemophilus influenzae (4 months) \";\n\t\t}\n\t\telse if (2 == count) {\n\t\t\tif (26 <= patientAge && 4 <= weeks && 52 > ageFirst)\n\t\t\t\treason += \"90645 Haemophilus influenzae (6 months) \";\n\t\t}\n\t\t\n\t\treturn reason;\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testDipTet(int count, long patientAge, long time) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (6 <= patientAge)\n\t\t\t\treason += \"90696 Diphtheria, Tetanus, Pertussis (6 weeks) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (16 <= patientAge && 4 <= weeks )\n\t\t\t\treason += \"90696 Diphtheria, Tetanus, Pertussis (4 months) \";\n\t\t}\n\t\telse if (2 == count) {\n\t\t\tif (26 <= patientAge && 4 <= weeks)\n\t\t\t\treason += \"90696 Diphtheria, Tetanus, Pertussis (6 months) \";\t\t\t\t\n\t\t}\n\t\telse if (3 == count) {\n\t\t\tif (15 <= patientAge && 26 <= weeks)\n\t\t\t\treason += \"90696 Diphtheria, Tetanus, Pertussis (15 weeks) \";\n\t\t}\n\t\telse if (4 == count) {\n\t\t\tif (208 <= patientAge && 26 <= weeks)\n\t\t\t\treason += \"90696 Diphtheria, Tetanus, Pertussis (4 years) \";\n\t\t}\n\t\telse if (5 == count) {\n\t\t\tif (572 <= patientAge && 260 <= weeks)\n\t\t\t\treason += \"90696 Diphtheria, Tetanus, Pertussis (11 years) \";\t\t\t\t\n\t\t}\n\t\t\n\t\treturn reason;\n\t}\n\t\n\t/**\n\t * Checks to see if a patient needs the Rotavirus immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\t\n\tpublic static String testRotaVirus(int count, long patientAge, long time) {\n\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (6 <= patientAge)\n\t\t\t\treason += \"90681 Rotavirus (6 weeks) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (16 <= patientAge && 4 <= weeks)\n\t\t\t\treason += \"90681 Rotavirus (4 months) \";\n\t\t}\n\t\telse if (2 == count) {\n\t\t\tif (26 <= patientAge && 4 <= weeks )\n\t\t\t\treason += \"90681 Rotavirus (6 months) \";\t\t\t\t\n\t\t}\n\t\t\n\t\treturn reason;\n\t}\n\n\t\n\t/**\n\t * Checks to see if a patient needs the Hepatitis B immunization\n\t * \n\t * @param count which immunization they are on\n\t * @param patientAge how old the patient is\n\t * @param time what the current date is\n\t * @return when the immunization should be given\n\t */\n\tpublic static String testHepB(int count, long patientAge, long time) {\n\t\t\n\t\tString reason = \"\";\n\t\tlong weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);\n\t\t\n\t\tif (0 == count) {\n\t\t\tif (0 < patientAge)\n\t\t\t\treason += \"90371 Hepatitis B (birth) \";\n\t\t}\n\t\telse if (1 == count) {\n\t\t\tif (4 <= patientAge && 4 <= weeks)\n\t\t\t\treason += \"90371 Hepatitis B (1 month) \";\n\t\t}\n\t\telse if (2 == count) {\n\t\t\tif (26 <= patientAge && 8 <= weeks)\n\t\t\t\treason += \"90371 Hepatitis B (6 months) \";\t\t\t\t\n\t\t}\n\t\t\n\t\treturn reason;\n\t}\n\t\n\t\n\t/**\n\t * Removes duplicates from a list of VisitReminderReturnForms\n\t * \n\t * @param patients list of visit remindersto be cleaned up\n\t * @return cleaned up list of visit reminders\n\t */\n\tprivate List<VisitReminderReturnForm> stripDupes(List<VisitReminderReturnForm> patients) {\n\t\tif (null == patients)\n\t\t\treturn null;\n\t\tif (0 == patients.size())\n\t\t\treturn patients;\n\t\tList<VisitReminderReturnForm> retPatients = new ArrayList<VisitReminderReturnForm>();\n\t\tVisitReminderReturnForm temp = patients.get(0);\n\t\tretPatients.add(temp);\n\t\tfor (VisitReminderReturnForm vr : patients) {\n\t\t\tif (vr.getPatientID() != temp.getPatientID())\n\t\t\t\tretPatients.add(vr);\n\t\t\ttemp = vr;\n\t\t}\n\t\treturn retPatients;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c95"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/VisitRemindersDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c92"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c96"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c97"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.DateUtil;\nimport edu.ncsu.csc.itrust.beans.VisitFlag;\nimport edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;\nimport edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used for queries related to patient reminders\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class VisitRemindersDAO {\n\tprivate DAOFactory factory;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic VisitRemindersDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns a list of patients associated with a given HCP.\n\t * \n\t * @param hcpid The MID of the HCP in question.\n\t * @return A java.util.List of Visit Reminder Forms.\n\t */\n\tpublic List<VisitReminderReturnForm> getPatients(long hcpid) throws DBException {\n\t\t\n\t\n\t\tVisitReminderReturnForm temp;\n\t\tVisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\n\t\tList<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\n\t\t\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\n\t\t\t\t\t  \"SELECT DISTINCT\" \n\t\t\t\t\t+ \"       ? as hid, \"\n\t\t\t\t\t+ \"       dhcp.patientid, \"\n\t\t\t\t\t+ \"       p.lastName, \"\n\t\t\t\t\t+ \"       p.firstName, \"\n\t\t\t\t\t+ \"       p.phone1, \"\n\t\t\t\t\t+ \"       p.phone2, \"\n\t\t\t\t\t+ \"       p.phone3 \"\n\t\t\t\t\t+ \"  FROM \"\n\t\t\t\t\t+ \"       Patients p, \"\n\t\t\t\t\t+ \"       declaredhcp dhcp \"\n\t\t\t\t\t+ \" WHERE \"\n\t\t\t\t\t+ \"\t\tdhcp.hcpid = ? \"\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ \"     p.MID = dhcp.patientid \"\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ \"\t\tp.dateofdeath is null \"\n\t\t\t\t\t+ \" AND \"\n\t\t\t\t\t+ \"     p.dateofbirth > DATE_SUB(CURDATE(), INTERVAL 19 YEAR) \"\n\t\t\t\t\t);\n\n\t\t\tps.setLong(1, hcpid);\n\t\t\tps.setLong(2, hcpid);\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\ttemp = loader.loadSingle(rs);\n\t\t\t\tpatients.add(temp);\n\t\t\t}\n\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} \n\t\tfinally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t\treturn patients;\n\t}\n\n\n\t/**\n\t * Returns a list of patients who need a visit for this HCP. This means:\n\t * \n\t * Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -\n\t * Circulatory-System Disease: [ 390.00 , 459.99 ]\n\t * \n\t * @param hcpid The MID of the HCP in question.\n\t * @return A java.util.List of visit reminders.\n\t */\n\tpublic List<VisitReminderReturnForm> getDiagnosedVisitNeeders(long hcpid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\n\t\t\t\t\t  \"SELECT DISTINCT\" \n\t\t\t\t\t+ \"       ? as hid, \"\n\t\t\t\t\t+ \"       ov.PatientID, \"\n\t\t\t\t\t+ \"       p.lastName, \"\n\t\t\t\t\t+ \"       p.firstName, \"\n\t\t\t\t\t+ \"       p.phone1, \"\n\t\t\t\t\t+ \"       p.phone2, \"\n\t\t\t\t\t+ \"       p.phone3, \"\n\t\t\t\t\t+ \"       ovd.ICDCode, \"\n\t\t\t\t\t+ \"       ov.visitDate \"\n\t\t\t\t\t+ \"  FROM \"\n\t\t\t\t\t+ \"       Patients p, \"\n\t\t\t\t\t+ \"       OfficeVisits ov, \"\n\t\t\t\t\t+ \"       OVDiagnosis ovd \"\n\t\t\t\t\t+ \" WHERE \"\n\t\t\t\t\t+ \"       p.MID = ov.PatientID \"\n\t\t\t\t\t+ \"   AND \"\n\t\t\t\t\t+ \"       ov.ID = ovd.VisitID \"\n\t\t\t\t\t+ \"   AND \"\n\t\t\t\t\t+ \"       p.DateOfDeath is null \"\n\t\t\t\t\t+ \"   AND \"\n\t\t\t\t\t+ \"       ov.visitDate <= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) \"\n\t\t\t\t\t+ \"   AND \"\n\t\t\t\t\t+ \"       ( \"\n\t\t\t\t\t+ \"            ovd.ICDCode BETWEEN ? AND ? \" //250.00 AND 250.99\n\t\t\t\t\t+ \"         OR \"\n\t\t\t\t\t+ \"            ovd.ICDCode BETWEEN ? AND ? \" //390.00 AND 459.99\n\t\t\t\t\t+ \"         OR \"\n\t\t\t\t\t+ \"            ovd.ICDCode BETWEEN ? AND ? \" //493.00 AND 493.99\n\t\t\t\t\t+ \"        )\"\n\t\t\t\t\t+ \"GROUP BY \"\n\t\t\t\t\t+ \"       p.MID \"\n\t\t\t\t\t+ \"ORDER BY \"\n\t\t\t\t\t+ \" p.lastName, p.firstName, ov.PatientID \");\n\n\t\t\tps.setLong(1, hcpid);\n\t\t\t\n\t\t\tps.setFloat(2, 250.0f);\n\t\t\tps.setFloat(3, 250.99f);\n\t\t\t\t\n\t\t\tps.setFloat(4, 390.0f);\n\t\t\tps.setFloat(5, 459.99f);\n\t\t\t\t\n\t\t\tps.setFloat(6, 493.0f);\n\t\t\tps.setFloat(7, 493.99f);\n\t\t\t\n\t\t\trs = ps.executeQuery();\n\t\t\tList<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\n\t\t\tVisitReminderReturnForm temp;\n\t\t\tVisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\n\t\t\twhile (rs.next()) {\n\t\t\t\ttemp = loader.loadSingle(rs);\n\t\t\t\ttemp.addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(8)));\n\t\t\t\ttemp.addVisitFlag(new VisitFlag(VisitFlag.LAST_VISIT, rs.getString(9)));\n\t\t\t\tpatients.add(temp);\n\t\t\t}\n\t\t\treturn patients;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of old people who need a flu shot\n\t * \n\t * CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months\n\t * 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if\n\t * not in 09 - 12\n\t * \n\t * Determines current date and calls one of two private methods these methods return different sets of\n\t * people - a: people who haven't had a flu shot yet this year and need one - b: people who missed last\n\t * year's flu shot and need a check-up\n\t * \n\t * @return A java.util.List of Visit Reminder Forms.\n\t * @param hcpid The MID of the HCP in question.\n\t * @param patientBirthday The birthday of the patient in question.\n\t * @throws DBException\n\t */\n\tpublic List<VisitReminderReturnForm> getFluShotDelinquents(long hcpid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\t/*\n\t\t * Fall 2007 Bug Fix: Use the correct range for a zero-based calendar (eg January is 0)\n\t\t * \n\t\t */\n\t\tboolean thisYear = DateUtil.currentlyInMonthRange(8, 11);\n\n\t\tString flagType = thisYear ? VisitFlag.MISSING_MEDICATION : VisitFlag.MISSED_MEDICATION;\n\n\t\tjava.sql.Date september = new java.sql.Date(0l), december = new java.sql.Date(0l);\n\t\tDateUtil.setSQLMonthRange(september, 8, thisYear ? 0 : 1, december, 11, thisYear ? 0 : 1);\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT DISTINCT \"\n\t\t\t\t\t+ \"? as hid, ov.patientid, p.lastname, p.firstname, \" + \"p.phone1, p.phone2, p.phone3 \"\n\t\t\t\t\t+ \"FROM OfficeVisits ov, Patients p \" + \"WHERE ov.patientid=p.mid \"\n\t\t\t\t\t+ \"AND p.dateofdeath IS NULL \"\n\t\t\t\t\t+ \"AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) \" + \"AND patientid NOT IN \"\n\t\t\t\t\t+ \"(SELECT patientid FROM OfficeVisits ov, OVMedication om \" + \"WHERE ov.id=om.visitid \"\n\t\t\t\t\t+ \"AND NDCode IN (90656, 90658, 90660) \" + \"AND ((StartDate BETWEEN ? AND ?) \"\n\t\t\t\t\t+ \"OR (EndDate BETWEEN ? AND ?))) \" + \"ORDER BY lastname, firstname, ov.patientid\");\n\t\t\tps.setLong(1, hcpid);\n\t\t\tps.setDate(2, september);\n\t\t\tps.setDate(3, december);\n\t\t\tps.setDate(4, september);\n\t\t\tps.setDate(5, december);\n\t\t\trs = ps.executeQuery();\n\t\t\tList<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\n\t\t\tVisitReminderReturnForm temp;\n\t\t\tVisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\n\t\t\twhile (rs.next()) {\n\t\t\t\ttemp = loader.loadSingle(rs);\n\t\t\t\ttemp.addVisitFlag(new VisitFlag(flagType, \"Flu Shot\"));\n\t\t\t\tpatients.add(temp);\n\t\t\t}\n\t\t\treturn patients;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\t\n}"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c99"},"name":"src/edu/ncsu/csc/itrust/validate/HospitalBeanValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c98"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c9a"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.UpdateHospitalListAction;\nimport edu.ncsu.csc.itrust.beans.HospitalBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Validates the input for hospital beans, {@link UpdateHospitalListAction}\n * \n * @author Andy\n * \n */\npublic class HospitalBeanValidator extends BeanValidator<HospitalBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic HospitalBeanValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(HospitalBean h) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"Hospital ID\", h.getHospitalID(), ValidationFormat.HOSPITAL_ID,\n\t\t\t\tfalse));\n\t\terrorList.addIfNotNull(checkFormat(\"Hospital Name\", h.getHospitalName(),\n\t\t\t\tValidationFormat.HOSPITAL_NAME, false));\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c9c"},"name":"WebRoot/auth/admin/hospitalListing.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c9b"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c9f"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.net.URLEncoder\" %>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.*\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HospitalBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.UpdateHospitalListAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Maintain Hospital Listing and Assignments\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tString headerMessage = \"Current Hospital Listing\";\n\t\n\tUpdateHospitalListAction hospUpdater =\n\t\tnew UpdateHospitalListAction(DAOFactory.getProductionInstance(), loggedInMID);\n\t\n\tif (request.getParameter(\"add\") != null || request.getParameter(\"update\") != null) {\n\t\tHospitalBean hosp = new BeanBuilder<HospitalBean>().build(request.getParameterMap(), new HospitalBean());\n\t\ttry {\n\t\t\theaderMessage = (request.getParameter(\"add\") != null)\n\t\t\t\t\t? hospUpdater.addHospital(hosp)\n\t\t\t\t\t: hospUpdater.updateInformation(hosp);\n\t\t} catch(FormValidationException e) {\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t\theaderMessage = \"Validation Errors\";\n\t\t}\n\t}\n\tString headerColor = (headerMessage.indexOf(\"Error\") > -1)\n\t\t\t? \"#ffcccc\"\n\t\t\t: \"#00CCCC\";\n%>\n\n<div align=center>\n<form name=\"mainForm\" method=\"post\">\n<input type=\"hidden\" id=\"updateID\" name=\"updateID\" value=\"\">\n<input type=\"hidden\" id=\"oldName\" name=\"oldName\" value=\"\">\n<script type=\"text/javascript\">\n\tfunction fillUpdate(id) {\n\t\tdocument.getElementById(\"hospitalID\").value = id;\n\t\tdocument.getElementById(\"hospitalName\").value\n\t\t\t= unescape(document.getElementById(\"UPD\" + id).value);\n\t\tdocument.getElementById(\"oldDescrip\").value\n\t\t\t= unescape(document.getElementById(\n\t\t\t\t\t\"UPD\" + id).value);\n\t}\n</script>\n\n<h3>Hospital Listing</h3>\n\n<span class=\"iTrustMessage\"><%=headerMessage %></span>\n\n<br />\n<br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"2\" >Update Hospital List</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Hospital ID</th>\n\t\t<th>Hospital Name</th></tr>\n\t<tr>\n\t\t<td><input type=\"text\" name=\"hospitalID\" id=\"hospitalID\" size=\"10\" maxlength=\"10\" /></td>\n\t\t<td><input type=\"text\" name=\"hospitalName\" id=\"hospitalName\"\n\t\t\t\t\t\t\t\tsize=\"30\" maxlength=\"100\" /></td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" name=\"add\" value=\"Add Hospital\" />\n<input type=\"submit\" name=\"update\" value=\"Update Hospital Information\" />\n<br />\n<br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"2\">Current Hospitals</th></tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Hospital ID</th>\n\t\t<th>Hospital Name</th>\n\t</tr>\n\t<%\n\t\tList<HospitalBean> hospList =\n\t\t\tDAOFactory.getProductionInstance().getHospitalsDAO().getAllHospitals();\n\t\tString tempID = \"\";\n\t\tString tempName = \"\";\n\t\tString escapedName = \"\";\n\t\tfor (HospitalBean hospEntry : hospList) {\n\t\t\ttempID = hospEntry.getHospitalID() + \"\";\n\t\t\ttempName = hospEntry.getHospitalName();\n\t\t\tescapedName = URLEncoder.encode(tempName, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n\t%>\n\t\t<tr>\n\t\t\t<td ><%=tempID %></td>\n\t\t\t<td ><a href=\"javascript:void(0)\" \n\t\t\t\t\tonclick=\"fillUpdate('<%=tempID %>')\"><%=tempName %></a>\n\t\t\t\t<input type=\"hidden\"\n\t\t\t\t\t\tid=\"UPD<%=tempID %>\"\n\t\t\t\t\t\tname=\"UPD<%=tempID %>\"\n\t\t\t\t\t\tvalue=\"<%=escapedName %>\">\n\t\t\t</td>\n\t\t</tr>\n\t<% } %>\n</table>\n</form>\n</div>\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c9d"},"name":"src/edu/ncsu/csc/itrust/action/UpdateHospitalListAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c9b"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c9f"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.beans.HospitalBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.HospitalBeanValidator;\n\n/**\n * Handles updating the list of hospitals Used by hospitalListing.jsp\n * \n * @author laurenhayward\n * \n */\npublic class UpdateHospitalListAction {\n\tprivate long performerID;\n\tprivate HospitalsDAO hospDAO;\n\tprivate TransactionDAO transDAO;\n\n\t/**\n\t * Set up\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param performerID The MID of the person updating the hospitals.\n\t */\n\tpublic UpdateHospitalListAction(DAOFactory factory, long performerID) {\n\t\tthis.hospDAO = factory.getHospitalsDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.performerID = performerID;\n\t}\n\n\t/**\n\t * Adds a hosptial using the HospitalBean passed as a param\n\t * \n\t * @param hosp\n\t *            the new hospital listing\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String addHospital(HospitalBean hosp) throws FormValidationException {\n\t\tnew HospitalBeanValidator().validate(hosp);\n\t\ttry {\n\t\t\tif (hospDAO.addHospital(hosp)) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.MAINTAIN_HOSPITALS, performerID, 0L,\n\t\t\t\t\t\t\"added hospital \" + hosp.getHospitalName());\n\t\t\t\treturn \"Success: \" + hosp.getHospitalID() + \" - \" + hosp.getHospitalName() + \" added\";\n\t\t\t} else\n\t\t\t\treturn \"The database has become corrupt. Please contact the system administrator for assistance.\";\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t} catch (iTrustException e) {\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a\n\t * param\n\t * \n\t * @param hosp\n\t *            the new hospital information with the same hospital id\n\t * @return Status message\n\t * @throws FormValidationException\n\t */\n\tpublic String updateInformation(HospitalBean hosp) throws FormValidationException {\n\t\tnew HospitalBeanValidator().validate(hosp);\n\t\ttry {\n\t\t\tint rows = 0;\n\t\t\treturn ((0 == (rows = updateHospital(hosp))) ? \"Error: Hospital not found.\" : \"Success: \" + rows\n\t\t\t\t\t+ \" row(s) updated\");\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t}\n\t}\n\n\t/**\n\t * Updates hospital\n\t * \n\t * @param hosp new information\n\t * @return id for the updated hospital\n\t * @throws DBException\n\t */\n\tprivate int updateHospital(HospitalBean hosp) throws DBException {\n\t\treturn hospDAO.updateHospital(hosp);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c520258db2dac01e7c9e"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/HospitalsDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c9b"}],["requirement_raw",{"$oid":"5ea8c520258db2dac01e7c9f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc3"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.HospitalBean;\nimport edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Used for managing hospitals\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class HospitalsDAO {\n\tprivate DAOFactory factory;\n\tprivate HospitalBeanLoader hospitalLoader = new HospitalBeanLoader();\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic HospitalsDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns a list of all hospitals sorted alphabetically\n\t * \n\t * @return A java.util.List of HospitalBeans.\n\t * @throws DBException\n\t */\n\tpublic List<HospitalBean> getAllHospitals() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Hospitals ORDER BY HospitalName\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn hospitalLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a particular hospital given its ID\n\t * \n\t * @param id The String ID of the hospital.\n\t * @return A HospitalBean representing this hospital.\n\t * @throws DBException\n\t */\n\tpublic HospitalBean getHospital(String id) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Hospitals WHERE HospitalID = ?\");\n\t\t\tps.setString(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next())\n\t\t\t\treturn hospitalLoader.loadSingle(rs);\n\t\t\treturn null;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a hospital\n\t * \n\t * @param hosp The HospitalBean object to insert.\n\t * @return A boolean indicating whether the insertion was successful.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO Hospitals (HospitalID, HospitalName) \" + \"VALUES (?,?)\");\n\t\t\tps.setString(1, hosp.getHospitalID());\n\t\t\tps.setString(2, hosp.getHospitalName());\n\t\t\treturn (1 == ps.executeUpdate());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"Error: Hospital already exists.\");\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a particular hospital's description. Returns the number of rows affected (should be 1)\n\t * \n\t * @param hosp The HospitalBean to update.\n\t * @return An int indicating the number of affected rows.\n\t * @throws DBException\n\t */\n\tpublic int updateHospital(HospitalBean hosp) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE Hospitals SET HospitalName = ? \" + \"WHERE HospitalID = ?\");\n\t\t\tps.setString(1, hosp.getHospitalName());\n\t\t\tps.setString(2, hosp.getHospitalID());\n\t\t\treturn ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Assign an HCP to a hospital. If they have already been assigned to that hospital, then an\n\t * iTrustException is thrown.\n\t * \n\t * @param hcpID The HCP's MID to assign to the hospital.\n\t * @param hospitalID The ID of the hospital to assign them to.\n\t * @return A boolean indicating whether the assignment was a success.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean assignHospital(long hcpID, String hospitalID) throws DBException, iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO HCPAssignedHos (HCPID, HosID) VALUES (?,?)\");\n\t\t\tps.setLong(1, hcpID);\n\t\t\tps.setString(2, hospitalID);\n\t\t\treturn (1 == ps.executeUpdate());\n\t\t} catch (SQLException e) {\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"HCP \" + hcpID + \" already assigned to hospital \" + hospitalID);\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Unassigns an HCP to a hospital. Returns whether or not any changes were made\n\t * \n\t * @param hcpID The MID of the HCP to remove.\n\t * @param hospitalID The ID of the hospital being removed from.\n\t * @return A boolean indicating success.\n\t * @throws DBException\n\t */\n\tpublic boolean removeHospitalAssignment(long hcpID, String hospitalID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM HCPAssignedHos WHERE HCPID = ? AND HosID = ?\");\n\t\t\tps.setLong(1, hcpID);\n\t\t\tps.setString(2, hospitalID);\n\t\t\treturn (1 == ps.executeUpdate());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all hospital assignments for a particular HCP. Returns the number of rows affected.\n\t * \n\t * @param hcpID The MID of the HCP.\n\t * @return An int representing the number of hospital assignments removed.\n\t * @throws DBException\n\t */\n\tpublic int removeAllHospitalAssignmentsFrom(long hcpID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM HCPAssignedHos WHERE HCPID = ?\");\n\t\t\tps.setLong(1, hcpID);\n\t\t\treturn ps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ca3"},"name":"WebRoot/auth/patient/viewPrescriptionRecords.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca2"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1a"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HCPLinkBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import= \"java.util.ArrayList\"%>\n<%@page import= \"java.util.Date\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\" %>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Get My Prescription Report\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nList<HCPLinkBean> LinkList = new ArrayList<HCPLinkBean>();\nPatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue()); \nViewPrescriptionRecordsAction action = new ViewPrescriptionRecordsAction(prodDAO,loggedInMID.longValue());\nList<PatientBean> representees = action.getRepresentees();\nboolean showMine = false;\nboolean showOther = false;\nboolean adEvent = false;\nboolean showAdverseButton = false;\n\t\n\tif (request.getParameter(\"mine\") != null && request.getParameter(\"mine\").equals(\"View Current\")) showMine = true;\n\tif (request.getParameter(\"other\") != null && request.getParameter(\"other\").equals(\"View\")) showOther = true;\n\tif (request.getParameter(\"representee\") != null && request.getParameter(\"representee\").equals(\"-1\")) showOther = false;\n\tif (request.getParameter(\"adevent\") != null && request.getParameter(\"adevent\").equals(\"Report Adverse Events\")){\n\t\tadEvent = true;\n\t\tint check[] = new int[100];\n\t\tboolean oneChecked = false;\n\t\tfor(int i = 0; i<100; i++){\n\t\t\tif (null != request.getParameter(\"checking\"+i) && request.getParameter(\"checking\"+i).toLowerCase().equals(\"y\")) {\n\t\t\t\tcheck[i] = 1;\n\t\t\t\toneChecked = true;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tList<HCPLinkBean> l = (List<HCPLinkBean>) session.getAttribute(\"beanlist\");\n\t\tint i = 0;\n\t\tfor(HCPLinkBean b : l){\n\t\t\tif(check[i] == 1) b.setChecked(true);\n\t\t\telse b.setChecked(false);\n\t\t\ti++;\n\t\t}\n\t\tsession.setAttribute(\"beanlist\", l);\n\t\tif(oneChecked){\n\t\t\tresponse.sendRedirect(\"reportAdverseEvent.jsp?prescriptions=yes\");\n\t\t}\n\t\telse{%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=\"Must report on at least one prescription\" %></span>\n\t\t</div>\n\t\t<% }\n\t}\n\t\n%>\n<div align=\"center\">\n\t<form action=\"viewPrescriptionRecords.jsp\" method=\"post\">\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<span style=\"font-size: 24px; font-weight: bold;\">View My Own Prescriptions</span>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type=\"submit\" name=\"mine\" value=\"View Current\"></input>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<span style=\"font-size: 24px; font-weight: bold;\">View Other's Prescriptions</span>\n\t\t\t\t</td>\n\t\t\t\n<%\t\n\t\tif (representees.size() > 0) { \n%>\n\t\t\t\t<td>\n\t\t\t\t\t<select name=\"representee\">\n\t\t\t\t\t\t<option value=\"-1\"></option>\n<%\n\t\t\tint index = 0;\n\t\t\tfor (PatientBean representee : representees) { \n%>\n\t\t\t\t\t\t<option value=\"<%=index %>\"><%=representee.getFullName()%></option>\n<%\n\t\t\t\tindex ++;\n\t\t\t} \n%>\n\t\t\t\t\t</select>\n\t\t\t\t\t<input type=\"submit\" name=\"other\" value=\"View\"></input>\n\t\t\t\t</td>\n<%\t\n\t\t} else { \n%>\n\t\t\t\t<td>\n\t\t\t\t\t<i>You are not anyone's representative</i>\n\t\t\t\t</td>\n<%\t\n\t\t} \n%>\n\t\t\t</tr>\n\t\t</table>\n\t</form>\n\t<br />\n\t<table class=\"fTable\">\n\t\n\t\n\t\n\t\n\t\n<%\n\tif (showMine) { \n\t\tList<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(loggedInMID.longValue());\n\t\tif (prescriptions.size() == 0) { \n%>\n\t\t<tr>\n\t\t\t<td colspan=4>\n\t\t\t\t<i>No prescriptions found</i>\n\t\t\t</td>\n\t\t</tr>\n<%\n\t\t} else { \n%>\n\t\t<tr>\n\t\t\t<th colspan=5><%= patient.getFullName() %></th>\n\t\t</tr>\n\t\t<tr class=\"subHeader\">\n\t\t\t<td>ND Code</td>\n\t\t\t<td>Description</td>\n\t\t\t<td>Duration</td>\n\t\t\t<td>Prescribing HCP</td>\n\t\t\t<td>Report Adverse Event (Y/N)</td>\n\t\t</tr>\n<%\t\t\t\n\t\t\tint a = 0;\n\t\t\tshowAdverseButton = true;\n\t\t\tfor (PrescriptionBean prescription : prescriptions) {\n\t\t\t\tDate date = new Date();\n\t\t\t\tdate.setYear(date.getYear()-1);\n\t\t\t\tif(prescription.getEndDate().after(date)){\n%>\n\t\t<tr>\n\t\t\t<td ><a href=\"viewPrescriptionInformation.jsp?visitID=<%=prescription.getVisitID()%>&presID=<%=prescription.getId()%>\"><%=prescription.getMedication().getNDCodeFormatted() %></a></td>\n\t\t\t<td ><%=prescription.getMedication().getDescription() %></td>\n\t\t\t<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>\n\t\t\t<td ><%=action.getPrescribingDoctor(prescription).getFullName() %></td>\n\t\t\t<% \n\t\t\t\tHCPLinkBean HLbean = new HCPLinkBean();\n\t\t\t\tHLbean.setPrescriberMID(action.getPrescribingDoctor(prescription).getMID());\n\t\t\t\tHLbean.setDrug(prescription.getMedication().getDescription());\n\t\t\t\tHLbean.setCode(prescription.getMedication().getNDCode());\n\t\t\t\tLinkList.add(HLbean);\n\t\t\t%>\n\t\t\t<td>\n\t<form action=\"viewPrescriptionRecords.jsp\" method=\"post\">\n\t\t\t<input name=\"checking<%=a%>\" type=\"text\" value=\"N\" size=\"1\" maxlength=\"1\"></input></td>\n\t\t\t<%a++;%>\n\t\t\t\n\t\t</tr>\n\n\t\n\t\n<%\t\t\t\n\t\t\t}}\n\t\t}\n\t} else if (showOther) {\n\t\tPatientBean representee = representees.get(Integer.parseInt(request.getParameter(\"representee\"))); \n%>\n\t\t<tr>\n\t\t\t<th colspan=4><%= representee.getFullName() %></th>\n\t\t</tr>\n<%\t\n\t\tList<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(representee.getMID());\n\t\tif (prescriptions.size() == 0) { \n%>\n\t\t<tr>\n\t\t\t<td colspan=4>\n\t\t\t\t<i>No prescriptions found</i>\n\t\t\t</td>\n\t\t</tr>\n<%\n\t\t} else { \n%>\n\t\t<tr class=\"subHeader\">\n\t\t\t<td>ND Code</td>\n\t\t\t<td>Description</td>\n\t\t\t<td>Duration</td>\n\t\t\t<td>Prescribing HCP</td>\n\t\t</tr>\n<%\t\t\t\n\t\t\tfor (PrescriptionBean prescription : prescriptions) { \n%>\n\t\t<tr>\n\t\t\t<td ><%=prescription.getMedication().getNDCodeFormatted() %></td>\n\t\t\t<td ><%=prescription.getMedication().getDescription() %></td>\n\t\t\t<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>\n\t\t\t<td ><%= action.getPrescribingDoctor(prescription).getFullName() %></td>\n\t\t</tr>\n<%\n\t\t\t} \n\t\t}\n\t} \n%>\n\t</table>\n\t\t\n\t<br />\n\t<%\n\tif (showMine && showAdverseButton) {\n\t\tsession.setAttribute(\"beanlist\", LinkList);\n\t\t%>\n\t\t<input type=\"submit\" name=\"adevent\" value=\"Report Adverse Events\"></input>\n\t\t</form>\n\t\t<%\n\t} %>\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ca4"},"name":"src/edu/ncsu/csc/itrust/action/ViewPrescriptionRecordsAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca2"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1a"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.Messages;\n\n\n/**\n * Handles retrieving beans for viewPrescriptionRecords.jsp\n * \n * @author laurenhayward\n * \n */\npublic class ViewPrescriptionRecordsAction {\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate EmailUtil emailer;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Set up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing prescription records.\n\t */\n\tpublic ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.emailer = new EmailUtil(factory);\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\t\n\t/**\n\t * Gets a PatientBean from an MID\n\t * \n\t * @param patientID MID of the patient\n\t * @return PatientBean for the MID given\n\t * @throws iTrustException\n\t */\n\tpublic PatientBean getPatient(long patientID) throws iTrustException {\n\t\treturn patientDAO.getPatient(patientID);\n\t}\n\t\n\t/**\n\t * Gets the logged in person's representees\n\t * \n\t * @return list of PatientBeans holding the representees\n\t * @throws iTrustException\n\t */\n\tpublic List<PatientBean> getRepresentees() throws iTrustException {\n\t\treturn patientDAO.getRepresented(loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns the prescribing HCP for a prescription\n\t * \n\t * @param prescription item in question\n\t * @return HCP who prescribed the prescription\n\t * @throws iTrustException\n\t */\n\tpublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\n\t\treturn personnelDAO.getPrescribingDoctor(prescription);\n\t}\n\t\n\t/**\n\t * Returns all the prescriptions for a given patient\n\t * \n\t * @param patientID patient in question\n\t * @return list of all the prescriptions for that patient\n\t * @throws iTrustException\n\t */\n\tpublic List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {\n\t\tPatientBean patient = patientDAO.getPatient(patientID);\n\t\tif (loggedInMID == patientID) {\n\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\treturn patientDAO.getPrescriptions(patientID);\n\t\t}\n\t\t\n\t\tList<String> toList = new ArrayList<String>();\n\t\ttoList.add(patient.getEmail());\n\t\t\n\t\tList<PatientBean> representatives = patientDAO.getRepresenting(patientID);\n\t\tfor(PatientBean representative : representatives) {\n\t\t\tif (loggedInMID == representative.getMID()) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\t\treturn patientDAO.getPrescriptions(patientID);\n\t\t\t}\n\t\t\ttoList.add(representative.getEmail());\n\t\t}\n\t\t\n\t\tList<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\n\t\tfor(PersonnelBean dlhcp : dlhcps) {\n\t\t\tif (loggedInMID == dlhcp.getMID()) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\t\treturn patientDAO.getPrescriptions(patientID);\n\t\t\t}\n\t\t\tList<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\n\t\t\tfor(PersonnelBean uap : uaps) {\n\t\t\t\tif (loggedInMID == uap.getMID()) {\n\t\t\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\t\t\treturn patientDAO.getPrescriptions(patientID);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tEmail email = new Email();\n\t\temail.setToList(toList);\n\t\temail.setFrom(\"noreply@itrust.com\"); //$NON-NLS-1$\n\t\temail.setSubject(Messages.getString(\"ViewPrescriptionRecordsAction.1\")); //$NON-NLS-1$\n\t\temail.setBody(Messages.getString(\"ViewPrescriptionRecordsAction.2\")); //$NON-NLS-1$\n\t\temailer.sendEmail(email);\n\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\treturn patientDAO.getPrescriptions(patientID);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ca5"},"name":"src/edu/ncsu/csc/itrust/EmailUtil.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca2"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1a"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d23"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d24"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d28"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d30"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d41"}]],"contents":"package edu.ncsu.csc.itrust;\n\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Sends email to users. Since we don't want to train spammers in 326, this just inserts into a database. If\n * we put this into an actual system, we would replace this class with stuff from javax.mail\n * \n * @author Andy\n * \n */\npublic class EmailUtil {\n\tprivate DAOFactory factory;\n\n\tpublic EmailUtil(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t// DO NOT SEND REAL EMAILS!!!!!\n\t// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.\n\t// If you want to know how to send emails from Java, just Google it on your own time.\n\tpublic void sendEmail(Email email) throws DBException {\n\t\tfactory.getFakeEmailDAO().sendEmailRecord(email);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ca7"},"name":"WebRoot/auth/hcp-uap/getPrescriptionReport.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca8"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Get Prescription Report\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<div align=center>\n<h1>Prescription Report</h1>\n<%\n\tString pidString = (String)session.getAttribute(\"pid\");\n\tif (pidString == null || 1 > pidString.length()) {\n\t\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp-uap/getPrescriptionReport.jsp\");\n  \t\treturn;\n\t}\n\t//else {\n\t//\tsession.removeAttribute(\"pid\");\n\t//}\n\t\n\tlong pid = Long.parseLong(pidString);\n\tViewPrescriptionRecordsAction action = new ViewPrescriptionRecordsAction(DAOFactory.getProductionInstance(), loggedInMID);\n\tPatientBean patient = action.getPatient(pid);\n\tList<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(pid);\n\n\tif (prescriptions.size() == 0) { %>\n\t<i>No prescriptions found</i><br />\n\t<br />\n\t<br />\n<%\t\t} else { %>\n\t<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th>ND Code</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Duration</th>\n\t\t\t<th>Prescribing HCP</th>\n\t\t</tr>\n<%\t\t\tfor (PrescriptionBean prescription : prescriptions) { %>\n\t\t<tr>\n\t\t\t<td ><%=prescription.getMedication().getNDCodeFormatted() %></td>\n\t\t\t<td ><%=prescription.getMedication().getDescription() %></td>\n\t\t\t<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>\n\t\t\t<td ><%= action.getPrescribingDoctor(prescription).getFullName() %></td>\n\t\t</tr>\n<%\t\t\t} %>\n\t</table>\n<%\t\t} %>\n</div>\n<br />\n<br />\n<itrust:patientNav thisTitle=\"Prescriptions\"/>\n\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7caa"},"name":"src/edu/ncsu/csc/itrust/validate/AddPatientValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ca9"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.AddPatientAction;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email\n * \n * @author Andy\n * \n */\npublic class AddPatientValidator extends BeanValidator<PatientBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic AddPatientValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(PatientBean p) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cac"},"name":"WebRoot/auth/hcp-uap/addPatient.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cab"}]],"contents":"<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.action.AddPatientAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Add Patient\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nboolean formIsFilled = request.getParameter(\"formIsFilled\") != null && request.getParameter(\"formIsFilled\").equals(\"true\");\nif (formIsFilled) {\n\t//This page is not actually a \"page\", it just adds a user and forwards.\n\tPatientBean p = new BeanBuilder<PatientBean>().build(request.getParameterMap(), new PatientBean());\n\ttry{\n\t\tlong newMID = new AddPatientAction(prodDAO, loggedInMID.longValue()).addPatient(p);\n\t\tsession.setAttribute(\"pid\", Long.toString(newMID));\n\t\tString fullname;\n\t\tString password;\n\t\tpassword = p.getPassword();\n\t\tfullname = p.getFullName();\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustMessage\">New patient <%=fullname%> successfully added!</span>\n\t\t<br />\n\t\t<table class=\"fTable\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=2>New Patient Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">MID:</td>\n\t\t\t\t<td><%=newMID%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Temporary Password:</td>\n\t\t\t\t<td><%=password%></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<br />Please get this information to <b><%=fullname%></b>! \n\t\t<p>\n\t\t\t<a href = \"/iTrust/auth/hcp-uap/editPatient.jsp\">Continue to patient information.</a>\n\t\t</p>\n\t</div>\n<%\n\t} catch(FormValidationException e){\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t</div>\n<%\n\t}\n}\n%>\n\n<div align=center>\n<form action=\"addPatient.jsp\" method=\"post\">\n\t<input type=\"hidden\" name=\"formIsFilled\" value=\"true\"> <br />\n<br />\n<div style=\"width: 50%; text-align:left;\">Please enter in the name of the new\npatient, with a valid email address. If the user does not have an email\naddress, use the hospital's email address, [insert pre-defined email],\nto recover the password.</div>\n<br />\n<br />\n<table class=\"fTable\">\n\t<tr>\n\t\t<th colspan=2>Patient Information</th>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">First name:</td>\n\t\t<td><input type=\"text\" name=\"firstName\"></td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Last Name:</td>\n\t\t<td><input type=\"text\" name=\"lastName\">\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Email:</td>\n\t\t<td><input type=\"text\" name=\"email\"></td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" style=\"font-size: 16pt; font-weight: bold;\" value=\"Add patient\">\n</form>\n<br />\n</div>\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cad"},"name":"src/edu/ncsu/csc/itrust/action/AddPatientAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cab"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.RandomPassword;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.validate.AddPatientValidator;\n\n/**\n * Used for Add Patient page (addPatient.jsp). This just adds an empty patient, creates a random password for\n * that patient.\n * \n * Very similar to {@link AddOfficeVisitAction}\n * \n * @author Andy Meneely\n * \n */\npublic class AddPatientAction {\n\tprivate TransactionDAO transDAO;\n\tprivate PatientDAO patientDAO;\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Just the factory and logged in MID\n\t * \n\t * @param factory\n\t * @param loggedInMID\n\t */\n\tpublic AddPatientAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.authDAO = factory.getAuthDAO();\n\t}\n\n\t/**\n\t * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.\n\t * \n\t * @return the new MID of the patient\n\t * @throws DBException\n\t * @throws FormValidationException\n\t */\n\tpublic long addPatient(PatientBean p) throws DBException, FormValidationException {\n\t\tnew AddPatientValidator().validate(p);\n\t\tlong newMID = patientDAO.addEmptyPatient();\n\t\tp.setMID(newMID);\n\t\tString pwd = authDAO.addUser(newMID, Role.PATIENT, RandomPassword.getRandomPassword());\n\t\tp.setPassword(pwd);\n\t\tpatientDAO.editPatient(p);\n\t\ttransDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID, newMID, \"New Patient Added\");\n\t\treturn newMID;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cb1"},"name":"WebRoot/auth/hcp-er/emergencyReport.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb0"}]],"contents":"<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.DiagnosisBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.EmergencyReportAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.AllergyBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\" %>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.Email\" %>\n<%@page import=\"edu.ncsu.csc.itrust.EmailUtil\" %>\n<%@page import=\"java.util.List\" %>\n<%@page import=\"java.util.ArrayList\" %>\n<%@page import=\"java.util.Date\" %>\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - ER Report\";\n\nString pidString = null;\nboolean print = (null != request.getParameter(\"print\") && request.getParameter(\"print\").equals(\"true\"));\n\nif (!print) {\n\t/* Require a Patient ID first */\n\tpidString = (String)session.getAttribute(\"pid\");\n\tif (null == pidString || 1 > pidString.length()) {\n\t\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp-er/emergencyReport.jsp\");\n\t\treturn;\n\t}\n\telse {\n\t\tsession.setAttribute(\"printPid\", pidString);\n\t\tsession.removeAttribute(\"pid\");\n\t}\n}\nelse {\n\tpidString = (String)session.getAttribute(\"printPid\");\n\tif (null == pidString || 1 > pidString.length()) {\n\t\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp-er/emergencyReport.jsp\");\n\t\treturn;\n\t}\n\tsession.removeAttribute(\"printPid\");\n}\n\n/* If the patient id doesn't check out, then kick 'em out to the exception handler */\nEmergencyReportAction action = new EmergencyReportAction(prodDAO, loggedInMID.longValue(), pidString);\n\t\n/* Now take care of updating information */\n%>\n\n<% if (print) { %>\n<%@include file=\"/print_header.jsp\" %>\n<%}\nelse {%>\n<%@include file=\"/header.jsp\" %>\n<%}%>\n\n<% if (!print) {\n\t\n\t// Generate a report to the hcp's of this patient.\n\t//  TODO: possibly change this to use messages and a different display format on\n\t//\t\thcp's home screen.\n\tReportRequestDAO makeReport = new ReportRequestDAO(prodDAO);\n\tPatientDAO patients = new PatientDAO(prodDAO);\n\tPatientBean patient = patients.getPatient(action.getPid());\n\tPersonnelDAO hcps = new PersonnelDAO(prodDAO);\n\tList<PersonnelBean> peeps = hcps.getAllPersonnel();\n\tList<String> emails = new ArrayList<String>();\n\t\n\tfor (PersonnelBean p : peeps) {\n\t\tif (patients.checkDeclaredHCP(patient.getMID(), p.getMID())) {\n\t\t\tmakeReport.addReportRequest(p.getMID(), patient.getMID(), new Date());\n\t\t\temails.add(p.getEmail());\n\t\t}\n\t}\n\t\n\tEmail myEmail = new Email();\n\tmyEmail.setBody(\"Patient \" + patient.getFullName() + \"'s medical record was viewed by an ER\");\n\tmyEmail.setSubject(\"Patient records viewed\");\n\tmyEmail.setToList(emails);\n\tmyEmail.setFrom(\"noreply@itrust.com\");\n\t\n\tEmailUtil emailer = new EmailUtil(prodDAO);\n\temailer.sendEmail(myEmail);\n\t\n%>\n<form action=\"emergencyReport.jsp\" method=\"post\">\n\t<input type=\"hidden\" name=\"print\" id=\"print\" value=\"true\" />\n\t<input type=\"submit\" value=\"Print\" />\n</form>\n<%} %>\n\n<ul>\n<li>Name: <%=action.getPatientName()%></li>\n<li>Age: <%=action.getPatientAge()%></li>\n<li>Gender: <%=action.getPatientGender()%> </li>\n<li>Emergency Contact: <%=action.getPatientEmergencyContact() %></li>\n<li>Allergies:\n<%\nif (0 == action.getAllergies().size()) {\n%><strong>No allergies on record</strong><%\t\n}\nelse {\n\t%><ul><%\n\tfor ( AllergyBean bean: action.getAllergies()) {\n\t\tout.print(\"<li>\" + bean.getDescription() + \" \" + bean.getFirstFoundStr() + \"</li>\");\n\t} \n\t%></ul><%\n}\n%>\n</li>\n<li>Blood Type: <%=action.getBloodType()%> </li>\n\n<li>Diagnoses: \n<%\nif (0 == action.getWarningDiagnoses().size()) {\n%><strong>No critical diagnoses on record</strong><%\t\n}\nelse {\n\t%><ul><%\n\tfor(DiagnosisBean bean : action.getWarningDiagnoses()) {\n\t\tout.print(\"<li>\" + bean.getICDCode() + \" \" + bean.getDescription() + \"</li>\");\n\t} \n\t%></ul><%\n}\n%>\n</li>\n\n<li>Prescriptions: \n<%\nif (0 == action.getCurrentPrescriptions().size()) {\n%><strong>No current prescriptions on record</strong><%\t\n}\nelse {\n\t%><ul><%\n\tfor(PrescriptionBean bean : action.getCurrentPrescriptions()) {\n\t\tout.print(\"<li>\" + bean.getMedication().getNDCode() + \" \" + bean.getMedication().getDescription() + \"</li>\");\n\t} \n\t%></ul><%\n}\n%>\n</li>\n\n<li>Immunizations:\n<% if (0 == action.getImmunizations().size()) { %>\n<strong>no immunizations on record</strong>\n<%\t\n}\nelse {\n%>\n<ul>\n<%\n\tfor (ProcedureBean bean : action.getImmunizations()) {\n\t\tif (null != bean.getAttribute() && bean.getAttribute().equals(\"immunization\"))\n\t\t\tout.print(\"<li>\" + bean.getDescription() + \" (\" + bean.getCPTCode() +\")\" + \"</li>\");\n\t} \n%>\n</ul>\n<%\n}\n%>\n</li>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cb2"},"name":"src/edu/ncsu/csc/itrust/action/EmergencyReportAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb0"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Calendar;\nimport edu.ncsu.csc.itrust.action.base.PatientBaseAction;\nimport edu.ncsu.csc.itrust.beans.AllergyBean;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.enums.PrescriptionAlerts;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\n\n/**\n * Creates a new Emergency Report Used by emergencyReport.jsp\n * \n * @author laurenhayward\n * \n */\npublic class EmergencyReportAction extends PatientBaseAction {\n\tprivate TransactionDAO transDAO;\n\tprivate PatientDAO patientDAO;\n\tprivate AllergyDAO allergyDAO;\n\tprivate OfficeVisitDAO ovDAO;\n\tprivate PatientBean pb;\n\tprivate EmailUtil emailutil;\n\tprivate long loggedInMID;\n\n\t/**\n\t * The super class handles validating the pid Logs viewing of the report\n\t * \n\t * @param factory The DAOFactory used in creating the DAOs for this action.\n\t * @param loggedInMID The MID of the user who is looking at the emergency report.\n\t * @param pidString The ID of the patient whose report is being generated.\n\t * @throws iTrustException\n\t */\n\tpublic EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\n\t\tsuper(factory, pidString);\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.allergyDAO = factory.getAllergyDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.ovDAO = factory.getOfficeVisitDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\temailutil = new EmailUtil(factory);\n\t\t\n\t\tpb = patientDAO.getPatient(this.pid);\n\t\ttransDAO.logTransaction(TransactionType.VIEW_EMERGENCY_REPORT, this.loggedInMID, Long.valueOf(pidString), \"viewed emergency report\");\n\t\temailutil.sendEmail(makeEmail());\n\t}\n\n\t/**\n\t * Returns the patient's name\n\t * \n\t * @return patient's full name\n\t */\n\tpublic String getPatientName() {\n\t\treturn (pb.getFirstName() + \" \" + pb.getLastName());\n\t}\n\n\t/**\n\t * Returns the patient's age\n\t * \n\t * @return patient's age\n\t */\n\tpublic String getPatientAge() {\n\t\treturn Integer.toString(pb.getAge());\n\t}\n\t\n\t/**\n\t * Returns the patient's gender\n\t * \n\t * @return patient's gender\n\t */\n\tpublic String getPatientGender() {\n\t\treturn pb.getGender().toString();\n\t}\n\t\n\t/**\n\t * Returns the patient's emergency contact\n\t * \n\t * @return patient's emergency contact\n\t */\n\tpublic String getPatientEmergencyContact() {\n\t\treturn pb.getEmergencyName() + \" \" + pb.getEmergencyPhone();\n\t}\n\t\n\t/**\n\t * Returns the patient's blood type\n\t * \n\t * @return the patient's blood type\n\t */\n\tpublic String getBloodType() {\n\t\treturn pb.getBloodType() + \"\";\n\t}\n\n\t/**\n\t * Returns a list of allergies for the given patient\n\t * \n\t * @return a list of AllergyBeans\n\t * @throws iTrustException\n\t */\n\tpublic List<AllergyBean> getAllergies() throws iTrustException {\n\t\treturn allergyDAO.getAllergies(this.pid);\n\t}\n\n\t/**\n\t * Returns a list of prescriptions the patient is currently taking\n\t * \n\t * @return a list of PrescriptionBeans for which the patient is currently taking\n\t * @throws iTrustException\n\t */\n\tpublic List<PrescriptionBean> getCurrentPrescriptions() throws iTrustException {\n\t\tList<PrescriptionBean> allPrescriptions = patientDAO.getCurrentPrescriptions(this.pid);\n\t\tArrayList<PrescriptionBean> warningList = new ArrayList<PrescriptionBean>();\n\t\tfor (int i = 0; i < allPrescriptions.size(); i++) {\n\t\t\tif (PrescriptionAlerts.isAlert(allPrescriptions.get(i).getMedication().getNDCode()))\n\t\t\t\twarningList.add(allPrescriptions.get(i));\n\t\t}\n\t\treturn warningList;\n\t}\n\n\t/**\n\t * Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum\n\t * \n\t * @return list of DiagnosisBeans\n\t * @throws iTrustException\n\t */\n\tpublic List<DiagnosisBean> getWarningDiagnoses() throws iTrustException {\n\t\ttry {\n\t\t\tboolean dup = false;\n\t\t\tList<DiagnosisBean> allDiagnoses = patientDAO.getDiagnoses(this.pid);\n\t\t\tArrayList<DiagnosisBean> warningList = new ArrayList<DiagnosisBean>();\n\t\t\tfor (DiagnosisBean bean: allDiagnoses) {\n\t\t\t\tOfficeVisitBean ovb = ovDAO.getOfficeVisit(bean.getVisitID());\n\n\t\t\t\tif(ovb == null){\n\t\t\t\t\tcontinue;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (\"yes\".equals(bean.getClassification()) || (ovb.getVisitDate().getTime() > Calendar.getInstance().getTimeInMillis() - 30 * 24 * 60 * 60 * 1000))  {\n\t\t\t\t\tfor (DiagnosisBean wbean: warningList) {\n\t\t\t\t\t\tif (bean.getDescription().equals(wbean.getDescription())) {\n\t\t\t\t\t\t\tdup = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!dup) {\n\t\t\t\t\t\twarningList.add(bean);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn warningList;\n\t\t} catch (DBException dbe) {\n\t\t\tthrow new iTrustException(dbe.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of prescriptions the patient is currently taking\n\t * \n\t * @return a list of PrescriptionBeans for which the patient is currently taking\n\t * @throws iTrustException\n\t */\n\tpublic List<ProcedureBean> getImmunizations() throws iTrustException {\n\t\tList<ProcedureBean> allImmunizations = patientDAO.getImmunizationProcedures(this.pid);\n\t\treturn allImmunizations;\n\t}\n\t\n\t/**\n\t * Creates a fake e-mail to notify the user that an emergency report has been created and viewed.\n\t * \n\t * @return the e-mail to be sent\n\t * @throws DBException\n\t */\n\tprivate Email makeEmail() throws DBException{\n\n\t\tEmail email = new Email();\n\t\tList<PatientBean> reps = patientDAO.getRepresenting(pb.getMID());\n\t\t\n\t\tList<String> toAddrs = new ArrayList<String>();\n\t\ttoAddrs.add(pb.getEmail());\n\t\tfor (PatientBean r: reps) {\n\t\t\ttoAddrs.add(r.getEmail());\n\t\t}\n\t\t\n\t\temail.setFrom(\"no-reply@itrust.com\");\n    \temail.setToList(toAddrs); // patient and personal representative\n    \temail.setSubject(String.format(\"Emergency Report Viewed Notification\"));\n    \temail.setBody(\"Dear \" + pb.getFullName() + \",\\n An emergency report has been generated. \" + \n    \t\t\t\"Please login to iTrust to see who has viewed your records.\");\n\t\treturn email;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cb5"},"name":"WebRoot/auth/getPatientID.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb6"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc9"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cec"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d05"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0b"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d41"}]],"contents":"<%@include file=\"/global.jsp\" %>\n<%@page import=\"java.util.List\" %>\n<%@page import=\"edu.ncsu.csc.itrust.action.SearchUsersAction\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\" %>\n<%\npageTitle = \"iTrust - Please Select a Patient\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tString uid_pid = request.getParameter(\"UID_PATIENTID\");\n\tsession.setAttribute(\"pid\", uid_pid);\n\tif (null != uid_pid && !\"\".equals(uid_pid)) {\n\t\tresponse.sendRedirect(request.getParameter(\"forward\"));\n\t}\n\t\n\tString firstName = request.getParameter(\"FIRST_NAME\");\n\tString lastName = request.getParameter(\"LAST_NAME\");\n\tif(firstName == null)\n\t\tfirstName = \"\";\n\tif(lastName == null)\n\t\tlastName = \"\";\n\t\n\n%>\n\n<%@include file=\"/util/getUserFrame.jsp\"%>\n\t\t\t\t\n\n<form id=\"mainForm\" action=\"getPatientID.jsp\" method=\"post\">\n\t<table>\n\t\t<tr>\n\t\t\t<td><b>Patient:</b></td>\n\t\t\t<td style=\"width: 150px; border: 1px solid Gray;\">\n\t\t\t\t<input name=\"forward\" type=\"hidden\" value=\"<%=request.getParameter(\"forward\") %>\" />\n\t\t\t\t<input name=\"UID_PATIENTID\" type=\"hidden\" value=\"\" />\n\t\t\t\t<input name=\"NAME_PATIENTID\" type=\"text\" readonly value=\"Select a Patient\">\n\t\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type=\"button\" onclick=\"getUser('PATIENTID');\" value=\"Find User\" />\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"center\" colspan=\"2\">\n\t\t\t\t<input type=\"submit\" value=\"Select Patient\" />\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n</form>\n<table>\n\t<tr> </tr>\n\t<form id=\"userSearchForm\" action=\"getPatientID.jsp?forward=<%= request.getParameter(\"forward\") %>\" method=\"post\">\n\t\t<tr>\n\t\t\t\t<td><b>First Name:</b></td>\n\t\t\t\t<td style=\"width: 150px; border: 1px solid Gray;\">\n\t\t\t\t\t<input name=\"FIRST_NAME\" type=\"text\" value=\"<%= firstName %>\" />\n\t\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t\t<td><b>Last Name:</b></td>\n\t\t\t\t<td style=\"width: 150px; border: 1px solid Gray;\">\n\t\t\t\t\t<input name=\"LAST_NAME\" type=\"text\" value=\"<%= lastName %>\" />\n\t\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t\t<td align=\"center\" colspan=\"2\">\n\t\t\t\t\t<input type=\"submit\" value=\"User Search\" />\n\t\t\t\t</td>\n\t\t</tr>\n\t</form>\n</table>\n\n\n<%\n\tif( (!\"\".equals(firstName)) || (!\"\".equals(lastName))){\n\t\tSearchUsersAction searchAction = new SearchUsersAction(prodDAO,loggedInMID.longValue());\n\t\tout.println(\"Searching for users named \" + firstName + \" \" + lastName + \"<br />\");\n\t\tList<PatientBean> patients = searchAction.searchForPatientsWithName(firstName,lastName);\n\t\tout.println(\"Found \" + patients.size() + \" Records <br />\");\n\t\tout.println(\"<table border='1px'><tr><td width='175px'>MID</td><td width='250px'>First Name</td><td width='250px'>Last Name</td></tr>\");\n\t\tfor(PatientBean p : patients){\n%>\n<form id=\"selectPatient<%= String.valueOf(patients.size()) %>\" action=\"getPatientID.jsp?forward=<%= request.getParameter(\"forward\") %>\" method=\"post\">\n<input type=\"hidden\" name=\"UID_PATIENTID\" value=\"<%= p.getMID() %>\" />\n\n\n<%\n\t\t\tout.println(\"<tr><td><input type='submit' width='100%' value='\" + p.getMID() + \"' /></form></td><td>\" + p.getFirstName() + \"</td><td>\" + p.getLastName() + \"</td></tr>\");\n\n\t\t}\n\t\tout.println(\"</table>\");\n\t\t\n\t}\n\n%>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cb8"},"name":"WebRoot/auth/hcp-uap/viewReport.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ReportRequestBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyRecordsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewReportAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.OfficeVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HealthRecord\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.AllergyBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.FamilyMemberBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.DiagnosisBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MedicationBean\"%>\n<%@page import=\"java.text.NumberFormat\" %>\n<%@page import=\"java.text.DecimalFormat\" %>\n<%@page import=\"edu.ncsu.csc.itrust.Localization\" %>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Comprehensive Patient Report\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n//long loggedInMID = request.getUserPrincipal()==null ? 0L : Long.valueOf(request.getUserPrincipal().getName());\n\nPersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);\nViewMyReportRequestsAction rAction = new ViewMyReportRequestsAction(prodDAO, loggedInMID.longValue());\nint patientIndex = Integer.parseInt(request.getParameter(\"patient\"));\nList<PatientBean> patients = (List<PatientBean>) session.getAttribute(\"patients\");\n//session.removeAttribute(\"patients\");\nString pidString = \"\" + patients.get(patientIndex).getMID();\nString rrString = request.getParameter(\"requestID\");\nlong patientMID;\nint requestID;\nReportRequestBean reportRequest;\ntry {\n\tif (pidString == null || pidString.equals(\"\")) throw new Exception(\"Error: patientMID is null\");\n\tif (rrString == null || rrString.equals(\"\")) throw new Exception(\"Error: requestID is null\");\n\tpatientMID = Long.parseLong(pidString);\n\trequestID = Integer.parseInt(rrString);\n\treportRequest = rAction.getReportRequest(requestID);\n\trAction.setViewed(requestID);\n\treportRequest = rAction.getReportRequest(requestID);\n\nViewMyRecordsAction action = new ViewMyRecordsAction(prodDAO, patientMID);\nViewReportAction viewAction = new ViewReportAction(prodDAO, loggedInMID.longValue());\nPatientBean patient = action.getPatient();\nList<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\nList<HealthRecord> records = action.getAllHealthRecords();\nList<AllergyBean> allergies = action.getAllergies();\nList<PatientBean> represented = action.getRepresented();\nList<PatientBean> representing = action.getRepresenting();\nList<FamilyMemberBean> family = action.getFamily(); \nList<DiagnosisBean> diagnoses = viewAction.getDiagnoses(patientMID);\nList<ProcedureBean> procedures = viewAction.getProcedures(patientMID);\nList<PrescriptionBean> prescriptions = viewAction.getPrescriptions(patientMID);\nList<PersonnelBean> hcps = viewAction.getDeclaredHCPs(patientMID);\n\n%><h3>Comprehensive Patient Report for <%=patient.getFullName()%></h3>\n\n<div align=center>\n<table>\n\t<tr><td valign=top>\n\t<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"2\">Patient Information</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Name:</td>\n\t\t\t<td ><%=patient.getFullName()%></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Address:</td>\n\t\t\t<td >\n\t\t\t<%=patient.getStreetAddress1()%><br />\n\t\t\t<%= \"\".equals(patient.getStreetAddress2()) ? \"\" : patient.getStreetAddress2() + \"<br />\"%>\n\t\t\t<%=patient.getStreetAddress3()%><br />\t\t\t\t\t\t\t\t\t  \n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t<td ><%=patient.getPhone()%></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Email:</td>\n\t\t\t<td ><%=patient.getEmail()%></td>\n\t\t</tr>\n\t</table>\n\t</td>\n\t<td width=\"15px\">&nbsp;</td>\n\t<td>\n\t<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"2\">Insurance Information</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Name (ID):</td>\n\t\t\t<td ><%=patient.getIcName()%> (<%=patient.getIcID()%>)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Address:</td>\n\t\t\t<td >\n\t\t\t<%=patient.getIcAddress1()%><br />\n\t\t\t<%=\"\".equals(patient.getIcAddress2()) ? \"\" : patient.getIcAddress2() + \"<br />\"%>\n\t\t\t<%=patient.getIcAddress3()%><br />\t\t\t\t\t\t\t\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t<td ><%=patient.getIcPhone()%></td>\n\t\t</tr>\n\t</table>\n\t</td></tr>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"10\">Health Records</th>\n\t\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<td>Height</td>\n\t\t<td>Weight</td>\n\t\t<td>Smokes?</td>\n\t\t<td>Blood Pressure</td>\n\t\t<td>HDL</td>\n\t\t<td>LDL</td>\n\t\t<td>Triglycerides</td>\n\t\t<td>Total Cholesterol</td>\t\t\n\t\t<td>Last Recorded</td>\n\t\t<td>By Personnel</td>\n\t</tr>\n<%\t\n\tPersonnelBean personnel;\n\tfor(HealthRecord hr : records) {\n\t\tpersonnel = personnelDAO.getPersonnel(hr.getPersonnelID());\n%>\n\t<tr>\n\t\t<td align=center><%=hr.getHeight()%>in</td>\n\t\t<td align=center><%=hr.getWeight() %>lbs</td>\n\t\t<td align=center><%=hr.isSmoker() ? \"Y\" : \"N\" %></td>\n\t\t<td align=center><%=hr.getBloodPressure()%> mmHg</td>\n\t\t<td align=center><%=hr.getCholesterolHDL()%> mg/dL</td>\n\t\t<td align=center><%=hr.getCholesterolLDL()%> mg/dL</td>\n\t\t<td align=center><%=hr.getCholesterolTri()%> mg/dL</td>\n\t\t<td align=center><%=hr.getTotalCholesterol()%> mg/dL</td>\t\t\n\t\t<td align=center><%=hr.getDateRecorded()%></td>\n\t\t<td align=center><%=personnel.getFullName()%></td>\n\t</tr>\n\t<%}%>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=3>Diagnoses</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>Visit ID</td>\n\t\t\t\t<td>ICD Code</td>\n\t\t\t\t<td>Description</td>\n\t\t\t</tr>\n\t\n\t\t\t<%if(diagnoses.size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center;\">No diagnoses on record</td>\n\t\t\t</tr>\n\t\t\t<%} else {\n\t\t\t\tNumberFormat numberFormatter = NumberFormat.getInstance(Localization.instance().getCurrentLocale());\n\t\t\t\t((DecimalFormat)numberFormatter).setMaximumFractionDigits(2);\n\t\t\t\t((DecimalFormat)numberFormatter).setMinimumFractionDigits(2);\n\t\t\t\tfor(DiagnosisBean diagnosis : diagnoses){%>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><%=diagnosis.getOvDiagnosisID()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=numberFormatter.format(Float.parseFloat(diagnosis.getICDCode()))%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=diagnosis.getDescription()%></td>\n\t\t\t</tr>\t\t\t\n\t\t\t<%  }\n\t\t\t  } %>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"2\">Designated HCPs</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>HCP Name</td>\n\t\t\t</tr>\n\t\n\t\t\t<%if(hcps.size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center;\">No designated HCPs on record</td>\n\t\t\t</tr>\n\t\t\t<%} else {\n\t\t\t\tfor(PersonnelBean hcp : hcps){%>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><%=hcp.getFullName()%></td>\n\t\t\t</tr>\t\t\t\n\t\t\t<%  }\n\t\t\t  } %>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"2\">Allergies</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>Allergy Description</td>\n\t\t\t\t<td>First Found</td>\n\t\t\t</tr>\n\t\n\t\t\t<%if(allergies.size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center;\">No Allergies on record</td>\n\t\t\t</tr>\n\t\t\t<%} else {\n\t\t\t\tfor(AllergyBean allergy : allergies){%>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><%=allergy.getDescription()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=allergy.getFirstFoundStr()%></td>\n\t\t\t</tr>\t\t\t\n\t\t\t<%  }\n\t\t\t  } %>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"3\">Procedures</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>Visit ID</td>\n\t\t\t\t<td>CPT Code</td>\n\t\t\t\t<td>Description</td>\n\t\t\t</tr>\n\t\n\t\t\t<%if(procedures.size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center;\">No procedures on record</td>\n\t\t\t</tr>\n\t\t\t<%} else {\n\t\t\t\tfor(ProcedureBean procedure : procedures){%>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><%=procedure.getOvProcedureID()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=procedure.getCPTCode()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=procedure.getDescription()%></td>\n\t\t\t</tr>\t\t\t\n\t\t\t<%  }\n\t\t\t  } %>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"6\">Prescriptions</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<th>Visit ID</th>\n\t\t\t\t<th>NDCode</th>\n\t\t\t\t<th>StartDate</th>\n\t\t\t\t<th>EndDate</th>\n\t\t\t\t<th>Dosage</th>\n\t\t\t\t<th>Instructions</th>\n\t\t\t</tr>\n\t\n\t\t\t<%if(prescriptions.size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center;\">No prescriptions on record</td>\n\t\t\t</tr>\n\t\t\t<%} else {\n\t\t\t\tfor(PrescriptionBean prescription : prescriptions){%>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><%=prescription.getVisitID()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=prescription.getMedication().getNDCode()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=prescription.getStartDateStr()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=prescription.getEndDateStr()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=prescription.getDosage()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=prescription.getInstructions()%></td>\n\t\t\t</tr>\t\t\t\n\t\t\t<%  }\n\t\t\t  } %>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"4\">Office Visits</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<th>Visit Date</th>\n\t\t\t\t<th>HCP</th>\n\t\t\t\t<th>Hospital ID</th>\n\t\t\t\t<th>Notes</th>\n\t\t\t</tr>\n\t\n\t\t\t<%if(officeVisits.size()==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"text-align: center;\">No office visits on record</td>\n\t\t\t</tr>\n\t\t\t<%} else {\n\t\t\t\tfor(OfficeVisitBean ov : officeVisits){\n\t\t\t\t\tpersonnel = personnelDAO.getPersonnel(ov.getHcpID());\n%>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><%=ov.getVisitDateStr()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=personnel.getFullName()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=ov.getHospitalID()%></td>\n\t\t\t\t<td style=\"text-align: center;\"><%=ov.getNotes()%></td>\n\t\t\t</tr>\t\n\t\t\t<%  }\n\t\t\t  } %>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=\"2\">Known Relatives</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Relation</th>\n\t\t\t</tr>\n\t\t\t<%\n\t\t\t  if(family.size()==0){%>\n\t\t\t\t<tr>\n\t\t\t\t\t<td colspan=\"3\" style=\"text-align: center;\">No Relations on\trecord</td>\n\t\t\t\t</tr>\n\t\t\t  <%} else {\n\t\t\t\t  for(FamilyMemberBean member : family) {%>\n\t\t\t  \t<tr>\n\t\t\t\t\t<td><%=member.getFullName()%></td>\n\t\t\t\t\t<td><%=member.getRelation()%></td>\n\t\t\t\t</tr>\n\t\t\t  <%  }\n\t\t\t\t}%>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th>Patients <%=patient.getFirstName()%> is representing</th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<th>Patient</th>\n\t\t\t</tr>\n\t\t\t<%if(represented.size() ==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td><%=patient.getFirstName()%> is not representing any patients</td>\n\t\t\t</tr>\n\t\t\t<%} else { \n\t\t\t\tfor(PatientBean p : represented){%>\n\t\t\t\t<tr>\n\t\t\t\t\t<td align=center>\n\t\t\t\t\t\t<%=p.getFullName()%>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t <% }\n\t\t\t  }%>\n</table>\n<br />\n<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th >Patients Representing <%=patient.getFirstName()%></th>\n\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<th>Patient</th>\n\t\t\t</tr>\n\t\t\t<%if(representing.size() ==0){ %>\n\t\t\t<tr>\n\t\t\t\t<td><%=patient.getFirstName()%> is not represented by any patients</td>\n\t\t\t</tr>\n\t\t\t<%} else { \n\t\t\t\tfor(PatientBean p : representing){%>\n\t\t\t\t<tr>\n\t\t\t\t\t<td align=center>\n\t\t\t\t\t\t<%=p.getFullName()%>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t <% }\n\t\t\t  }%>\n</table>\n<br />\n<br />\n\n<%} catch (Exception ex) {\n\t%><%=ex.getClass()+\", \" %><%=ex.getCause()+\", \" %><%=ex.getMessage() %><%\n}\n%>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cb9"},"name":"src/edu/ncsu/csc/itrust/action/ViewMyReportRequestsAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cbd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d39"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.Calendar;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.ReportRequestBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Action class for ViewMyReports.jsp.  Allows the user to see all their reports\n */\npublic class ViewMyReportRequestsAction {\n\tprivate long loggedInMID;\n\tprivate ReportRequestDAO reportRequestDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate TransactionDAO transDAO;\n\t//private DAOFactory factory;\n\n\t/**\n\t * Set up\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing their report requests.\n\t */\n\tpublic ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.reportRequestDAO = factory.getReportRequestDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\t//this.factory = factory;\n\t}\n\n\t/**\n\t * Returns all the reports for the currently logged in HCP\n\t * \n\t * @return list of all reports for the logged in HCP\n\t * @throws iTrustException\n\t */\n\tpublic List<ReportRequestBean> getAllReportRequestsForRequester() throws iTrustException {\n\t\treturn reportRequestDAO.getAllReportRequestsForRequester(loggedInMID);\n\t}\n\n//\t/**\n//\t * Returns a list of *all* reports\n//\t * \n//\t * @return list of all reports\n//\t * @throws iTrustException\n//\t */\n//\tpublic List<ReportRequestBean> getAllReportRequests() throws iTrustException {\n//\t\treturn reportRequestDAO.getAllReportRequests();\n//\t}\n\n\t/**\n\t * Adds a report request to the list\n\t * \n\t * @param patientMID ID of the patient that the report request is for\n\t * @return\n\t * @throws iTrustException\n\t */\n\tpublic long addReportRequest(long patientMID) throws iTrustException {\n\t\tlong id = reportRequestDAO\n\t\t\t\t.addReportRequest(loggedInMID, patientMID, Calendar.getInstance().getTime());\n\t\ttransDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, patientMID,\n\t\t\t\t\"Added comprehensive report request\");\n\t\treturn id;\n\n\t}\n\n//\t/**\n//\t * Approves a report request from the list.  E-mail is sent when the request is approved.\n//\t * \n//\t * @param ID id of the request\n//\t * @throws iTrustException\n//\t */\n//\tpublic void approveReportRequest(long ID) throws iTrustException {\n//\t\tReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\n//\t\treportRequestDAO.approveReportRequest(ID, loggedInMID, Calendar.getInstance().getTime());\n//\t\ttransDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID,\n//\t\t\t\trr.getPatientMID(), \"Approved comprehensive report request\");\n//\t\tnew EmailUtil(factory).sendEmail(makeEmailApp(loggedInMID, rr.getRequesterMID(), rr.getPatientMID()));\n//\n//\t}\n\n//\t/**\n//\t * \n//\t * Sends e-mail regarding the approved request.\n//\t * \n//\t * @param adminID admin who approved the request\n//\t * @param hcpID HCP the request is for\n//\t * @param pid ID of the patient the report is about\n//\t * @return the sent e-mail\n//\t * @throws DBException\n//\t */\n//\tprivate Email makeEmailApp(long adminID, long hcpID, long pid) throws DBException {\n//\n//\t\tPatientBean p = new PatientDAO(factory).getPatient(pid);\n//\n//\t\tEmail email = new Email();\n//\t\temail.setFrom(\"no-reply@itrust.com\");\n//\t\temail.setToList(Arrays.asList(p.getEmail()));\n//\t\temail.setSubject(\"A Report has been generated in iTrust\");\n//\t\temail\n//\t\t\t\t.setBody(String\n//\t\t\t\t\t\t.format(\n//\t\t\t\t\t\t\t\t\"Dear %s, \\n The iTrust Health Care Provider (%s) submitted a request to view your full medical records.  The iTrust administrator (%s) approved a one-time viewing of this report.  You will be notified when the HCP chooses to view it.\",\n//\t\t\t\t\t\t\t\tp.getFullName(), hcpID, adminID));\n//\t\treturn email;\n//\t}\n\n//\t/**\n//\t * Rejects a request from the list.\n//\t * \n//\t * @param ID id of the rejected request\n//\t * @param comment why the request was rejected\n//\t * @throws iTrustException\n//\t */\n//\tpublic void rejectReportRequest(long ID, String comment) throws iTrustException {\n//\t\treportRequestDAO.rejectReportRequest(ID, loggedInMID, Calendar.getInstance().getTime(), comment);\n//\t\ttransDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, 0L,\n//\t\t\t\t\"Rejected comprehensive report request\");\n//\t}\n\n\t/**\n\t * Returns the requested report\n\t * \n\t * @param ID id of the requested report\n\t * @return the requested report\n\t * @throws iTrustException\n\t */\n\tpublic ReportRequestBean getReportRequest(int ID) throws iTrustException {\n\t\treturn reportRequestDAO.getReportRequest(ID);\n\t}\n\t\n/**\n * Sets the viewed status of the report.  If the report is \"viewed\" the HCP must request a new one to see it again.\n * \n * @param ID id of the report\n * @throws iTrustException\n */\n\tpublic void setViewed(int ID) throws iTrustException {\n//\t\tReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\n\t\treportRequestDAO.setViewed(ID, Calendar.getInstance().getTime());\n\t\ttransDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, 0L,\n\t\t\t\t\"Viewed comprehensive report\");\n\t\t//new EmailUtil(factory).sendEmail(makeEmailView(rr.getApproverMID(), rr.getRequesterMID(), rr\n\t\t\t//\t.getPatientMID()));\n\n\t}\n\n//\t/**\n//\t * \n//\t * Sends e-mail regarding the request to the patient.\n//\t * \n//\t * @param adminID admin who approved the request\n//\t * @param hcpID HCP the request is for\n//\t * @param pid ID of the patient the report is about\n//\t * @return the sent e-mail\n//\t * @throws DBException\n//\t */\n//\tprivate Email makeEmailView(long adminID, long hcpID, long pid) throws DBException {\n//\n//\t\tPatientBean p = new PatientDAO(factory).getPatient(pid);\n//\n//\t\tEmail email = new Email();\n//\t\temail.setFrom(\"no-reply@itrust.com\");\n//\t\temail.setToList(Arrays.asList(p.getEmail()));\n//\t\temail.setSubject(\"A Report has been generated in iTrust\");\n//\t\temail\n//\t\t\t\t.setBody(String\n//\t\t\t\t\t\t.format(\n//\t\t\t\t\t\t\t\t\"Dear %s, \\n The iTrust Health Care Provider (%s) has chosen to view your full medical report, which was approved by an iTrust administrator (%s).  This report was only viewable one time and is no longer available.\",\n//\t\t\t\t\t\t\t\tp.getFullName(), hcpID, adminID));\n//\t\treturn email;\n//\t}\n\n\t/**\n\t * Gets the status of the request\n\t * \n\t * @param id id of the request\n\t * @return the request's status\n\t * @throws iTrustException\n\t */\n\tpublic String getLongStatus(long id) throws iTrustException {\n\t\tStringBuilder s = new StringBuilder();\n\t\tReportRequestBean r = reportRequestDAO.getReportRequest(id);\n\t\tif (r.getStatus().equals(ReportRequestBean.Requested)) {\n\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\n\t\t\ts.append(String.format(\"Request was requested on %s by %s\", r.getRequestedDateString(), p\n\t\t\t\t\t.getFullName()));\n\t\t}\n//\t\tif (r.getStatus().equals(ReportRequestBean.Approved)) {\n//\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\n//\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\n//\t\t\ts.append(String.format(\"Request was requested on %s by %s \", r.getRequestedDateString(), p\n//\t\t\t\t\t.getFullName()));\n//\t\t\ts.append(String.format(\"and approved on %s by %s\", r.getApprovedDateString(), p2.getFullName()));\n//\t\t}\n//\t\tif (r.getStatus().equals(ReportRequestBean.Rejected)) {\n//\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\n//\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\n//\t\t\ts.append(String.format(\"Request was requested on %s by %s \", r.getRequestedDateString(), p\n//\t\t\t\t\t.getFullName()));\n//\t\t\ts.append(String.format(\"and rejected on %s by %s\", r.getApprovedDateString(), p2.getFullName()));\n//\t\t}\n\t\tif (r.getStatus().equals(ReportRequestBean.Viewed)) {\n\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\n//\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\n\t\t\tString fullName = \"Unknown\";\n\t\t\tif(p != null){\n\t\t\t\tfullName = p.getFullName();\n\t\t\t\ts.append(String.format(\"Request was requested on %s by %s, \", r.getRequestedDateString(), p\n\t\t\t\t\t.getFullName()));\n\t\t\t}\n//\t\t\ts.append(String.format(\"approved on %s by %s, \", r.getApprovedDateString(), fullName));\n\t\t\ts.append(\"\");// removed \"<br />\" because it caused unit test to fail and seems to have no\n\t\t\t// purpose\n\t\t\ts.append(String.format(\"and viewed on %s by %s\", r.getViewedDateString(), fullName));\n\t\t}\n\n\t\treturn s.toString();\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cba"},"name":"src/edu/ncsu/csc/itrust/action/ViewMyRecordsAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cca"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1e"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d52"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d53"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.AllergyBean;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.FamilyMemberBean;\nimport edu.ncsu.csc.itrust.beans.HealthRecord;\nimport edu.ncsu.csc.itrust.beans.LabProcedureBean;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.ReportRequestBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Handles patients viewing their own records Used by viewMyRecords.jsp\n * \n * @author laurenhayward\n * \n */\npublic class ViewMyRecordsAction {\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate AllergyDAO allergyDAO;\n\tprivate FamilyDAO familyDAO;\n\tprivate HealthRecordsDAO hrDAO;\n\tprivate OfficeVisitDAO ovDAO;\n\tprivate SurveyDAO surveyDAO;\n\tprivate LabProcedureDAO labDAO;\n\tprivate FakeEmailDAO emailDAO;\n\tprivate ICDCodesDAO icdDAO;\n\tprivate ReportRequestDAO reportRequestDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Set up\n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing the records.\n\t */\n\tpublic ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.allergyDAO = factory.getAllergyDAO();\n\t\tthis.familyDAO = factory.getFamilyDAO();\n\t\tthis.hrDAO = factory.getHealthRecordsDAO();\n\t\tthis.ovDAO = factory.getOfficeVisitDAO();\n\t\tthis.surveyDAO = factory.getSurveyDAO();\n\t\tthis.labDAO = factory.getLabProcedureDAO();\n\t\tthis.emailDAO = factory.getFakeEmailDAO();\n\t\tthis.reportRequestDAO = factory.getReportRequestDAO();\n\t\tthis.icdDAO = factory.getICDCodesDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\n\t/**\n\t * Takes the patient's representee as a param and returns it as a long if the patient represents the input\n\t * param\n\t * \n\t * @param input\n\t *            the patient's representee mid\n\t * @return representee's mid as a long\n\t * @throws iTrustException\n\t */\n\tpublic long representPatient(String input) throws iTrustException {\n\n\t\ttry {\n\t\t\tlong reppeeMID = Long.valueOf(input);\n\t\t\tif (patientDAO.represents(loggedInMID, reppeeMID)) {\n\t\t\t\tloggedInMID = reppeeMID;\n\t\t\t\treturn reppeeMID;\n\t\t\t} else\n\t\t\t\tthrow new iTrustException(\"You do not represent patient \" + reppeeMID);\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new iTrustException(\"MID is not a number\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns a PatientBean for the currently logged in patient\n\t * \n\t * @return PatientBean for the currently logged in patient\n\t * @throws iTrustException\n\t */\n\tpublic PatientBean getPatient() throws iTrustException {\n\t\treturn patientDAO.getPatient(loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns a PatientBean for the specified MID\n\t * @param mid id of the requested bean\n\t * @return PatientBean for the specified MID\n\t * @throws iTrustException\n\t */\n\tpublic PatientBean getPatient(long mid) throws iTrustException {\n\t\treturn patientDAO.getPatient(mid);\n\t}\n\n\t/**\n\t * Returns a PersonnelBean for the requested MID\n\t * @param mid id of the requested bean\n\t * @return a PersonnelBean for the requested MID\n\t * @throws iTrustException\n\t */\n\tpublic PersonnelBean getPersonnel(long mid) throws iTrustException {\n\t\treturn personnelDAO.getPersonnel(mid);\n\t}\n\n\t/**\n\t * Returns a PatientBean for the currently logged in patient\n\t * \n\t * @return PatientBean for the currently logged in patient\n\t * @throws iTrustException\n\t */\n\tpublic List<Email> getEmailHistory() throws iTrustException {\n\t\treturn emailDAO.getEmailsByPerson(getPatient().getEmail());\n\t}\n\n\t/**\n\t * Returns a list of AllergyBeans for the currently logged in patient\n\t * \n\t * @return a list of AllergyBeans for the currently logged in patient\n\t * @throws iTrustException\n\t */\n\tpublic List<AllergyBean> getAllergies() throws iTrustException {\n\t\treturn allergyDAO.getAllergies(loggedInMID);\n\t}\n\n\t/**\n\t * Returns a list of Parents, Siblings, and Children of the currently logged in patient\n\t * \n\t * @return list of FamilyMemberBeans\n\t */\n\tpublic List<FamilyMemberBean> getFamily() throws iTrustException {\n\t\tList<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\n\t\tList<FamilyMemberBean> parents = null;\n\t\ttry {\n\t\t\tparents = familyDAO.getParents(loggedInMID);\n\t\t\tfam.addAll(parents);\n\t\t\tfam.addAll(familyDAO.getSiblings(loggedInMID));\n\t\t\tfam.addAll(familyDAO.getChildren(loggedInMID));\n\t\t} catch (DBException e) {\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t}\n\t\t\n\t\tif(parents != null) {\n\t\t\tList<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\n\t\t\tfor(FamilyMemberBean parent : parents) {\n\t\t\t\ttry {\n\t\t\t\t\tgrandparents.addAll(familyDAO.getParents(parent.getMid()));\n\t\t\t\t} catch (DBException e) {\n\t\t\t\t\tthrow new iTrustException(e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfam.addAll(grandparents);\n\t\t\t\n\t\t\tfor(FamilyMemberBean gp : grandparents) {\n\t\t\t\tgp.setRelation(\"Grandparent\");\n\t\t\t}\n\t\t}\n\t\treturn fam;\n\t}\n\t\n\t/**\n\t * Returns a list of Parents, Siblings, and Grand Parents of the currently logged in patient\n\t * \n\t * @return list of FamilyMemberBeans\n\t */\n\tpublic List<FamilyMemberBean> getFamilyHistory() throws iTrustException {\n\t\tList<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\n\t\tList<FamilyMemberBean> parents = null;\n\t\ttry {\n\t\t\tparents = familyDAO.getParents(loggedInMID);\n\t\t\tfam.addAll(parents);\n\t\t\tfam.addAll(familyDAO.getSiblings(loggedInMID));\n\t\t} catch (DBException e) {\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t}\n\t\t\n\t\tif(parents != null) {\n\t\t\tList<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\n\t\t\tfor(FamilyMemberBean parent : parents) {\n\t\t\t\ttry {\n\t\t\t\t\tgrandparents.addAll(familyDAO.getParents(parent.getMid()));\n\t\t\t\t} catch (DBException e) {\n\t\t\t\t\tthrow new iTrustException(e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfam.addAll(grandparents);\n\t\t\t\n\t\t\tfor(FamilyMemberBean gp : grandparents) {\n\t\t\t\tgp.setRelation(\"Grandparent\");\n\t\t\t}\n\t\t}\n\t\treturn fam;\n\t}\n\n\t/**\n\t * Returns a list of HealthRecords for the currently logged in patient\n\t * \n\t * @return a list of HealthRecords for the currently logged in patient\n\t * @throws iTrustException\n\t */\n\tpublic List<HealthRecord> getAllHealthRecords() throws iTrustException {\n\t\treturn hrDAO.getAllHealthRecords(loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns a list of HealthRecords for the specified family member\n\t * \n\t * @return a list of HealthRecords for the specified family member\n\t * @throws iTrustException\n\t */\n\tpublic List<HealthRecord> getFamilyHealthRecords(long mid) throws iTrustException {\n\t\treturn hrDAO.getAllHealthRecords(mid);\n\t}\n\n\t/**\n\t * Returns a list of OfficeVisitBeans for all office visits for the currently logged in patient\n\t * \n\t * @return  a list of OfficeVisitBeans for all office visits for the currently logged in patient\n\t * @throws iTrustException\n\t */\n\tpublic List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {\n\t\treturn ovDAO.getAllOfficeVisits(loggedInMID);\n\t}\n\n\t/**\n\t * Returns a complete OfficeVisitBean given a visitID\n\t * \n\t * @return a complete OfficeVisitBean given a visitID\n\t * @throws iTrustException\n\t */\n\tpublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\n\t\treturn ovDAO.getOfficeVisit(visitID);\n\t}\n\t\n\t/**\n\t * Returns a list of PatientBeans of all patients the currently logged in patient represents\n\t * \n\t * @return a list of PatientBeans of all patients the currently logged in patient represents\n\t * @throws iTrustException\n\t */\n\tpublic List<PatientBean> getRepresented() throws iTrustException {\n\t\treturn patientDAO.getRepresented(loggedInMID);\n\t}\n\n\t/**\n\t * Returns a list of PatientBeans of all patients the currently logged in patient represents\n\t * \n\t * @return a list of PatientBeans of all patients the currently logged in patient represents\n\t * @throws iTrustException\n\t */\n\tpublic List<PatientBean> getRepresenting() throws iTrustException {\n\t\treturn patientDAO.getRepresenting(loggedInMID);\n\t}\n\n\t/**\n\t * Has a survey been created for this office visit\n\t * \n\t * @param visitID ID of the office visit in question\n\t * @return true if the survey has been completed, otherwise false\n\t * @throws iTrustException\n\t */\n\tpublic boolean isSurveyCompleted(long visitID) throws iTrustException {\n\t\treturn surveyDAO.isSurveyCompleted(visitID);\n\t}\n\n\t/**\n\t * Returns a list of lab procedures\n\t * \n\t * @return a list of lab procedures for the logged in patient\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getLabs() throws iTrustException {\n\t\treturn labDAO.getLabProceduresForPatient(loggedInMID);\n\n\t}\n\n\t/**\n\t * Returns all the report requests for the logged in patient\n\t * @return the report requests for the logged in patient\n\t * @throws iTrustException\n\t */\n\tpublic List<ReportRequestBean> getReportRequests() throws iTrustException {\n\t\treturn reportRequestDAO.getAllReportRequestsForPatient(loggedInMID);\n\t}\n\t\n\t/**\n\t * Checks to see if family members have high blood pressure\n\t * \n\t * @param member the family member in question\n\t * @return true if the family member has the risk factor, otherwise false.\n\t * @throws iTrustException\n\t */\n\tpublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\n\t\tList<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n\t\tif(records.size() == 0)\n\t\t\treturn false;\n\t\tfor(HealthRecord record : records) {\n\t\t\tif(record.getBloodPressureSystolic() > 240 || record.getBloodPressureDiastolic() > 120 )\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if family members have high cholesterol\n\t * \n\t * @param member the family member in question\n\t * @return true if the family member has the risk factor, otherwise false.\n\t * @throws iTrustException\n\t */\n\tpublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\n\t\tList<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n\t\tif(records.size() == 0)\n\t\t\treturn false;\n\t\tfor(HealthRecord record : records) {\n\t\t\tif(record.getCholesterolHDL() < 35 || record.getCholesterolLDL() > 250 )\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if family members have diabetes\n\t * \n\t * @param member the family member in question\n\t * @return true if the family member has the risk factor, otherwise false.\n\t * @throws iTrustException\n\t */\n\tpublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\n\t\tList<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\n\t\tif(diagnoses.size() == 0)\n\t\t\treturn false;\n\t\tfor(DiagnosisBean diag : diagnoses) {\n\t\t\tif(diag.getICDCode().startsWith(\"250\"))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if family members have cancer\n\t * \n\t * @param member the family member in question\n\t * @return true if the family member has the risk factor, otherwise false.\n\t * @throws iTrustException\n\t */\n\tpublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\n\t\tList<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\n\t\tif(diagnoses.size() == 0)\n\t\t\treturn false;\n\t\tfor(DiagnosisBean diag : diagnoses) {\n\t\t\tif(diag.getICDCode().startsWith(\"199\"))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if family members have heart disease\n\t * \n\t * @param member the family member in question\n\t * @return true if the family member has the risk factor, otherwise false.\n\t * @throws iTrustException\n\t */\n\tpublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\n\t\tList<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\n\t\tif(diagnoses.size() == 0)\n\t\t\treturn false;\n\t\tfor(DiagnosisBean diag : diagnoses) {\n\t\t\tif(diag.getICDCode().startsWith(\"402\"))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if family members smoke\n\t * \n\t * @param member the family member in question\n\t * @return true if the family member has the risk factor, otherwise false.\n\t * @throws iTrustException\n\t */\n\tpublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\n\t\tList<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n\t\tif(records.size() == 0)\n\t\t\treturn false;\n\t\tfor(HealthRecord record : records) {\n\t\t\tif(record.isSmoker())\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Checks to see if family member is dead, and if so, what their cause of death was\n\t * \n\t * @param member the family member in question\n\t * @return the cause of death for the family member\n\t * @throws iTrustException\n\t */\n\tpublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\n\t\tPatientBean patient = patientDAO.getPatient(member.getMid());\n\t\tif(patient.getCauseOfDeath() == null)\n\t\t\treturn \"\";\n\t\tDiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\n\t\tif(diag == null)\n\t\t\treturn \"\";\n\t\treturn diag.getDescription();\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cbb"},"name":"src/edu/ncsu/csc/itrust/action/ViewReportAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.beans.ProcedureBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * \n * Action class for ViewReport.jsp\n *\n */\npublic class ViewReportAction {\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\n\t/**\n\t * Set up defaults\n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing the report.\n\t */\n\tpublic ViewReportAction(DAOFactory factory, long loggedInMID) {\n\t\tpatientDAO = factory.getPatientDAO();\n\t\tpersonnelDAO = factory.getPersonnelDAO();\n\t}\n\n\t/**\n\t *  Get diagnosis list for the given patient\n\t * @param pid the patient of interest\n\t * @return list of diagnoses\n\t * @throws iTrustException\n\t */\n\tpublic List<DiagnosisBean> getDiagnoses(long pid) throws iTrustException {\n\t\treturn patientDAO.getDiagnoses(pid);\n\t}\n\n\t/**\n\t *  Get procedure list for the given patient\n\t * @param pid the patient of interest\n\t * @return list of procedures\n\t * @throws iTrustException\n\t */\n\tpublic List<ProcedureBean> getProcedures(long pid) throws iTrustException {\n\t\treturn patientDAO.getProcedures(pid);\n\t}\n\n\t/**\n\t *  Get prescription list for the given patient\n\t * @param pid the patient of interest\n\t * @return list of prescriptions\n\t * @throws iTrustException\n\t */\n\tpublic List<PrescriptionBean> getPrescriptions(long pid) throws iTrustException {\n\t\treturn patientDAO.getCurrentPrescriptions(pid);\n\t}\n\n\t/**\n\t *  Get declared HCPs list for the given patient\n\t * @param pid the patient of interest\n\t * @return list of declared HCPs\n\t * @throws iTrustException\n\t */\n\tpublic List<PersonnelBean> getDeclaredHCPs(long pid) throws iTrustException {\n\t\treturn patientDAO.getDeclaredHCPs(pid);\n\t}\n\t\n\t/**\n\t * Returns a PersonnelBean when given an MID\n\t * @param mid HCP of interest\n\t * @return PersonnelBean of the given HCP\n\t * @throws iTrustException\n\t */\n\tpublic PersonnelBean getPersonnel(long mid) throws iTrustException {\n\t\treturn personnelDAO.getPersonnel(mid);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cbc"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/ReportRequestDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cb7"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cbd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d36"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d39"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Date;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.ReportRequestBean;\nimport edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used for handling data related to report requests.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n */\npublic class ReportRequestDAO {\n\tprivate DAOFactory factory;\n\tprivate ReportRequestBeanLoader loader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic ReportRequestDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tloader = new ReportRequestBeanLoader();\n\t}\n\t\n\t/**\n\t * Returns a full bean describing a given report request.\n\t * \n\t * @param id The unique ID of the bean in the database.\n\t * @return The bean describing this report request.\n\t * @throws DBException\n\t */\n\tpublic ReportRequestBean getReportRequest(long id) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (id == 0L) throw new SQLException(\"ID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE ID = ?\");\n\t\t\tps.setLong(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\trs.next();\n\t\t\treturn loader.loadSingle(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns all report requests associated with a given requester.\n\t * \n\t * @param mid The MID of the personnel in question.\n\t * @return A java.util.List of report requests.\n\t * @throws DBException\n\t */\n\tpublic List<ReportRequestBean> getAllReportRequestsForRequester(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tif (mid == 0L) throw new SQLException(\"RequesterMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE RequesterMID = ?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn loader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Returns all of the report requests associated with a specific patient.\n\t * \n\t * @param pid The MID of the patient in question.\n\t * @return A java.util.List of report requests.\n\t * @throws DBException\n\t */\n\tpublic List<ReportRequestBean> getAllReportRequestsForPatient(long pid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tif (pid == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE PatientMID = ?\");\n\t\t\tps.setLong(1, pid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn loader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n//\t/**\n//\t * Returns every report request in the database.\n//\t * @return A java.util.List of report requests.\n//\t * @throws DBException\n//\t */\n//\tpublic List<ReportRequestBean> getAllReportRequests() throws DBException {\n//\t\tConnection conn = null;\n//\t\tPreparedStatement ps = null;\n//\n//\t\ttry {\n//\t\t\tconn = factory.getConnection();\n//\t\t\tps = conn.prepareStatement(\"SELECT * FROM ReportRequests\");\n//\t\t\tResultSet rs = ps.executeQuery();\n//\t\t\treturn loader.loadList(rs);\n//\t\t} catch (SQLException e) {\n//\t\t\te.printStackTrace();\n//\t\t\tthrow new DBException(e);\n//\t\t} finally {\n//\t\t\tDBUtil.closeConnection(conn, ps);\n//\t\t}\n//\t}\n\t\n\t/**\n\t * Adds a request for a report.\n\t * \n\t * @param requesterMID The MID of the requester.\n\t * @param patientMID The MID of the patient in question.\n\t * @param date The date the request was made.\n\t * @return A long of the unique ID of the report request.\n\t * @throws DBException\n\t */\n\tpublic long addReportRequest(long requesterMID, long patientMID, Date date) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (requesterMID == 0L) throw new SQLException(\"RequesterMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO ReportRequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,'Requested')\");\n\t\t\tps.setLong(1, requesterMID);\n\t\t\tps.setLong(2, patientMID);\n\t\t\tps.setTimestamp(3, new java.sql.Timestamp(date.getTime()));\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n//\t/**\n//\t * Sets the status of a request to 'Approved'\n//\t * \n//\t * @param ID The unique ID of the report.\n//\t * @param approverMID The MID of the person approving the request.\n//\t * @param date The date the approval was made.\n//\t * @throws DBException\n//\t */\n//\tpublic void approveReportRequest(long ID, long approverMID, Date date) throws DBException {\n//\t\tConnection conn = null;\n//\t\tPreparedStatement ps = null;\n//\t\ttry {\n//\t\t\tif (ID == 0L) throw new SQLException(\"ID cannot be null\");\n//\t\t\tconn = factory.getConnection();\n//\t\t\tps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Approved' where ID = ?\");\n//\t\t\tps.setLong(1, approverMID);\n//\t\t\tps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\n//\t\t\tps.setLong(3, ID);\n//\t\t\tps.executeUpdate();\n//\t\t} catch (SQLException e) {\n//\t\t\te.printStackTrace();\n//\t\t\tthrow new DBException(e);\n//\t\t} finally {\n//\t\t\tDBUtil.closeConnection(conn, ps);\n//\t\t}\n//\t}\n//\n//\t/**\n//\t * Sets the status of a report request to 'Rejected'\n//\t * \n//\t * @param ID The unique ID of the request in question.\n//\t * @param approverMID The MID of the rejecter in question.\n//\t * @param date The date the rejection was made.\n//\t * @param comment A comment describing why the request was rejected.\n//\t * @throws DBException\n//\t */\n//\tpublic void rejectReportRequest(long ID, long approverMID, Date date, String comment) throws DBException {\n//\t\tConnection conn = null;\n//\t\tPreparedStatement ps = null;\n//\t\ttry {\n//\t\t\tif (ID == 0L) throw new SQLException(\"ID cannot be null\");\n//\t\t\tconn = factory.getConnection();\n//\t\t\tps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Rejected', comment = ? where ID = ?\");\n//\t\t\tps.setLong(1, approverMID);\n//\t\t\tps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\n//\t\t\tps.setString(3, comment);\n//\t\t\tps.setLong(4, ID);\n//\t\t\tps.executeUpdate();\n//\t\t} catch (SQLException e) {\n//\t\t\te.printStackTrace();\n//\t\t\tthrow new DBException(e);\n//\t\t} finally {\n//\t\t\tDBUtil.closeConnection(conn, ps);\n//\t\t}\n//\t}\n\t\n\t/**\n\t * Sets the status of a report request to 'Viewed'\n\t * \n\t * @param ID The unique ID of the request in question.\n\t * @param date The date the request was viewed.\n\t * @throws DBException\n\t */\n\tpublic void setViewed(long ID, Date date) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (ID == 0L) throw new SQLException(\"ID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE ReportRequests set ViewedDate = ?, Status = 'Viewed' where ID = ?\");\n\t\t\tps.setTimestamp(1, new java.sql.Timestamp(date.getTime()));\n\t\t\tps.setLong(2, ID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t\t\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cbe"},"name":"WebRoot/auth/hcp-uap/viewMyReportRequests.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cbd"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ReportRequestBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - View My Report Requests\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tPatientDAO patientDAO = new PatientDAO(prodDAO);\n\tPersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);\n\nViewMyReportRequestsAction action = new ViewMyReportRequestsAction(prodDAO, loggedInMID.longValue());\nString pidString = (String)session.getAttribute(\"pid\");\nif (null != pidString && ! \"\".equals(pidString)) {\n\ttry {\n\t\tsession.setAttribute(\"pid\", null);\n\t\tlong patientMID = Long.parseLong(pidString);\n\t\tlong id = action.addReportRequest(patientMID);\n\t\t%><span>Report Request Accepted</span><%\n\t} catch (Exception e) {\n\t\t%><span><%=e.getMessage()%></span><%\n\t}\n}\nelse {\n\tsession.removeAttribute(\"pid\");\n}\n\nList<ReportRequestBean> list = action.getAllReportRequestsForRequester();\n%>\n<br /><br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"10\">Report Requests</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n    \t\t<td>ID</td>\n   \t\t\t<td>Patient</td>\n  \t\t\t<td>Requested Date</td>\n  \t\t\t<td>Viewed Date</td>\n  \t\t\t<td>Status</td>\n  \t\t\t<td>Action</td>\n  \t</tr>\n <%\n \t\tList<PatientBean> patients = new ArrayList<PatientBean>();\n \t\tPatientBean patient;\n \t\tPersonnelBean personnel;\n \t\tint index = 0;\n \t\tfor (ReportRequestBean bean:list) { \n \t\t\tpatient = patientDAO.getPatient(bean.getPatientMID());\n \t\t\tpatients.add(patient);\n %>\n\t\t\t<tr>\n\t\t\t\t<td ><%=bean.getID()%></td>\n\t\t\t\t<td ><%=patient.getFullName()%></td>\n\t\t\t\t<td ><%=bean.getRequestedDateString()%></td>\n\t\t\t\t<td ><%=bean.getViewedDateString()%></td>\n\t\t\t\t<td ><%=bean.getStatus()%></td>\n\t\t\t\t<td ><a href=\"viewReport.jsp?patient=<%=index%>&requestID=<%=bean.getID()%>\">View</a></td>\n\t\t\t</tr>\n<%\t\t\tindex ++;\n\t\t} \n\t\tsession.setAttribute(\"patients\", patients);\n%>\n</table>\n<br />\n<a href=\"/iTrust/auth/getPatientID.jsp?forward=hcp-uap/viewMyReportRequests.jsp\">Add a new Report Request</a>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cc0"},"name":"WebRoot/auth/patient/survey.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cbf"}]],"contents":"<%@page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.beans.SurveyBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.SurveyAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Patient Survey\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nSurveyAction action = new SurveyAction(prodDAO, loggedInMID.longValue());\nSurveyBean surveyBean = null;\nlong visitID = 0;\n//get office visit ID from previous JSP\nString visitIDStr = request.getParameter(\"ovID\");\nString visitDateStr = request.getParameter(\"ovDate\");\n\n\nif(visitIDStr != null && !visitIDStr.equals(\"\")) {\n\ttry {\n\t\tvisitID = Long.parseLong(visitIDStr);\n\n\t} catch(Exception e) {\n\t\te.printStackTrace();\n\t}\n}\n\nboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\nif(formIsFilled) {\n\tsurveyBean = new BeanBuilder<SurveyBean>().build(request.getParameterMap(), new SurveyBean());\n\tsurveyBean.setVisitID(visitID);\n\t\n\tString waitingMinutes = request.getParameter(\"waitingMinutesString\");\n\tif (waitingMinutes != null && !waitingMinutes.equals(\"\"))\n\t\tsurveyBean.setWaitingRoomMinutes(Integer.parseInt(waitingMinutes));\n\t\n\tString examMinutes = request.getParameter(\"examMinutesString\");\n\tif (examMinutes != null && !examMinutes.equals(\"\"))\n\t\tsurveyBean.setExamRoomMinutes(Integer.parseInt(examMinutes));\n\t\n\t//update satisfaction number in bean\n\tif (request.getParameter(\"Satradios\") != null) {\n\t\tif (request.getParameter(\"Satradios\").equals(\"satRadio5\")) {\n\t\t\tsurveyBean.setVisitSatisfaction(5);\n\t\t} if (request.getParameter(\"Satradios\").equals(\"satRadio4\")) {\n\t\t\tsurveyBean.setVisitSatisfaction(4);\n\t\t} if (request.getParameter(\"Satradios\").equals(\"satRadio3\")) {\n\t\t\tsurveyBean.setVisitSatisfaction(3);\n\t\t} if (request.getParameter(\"Satradios\").equals(\"satRadio2\")) {\n\t\t\tsurveyBean.setVisitSatisfaction(2);\n\t\t} if (request.getParameter(\"Satradios\").equals(\"satRadio1\")) {\n\t\t\tsurveyBean.setVisitSatisfaction(1);\n\t\t}\n\t}\n\n    //update treatment number in bean\n\tif (request.getParameter(\"Treradios\") != null) {\n\t\tif (request.getParameter(\"Treradios\").equals(\"treRadio5\")) {\n\t\t\tsurveyBean.setTreatmentSatisfaction(5);\n\t\t} if (request.getParameter(\"Treradios\").equals(\"treRadio4\")) {\n\t\t\tsurveyBean.setTreatmentSatisfaction(4);\n\t\t} if (request.getParameter(\"Treradios\").equals(\"treRadio3\")) {\n\t\t\tsurveyBean.setTreatmentSatisfaction(3);\n\t\t} if (request.getParameter(\"Treradios\").equals(\"treRadio2\")) {\n\t\t\tsurveyBean.setTreatmentSatisfaction(2);\n\t\t} if (request.getParameter(\"Treradios\").equals(\"treRadio1\")) {\n\t\t\tsurveyBean.setTreatmentSatisfaction(1);\n\t\t}\n\t}\n    \n    try {\n    \t//add survey data\n    \taction.addSurvey(surveyBean, visitID);\n\t\tresponse.sendRedirect(\"viewMyRecords.jsp?message=Survey%20Successfully%20Submitted\");\n\t\t\n     } catch(Exception e) {\n    \t%><span ><%=e.getMessage()%></span><%\n    }\n} else{\n\tif(visitDateStr.contains(\"<\")) throw new iTrustException(\"Illegal parameter for ovDate.\");\n}\n\n\n\t\n%>\n<div id=Header>\n<h1>iTrust Patient Survey for Office Visit on <%=visitDateStr %></h1></div>\n<div id=Content>\n\n<form action=\"survey.jsp\" method=\"post\" name=\"mainForm\">\n<input type=\"hidden\" name=\"formIsFilled\" value=\"true\"> \n<input type=\"hidden\" name=\"ovID\" value=\"<%=visitIDStr%>\">\n<h3>How long did you have to wait during your visit?</h3>\n<table>\n\t<tr>\n\t\t<td>In the waiting room?</td>\n\t\t<td><input type=\"text\" name=\"waitingMinutesString\" maxlength =3 size=3 /> </td>\n\t\t<td>1-999 minutes</td>\n\t</tr>\n\t\n\t<tr>\n\t\t<td>In the examination room <br />before seeing your physician?</td>\n\t\t<td><input type=\"text\" name=\"examMinutesString\" maxlength =3 size=3 /> </td>\n\t\t<td>1-999 minutes</td>\n\t</tr>\n</table>\n\n<h3>How satisfied were you with your office visit?</h3>\n<table><tr><td>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Satradios\" value=\"satRadio5\">\nVery Satisfied (5) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Satradios\" value=\"satRadio4\">\nSatisfied (4) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Satradios\" value=\"satRadio3\">\nModerately Satisfied (3) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Satradios\" value=\"satRadio2\">\nSomewhat Unhappy (2) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Satradios\" value=\"satRadio1\">\nVery Unhappy (1) <br /></td></tr>\n</table>\n\n<h3>How satisfied were you with the treatment or information you received?</h3>\n<table><tr><td>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Treradios\" value=\"treRadio5\">\nVery Satisfied (5) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Treradios\" value=\"treRadio4\">\nSatisfied (4) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Treradios\" value=\"treRadio3\">\nModerately Satisfied (3) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Treradios\" value=\"treRadio2\">\nSomewhat Unhappy (2) <br /></td></tr>\n<tr><td><input align=\"left\" type=\"radio\" name=\"Treradios\" value=\"treRadio1\">\nVery Unhappy (1) <br /></td></tr>\n</table>\n<br />\n<br />\n\n<input type=\"submit\" style=\"font-size: 16pt; font-weight: bold;\" value=\"Submit Survey\">\n</form>\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cc1"},"name":"src/edu/ncsu/csc/itrust/action/SurveyAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cbf"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.Calendar;\nimport edu.ncsu.csc.itrust.beans.SurveyBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * This class is used to add patient survey data to the database.  The office visit ID is linked with the survey ID.  Once the\n * survey is added, the transaction is logged\n *\n */\npublic class SurveyAction {\n\tprivate TransactionDAO transDAO;\n\tprivate SurveyDAO surveyDAO;\n\tlong loggedInMID;\n\t\n\t/**\n\t * Sets up defaults\n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the user taking the survey.\n\t */\n\tpublic SurveyAction(DAOFactory factory, long loggedInMID) {\n\t\ttransDAO = factory.getTransactionDAO();\n\t\tsurveyDAO = factory.getSurveyDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\n\n\t/**\n\t * Pass the OfficeVistBean along with SurveyBean\n\t * @param surveyBean contains data to be added to database\n\t * @param visitID The Office Visit ID corresponding to this Survey.\n\t * @throws DBException\n\t */\n\tpublic void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {\n\t\t\n\t\tsurveyBean.setVisitID(visitID); //now set visit ID in the survey bean\n\t\tsurveyDAO.addCompletedSurvey(surveyBean, Calendar.getInstance().getTime());\n\t\t//add to transaction log\n\t\ttransDAO.logTransaction(TransactionType.ADD_PATIENT_SURVEY, loggedInMID, 0L, \"office visit ID for completed survey is: \" + visitID);\n\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cc2"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/SurveyDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cbf"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Date;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.SurveyBean;\nimport edu.ncsu.csc.itrust.beans.loaders.SurveyLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * A DAO for handling all Survey data.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n */\npublic class SurveyDAO {\n\tprivate DAOFactory factory;\n\tprivate SurveyLoader surveyLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic SurveyDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tthis.surveyLoader = new SurveyLoader();\n\t}\n\t\n\t/**\n\t * Insert survey data into database.\n\t * @param surveyBean The Bean representing the user's responses which will be inserted.\n\t * @param date The date the survey was completed.\n\t */\n\tpublic void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO OVSurvey (VisitID, SurveyDate) VALUES (?,?)\");\n\t\t\tps.setLong(1, surveyBean.getVisitID());\n\t\t\tps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\n\t\t\tps.executeUpdate();\n\t\t\tif (surveyBean.getWaitingRoomMinutes() > 0) {\n\t\t\t\tps = conn.prepareStatement(\"update OVSurvey set WaitingRoomMinutes = ? where VisitID = ?\");\n\t\t\t\tps.setFloat(1, surveyBean.getWaitingRoomMinutes());\n\t\t\t\tps.setLong(2, surveyBean.getVisitID());\n\t\t\t\tps.executeUpdate();\n\t\t\t}\n\t\t\tif (surveyBean.getExamRoomMinutes() > 0) {\n\t\t\t\tps = conn.prepareStatement(\"update OVSurvey set ExamRoomMinutes = ? where VisitID = ?\");\n\t\t\t\tps.setFloat(1, surveyBean.getExamRoomMinutes());\n\t\t\t\tps.setLong(2, surveyBean.getVisitID());\n\t\t\t\tps.executeUpdate();\n\t\t\t}\n\t\t\tif (surveyBean.getVisitSatisfaction() > 0) {\n\t\t\t\tps = conn.prepareStatement(\"update OVSurvey set VisitSatisfaction = ? where VisitID = ?\");\n\t\t\t\tps.setFloat(1, surveyBean.getVisitSatisfaction());\n\t\t\t\tps.setLong(2, surveyBean.getVisitID());\n\t\t\t\tps.executeUpdate();\n\t\t\t}\n\t\t\tif (surveyBean.getTreatmentSatisfaction() > 0) {\n\t\t\t\tps = conn.prepareStatement(\"update OVSurvey set TreatmentSatisfaction = ? where VisitID = ?\");\n\t\t\t\tps.setFloat(1, surveyBean.getTreatmentSatisfaction());\n\t\t\t\tps.setLong(2, surveyBean.getVisitID());\n\t\t\t\tps.executeUpdate();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets survey data from the database by the office visit id. Creates an instance of an\n\t * SurveyBean with data and returns it.\n\t * \n\t * @param id The unique ID of the survey in question.\n\t * @return A bean containing the SurveyBean.\n\t * @throws DBException\n\t */\n\tpublic SurveyBean getSurveyData(long id) throws DBException {\n\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM OVSurvey WHERE VisitID = ?\");\n\t\t\tps.setLong(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\trs.next();\n\t\t\treturn surveyLoader.loadSingle(rs);\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Has this survey been completed?\n\t * \n\t * @param visitID The unique ID of the office visit we are wondering about.\n\t * @return boolean indicating whether this survey is completed.\n\t * @throws DBException\n\t */\n\tpublic boolean isSurveyCompleted(long visitID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT count(*) FROM OVSurvey WHERE VisitID = ?\");\n\t\t\tps.setLong(1, visitID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\trs.next();\n\t\t\treturn (rs.getInt(1) == 0) ? false : true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cc4"},"name":"WebRoot/auth/surveyResults.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc3"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc7"}]],"contents":"<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.beans.SurveyResultBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HospitalBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewSurveyResultAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"java.util.List\"%>\n\n<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Survey Results\";\nloginMessage = \"\";\nsession.removeAttribute(\"personnelList\");\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<div align=\"center\">\n\t<h2>Search HCP Survey Results</h2>\n<%\n\tViewSurveyResultAction action = new ViewSurveyResultAction(prodDAO, loggedInMID.longValue());\n\tHospitalsDAO hospitalDAO = new HospitalsDAO(prodDAO);\n\tList<HospitalBean> hcpHospitals = hospitalDAO.getAllHospitals();\n\tSurveyResultBean bean = null;\n\tString zipCode = \"\";\n\tString hospitalID = \"\";\n\tString specialty = \"\";\n\tList<SurveyResultBean> resultList = null;\n\n\tboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n\t\t\t&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\n\tif (formIsFilled) {\n\t\tbean = new BeanBuilder<SurveyResultBean>().build(request\n\t\t\t\t.getParameterMap(), new SurveyResultBean());\n\n\t\ttry {\n\t\t\t//set data to be sent from input text box and drop down box\n\t\t\tzipCode = request.getParameter(\"hcpZip\");\n\t\t\thospitalID = request.getParameter(\"hcpHospitalID\");\n\t\t\tspecialty = request.getParameter(\"hcpSpecialty\");\n\n\t\t\t//do not submit if zip is not filled in\n\t\t\tif((!zipCode.equals(\"\") && zipCode != null) && (!hospitalID.equals(\"\") && hospitalID != null)) {\n\t\t\t\t%><span >Data for both Zip Code and Hospital ID is not allowed.  Please choose either Zip or Hospital ID.</span><%\n\t\t\t}\n\t\t\telse if (!zipCode.equals(\"\") && zipCode != null) {\n\t\t\t\tbean.setHCPzip(zipCode);\n\t\t\t\tbean.setHCPspecialty(specialty);\n\t\t\t\tresultList = action.getSurveyResultsForZip(bean);\n\t\t\t} else if (!hospitalID.equals(\"\") && hospitalID != null) {\n\t\t\t\tbean.setHCPhospital(hospitalID);\n\t\t\t\tbean.setHCPspecialty(specialty);\n\t\t\t\tresultList = action.getSurveyResultsForHospital(bean);\n\t\t\t} else {\n\t\t\t\t%><span >You must enter either a zip code or a hospital ID.</span><%\n\t\t\t}\n\t\t} catch(FormValidationException e){\n\t\t\te.printHTML(pageContext.getOut());\n\t\t}\n\t}\n%>\n\n\n<form action=\"surveyResults.jsp\" method=\"post\"><input type=\"hidden\" name=\"formIsFilled\" value=\"true\"> <br />\n<div style=\"width: 50%; text-align:left;\">\nThis search allows you to search for a HCP based on a zip code or hospital ID.  To search, you must enter either a zip code OR a hospital ID, but not both.\n<br />Note: Search by zip code returns all HCPs that have zip codes with a match of the first 3 digits.\n<br />\n<br />\n</div>\n<table>\n\t<tr>\n\t\t<td>Zip Code:</td>\n\t\t<td><input type=\"text\" name=\"hcpZip\" maxlength=\"10\" size=\"10\" value=\"<%=zipCode%>\"></td>\n\t\t<td> - OR -</td>\n\t\t<td>Hospital ID:</td>\n\t\t<td><select name=\"hcpHospitalID\">\n\t\t\t\t<option value=\"\">N/A</option>\n\t\t\t\t<%for(HospitalBean hos : hcpHospitals) {%>\n\t\t\t\t\t<option value=\"<%=hos.getHospitalID()%>\"<%if (hos.getHospitalID().equals(hospitalID)) {%> selected=\"selected\"<%}%>><%=hos.getHospitalID()%></option>\n\t\t\t\t<%} %>\t\t\t\t\n\t\t\t</select>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t<td colspan=\"5\" align=\"center\">Specialty (optional):</td>\n\t</tr>\n\t<tr>\n\t\t<td colspan=\"5\" align=\"center\"><select name=\"hcpSpecialty\">\n\t\t\t<option value=\"<%=SurveyResultBean.ANY_SPECIALTY %>\"<%if (specialty.equals(SurveyResultBean.ANY_SPECIALTY)) {%> selected=\"selected\"<%}%>>-- Any Specialty --</option>\n\t\t\t<option value=\"<%=SurveyResultBean.GENERAL_SPECIALTY %>\"<%if (specialty.equals(SurveyResultBean.GENERAL_SPECIALTY)) {%> selected=\"selected\"<%}%>><%=SurveyResultBean.GENERAL_SPECIALTY%></option>\n\t\t\t<option value=\"<%=SurveyResultBean.HEART_SPECIALTY %>\"<%if (specialty.equals(SurveyResultBean.HEART_SPECIALTY)) {%> selected=\"selected\"<%}%>><%=SurveyResultBean.HEART_SPECIALTY%></option>\n\t\t\t<option value=\"<%=SurveyResultBean.OBGYN_SPECIALTY %>\"<%if (specialty.equals(SurveyResultBean.OBGYN_SPECIALTY)) {%> selected=\"selected\"<%}%>><%=SurveyResultBean.OBGYN_SPECIALTY%></option>\n\t\t\t<option value=\"<%=SurveyResultBean.PEDIATRICIAN_SPECIALTY %>\"<%if (specialty.equals(SurveyResultBean.PEDIATRICIAN_SPECIALTY)) {%> selected=\"selected\"<%}%>><%=SurveyResultBean.PEDIATRICIAN_SPECIALTY%></option>\n\t\t\t<option value=\"<%=SurveyResultBean.SURGEON_SPECIALTY %>\"<%if (specialty.equals(SurveyResultBean.SURGEON_SPECIALTY)) {%> selected=\"selected\"<%}%>><%=SurveyResultBean.SURGEON_SPECIALTY%></option>\n\t\t\t</select>\n\t\t</td>\n\t</tr>\n\t<tr>\n \t<tr>\n\t\t<td colspan=5 align=center><input type=\"submit\"\n\t\t\tstyle=\"font-size: 16pt; font-weight: bold;\" value=\"Search\"></td>\n\t</tr>\n</table>\n</form>\n\n<%\n\tif (resultList != null) {\n%>\n<br />\n\n<h2>Survey Results</h2>\n<%\n\tif (resultList.size() == 0) {\n%>\n\t\t<span class=\"iTrustError\">No HCPs were found that meet your search criteria.  Please change your search criteria and search again.\n\t\t</span>\n<%\n\t} else {\n%>\n<table  class=\"fTable\">\n\t<tr>\n\t\t<th colspan=\"14\">LHCP Search Results:</th>\n\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<th>Doctor's Name</th>\n\t\t<th>Address 1</th>\n\t\t<th>Address 2</th>\n\t\t<th>City</th>\n\t\t<th>State</th>\n\t\t<th>Zip</th>\n\t\t<th>Specialty</th>\n\t\t<th>Hospital</th>\n\t\t<th>Waiting Room<br />Minutes</th>\n\t\t<th>Exam Room<br />Minutes</th>\n\t\t<th>Visit<br />Satisfaction</th>\n\t\t<th>Treatment<br />Satisfaction</th>\n\t\t<th>Percent<br />Results</th>\n\t</tr>\n\t<%\n\t\tList<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();\n\t\tint index = 0;\n\t\tfor (SurveyResultBean surveyResult : resultList) {\n\t%>\n\t<tr>\n\t\t<td align=center >\n\t\t<a href=\"/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>\"><%=surveyResult.getHCPFirstName()%> <%=surveyResult.getHCPLastName()%></a></td>\n\t\t<td align=center ><%=surveyResult.getHCPaddress1()%></td>\n\t\t<td align=center ><%=surveyResult.getHCPaddress2()%></td>\n\t\t<td align=center ><%=surveyResult.getHCPcity()%></td>\n\t\t<td align=center ><%=surveyResult.getHCPstate()%></td>\n\t\t<td align=center ><%=surveyResult.getHCPzip()%></td>\n\t\t<td align=center ><%=surveyResult.getHCPspecialty()%></td>\n\t\t<td align=center ><%=surveyResult.getHCPhospital()%></td>\n\t\t<td align=center ><%=String.format(\"%.2f\", surveyResult.getAvgWaitingRoomMinutes())%></td>\n\t\t<td align=center ><%=String.format(\"%.2f\", surveyResult.getAvgExamRoomMinutes())%></td>\n\t\t<td align=center ><%=String.format(\"%.2f\", surveyResult.getAvgVisitSatisfaction())%></td>\n\t\t<td align=center ><%=String.format(\"%.2f\", surveyResult.getAvgTreatmentSatisfaction())%></td>\n\t\t<td align=center ><%=String.format(\"%.0f\", surveyResult.getPercentSatisfactionResults())%>%</td>\n\t</tr>\n<%\n\t\tPersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(surveyResult.getHCPMID());\n\t\tpersonnelList.add(personnel);\n\t\tindex++;\n\t\t}\n\tsession.setAttribute(\"personnelList\", personnelList);\n%>\n</table>\n<table>\n<tr><td>\n<i>The search results show the the averages for each HCP and include:</i> \n<ol><li>Number of minutes patients typically wait in a waiting room\n<li>Average number of minutes patients wait in the examination room prior to seeing a physician\n<li>Average office visit satisfaction\n<li>Average satisfaction with treatment/information\n<li>Percent of office visits for which satisfaction information is available</ol>\n</td></tr></table>\n<% } %>\n\n<% }  %>\n <br />\n</div>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cc5"},"name":"src/edu/ncsu/csc/itrust/action/ViewSurveyResultAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc3"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.SurveyResultBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.SurveySearchValidator;\n\n/**\n * This class is used to handle retrieving survey results from the database.  It also logs the transaction.\n */\npublic class ViewSurveyResultAction {\n\t\n\tprivate SurveyResultDAO surveyResultDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate SurveySearchValidator validator;\n\tlong loggedInMID;\n\t\n\t/**\n\t * Set up defaults.\n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person retrieving survey results.\n\t */\n\tpublic ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {\n\t\ttransDAO = factory.getTransactionDAO();\n\t\tsurveyResultDAO = factory.getSurveyResultDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tvalidator = new SurveySearchValidator();\n\t}\n\t\n\t/**\n\t * Retrieves survey results for a whole hospital.\n\t * @param bean The SurveyResultBean containing the survey result specs.\n\t * @return A java.util.List of Survey Results.\n\t * @throws iTrustException\n\t * @throws FormValidationException\n\t */\n\tpublic List<SurveyResultBean> getSurveyResultsForHospital(SurveyResultBean bean) throws iTrustException, FormValidationException {\n\t\t\n\t\ttransDAO.logTransaction(TransactionType.View_HCP_SURVEY_RESULTS, loggedInMID, 0, \"searched results by HCP hospital ID\");\t\n\t\t\n\t\treturn surveyResultDAO.getSurveyResultsForHospital(bean.getHCPhospital(), bean.getHCPspecialty());\n\n\t\t\n\t}\n\t\n\t/**\n\t * Retrieves survey results for a given zip code.\n\t * @param bean The SurveyResultBean containing the survey result specs.\n\t * @return A java.util.List of Survey Results.\n\t * @throws iTrustException\n\t * @throws FormValidationException\n\t */\n\tpublic List<SurveyResultBean> getSurveyResultsForZip(SurveyResultBean bean) throws iTrustException, FormValidationException {\n\t\t\n\t\tvalidator.validate(bean);\n\t\ttransDAO.logTransaction(TransactionType.View_HCP_SURVEY_RESULTS, loggedInMID, 0, \"searched results by HCP zip code\");\n\t\t\n\t\treturn surveyResultDAO.getSurveyResultsForZip(bean.getHCPzip(), bean.getHCPspecialty());\n\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cc6"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/SurveyResultDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cc3"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.SurveyResultBean;\nimport edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * A DAO for handling all Survey results.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n */\npublic class SurveyResultDAO {\n\tprivate DAOFactory factory;\n\tprivate SurveyResultBeanLoader loader;\n\t\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic SurveyResultDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tthis.loader = new SurveyResultBeanLoader();\n\t}\n\t\n\t/**\n\t * Returns all the survey results in the database that correspond to a particular zip code.\n\t * \n\t * @param zip The zipcode we are interested in as a String.\n\t * @param specialty The specialty we are interested in as a String.\n\t * @return A java.util.List of SurveyResultBeans.\n\t * @throws DBException\n\t */\n\tpublic List<SurveyResultBean> getSurveyResultsForZip(String zip, String specialty) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\tStringBuffer sql = new StringBuffer();\n\t\tsql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\n\t\tsql.append(\"'na' hospitalID, \");\n\t\tsql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\n\t\tsql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\n\t\tsql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\n\t\tsql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\n\t\tsql.append(\"count(*) / \");\n\t\tsql.append(\"\t(select count(*) from personnel p1, officevisits v1 \");\n\t\tsql.append(\"\t where v1.hcpid = p1.mid \");\n\t\tsql.append(\"\t and substr(p1.zip,1,3) = ? \");\n\t\tsql.append(\"\t and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\n\t\tsql.append(\"from ovsurvey s, personnel p, officevisits v \");\n\t\tsql.append(\"where s.visitid = v.id \");\n\t\tsql.append(\"and v.hcpid = p.mid \");\n\t\tsql.append(\"and substr(p.zip,1,3) = ? \");\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\n\t\t\tsql.append(\"and specialty = ?\");\n\t\tsql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\n\t\t\tsql.append(\", p.specialty \");\n\t\tsql.append(\"order by p.mid \");\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(sql.toString());\n\t\t\tps.setString(1, zip.substring(0, 3));\n\t\t\tps.setString(2, zip.substring(0, 3));\n\t\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\n\t\t\t\tps.setString(3, specialty);\n\t\t\treturn loader.loadList(ps.executeQuery());\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns all the survey data associated with a given hospital and a certain specialty.\n\t * \n\t * @param hospitalID The unique ID of the iTrust hospital we are querying about.\n\t * @param specialty A string representing the specialty we are interested in.\n\t * @return A java.util.List of SurveyResultBeans.\n\t * @throws DBException\n\t */\n\tpublic List<SurveyResultBean> getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\tStringBuffer sql = new StringBuffer();\n\t\tsql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\n\t\tsql.append(\"h.hosid hospitalID, \");\n\t\tsql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\n\t\tsql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\n\t\tsql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\n\t\tsql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\n\t\tsql.append(\"count(*) / \");\n\t\tsql.append(\"\t(select count(*) from personnel p1, officevisits v1, HCPAssignedHos h1 \");\n\t\tsql.append(\"\t where v1.hcpid = p1.mid \");\n\t\tsql.append(\"\t and v1.hcpid = h1.hcpid \");\n\t\tsql.append(\"\t and h1.hosid = ? \");\n\t\tsql.append(\"\t and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\n\t\tsql.append(\"from ovsurvey s, personnel p, officevisits v, HCPAssignedHos h \");\n\t\tsql.append(\"where s.visitid = v.id \");\n\t\tsql.append(\"and v.hcpid = p.mid \");\n\t\tsql.append(\"and v.hcpid = h.hcpid \");\n\t\tsql.append(\"and h.hosid = ? \");\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\n\t\t\tsql.append(\"and p.specialty = ?\");\n\t\tsql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\n\t\t\tsql.append(\", p.specialty \");\n\t\tsql.append(\"order by p.mid \");\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(sql.toString());\n\t\t\tps.setString(1, hospitalID);\n\t\t\tps.setString(2, hospitalID);\n\t\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY)) {\n\t\t\t\tps.setString(3, specialty);\n\t\t\t}\n\t\t\treturn loader.loadList(ps.executeQuery());\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ccb"},"name":"WebRoot/auth/patient/viewMyRecords.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cca"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1e"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d52"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.text.DateFormat\"%>\n<%@page import=\"java.util.Date\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.EditPHRAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.AllergyBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.FamilyMemberBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HealthRecord\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.OfficeVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyRecordsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LabProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - View My Records\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nsession.removeAttribute(\"personnelList\");\n\n\tString representee = request.getParameter(\"rep\");\n\tboolean isRepresenting = false;\n\tif (representee != null && !\"\".equals(representee)) {\n\t\tint representeeIndex = Integer.parseInt(representee);\n\t\tList<PatientBean> representees = (List<PatientBean>) session.getAttribute(\"representees\");\n\t\tif(representees != null) {\n\t\t\tloggedInMID = new Long(\"\" + representees.get(representeeIndex).getMID());\n//\t\t\tsession.removeAttribute(\"representees\");\n\t\t\tisRepresenting = true;\n//\t\tloggedInMID = new Long(action.representPatient(representee));\n%>\n<span >You are currently viewing your representee's records</span><br />\n<%\n\t\t}\n\t}\n\t\n\tPatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue());\n\tDateFormat df = DateFormat.getDateInstance();\n\tViewMyRecordsAction action = new ViewMyRecordsAction(prodDAO, loggedInMID.longValue());\n\n\tpatient = action.getPatient();\n\tList<HealthRecord> records = action.getAllHealthRecords();\n\tList<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\n\tList<FamilyMemberBean> family = action.getFamilyHistory();\n\tList<AllergyBean> allergies = action.getAllergies();\n\tList<PatientBean> represented = action.getRepresented();\n\tList<LabProcedureBean> procs = action.getLabs();\n%> \n\n<%\nif (request.getParameter(\"message\") != null) {\n%>\n\t<div class=\"iTrustMessage\" style=\"font-size: 24px;\" align=center>\n\t\t<%=request.getParameter(\"message\") %>\n\t</div>\n<%\n}\n%>\n<br />\n<table align=center>\n\t<tr> <td>\n\t<div style=\"float:left; margin-right:5px;\">\n\t\t<table class=\"fTable\" border=1 align=\"center\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"2\" >Patient Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Name:</td>\n\t\t\t\t<td ><%=patient.getFullName()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td  class=\"subHeaderVertical\">Address:</td>\n\t\t\t\t<td >\n\t\t\t\t\t<%=patient.getStreetAddress1()%><br />\n\t\t\t\t\t<%=\"\".equals(patient.getStreetAddress2()) ? \"\"\n\t\t\t\t\t\t: patient.getStreetAddress2() + \"<br />\"%>\n\t\t\t\t\t<%=patient.getStreetAddress3()%><br />\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t\t<td ><%=patient.getPhone()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Email:</td>\n\t\t\t\t<td ><%=patient.getEmail()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"2\">\n\t\t\t\t\tInsurance Information\n\t\t\t\t</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">\n\t\t\t\t\tProvider Name:\n\t\t\t\t</td>\n\t\t\t\t<td ><%=patient.getIcName()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Address:</td>\n\t\t\t\t<td >\n\t\t\t\t\t<%=patient.getIcAddress1()%><br />\n\t\t\t\t\t<%=\"\".equals(patient.getIcAddress2()) ? \"\" : patient\n\t\t\t\t\t\t.getIcAddress2()\n\t\t\t\t\t\t+ \"<br />\"%>\n\t\t\t\t\t<%=patient.getIcAddress3()%><br />\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t\t<td ><%=patient.getIcPhone()%></td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n\t<div style=\"float: left; margin-left: 5px;\">\n\t\t<table class=\"fTable\" border=1 align=\"center\">\n\t\t\t<tr>\n\t\t\t\t<th>Office Visits</th>\n\t\t\t\t<th>Survey</th>\n\t\t\t</tr>\n<%\n\tfor (OfficeVisitBean ov : officeVisits) {\n%>\n\t\t\t<tr>\n\t\t\t\t<td >\n\t\t\t\t\t<a href=\"viewOfficeVisit.jsp?ovID=<%=ov.getVisitID()%><%=isRepresenting ? \"&repMID=\" + loggedInMID.longValue() : \"\" %>\"><%=df.format(ov.getVisitDate())%></a></td>\n<%\n\t\tif (action.isSurveyCompleted(ov.getVisitID())) {\n%>\n\t\t\t\t<td>&nbsp;</td>\n<%\n\t\t} else {\n%>\n\t\t\t\t<td >\n\t\t\t\t\t<a\thref=\"survey.jsp?ovID=<%=ov.getVisitID()%>&ovDate=<%=df.format(ov.getVisitDate())%>\">\n\t\t\t\t\t\tComplete Visit Survey\n\t\t\t\t\t</a>\n\t\t\t\t</td>\n<%\n\t\t}\n\t}\n%>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>&nbsp;</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=2 align=center>\n\t\t\t\t\t<a href=\"viewPrescriptionRecords.jsp?<%=isRepresenting ? \"&rep=\" + loggedInMID.longValue() : \"\" %>\">\n\t\t\t\t\t\tGet Prescriptions\n\t\t\t\t\t</a>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n\t</td> </tr>\n</table>\n\n<br />\n<br />\n<table class=\"fTable\" align=\"center\" >\n\t<tr>\n\t\t<th colspan=\"9\">\n\t\t\tFamily Medical History\n\t\t</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<td>Name</td>\n\t\t<td>Relation</td>\n\t\t<td>High Blood Pressure</td>\n\t\t<td>High Cholesterol</td>\n\t\t<td>Diabetes</td>\n\t\t<td>Cancer</td>\n\t\t<td>Heart Disease</td>\n\t\t<td>Smoker</td>\n\t\t<td>Cause of Death</td>\n\t</tr>\n\t<%\n\t\tif (family.size() == 0) {\n\t%>\n\t<tr>\n\t\t<td colspan=\"9\" style=\"text-align: center;\">\n\t\t\tNo Relations on record\n\t\t</td>\n\t</tr>\n\t<%\n\t\t} else {\n\t\t\tfor (FamilyMemberBean member : family) {\n\t%>\n\t<tr>\n\t\t<td ><%=member.getFullName()%></td>\n\t\t<td ><%=member.getRelation()%></td>\n\t\t<td  align=center><%=action.doesFamilyMemberHaveHighBP(member) ? \"x\"\n\t\t\t\t\t\t\t: \"\"%></td>\n\t\t<td  align=center><%=action\n\t\t\t\t\t\t\t\t\t.doesFamilyMemberHaveHighCholesterol(member) ? \"x\"\n\t\t\t\t\t\t\t: \"\"%></td>\n\t\t<td  align=center><%=action\n\t\t\t\t\t\t\t\t\t.doesFamilyMemberHaveDiabetes(member) ? \"x\"\n\t\t\t\t\t\t\t: \"\"%></td>\n\t\t<td  align=center><%=action.doesFamilyMemberHaveCancer(member) ? \"x\"\n\t\t\t\t\t\t\t: \"\"%></td>\n\t\t<td  align=center><%=action\n\t\t\t\t\t\t\t\t\t.doesFamilyMemberHaveHeartDisease(member) ? \"x\"\n\t\t\t\t\t\t\t: \"\"%></td>\n\t\t<td  align=center><%=action.isFamilyMemberSmoker(member) ? \"x\"\n\t\t\t\t\t: \"\"%></td>\n\t\t<td ><%=action.getFamilyMemberCOD(member)%></td>\n\t</tr>\n\t<%\n\t\t\t}\n\t\t}\n\t%>\n</table>\n<br />\n<br />\n<table align=center>\n\t<tr> <td>\n\t<div style=\"float:left; margin-right:5px;\">\n\t\t<table class=\"fTable\" align=\"center\" >\n\t\t\t<tr>\n\t\t\t\t<th colspan=\"2\">Allergies</th>\n\t\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>Allergy Description</td>\n\t\t\t\t<td>First Found</td>\n\t\t\t</tr>\n\n<%\n\tif (allergies.size() == 0) {\n%>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" >No Allergies on record</td>\n\t\t\t</tr>\n<%\n\t} else {\n\t\tfor (AllergyBean allergy : allergies) {\n%>\n\t\t\t<tr>\n\t\t\t\t<td ><%=allergy.getDescription()%></td>\n\t\t\t\t<td ><%=df.format(allergy.getFirstFound())%></td>\n\t\t\t</tr>\n<%\n\t\t}\n\t}\n%>\n\t\t</table>\n\t</div>\n\t\n\t<div style=\"float:left; margin-left:5px;\">\n\t\t<table class=\"fTable\">\n\t\t\t<tr>\n\t\t\t\t<th> Patients <%=patient.getFirstName()%> Represents </th>\n\t\t\t</tr>\n\t\t\t<tr class=\"subHeader\">\n\t\t\t\t<td>Patient</td>\n\t\t\t</tr>\n<%\n\tif (represented.size() == 0) {\n%>\n\t\t\t<tr>\n\t\t\t\t<td >\n\t\t\t\t\t<%=patient.getFirstName()%> is not representing any patients\n\t\t\t\t</td>\n\t\t\t</tr>\n<%\n\t} else {\n\t\tint index = 0;\n\t\tfor (PatientBean p : represented) {\n%>\n\t\t\t<tr>\n\t\t\t\t<td >\n<%\n\tif(isRepresenting) {\n%>\n\t\t<%=p.getFullName()%>\n<%\n\t} else {\n%>\n\t\t<a href=\"viewMyRecords.jsp?rep=<%=index%>\"><%=p.getFullName()%></a>\n<%\n\t}\n%>\n\t\t\t\t\t\n\t\t\t\t</td>\n\t\t\t</tr>\n<%\n\t\tindex++;\n\t\t}\n\t\tif(!isRepresenting) {\n\t\t\tsession.setAttribute(\"representees\", represented);\n\t\t}\n\t}\n%>\n\t\t</table>\n\t</div>\n\t</td></tr>\n</table>\n<br />\n<br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"10\">\n\t\t\tBasic Health History\n\t\t</th>\n\t</tr>\n\t<tr class=\"subHeader\" >\n\t\t<td>Height</td>\n\t\t<td>Weight</td>\n\t\t<td>Smokes?</td>\n\t\t<td>Blood Pressure</td>\n\t\t<td>HDL</td>\n\t\t<td>LDL</td>\n\t\t<td>Triglycerides</td>\n\t\t<td>Total Cholesterol</td>\n\t\t<td>Last Recorded</td>\n\t\t<td>By Personnel</td>\n\t</tr>\n<%\n\tif(records.size() > 0) {\n\t\tList<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();\n\t\tint index = 0;\n\t\tfor (HealthRecord hr : records) {\n%>\n\t<tr>\n\t\t<td ><%=hr.getHeight()%>in</td>\n\t\t<td ><%=hr.getWeight()%>lbs</td>\n\t\t<td ><%=hr.isSmoker() ? \"Y\" : \"N\"%></td>\n\t\t<td ><%=hr.getBloodPressure()%> mmHg</td>\n\t\t<td ><%=hr.getCholesterolHDL()%> mg/dL</td>\n\t\t<td ><%=hr.getCholesterolLDL()%> mg/dL</td>\n\t\t<td ><%=hr.getCholesterolTri()%> mg/dL</td>\n\t\t<td ><%=hr.getTotalCholesterol()%> mg/dL</td>\n\t\t<td ><%=df.format(hr.getDateRecorded())%></td>\n\t\t<%\n\t\t\tPersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(hr.getPersonnelID());\n\t\t\tpersonnelList.add(personnel);\n\t\t%>\n\t\t<td ><a href=\"/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>\"><%=personnel.getFullName()%></a></td>\n\t</tr>\n<%\n\t\t\tindex++;\n\t\t}\n\t\tsession.setAttribute(\"personnelList\", personnelList);\n\t}\n\telse {\n%>\n\t\t<tr>\n\t\t\t<td colspan=11 align=center>\n\t\t\t\tNo Data\n\t\t\t</td>\n\t\t</tr>\n<%\t\t\n\t}\n%>\n</table>\n<br />\n<br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"11\">Lab Procedures</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n\t\t<td>Patient</td>\n\t\t<td>Lab Code</td>\n\t\t<td>Status</td>\n\t\t<td>Results</td>\n\t\t<td>OfficeVisitID</td>\n\t\t<td>Commentary</td>\n\t\t<td>Updated Date</td>\n\t</tr>\n<%\n\tif(procs.size() > 0 ) {\n\t\tfor (LabProcedureBean bean : procs) {\n%>\n\t<tr>\n\t\t<td ><%=patient.getFullName()%></td>\n\t\t<td ><%=bean.getLoinc()%></td>\n\t\t<td ><%=bean.getStatus()%></td>\n\t\t<td ><%=bean.getResults()%></td>\n\t\t<td ><%=bean.getOvID()%></td>\n\t\t<td ><%=bean.getCommentary()%></td>\n\t\t<td ><%=df.format(bean.getTimestamp())%></td>\n\n\t</tr>\n<%\n\t\t}\n\t}\n\telse {\n%>\n\t\t<tr>\n\t\t\t<td colspan=11 align=center>\n\t\t\t\tNo Data\n\t\t\t</td>\n\t\t</tr>\n<%\n\t}\n%>\n</table>\n<br />\n<br />\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"4\">Immunizations</th>\n\t</tr>\n\t<tr class=\"subHeader\">\n  \t\t<td>CPT Code</th>\n\t \t<td>Description</th>\n   \t\t<td>Date Received</th>\n   \t\t<td>Adverse Event</th>\n  \t</tr>\n<%\nboolean hasNoData = true;\nfor (OfficeVisitBean ov: officeVisits) {\n\tList<ProcedureBean> ovProcs = action.getCompleteOfficeVisit(ov.getVisitID()).getProcedures();\n\tfor (ProcedureBean proc: ovProcs) {\n\t\tif (null != proc.getAttribute() && proc.getAttribute().equals(\"immunization\")) {\n\t\t\thasNoData=false;\n%>\n\t<tr>\n\t\t<td><%=proc.getCPTCode()%></td>\n\t\t<td><%=proc.getDescription() %></td>\n\t\t<td><%=proc.getDate() %></td>\n\t\t<td>\n\t\t<%\n\t\t\tDate date = new Date();\n\t\t\tdate.setYear(date.getYear()-1);\n\t\t\tif(proc.getDate().after(date)){\n\t\t%>\n\t\t<a href=\"reportAdverseEvent.jsp?presID=<%=proc.getDescription()%>&HCPMID=<%=ov.getHcpID() %>&code=<%=proc.getCPTCode()%>\">Report</a>\t\n\t\n<%\n\t\t}%></td></tr><% }\n\t}\n}\nif(hasNoData) {\n%>\n\t<tr>\n\t\t<td colspan=4 align=center>\n\t\t\tNo Data\n\t\t</td>\n\t</tr>\n<%\n}\n%>\n</table>\n<br />\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ccc"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/LabProcedureDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cca"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd3"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cdb"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d36"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d39"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d52"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.LabProcedureBean;\nimport edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * A DAO for managing lab procedure codes. Database Access Object. All info coming into a DAO is already validated. \n * Just worry about DB stuff here. Note that all DAOs need to have a DAOFactory with which to access other \n * DAOs and to get connections. Also, every DAO must have a constructor with a DAOFactory as a parameter.\n */\npublic class LabProcedureDAO {\n\tprivate DAOFactory factory;\n\tprivate LabProcedureBeanLoader labProcedureLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic LabProcedureDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tlabProcedureLoader = new LabProcedureBeanLoader();\n\t}\n\t\n\t/**\n\t * Get a list of the lab procedures associated with a given patient.\n\t * @param id The MID of the patient as a long.\n\t * @return A java.util.List of LabProcedureBeans\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getLabProceduresForPatient(long id) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tif (id == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE PatientMID = ? AND Rights = ? ORDER BY UpdatedDate DESC\");\n\t\t\tps.setLong(1, id);\n\t\t\tps.setString(2, LabProcedureBean.Allow);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets all the lab procedures for a given patient that occur within the next month.\n\t * @param id The MID of the patient as a long.\n\t * @return A java.util.List of LabProcedureBeans.\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getLabProceduresForPatientForNextMonth(long id) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tif (id == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE PatientMID = ? AND Rights = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC\");\n\t\t\tps.setLong(1, id);\n\t\t\tps.setString(2, LabProcedureBean.Allow);\n\t\t\tps.setString(3, LabProcedureBean.Completed);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets an individual lab procedure.\n\t * @param id The ID of the lab procedure.\n\t * @return A LabProcedureBean representing the procedure.\n\t * @throws DBException\n\t */\n\tpublic LabProcedureBean getLabProcedure(long id) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE LaboratoryProcedureID = ?\");\n\t\t\tps.setLong(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\trs.next();\n\t\t\treturn labProcedureLoader.loadSingle(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t/**\n\t * Gets all procedures for Patient\n\t * @param mid patient id\n\t * @return A java.util.List of LabProcedureBeans.\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getAllLabProceduresDate(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tif (mid == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE PatientMID = ? ORDER BY UpdatedDate DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t/**\n\t * This gets all the procedures for a particular patient on a particular office visit\n\t * @param mid The MID of the patient.\n\t * @param ovid The Office Visit ID.\n\t * @return A java.util.List of LabProcedureBeans.\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getAllLabProceduresForDocOV(long mid, long ovid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tif (mid == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE PatientMID = ? AND OfficeVisitID = ? ORDER BY UpdatedDate DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\tps.setLong(2, ovid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * This gets all the procedures for a particular patient on a particular office visit\n\t * @param mid The MID of the patient.\n\t * @param ovid The Office Visit ID.\n\t * @return A java.util.List of LabProcedureBeans\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getAllLabProceduresForDocOV(long ovid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE OfficeVisitID = ? \");\n\t\t\tps.setLong(1, ovid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets all lab procedures, period.\n\t * @return A java.util.List of LabProcedureBeans.\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getAllLabProcedures() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure ORDER BY UpdatedDate ASC\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets the lab procedures for a given LHCP that occur within the next month.\n\t * @param ovid The Office Visit ID conducted by the LHCP in question.\n\t * @return A java.util.List of LabProcedureBeans.\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getLabProceduresForLHCPForNextMonth(long ovid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (ovid == 0L) throw new SQLException(\"OfficeVisitID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE OfficeVisitID = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC\");\n\t\t\tps.setLong(1, ovid);\n\t\t\tps.setString(2, LabProcedureBean.Completed);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Inserts a lab procedure into the database.\n\t * @param b The LabProcedureBean to be inserted.\n\t * @return A long containing the ID of the newly inserted lab procedure bean.\n\t * @throws DBException\n\t */\n\tpublic long addLabProcedure(LabProcedureBean b) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (b.getPid() == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO LabProcedure (PatientMID, LaboratoryProcedureCode, Status, Commentary, Results, OfficeVisitID, Rights) VALUES (?,?,?,?,?,?,?)\");\n\t\t\tps.setLong(1, b.getPid());\n\t\t\tps.setString(2, b.getLoinc());\n\t\t\tps.setString(3, b.getStatus());\n\t\t\tps.setString(4, b.getCommentary());\n\t\t\tps.setString(5, b.getResults());\n\t\t\tps.setLong(6, b.getOvID());\n\t\t\tps.setString(7, b.getRights());\n\t\t\tps.executeUpdate();\n\t\t\treturn DBUtil.getLastInsert(conn);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Updates an existing lab procedure.\n\t * @param b The LabProcedureBean representing the procedure to be updated.\n\t * @throws DBException\n\t */\n\tpublic void updateLabProcedure(LabProcedureBean b) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (b.getPid() == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE LabProcedure SET Status = ?, Commentary = ?, Results = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\n\t\t\tps.setString(1, b.getStatus());\n\t\t\tps.setString(2, b.getCommentary());\n\t\t\tps.setString(3, b.getResults());\n\t\t\tps.setTimestamp(4, new java.sql.Timestamp(System.currentTimeMillis()));\n\t\t\tps.setLong(5, b.getProcedureID());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets all the lab procedures that correspond to a particular LOINC.\n\t * @param id The LOINC in question.\n\t * @return A java.util.List of LabProcedureBeans.\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> getAllLabProceduresLOINC(long id) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\ttry {\n\t\t\tif (id == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LabProcedure WHERE PatientMID = ? ORDER BY LaboratoryProcedureCode ASC\");\n\t\t\tps.setLong(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn labProcedureLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Updates the rights of a user on a given lab procedure.\n\t * @param b The LabProcedureBean in question.\n\t * @throws DBException\n\t */\n\tpublic void updateRights(LabProcedureBean b) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tif (b.getPid() == 0L) throw new SQLException(\"PatientMID cannot be null\");\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE LabProcedure SET Rights = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\n\t\t\tps.setString(1, b.getRights());\n\t\t\tps.setTimestamp(2, new java.sql.Timestamp(System.currentTimeMillis()));\n\t\t\tps.setLong(3, b.getProcedureID());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cce"},"name":"WebRoot/auth/hcp/LabProcHCP.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}]],"contents":"<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LabProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.EditPatientAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.LabProcHCPAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - View Laboratory Procedures\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nLabProcHCPAction action2 = new LabProcHCPAction(prodDAO, loggedInMID.longValue());\nif(request.getParameter(\"priv\")!=null && request.getParameter(\"priv\").equals(\"yes\")){\n\taction2.changePrivacy(Long.parseLong(request.getParameter(\"ID\")));\n}\n\n/* Require a Patient ID first */\nString pidString = (String)session.getAttribute(\"pid\");\nif (pidString == null || 1 > pidString.length()) {\n\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp/LabProcHCP.jsp\");\n   \treturn;\n}\nelse {\n\tsession.removeAttribute(\"pid\");\n}\n\n/* If the patient id doesn't check out, then kick 'em out to the exception handler */\nEditPatientAction action = new EditPatientAction(prodDAO,loggedInMID.longValue(),pidString);\nlong pid = action.getPid();\n\nList<LabProcedureBean> proc = action2.viewProcedures(pid);\n%>\n\n<br />\n<table  class=\"fTable\">\n\t<tr>\n\t\t<th colspan=\"11\">Lab Procedures</th>\n\t</tr>\n\n\t<tr class=\"subHeader\">\n  \t\t<td>Patient</td>\n  \t\t<td>Lab Code</td>\n  \t\t<td>Rights</td>\n\t\t<td>Status</td>\n\t\t<td>Commentary</td>\n\t\t<td>Results</td>\n\t\t<td>OfficeVisitID</td>\n\t\t<td>Updated Date</td>\n\t\t<td>Edit Office Visit</td>\n\t\t<td>Change Privacy</td>\n\t\t<td>Action</td>\n  \t</tr>\n<%\n\tif(proc.size() > 0) {\n\t\tfor(LabProcedureBean bean : proc){ \n\t\t\tPatientBean patient = new PatientDAO(prodDAO).getPatient(bean.getPid());\n%>\n\t\t\t<tr>\n\t\t\t\t<td ><%=patient.getFullName()%></td>\n\t\t\t\t<td ><%=bean.getLoinc()%></td>\n\t\t\t\t<td ><%=bean.getRights()%></td>\n\t\t\t\t<td ><%=bean.getStatus()%></td>\n\t\t\t\t<td ><%=bean.getCommentary()%></td>\n\t\t\t\t<td ><%=bean.getResults()%></td>\n\t\t\t\t<td ><%=bean.getOvID()%></td>\n\t\t\t\t<td ><%=bean.getTimestamp()%></td>\n\t\t\t\t<td >  <%if(action2.checkAccess(bean.getProcedureID())){%>\n\t\t\t\t\t<a href=\"/iTrust/auth/hcp-uap/editOfficeVisit.jsp?ovID=<%=bean.getOvID()%>\">Edit Office Visit</a><br />\n\t\t\t\t<%} %></td>\n\t\t\t\t<td >  <%if(action2.checkAccess(bean.getProcedureID())){%>\n\t\t\t\t\t<a href=\"/iTrust/auth/hcp/LabProcHCP.jsp?ID=<%=bean.getProcedureID()%>&priv=yes\">Allow/Disallow Viewing</a><br />\n\t\t\t\t<%} %></td>\n\t\t\t\t<td > \n\t\t\t\t\t<a href=\"/iTrust/auth/hcp/UpdateLabProc.jsp?ID=<%=bean.getProcedureID()%>\">Update</a><br />\n\t\t\t\t</td>\n\t\t\t\t\n\t\t\t</tr>\n<%\n\t\t}\n\t}\n\telse {\n%>\n\t<tr colspan=10>\n\t\t<td align=center>\n\t\t\tNo Data\n\t\t</td>\n\t</tr>\n<%\t\t\n\t}\n%>\n</table>\n<br /><br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ccf"},"name":"src/edu/ncsu/csc/itrust/action/LabProcUAPAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd7"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.LabProcedureBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.validate.LabProcedureValidator;\n/**\n * Class for LabProcUAP.jsp.  Handles lab procedures for UAPs\n */\npublic class LabProcUAPAction {\n\tprivate TransactionDAO transDAO;\n\tprivate LabProcedureDAO lpDAO;\n\tlong loggedInMID;\n\tprivate LabProcedureValidator validator;\n\tprivate DAOFactory factory;\n\n/**\n * Setup \n * @param factory The DAOFactory used to create the DAOs used in this action.\n * @param loggedInMID UAP who is logged in\n */\n\tpublic LabProcUAPAction(DAOFactory factory, long loggedInMID) {\n\t\ttransDAO = factory.getTransactionDAO();\n\t\tlpDAO = factory.getLabProcedureDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tvalidator = new LabProcedureValidator();\n\t\tthis.factory = factory;\n\t}\n\t\n\t/**\n\t * Updates a lab procedure\n\t * \n\t * @param b the procedure to update\n\t * @throws DBException\n\t * @throws FormValidationException\n\t */\n\tpublic void updateProcedure(LabProcedureBean b) throws DBException, FormValidationException{\n\t\tvalidator.validate(b);\n\t\t//need to check if status is what's being changed - if new status!=old status send email\n\t\tif(!b.getStatus().equals(lpDAO.getLabProcedure(b.getProcedureID()).getStatus())){\n\t\t\tnew EmailUtil(factory).sendEmail(makeEmail(b));\n\t\t}\n\t\tlpDAO.updateLabProcedure(b);\n\t\ttransDAO.logTransaction(TransactionType.ENTER_EDIT_LAB_PROCEDURE, loggedInMID, \n\t\t\t\tb.getPid(), \"UAP updated procedure id: \"\n\t\t\t\t+ b.getProcedureID());\n\t}\n\t\n\t/**\n\t * Sends an e-mail informing the patient that their procedure has been updated\n\t * \n\t * @param b the procedure that was updated\n\t * @return an e-mail to the patient with the notice\n\t * @throws DBException\n\t */\n\tprivate Email makeEmail(LabProcedureBean b) throws DBException{\n\t\t\n\t\tPatientBean p = new PatientDAO(factory).getPatient(b.getPid());\n\t\t\n\t\tEmail email = new Email();\n\t\temail.setFrom(\"no-reply@itrust.com\");\n\t\temail.setToList(Arrays.asList(p.getEmail()));\n\t\temail.setSubject(\"A Lab Procedure Was Updated\");\n\t\temail.setBody(String.format(\"Dear %s, \\n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\",  p.getFullName(),b.getLoinc(),b.getStatus()));\n\t\treturn email;\n\t}\n\t\n\t/**\n\t * Returns a list of all the lab procedures\n\t * \n\t * @param id MID of the UAP viewing the procedures \n\t * @return a list of all the lab procedures for that UAP\n\t * @throws DBException\n\t */\n\tpublic List<LabProcedureBean> viewProcedures(long id) throws DBException {\n\t\ttransDAO.logTransaction(TransactionType.VIEW_LAB_PROCEDURE, loggedInMID,\n\t\t\t\tid, \"UAP viewed procedures\");\n\t\treturn lpDAO.getAllLabProceduresDate(id);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cd0"},"name":"src/edu/ncsu/csc/itrust/action/EditPatientAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ccd"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d41"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.action.base.PatientBaseAction;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.PatientValidator;\nimport edu.ncsu.csc.itrust.EmailUtil;\n\n\n/**\n * Edits a patient Used by editPatient.jsp\n * \n * @author laurenhayward\n * \n */\npublic class EditPatientAction extends PatientBaseAction {\n\tprivate TransactionDAO transDAO;\n\tprivate PatientValidator validator = new PatientValidator();\n\tprivate PatientDAO patientDAO;\n\tprivate long loggedInMID;\n\tprivate EmailUtil emailutil;\n\n\t/**\n\t * The super class validates the patient id\n\t * \n\t * @param factory The DAOFactory used to create the DAOs for this action.\n\t * @param loggedInMID The MID of the user who is authorizing this action.\n\t * @param pidString The MID of the patient being edited.\n\t * @throws iTrustException\n\t */\n\tpublic EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\n\t\tsuper(factory, pidString);\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\temailutil = new EmailUtil(factory);\n\t}\n\n\t/**\n\t * Takes the information out of the PatientBean param and updates the patient's information\n\t * \n\t * @param p\n\t *            the new patient information\n\t * @throws iTrustException\n\t * @throws FormValidationException\n\t */\n\tpublic void updateInformation(PatientBean p) throws iTrustException, FormValidationException {\n\t\tp.setMID(pid); // for security reasons\n\t\tvalidator.validate(p);\n\t\tpatientDAO.editPatient(p);\n\t\ttransDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, pid, \"EditPatient - Made Changes\");\n\t\temailutil.sendEmail(makeEmail());\n\t}\n\n\t/**\n\t * Returns a PatientBean for the patient\n\t * \n\t * @return the PatientBean\n\t * @throws DBException\n\t */\n\tpublic PatientBean getPatient() throws DBException {\n\t\ttransDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, pid, \"EditPatient - View Patient\");\n\t\treturn patientDAO.getPatient(this.getPid());\n\t}\n\n\t/**\n\t *  Creates and e-mail to inform the patient that their information has been updated.\n\t *  \n\t * @return the email with the notice\n\t * @throws DBException\n\t */\n\tprivate Email makeEmail() throws DBException{\n\n\t\tEmail email = new Email();\n\t\tList<PatientBean> reps = patientDAO.getRepresenting(pid);\n\t\tPatientBean pb = patientDAO.getPatient(pid);\n\t\t\n\t\tList<String> toAddrs = new ArrayList<String>();\n\t\ttoAddrs.add(pb.getEmail());\n\t\tfor (PatientBean r: reps) {\n\t\t\ttoAddrs.add(r.getEmail());\n\t\t}\n\t\t\n\t\temail.setFrom(\"no-reply@itrust.com\");\n    \temail.setToList(toAddrs); // patient and personal representative\n    \temail.setSubject(String.format(\"Patient Information Updated\"));\n    \temail.setBody(\"Dear \" + pb.getFullName() + \",\\n\\tYour patient record information has been updated. \" + \n    \t\t\t\"Please login to iTrust to see who has viewed your records.\");\n\t\treturn email;\n\t}\n\t\n\tpublic void editMessageFilter(String filter) throws iTrustException, FormValidationException {\n\t\tPatientBean b = this.getPatient();\n\t\tb.setMessageFilter(filter);\n\t\tthis.updateInformation(b);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cd2"},"name":"WebRoot/auth/hcp-uap/updateLabProc.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd7"}]],"contents":"<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.action.LabProcUAPAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LabProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Update Lab Procedure\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tString headerMessage = \"\";\n\n\nLabProcedureBean lbean = null;\nlong requestID = 0L;\nString lpid = request.getParameter(\"ID\");\n\nif (lpid != null && !lpid.equals(\"\")) {\n\ttry {\n\t\t\n\t\trequestID = Long.parseLong(lpid);\n\t\tlbean = prodDAO.getLabProcedureDAO().getLabProcedure(requestID);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}\n\n\t\n\tLabProcUAPAction action2 = new LabProcUAPAction(prodDAO, loggedInMID.longValue());\n\tboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n\t&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\n\t\n\tif (formIsFilled) {\n\t\t//This page is not actually a \"page\", it just adds a user and forwards.\n\t\tlbean.setStatus(request.getParameter(\"Status\"));\n\t\tlbean.setResults(request.getParameter(\"Results\"));\n\t\tlbean.setCommentary(request.getParameter(\"Commentary\"));\n\n\t\ttry{\n\t\taction2.updateProcedure(lbean);\n%>\n\t<br />\n\t<div align=center>\n\t\t<span class=\"iTrustMessage\">Information Updated Successfully</span>\n\t</div>\n\t<br />\n<%\n\t} catch(FormValidationException e){\n%>\n\t<br />\n\t<div align=center>\n\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t</div>\n\t<br />\n<%\n\t\t}\n\t}\n\t\n%>\n\n<%\nif (request.getParameter(\"message\") != null) {\n\t%><span class=\"iTrustMessage\" style=\"font-size: 16px;\"><%=request.getParameter(\"message\") %></span><%\n}\n%>\n<br />\n<div align=center>\n<table class=\"fTable\">\n\t<tr>\n\t\t<th colspan=\"11\">Laboratory Procedures</th>\n\t</tr>\n\n\t<tr class=\"subHeader\">\n\n    \t\t<th>PatientMID</th>\n  \t\t\t<th>Lab Code</th>\n   \t\t\t<th>Rights</th>\n\t \t\t<th>Status</th>\n  \t\t\t<th>Commentary</th>\n   \t\t\t<th>Results</th>\n \t\t\t<th>OfficeVisitID</th>\n   \t\t\t<th>Updated Date</th>\n\n  \t</tr>\n\t\t<%LabProcedureBean bean = prodDAO.getLabProcedureDAO().getLabProcedure(requestID);%>\n\t\t\t<tr>\n\t\t\t\t<td ><%=bean.getPid()%></td>\n\t\t\t\t<td ><%=bean.getLoinc()%></td>\n\t\t\t\t<td ><%=bean.getRights()%></td>\n\t\t\t\t<td ><%=bean.getStatus()%></td>\n\t\t\t\t<td ><%=bean.getCommentary()%></td>\n\t\t\t\t<td ><%=bean.getResults()%></td>\n\t\t\t\t<td ><%=bean.getOvID()%></td>\n\t\t\t\t<td ><%=bean.getTimestamp()%></td>\n\t\t\t\t\n\t\t\t</tr>\n</table>\n\n\n<form action=\"updateLabProc.jsp?ID=<%=lpid%>\"&message=\"Updated Laboratory Procedure\" method=\"post\"><input type=\"hidden\"\n\tname=\"formIsFilled\" value=\"true\"> <br />\n<br />\n\t<%=headerMessage %>\n<br />\n<table class=\"fTable\">\n\t<tr>\n\t\t<th colspan=2>Update Information</th>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Status:</td>\n\t\t<td>\n\t\t<select name=\"Status\">\n\t\t<option value=\"NOT YET RECEIVED\"><%=lbean.Not_Received %></option>\n\t\t<option value=\"PENDING\"><%=lbean.Pending %></option>\n\t\t<option value=\"COMPLETED\"><%=lbean.Completed %></option>\n\t\t</select>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Commentary:</td>\n\t\t<td><textarea name=\"Commentary\"></textarea>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Results:</td>\n\t\t<td><textarea name=\"Results\"></textarea></td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" style=\"font-size: 14pt; font-weight: bold;\" value=\"Update\">\n</div>\n</form>\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cd5"},"name":"WebRoot/util/resetPassword.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2f"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.action.ResetPasswordAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Reset Password\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<h1>Reset Password</h1>\n<%\n\tResetPasswordAction action = new ResetPasswordAction(prodDAO);\n\tif (action.isMaxedOut(request.getRemoteAddr())) {\n\t\tresponse.sendRedirect(\"/iTrust/auth/forward?error=Too+many+attempts!\");\n\t}\n\n\tlong mid = action.checkMID(request.getParameter(\"mid\"));\n\tString role = null;\n\n\ttry {\n\t\trole = action.checkRole(mid, request.getParameter(\"role\"));\n\t} catch (iTrustException e) {\n%>\n<span >User does not exist with this role and mid.</span>\n<%\n\t}\n%>\n\n<form action=\"/iTrust/util/resetPassword.jsp\" method=\"post\">\n<table>\n<%\n\tif (mid == 0 || role == null) {\n%>\n\t<tr>\n\t\t<td colspan=2><b>Please enter your Role and MID</b></td>\n\t</tr>\n\t<tr>\n\t\t<td>Role:</td>\n\t\t<td>\n\t\t\t<select name=\"role\">\n\t\t\t\t<option value=\"patient\">Patient</option>\n\t\t\t\t<option value=\"hcp\">HCP</option>\n\t\t\t\t<option value=\"uap\">UAP</option>\n\t\t\t\t<option value=\"er\">ER</option>\n\t\t\t\t<option value=\"pha\">PHA</option>\n\t\t\t</select>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td>MID:</td>\n\t\t<td>\n\t\t\t<input type=TEXT maxlength=10 name=\"mid\">\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td colspan=2 align=center>\n\t\t\t<input type=\"submit\" value=\"Submit\">\n\t\t</td>\n\t</tr>\n\n<%\n\t} else {\n\t\tString answer = action.checkAnswerNull(request\n\t\t\t\t.getParameter(\"answer\"));\n\t\tif (answer == null) {\n\t\t\ttry {\n%>\n\t<tr>\n\t\t<td colspan=2>\n\t\t\t<b><%=action.getSecurityQuestion(mid)%></b>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td>Answer:</td>\n\t\t<td><input type=password maxlength=50 name=\"answer\"> <input\n\t\t\ttype=hidden name=\"mid\" value=\"<%=mid%>\"> <input type=hidden\n\t\t\tname=\"role\" value=\"<%=role%>\"></td>\n\t</tr>\n\t<tr>\n\t\t<td>New Password:</td>\n\t\t<td><input type=password maxlength=20 name=\"password\"></td>\n\t</tr>\n\t<tr>\n\t\t<td>Confirm:</td>\n\t\t<td><input type=password maxlength=20 name=\"confirmPassword\"></td>\n\t</tr>\n\t<tr>\n\t\t<td colspan=2 align=center><input type=\"submit\" value=\"Submit\"></td>\n\t</tr>\n\n<%\n\t\t\t} catch (iTrustException e) {\n%>\n\t<tr>\n\t\t<td>\n\t\t\t<font color='red'>This user has not set a security question/answer.</font>\n\t\t</td>\n\t</tr>\n<%\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tString password = request.getParameter(\"password\");\n\t\t\tString confirmPassword = request.getParameter(\"confirmPassword\");\n\t\t\tString confirm = \"\";\n\t\t\ttry {\n\t\t\t\tconfirm = action.resetPassword(mid, role, answer, \n\t\t\t\t                               password, confirmPassword, \n\t\t\t\t                               request.getRemoteAddr());\n\t\t\t} catch (FormValidationException e) {\n\t\t\t\te.printHTML(pageContext.getOut());\n%>\n\t<tr>\n\t\t<td>\n\t\t\t<a href=\"resetPassword.jsp\">\n\t\t\t\t<h2>Please try again</h2>\n\t\t\t</a>\n\t\t</td>\n\t</tr>\n<%\n\t\t\t}\n%>\n\t<tr>\n\t\t<td>\n\t\t\t<%=confirm%>\n\t\t</td>\n\t</tr>\n\n<%\n\t\t}\n\t}\n%>\n</table>\n</form>\n\n<%@include file=\"/footer.jsp\" %>\n\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cd6"},"name":"src/edu/ncsu/csc/itrust/action/ResetPasswordAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2d"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d30"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.Arrays;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.ValidationFormat;\n\n/**\n * Manages resetting the password Used by resetPassword.jsp\n * \n * @author laurenhayward\n * \n */\npublic class ResetPasswordAction {\n\tpublic static final int MAX_RESET_ATTEMPTS = 3;\n\n\tprivate AuthDAO authDAO;\n\tprivate PatientDAO patientDAO;\n\tprivate DAOFactory factory;\n\n\t/**\n\t * Set up defaults\n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t */\n\tpublic ResetPasswordAction(DAOFactory factory) {\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Checks to see if a user exists with the given mid\n\t * \n\t * @param midString The user's MID to check for.\n\t * @return 0 if the user does not exist, else the mid of the user as a long\n\t */\n\tpublic long checkMID(String midString) {\n\t\ttry {\n\t\t\tlong mid = Long.valueOf(midString);\n\t\t\tif (!authDAO.checkUserExists(mid))\n\t\t\t\treturn 0;\n\t\t\treturn mid;\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn 0L;\n\t\t} catch (DBException e) {\n\t\t\treturn 0L;\n\t\t}\n\t}\n\n\t/**\n\t * Checks to see if the number of reset password attempts has been exceeded for the given ipAddress\n\t * \n\t * @param ipAddress The IPv4 or IPv6 IP address as a String.\n\t * @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS\n\t * @throws DBException\n\t */\n\tpublic boolean isMaxedOut(String ipAddress) throws DBException {\n\t\treturn authDAO.getResetPasswordFailures(ipAddress) >= MAX_RESET_ATTEMPTS;\n\t}\n\n\t/**\n\t * Checks if the given mid matches the given role\n\t * \n\t * @param mid\n\t *            the mid to be checked\n\t * @param role\n\t *            the role to be checked\n\t * @return true if the mid and role match\n\t * @throws iTrustException\n\t */\n\tpublic String checkRole(long mid, String role) throws iTrustException {\n\t\ttry {\n\t\t\tif ((\"patient\".equals(role) && patientDAO.getRole(mid, role).equals(\"patient\"))\n\t\t\t\t\t|| (\"hcp\".equals(role) && patientDAO.getRole(mid, role).equals(\"hcp\"))\n\t\t\t\t\t|| (\"uap\".equals(role) && patientDAO.getRole(mid, role).equals(\"uap\"))\n\t\t\t\t\t|| (\"pha\".equals(role) && patientDAO.getRole(mid, role).equals(\"pha\"))\n\t\t\t\t\t|| (\"er\".equals(role) && patientDAO.getRole(mid, role).equals(\"er\")))\n\t\t\t\treturn role;\n\t\t\telse\n\t\t\t\treturn null;\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (iTrustException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow e;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if the answer param is null\n\t * \n\t * @param answer the user's security answer\n\t * @return answer if not null, else return null\n\t */\n\tpublic String checkAnswerNull(String answer) {\n\t\tif (answer == null || \"\".equals(answer))\n\t\t\treturn null;\n\t\telse\n\t\t\treturn answer;\n\t}\n\n\t/**\n\t * Returns the security question for the mid param\n\t * \n\t * @param mid MID of the user\n\t * @return the security question or \"\" if DBException thrown\n\t * @throws iTrustException\n\t */\n\tpublic String getSecurityQuestion(long mid) throws iTrustException {\n\t\ttry {\n\t\t\tif (null == authDAO.getSecurityQuestion(mid) || authDAO.getSecurityQuestion(mid).equals(\"\"))\n\t\t\t\tthrow new iTrustException(\"No security question or answer for this user has been set.\");\n\t\t\telse\n\t\t\t\treturn authDAO.getSecurityQuestion(mid);\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * Resets the password for the given mid\n\t * \n\t * @param mid of the user to have their password reset\n\t * @param role what role the user has in iTrust\n\t * @param answer answers to their security question\n\t * @param password their password\n\t * @param confirmPassword their password again\n\t * @param ipAddr the ip address the request is coming from\n\t * @return status message\n\t * @throws FormValidationException\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic String resetPassword(long mid, String role, String answer, String password,\n\t\t\tString confirmPassword, String ipAddr) throws FormValidationException, DBException,\n\t\t\tiTrustException {\n\n\t\tRole r = authDAO.getUserRole(mid);\n\t\ttry {\n\t\t\tRole.parse(role);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\treturn \"Invalid role\";\n\t\t}\n\n\t\tif (r.equals(Role.ADMIN))\n\t\t\treturn \"This role cannot be changed here\";\n\t\tif (!r.equals(Role.parse(role)))\n\t\t\treturn \"Role mismatch\";\n\n\t\tif (authDAO.getResetPasswordFailures(ipAddr) >= MAX_RESET_ATTEMPTS) {\n\t\t\treturn \"Too many retries\";\n\t\t}\n\n\t\ttry {\n\t\t\tvalidatePassword(password, confirmPassword);\n\n\t\t\tif (answer.equals(authDAO.getSecurityAnswer(mid))) {\n\t\t\t\tauthDAO.resetPassword(mid, password);\n\t\t\t\tnew EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\n\t\t\t\treturn \"Password changed\";\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tauthDAO.recordResetPasswordFailure(ipAddr);\n\t\t\t\treturn \"Answer did not match\";\n\t\t\t}\n\n\t\t} catch (DBException e) {\n\t\t\treturn \"Error in validation of security answer\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Creates and sends an e-mail about the change\n\t * \n\t * @param mid the user who's password was changed\n\t * @param role what role they have in iTrust\n\t * @return the e-mial that is sent\n\t * @throws DBException\n\t */\n\tprivate Email makeEmailApp(long mid, String role) throws DBException{\n\t\t\n\t\tif(Role.parse(role) == Role.PATIENT){\n\t\t\tPatientBean p = new PatientDAO(factory).getPatient(mid);\n\t\t\tEmail email = new Email();\n\t\t\temail.setFrom(\"no-reply@itrust.com\");\n\t\t\temail.setToList(Arrays.asList(p.getEmail()));\n\t\t\temail.setSubject(\"Your password has been changed in iTrust\");\n\t\t\temail.setBody(String.format(\"Dear %s, \\n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\n\n\t\t\treturn email;\n\t\t}\n\t\telse{ //UAP or HCP - admin taken out in \"resetPassword\"\n\t\t\tPersonnelBean p = new PersonnelDAO(factory).getPersonnel(mid);\n\t\t\tEmail email = new Email();\n\t\t\temail.setFrom(\"no-reply@itrust.com\");\n\t\t\temail.setToList(Arrays.asList(p.getEmail()));\n\t\t\temail.setSubject(\"Your password has been changed in iTrust\");\n\t\t\temail.setBody(String.format(\"Dear %s, \\n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\n\n\t\t\treturn email;\n\t\t}\n\t}\n\t\n\t/**\n\t * Checks to make sure the password is correctly entered twice.\n\t * \n\t * @param password the password\n\t * @param confirmPassword the password again for confirmation\n\t * @throws FormValidationException\n\t */\n\n\tprivate void validatePassword(String password, String confirmPassword) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\tif (password == null || \"\".equals(password)) {\n\t\t\terrorList.addIfNotNull(\"Password cannot be empty\");\n\t\t} else {\n\t\t\tif (!password.equals(confirmPassword))\n\t\t\t\terrorList.addIfNotNull(\"Passwords don't match\");\n\t\t\tif (!ValidationFormat.PASSWORD.getRegex().matcher(password).matches()) {\n\t\t\t\terrorList.addIfNotNull(\"Password must be in the following format: \"\n\t\t\t\t\t\t+ ValidationFormat.PASSWORD.getDescription());\n\t\t\t}\n\t\t}\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cd9"},"name":"WebRoot/auth/hcp-uap/viewPatientOfficeVisitHistory.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd8"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - View All Patients\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nViewPatientOfficeVisitHistoryAction action = new ViewPatientOfficeVisitHistoryAction(prodDAO, loggedInMID.longValue());\nList<PatientVisitBean> patientVisits = action.getPatients();\n%>\n<br />\n\n<form action=\"viewReport.jsp\" method=\"post\" name=\"myform\">\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"3\">Past Patients</th>\n\t</tr>\n\n\t<tr class=\"subHeader\">\n\t\t<th>Patient</th>\n\t\t<th>Address</th>\n\t\t<th>Last Visit</th>\n\n\t</tr>\n\t<%\n\t\tList<PatientBean> patients = new ArrayList<PatientBean>();\n\t\tint index = 0;\n\t\tfor (PatientVisitBean bean : patientVisits) {\n\t\t\tpatients.add(bean.getPatient());\n\t%>\n\t<tr>\n\t\t<td >\n\t\t\t<a href=\"editPHR.jsp?patient=<%=index%>\">\n\t\t\n\t\t\n\t\t\t<%=bean.getPatientName()%>\t\n\t\t\n\t\t\n\t\t\t</a>\n\t\t\t</td>\n\t\t<td ><%=bean.getAddress1() +\" \" +bean.getAddress2()%></td>\n\t\t<td ><%=bean.getLastOVDateM() +\"/\" +bean.getLastOVDateD() +\"/\" +bean.getLastOVDateY()%></td>\n\t</tr>\n\t<%\n\t\t\tindex ++;\n\t\t}\n\t\tsession.setAttribute(\"patients\", patients);\n\t%>\n</table>\n</form>\n<br />\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cda"},"name":"src/edu/ncsu/csc/itrust/action/ViewPatientOfficeVisitHistoryAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cd8"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Scanner;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PatientVisitBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * \n * Action class for ViewPatientOfficeVisitHistory.jsp\n *\n */\npublic class ViewPatientOfficeVisitHistoryAction {\n\tprivate long loggedInMID;\n\tprivate PatientDAO patientDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate OfficeVisitDAO officevisitDAO;\n\tprivate ArrayList<PatientVisitBean> visits;\n\n\t/**\n\t * Set up defaults\n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing the office visits.\n\t */\n\tpublic ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tofficevisitDAO = factory.getOfficeVisitDAO();\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\t\n\t\tvisits = new ArrayList<PatientVisitBean>();\n\t\t\n\t}\n\t\n\t/**\n\t * Adds all the office visits for the logged in HCP to a list.\n\t * \n\t * @throws iTrustException\n\t */\n\tprivate void processOfficeVisits() throws iTrustException {\n\t\ttry {\n\t\t\tList<OfficeVisitBean> ovlist = officevisitDAO.getAllOfficeVisitsForLHCP(loggedInMID);\n\t\t\tIterator<OfficeVisitBean> it = ovlist.iterator();\n\t\t\tOfficeVisitBean ov;\n\t\t\tPatientVisitBean visitBean;\n\t\t\t\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tvisitBean = new PatientVisitBean();\n\t\t\t\tov = it.next();\n\t\t\t\tPatientBean pb;\n\t\t\t\tpb = patientDAO.getPatient(ov.getPatientID());\n\t\t\t\tvisitBean.setPatient(pb);\n\t\t\t\tvisitBean.setPatientName(pb.getFullName());\n\t\t\t\tString date = ov.getVisitDateStr();\n\t\t\t\tScanner sc = new Scanner(date);\n\t\t\t\tsc.useDelimiter(\"/\");\n\t\t\t\tString month = sc.next();\n\t\t\t\tString day = sc.next();\n\t\t\t\tString year = sc.next();\n\t\t\t\tvisitBean.setLastOVDateM(month);\n\t\t\t\tvisitBean.setLastOVDateD(day);\n\t\t\t\tvisitBean.setLastOVDateY(year);\n\t\t\t\tvisitBean.setLastOVDate(year +\"-\" + month +\"-\" + date);\n\t\t\t\tvisitBean.setAddress1(pb.getStreetAddress1() +\" \" + pb.getStreetAddress2());\n\t\t\t\tvisitBean.setAddress2(pb.getCity() + \" \" +pb.getState() +\" \" +pb.getZip());\n\t\t\t\tboolean b = PatientInList(pb,date);\n\t\t\t\tif(b == false)\n\t\t\t\t\tvisits.add(visitBean);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tcatch (DBException dbe) {\n\t\t\tthrow new iTrustException(dbe.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t * Checks to see if a patient is in the list of  visits\n\t * @param pb patient to check\n\t * @param date date of the visit\n\t * @return True if the patient is in the list of visits.\n\t */\n\tprivate boolean PatientInList(PatientBean pb, String date) {\n\t\tIterator<PatientVisitBean> it = visits.iterator();\n\t\tPatientVisitBean visitBean;\n\t\twhile (it.hasNext()){\n\t\t\tvisitBean = it.next();\n\t\tif(visitBean.getPatientName().equals(pb.getFullName())){\n\t\t\t\t\n\t\t\t\tif(visitBean.getLastOVDateY().compareTo(date) < 0){\n\t\t\t\t\tvisitBean.setLastOVDate(date);\n\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t}\t\t\n\t\t\n\t\treturn false;\n\t}\n/**\n * Get the list of patients an HCP has had office visits with\n * \n * @return the list of patients an HCP has had office visits with\n * @throws DBException\n */\n\tpublic List<PatientVisitBean> getPatients() throws DBException {\n\t\t\n\t\ttry {\n\t\t\tprocessOfficeVisits();\n\t\t}\n\t\tcatch (iTrustException ie) {\n\t\t\t\n\t\t}\n\t\t//log transaction\n\t\ttransDAO.logTransaction(TransactionType.VIEW_PATIENT_LIST,loggedInMID);\n\t\t\n\t\treturn visits;\n\t}\n\t/**\n\t * Returns a PersonnelBean for the logged in HCP\n\t * @return PersonnelBean for the logged in HCP\n\t * @throws iTrustException\n\t */\n\tpublic PersonnelBean getPersonnel() throws iTrustException {\n\t\treturn personnelDAO.getPersonnel(loggedInMID);\n\t}\n}"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cdc"},"name":"WebRoot/auth/patient/myDiagnoses.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cdb"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MedicationBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LabProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.MyDiagnosisAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.DiagnosisBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.ArrayList\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - My Diagnoses\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nsession.removeAttribute(\"personnelList\");\nString icdcode = request.getParameter(\"icd\");\nLOINCDAO loincDAO = DAOFactory.getProductionInstance().getLOINCDAO();\nMyDiagnosisAction action = new MyDiagnosisAction(prodDAO, loggedInMID.longValue());\nList<DiagnosisBean> diagnoses = action.getDiagnoses();\n%>\n\n<input type=\"hidden\" name=\"formIsFilled\" value=\"true\">\n<div align=\"center\">\n<h2>Diagnoses</h2>\n<table class=\"fTable\">\n\t<tr>\n\t\t<th>Diagnosis</th>\n\t</tr>\n<%for(DiagnosisBean d : diagnoses) { %>\n\t<tr>\n\t\t<td><a href=\"myDiagnoses.jsp?icd=<%=d.getICDCode()%>\"><%=d.getFormattedDescription()%></a></td>\n\t</tr>\n<%} %>\n</table>\n</div> \n<br />\n\n<%\nif (icdcode != null && !icdcode.equals(\"\")) {\n\tList<HCPDiagnosisBean> hcps = action.getHCPByDiagnosis(icdcode); \n%>\n<div align=\"center\">\n\t<h2>HCPs having experience with diagnosis <%=icdcode %></h2>\n\t<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th>HCP</th>\n\t\t\t<th>Number of Patients</th>\n\t\t\t<th>List of Prescriptions</th>\n\t\t\t<th>List of Lab Procedures</th>\n\t\t\t<th>Average Office Visit Satisfaction</th>\n\t\t\t<th>Average Treatment Satisfaction</th>\n\t\t</tr>\n<%\n\tif(hcps.size() > 0) {\n\t\tList<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();\n\t\tint index = 0;\n\t\tfor (HCPDiagnosisBean bean: hcps) {\n%>\n\t\t<tr>\n\t\t\t<td><a href=\"/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>\"><%=bean.getHCPName()%></a></td>\n\t\t\t<td><%=bean.getNumPatients()%></td>\n\t\t\t<td><%if (bean.getMedList().isEmpty()) { out.print(\"(no prescriptions)\"); } else { \n\t\t\t\t\tfor (PrescriptionBean p: action.getPrescriptionsByHCPAndICD(bean.getHCP(), icdcode)) {%>\n\t\t\t\t\t\t<a href=\"viewPrescriptionInformation.jsp?visitID=<%=p.getVisitID()%>&presID=<%=p.getId()%>\">\n\t\t\t\t\t\t\t<%=p.getMedication().getNDCode() + \" \" + p.getMedication().getDescription() + \" prescribed\"%>\n\t\t\t\t\t\t</a><br/>\n\t\t\t\t\t<%}} %></td>\n\t\t\t\t\t\t\n\t\t\t<td><%if (bean.getLabList().isEmpty()) { out.print(\"(no lab procedures ordered)\"); } else { for (LabProcedureBean p: bean.getLabList()) {%><%=p.getLoinc() + \" \" + loincDAO.getProcedures(p.getLoinc()).get(0).getComponent() + \" procedure ordered\"%><br/><%}} %></td>\n\t\t\t<td><%=bean.getVisitSatisfaction() %></td>\n\t\t\t<td><%=bean.getTreatmentSatisfaction() %></td>\n\t\t</tr>\n<%\n\t\t\tPersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(bean.getHCP());\n\t\t\tpersonnelList.add(personnel);\n\t\t\tindex++;\n\t\t}\n\t\tsession.setAttribute(\"personnelList\", personnelList);\n\t}\n\telse {\n%>\n\t\t<tr>\n\t\t\t<td colspan=\"6\" align=\"center\">\n\t\t\t\tNo Data\n\t\t\t</td>\n\t\t</tr>\n<%\n\t}\n%>\n\t</table>\n</div>\n<%\n}\n%>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cdd"},"name":"src/edu/ncsu/csc/itrust/action/MyDiagnosisAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cdb"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport edu.ncsu.csc.itrust.beans.DiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.HCPDiagnosisBean;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.beans.MedicationBean;\nimport edu.ncsu.csc.itrust.beans.SurveyBean;\nimport edu.ncsu.csc.itrust.beans.LabProcedureBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Edits the privacy levels of diagnoses, used by myDiagnoses.jsp\n * \n * @author laurenhayward\n * \n */\npublic class MyDiagnosisAction {\n\t\n\tprivate OfficeVisitDAO officeVisitDAO;\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate SurveyDAO surveyDAO;\n\tprivate TransactionDAO transactionDAO;\n\tprivate LabProcedureDAO labprocDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Set up for defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the user who is looking at their diagnoses.\n\t * @throws iTrustException\n\t */\n\tpublic MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.officeVisitDAO = factory.getOfficeVisitDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.surveyDAO = factory.getSurveyDAO();\n\t\tthis.transactionDAO = factory.getTransactionDAO();\n\t\tthis.labprocDAO = factory.getLabProcedureDAO();\n\t}\n\t\n\t/**\n\t * Returns a list of DiagnosisBeans for the patient\n\t * \n\t * @return the list of DiagnosisBeans\n\t * @throws DBException\n\t */\n\tpublic List<DiagnosisBean> getDiagnoses() throws DBException {\n\t\treturn patientDAO.getDiagnoses(loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns a list of all the HCPs who have a particular diagnosis\n\t * \n\t * @param icdcode the diagnosis of interest\n\t * @return the list of HCPs\n\t * @throws DBException\n\t */\n\tpublic List<HCPDiagnosisBean> getHCPByDiagnosis(String icdcode) throws DBException {\n\t\t\n\t\tint medMatch = 0;\n\t\tHashMap<Long, HCPDiagnosisBean> hcpHash = new HashMap<Long, HCPDiagnosisBean>();\n\t\tHashMap<Long, Long> patientHash = new HashMap<Long, Long>();\n\t\n\t\ttransactionDAO.logTransaction(TransactionType.FIND_HCPS_WITH_EXP, loggedInMID);\n\t\t\n\t\tHCPDiagnosisBean diag = null;\n\t\tList<OfficeVisitBean> beans = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\n\t\t\n\t\tfor (OfficeVisitBean bean: beans) {\n\t\t\t\n\t\t\t// check for HCP-Patient locality based on first 3 digits in ZIP\n\t\t\tif (!patientDAO.getPatient(loggedInMID).getZip1().substring(0, 2).\n\t\t\t\t\tequals(personnelDAO.getPersonnel(bean.getHcpID()).getZip1().substring(0, 2)))\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t// Check to see if we already have a bean for the HCP associated with this visit\n\t\t\tif (hcpHash.containsKey(bean.getHcpID())) {\n\t\t\t\tdiag = (HCPDiagnosisBean)hcpHash.get(bean.getHcpID());\n\t\t\t\t\n\t\t\t\tfor (PrescriptionBean p: bean.getPrescriptions()) {\n\t\t\t\t\tList<MedicationBean> mlist = diag.getMedList();\n\t\t\t\t\t\n\t\t\t\t\tfor (MedicationBean b: mlist) {\n\t\t\t\t\t\tif (p.getMedication().getDescription().equals(b.getDescription()))\n\t\t\t\t\t\t\tmedMatch++;\n\t\t\t\t\t}\n\t\t\t\t\tif (medMatch == 0) {\n\t\t\t\t\t\tmlist.add(p.getMedication());\n\t\t\t\t\t\tdiag.setMedList(mlist);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmedMatch = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Get Lab Procedures\n\t\t\t\tList<LabProcedureBean> labprocs = diag.getLabList(); \n\t\t\t\tList<LabProcedureBean> lpbeans = labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID());\n\t\t\t\tfor (LabProcedureBean p: lpbeans) {\n\t\t\t\t\tlabprocs.add(p);\n\t\t\t\t}\n\t\t\t\tdiag.setLabList(labprocs);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\n\t\t\t\t\tSurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\n\t\t\t\t\tdiag.setVisitSat(survey.getVisitSatisfaction());\n\t\t\t\t\tdiag.setTreatmentSat(survey.getTreatmentSatisfaction());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Check if this patient has been seen multiple times for this diagnosis\n\t\t\t\tif (!patientHash.containsKey(bean.getPatientID())) {\n\t\t\t\t\tpatientHash.put(bean.getPatientID(), bean.getHcpID());\n\t\t\t\t\tdiag.incNumPatients();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdiag = new HCPDiagnosisBean();\n\t\t\t\tList<MedicationBean> mlist = new ArrayList<MedicationBean>();\n\t\t\t\tdiag.setHCP(bean.getHcpID());\n\t\t\t\ttry {\n\t\t\t\t\tdiag.setHCPName(personnelDAO.getName(bean.getHcpID()));\n\t\t\t\t} catch (iTrustException e) {\n\t\t\t\t\tdiag.setHCPName(\"null\");\n\t\t\t\t}\n\t\t\t\tdiag.incNumPatients();\n\t\t\t\tfor (PrescriptionBean p: bean.getPrescriptions()) {\n\t\t\t\t\tmlist.add(p.getMedication());\n\t\t\t\t}\n\t\t\t\tdiag.setMedList(mlist);\n\t\t\t\tdiag.setLabList(labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID()));\n\t\t\t\t\n\t\t\t\tif (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\n\t\t\t\t\tSurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\n\t\t\t\t\tdiag.setVisitSat(survey.getVisitSatisfaction());\n\t\t\t\t\tdiag.setTreatmentSat(survey.getTreatmentSatisfaction());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpatientHash.put(bean.getPatientID(), bean.getHcpID());\n\t\t\t\thcpHash.put(bean.getHcpID(), diag);\n\t\t\t}\n\t\t}\n\t\tList<HCPDiagnosisBean> list = new ArrayList<HCPDiagnosisBean>(hcpHash.values());\n\t\tCollections.sort(list, new HCPDiagnosisBeanComparator() );\n\t\treturn list;\n\t}\n\t\n\t/**\n\t * Looks up all the prescriptions given by a certain HCP with the same ICD code.\n\t * @param hcpid The MID of the HCP\n\t * @param icdcode The ICD code of the prescription we are looking up.\n\t * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.\n\t * @throws DBException\n\t */\n\tpublic List<PrescriptionBean> getPrescriptionsByHCPAndICD(long hcpid, String icdcode) throws DBException {\n\t\tList<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\n\t\t\n\t\tList<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\n\t\tfor (int i = 0; i < ovs.size(); i++) {\n\t\t\tif (ovs.get(i).getHcpID() == hcpid) {\n\t\t\t\tlist.addAll(ovs.get(i).getPrescriptions());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn list;\n\t\t\n\t\t\n\t}\n\t\n\t\n\t/**\n\t * Checks to see what HCP has had the most experience with a diagnosis\n\t *\n\t */\n\tstatic class HCPDiagnosisBeanComparator implements Comparator<HCPDiagnosisBean>, Serializable {\n\t\t\n\t\tprivate static final long serialVersionUID = -6328390386684022934L;\n\n\t\t/**\n\t\t * Compares one HCP with another\n\t\t * \n\t\t * @param a the first HCP\n\t\t * @param b the second HCP\n\t\t * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\n\t\t */\n\t\tpublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\n\t\t\tint ret = 0;\n\t\t\t\n\t\t\tif (a.getNumPatients() > b.getNumPatients())\n\t\t\t\tret = -1;\n\t\t\telse if (a.getNumPatients() < b.getNumPatients())\n\t\t\t\tret = 1;\n\t\t\t\n\t\t\treturn ret;\n\t\t}\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cdf"},"name":"src/edu/ncsu/csc/itrust/validate/AddPersonnelValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cde"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.AddPatientAction;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email\n * \n * @author Andy\n * \n */\npublic class AddPersonnelValidator extends BeanValidator<PersonnelBean> {\n\t\n\t/**\n\t * The default constructor.\n\t */\n\tpublic AddPersonnelValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(PersonnelBean p) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ce1"},"name":"WebRoot/auth/admin/addHCP.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce0"}]],"contents":"<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.AddHCPAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.enums.Role\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Add HCP\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n\t&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\n\tif (formIsFilled) {\n\t\t\n\t\t//This page is not actually a \"page\", it just adds a user and forwards.\n\t\tPersonnelBean p = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(), new PersonnelBean());\n\t\tp.setRole(Role.HCP);\n\t\ttry{\n\t\t\tlong newMID = new AddHCPAction(prodDAO, loggedInMID.longValue()).add(p);\n\t\t\tsession.setAttribute(\"mid\", Long.toString(newMID));\n\t\t\tString fullname;\n\t\t\tString password;\n\t\t\tpassword = p.getPassword();\n\t\t\tfullname = p.getFullName();\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustMessage\">New HCP <%=fullname%> succesfully added!</span>\n\t\t<br />\n\t\t<br />\n\t\t<table class=\"fTable\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=2>New HCP Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">MID:</td>\n\t\t\t\t<td><%=newMID%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Temporary Password:</td>\n\t\t\t\t<td><%=password%></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<br />Please get this information to <b><%=fullname%></b>! \n\t\t<p>\n\t\t\t<a href = \"/iTrust/auth/staff/editPersonnel.jsp\">Continue to personnel information.</a>\n\t\t</p>\n\t</div>\n<%\n\t\t} catch(FormValidationException e){\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t</div>\n<%\n\t\t}\n\t}\n%>\n\n\n<div align=center>\n<p style=\"width: 50%; text-align:left;\">Please enter in the name of the new\nHCP, with a valid email address. If the user does not have an email\naddress, use the hospital's email address, [insert pre-defined email],\nto recover the password.</p>\n\n<form action=\"addHCP.jsp\" method=\"post\">\n<input type=\"hidden\" name=\"formIsFilled\" value=\"true\"><br />\n<table class=\"fTable\">\n\t<tr>\n\t\t<th colspan=2>UAP Information</th>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">First name:</td>\n\t\t<td><input type=\"text\" name=\"firstName\"></td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Last Name:</td>\n\t\t<td><input type=\"text\" name=\"lastName\">\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Email:</td>\n\t\t<td><input type=\"text\" name=\"email\"></td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" style=\"font-size: 16pt; font-weight: bold;\" value=\"Add personnel\">\n<br />\n</form>\n</div>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ce2"},"name":"src/edu/ncsu/csc/itrust/action/AddHCPAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce0"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.RandomPassword;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.AddPersonnelValidator;\n\n/**\n * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password\n * for them.\n * \n * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}\n * \n * @author Andy Meneely\n * \n */\npublic class AddHCPAction {\n\tprivate PersonnelDAO personnelDAO;\n\tprivate AuthDAO authDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Sets up the defaults for the class\n\t * \n\t * @param factory factory for creating the defaults.\n\t * @param loggedInMID person currently logged in \n\t * @author Andy Meneely\n\t */\t\n\t\n\tpublic AddHCPAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\t\n\t/**\n\t * Adds the new user.   Event is logged.\n\t * \n\t * @param p bean containing the information for the new user\n\t * @return MID of the new user.\n\t * @throws FormValidationException\n\t * @throws iTrustException\n\t */\n\tpublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\n\t\tnew AddPersonnelValidator().validate(p);\n\t\tlong newMID = personnelDAO.addEmptyPersonnel(Role.HCP);\n\t\tp.setMID(newMID);\n\t\tpersonnelDAO.editPersonnel(p);\n\t\tString pwd = authDAO.addUser(newMID, Role.HCP, RandomPassword.getRandomPassword());\n\t\tp.setPassword(pwd);\n\t\t//transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID);\n\t\ttransDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID, newMID, \"Added New HCP\");\n\t\treturn newMID;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ce4"},"name":"WebRoot/auth/hcp/addUAP.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce3"}]],"contents":"<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.enums.Role\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.AddUAPAction\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Add UAP\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n\t&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\n\tif (formIsFilled) {\n\t\t\n\t\t//This page is not actually a \"page\", it just adds a user and forwards.\n\t\tPersonnelBean p = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(), new PersonnelBean());\n\t\tp.setRole(Role.UAP);\n\t\ttry{\n\t\t\tlong newMID = new AddUAPAction(DAOFactory.getProductionInstance(), loggedInMID).add(p);\n\t\t\tsession.setAttribute(\"mid\", Long.toString(newMID));\n\t\t\tString fullname;\n\t\t\tString password;\n\t\t\tpassword = p.getPassword();\n\t\t\tfullname = p.getFullName();\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustMessage\">New UAP <%=fullname%> succesfully added!</span>\n\t\t<br />\n\t\t<br />\n\t\t<table class=\"fTable\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=2>New UAP Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">MID:</td>\n\t\t\t\t<td><%=newMID%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Temporary Password:</td>\n\t\t\t\t<td><%=password%></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<br />Please get this information to <b><%=fullname%></b>! \n\t\t<p>\n\t\t\t<a href = \"/iTrust/auth/staff/editPersonnel.jsp\">Continue to personnel information.</a>\n\t\t</p>\n\t</div>\n<%\n\t\t} catch(FormValidationException e){\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t</div>\n<%\n\t\t}\n\t}\n%>\n\n\n<div align=center>\n<form action=\"addUAP.jsp\" method=\"post\"><input type=\"hidden\"\n\tname=\"formIsFilled\" value=\"true\"> <br />\n<br />\n<div style=\"width: 50%; text-align:left;\">Please enter in the name of the new\nUAP, with a valid email address. If the user does not have an email\naddress, use the hospital's email address, [insert pre-defined email],\nto recover the password.</div>\n<br />\n<br />\n<table class=\"fTable\">\n\t<tr>\n\t\t<th colspan=2>UAP Information</th>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">First name:</td>\n\t\t<td><input type=\"text\" name=\"firstName\"></td>\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Last Name:</td>\n\t\t<td><input type=\"text\" name=\"lastName\">\n\t</tr>\n\t<tr>\n\t\t<td class=\"subHeaderVertical\">Email:</td>\n\t\t<td><input type=\"text\" name=\"email\"></td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" style=\"font-size: 16pt; font-weight: bold;\" value=\"Add personnel\">\n</form>\n<br />\n</div>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ce5"},"name":"src/edu/ncsu/csc/itrust/action/AddUAPAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce3"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.RandomPassword;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.AddPersonnelValidator;\n\n/**\n * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password\n * for them.\n * \n * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}\n * \n * @author Andy Meneely\n * \n */\npublic class AddUAPAction {\n\tprivate PersonnelDAO personnelDAO;\n\tprivate AuthDAO authDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Sets up the defaults for the class\n\t * \n\t * @param factory factory for creating the defaults.\n\t * @param loggedInMID person currently logged in \n\t * @author Andy Meneely\n\t */\t\n\tpublic AddUAPAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\t\n\t\n\t/**\n\t * Adds the new user.  Event is logged.\n\t * \n\t * @param p bean containing the information for the new user\n\t * @return MID of the new user.\n\t * @throws FormValidationException\n\t * @throws iTrustException\n\t */\n\tpublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\n\t\tnew AddPersonnelValidator().validate(p);\n\t\tlong newMID = personnelDAO.addEmptyPersonnel(Role.UAP);\n\t\tp.setMID(newMID);\n\t\tpersonnelDAO.editPersonnel(p);\n\t\tString pwd = authDAO.addUser(newMID, Role.UAP, RandomPassword.getRandomPassword());\n\t\tp.setPassword(pwd);\n\t\ttransDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID, newMID, \"New UAP Added\");\n\t\treturn newMID;\n\t}\n\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ce9"},"name":"WebRoot/auth/patient/sendMessage.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce8"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.action.SendMessageAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MessageBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"java.util.List\"%>\n\n<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Send a Message\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\n\tSendMessageAction action = new SendMessageAction(prodDAO, loggedInMID.longValue());\n\tint index;\n\tint dlhcpIndex = -1;\n\tint representeeIndex = -1;\n\tint repDLHCPIndex = -1;\n\tif (request.getParameter(\"sendMessage\") != null && request.getParameter(\"sendMessage\").equals(\"Send\")) {\n\t\ttry {\n\t\tMessageBean message = new MessageBean();\n\t\tmessage.setFrom(loggedInMID.longValue());\n\t\tmessage.setTo(((PersonnelBean)session.getAttribute(\"dlhcp\")).getMID());\n\t\tmessage.setBody(request.getParameter(\"messageBody\"));\n\t\tmessage.setSubject(request.getParameter(\"subject\"));\n\t\tmessage.setRead(0);\n\t\taction.sendMessage(message);\n\t\tsession.removeAttribute(\"dlhcp\");\n\t\tresponse.sendRedirect(\"messageOutbox.jsp\");\n\t\t} catch (FormValidationException e){\n\t\t\t%>\n\t\t\t<div align=center><span class=\"iTrustError\"><%=e.getMessage()%></span></div>\n\t\t\t<%\n\t\t}\n\t}\n\t\n\tif (request.getParameter(\"selectDLHCP\") != null && request.getParameter(\"selectDLHCP\").equals(\"Select\")) {\n\t\tif (request.getParameter(\"dlhcp\") != null && !request.getParameter(\"dlhcp\").equals(\"-1\")) dlhcpIndex = Integer.parseInt(request.getParameter(\"dlhcp\"));\n\t} else if (request.getParameter(\"selectRepDLHCP\") != null && request.getParameter(\"selectRepDLHCP\").equals(\"Select\")) {\n\t\tif (request.getParameter(\"representee\") != null && !request.getParameter(\"representee\").equals(\"-1\")) representeeIndex = Integer.parseInt(request.getParameter(\"representee\"));\n\t\tif (request.getParameter(\"repDLHCP\") != null && !request.getParameter(\"repDLHCP\").equals(\"-1\")) repDLHCPIndex = Integer.parseInt(request.getParameter(\"repDLHCP\"));\n\t} else if (request.getParameter(\"selectRep\") != null && request.getParameter(\"selectRep\").equals(\"Select\")) {\n\t\tif (request.getParameter(\"representee\") != null && !request.getParameter(\"representee\").equals(\"-1\")) representeeIndex = Integer.parseInt(request.getParameter(\"representee\"));\n\t}\n%>\n<div align=\"left\">\n<form id=\"mainForm\" method=\"get\" action=\"sendMessage.jsp\">\n\t<h2>Send a Message</h2>\n<% if (dlhcpIndex == -1 && representeeIndex == -1) { %>\n<%\n\t\tList<PersonnelBean> dlhcps = action.getMyDLHCPs();\n\t\tList<PatientBean> representees = action.getMyRepresentees();\n\t\tsession.setAttribute(\"dlhcps\", dlhcps);\n\t\tsession.setAttribute(\"representees\", representees);\n%>\n\t<h4>To One of My DLHCPs</h4>\n<%\t\tif (dlhcps.size() > 0) { %>\n\t<select name=\"dlhcp\">\n\t\t<option value=\"-1\"></option>\n<%\t\t\tindex = 0; %>\n<%\t\t\tfor(PersonnelBean dlhcp : dlhcps) { %>\n\t\t<option value=\"<%= index %>\"><%= dlhcp.getFullName() %></option>\n<%\t\t\t\tindex ++; %>\n<%\t\t\t} %>\n\t</select>\n\t<input type=\"submit\" value=\"Select\" name=\"selectDLHCP\"/>\n<%\t\t} else { %>\n\t<i>You haven't declared any HCPs.</i>\n<%\t\t} %>\n\t\n\t<h4>On Behalf of One of My Representees</h4>\n<%\t\tif (representees.size() > 0) { %>\n\t<select name=\"representee\">\n\t\t<option value=\"-1\"></option>\n<%\t\t\tindex = 0; %>\n<%\t\t\tfor(PatientBean representee : representees) { %>\n\t\t<option value=\"<%= index %>\"><%= representee.getFullName() %></option>\n<%\t\t\t\tindex ++; %>\n<%\t\t\t} %>\n\t</select>\n\t<input type=\"submit\" value=\"Select\" name=\"selectRep\"/>\n<%\t\t} else { %>\n\t<i>No other patients have declared you as a representative.</i>\n<%\t\t} %>\n<%\t} else if (dlhcpIndex >= 0) { %>\n<%\n\t\tList<PersonnelBean> dlhcps = (List<PersonnelBean>) session.getAttribute(\"dlhcps\");\n\t\tPersonnelBean dlhcp = dlhcps.get(dlhcpIndex);\n\t\tsession.setAttribute(\"dlhcp\", dlhcp);\n%>\n\t<h4>To <%= dlhcp.getFullName() %></h4>\n\t<span>Subject: </span><input type=\"text\" name=\"subject\" size=\"50\" /><br /><br />\n\t<span>Message: </span><br />\n\t<textarea name=\"messageBody\" cols=\"100\" rows=\"10\"></textarea><br />\n\t<br />\n\t<input type=\"submit\" value=\"Send\" name=\"sendMessage\"/>\n<%\t} else if (repDLHCPIndex >= 0) { %>\n<%\n\t\tList<PersonnelBean> repDLHCPs = (List<PersonnelBean>) session.getAttribute(\"repDLHCPs\");\n\t\tPersonnelBean dlhcp = repDLHCPs.get(repDLHCPIndex);\n\t\tsession.setAttribute(\"dlhcp\", dlhcp);\n\t\tList<PatientBean> representees = (List<PatientBean>) session.getAttribute(\"representees\");\n\t\tPatientBean representee = representees.get(representeeIndex);\n%>\n\t<h4>To <%= dlhcp.getFullName() %> on Behalf of <%= representee.getFullName() %></h4>\n\t<span>Subject: </span><input type=\"text\" name=\"subject\" size=\"50\" /><br /><br />\n\t<span>Message: </span><br />\n\t<textarea name=\"messageBody\" cols=\"100\" rows=\"10\"></textarea><br />\n\t<br />\n\t<input type=\"submit\" value=\"Send\" name=\"sendMessage\"/>\n<%\t} else if (representeeIndex >= 0) { %>\n<%\n\t\tList<PatientBean> representees = (List<PatientBean>) session.getAttribute(\"representees\");\n\t\tPatientBean representee = representees.get(representeeIndex);\n\t\tList<PersonnelBean> repDLHCPs = action.getDLHCPsFor(representee.getMID());\n\t\tsession.setAttribute(\"repDLHCPs\", repDLHCPs);\n%>\n\t<h4>To One of <%= representee.getFullName() %>'s DLHCPs</h4>\n\t<input type=\"hidden\" name=\"representee\" value=\"<%= representeeIndex %>\"/>\n<%\t\tif (repDLHCPs.size() > 0) { %>\n\t<select name=\"repDLHCP\">\n\t\t<option value=\"-1\"></option>\n<%\t\t\tindex = 0; %>\n<%\t\t\tfor(PersonnelBean repDLHCP : repDLHCPs) { %>\n\t\t<option value=\"<%= index %>\"><%= repDLHCP.getFullName() %></option>\n<%\t\t\t\tindex ++; %>\n<%\t\t\t} %>\n\t</select>\n\t<input type=\"submit\" value=\"Select\" name=\"selectRepDLHCP\"/>\n<%\t\t} else { %>\n\t<i><%= representee.getFullName() %> has not declared any HCPs.</i>\n<%\t\t} %>\n<%\t} %>\n</form>\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cea"},"name":"src/edu/ncsu/csc/itrust/action/SendMessageAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cec"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cee"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d24"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.MessageBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.MessageDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.EMailValidator;\nimport edu.ncsu.csc.itrust.validate.MessageValidator;\n\n\n/**\n * Class for SendMessage.jsp.  \n *\n */\n\npublic class SendMessageAction {\n\tprivate long loggedInMID;\n\tprivate EmailUtil emailer;\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate MessageDAO messageDAO;\n\tprivate TransactionDAO transactionDAO;\n\tprivate EMailValidator emailVal;\n\tprivate MessageValidator messVal;\n\n\n\t/**\n\t * Sets up defaults\n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the user sending the message.\n\t */\n\tpublic SendMessageAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.emailer = new EmailUtil(factory);\n\t\tthis.messageDAO = factory.getMessageDAO();\n\t\tthis.transactionDAO = factory.getTransactionDAO();\n\t\tthis.emailVal = new EMailValidator();\n\t\tthis.messVal = new MessageValidator();\n\t}\n\t\n\t/**\n\t * Sends a message\n\t * \n\t * @param mBean message to be sent\n\t * @throws iTrustException\n\t * @throws SQLException\n\t */\n\tpublic void sendMessage(MessageBean mBean) throws iTrustException, SQLException, FormValidationException {\n\t\tmessVal.validate(mBean);\n\t\temailVal.validate(mBean);\n\t\tmessageDAO.addMessage(mBean);\n\t\t\n\t\tEmail email = new Email();\n\t\tString senderName;\n\t\tString fromEmail;\n\t\temail.setFrom(\"noreply@itrust.com\");\n\t\tList<String> toList = new ArrayList<String>();\n\t\tif (8999999999L < mBean.getFrom() && 8999999999L < mBean.getTo()){\n\t\t\tPersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n\t\t\tPersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n\t\t\t\n\t\t\ttoList.add(receiver.getEmail());\n\t\t\tsenderName = sender.getFullName();\n\t\t\tfromEmail = sender.getEmail();\n\t\t}else{\n\t\t\tif (6999999999L < mBean.getFrom()) {\n\t\t\t\tPersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n\t\t\t\t\n\t\t\t\tif (6999999999L < mBean.getTo()) {\n\t\t\t\t\tPersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n\t\t\t\t\ttoList.add(receiver.getEmail());\n\t\t\t\t} else {\n\t\t\t\t\tPatientBean receiver = patientDAO.getPatient(mBean.getTo());\n\t\t\t\t\ttoList.add(receiver.getEmail());\n\t\t\t\t}\n\t\t\t\tsenderName = sender.getFullName();\n\t\t\t\tfromEmail = sender.getEmail();\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tPatientBean sender = patientDAO.getPatient(loggedInMID);\n\t\t\t\t\n\t\t\t\tif (6999999999L < mBean.getTo()) {\n\t\t\t\t\tPersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n\t\t\t\t\ttoList.add(receiver.getEmail());\n\t\t\t\t} else {\n\t\t\t\t\tPatientBean receiver = patientDAO.getPatient(mBean.getTo());\n\t\t\t\t\ttoList.add(receiver.getEmail());\n\t\t\t\t}\n\t\t\t\tsenderName = sender.getFullName();\n\t\t\t\tfromEmail = sender.getEmail();\n\t\t\t}\n\t\t}\n\t\temail.setToList(toList);\n\t\temail.setFrom(fromEmail);\n\t\temail.setSubject(String.format(\"A new message from %s\", senderName));\n\t\temail.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, log in to iTrust and go to \\\"View My Messages\\\"\", senderName));\n\t\temailer.sendEmail(email);\n\t\t\n\t\ttransactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns the patient's name\n\t * \n\t * @param mid MId of the patient\n\t * @return the name of the patient\n\t * @throws iTrustException\n\t */\n\tpublic String getPatientName(long mid) throws iTrustException {\n\t\treturn patientDAO.getName(mid);\n\t}\n\t\n\t/**\n\t * Returns the personnel's name\n\t * \n\t * @param mid MId of the personnel\n\t * @return the name of the personnel\n\t * @throws iTrustException\n\t */\n\tpublic String getPersonnelName(long mid) throws iTrustException {\n\t\treturn personnelDAO.getName(mid);\n\t}\n\t\n\t/**\n\t * Returns a list of the patients that the logged in HCP represents\n\t * \n\t * @return list of the patients that the logged in HCP represents\n\t * @throws iTrustException\n\t */\n\tpublic List<PatientBean> getMyRepresentees() throws iTrustException {\n\t\tList<PatientBean> representees = new ArrayList<PatientBean>();\n\t\ttry {\n\t\t\trepresentees = patientDAO.getRepresented(loggedInMID);\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn representees;\n\t}\n\t\n\t/**\n\t * Returns the designated HCPs for the logged in patient.\n\t * \n\t * @return designated HCPs for the logged in patient.\n\t * @throws iTrustException\n\t */\n\tpublic List<PersonnelBean> getMyDLHCPs() throws iTrustException {\n\t\treturn getDLHCPsFor(loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns the designated HCPs for the given patient.\n\t * \n\t * @return designated HCPs for the given patient.\n\t * @throws iTrustException\n\t */\n\tpublic List<PersonnelBean> getDLHCPsFor(long pid) throws iTrustException {\n\t\tList<PersonnelBean> dlhcps = new ArrayList<PersonnelBean>();\n\t\ttry {\n\t\t\tdlhcps = patientDAO.getDeclaredHCPs(pid);\n\t\t} catch (DBException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn dlhcps;\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ceb"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/MessageDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7ce8"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cee"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf4"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d24"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.MessageBean;\nimport edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used for the logging mechanism.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class MessageDAO {\n\tprivate DAOFactory factory;\n\tprivate MessageBeanLoader mbLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic MessageDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tthis.mbLoader = new MessageBeanLoader();\n\t}\n\n\t/**\n\t * Gets all the messages for a certain user MID.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\t\n\tpublic List<MessageBean> getMessagesFor(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\tconn = factory.getConnection();\n\t\tps = conn.prepareStatement(\"SELECT * FROM message WHERE to_id = ? ORDER BY sent_date DESC\");\n\t\tps.setLong(1, mid);\n\t\tResultSet rs = ps.executeQuery();\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\n\t/**\n\t * Gets all the messages for a certain user MID sorted by ascending time.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getMessagesTimeAscending(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\tconn = factory.getConnection();\n\t\tps = conn.prepareStatement(\"SELECT * FROM message WHERE to_id = ? ORDER BY sent_date ASC\");\n\t\tps.setLong(1, mid);\n\t\tResultSet rs = ps.executeQuery();\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\t\n\t/**\n\t * Gets all the messages for a certain user MID sorted by name ascending.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getMessagesNameAscending(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs;\n\n\t\tconn = factory.getConnection();\n\t\tif(mid >= (long) 999999999){\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\t\telse{\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\t\n\t/**\n\t * Gets all the messages for a certain user MID sorted by name descending.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getMessagesNameDescending(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs;\n\n\t\tconn = factory.getConnection();\n\t\tif(mid >= (long) 999999999){\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\t\telse{\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\t\n\t/**\n\t * Gets all the messages from a certain user MID.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\t\n\tpublic List<MessageBean> getMessagesFrom(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\tconn = factory.getConnection();\n\t\tps = conn.prepareStatement(\"SELECT * FROM message WHERE from_id = ? ORDER BY sent_date DESC\");\n\t\tps.setLong(1, mid);\n\t\tResultSet rs = ps.executeQuery();\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\t\n\t/**\n\t * Gets all the messages for a certain user MID sorted by ascending time.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getMessagesFromTimeAscending(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\tconn = factory.getConnection();\n\t\tps = conn.prepareStatement(\"SELECT * FROM message WHERE from_id = ? ORDER BY sent_date ASC\");\n\t\tps.setLong(1, mid);\n\t\tResultSet rs = ps.executeQuery();\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\t\n\t/**\n\t * Gets all the messages for a certain user MID sorted by name ascending.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getMessagesFromNameAscending(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs;\n\n\t\tconn = factory.getConnection();\n\t\tif(mid >= (long) 999999999){\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\t\telse{\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\t\n\t/**\n\t * Gets all the messages for a certain user MID sorted by name descending.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of MessageBeans.\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getMessagesFromNameDescending(long mid) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs;\n\n\t\tconn = factory.getConnection();\n\t\tif(mid >= (long) 999999999){\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\t\telse{\n\t\t\tps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC\");\n\t\t\tps.setLong(1, mid);\n\t\t\trs = ps.executeQuery();\n\t\t}\n\n\t\tList<MessageBean> mbList = this.mbLoader.loadList(rs);\n\n\t\tDBUtil.closeConnection(conn, ps);\n\n\t\treturn mbList;\n\t}\n\n\t/**\n\t * Adds a message to the database.\n\t * @param mBean A bean representing the message to be added.\n\t * @throws SQLException\n\t */\n\tpublic void addMessage(MessageBean mBean) throws SQLException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\n\t\tconn = factory.getConnection();\n\t\tif (mBean.getParentMessageId() == 0L) {\n\t\t\tps = conn.prepareStatement(\n\t\t\t\t\t\"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read) \"\n\t\t\t\t  + \"VALUES (?, ?, NOW(), ?, ?, ?)\");\n\t\t\tthis.mbLoader.loadParameters(ps, mBean);\n\t\t} else {\n\t\t\tps = conn.prepareStatement(\n\t\t\t\t\t\"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read, parent_msg_id) \"\n\t\t\t\t  + \"  VALUES (?, ?, NOW(), ?, ?, ?, ?)\");\n\t\t\tthis.mbLoader.loadParameters(ps, mBean);\n\t\t}\n\n\t\tps.executeUpdate();\n\n\t\tDBUtil.closeConnection(conn, ps);\n\t}\n\t\n\tpublic void updateRead(MessageBean mBean) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE message SET been_read=1 WHERE message_id=?\");\n\t\t\tps.setLong(1, mBean.getMessageId());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n}"}
{"_id":{"$oid":"5ea8c521258db2dac01e7ced"},"name":"WebRoot/auth/hcp/sendMessage.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cec"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.action.SendMessageAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MessageBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Send a Message\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tSendMessageAction action = new SendMessageAction(prodDAO, loggedInMID.longValue());\n\tPatientDAO patientDAO = prodDAO.getPatientDAO();\n\t\n\tlong patientID = 0L;\n\t\n\tif (session.getAttribute(\"pid\") != null) {\n\t\tString pidString = (String) session.getAttribute(\"pid\");\n\t\tpatientID = Long.parseLong(pidString);\n\t\ttry {\n\t\t\taction.getPatientName(patientID);\n\t\t} catch (iTrustException ite) {\n\t\t\tpatientID = 0L;\n\t\t\tsession.removeAttribute(\"pid\");\n\t\t}\n\t}\n\telse {\n\t\tsession.removeAttribute(\"pid\");\n\t}\n\t\n\tif (patientID == 0L) {\n\t\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp/sendMessage.jsp\");\n\t} else {\t\n\t\tif (request.getParameter(\"messageBody\") != null) {\n\t\t\tString body = request.getParameter(\"messageBody\");\n\t\t\tMessageBean message = new MessageBean();\n\t\t\tmessage.setBody(request.getParameter(\"messageBody\"));\n\t\t\tmessage.setSubject(request.getParameter(\"subject\"));\n\t\t\tmessage.setRead(0);\n\t\t\tmessage.setFrom(loggedInMID);\n\t\t\tmessage.setTo(patientID);\n\t\t\ttry {\n\t\t\taction.sendMessage(message);\n\t\t\tsession.removeAttribute(\"pid\");\n\t\t\tresponse.sendRedirect(\"messageOutbox.jsp\");\n\n\t\t\t} catch (FormValidationException e){\n\t\t\t%>\n\t\t\t<div align=center><span class=\"iTrustError\"><%=e.getMessage()%></span></div>\n\t\t\t<%\t\n\t\t\t}\n\t\t}\n%>\n\n<div align=\"left\">\n\t<h2>Send a Message</h2>\n\t<h4>to <%= action.getPatientName(patientID) %> (<a href=\"/iTrust/auth/getPatientID.jsp?forward=hcp/sendMessage.jsp\">someone else</a>):</h4>\n\t<form id=\"mainForm\" method=\"post\" action=\"sendMessage.jsp\">\n\t\t<span>Subject: </span><input type=\"text\" name=\"subject\" size=\"50\" /><br /><br />\n\t\t<span>Message: </span><br />\n\t\t<textarea name=\"messageBody\" cols=\"100\" rows=\"10\"></textarea><br />\n\t\t<br />\n\t\t<input type=\"submit\" value=\"Send\" name=\"sendMessage\"/>\n\t</form>\n\t<br />\n\t<br />\n</div>\n<%\t} %>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cef"},"name":"WebRoot/auth/patient/viewMyMessages.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cee"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf4"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyMessagesAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MessageBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"java.util.List\"%>\n\n<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - View My Messages\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<div align=\"center\">\n<h2>My Messages</h2>\n<%\n\tViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());\n\tList<MessageBean> messages = action.getAllMyMessages();\n\tsession.setAttribute(\"messages\", messages);\n\tif (messages.size() > 0) { %>\n\t\n\t<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th>Sender</th>\n\t\t\t<th>Message</th>\n\t\t\t<th>Received</th>\n\t\t\t<th>&nbsp;</th>\n\t\t</tr>\n<%\t\tint index = 0; %>\n<%\t\tfor(MessageBean message : messages) { %>\n\t\t<tr>\n\t\t\t<td><%= action.getPersonnelName(message.getFrom()) %></td>\n\t\t\t<td><%= message.getBody() %></td>\n\t\t\t<td><%= message.getSentDate() %></td>\n\t\t\t<td><a href=\"reply.jsp?msg=<%= index %>\">Reply</a></td>\n\t\t</tr>\n<%\t\t\tindex ++; %>\n<%\t\t} %>\n\t</table>\n<%\t} else { %>\n\t<div>\n\t\t<i>You have no messages</i>\n\t</div>\n<%\t} %>\t\n\t<br /><br />\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cf0"},"name":"src/edu/ncsu/csc/itrust/action/ViewMyMessagesAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cee"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf4"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.sql.SQLException;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.MessageBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.MessageDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Action class for ViewMyMessages.jsp\n *\n */\npublic class ViewMyMessagesAction {\n\tprivate long loggedInMID;\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate MessageDAO messageDAO;\n\n\t/**\n\t * Set up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the user who is viewing their messages.\n\t */\n\tpublic ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.messageDAO = factory.getMessageDAO();\n\t}\n\t\n\t/**\n\t * Gets all the messages for the logged in user\n\t * \n\t * @return a list of all the user's messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMyMessages() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesFor(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets all the messages for the logged in user and sorts by ascending time\n\t * \n\t * @return a list of all the user's messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMyMessagesTimeAscending() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesTimeAscending(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets all the messages for the logged in user and sorts names in ascending order\n\t * \n\t * @return a list of all the user's messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMyMessagesNameAscending() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesNameAscending(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets all the messages for the logged in user and sorts name in descending order\n\t * \n\t * @return a list of all the user's messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMyMessagesNameDescending() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesNameDescending(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets all the sent messages for the logged in user\n\t * \n\t * @return a list of all the user's sent messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMySentMessages() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesFrom(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets all the messages for the logged in user and sorts by ascending time\n\t * \n\t * @return a list of all the user's messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMySentMessagesTimeAscending() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesFromTimeAscending(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets all the messages for the logged in user and sorts names in ascending order\n\t * \n\t * @return a list of all the user's messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMySentMessagesNameAscending() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesFromNameAscending(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets all the messages for the logged in user and sorts name in descending order\n\t * \n\t * @return a list of all the user's messages\n\t * @throws SQLException\n\t */\n\tpublic List<MessageBean> getAllMySentMessagesNameDescending() throws SQLException {\n\t\t\n\t\treturn messageDAO.getMessagesFromNameDescending(loggedInMID);\n\t}\n\t\n\tpublic String validateAndCreateFilter(String filter) {\n\t\tString[] f = filter.split(\",\", -1);\n\t\t\n\t\tDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n\t\tDate s = null;\n\t\tDate en = null;\n\t\ttry {\t\n\t\t\tif(!f[4].equals(\"\"))\n\t\t\t\ts = format.parse(f[4]);\n\t\t\tif(!f[5].equals(\"\"))\n\t\t\t\ten = format.parse(f[5]);\n\t\t\tif(s!=null && en!=null && en.before(s)) {\n\t\t\t\treturn \"Error: The end date cannot be before the start date.\";\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\treturn \"Error: A date was not formatted correctly, please enter dates as MM/DD/YYYY\";\n\t\t}\n\t\t\n\t\tfor(int i=0; i<f.length; i++) {\n\t\t\tf[i]=f[i].replace(\"\\\"\", \"\");\n\t\t\tf[i]=f[i].replace(\"<\",\"\");\n\t\t\tf[i]=f[i].replace(\">\",\"\");\n\t\t}\n\t\t\n\t\tString nf = f[0]+\",\"+f[1]+\",\"+f[2]+\",\"+f[3]+\",\"+f[4]+\",\"+f[5];\n\t\t\n\t\treturn nf;\n\t}\n\t\n\t/**\n\t * Gets a list of messages for a user based on their filter criteria.\n\t * \n\t * @param messages List of all of a user's MessageBeans\n\t * @param filter String containing a user's filter criteria.\n\t * @return a List of MessageBeans that meet the criteria of the filter.\n\t * @throws iTrustException\n\t * @throws ParseException\n\t */\n\tpublic List<MessageBean> filterMessages(List<MessageBean> messages, String filter) throws iTrustException, ParseException {\n\t\tList<MessageBean> filtered = new ArrayList<MessageBean>();\n\t\tString[] f = filter.split(\",\", -1);\n\t\tfor(MessageBean m : messages) {\n\t\t\t/**\n\t\t\t * Check the sender filter field.\n\t\t\t * Exclude if this MessageBean does not match the \n\t\t\t * requested sender, if one is specified.\n\t\t\t */\n\t\t\tif(!f[0].equals(\"\")) {\n\t\t\t\tif(!this.getName(m.getFrom()).equalsIgnoreCase(f[0]))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Check the subject filter field.\n\t\t\t * Exclude if this MessageBean does not match the \n\t\t\t * requested subject, if one is specified.\n\t\t\t */\n\t\t\tif(!f[1].equals(\"\")) {\n\t\t\t\tif(!m.getSubject().equalsIgnoreCase(f[1]))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Check the body of the message for certain words.\n\t\t\t * Exclude if this MessageBean if it does not contain \n\t\t\t * those words in the message body.\n\t\t\t */\n\t\t\tif(!f[2].equals(\"\")) {\n\t\t\t\tif(!m.getSubject().toLowerCase().contains(f[2].toLowerCase()) && !m.getBody().toLowerCase().contains(f[2].toLowerCase()))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Check the body of the message for certain words.\n\t\t\t * Exclude if this MessageBean if it does contain \n\t\t\t * those words in the message body.\n\t\t\t */\n\t\t\tif(!f[3].equals(\"\")) {\n\t\t\t\tif(m.getSubject().toLowerCase().contains(f[3].toLowerCase()) || m.getBody().toLowerCase().contains(f[3].toLowerCase()))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Check the start date filter field.\n\t\t\t * Exclude if this MessageBean was not sent after\n\t\t\t * this date.\n\t\t\t */\n\t\t\tif(!f[4].equals(\"\")) {\n\t\t\t\tDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n\t\t\t\tDate s = format.parse(f[4]);\n\t\t\t\tif(s.after(m.getSentDate()))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t}\n\t\t\t/**\n\t\t\t * Check the end date filter field.\n\t\t\t * Exclude if this MessageBean was not sent before\n\t\t\t * this date.\n\t\t\t */\n\t\t\tif(!f[5].equals(\"\")) {\n\t\t\t\tDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n\t\t\t\tDate s = format.parse(f[5]);\n\t\t\t\tCalendar c = Calendar.getInstance();\n\t\t\t\tc.setTime(s);\n\t\t\t\tc.add(Calendar.DAY_OF_MONTH, 1);\n\t\t\t\ts = c.getTime();\n\t\t\t\tif(s.before(m.getSentDate()))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t}\n\t\t\t/**\n\t\t\t * If the message has not been eliminated by any \n\t\t\t * of the filter fields, add it to the new list \n\t\t\t * of messages.\n\t\t\t */\n\t\t\tfiltered.add(m);\n\t\t}\n\t\t\n\t\treturn filtered;\n\t}\n\t\n\t/**\n\t * Gets a patient's name from their MID\n\t * \n\t * @param mid the MID of the patient\n\t * @return the patient's name\n\t * @throws iTrustException\n\t */\n\tpublic String getName(long mid) throws iTrustException {\n\t\tif(mid < 7000000000L)\n\t\t\treturn patientDAO.getName(mid);\n\t\telse\n\t\t\treturn personnelDAO.getName(mid);\n\t}\n\t\n\t/**\n\t * Gets a personnel's name from their MID\n\t * \n\t * @param mid the MID of the personnel\n\t * @return the personnel's name\n\t * @throws iTrustException\n\t */\n\tpublic String getPersonnelName(long mid) throws iTrustException {\n\t\treturn personnelDAO.getName(mid);\n\t}\n\t\n\t/**\n\t * Set the state of the MessageBean to read, after \n\t * it is read by a user.\n\t * @param mBean MessageBean to be read\n\t */\n\tpublic void setRead(MessageBean mBean) {\n\t\ttry {\n\t\t\tmessageDAO.updateRead(mBean);\n\t\t} catch (DBException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cf2"},"name":"WebRoot/auth/hcp/viewMyMessages.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf1"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf4"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyMessagesAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MessageBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - View My Messages\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<div align=center>\n\t<h2>My Messages</h2>\n<%\n\tViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());\n\tList<MessageBean> messages = action.getAllMyMessages();\n\tsession.setAttribute(\"messages\", messages);\n\tif (messages.size() > 0) { %>\t\n\t<table class=\"fTable\">\n\t\t<tr>\n\t\t\t<th>Sender</th>\n\t\t\t<th>Message</th>\n\t\t\t<th>Received</th>\n\t\t\t<th></th>\n\t\t</tr>\n<%\t\tint index = 0; %>\n<%\t\tfor(MessageBean message : messages) { %>\n\t\t<tr>\n\t\t\t<td><%= action.getName(message.getFrom()) %></td>\n\t\t\t<td><%= message.getBody() %></td>\n\t\t\t<td><%= message.getSentDate() %></td>\n\t\t\t<td><a href=\"reply.jsp?msg=<%= index %>\">Reply</a></td>\n\t\t</tr>\n<%\t\t\tindex ++; %>\n<%\t\t} %>\n\t</table>\n<%\t} else { %>\n\t<div>\n\t\t<i>You have no messages</i>\n\t</div>\n<%\t} %>\t\n\t<br />\n</div>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cf3"},"name":"WebRoot/auth/hcp/reply.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf1"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.action.SendMessageAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MessageBean\"%>\n<%@page import=\"java.util.List\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Reply\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tSendMessageAction action = new SendMessageAction(prodDAO, loggedInMID);\n\tMessageBean original = null;\n\t\n\tif (session.getAttribute(\"message\") != null) {\n\t\toriginal = (MessageBean)session.getAttribute(\"message\");\n\t\tsession.setAttribute(\"original\", original);\n\t\tsession.removeAttribute(\"message\");\n\t} else if (request.getParameter(\"messageBody\") != null) {\n\t\tif (session.getAttribute(\"original\") != null) {\n\t\t\toriginal = (MessageBean)session.getAttribute(\"original\");\n\t\t\tMessageBean messageNew = new MessageBean();\n\t\t\tmessageNew.setBody(request.getParameter(\"messageBody\"));\n\t\t\tmessageNew.setFrom(loggedInMID);\n\t\t\tmessageNew.setTo(original.getFrom());\n\t\t\tmessageNew.setSubject(request.getParameter(\"subject\"));\n\t\t\tmessageNew.setRead(0);\n\t\t\tmessageNew.setParentMessageId(original.getMessageId());\n\t\t\taction.sendMessage(messageNew);\n\t\t\tresponse.sendRedirect(\"messageInbox.jsp\");\n\t\t} \n\t} else {\n\t\tresponse.sendRedirect(\"messageInbox.jsp\");\n\t}\n\t\n%>\n\n\t<h2>Reply</h2>\n\t<h4>to a message from <%= action.getPatientName(original.getFrom()) %>:</h4>\n\t<form id=\"mainForm\" method=\"post\" action=\"reply.jsp\">\n\t\t<span>Subject: </span><input type=\"text\" name=\"subject\" size=\"50\" value=\"RE: <%= original.getSubject() %>\" /><br /><br />\n\t\t<span>Message: </span><br />\n\t\t<textarea name=\"messageBody\" cols=\"100\" rows=\"10\"></textarea><br />\n\t\t<br />\n\t\t<input type=\"submit\" value=\"Send\" name=\"sendMessage\"/>\n\t</form>\n\t<br />\n\t<br />\n\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cf6"},"name":"WebRoot/auth/patient/viewExpiredPrescriptionRecords.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf5"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf8"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\" %>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Get My Expired Prescription Reports\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nPatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue()); \n\nViewExpiredPrescriptionsAction expAction = new ViewExpiredPrescriptionsAction(prodDAO, loggedInMID.longValue());\n\nList<PersonnelBean> personnelList = prodDAO.getPersonnelDAO().getAllPersonnel();\n\nsession.setAttribute(\"personnelList\", personnelList);\n\n%>\n<div align=\"center\">\n\t<br />\n\t<table class=\"fTable\">\n\t\n\t\n\t\n\t\n\t\n\t<%\n\t\tList<PrescriptionBean> prescriptions = expAction.getPrescriptionsForPatient(loggedInMID.longValue());\n\t\tif (prescriptions.size() == 0) { \n%>\n\t\t<tr>\n\t\t\t<td colspan=4>\n\t\t\t\t<i>No prescriptions found</i>\n\t\t\t</td>\n\t\t</tr>\n<%\n\t\t} else { \n%>\n\t\t<tr>\n\t\t\t<th colspan=4><%= patient.getFullName() %></th>\n\t\t</tr>\n\t\t<tr class=\"subHeader\">\n\t\t\t<td>ND Code</td>\n\t\t\t<td>Description</td>\n\t\t\t<td>Duration</td>\n\t\t\t<td>Prescribing HCP</td>\n\t\t</tr>\n<%\t\n\tfor (PrescriptionBean prescription : prescriptions) { \n\t\tPersonnelBean doctor = expAction.getPrescribingDoctor(prescription);\n%>\n\t\t<tr>\n\t\t\t<td ><a href=\"viewPrescriptionInformation.jsp?visitID=<%=prescription.getVisitID()%>&presID=<%=prescription.getId()%>\"><%=prescription.getMedication().getNDCodeFormatted() %></a></td>\n\t\t\t<td ><%=prescription.getMedication().getDescription() %></td>\n\t\t\t<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>\n\t\t\t<td ><a href=viewLHCP.jsp?index=<%=doctor.getIndexIn(personnelList) %> ><%=doctor.getFullName() %></a></td>\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t</tr>\n<%\t\t\t\n\t\t\t}\n\t\t}\n\t\n\t\n%>\n\t</table>\t\n\t<br />\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cf7"},"name":"src/edu/ncsu/csc/itrust/action/ViewExpiredPrescriptionsAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf5"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.PrescriptionBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Handles retrieving beans for viewPrescriptionRecords.jsp\n * \n * @author laurenhayward\n * \n */\npublic class ViewExpiredPrescriptionsAction {\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate EmailUtil emailer;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Set up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing the expired prescriptions.\n\t */\n\tpublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.emailer = new EmailUtil(factory);\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\t\n\t/**\n\t * Gets a PatientBean from an MID\n\t * \n\t * @param patientID MID of the patient\n\t * @return PatientBean for the MID given\n\t * @throws iTrustException\n\t */\n\tpublic PatientBean getPatient(long patientID) throws iTrustException {\n\t\treturn patientDAO.getPatient(patientID);\n\t}\n\t\n\t/**\n\t * Gets the logged in person's representees\n\t * \n\t * @return list of PatientBeans holding the representees\n\t * @throws iTrustException\n\t */\n\tpublic List<PatientBean> getRepresentees() throws iTrustException {\n\t\treturn patientDAO.getRepresented(loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns the prescribing HCP for a prescription\n\t * \n\t * @param prescription item in question\n\t * @return HCP who prescribed the prescription\n\t * @throws iTrustException\n\t */\n\tpublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\n\t\treturn personnelDAO.getPrescribingDoctor(prescription);\n\t}\n\t\n\t/**\n\t * Returns all the prescriptions for a given patient\n\t * \n\t * @param patientID patient in question\n\t * @return list of all the prescriptions for that patient\n\t * @throws iTrustException\n\t */\n\tpublic List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {\n\t\tPatientBean patient = patientDAO.getPatient(patientID);\n\t\tif (loggedInMID == patientID) {\n\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\treturn patientDAO.getExpiredPrescriptions(patientID);\n\t\t}\n\t\t\n\t\tList<String> toList = new ArrayList<String>();\n\t\ttoList.add(patient.getEmail());\n\t\t\n\t\tList<PatientBean> representatives = patientDAO.getRepresenting(patientID);\n\t\tfor(PatientBean representative : representatives) {\n\t\t\tif (loggedInMID == representative.getMID()) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\t\treturn patientDAO.getExpiredPrescriptions(patientID);\n\t\t\t}\n\t\t\ttoList.add(representative.getEmail());\n\t\t}\n\t\t\n\t\tList<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\n\t\tfor(PersonnelBean dlhcp : dlhcps) {\n\t\t\tif (loggedInMID == dlhcp.getMID()) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\t\treturn patientDAO.getExpiredPrescriptions(patientID);\n\t\t\t}\n\t\t\tList<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\n\t\t\tfor(PersonnelBean uap : uaps) {\n\t\t\t\tif (loggedInMID == uap.getMID()) {\n\t\t\t\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\t\t\t\treturn patientDAO.getPrescriptions(patientID);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tEmail email = new Email();\n\t\temail.setToList(toList);\n\t\temail.setFrom(\"noreply@itrust.com\");\n\t\temail.setSubject(\"Undesignated Personnel Have Accessed Your Prescription Records\");\n\t\temail.setBody(\"An undesignated HCP or UAP has accessed your prescription records. For more information, please log in to iTrust.\");\n\t\temailer.sendEmail(email);\n\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n\t\treturn patientDAO.getPrescriptions(patientID);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cf9"},"name":"WebRoot/auth/patient/viewLHCP.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cf8"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HCPVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.OfficeVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"LCHP Information\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<script type=\"text/javascript\">\n\tfunction removeHCP(HCPID,formID) {\n\t\tdocument.getElementById(\"removeID\").value = HCPID;\n\t\tdocument.getElementById(formID).submit();\n\t}\n</script>\n\n<%\nint index = Integer.parseInt(request.getParameter(\"index\"));\nPersonnelBean myLHCP = ((List<PersonnelBean>) session.getAttribute(\"personnelList\")).get(index);\n\n\n%>\n<div align = center>\n<table class=\"fTable\">\n<tr><th colspan=2><%=myLHCP.getFullName() %></th></tr>\n<tr><td>Specialty:</td><td><%=myLHCP.getSpecialty() == null ? \"\" : myLHCP.getSpecialty() %></td></tr>\n<tr><td>Address:</td><td><%=myLHCP.getStreetAddress1() %> <br> \n\t\t\t\t\t\t<%=  myLHCP.getStreetAddress2() %> <br>\n\t\t\t\t\t\t<%= myLHCP.getCity().equals(\"\") ? \"\" : myLHCP.getCity() + \",\" %> <%= myLHCP.getState() + \" \" + myLHCP.getZip() %> </td></tr>\n<tr><td>Phone:</td><td><%=myLHCP.getPhone().equals(\"--\") ? \"\" : myLHCP.getPhone() %></td></tr>\n<tr><td>Email:</td><td><%=myLHCP.getEmail() %></td></tr>\n</table>\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cfb"},"name":"WebRoot/auth/hcp/viewPrescriptionRenewalNeeds.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cfa"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cfc"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PrescriptionBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\" %>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\" %>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\" %>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - My Patients with Potential Prescription-Renewal Needs\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nPersonnelBean self = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID); \n\nViewPrescriptionRenewalNeedsAction expAction = new ViewPrescriptionRenewalNeedsAction(prodDAO, loggedInMID.longValue());\n\n//List<PersonnelBean> personnelList = prodDAO.getPersonnelDAO().getAllPersonnel();\n\n//session.setAttribute(\"personnelList\", personnelList);\n\n%>\n<div align=\"center\">\n\t<br />\n\t<table class=\"fTable\">\n\t\n\t\n\t\n\t\n\t\n\t<%\n\t\tList<PatientBean> patients = expAction.getRenewalNeedsPatients();\n\n\t\t//patients = new PatientDAO(prodDAO).getAllPatients(); // Temporary test\n\t\tif (patients.size() == 0) { \n%>\n\t\t<tr>\n\t\t\t<td colspan=4>\n\t\t\t\t<i>No patients have renewal needs.</i>\n\t\t\t</td>\n\t\t</tr>\n<%\n\t\t} else { \n%>\n\t\t<tr>\n\t\t\t<th colspan=4><%= self.getFullName() %></th>\n\t\t</tr>\n\t\t<tr class=\"subHeader\">\n\t\t\t<td>Patient Name</td>\n\t\t\t<td>Phone Number</td>\n\t\t\t<td>Email Address</td>\n\t\t</tr>\n<%\t\n\tfor (PatientBean patient : patients) { \n\t\t//PersonnelBean doctor = expAction.getPrescribingDoctor(prescription);\n%>\n\t\t<tr>\n\t\t\t<td ><a href='sendEmailNotification.jsp?mid=<%=patient.getMID()%>'><%=patient.getFullName() %></a></td>\n\t\t\t<td ><%=patient.getPhone() %></td>\n\t\t\t<td ><%=patient.getEmail() %></td>\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t</tr>\n<%\t\t\t\n\t\t\t}\n\t\t}\n\t\n\t\n%>\n\t</table>\t\n\t<br />\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cfd"},"name":"src/edu/ncsu/csc/itrust/action/ViewPrescriptionRenewalNeedsAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cfc"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.Messages;\n\n/*\n * This action returns a list of patients with a special-diagnosis-history who\n * have the logged in HCP as a DHCP and whose medications are going to\n * expire within seven days. \n */\npublic class ViewPrescriptionRenewalNeedsAction {\n\tprivate PatientDAO patientDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Set up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing the prescription renewals.\n\t */\n\tpublic ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\t\n\t/**\n\t * Uses PatientDAO as a helper class to return a list of patients with a special-diagnosis-history who\n\t * have the logged in HCP as a DHCP and whose medications are going to\n\t * expire within seven days.\n\t * \n\t * @return A list of PatientBean's\n\t */\n\tpublic List<PatientBean> getRenewalNeedsPatients() {\n\t\n\t\ttry {\t\n\t\t\ttransDAO.logTransaction(TransactionType.VIEW_RENEWAL_NEEDS_PATIENTS, loggedInMID, \n\t\t\t\t\t0L, loggedInMID + Messages.getString(\"ViewPrescriptionRenewalNeedsAction.0\")); //$NON-NLS-1$\n\t\t\treturn patientDAO.getRenewalNeedsPatients(loggedInMID);\n\t\t}\n\t\tcatch (DBException e) {\n\t\t\tSystem.out.println(Messages.getString(\"ViewPrescriptionRenewalNeedsAction.1\")); //$NON-NLS-1$\n\t\t\tSystem.out.println(e);\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7cff"},"name":"WebRoot/auth/hcp/hcpConsultation.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7cfe"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d00"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d01"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d04"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<!-- imports -->\n<%@page import=\"edu.ncsu.csc.itrust.action.ReferralManagementAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ReferralBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.enums.Role\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.DBException\"%>\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"java.util.List\"%>\n\n<!-- header -->\n<%@include file=\"/global.jsp\" %>\n<%pageTitle = \"iTrust - HCP Consultations\";%>\n<%@include file=\"/header.jsp\" %>\n\n<%\nString task = request.getParameter(\"task\");\n%>\n\n\n<%if (task == null || task.equalsIgnoreCase(\"\")) {%>\n\t<center>\n\t\t<h1>HCP Consultations</h1>\n\t\t<form action='hcpConsultation.jsp' method=post>\n\t\t\t<input type='submit' name='task' value='Send a Consultation'>\n\t\t\t<input type='submit' name='task' value='View Pending Consultations'>\n\t\t</form>\n\t</center>\n\t<br />\n\t\n\t\n<%} else if (task.equalsIgnoreCase(\"Send a Consultation\")) {%>\n\t<%\n\t// Find all patients associated with this hcp\n\tPatientDAO patDAO = new PatientDAO(prodDAO);\n\tList<PatientBean> allPatients = patDAO.getAllPatients();\n\tList<PatientBean> myPatients = new ArrayList<PatientBean>();\n\tfor (PatientBean pat : allPatients) {\n\t\tif (patDAO.checkDeclaredHCP(pat.getMID(), loggedInMID)) {\n\t\t\tmyPatients.add(pat);\n\t\t}\n\t}\n\t\n\t// Find all hcps who are not this hcp\n\tPersonnelDAO personnel = new PersonnelDAO(prodDAO);\n\tList<PersonnelBean> allPersonnel = personnel.getAllPersonnel();\n\tList<PersonnelBean> allHCPs = new ArrayList<PersonnelBean>();\n\tfor (PersonnelBean per : allPersonnel) {\n\t\tif (per.getRole() == Role.HCP && per.getMID() != loggedInMID) {\n\t\t\tallHCPs.add(per);\n\t\t}\n\t}\n\t%>\n\t<center>\n\t\t<h1>Send a Consultation</h1>\n\t\t<form action='hcpConsultation.jsp' method=post>\n\t\t<input type='hidden' name='task' value='form'>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>Select Patient:</td>\n\t\t\t\t<td>\n\t\t\t\t\t<select size=1 name='patient'>\n\t\t\t\t\t<%for (PatientBean pat : myPatients) {%>\n\t\t\t\t\t\t<option value='<%=pat.getMID()%>'><%=pat.getFullName() %></option>\n\t\t\t\t\t<%}%>\n\t\t\t\t\t</select>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Select HCP</td>\n\t\t\t\t<td>\n\t\t\t\t\t<select size=1 name='hcp'>\n\t\t\t\t\t<%for (PersonnelBean per : allHCPs) { %>\n\t\t\t\t\t\t<option value='<%=per.getMID()%>'><%=per.getFullName() %></option>\n\t\t\t\t\t<%} %>\n\t\t\t\t\t</select>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td></td>\n\t\t\t\t<td><input type='submit' value='Select'></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</form>\n\t</center>\n\t\n\t\n<%} else if (task.equalsIgnoreCase(\"View Pending Consultations\")) {%>\n\t<%\n\tReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);\n\tList<ReferralBean> refsFromMe = refAction.getReferralsSentFromMe();\n\tList<ReferralBean> refsToMe = refAction.getReferralsSentToMe();\n\tPatientDAO patientDAO = new PatientDAO(prodDAO);\n\tPersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);\n\t%>\n\t<center>\n\t\t<h1>View Pending Consultations</h1>\n\t</center>\n\t<table align=center border=1 class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=5>Outgoing Consultations</th>\n\t\t</tr>\n\t\t<tr class=\"subHeader\">\n\t\t\t<td>Status</td>\n\t\t\t<td>Patient</td>\n\t\t\t<td>Sending Doctor</td>\n\t\t\t<td>Receiving Doctor</td>\n\t\t\t<td>Edit</td>\n\t\t</tr>\n\t\t<%if (refsFromMe.isEmpty()) {%>\n\t\t<tr>\n\t\t\t<td colspan=5><center>No Outgoing Consultation Requests</center></td>\n\t\t</tr>\n\t\t<%}%>\n\t\t<%for (ReferralBean ref : refsFromMe) {%>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t<%=\n\t\t\t\t\t(ref.getStatus() == ReferralBean.ReferralStatus.Pending) ? \n\t\t\t\t\t\t\t(\"Pending\") : \n\t\t\t\t\t\t\t( (ref.getStatus() == ReferralBean.ReferralStatus.Finished) ? \n\t\t\t\t\t\t\t\t\t(\"Finished\") : \n\t\t\t\t\t\t\t\t\t(\"Declined\"))\n\t\t\t\t%>\n\t\t\t\t</td>\n\t\t\t\t<td><%=patientDAO.getPatient(ref.getPatientID()).getFullName()%> (<%=ref.getPatientID()%>)</td>\n\t\t\t\t<td><%=personnelDAO.getPersonnel(ref.getSenderID()).getFullName()%> (<%=ref.getSenderID()%>)</td>\n\t\t\t\t<td><%=personnelDAO.getPersonnel(ref.getReceiverID()).getFullName()%> (<%=ref.getReceiverID()%>)</td>\n\t\t\t\t<td><a href='hcpConsultation.jsp?task=update&toFrom=from&id=<%=ref.getId()%>'>edit</a></td>\n\t\t\t</tr>\n\t\t<%}%>\n\t</table>\n\t<br />\n\t<br />\n\t\t<table align=center border=1 class=\"fTable\">\n\t\t<tr>\n\t\t\t<th colspan=5>Incoming Consultations</th>\n\t\t</tr>\n\t\t<tr class=\"subHeader\">\n\t\t\t<td>Status</td>\n\t\t\t<td>Patient</td>\n\t\t\t<td>Sending Doctor</td>\n\t\t\t<td>Receiving Doctor</td>\n\t\t\t<td>Edit</td>\n\t\t</tr>\n\t\t<%if (refsToMe.isEmpty()) {%>\n\t\t<tr>\n\t\t\t<td colspan=5><center>No Incoming Consultation Requests</center></td>\n\t\t</tr>\n\t\t<%}%>\n\t\t<%for (ReferralBean ref : refsToMe) {%>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t<%=\n\t\t\t\t\t(ref.getStatus() == ReferralBean.ReferralStatus.Pending) ? \n\t\t\t\t\t\t\t(\"Pending\") : \n\t\t\t\t\t\t\t( (ref.getStatus() == ReferralBean.ReferralStatus.Finished) ? \n\t\t\t\t\t\t\t\t\t(\"Finished\") : \n\t\t\t\t\t\t\t\t\t(\"Declined\"))\n\t\t\t\t%>\n\t\t\t\t</td>\n\t\t\t\t<td><%=patientDAO.getPatient(ref.getPatientID()).getFullName()%> (<%=ref.getPatientID()%>)</td>\n\t\t\t\t<td><%=personnelDAO.getPersonnel(ref.getSenderID()).getFullName()%> (<%=ref.getSenderID()%>)</td>\n\t\t\t\t<td><%=personnelDAO.getPersonnel(ref.getReceiverID()).getFullName()%> (<%=ref.getReceiverID()%>)</td>\n\t\t\t\t<td><a href='hcpConsultation.jsp?task=update&toFrom=to&id=<%=ref.getId()%>'>edit</a></td>\n\t\t\t</tr>\n\t\t<%}%>\n\t</table>\n\t<br />\n\t\n\t\n<%} else if (task.equalsIgnoreCase(\"update\")) { %>\n\t<%\n\tString toFrom = request.getParameter(\"toFrom\");\n\tString id = request.getParameter(\"id\");\n\t// Test for parameter errors:\n\t// \tempty parameters or options\n\tif (toFrom == null || \n\t\ttoFrom.equalsIgnoreCase(\"\") || \n\t\tid == null || \n\t\tid.equalsIgnoreCase(\"\") || \n\t\t!(toFrom.equalsIgnoreCase(\"to\") || toFrom.equalsIgnoreCase(\"from\"))) {%>\n\t\t<center>\n\t\t<h1>ERROR: Missing important parameters. <a href='hcpConsultation.jsp'>Try Again</a></h1>\n\t\t</center>\n\t<%}\n\tReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);\n\tlong rid = Long.parseLong(id);\n\tList<ReferralBean> referrals = null;\n\tif (toFrom.equalsIgnoreCase(\"to\")) {\n\t\treferrals = refAction.getReferralsSentToMe();\n\t} else {\n\t\treferrals = refAction.getReferralsSentFromMe();\n\t}\n\tReferralBean myRef = null;\n\tfor (ReferralBean ref : referrals) {\n\t\tif (ref.getId() == rid) {\n\t\t\tmyRef = ref;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (myRef == null) {%>\n\t\t<center>\n\t\t<h1>ERROR: Referral does not exist. <a href='hcpConsultation.jsp'>Choose another</a></h1>\n\t\t</center>\n\t<%}%>\n\t<center>\n\t<h1>Update Consultation Form:</h1><br />\n\t</center>\n\t<table border=10 bordercolor=darkred align=center><tr><td>\n\t<table border='0' width='400'>\n\t\t<tr>\n\t\t\t<td>Patient:</td>\n\t\t\t<td><%=(new PatientDAO(prodDAO)).getPatient(myRef.getPatientID()).getFullName()%></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Sending HCP:</td>\n\t\t\t<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getSenderID()).getFullName()%></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Receiving HCP:</td>\n\t\t\t<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getReceiverID()).getFullName()%></td>\n\t\t</tr>\n\t</table>\n\t<form action='hcpConsultation.jsp' method=post>\n\t<input type='hidden' name='task' value='change'>\n\t<input type='hidden' name='patID' value='<%=myRef.getPatientID()%>'>\n\t<input type='hidden' name='toID' value='<%=myRef.getReceiverID()%>'>\n\t<input type='hidden' name='fromID' value='<%=myRef.getSenderID()%>'>\n\t<input type='hidden' name='refID' value='<%=myRef.getId()%>'>\n\t<%if (toFrom.equalsIgnoreCase(\"to\")) {%>\n\tReferral Details:<br />\n\t<textarea name=\"refDetails\" readonly rows=\"5\" cols=\"48\" style=\"background-color: lightgrey\"><%=myRef.getReferralDetails()%></textarea><br />\n\tConsultation Details:<br />\n\t<textarea name=\"consDetails\" rows=\"5\" cols=\"48\"><%=myRef.getConsultationDetails()%></textarea><br />\n\t<%} else { %>\n\tReferral Details:<br />\n\t<textarea name=\"refDetails\" rows=\"5\" cols=\"48\"><%=myRef.getReferralDetails()%></textarea><br />\n\tConsultation Details:<br />\n\t<textarea name=\"consDetails\" rows=\"5\" cols=\"48\" readonly style=\"background-color: lightgrey\"><%=myRef.getConsultationDetails()%></textarea><br />\n\t<%} %>\n\t<select size=1 name='status'>\n\t\t<option <%=(myRef.getStatus() == ReferralBean.ReferralStatus.Pending) ? \"selected='selected'\" : \"\" %>>Pending</option>\n\t\t<option <%=(myRef.getStatus() == ReferralBean.ReferralStatus.Finished) ? \"selected='selected'\" : \"\" %>>Finished</option>\n\t\t<option <%=(myRef.getStatus() == ReferralBean.ReferralStatus.Declined) ? \"selected='selected'\" : \"\" %>>Declined</option>\n\t</select>\n\t</td></tr></table>\n\t<center>\n\t<input type='submit' value='Update'>\n\t</center>\n\t</form>\n\t\n\n<%} else if (task.equalsIgnoreCase(\"change\")) {%>\n\t<%\n\ttry {\n\t\tlong patID = Long.parseLong(request.getParameter(\"patID\"));\n\t\tlong toID = Long.parseLong(request.getParameter(\"toID\"));\n\t\tlong fromID = Long.parseLong(request.getParameter(\"fromID\"));\n\t\tlong refID = Long.parseLong(request.getParameter(\"refID\"));\n\t\tString consDetails = request.getParameter(\"consDetails\");\n\t\tString refDetails = request.getParameter(\"refDetails\");\n\t\tString status = request.getParameter(\"status\");\n\t\t\n\t\tReferralBean myRef = new ReferralBean();\n\t\tmyRef.setId(refID);\n\t\tmyRef.setPatientID(patID);\n\t\tmyRef.setReceiverID(toID);\n\t\tmyRef.setSenderID(fromID);\n\t\tmyRef.setConsultationDetails(consDetails);\n\t\tmyRef.setReferralDetails(refDetails);\n\t\tmyRef.setStatus(\n\t\t\tstatus.equalsIgnoreCase(\"Pending\") ? \n\t\t\t\t\tReferralBean.ReferralStatus.Pending :\n\t\t\t\t\tstatus.equalsIgnoreCase(\"Finished\") ?\n\t\t\t\t\t\t\tReferralBean.ReferralStatus.Finished :\n\t\t\t\t\t\t\tReferralBean.ReferralStatus.Declined\n\t\t);\n\t\t\n\t\tReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);\n\t\trefAction.updateReferral(myRef);\n\t\t%>\n\t\t<center>\n\t\t<h1>Consultation updated</h1><br />\n\t\t</center>\n\t\t<table border=10 bordercolor=darkgreen align=center><tr><td>\n\t\t<table border='0' width='400'>\n\t\t\t<tr>\n\t\t\t\t<td>Patient:</td>\n\t\t\t\t<td><%=(new PatientDAO(prodDAO)).getPatient(myRef.getPatientID()).getFullName()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Sending HCP:</td>\n\t\t\t\t<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getSenderID()).getFullName()%></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Receiving HCP:</td>\n\t\t\t\t<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getReceiverID()).getFullName()%></td>\n\t\t\t</tr>\n\t\t</table>\n\t\tReferral Details:<br />\n\t\t<textarea name=\"refDetails\" readonly rows=\"5\" cols=\"48\" style=\"background-color: lightgrey\"><%=myRef.getReferralDetails()%></textarea><br />\n\t\tConsultation Details:<br />\n\t\t<textarea name=\"consDetails\" readonly rows=\"5\" cols=\"48\" style=\"background-color: lightgrey\"><%=myRef.getConsultationDetails()%></textarea><br />\n\t\t</td></tr></table>\n\t\t<br />\n\t\t\n\t\t\n\t\t\n\t<%} catch (Exception e) {%>\n\t\t<center>\n\t\t<h1>ERROR: Referral couldn't be updated</h1>\n\t\t</center>\n\t<%} %>\n\t\n\t\n<%} else if (task.equalsIgnoreCase(\"form\")) {%>\n\t<%\n\tString patient = request.getParameter(\"patient\");\n\tString hcp = request.getParameter(\"hcp\");\n\tPatientBean pat = (new PatientDAO(prodDAO)).getPatient(Long.parseLong(patient));\n\tPersonnelBean per = (new PersonnelDAO(prodDAO)).getPersonnel(Long.parseLong(hcp));\n\t%>\n\t<center>\n\t<h1>Consultation Form:</h1>\n\t<form action='hcpConsultation.jsp' method=post>\n\t<input type='hidden' name='task' value='send'>\n\t<input type='hidden' name='patient' value='<%=patient%>'>\n\t<input type='hidden' name='hcp' value='<%=hcp%>'>\n\t<table border=10 bordercolor=darkred><tr><td>\n\t<table border='0' width='400'>\n\t\t<tr>\n\t\t\t<td>Refer Patient:</td>\n\t\t\t<td><%=pat.getFullName()%> (<%=patient%>)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>To HCP:</td>\n\t\t\t<td><%=per.getFullName()%> (<%=hcp%>)</td>\n\t\t</tr>\n\t</table>\n\t<textarea name=\"msg\" rows=\"5\" cols=\"48\">Details</textarea><br />\n\t</td></tr></table>\n\t<input type='submit' value='Submit'>\n\t</form>\n\t</center>\n\t\n\t\n<%} else if (task.equalsIgnoreCase(\"send\")) {\n\tString patient = request.getParameter(\"patient\");\n\tString hcp = request.getParameter(\"hcp\");\n\tString msg = request.getParameter(\"msg\");\n\t\n\tPatientBean pat = (new PatientDAO(prodDAO)).getPatient(Long.parseLong(patient));\n\tPersonnelBean per = (new PersonnelDAO(prodDAO)).getPersonnel(Long.parseLong(hcp));\n\t\n\tReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);\n\t\n\t// Create a new ReferralBean and load all the information into it.\n\tReferralBean newRef = new ReferralBean();\n\tnewRef.setReferralDetails(msg);\n\tnewRef.setConsultationDetails(\"\");\n\tnewRef.setPatientID(Long.parseLong(patient));\n\tnewRef.setReceiverID(Long.parseLong(hcp));\n\tnewRef.setSenderID(loggedInMID);\n\tnewRef.setStatus(ReferralBean.ReferralStatus.Pending);\n\t\n\ttry {\n\t\trefAction.sendReferral(newRef);%>\n\t\t<center>\n\t\t<h1>Thank you, your Consultation Request was sent.</h1>\n\t\t<table border=10 bordercolor=darkgreen><tr><td>\n\t\t<table border='0' width='400'>\n\t\t\t<tr>\n\t\t\t\t<td>Refer Patient:</td>\n\t\t\t\t<td><%=pat.getFullName()%> (<%=patient%>)</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>To HCP:</td>\n\t\t\t\t<td><%=per.getFullName()%> (<%=hcp%>)</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<textarea readonly name=\"msg\" rows=\"5\" cols=\"48\" style=\"background-color: lightgrey\"><%=msg %></textarea><br />\n\t\t</td></tr></table>\n\t\t</center>\n\t\t<br />\n\t<%} catch (DBException e) {%>\n\t\t<center><h1>ERROR: The referral couldn't be sent. <%=e.toString() %></h1></center>\n\t<%}%>\n\t\n\t\n<%} %>\n<%@include file=\"/footer.jsp\" %>"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d02"},"name":"src/edu/ncsu/csc/itrust/action/ReferralManagementAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d01"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d04"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\n\nimport edu.ncsu.csc.itrust.beans.ReferralBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.ReferralDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport java.util.List;\n\n/**\n * Used for referring patients to other HCPs.  The call is made in /auth/hcp/hcpConsultation.jsp \n */\npublic class ReferralManagementAction {\n\tprivate long loggedInMID;\n\tprivate TransactionDAO transDAO;\n\tprivate ReferralDAO referralDAO;\n\n\t/**\n\t * Super class validates the patient id\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the user managing this referral.\n\t * @param pidString The MID of the patient being referred.\n\t * @throws iTrustException\n\t */\n\tpublic ReferralManagementAction(DAOFactory factory, long loggedInMID) throws iTrustException {\n\t\t\n\t\tthis.referralDAO = factory.getReferralDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t}\n\n\t/**\n\t * Adds a referral bean to the database.\n\t * @param r The referral bean to be added.\n\t * @throws DBException\n\t */\n\tpublic void sendReferral(ReferralBean r) throws DBException {\n\t\treferralDAO.addReferral(r);\n\t\ttransDAO.logTransaction(TransactionType.SEND_REFERRAL, loggedInMID);\n\t}\n\t\n\t/**\n\t * Updates an existing referral bean.\n\t * @param r The current referral bean.\n\t * @throws DBException\n\t */\n\tpublic void updateReferral(ReferralBean r) throws DBException {\n\t\treferralDAO.editReferral(r);\n\t}\n\t\n\t/**\n\t * Gets the referrals the currently logged in MID has sent.\n\t * @return A java.util.List of ReferralBeans this MID has sent.\n\t * @throws DBException\n\t */\n\tpublic List<ReferralBean> getReferralsSentFromMe() throws DBException {\n\t\treturn referralDAO.getReferralsSentFrom(loggedInMID);\n\t}\n\t\n\t/**\n\t * Gets the referrals this MID has received.\n\t * @return A java.util.List of the ReferralBeans this MID has received.\n\t * @throws DBException\n\t */\n\tpublic List<ReferralBean> getReferralsSentToMe() throws DBException {\n\t\treturn referralDAO.getReferralsSentTo(loggedInMID);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d03"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/ReferralDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d01"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d04"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.ReferralBean;\nimport edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * Used to update referrals, and fetch lists of referrals sent to and\n * from HCPs.\n *\n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n */\npublic class ReferralDAO {\n\tprivate DAOFactory factory;\n\tprivate ReferralBeanLoader referralLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic ReferralDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\treferralLoader = new ReferralBeanLoader();\n\t}\n\n\t\n\n\t/**\n\t * Gets a list of all referrals sent from an HCP\n\t * @param mid The HCP's mid.\n\t * @return The list of the referrals they sent.\n\t * @throws DBException\n\t */\n\tpublic List<ReferralBean> getReferralsSentFrom(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM referrals WHERE SenderID = ?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\n\t\t\t\n\t\t\treturn referralLoader.loadList(rs);\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Gets a list of all referrals sent to an HCP\n\t * @param mid The HCP's mid.\n\t * @return The list of the referrals sent to them.\n\t * @throws DBException\n\t */\n\tpublic List<ReferralBean> getReferralsSentTo(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\n\t\t\t\n\t\t\treturn referralLoader.loadList(rs);\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\n\t/**\n\t * Updates a given referral in the database.\n\t * @param r The referral to update.\n\t * @throws DBException\n\t */\n\tpublic void editReferral(ReferralBean r) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,\"\n\t\t\t\t\t+ \"ReferralDetails=?,ConsultationDetails=?,Status=?  WHERE ID=?\");\n\t\t\treferralLoader.loadParameters(ps, r);\n\t\t\tps.setLong(7, r.getId());\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a given referral to the database.\n\t * @param r The referral to add.\n\t * @throws DBException\n\t */\n\tpublic void addReferral(ReferralBean r) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\"\n\t\t\t\t\t+ \"ReferralDetails,ConsultationDetails,Status)  \"\n\t\t\t\t\t+ \"VALUES (?,?,?,?,?,?)\");\n\t\t\treferralLoader.loadParameters(ps, r);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d07"},"name":"src/edu/ncsu/csc/itrust/validate/RemoteMonitoringDataBeanValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d06"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d08"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction;\nimport edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Validator used to validate adding new remote monitoring data in {@link AddRemoteMonitoringDataAction}\n * \n */\npublic class RemoteMonitoringDataBeanValidator extends BeanValidator<RemoteMonitoringDataBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic RemoteMonitoringDataBeanValidator() {\n\t}\n\t\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(RemoteMonitoringDataBean m) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"Systolic Blood Pressure\", \"\" + m.getSystolicBloodPressure(),\n\t\t\t\tValidationFormat.SYSTOLIC_BLOOD_PRESSURE, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Diastolic Blood Pressure\", \"\" + m.getDiastolicBloodPressure(),\n\t\t\t\tValidationFormat.DIASTOLIC_BLOOD_PRESSURE, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Glucose Level\", \"\" + m.getGlucoseLevel(),\n\t\t\t\tValidationFormat.GLUCOSE_LEVEL, false));\n\t\tif (errorList.hasErrors()){\n\t\t\tthrow new FormValidationException(errorList);\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d0a"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/RemoteMonitoringDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d09"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0b"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d11"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d14"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d16"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d19"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.util.Date;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;\nimport edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Used for the keeping track of remote monitoring data.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n */\npublic class RemoteMonitoringDAO {\n\tprivate DAOFactory factory;\n\tprivate RemoteMonitoringDataBeanLoader loader = new RemoteMonitoringDataBeanLoader();\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic RemoteMonitoringDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns patient data for a given HCP\n\t * \n\t * @return\n\t * @throws DBException\n\t */\n\tpublic List<RemoteMonitoringDataBean> getPatientsData(long loggedInMID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringLists WHERE HCPMID=? ORDER BY PatientMID\");\n\t\t\tps.setLong(1, loggedInMID);\n\t\t\tResultSet patientRS = ps.executeQuery();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE timelogged >= CURRENT_DATE ORDER BY PatientID, timeLogged DESC\");\n\t\t\tResultSet dataRS = ps.executeQuery();\n\t\t\t\n\t\t\tList<String> patientList = new ArrayList<String>();\n\t\t\twhile(patientRS.next()) {\n\t\t\t\tpatientList.add(patientRS.getLong(\"PatientMID\") + \"\");\n\t\t\t}\n\t\t\tList<RemoteMonitoringDataBean> dataList = loader.loadList(dataRS);\t\t\t\n\t\t\t\n\t\t\tint i, j;\n\t\t\t//Go through all patients and remove any that aren't monitored by this HCP\n\t\t\tfor(i = 0; i < dataList.size(); i++) {\n\t\t\t\tif(!patientList.contains(dataList.get(i).getPatientMID() + \"\")) {\n\t\t\t\t\tdataList.remove(i);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Add values in patient list with no data for today to list.\n\t\t\tboolean itsThere;\n\t\t\tfor(i = 0; i < patientList.size(); i++) {\n\t\t\t\titsThere = false;\n\t\t\t\tfor(j = 0; j < dataList.size(); j++) {\n\t\t\t\t\tif((dataList.get(j).getPatientMID() + \"\").equals(patientList.get(i))) {\n\t\t\t\t\t\titsThere = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!itsThere) {\n\t\t\t\t\tdataList.add(new RemoteMonitoringDataBean(Long.parseLong(patientList.get(i))));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn dataList;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\tpublic List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry{\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setTimestamp(2, new Timestamp(lower.getTime()));\n\t\t\t// add 1 day's worth to include the upper\n\t\t\tps.setTimestamp(3, new Timestamp(upper.getTime() + 1000L * 60L * 60 * 24L));\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tList<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\n\t\t\treturn dataList;\n\t\t}catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Store data for a given patient in the RemoteMonitoringData table\n\t * \n\t * @param patientMID The MID of the patient\n\t * @param systolicBloodPressure The systolic blood pressure of the patient\n\t * @param diastolicBloodPressure The diastolic blood pressure of the patient\n\t * @param glucoseLevel The glucose level of the patient\n\t * @param reporterRole  The role of the person that reported these monitoring stats\n\t * @param reporterMID  The MID of the person that reported these monitoring stats\n\t * @throws DBException\n\t */\n\tpublic void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel, String reporterRole, long reporterMID)\n\t\t\tthrows DBException, iTrustException {\n\t\tif(getNumberOfDailyEntries(patientMID) >= 10)\n\t\t\tthrow new iTrustException(\"Patient entries for today cannot exceed 10.\");\n\t\t\n\t\tif(reporterRole.equals(\"patient representative\"))\n\t\t\tvalidatePR(reporterMID, patientMID);\n\t\t\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, \"\n\t\t\t\t\t+ \"diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?)\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setLong(2, systolicBloodPressure);\n\t\t\tps.setInt(3, diastolicBloodPressure);\n\t\t\tps.setInt(4, glucoseLevel);\n\t\t\tps.setString(5, reporterRole);\n\t\t\tps.setLong(6, reporterMID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Store data for a given patient in the RemoteMonitoringData table\n\t * \n\t * @param patientMID The MID of the patient\n\t * @param systolicBloodPressure The systolic blood pressure of the patient\n\t * @param diastolicBloodPressure The diastolic blood pressure of the patient\n\t * @param glucoseLevel The glucose level of the patient\n\t * @param reporterRole  The role of the person that reported these monitoring stats\n\t * @param reporterMID  The MID of the person that reported these monitoring stats\n\t * @throws DBException\n\t */\n\tpublic void storePatientData(long patientMID, int glucoseLevel, String reporterRole, long reporterMID)\n\t\t\tthrows DBException, iTrustException {\n\t\tif(getNumberOfDailyEntries(patientMID) >= 10)\n\t\t\tthrow new iTrustException(\"Patient entries for today cannot exceed 10.\");\n\t\t\n\t\tif(reporterRole.equals(\"patient representative\"))\n\t\t\tvalidatePR(reporterMID, patientMID);\n\t\t\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?)\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setInt(2, glucoseLevel);\n\t\t\tps.setString(3, reporterRole);\n\t\t\tps.setLong(4, reporterMID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Store data for a given patient in the RemoteMonitoringData table\n\t * \n\t * @param patientMID The MID of the patient\n\t * @param systolicBloodPressure The systolic blood pressure of the patient\n\t * @param diastolicBloodPressure The diastolic blood pressure of the patient\n\t * @param glucoseLevel The glucose level of the patient\n\t * @param reporterRole  The role of the person that reported these monitoring stats\n\t * @param reporterMID  The MID of the person that reported these monitoring stats\n\t * @throws DBException\n\t */\n\tpublic void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, String reporterRole, long reporterMID)\n\t\t\tthrows DBException, iTrustException {\n\t\tif(getNumberOfDailyEntries(patientMID) >= 10)\n\t\t\tthrow new iTrustException(\"Patient entries for today cannot exceed 10.\");\n\t\t\n\t\tif(reporterRole.equals(\"patient representative\"))\n\t\t\tvalidatePR(reporterMID, patientMID);\n\t\t\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, \"\n\t\t\t\t\t+ \"diastolicBloodPressure, ReporterRole, ReporterID) VALUES(?,?,?,?,?)\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setLong(2, systolicBloodPressure);\n\t\t\tps.setInt(3, diastolicBloodPressure);\n\t\t\tps.setString(4, reporterRole);\n\t\t\tps.setLong(5, reporterMID);\n\t\t\tps.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Private method to get the number of entries for a certain patientID for today.\n\t * @param patientMID\n\t * @return the number of entries\n\t * @throws DBException\n\t */\n\tprivate int getNumberOfDailyEntries(long patientMID) throws DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tList<RemoteMonitoringDataBean> patients = loader.loadList(rs);\n\t\t\treturn patients.size();\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\tpublic void validatePR(long representativeMID, long patientMID)\n\t\t\tthrows iTrustException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\n\t\t\tps.setLong(1, representativeMID);\n\t\t\tps.setLong(2, patientMID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif(!rs.next()) //no rows\n\t\t\t\tthrow new iTrustException(\"Representer is not valid for patient \" + patientMID);\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Add a patient to the list of HCPs' monitoring lists of Patients\n\t * \n\t * @param patientMID The MID of the patient\n\t * @param HCPMID The MID of the HCP\n\t * @return true if added successfully, false if already in list\n\t */\n\tpublic boolean addPatientToList(long patientMID, long HCPMID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setLong(2, HCPMID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif(rs.next())\n\t\t\t\treturn false;\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringLists(PatientMID, HCPMID) VALUES(?,?)\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setLong(2, HCPMID);\n\t\t\tps.executeUpdate();\n\t\t\treturn true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Remove a patient from the list of HCPs' monitoring lists of Patients\n\t * \n\t * @param patientMID The MID of the patient\n\t * @param HCPMID The MID of the HCP\n\t * @return true if removed successfully, false if not in list\n\t */\n\tpublic boolean removePatientFromList(long patientMID, long HCPMID) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\t/*ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringList WHERE PatientMID = ? AND HCPMID = ?\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setLong(2, HCPMID);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif(!rs.next())\n\t\t\t\treturn false;*/\n\t\t\tps = conn.prepareStatement(\"DELETE FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?\");\n\t\t\tps.setLong(1, patientMID);\n\t\t\tps.setLong(2, HCPMID);\n\t\t\tif(ps.executeUpdate() == 0)\n\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d0c"},"name":"WebRoot/auth/hcp/editPatientList.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0b"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.action.EditMonitoringListAction\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Edit Patient List\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n/* Require a Patient ID first */\nString pidString = (String)session.getAttribute(\"pid\");\nString addOrRemove = \"Add\";\nif (pidString == null || 1 > pidString.length() || \"false\".equals(request.getParameter(\"confirmAction\"))) {\n\tsession.removeAttribute(\"pid\");\n\tresponse.sendRedirect(\"/iTrust/auth/getPatientID.jsp?forward=hcp/editPatientList.jsp\");\n   \treturn;\n}\n//else {\n//\tsession.removeAttribute(\"pid\");\n//}\n\t\nEditMonitoringListAction action = new EditMonitoringListAction(prodDAO,loggedInMID.longValue());\nlong pid = Long.parseLong(pidString);\nString patientName = action.getPatientName(pid);\nif (action.isPatientInList(pid)) {\n\taddOrRemove = \"Remove\";\n}\nString confirm = \"\";\nboolean conf_bool = false;\n\nif (\"true\".equals(request.getParameter(\"confirmAction\"))) {\n\tif(addOrRemove.equals(\"Add\")) {\n\t\tconf_bool = action.addToList(pid);\n\t\tif(conf_bool)\n\t\t\tconfirm = \"Patient \" + patientName + \" Added\";\n\t} else {\n\t\tconf_bool = action.removeFromList(pid);\n\t\tif(conf_bool)\n\t\t\tconfirm = \"Patient \" + patientName + \" Removed\";\n\t}\n\t\n\tsession.removeAttribute(\"pid\");\n\t\n}\n\nif (!\"\".equals(confirm)) {\n%>\n\t<div align=center>\n\t\t<span class=\"iTrustMessage\"><%=confirm%></span>\n\t</div>\n<%\n} else {\n%>\n\n<br />\n\n<form action=\"editPatientList.jsp\" method=\"post\">\n\t<input type=\"hidden\" name=\"confirmAction\" value=\"true\"></input>\n\t<input type=\"submit\" value=\"<%=addOrRemove %> <%=patientName %>\">\n\t<input type=\"submit\" value=\"Choose Different Patient\" onClick=\"javascript:differentPatient();\">\n</form>\n\n<script type=\"text/javascript\">\n\nfunction differentPatient() {\n\tdocument.getElementsByName(\"confirmAction\")[0].value=\"false\";\n\tdocument.forms[0].submit();\n}\n\n</script>\n\n<%\n}\n%>\n<br />\n<br />\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d0d"},"name":"src/edu/ncsu/csc/itrust/action/EditMonitoringListAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0b"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Handles changes (adds and removes) to the monitoring list for a certain HCP.\n * \n */\npublic class EditMonitoringListAction {\n\tprivate RemoteMonitoringDAO rmDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the HCP editing their monitoring list.\n\t */\n\tpublic EditMonitoringListAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.rmDAO = factory.getRemoteMonitoringDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t}\n\n\t/**\n\t * Adds a patient to the current HCP's remote monitoring list\n\t * \n\t * @param patientMID the patient\n\t * @return true if added successfully. False if already in list.\n\t * @throws DBException\n\t */\n\tpublic boolean addToList(long patientMID) throws DBException {\n\t\ttransDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID, patientMID, \"add\");\n\t\treturn rmDAO.addPatientToList(patientMID, loggedInMID);\n\t}\n\t\n\t/**\n\t * Removes a patient from the current HCP's remote monitoring list\n\t * \n\t * @param patientMID the patient\n\t * @return true if removed successfully. False if not in list.\n\t * @throws DBException\n\t */\n\tpublic boolean removeFromList(long patientMID) throws DBException {\n\t\ttransDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID, patientMID, \"delete\");\n\t\treturn rmDAO.removePatientFromList(patientMID, loggedInMID);\n\t}\n\t\n\t/**\n\t * Returns whether a patient is in an HCP's list already\n\t * @param patientMID the patient\n\t * @return true if in DB, false otherwise\n\t * @throws DBException\n\t */\n\tpublic boolean isPatientInList(long patientMID) throws DBException {\n\t\tList<RemoteMonitoringDataBean> dataset = rmDAO.getPatientsData(loggedInMID);\n\t\tfor(RemoteMonitoringDataBean d: dataset) {\n\t\t\tif(d.getPatientMID() == patientMID)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * returns the patient name\n\t * \n\t * @return patient name\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic String getPatientName(long pid) throws DBException, iTrustException {\n\t\treturn authDAO.getUserName(pid);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d0f"},"name":"WebRoot/auth/patient/addTelemedicineData.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d19"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.EditRepresentativesAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"java.util.List\"%>\n\n<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Report Status\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\n/* Require a Patient ID first */\nlong patientMID;\nboolean representativeReporting = false;\nString reportingFor = (String)request.getParameter(\"reportingFor\");\nif(reportingFor == null || 1 > reportingFor.length() || reportingFor.equals(\"null\")) {\n\tpatientMID = loggedInMID.longValue(); //If self-reporting\n} else {\n\tpatientMID = Long.parseLong(reportingFor);\n\trepresentativeReporting = true;\n}\n\n\n\tAddRemoteMonitoringDataAction action = new AddRemoteMonitoringDataAction(\n\t\t\tprodDAO, loggedInMID.longValue(), patientMID);\n\n\t/* Update information */\n\tboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n\t\t\t&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\t\n\tif (formIsFilled) {\n\t\ttry {\n\t\t\tif (request.getParameter(\"glucoseLevel\") == null || \"\".equals(request.getParameter(\"glucoseLevel\"))){\n\t\t\t\taction.addRemoteMonitoringData(Integer.parseInt(request.getParameter(\"systolicBloodPressure\")), \n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"diastolicBloodPressure\")));\n\t\t\t} else if (request.getParameter(\"systolicBloodPressure\") == null || \"\".equals(request.getParameter(\"systolicBloodPressure\"))){\n\t\t\t\taction.addRemoteMonitoringData(Integer.parseInt(request.getParameter(\"glucoseLevel\")));\n\t\t\t} else {\n\t\t\t\taction.addRemoteMonitoringData(\n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"systolicBloodPressure\")),\n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"diastolicBloodPressure\")),\n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"glucoseLevel\")));\n\t\t\t}\n\t\t\t\n%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustMessage\">Information Successfully Added</span>\n\t\t</div>\n<%\n\t\t} catch (FormValidationException e) {\n\t\t\tformIsFilled = false;\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t} catch(NumberFormatException e) {\n\t\t\tformIsFilled = false;\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\">Invalid entry: <%=e.getMessage() %>. Please enter a whole number.</span>\n\t\t\t</div>\n<%\n\t\t}\n\t}\n\tif(!formIsFilled) {\n%>\n\n<form action=\"addTelemedicineData.jsp\" method=\"post\">\n<input type=\"hidden\" name=\"formIsFilled\" value=\"true\">\n<input type=\"hidden\" name=\"reportingFor\" value=\"<%=(String)request.getParameter(\"reportingFor\")%>\">\n<br />\n<table cellspacing=0 align=center cellpadding=0>\n\t<tr><th>\n\t<%=(patientMID == loggedInMID.longValue()) ? \"Self-Reporting\":\"Report for \" + action.getPatientName(patientMID) %>\n\t</th></tr>\n\t<tr>\n\t\t<td valign=top>\n\t\t<table class=\"fTable\" align=center style=\"width: 350px;\">\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Systolic Blood Pressure:</td>\n\t\t\t\t<td><input name=\"systolicBloodPressure\" value=\"\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Diastolic Blood Pressure:</td>\n\t\t\t\t<td><input name=\"diastolicBloodPressure\" value=\"\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Glucose Level:</td>\n\t\t\t\t<td><input name=\"glucoseLevel\" value=\"\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t\n\t\t</table>\n\t\t</td>\n\t\t<td width=\"15px\">&nbsp;</td>\n\t\t<td valign=top>\n\t\t\n\t\t</td>\n\t</tr>\n</table>\n<br />\n<div align=\"center\"><input type=\"submit\" name=\"action\"\n\tstyle=\"font-weight: bold;\" value=\"Report\">\n\n<br />\n<br />\n<br />\n<%\n\t\tif(!representativeReporting) {\n%>\n<table class=\"fTable\" align=center>\n\t<th>Patient Representative Reporting</th>\n\t\t<%\n\t\t\tEditRepresentativesAction repsAction = new EditRepresentativesAction(\n\t\t\t\t\tprodDAO, 0L, Long.toString(patientMID));\n\t\t\tList<PatientBean> patients = repsAction.getRepresented(patientMID);\n\t\t\tif(patients.size() == 0) {\n\t\t\t\t%>\n\t\t\t\t<tr class=\"subHeader\">\n\t\t\t\t\t<th>No Patients Represented</th>\n\t\t\t\t</tr>\n\t\t\t\t<%\n\t\t\t} else {\n\t\t\t\t%>\n\t\t\t\t<tr class=\"subHeader\">\n\t\t\t\t\t<th>Patient</th>\n\t\t\t\t</tr>\n\t\t\t\t<%\n\t\t\t}\n\t\t\tfor(PatientBean p : patients) {\n\t\t\t\t%>\n\t\t\t\t<tr><td><a href=\"#\" onclick=\"javascript:document.getElementsByName('formIsFilled')[0].value='false';document.getElementsByName('reportingFor')[0].value='<%=p.getMID()%>';document.forms[0].submit();\"><%=p.getFullName() %></a></td></tr>\n\t\t\t\t<%\n\t\t\t}\n\t\t\t\n\t\t%>\n\t\n</table>\n</div>\n</form>\n\n\t<%\n\t\t}\n\t}\n\t%>\n<br />\n<br />\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d10"},"name":"src/edu/ncsu/csc/itrust/action/AddRemoteMonitoringDataAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d0e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d16"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d19"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator;\n\n/**\n * Handles adding remote monitoring patient data to the database\n * \n */\npublic class AddRemoteMonitoringDataAction {\n\tprivate RemoteMonitoringDataBeanValidator validator = new RemoteMonitoringDataBeanValidator();\n\tprivate RemoteMonitoringDAO rmDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\tprivate long patientMID;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person recording the patient's data.\n\t * @param patientMID The MID of the patient\n\t */\n\tpublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.rmDAO = factory.getRemoteMonitoringDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tthis.patientMID = patientMID;\n\t}\n\n\t/**\n\t * Adds a patients remote monitoring data to the database.\n\t * \n\t * @param glucoseLevel\n\t * @throws DBException\n\t */\n\tpublic void addRemoteMonitoringData(int glucoseLevel)\n\t  throws DBException, FormValidationException,iTrustException {\n\t\t//Validation - Only need to validate the three integer parameters\n\t\tRemoteMonitoringDataBean m = new RemoteMonitoringDataBean();\n\t\tm.setGlucoseLevel(glucoseLevel);\n\t\tm.setDiastolicBloodPressure(60);\n\t\tm.setSystolicBloodPressure(60);\n\t\tvalidator.validate(m);\n\t\tm.setDiastolicBloodPressure(-1);\n\t\tm.setSystolicBloodPressure(-1);\n\t\t//Log transaction\n\t\ttransDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\n\t\tString role;\n\t\tif (loggedInMID == patientMID){\n\t\t\trole = \"self-reported\";\n\t\t} else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")){\n\t\t\trole = \"case-manager\";\n\t\t} else {\n\t\t\trole = \"patient representative\";\n\t\t}\t\t\n\t\t//Store in DB\n\t\trmDAO.storePatientData(patientMID, glucoseLevel, role, loggedInMID);\n\t}\n\t\n\t/**\n\t * Adds a patients remote monitoring data to the database.\n\t * \n\t * @param systolicBloodPressure\n\t * @param diastolicBloodPressure\n\t * @throws DBException\n\t */\n\tpublic void addRemoteMonitoringData(int systolicBloodPressure, int diastolicBloodPressure)\n\t  throws DBException, FormValidationException,iTrustException {\n\t\t//Validation - Only need to validate the three integer parameters\n\t\tRemoteMonitoringDataBean m = new RemoteMonitoringDataBean();\n\t\tm.setSystolicBloodPressure(systolicBloodPressure);\n\t\tm.setDiastolicBloodPressure(diastolicBloodPressure);\n\t\tvalidator.validate(m);\n\t\t\n\t\t//Log transaction\n\t\ttransDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\n\t\tString role;\n\t\tif (loggedInMID == patientMID){\n\t\t\trole = \"self-reported\";\n\t\t} else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")){\n\t\t\trole = \"case-manager\";\n\t\t} else {\n\t\t\trole = \"patient representative\";\n\t\t}\t\t\n\t\t//Store in DB\n\t\trmDAO.storePatientData(patientMID, systolicBloodPressure, diastolicBloodPressure, role, loggedInMID);\n\t}\n\t\n\t/**\n\t * Adds a patients remote monitoring data to the database.\n\t * \n\t * @param systolicBloodPressure\n\t * @param diastolicBloodPressure\n\t * @param glucoseLevel\n\t * @throws DBException\n\t */\n\tpublic void addRemoteMonitoringData(int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel)\n\t  throws DBException, FormValidationException,iTrustException {\n\t\t//Validation - Only need to validate the three integer parameters\n\t\tRemoteMonitoringDataBean m = new RemoteMonitoringDataBean();\n\t\tm.setSystolicBloodPressure(systolicBloodPressure);\n\t\tm.setDiastolicBloodPressure(diastolicBloodPressure);\n\t\tm.setGlucoseLevel(glucoseLevel);\n\t\tvalidator.validate(m);\n\t\t\n\t\t//Log transaction\n\t\ttransDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\n\t\tString role;\n\t\tif (loggedInMID == patientMID){\n\t\t\trole = \"self-reported\";\n\t\t} else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")){\n\t\t\trole = \"case-manager\";\n\t\t} else {\n\t\t\trole = \"patient representative\";\n\t\t}\t\t\n\t\t//Store in DB\n\t\trmDAO.storePatientData(patientMID, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, role, loggedInMID);\n\t}\n\t\n\t/**\n\t * returns the patient name\n\t * \n\t * @return patient name\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic String getPatientName(long pid) throws DBException, iTrustException {\n\t\treturn authDAO.getUserName(pid);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d12"},"name":"WebRoot/auth/hcp/monitorPatients.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d11"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\" %>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\" %>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Monitor Patients\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nsession.removeAttribute(\"patientList\");\n\nViewMyRemoteMonitoringListAction action = new ViewMyRemoteMonitoringListAction(prodDAO, loggedInMID.longValue());\nList<RemoteMonitoringDataBean> data = action.getPatientsData();\nsession.setAttribute(\"patientList\", data);\n\nPatientDAO patDAO = prodDAO.getPatientDAO();\nPersonnelDAO persDAO = prodDAO.getPersonnelDAO();\n%>\n<br />\n\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"6\">Patient Data</th>\n\t</tr>\n\n\t<tr class=\"subHeader\">\n\t\t<th width=\"20%\">Patient</th>\n\t\t<th width=\"20%\">Date</th>\n\t\t<th>Systolic Blood Pressure</th>\n\t\t<th>Diastolic Blood Pressure</th>\n\t\t<th>Glucose Level</th>\n\t\t<th>Reporter</th>\n\n\t</tr>\n\t<%\n\t\tString highlight = \"\";\n\t\tString reporterName = \"\";\n\t\tint index = 0;\n\t\tfor (RemoteMonitoringDataBean bean : data) {\n\t\t\treporterName = \"\";\n\t\t\tif(bean.getTime() == null) {\n\t\t\t\thighlight = \"#ff6666\";\n\t\t\t} else if(((bean.getSystolicBloodPressure() != -1) && (bean.getSystolicBloodPressure() < 90 || bean.getSystolicBloodPressure() > 140))\n\t\t\t\t\t|| ((bean.getDiastolicBloodPressure() != -1) && (bean.getDiastolicBloodPressure() < 60 || bean.getDiastolicBloodPressure() > 90))\n\t\t\t\t\t|| ((bean.getGlucoseLevel() != -1 ) && (bean.getGlucoseLevel() < 70 || bean.getGlucoseLevel() > 150))) {\n\t\t\t\thighlight = \"#ffff00\";\n\t\t\t\treporterName = authDAO.getUserName(bean.getReporterMID());\n\t\t\t} else {\n\t\t\t\thighlight = \"\";\n\t\t\t\treporterName = authDAO.getUserName(bean.getReporterMID());\n\t\t\t}\n\t%>\n\t<tr bgcolor=\"<%=highlight %>\">\n\t\t<td ><a href=\"/iTrust/auth/hcp/viewAdditionalInfo.jsp?patient=<%=index%>\"><%=action.getPatientName(bean.getPatientMID()) + \" (MID \" + bean.getPatientMID() + \")\"%></a></td>\n\t\t<td ><%=bean.getTime() != null ? bean.getTime(): \"No Information Provided\"%></td>\n\t\t<td ><%=(bean.getTime() != null && bean.getSystolicBloodPressure() != -1) ? bean.getSystolicBloodPressure(): \"\"%></td>\n\t\t<td ><%=(bean.getTime() != null && bean.getDiastolicBloodPressure() != -1) ? bean.getDiastolicBloodPressure(): \"\"%></td>\n\t\t<td ><%=(bean.getTime() != null && bean.getGlucoseLevel() != -1) ? bean.getGlucoseLevel(): \"\"%></td>\n\t\t<td><%=reporterName%></td>\n\t</tr>\n\t<%\n\t\t\tindex++;\n\t\t}\n\t%>\n</table>\n<br />\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d13"},"name":"src/edu/ncsu/csc/itrust/action/ViewMyRemoteMonitoringListAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d11"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d14"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d16"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Handles retrieving the patient data for a certain HCP as used by viewTelemedicineData.jsp\n * \n */\npublic class ViewMyRemoteMonitoringListAction {\n\tprivate RemoteMonitoringDAO rmDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the HCP retrieving the patient data.\n\t */\n\tpublic ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.rmDAO = factory.getRemoteMonitoringDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t}\n\n\t/**\n\t * Returns a list of RemoteMonitoringDataBeans for the logged in HCP\n\t * \n\t * @return list of TransactionBeans\n\t * @throws DBException\n\t * @throws FormValidationException\n\t */\n\tpublic List<RemoteMonitoringDataBean> getPatientsData() throws DBException {\n\t\t\n\t\ttransDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\n\t\treturn rmDAO.getPatientsData(loggedInMID);\n\t\t\n\t}\n\t\n\t/**\n\t * Returns a list of RemoteMonitoringDataBeans for the logged in HCP\n\t * \n\t * @return list of TransactionBeans\n\t * @throws DBException\n\t * @throws FormValidationException\n\t */\n\tpublic List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, String startDate, String endDate) throws DBException,FormValidationException {\n\t\tDate lower;\n\t\tDate upper;\n\t\ttry {\n\t\t\tlower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\n\t\t\tupper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(endDate);\n\t\t\tif (lower.after(upper))\n\t\t\t\tthrow new FormValidationException(\"Start date must be before end date!\");\n\t\t} catch (ParseException e) {\n\t\t\tthrow new FormValidationException(\"Enter dates in MM/dd/yyyy\");\n\t\t}\t\t\n\t\t\n\t\ttransDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\n\t\treturn rmDAO.getPatientDataByDate(patientMID, lower, upper);\n\t\t\n\t}\n\t\n\tpublic List<RemoteMonitoringDataBean> getPatientDataWithoutLogging() throws DBException {\n\t\treturn rmDAO.getPatientsData(loggedInMID);\n\t}\n\t\n\t/**\n\t * returns the patient name\n\t * \n\t * @return patient name\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic String getPatientName(long pid) throws DBException, iTrustException {\n\t\treturn authDAO.getUserName(pid);\n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d15"},"name":"WebRoot/auth/hcp/viewAdditionalInfo.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d14"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.Date\"%>\n<%@page import=\"java.text.SimpleDateFormat\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\" %>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - View Additional Info\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nint patientIndex = 0;\nif(request.getParameter(\"patient\") != null){\n\tString patient = request.getParameter(\"patient\");\n\tsession.setAttribute(\"patient\", patient);\n\tpatientIndex = Integer.parseInt(patient);\n}\nelse{\n\tString patient = (String) session.getAttribute(\"patient\");\n\tpatientIndex = Integer.parseInt(patient);\n}\nList<RemoteMonitoringDataBean> patientList = (List<RemoteMonitoringDataBean>) session.getAttribute(\"patientList\");\nRemoteMonitoringDataBean rmdb = patientList.get(patientIndex);\nPatientDAO patDAO = prodDAO.getPatientDAO();\nlong patientMID = rmdb.getPatientMID();\nPatientBean p = patDAO.getPatient(patientMID);\n\nViewMyRemoteMonitoringListAction listAction = new ViewMyRemoteMonitoringListAction(prodDAO,loggedInMID.longValue());\nString startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\nString endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\nif(\"date\".equals(request.getParameter(\"sortBy\"))) {\n\tstartDate = request.getParameter(\"startDate\");\n\tendDate = request.getParameter(\"endDate\");\n%>\n\t<br />\n\t<table class=\"fTable\" align=\"center\">\n\t\t<tr>\n\t\t\t<th colspan=\"2\">Patient Details</th>\n\t\t</tr>\n\t\t<tr >\n\t\t\t<td class=\"subHeaderVertical\">Name:</td>\n\t\t\t<td><%=p.getFullName()%></td>\n\t\t</tr>\n\t\t<tr >\n\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t<td><%=p.getPhone()%></td>\n\t\t</tr>\n\t</table>\n\t<br />\n<%\n\tList<PatientBean> patientRepresentatives = patDAO.getRepresenting(patientMID);\n%>\n\t<br />\n\t<table class=\"fTable\" align=\"center\">\n\t\t<tr>\n\t\t\t<th colspan=\"4\">Patient's Representatives</th>\n\t\t</tr>\n<%\n\tif(patientRepresentatives.isEmpty()){\n%>\n\t\t<tr>\n\t\t\t<td>This patient has no representatives.</td>\n\t\t</tr>\n<%\n\t}\n\tfor(PatientBean pat : patientRepresentatives){\n%>\n\t\t<tr>\n\t\t\t<td class=\"subHeaderVertical\">Name:</td>\n\t\t\t<td><%=pat.getFullName()%></td>\n\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t<td><%=pat.getPhone()%></td>\n\t\t</tr>\n<%\n\t}\n%>\n\t</table>\n\t<br />\n\t<br />\n\t<table class=\"fTable\" align=\"center\">\n\t\t<tr>\n\t\t\t<th colspan=\"5\">Patient Monitoring Statistics</th>\n\t\t</tr>\n\t\t<tr class=\"subHeader\">\n\t\t\t<th width=\"20%\">Date</th>\n\t\t\t<th>Systolic Blood Pressure</th>\n\t\t\t<th>Diastolic Blood Pressure</th>\n\t\t\t<th>Glucose Level</th>\n\t\t\t<th>Reporter</th>\n\t\t</tr>\n<%\n\tList<RemoteMonitoringDataBean> patientStats = listAction.getPatientDataByDate(patientMID, startDate, endDate);\n\tif(patientStats.isEmpty()){\n%>\n\t\t<tr bgcolor=\"#ff6666\">\n\t\t\t<td><b>No Information Provided</b></td>\n\t\t\t<td><b>No Information Provided</b></td>\n\t\t\t<td><b>No Information Provided</b></td>\n\t\t\t<td><b>No Information Provided</b></td>\n\t\t\t<td><b>No Information Provided</b></td>\n\t\t</tr>\n<%\n\t}\n\tString highlight = \"\";\n\tString reporterName = \"\";\n\tfor(RemoteMonitoringDataBean stats : patientStats){\n\t\thighlight = \"\";\n\t\tint sysBP = stats.getSystolicBloodPressure();\n\t\tint diasBP = stats.getDiastolicBloodPressure();\n\t\tint gluLvl = stats.getGlucoseLevel();\n\t\t\n\t\tif(((sysBP != -1) && (sysBP < 90 || sysBP > 140)) || ((diasBP != -1) && (diasBP < 60 || diasBP > 90)) || ((gluLvl != -1) && (gluLvl < 70 || gluLvl > 150))) {\n\t\t\thighlight = \"#ffff00\";\n\t\t}\n\t\t\n\t\treporterName = authDAO.getUserName(stats.getReporterMID());\t\t\n%>\n\t\t<tr bgcolor=\"<%=highlight%>\">\n\t\t\t<td><%=stats.getTime()%></td>\n\t\t\t<td><%=sysBP == -1?\"\":sysBP%></td>\n\t\t\t<td><%=diasBP == -1?\"\":diasBP%></td>\n\t\t\t<td><%=gluLvl == -1?\"\":gluLvl%></td>\n\t\t\t<td><%=reporterName%></td>\n\t\t</tr>\n<%\n\t}\n%>\n\t</table>\n\t<br />\n<%\n} else{\n%>\n\n<form action=\"viewAdditionalInfo.jsp\" id=datebuttons style=\"display: inline;\" method=\"post\">\n<input type=\"hidden\" name=\"sortBy\" value=\"date\"></input>\n<div align=center>\n<table class=\"fTable\" align=\"center\">\n\t<tr class=\"subHeader\">\n\t\t<td>Start Date:</td>\n\t\t<td>\n\t\t\t<input name=\"startDate\" value=\"<%=startDate%>\" size=\"10\">\n\t\t\t<input type=button value=\"Select Date\" onclick=\"displayDatePicker('startDate');\">\n\t\t</td>\n\t\t<td>End Date:</td>\n\t\t<td>\n\t\t\t<input name=\"endDate\" value=\"<%=endDate%>\">\n\t\t\t<input type=button value=\"Select Date\" onclick=\"displayDatePicker('endDate');\">\n\t\t</td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" name=\"submit\" value=\"Get Records\" onclick=\"javascript:sortBy();\">\n</div>\n</form>\n<%\n}\n%>\n\n<script type='text/javascript'>\nfunction sortBy() {\n\tdocument.getElementsByName('sortBy')[0].value = \"date\";\n\tdocument.forms[0].submit.click();\n}\n</script>\n\n<%@include file=\"/footer.jsp\"%>"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d17"},"name":"WebRoot/auth/uap/getPatientMonitorList.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d16"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - View Monitored Patients\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nViewMyRemoteMonitoringListAction action = new ViewMyRemoteMonitoringListAction(prodDAO, loggedInMID.longValue());\nList<RemoteMonitoringDataBean> data = action.getPatientDataWithoutLogging();\n%>\n<br />\n\n<form action=\"getPatientMonitorList.jsp\" method=\"post\" name=\"myform\">\n<table class=\"fTable\" align=\"center\">\n\t<tr>\n\t\t<th colspan=\"3\">Patients</th>\n\t</tr>\n\n\t<tr class=\"subHeader\">\n\t\t<th>Patient</th>\n\n\t</tr>\n\t<%\n\t\tList<Long> patients = new ArrayList<Long>();\n\t\tint index = 0;\n\t\tfor (RemoteMonitoringDataBean bean : data) {\n\t\t\tif (!patients.contains(bean.getPatientMID())){\n\t\t\t\tpatients.add(bean.getPatientMID());\n\t\t\t\n\t%>\n\t<tr>\n\t\t<td >\n\t\t\t<a href=\"addTelemedicineData.jsp?patient=<%=index%>\">\n\t\t\n\t\t\n\t\t\t<%=action.getPatientName(bean.getPatientMID())%>\t\n\t\t\n\t\t\n\t\t\t</a>\n\t\t\t</td>\n\t</tr>\n\t<%\n\t\t\tindex ++;\n\t\t\t}\n\t\t}\n\t\tsession.setAttribute(\"patients\", patients);\n\t%>\n</table>\n</form>\n<br />\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d18"},"name":"WebRoot/auth/uap/addTelemedicineData.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d16"}]],"contents":"<%@page import=\"java.util.List\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction\"%>\n\n<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Report Status\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nString switchString = \"\";\nif (request.getParameter(\"switch\") != null) {\n\tswitchString = request.getParameter(\"switch\");\n}\n\nString patientString = \"\";\nif (request.getParameter(\"patient\") != null) {\n\tpatientString = request.getParameter(\"patient\");\n}\n\nString pidString;\nif (switchString.equals(\"true\")) pidString = \"\";\nelse if (!patientString.equals(\"\")) {\n\tint patientIndex = Integer.parseInt(patientString);\n\tList<Long> patients = (List<Long>) session.getAttribute(\"patients\");\n\tpidString = \"\" + patients.get(patientIndex);\n\tsession.removeAttribute(\"patients\");\n\tsession.removeAttribute(\"patient\");\n\tsession.setAttribute(\"pid\", pidString);\n}\nelse pidString = (String)session.getAttribute(\"pid\");\n\nif (pidString == null || 1 > pidString.length()) {\n\tresponse.sendRedirect(\"../uap/getPatientMonitorList.jsp?forward=uap/addTelemedicineData.jsp\");\n   \treturn;\n}\n\tAddRemoteMonitoringDataAction action = new AddRemoteMonitoringDataAction(\n\t\t\tprodDAO, loggedInMID.longValue(),Long.parseLong(pidString));\n\n\t/* Update information */\n\tboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n\t\t\t&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\t\n\tif (formIsFilled) {\n\t\ttry {\n\t\t\tif (request.getParameter(\"glucoseLevel\") == null || \"\".equals(request.getParameter(\"glucoseLevel\"))){\n\t\t\t\taction.addRemoteMonitoringData(Integer.parseInt(request.getParameter(\"systolicBloodPressure\")), \n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"diastolicBloodPressure\")));\n\t\t\t} else if (request.getParameter(\"systolicBloodPressure\") == null || \"\".equals(request.getParameter(\"systolicBloodPressure\"))){\n\t\t\t\taction.addRemoteMonitoringData(Integer.parseInt(request.getParameter(\"glucoseLevel\")));\n\t\t\t} else {\n\t\t\t\taction.addRemoteMonitoringData(\n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"systolicBloodPressure\")),\n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"diastolicBloodPressure\")),\n\t\t\t\t\t\tInteger.parseInt(request.getParameter(\"glucoseLevel\")));\n\t\t\t}\n\t\t\t\n%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustMessage\">Information Successfully Added</span>\n\t\t</div>\n<%\n\tsession.removeAttribute(\"pid\");\n\t\t} catch (FormValidationException e) {\n\t\t\tformIsFilled = false;\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t} catch(NumberFormatException e) {\n\t\t\tformIsFilled = false;\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\">Invalid entry: <%=e.getMessage() %>. Please enter a whole number.</span>\n\t\t\t</div>\n<%\n\t\t}\n\t}\n\tif(!formIsFilled) {\n%>\n\n<form action=\"addTelemedicineData.jsp\" method=\"post\">\n<input type=\"hidden\" name=\"formIsFilled\" value=\"true\">\n<br />\n<table cellspacing=0 align=center cellpadding=0>\n\t<tr>\n\t\t<td valign=top>\n\t\t<table class=\"fTable\" align=center style=\"width: 350px;\">\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Systolic Blood Pressure:</td>\n\t\t\t\t<td><input name=\"systolicBloodPressure\" value=\"\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Diastolic Blood Pressure:</td>\n\t\t\t\t<td><input name=\"diastolicBloodPressure\" value=\"\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Glucose Level:</td>\n\t\t\t\t<td><input name=\"glucoseLevel\" value=\"\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t\n\t\t</table>\n\t\t</td>\n\t\t<td width=\"15px\">&nbsp;</td>\n\t\t<td valign=top>\n\t\t\n\t\t</td>\n\t</tr>\n</table>\n<br />\n<div align=\"center\"><input type=\"submit\" name=\"action\"\n\tstyle=\"font-weight: bold;\" value=\"Report\">\n\t\n\t<%\n\t}\n\t%>\n<br />\n<br />\n</div>\n</form>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d1b"},"name":"WebRoot/auth/patient/reportAdverseEvent.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1a"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1e"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.action.ReportAdverseEventAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.AdverseEventBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HCPLinkBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import= \"java.util.ArrayList\"%>\n\n<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Report Adverse Event\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nReportAdverseEventAction action;\n\n\nif(request.getParameter(\"Comment\") != (null) && session.getAttribute(\"HCPMID\") == null){\n\tList<HCPLinkBean> linkList = new ArrayList<HCPLinkBean>();\n\tlinkList = (List<HCPLinkBean>) session.getAttribute(\"beanlist\");\n\tList<AdverseEventBean> adverseList = new ArrayList<AdverseEventBean>();\n\tboolean bad = false;\n\tfor(HCPLinkBean lBean : linkList){\n\t\tif (lBean.isChecked()){\n\t\t\taction = new ReportAdverseEventAction(\"\" + lBean.getPrescriberMID(), prodDAO, loggedInMID.longValue());\n\t\t\tAdverseEventBean aeBean = new AdverseEventBean();\n\t\t\taeBean.setMID(\"\"+loggedInMID);\n\t\t\taeBean.setDescription(request.getParameter(\"Comment\"));\n\t\t\taeBean.setDrug(\"\"+lBean.getDrug());\n\t\t\taeBean.setCode(\"\"+lBean.getCode());\n\t\t\taeBean.setPrescriber(\"\" + lBean.getPrescriberMID());\n\t\t\tadverseList.add(aeBean);\n\t\t\t\n\t\t\tString msg = action.addReport(aeBean);\n\t\t\t\n\t\t\tif(!msg.equals(\"\")){\n\t\t\t\tbad = true;\n\t\t\t\t\n\t\t\t\t%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=msg %></span>\n\t\t\t</div>\n\t\t\t<%\n\t\t\t}\n\t\t}\n\t}\n\taction = new ReportAdverseEventAction(prodDAO, loggedInMID.longValue());\n\taction.sendMails(adverseList);\n\tif(!bad){\n\t\tresponse.sendRedirect(\"home.jsp?rep=1\");\n\t}\n}\n\nif(request.getParameter(\"Comment\") != (null) && session.getAttribute(\"HCPMID\") != null){\n\taction = new ReportAdverseEventAction(\"\" + session.getAttribute(\"HCPMID\"), prodDAO, loggedInMID.longValue());\n\tAdverseEventBean aeBean = new AdverseEventBean();\n\taeBean.setMID(\"\"+loggedInMID);\n\taeBean.setDescription(request.getParameter(\"Comment\"));\n\taeBean.setDrug(\"\"+session.getAttribute(\"presID\"));\n\taeBean.setCode(\"\"+session.getAttribute(\"code\"));\n\t\n\t//aeBean = new BeanBuilder<AdverseEventBean>().build(request.getParameterMap(), new AdverseEventBean());\n\taction.addReport(aeBean);\n\taction.sendMail(aeBean);\n\tresponse.sendRedirect(\"home.jsp?rep=1\");\n\t\n}\n\nif(request.getParameter(\"Comment\") == (null) && request.getParameter(\"HCPMID\") != null){\n\taction = new ReportAdverseEventAction(request.getParameter(\"HCPMID\"), prodDAO, loggedInMID.longValue());\n\tsession.setAttribute(\"HCPMID\", request.getParameter(\"HCPMID\"));\n\tsession.setAttribute(\"presID\", request.getParameter(\"presID\"));\n\tsession.setAttribute(\"code\", request.getParameter(\"code\"));\n}\n\n%>\n<div align=\"center\">\n<form id=\"mainForm\" method=\"get\" action=\"reportAdverseEvent.jsp\">\n\t<h2>Report an Adverse Event</h2>\n\n\t<textarea name=\"Comment\" cols=\"100\" rows=\"10\"></textarea><br />\n\t<br />\n\t<input type=\"submit\" value=\"Save\" name=\"addReport\"/>\n\n\n</form>\n</div>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d1c"},"name":"src/edu/ncsu/csc/itrust/action/ReportAdverseEventAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1a"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1e"}]],"contents":"package edu.ncsu.csc.itrust.action;\n/**\n * Used for the patient to report adverse events.\n */\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.AdverseEventBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.AdverseEventValidator;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\npublic class ReportAdverseEventAction {\n\t\n\tprivate long loggedInMID;\n\tprivate EmailUtil emailer;\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate AdverseEventDAO adverseEventDAO;\n\tprivate TransactionDAO transactionDAO;\n\tprivate long hcpID;\n\tprivate AdverseEventValidator validator;\n\t\n\tpublic ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID){\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.emailer = new EmailUtil(factory);\n\t\tthis.adverseEventDAO = factory.getAdverseEventDAO();\n\t\tthis.transactionDAO = factory.getTransactionDAO();\n\t\tthis.hcpID = Long.parseLong(hcpID);\n\t\tthis.validator = new AdverseEventValidator();\n\t\t\n\t\t\n\t}\n\t\n\t/**\n\t * Constructor used to send e-mails only\n\t */\n\tpublic ReportAdverseEventAction(DAOFactory factory, long loggedInMID){\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.emailer = new EmailUtil(factory);\n\t\tthis.adverseEventDAO = factory.getAdverseEventDAO();\n\t\tthis.transactionDAO = factory.getTransactionDAO();\n\t\tthis.validator = new AdverseEventValidator();\n\t}\n\t/**\n\t * Method that sends exactly one e-mail to each MID in the list of Adverse Events\n\t * @param aeList The list of adverse Event Beans that need to be acted upon\n\t * @return EList The list of e-mails sent for testing purposes\n\t */\n\tpublic Email sendMails(List<AdverseEventBean> aeList) throws iTrustException, FormValidationException, DBException {\n\t\tList<String> MIDlist = new ArrayList<String>();\n\t\tString patientID = \"\";\n\t\t\n\t\tfor(AdverseEventBean beaner : aeList){\n\t\t\tpatientID = beaner.getMID();\n\t\t\tString newDesc = \" Drug: \" + beaner.getDrug() + \" (\" + beaner.getCode() + \") Description: \" + beaner.getDescription();\n\t\t\tbeaner.setDescription(newDesc);\n\t\t}\n\t\tfor(AdverseEventBean beano : aeList){\n\t\t\tif(!MIDlist.contains(beano.getPrescriber())){\n\t\t\t\tMIDlist.add(beano.getPrescriber());\n\t\t\t}\n\t\t}\n\t\tEmail email = new Email();\n\t\t\n\t\tfor(String num : MIDlist){\n\t\t\tString message = \" Patient: \" + patientDAO.getName(Long.parseLong(patientID)) \n\t\t\t\t+ \" (MID \" + patientID + \") Has Reported the following adverse event(s)\";\n\t\t\tfor(AdverseEventBean beano : aeList){\n\t\t\t\tif(beano.getPrescriber().equals(num)){\n\t\t\t\t\tmessage = message + beano.getDescription();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString fromEmail;\n\t\t\temail.setFrom(\"noreply@itrust.com\");\n\t\t\tPatientBean sender = patientDAO.getPatient(loggedInMID);\n\t\t\tPersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));\n\t\t\tList<String> toList = new ArrayList<String>();\n\t\t\ttoList.add(receiver.getEmail());\n\t\t\tfromEmail = sender.getEmail();\n\t\t\t\n\t\t\temail.setToList(toList);\n\t\t\temail.setFrom(fromEmail);\n\t\t\temail.setSubject(String.format(\"Adverse Event Report(Prescription)\"));\n\t\t\temail.setBody(message);\n\t\t\temailer.sendEmail(email);\n\t\t\ttransactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n\t\t\t\n\t\t}\n\t\treturn email;\n\t}\n\t/**\n\t * A method used to send a single e-mail. Used in immunizations.\n\t * @param aeBean\n\t * @return Email returns the Email for testing purposes.\n\t */\n\tpublic Email sendMail (AdverseEventBean aeBean)throws iTrustException, FormValidationException, DBException{\n\t\tEmail email = new Email();\n\t\tString fromEmail;\n\t\temail.setFrom(\"noreply@itrust.com\");\n\t\tList<String> toList = new ArrayList<String>();\n\t\t\n\t\tPatientBean sender = patientDAO.getPatient(loggedInMID);\n\t\tPersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\n\t\t\n\t\ttoList.add(receiver.getEmail());\n\t\tfromEmail = sender.getEmail();\n\t\t\n\t\temail.setToList(toList);\n\t\temail.setFrom(fromEmail);\n\t\temail.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\n\t\temail.setBody(String.format(\n\t\t\t\t\" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) \n\t\t\t\t+ \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event\" +\n\t\t\t\t\" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\n\t\t\t\t));\n\t\temailer.sendEmail(email);\n\t\t\n\t\ttransactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n\t\t\n\t\treturn email;\n\t}\n\t\n\t/**\n\t * Method used to add a report to the data base\n\t * @param aeBean The adverse event to add\n\t * @return a string for testing purposes only\n\t * @throws iTrustException\n\t * @throws FormValidationException\n\t * @throws DBException\n\t */\n\tpublic String addReport(AdverseEventBean aeBean)throws iTrustException, FormValidationException, DBException {\n\t\t\n\t\ttry{\n\t\t\tvalidator.validate(aeBean);\n\t\t}catch (FormValidationException e){\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t\t}\n\t\ttry{\n\t\t\tadverseEventDAO.addReport(aeBean, hcpID);\n\t\t}\n\t\tcatch( DBException e ){\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t}\n\t\t/**\n\t\t * Old code used to send a single e-mail. Keep for reference\n\t\tEmail email = new Email();\n\t\tString senderName;\n\t\tString fromEmail;\n\t\temail.setFrom(\"noreply@itrust.com\");\n\t\tList<String> toList = new ArrayList<String>();\n\t\t\n\t\tPatientBean sender = patientDAO.getPatient(loggedInMID);\n\t\tPersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\n\t\t\n\t\ttoList.add(receiver.getEmail());\n\t\tsenderName = sender.getFullName();\n\t\tfromEmail = sender.getEmail();\n\t\t\n\t\temail.setToList(toList);\n\t\temail.setFrom(fromEmail);\n\t\temail.setSubject(String.format(\"Adverse Event Report\"));\n\t\temail.setBody(String.format(\n\t\t\t\t\" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) \n\t\t\t\t+ \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event(s)\" +\n\t\t\t\t\" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\n\t\t\t\t));\n\t\temailer.sendEmail(email);\n\t\t\n\t\ttransactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);*/\n\t\ttransactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID);\n\t\treturn \"\";\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d1d"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/AdverseEventDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1a"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d23"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d24"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.AdverseEventBean;\nimport edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport java.sql.Timestamp;\n\n/**\n * Used for the logging mechanism.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @author Andy\n * \n */\npublic class AdverseEventDAO {\n\tprivate DAOFactory factory;\n\tprivate AdverseEventBeanLoader aeLoader;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic AdverseEventDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tthis.aeLoader = new AdverseEventBeanLoader();\n\t}\n\n\t/**\n\t * Gets all the adverse event reports for a certain user MID.\n\t * @param mid The MID of the user to be looked up.\n\t * @return A java.util.List of AdverseEventBeans.\n\t * @throws SQLException\n\t * @throws DBException \n\t */\npublic List<AdverseEventBean> getReportsFor(long mid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\t\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents WHERE PatientMID = ?\");\n\t\t\tps.setLong(1, mid);\n\t\t\tResultSet rs = ps.executeQuery();\n\n\t\t\tList<AdverseEventBean> aeList = this.aeLoader.loadList(rs);\n\t\t\treturn aeList;\n\t\t} catch(SQLException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally{\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a message to the database.\n\t * @param mBean A bean representing the message to be added.\n\t * @throws SQLException\n\t * @throws DBException \n\t */\n\tpublic void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry{\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\n\t\t\t\t\t\"INSERT INTO AdverseEvents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) \"\n\t\t\t\t\t  + \"VALUES (?, ?, ?, ?, ?, ?)\");\n\t\t\tps.setString(1, aeBean.getMID());\n\t\t\tps.setString(2, aeBean.getDrug());\n\t\t\tps.setString(3, aeBean.getCode());\n\t\t\tps.setString(4, aeBean.getDescription());\n\t\t\tps.setLong(5, hcpmid);\n\t\t\tps.setString(6,\"Active\");\n\t\t\tps.executeUpdate();\n\t\t} catch(SQLException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\tpublic long getHCPMID(int id) throws DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents WHERE id=?\");\n\t\t\tps.setInt(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\n\t\t\tlong hcpMID = 0;\n\t\t\tif(rs.next()) {\n\t\t\t\t\n\t\t\t\t hcpMID = rs.getLong(\"Prescriber\");\n\t\t\t}\n\t\t\treturn hcpMID;\n\t\t} catch(SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\tpublic AdverseEventBean getReport(int id) throws DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents WHERE id=?\");\n\t\t\tps.setInt(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\n\t\t\tList<AdverseEventBean> aeList = aeLoader.loadList(rs);\n\t\t\treturn aeList.get(0);\n\t\t} catch(SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\t\t\t\n\t\t}\n\t}\n\t\n\tpublic long removeReport(int id) throws DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE AdverseEvents SET Status = ? WHERE id = ?\");\n\t\t\tString removed = \"removed\";\n\t\t\tps.setString(1, removed);\n\t\t\tps.setInt(2,id);\n\t\t\tps.executeUpdate();\n\t\t\tlong a = DBUtil.getLastInsert(conn);\n\t\t\treturn a;\n\t\t} catch(SQLException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\t\n\t\t}\n\t}\n\t\n\tpublic List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException\n\t{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE code=? AND status=?\");\n\t\t\tps.setString(1, code);\n\t\t\tps.setString(2, \"Active\");\n\t\t\tResultSet rs;\n\t\t\trs = ps.executeQuery();\n\t\t\treturn aeLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\tpublic String getNameForCode(String code) throws DBException\n\t{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT PresImmu FROM adverseevents WHERE code=?\");\n\t\t\tps.setString(1, code);\n\t\t\tResultSet rs;\n\t\t\trs = ps.executeQuery();\n\t\t\tif(rs.next()) {\n\t\t\t\t return rs.getString(\"PresImmu\");\n\t\t\t}\n\t\t\treturn \"Name not Found\";\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\tpublic List<AdverseEventBean> getPerscriptions(String start, String end) throws ParseException, DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\ttry{\n\t\t\tSimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\n\t\t\tDate beginning = fmt.parse(start);\n\t\t\tDate ending = fmt.parse(end);\n\t \n\t\t\tconn = factory.getConnection();\n\t\t\t//AND NDCodes.Code=AdverseEvents.Code \n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents,NDCodes WHERE AdverseEvents.TimeLogged >= ? AND AdverseEvents.TimeLogged <= ? AND NDCodes.Code=AdverseEvents.Code ORDER BY AdverseEvents.Code, AdverseEvents.TimeLogged DESC\");\n\t\t\t \n\t\t\tps.setTimestamp(1, new Timestamp(beginning.getTime()));\n\t\t\tps.setTimestamp(2, new Timestamp(ending.getTime() + 1000L * 60L * 60 * 24L));\n\t\t\tResultSet rs = ps.executeQuery();\n\t\n\t\t\tList<AdverseEventBean> aeList = aeLoader.loadList(rs);\n\t\t\treturn aeList;\n\t\t} catch(SQLException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\t\n\t\t}\n\t}\n\t\n\tpublic List<AdverseEventBean> getImmunizations(String start, String end) throws ParseException, DBException{\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tSimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\n\t\t\tDate beginning = fmt.parse(start);\n\t\t\tDate ending = fmt.parse(end);\n\t \n\t\t\tconn = factory.getConnection();\n\t\t\t//AND NDCodes.Code=AdverseEvents.Code \n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents,CPTCodes WHERE AdverseEvents.TimeLogged >= ? AND AdverseEvents.TimeLogged <= ? AND CPTCodes.Code=AdverseEvents.Code ORDER BY AdverseEvents.Code, AdverseEvents.TimeLogged DESC\");\n\t\t\t \n\t\t\tps.setTimestamp(1, new Timestamp(beginning.getTime()));\n\t\t\tps.setTimestamp(2, new Timestamp(ending.getTime() + 1000L * 60L * 60 * 24L));\n\t\t\tResultSet rs = ps.executeQuery();\n\t\n\t\t\tList<AdverseEventBean> aeList = aeLoader.loadList(rs);\n\t\t\treturn aeList;\n\t\t} catch(SQLException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\t\t\t\n\t\t}\n\t}\n}"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d20"},"name":"WebRoot/auth/pha/monitorAdverseEvents.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d23"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.Date\"%>\n<%@page import=\"java.text.SimpleDateFormat\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.AdverseEventBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Monitor Adverse Events\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<script>\nfunction showBarChart(id) {\n\tid = id.substring(5, id.indexOf(\"button\"));\n\twindow.open(\"barchart.jsp?id=\" + id, \"barchart\", \"width=300, height=300, resizable=yes\");\n}\n</script>\n\n<%\nMonitorAdverseEventAction action = new MonitorAdverseEventAction(prodDAO, loggedInMID.longValue());\nList<AdverseEventBean> events = null;\nString prescriptionImmunization = \"\";\n\nif(request.getParameter(\"prescriptions\") != null) {\n\ttry{\n\t\tevents = action.getReports(true, request.getParameter(\"startDate\"), request.getParameter(\"endDate\"));\n\t\tprescriptionImmunization = \"Prescription\";\n\t} catch(FormValidationException e){\n\t\t%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t</div>\n\t\t<%\n\t}\n} else if(request.getParameter(\"immunizations\") != null) {\n\ttry{\n\t\tevents = action.getReports(false, request.getParameter(\"startDate\"), request.getParameter(\"endDate\"));\n\t\tprescriptionImmunization = \"Immunization\";\n\t} catch(FormValidationException e){\n\t\t%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t</div>\n\t\t<%\n\t}\n}\n\n\nif(prescriptionImmunization != \"\") {\n\tsession.setAttribute(\"events\", events);\n\tsession.setAttribute(\"prescriptionImmunization\", prescriptionImmunization);\n%>\n<form action=\"adverseEventDetails.jsp\" method=\"post\">\n<input type=\"hidden\" name=\"eventNumber\" value=\"\" />\n\t<table class=\"fTable\" align=\"center\">\n\t<tr class=\"header\">\n\t\t<th><%=prescriptionImmunization %></th>\n\t\t<th>Reporter</th>\n\t\t<th>Date</th>\n\t\t<th>Details</th>\n\t\t<th><%=prescriptionImmunization %> Reports By Month</th>\n\t</tr>\n\t\t<%\n\t\tint i = 0;\n\t\tint codeCount = 0;\n\t\tString currentCode = \"\";\n\t\tif(events.size() > 0){\n\t\t\tcurrentCode = events.get(0).getCode();\n\t\t} else {\n\t\t\t%>\n\t\t\t<tr><td colspan=\"5\" align=\"center\">No adverse events reported.</td></tr>\n\t\t\t<%\n\t\t}\n\t\t\n\t\tfor(AdverseEventBean event: events){\n\n\t\t\tif(!\"removed\".equals(event.getStatus())){\n\t\t\t\t%>\n\t\t\t\t<tr><td>\n\t\t\t\t<%\n\t\t\t\tif(currentCode.equals(event.getCode())) {\n\t\t\t\t\tcodeCount++;\n\t\t\t\t} else {\n\t\t\t\t\t%>\n\t\t\t\t\t<script>\n\t\t\t\t\tdocument.getElementById(\"chart<%=currentCode %>\").rowSpan = <%=codeCount%>;\n\t\t\t\t\t</script>\n\t\t\t\t\t<%\n\t\t\t\t\tcodeCount = 1;\n\t\t\t\t\tcurrentCode = event.getCode();\n\t\t\t\t}\n\t\t\t\t%>\n\t\t\t\t\n\t\t\t\t<%=event.getDrug() %>(<%=event.getCode() %>)</td>\n\t\t\t\t<% \n\t\t\t\ttry { \n\t\t\t\t%>\n\t\t\t\t\t<td><%=action.getName(Long.parseLong(event.getMID())) %></td>\n\t\t\t\t<%\n\t\t\t\t} catch(NumberFormatException e) {\n\t\t\t\t\t%>\n\t\t\t\t\t<td>Invalid Patient ID</td>\n\t\t\t\t\t<%\n\t\t\t\t}\n\t\t\t\t%>\n\t\t\t\t<td><%=event.getDate() %></td>\n\t\t\t\t<td>\n\t\t\t\t<a href=\"adverseEventDetails.jsp?eventNumber=<%=i %>\">Get Details</a></td>\n\t\t\t\t<%\n\t\t\t\tif(codeCount == 1) {\n\t\t\t\t\t%>\n\t\t\t\t\t<td id=\"chart<%=currentCode %>\" rowspan=\"1\">\n\t\t\t\t\t<a href=\"adverseEventChart.jsp?code=<%=currentCode %>\">View Chart</a>\n\t\t\t\t\t</td>\n\t\t\t\t\t<%\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t%>\n\t\t\t\t</tr>\n\t\t\t<%\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t%>\t\n\t</table>\n\t<script>\n\t\tdocument.getElementById(\"chart<%=currentCode %>\").rowSpan = \"<%=codeCount%>\";\n\t</script>\n</form>\n\t<%\n\t\n} else {\n\nString startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\nString endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\n%>\n<form action=\"monitorAdverseEvents.jsp\" method=\"post\">\n<table class=\"fTable\" align=\"center\">\n\t<tr class=\"subHeader\">\n\t\t<td>Start Date:</td>\n\t\t<td>\n\t\t\t<input name=\"startDate\" value=\"<%=startDate%>\" size=\"10\">\n\t\t\t<input type=button value=\"Select Date\"\">\n\t\t</td>\n\t\t<td>End Date:</td>\n\t\t<td>\n\t\t\t<input name=\"endDate\" value=\"<%=endDate%>\" size = \"10\">\n\t\t\t<input type=button value=\"Select Date\">\n\t\t</td>\n\t</tr>\n</table>\n<br />\n<br />\n<div align=\"center\">\n<input type=\"submit\" value=\"Prescriptions\" name=\"prescriptions\" />\n<input type=\"submit\" value=\"Immunizations\" name=\"immunizations\" />\n</div>\n<br />\n</form>\n\n<%\n}\n%>\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d21"},"name":"src/edu/ncsu/csc/itrust/action/MonitorAdverseEventAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d23"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d24"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\n/**\n * Used by PHAs to view the reported adverse events\n */\nimport java.sql.SQLException;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.EmailUtil;\nimport edu.ncsu.csc.itrust.beans.AdverseEventBean;\nimport edu.ncsu.csc.itrust.beans.Email;\nimport edu.ncsu.csc.itrust.beans.MessageBean;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\npublic class MonitorAdverseEventAction {\n\t \n\tprivate long loggedInMID;\n\tprivate EmailUtil emailer;\n\tprivate PatientDAO patientDAO;\n\tprivate AdverseEventDAO adverseEventDAO;\n\tprivate TransactionDAO transactionDAO;\n\tprivate SendMessageAction messenger;\n\t\n\t/**\n\t * Constructor \n\t * @param factory\n\t * @param loggedInMID\n\t */\n\tpublic MonitorAdverseEventAction(DAOFactory factory, long loggedInMID){\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.transactionDAO = factory.getTransactionDAO();\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.emailer = new EmailUtil(factory);\n\t\tthis.adverseEventDAO = factory.getAdverseEventDAO();\n\t\tthis.messenger = new SendMessageAction(factory, loggedInMID);\n\t\t\n\t}\n\t/**\n\t * Returns a list of reports between specified dates\n\t * @param isPrescription Boolean to return prescriptions or immunizations\n\t * @param start The starting date\n\t * @param end The ending date\n\t * @return the list of events\n\t * @throws iTrustException\n\t * @throws FormValidationException\n\t * @throws SQLException\n\t * @throws ParseException\n\t */\n\tpublic List<AdverseEventBean> getReports(boolean isPrescription, String start, String end)throws iTrustException, FormValidationException, SQLException, ParseException {\n\t\tif(isPrescription) {\n\t\t\ttransactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Prescription Reports Requested.\");\n\t\t\treturn adverseEventDAO.getPerscriptions(start, end);\n\t\t} else { //is Immunization\n\t\t\ttransactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Immunization Report Requested.\");\n\t\t\treturn adverseEventDAO.getImmunizations(start, end);\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the patient's name\n\t * @param MID the MID of the patient to return the name for.\n\t * @return\n\t */\n\tpublic String getName(long MID) {\n\t\ttry {\n\t\t\treturn patientDAO.getName(MID);\n\t\t} catch(DBException e) {\n\t\t\treturn \"\";\n\t\t} catch(iTrustException e) {\n\t\t\treturn \"Patient no longer exists\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Sends an e-mail to a patient requesting more information\n\t * @param patientMID The patient to receive the message\n\t * @param message The message\n\t * @return string for testing purposes\n\t * @throws DBException\n\t */\n\tpublic String sendEmail(long patientMID, String message) throws DBException{\n\t\tString rValue;\n\t\tList<String> toList = new ArrayList<String>();\n\t\tPatientBean receiver = patientDAO.getPatient(patientMID);\n\t\ttoList.add(receiver.getEmail());\n\t\tEmail mail = new Email();\n\t\tmail.setBody(message);\n\t\tmail.setFrom(loggedInMID + \"\");\n\t\tmail.setToList(toList);\n\t\temailer.sendEmail(mail);\n\t\ttransactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Requested more information\");\n\t\trValue = \"\" + mail.getFrom() + \" \" + mail.getBody();\n\t\treturn rValue;\n\t}\n\t\n\t/**\n\t * Method used to remove an adverse event report\n\t * \n\t * @param id the id of the report to be removed\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic void remove(int id) throws DBException, iTrustException, FormValidationException{\n\t\tlong HCPMID;\n\t\ttry{\n\t\tAdverseEventBean aeBean = adverseEventDAO.getReport(id);\n\t\tadverseEventDAO.removeReport(id);\n\t\tHCPMID = adverseEventDAO.getHCPMID(id);\n\t\tMessageBean mBeanTwo = new MessageBean();\n\t\tMessageBean mBeanOne = new MessageBean();\n\t\tString body = \"An adverse event for \" + aeBean.getDrug() + \" perscribed to \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) +\" with description: (\" + aeBean.getDescription()+ \") was removed.\";\n\t\tmBeanOne.setTo(Long.parseLong(aeBean.getMID()));\n\t\tmBeanTwo.setTo(HCPMID);\n\t\tmBeanOne.setSubject(\"Subject\");\n\t\tmBeanTwo.setSubject(\"Subject\");\n\t\tmBeanOne.setBody(body);\n\t\tmBeanTwo.setBody(body);\n\t\tmBeanOne.setFrom(loggedInMID);\n\t\tmBeanTwo.setFrom(loggedInMID);\n\t\tmessenger.sendMessage(mBeanOne);\n\t\tmessenger.sendMessage(mBeanTwo);\n\t\ttransactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Event Report Removed\");\n\t\t}catch(SQLException e){\n\t\t\tthrow new DBException(e);\n\t\t} \n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d22"},"name":"WebRoot/auth/pha/adverseEventDetails.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d1f"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d23"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d24"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.Date\"%>\n<%@page import=\"java.text.SimpleDateFormat\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.AdverseEventBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.DBException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Adverse Event Details\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nMonitorAdverseEventAction action = new MonitorAdverseEventAction(prodDAO, loggedInMID.longValue());\nif(request.getParameter(\"remove\") != null) {\n\ttry {\n\t\taction.remove(Integer.parseInt(request.getParameter(\"id\")));\n\t\t%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustMessage\">Report successfully removed</span>\n\t\t</div>\n\t\t<%\n\t} catch(DBException e) {\n\t\t%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage()%></span>\n\t\t</div>\n\t\t<%\n\t}catch(iTrustException e) {\n\t\t%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage()%></span>\n\t\t</div>\n\t\t<%\n\t}\n} else if(request.getParameter(\"moreInfo\") != null) {\n\ttry{\n\taction.sendEmail(Long.parseLong(request.getParameter(\"patientMID\")), \"I would like to know more about your experience with this medication\");\n\t%>\n\t<div align=center>\n\t\t<span class=\"iTrustMessage\">Request sent</span>\n\t</div>\n\t<%\n\t} catch(DBException e) {\n\t\t%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage()%></span>\n\t\t</div>\n\t\t<%\n\t}\n} else {\n\n\tList<AdverseEventBean> events = (List<AdverseEventBean>)session.getAttribute(\"events\");\n\tint num = 0;\n\tString reporter = \"\";\n\ttry{\n\t\tnum = Integer.parseInt(request.getParameter(\"eventNumber\"));\n\t\treporter = action.getName(Long.parseLong(events.get(num).getMID()));\n\t}catch(NumberFormatException e){\n\t\t%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t</div>\n\t<%\n\t}\n\tString drug = events.get(num).getDrug() + \" (\" + events.get(num).getCode() + \")\";\n\tString date = events.get(num).getDate();\n\tString description = events.get(num).getDescription();\n\t\n\t%>\n\t<form action=\"adverseEventDetails.jsp\">\n\t\t\t<input type=\"hidden\" name=\"id\" value=\"<%=events.get(num).getId() %>\" />\n\t\t\t<input type=\"hidden\" name=\"patientMID\" value=\"<%=Long.parseLong(events.get(num).getMID()) %>\" />\n\t\n\t\t\t<b>Reporter: </b>\n\t\t\t<div><%=reporter%></div>\n\t\t<br />\n\t\t\t<b><%=session.getAttribute(\"prescriptionImmunization\") %>: </b>\n\t\t\t<div><%=drug%></div>\n\t\t<br />\n\t\t\t<b>Date: </b>\n\t\t\t<div><%=date%></div>\n\t\t<br />\n\t\t<b>Description: </b>\n\t\t<div style=\"width:100%;\"><%=description%></div>\n\t<br />\n\t<br />\n\t\n\t<input type=\"submit\" value=\"Remove Event\" name=\"remove\" />\n\t<input type=\"submit\" value=\"Request More Information\" name=\"moreInfo\" />\n\t</form>\n\t\n\t<%\n\tsession.removeAttribute(\"events\");\n\tsession.removeAttribute(\"prescriptionImmunization\");\n\n}\n\t%>\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d27"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/DrugInteractionDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d26"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d29"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2c"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.beans.DrugInteractionBean;\nimport edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Used for managing drug interactions.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm\n * @author Andy\n * \n */\npublic class DrugInteractionDAO {\n\tprivate DAOFactory factory;\n\tprivate DrugInteractionBeanLoader interactionLoader;\n\t\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic DrugInteractionDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t\tinteractionLoader = new DrugInteractionBeanLoader();\n\t}\n\t\n\t/**\n\t * Returns a list of all drug interactions for the input drug name\n\t * \n\t * @return A java.util.List of DrugInteractionBeans.\n\t * @throws DBException\n\t */\n\tpublic List<DrugInteractionBean> getInteractions(String drugCode) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM druginteractions WHERE FirstDrug = ? OR SecondDrug = ?\");\n\t\t\tps.setString(1, drugCode);\n\t\t\tps.setString(2, drugCode);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\treturn interactionLoader.loadList(rs);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an\n\t * iTrustException is thrown.\n\t * \n\t * @param firstDrug  The name of the first drug in an interaction.\n\t * @param secondDrug  The name of the second drug in an interaction.\n\t * @param description  Explanation of the drug interaction.\n\t * @return A boolean indicating success or failure.\n\t * @throws DBException\n\t * @throws iTrustException\n\t */\n\tpublic boolean reportInteraction(String firstDrug, String secondDrug, String description) throws DBException, iTrustException {\n\t\tif(firstDrug.equals(secondDrug)) throw new iTrustException(\"Drug cannot interact with itself.\");\n\t\t\n\t\tList<DrugInteractionBean> currentIntsDrug2 = getInteractions(secondDrug);\n\t\tfor(DrugInteractionBean dib : currentIntsDrug2){\n\t\t\tif(dib.getSecondDrug().equals(firstDrug)){\n\t\t\t\tthrow new iTrustException(\"Error: Interaction between these drugs already exists.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"INSERT INTO druginteractions (FirstDrug, SecondDrug, Description) \" + \"VALUES (?,?,?)\");\n\t\t\tps.setString(1, firstDrug);\n\t\t\tps.setString(2, secondDrug);\n\t\t\tps.setString(3, description);\n\t\t\treturn (1 == ps.executeUpdate());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (1062 == e.getErrorCode())\n\t\t\t\tthrow new iTrustException(\"Error: Interaction between these drugs already exists.\");\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\t\n\t/**\n\t * Remove an interaction from the database\n\t * \n\t * @param firstDrug  The name of the first patient\n\t * @param secondDrug  The name of the second patient\n\t * @return true if removed successfully, false if not in list\n\t */\n\tpublic boolean deleteInteraction(String firstDrug,String secondDrug) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"DELETE FROM druginteractions WHERE (FirstDrug = ? OR SecondDrug = ?) AND (FirstDrug = ? OR SecondDrug = ?)\");\n\t\t\tps.setString(1, firstDrug);\n\t\t\tps.setString(2, firstDrug);\n\t\t\tps.setString(3, secondDrug);\n\t\t\tps.setString(4, secondDrug);\n\t\t\tif(ps.executeUpdate() == 0)\n\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d2a"},"name":"WebRoot/auth/admin/editNDCInteractions.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d29"}]],"contents":"<%@page import=\"java.net.URLEncoder\" %>\n<%@page import=\"java.net.URLDecoder\" %>\n<%@page import=\"java.util.List\"%>\n\n<%@page import=\"edu.ncsu.csc.itrust.action.DrugInteractionAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.MedicationBean\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Edit ND Code Interactions\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\t\n\tString headerMessage = \"Select ND Codes with Interaction\";\n\tString drug1 = \"\";\n\tString drug2 = \"\";\n\tif(request.getParameter(\"drug1\") != null && request.getParameter(\"drug2\") != null) {\n\t\tdrug1 = request.getParameter(\"drug1\").split(\" \")[0];\n\t\tdrug1 = drug1.replace(\"-\", \"\");\n\t\tdrug2 = request.getParameter(\"drug2\").split(\" \")[0];\n\t\tdrug2 = drug2.replace(\"-\", \"\");\n\t}\n\t\n\tif (request.getParameter(\"add\") != null) {\n\t\ttry {\n\t\t\tDrugInteractionAction interaction = new DrugInteractionAction(prodDAO, loggedInMID.longValue());\n\t\t\theaderMessage = interaction.reportInteraction(drug1, drug2, request.getParameter(\"description\"));\n\t\t} catch(iTrustException e) {\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t} catch(FormValidationException e) {\n%>\n\t\t\t<div align=center>\n\t\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t\t</div>\n<%\n\t\t}\n\t\t\n\t}\n\t\t\t\n\tString headerColor = (headerMessage.indexOf(\"Error\") > -1)\n\t\t\t? \"#ffcccc\"\n\t\t\t: \"#00CCCC\";\n%>\n\n<br />\n<div align=center>\n<form name=\"mainForm\" method=\"post\">\n<span class=\"iTrustMessage\"><%=headerMessage %></span>\n\n<br />\n<br />\n\n\n<table cellpadding=\"10\">\n<tr><td>\n<select name=\"drug1\">\n\t<%\n\t\tList<MedicationBean> medList = prodDAO.getNDCodesDAO().getAllNDCodes();\n\t\tString tempCode = \"\";\n\t\tString tempDescrip = \"\";\n\t\tString escapedDescrip = \"\";\n\t\tfor (MedicationBean medEntry : medList) {\n\t\t\ttempCode = medEntry.getNDCode();\n\t\t\ttempDescrip = medEntry.getDescription();\n\t\t\tescapedDescrip = URLEncoder.encode(tempDescrip, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n\t%>\n\n\t\t\t<option><%=5 > tempCode.length() ? tempCode : tempCode.substring(0, 5)\n\t\t\t\t%>-<%=5 > tempCode.length() ? \"\" : tempCode.substring(5) %>\n\t\t\t\t<%=tempDescrip %>\n\t\t\t</option>\n\n\t<% } %>\n\t\n</select></td><td>\n<select name=\"drug2\">\n\t<%\n\t\tfor (MedicationBean medEntry : medList) {\n\t\t\ttempCode = medEntry.getNDCode();\n\t\t\ttempDescrip = medEntry.getDescription();\n\t\t\tescapedDescrip = URLEncoder.encode(tempDescrip, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n\t%>\n\n\t\t\t<option><%=5 > tempCode.length() ? tempCode : tempCode.substring(0, 5)\n\t\t\t\t%>-<%=5 > tempCode.length() ? \"\" : tempCode.substring(5) %>\n\t\t\t\t<%=tempDescrip %>\n\t\t\t</option>\n\n\t<% } %>\n\t\n</select>\n</td></tr>\n</table>\n<b>Description: </b><input  type=\"text\"\n                                        id=\"description\"\n                                        name=\"description\"\n                                        size=\"40\"\n                                        maxlength=\"500\" />\n\n\n<br />\n<br />\n<input type=\"submit\" name=\"add\" value=\"Add Interaction\">\n<input type=\"button\" onclick=\"location.href='/iTrust/auth/admin/editNDCodes.jsp'\" value=\"Back\" name=\"back\" id=\"back\"/>\n</form>\n</div>\n<br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d2b"},"name":"src/edu/ncsu/csc/itrust/action/DrugInteractionAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d29"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d2c"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.DrugInteractionBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.DrugInteractionValidator;\n\n/**\n * Used by EditDrugInteraction.jsp to edit and get information about drug interactions.\n * \n */\npublic class DrugInteractionAction {\n\tprivate DrugInteractionDAO drugDAO;\n\tprivate TransactionDAO tranDAO;\n\tprivate DrugInteractionValidator validator;\n\tlong loggedInMID;\n\n\t/**\n\t * Sets up defaults\n\t * \n\t * @param factory The DAO factory to be used for generating the DAOs for this action.\n\t * \n\t */\n\tpublic DrugInteractionAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.drugDAO = factory.getDrugInteractionDAO();\n\t\tthis.tranDAO = factory.getTransactionDAO();\n\t\tthis.validator = new DrugInteractionValidator();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\t\n\t/**\n\t * Method to report an interaction\n\t * @param firstDrug\n\t * @param secondDrug\n\t * @param description\n\t * @return\n\t */\n\t\n\tpublic String reportInteraction(String firstDrug, String secondDrug, String description) throws iTrustException,FormValidationException{\n\t\tif (firstDrug.equals(secondDrug)){\n\t\t\treturn \"Interactions can only be recorded between two different drugs\";\n\t\t}\n\t\tDrugInteractionBean drugInt = new DrugInteractionBean();\n\t\tdrugInt.setFirstDrug(firstDrug);\n\t\tdrugInt.setSecondDrug(secondDrug);\n\t\tdrugInt.setDescription(description);\n\t\t\n\t\ttry {\n\t\t\tvalidator.validate(drugInt);\n\t\t\tif (drugDAO.reportInteraction(firstDrug,secondDrug,description)){\n\t\t\t\ttranDAO.logTransaction(TransactionType.DRUG_INTERACTION, loggedInMID);\n\t\t\t\treturn \"Interaction recorded successfully\";\n\t\t\t} else {\n\t\t\t\treturn \"Interaction could not be added\";\n\t\t\t}\n\t\t} catch (DBException e){\n\t\t\te.printStackTrace();\n\t\t\treturn e.getMessage();\n\t\t\t}\n\t\t}\n\n\t/**\n\t * Method to delete an interaction\n\t * @param firstDrug\n\t * @param secondDrug\n\t * @return\n\t */\n\tpublic String deleteInteraction(String firstDrug,String secondDrug) throws iTrustException, FormValidationException{\n\t\tDrugInteractionBean drugInt = new DrugInteractionBean();\n\t\tdrugInt.setFirstDrug(firstDrug);\n\t\tdrugInt.setSecondDrug(secondDrug);\n\t\tdrugInt.setDescription(\"blank\");\n\t\t\n\t\ttry {\n\t\t\tvalidator.validate(drugInt);\n\t\t\tif (drugDAO.deleteInteraction(firstDrug,secondDrug)){\n\t\t\t\ttranDAO.logTransaction(TransactionType.DRUG_INTERACTION, loggedInMID);\n\t\t\t\treturn \"Interaction deleted successfully\";\n\t\t\t} else {\n\t\t\t\treturn \"Interaction could not be deleted\";\n\t\t\t}\n\t\t} catch (DBException e){\n\t\t\te.printStackTrace();\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t * Method to return a list of drug interactions for a given drug\n\t * @param drugCode - The ND Code of the drug\n\t * @return\n\t */\n\tpublic List<DrugInteractionBean> getInteractions(String drugCode) throws iTrustException {\n\t\ttry {\n\t\t\treturn drugDAO.getInteractions(drugCode);\n\t\t} catch (DBException e){\n\t\t\tthrow new iTrustException(e.getMessage());\n\t\t}\n\t}\n}"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d32"},"name":"WebRoot/auth/admin/sessionTimeout.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d31"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - Change Session Timeout\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\n\tChangeSessionTimeoutAction action = new ChangeSessionTimeoutAction(prodDAO);\n\tif(\"true\".equals(request.getParameter(\"formIsFilled\"))){\n\t\ttry{\n\t\t\taction.changeSessionTimeout(request.getParameter(\"minutes\"));\n\t\t\t%><span>Session Timeout Changed. Changes will take place on re-authentication. </span><%\n\t\t} catch(FormValidationException e){\n\t\t\te.printHTML(pageContext.getOut());\n\t\t}\n\t}\n%>\n<br /><br />\n<form action=\"sessionTimeout.jsp\" method=\"post\">\n<input type=hidden name=\"formIsFilled\" value=\"true\">\n\nChange the timeout to  \n<input name=\"minutes\" value=\"<%=action.getSessionTimeout()%>\" size=\"3\"> minutes (minimum 1).<br /><br />\n<input type=submit value=\"Change\">\n</form>\n<br /><br />\nThe global session timeout is the interval of time that an account can remain inactive without having to re-authenticate. \n<br /><br />\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d33"},"name":"src/edu/ncsu/csc/itrust/action/ChangeSessionTimeoutAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d31"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AccessDAO;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Used to change the session timeout, sessionTimeout.jsp. Note that a change to this timeout only gets\n * reflected on new sessions.\n * \n * @author Andy Meneely\n * \n */\npublic class ChangeSessionTimeoutAction {\n\tprivate AccessDAO accessDAO;\n\n\t/**\n\t * Sets up defualts.\n\t * \n\t * @param factory\n\t * @author Andy Meneely\n\t */\n\tpublic ChangeSessionTimeoutAction(DAOFactory factory) {\n\t\tthis.accessDAO = factory.getAccessDAO();\n\t}\n\n\t/**\n\t * Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO,\n\t * {@link AccessDAO}\n\t * \n\t * @param minuteString\n\t *            Pass the number of minutes in the form of a string, greater than 0.\n\t * @throws FormValidationException\n\t * @throws DBException\n\t * @author Andy Meneely\n\t */\n\tpublic void changeSessionTimeout(String minuteString) throws FormValidationException, DBException {\n\t\ttry {\n\t\t\tInteger minutes = Integer.valueOf(minuteString);\n\t\t\tif (minutes < 1)\n\t\t\t\tthrow new FormValidationException(\"Must be a number greater than 0\");\n\t\t\taccessDAO.setSessionTimeoutMins(minutes);\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new FormValidationException(\"That is not a number\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns the current session timeout in minutes, as reflected in the database\n\t * \n\t * @return the number of minutes it would take for an inactive session to timeout\n\t * @throws DBException\n\t * @author Andy Meneely\n\t */\n\tpublic int getSessionTimeout() throws DBException {\n\t\treturn accessDAO.getSessionTimeoutMins();\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d34"},"name":"src/edu/ncsu/csc/itrust/dao/mysql/AccessDAO.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d31"}]],"contents":"package edu.ncsu.csc.itrust.dao.mysql;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport edu.ncsu.csc.itrust.DBUtil;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * AccessDAO is for all queries related to authorization.\n * \n * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,\n * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are\n * added. DAOs can assume that all data has been validated and is correct.\n * \n * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be\n * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC\n * connections and/or accessing other DAOs.\n * \n * \n * @author Andy\n * \n */\npublic class AccessDAO {\n\tprivate DAOFactory factory;\n\n\t/**\n\t * The typical constructor.\n\t * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\n\t */\n\tpublic AccessDAO(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Returns the number of minutes it would take for a session to time out. This is done by effectively\n\t * using the database table as a hash table. If a row in GlobalVariables does not exist, one is inserted\n\t * with the default value '20'.\n\t * \n\t * @return An int for the number of minutes.\n\t * @throws DBException\n\t */\n\tpublic int getSessionTimeoutMins() throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"SELECT Value FROM GlobalVariables WHERE Name='Timeout'\");\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next())\n\t\t\t\treturn rs.getInt(\"Value\");\n\t\t\telse {\n\t\t\t\tinsertDefaultTimeout(conn, 20);\n\t\t\t\treturn 20;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the number of minutes it would take for a session to timeout.\n\t * \n\t * @param mins An int specifying the number of minutes\n\t * @throws DBException\n\t */\n\tpublic void setSessionTimeoutMins(int mins) throws DBException {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry {\n\t\t\tconn = factory.getConnection();\n\t\t\tps = conn.prepareStatement(\"UPDATE GlobalVariables SET Value=? WHERE Name='Timeout'\");\n\t\t\tps.setInt(1, mins);\n\t\t\tint numUpdated = ps.executeUpdate();\n\t\t\tif (numUpdated == 0) // no value in the table\n\t\t\t\tinsertDefaultTimeout(conn, mins);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new DBException(e);\n\t\t} finally {\n\t\t\tDBUtil.closeConnection(conn, ps);\n\t\t}\n\t}\n\n\tprivate void insertDefaultTimeout(Connection conn, int mins) throws SQLException {\n\t\tPreparedStatement ps = null;\n\t\tps = conn.prepareStatement(\"INSERT INTO GlobalVariables(Name,Value) VALUES ('Timeout', ?)\");\n\t\tps.setInt(1, mins);\n\t\tps.executeUpdate();\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d35"},"name":"src/edu/ncsu/csc/itrust/server/SessionTimeoutListener.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d31"}]],"contents":"package edu.ncsu.csc.itrust.server;\n\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.HttpSessionEvent;\nimport javax.servlet.http.HttpSessionListener;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n/**\n * A listener which will time the user out after a pre-specified time limit. \n */\npublic class SessionTimeoutListener implements HttpSessionListener {\n\tprivate DAOFactory factory;\n\n\t/**\n\t * The default constructor.\n\t */\n\tpublic SessionTimeoutListener() {\n\t\tthis.factory = DAOFactory.getProductionInstance();\n\t}\n\n\t/**\n\t * The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified\n\t * timeout limit.\n\t * @param factory The DAOFactory to be used.\n\t */\n\tpublic SessionTimeoutListener(DAOFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Called when the HttpSession is created, this method pulls the pre-specified limit from the\n\t * database and sets it as a property of the HttpSession.\n\t * @param arg0 The HttpSessionEven which just occurred.\n\t */\n\tpublic void sessionCreated(HttpSessionEvent arg0) {\n\t\tHttpSession session = arg0.getSession();\n\t\tint mins = 20;\n\t\ttry {\n\t\t\tmins = factory.getAccessDAO().getSessionTimeoutMins();\n\t\t} catch (DBException e) {\n\t\t\tSystem.err.println(\"Unable to set session timeout, defaulting to 20 minutes\");\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (mins < 1)\n\t\t\tmins = 1;\n\t\tsession.setMaxInactiveInterval(mins * 60);\n\t}\n\n\t/**\n\t * Must be declared for compliance with the interface. Not implemented.\n\t */\n\tpublic void sessionDestroyed(HttpSessionEvent arg0) {\n\t\t// nothing to do here\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d37"},"name":"WebRoot/auth/hcp/home.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d36"}]],"contents":"<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.LabProcedureBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.LabProcHCPAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.ReportRequestBean\"%>\n\n<%@page import=\"java.util.List\"%>\n\n<%@include file=\"/global.jsp\" %>\n\n<%\npageTitle = \"iTrust - HCP Home\";\n%>\n\n<%@include file=\"/header.jsp\" %>\n\n<%\nViewMyReportRequestsAction reportAction = new ViewMyReportRequestsAction(DAOFactory.getProductionInstance(), loggedInMID);\nList<ReportRequestBean> reports = reportAction.getAllReportRequestsForRequester();\nLabProcHCPAction lpAction = new LabProcHCPAction(DAOFactory.getProductionInstance(), loggedInMID);\nList<LabProcedureBean> labProcedures = lpAction.getLabProcForNextMonth();\n\n%>\n\n<table cellpadding=\"1\" cellspacing=\"1\">\n\t<tr>\n\t\t<td>\n\t\t<h3>Announcements</h3>\n\t\t<i>New features in iTrust</i></td>\n\t</tr>\n\t<tr>\n\t\t<td>\n\t\t<ul>\n\t\t\t<li>No more typing in a date! We now have a calendar popup that\n\t\t\tmakes entering dates incredibly easy!</li>\n\t\t</ul>\n\t\t</td>\n\t</tr>\n\n\t<tr>\n\t\t<td>\n\t\t<h3>Notifications</h3>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td>\n\t\t<h4>Comprehensive Report History</h4>\n\t\t</td>\n\t</tr>\n\n\t<tr>\n\t\t<td>\n\t\t<ul>\n<%\n\tif(reports.size() != 0) {\n\t\tfor(ReportRequestBean report : reports) {\n%>\n\t\t\t<li><%=reportAction.getLongStatus(report.getID())%></li>\n<%\n\t\t} \n\t} else {\n%>\n\t\t<i>No Report Requests</i>\n<%\n\t}\n%>\n\t\t</ul>\n\t\t</td>\n\t</tr>\n\n\t<tr>\n\t\t<td>\n\t\t<h4>Lab Procedures Completed in the Last Month</h4>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td><a href=\"LabProcHCP.jsp\">View All Lab Procedures here</a><br />\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td>\n\t\t<ul>\n\t\t\t<%if(labProcedures.size() != 0) {\n\t\t\t\tfor(LabProcedureBean bean : labProcedures) {\n\t\t\t\t\tPatientBean patient = new PatientDAO(DAOFactory.getProductionInstance()).getPatient(bean.getPid());%>\n\t\t\t<li>Lab Procedure <%=bean.getLoinc()%> for patient <%=patient.getFullName() %>\n\t\t\t<br />\n\t\t\tResults: \n<%\n\t\t\t\t\tif(bean.getResults().equals(\"\")) {\n%> \n\t\t\t\t\t\t<i>none</i> \n<%\n\t\t\t\t\t} else {\n%>\n\t\t\t\t\t\t<%=bean.getResults()%>\n<%\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n%>\n\t\t\t\t<i>No Recent Lab Procedures</i>\n<%\n\t\t\t}\n%>\n\t\t\t</li>\n\t\t</ul>\n\t\t</td>\n\t</tr>\n</table>\n\n<%@include file=\"/footer.jsp\" %>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d38"},"name":"src/edu/ncsu/csc/itrust/action/LabProcHCPAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d36"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport edu.ncsu.csc.itrust.beans.LabProcedureBean;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.validate.LabProcedureValidator;\n\n/**\n * Action class for LabProcHCP.jsp.\n * \n * @extends LabProcUAPAction\n */\npublic class LabProcHCPAction extends LabProcUAPAction {\n\tprivate TransactionDAO transDAO;\n\tprivate LabProcedureDAO lpDAO;\n\tprivate OfficeVisitDAO ovDAO;\n\tlong loggedInMID;\n\tprivate LabProcedureValidator validator;\n\n\t\n\t/**\n\t * Sets up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID  MID for the logged in HCP\n\t */\n\t\n\tpublic LabProcHCPAction(DAOFactory factory, long loggedInMID) {\n\t\tsuper(factory, loggedInMID);\n\t\ttransDAO = factory.getTransactionDAO();\n\t\tlpDAO = factory.getLabProcedureDAO();\n\t\tovDAO = factory.getOfficeVisitDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t\tvalidator = new LabProcedureValidator();\n\n\t}\n\n\t/**\n\t * This method sorts by LOINC and returns the list\n\t * \n\t * @param id the ID to sort the list by\n\t * @return List sorted by LOINC\n\t */\n\tpublic List<LabProcedureBean> sortByLOINC(long id) throws DBException {\n\t\treturn lpDAO.getAllLabProceduresLOINC(id);\n\t}\n\n\t/**\n\t * Returns a list of all the lab procedures for the next month\n\t * \n\t * @return all the lab procedures for the next month\n\t */\n\tpublic List<LabProcedureBean> getLabProcForNextMonth() throws DBException {\n\t\tList<LabProcedureBean> listLabProc = new ArrayList<LabProcedureBean>(0);\n\t\tList<OfficeVisitBean> listOV = ovDAO.getAllOfficeVisitsForLHCP(loggedInMID);\n\t\tfor (OfficeVisitBean ov : listOV) {\n\t\t\tif (listLabProc.isEmpty() == true) {\n\t\t\t\tlistLabProc = lpDAO.getLabProceduresForLHCPForNextMonth(ov.getID());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (LabProcedureBean lb : lpDAO.getLabProceduresForLHCPForNextMonth(ov.getID())) {\n\t\t\t\t\tlistLabProc.add(lb);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn listLabProc;\n\t}\n\n\t/**\n\t * Changes the privacy settings\n\t * \n\t * @param x the ID of the procedure to change \n\t * \n\t */\n\tpublic void changePrivacy(long x) throws DBException, FormValidationException {\n\t\tLabProcedureBean pb = lpDAO.getLabProcedure(x);\n\t\tif (checkAccess(x)) {\n\t\t\tif (pb.getRights().equals(LabProcedureBean.Restrict)) {\n\t\t\t\tpb.allow();\n\t\t\t} else {\n\t\t\t\tpb.restrict();\n\t\t\t}\n\t\t\tvalidator.validate(pb);\n\t\t\tlpDAO.updateRights(pb);\n\t\t\ttransDAO.logTransaction(TransactionType.ENTER_EDIT_LAB_PROCEDURE, loggedInMID, pb.getPid(),\n\t\t\t\t\t\"Privacy Changed procedure id: \" + pb.getProcedureID());\n\t\t}\n\n\t}\n\t\n\t/**\n\t * Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit\n\t * \n\t * @param x the ID of the HCP to check\n\t * \n\t */\n\tpublic boolean checkAccess(long x) throws DBException, FormValidationException {\n\t\tLabProcedureBean pb = lpDAO.getLabProcedure(x);\n\t\tOfficeVisitBean ovbean = ovDAO.getOfficeVisit(pb.getOvID());\n\t\treturn (loggedInMID == ovbean.getHcpID());\n\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d3b"},"name":"src/edu/ncsu/csc/itrust/validate/SecurityQAValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3a"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.SetSecurityQuestionAction;\nimport edu.ncsu.csc.itrust.beans.SecurityQA;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Validates the security question and answer. This doesn't follow the same format as the others because this\n * validator is used for the various states of reset password, {@link SetSecurityQuestionAction}\n * \n * @author Andy\n * \n */\npublic class SecurityQAValidator extends BeanValidator<SecurityQA> {\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(SecurityQA bean) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\tif (null == bean)\n\t\t\tthrow new FormValidationException(\"Null form\");\n\n\t\tif (null == bean.getConfirmAnswer())\n\t\t\tthrow new FormValidationException(\"Confirm answer cannot be empty\");\n\n\t\tif (!bean.getAnswer().equals(bean.getConfirmAnswer()))\n\t\t\tthrow new FormValidationException(\"Security answers do not match\");\n\n\t\terrorList.addIfNotNull(checkFormat(\"Security Question\", bean.getQuestion(),\n\t\t\t\tValidationFormat.QUESTION, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Security Answer\", bean.getAnswer(), ValidationFormat.ANSWER,\n\t\t\t\tfalse));\n\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d3c"},"name":"src/edu/ncsu/csc/itrust/validate/PatientValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3a"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.EditPatientAction;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport org.apache.commons.validator.CreditCardValidator;\nimport java.util.Date;\n\n/**\n * Validates a patient bean, from {@link EditPatientAction}\n * \n * @author Andy\n * \n */\npublic class PatientValidator extends BeanValidator<PatientBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic PatientValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(PatientBean p) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Date of Birth\", p.getDateOfBirthStr(), ValidationFormat.DATE,\n\t\t\t\tfalse));\n\t\terrorList.addIfNotNull(checkFormat(\"Date of Death\", p.getDateOfDeathStr(), ValidationFormat.DATE,\n\t\t\t\ttrue));\n\t\ttry {\n\t\t\tif (p.getDateOfDeath() == null && \"\".equals(p.getDateOfDeathStr())){\n\t\t\t\tif( p.getDateOfBirth().after(new Date())){\n\t\t\t\t\terrorList.addIfNotNull(\"Birth date cannot be in the future!\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (p.getDateOfDeath().before(p.getDateOfBirth()))\n\t\t\t\terrorList.addIfNotNull(\"Death date cannot be before birth date!\");\n\t\t\tif( p.getDateOfDeath().after(new Date())){\n\t\t\t\terrorList.addIfNotNull(\"Death date cannot be in the future!\");\n\t\t\t}\n\t\t\tif( p.getDateOfBirth().after(new Date())){\n\t\t\t\terrorList.addIfNotNull(\"Birth date cannot be in the future!\");\n\t\t\t}\n\t\t} catch (NullPointerException e) {\n\t\t\t// ignore this\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\tboolean deathCauseNull = (null == p.getDateOfDeathStr() || p.getDateOfDeathStr().equals(\"\"));\n\t\terrorList.addIfNotNull(checkFormat(\"Cause of Death\", p.getCauseOfDeath(), ValidationFormat.ICD9CM,\n\t\t\t\tdeathCauseNull));\n\t\terrorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(),\n\t\t\t\tValidationFormat.ADDRESS, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(),\n\t\t\t\tValidationFormat.ADDRESS, true));\n\t\terrorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\n\t\terrorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\n\t\terrorList\n\t\t\t\t.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Emergency Contact Name\", p.getEmergencyName(),\n\t\t\t\tValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Emergency Contact Phone\", p.getEmergencyPhone(),\n\t\t\t\tValidationFormat.PHONE_NUMBER, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company Name\", p.getIcName(), ValidationFormat.NAME,\n\t\t\t\tfalse));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company Address 1\", p.getIcAddress1(),\n\t\t\t\tValidationFormat.ADDRESS, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company Address 2\", p.getIcAddress2(),\n\t\t\t\tValidationFormat.ADDRESS, true));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company City\", p.getIcCity(), ValidationFormat.CITY,\n\t\t\t\tfalse));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company State\", p.getIcState(), ValidationFormat.STATE,\n\t\t\t\tfalse));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company Zip\", p.getIcZip(), ValidationFormat.ZIPCODE,\n\t\t\t\tfalse));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company Phone\", p.getIcPhone(),\n\t\t\t\tValidationFormat.PHONE_NUMBER, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Insurance Company ID\", p.getIcID(),\n\t\t\t\tValidationFormat.INSURANCE_ID, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Mother MID\", p.getMotherMID(), ValidationFormat.MID, true));\n\t\terrorList.addIfNotNull(checkFormat(\"Father MID\", p.getFatherMID(), ValidationFormat.MID, true));\n\t\terrorList\n\t\t\t\t.addIfNotNull(checkFormat(\"Topical Notes\", p.getTopicalNotes(), ValidationFormat.NOTES, true));\n\t\t\n\t\t/* This block was added for Theme 5 by Tyler Arehart */\n\t\t\n\t\tif (!(p.getCreditCardNumber().equals(\"\") && p.getCreditCardType().equals(\"\"))) {\n\t\t\n\t\t\tString s = null;\n\t\t\tCreditCardValidator c;\n\t\t\tint type = -1;\n\t\t\tif (p.getCreditCardType().equals(\"VISA\")) type = CreditCardValidator.VISA;\n\t\t\tif (p.getCreditCardType().equals(\"MASTERCARD\")) type = CreditCardValidator.MASTERCARD;\n\t\t\tif (p.getCreditCardType().equals(\"DISCOVER\")) type = CreditCardValidator.DISCOVER;\n\t\t\tif (p.getCreditCardType().equals(\"AMEX\")) type = CreditCardValidator.AMEX;\n\t\t\t\n\t\t\tif (type != -1) {\t\n\t\t\t\tc = new CreditCardValidator(type);\n\t\t\t\tif (!c.isValid(p.getCreditCardNumber())) {\n\t\t\t\t\ts = \"Credit Card Number\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts = \"Credit Card Type\";\n\t\t\t}\n\t\t\terrorList.addIfNotNull(s);\n\t\t}\n\t\t\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d3d"},"name":"src/edu/ncsu/csc/itrust/validate/PersonnelValidator.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3a"}]],"contents":"package edu.ncsu.csc.itrust.validate;\n\nimport edu.ncsu.csc.itrust.action.EditPersonnelAction;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.exception.ErrorList;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Validates a personnel bean, from {@link EditPersonnelAction}\n * \n * @author Andy\n * \n */\npublic class PersonnelValidator extends BeanValidator<PersonnelBean> {\n\t/**\n\t * The default constructor.\n\t */\n\tpublic PersonnelValidator() {\n\t}\n\n\t/**\n\t * Performs the act of validating the bean in question, which varies depending on the\n\t * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\n\t * \n\t * @param p A bean of the type to be validated.\n\t */\n\t@Override\n\tpublic void validate(PersonnelBean p) throws FormValidationException {\n\t\tErrorList errorList = new ErrorList();\n\t\terrorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(),\n\t\t\t\tValidationFormat.ADDRESS, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(),\n\t\t\t\tValidationFormat.ADDRESS, true));\n\t\terrorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\n\t\terrorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\n\t\terrorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\n\t\terrorList\n\t\t\t\t.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\n\t\terrorList\n\t\t.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, true));\n\t\tif (errorList.hasErrors())\n\t\t\tthrow new FormValidationException(errorList);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d3f"},"name":"WebRoot/auth/patient/editMyDemographics.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3e"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.EditPatientAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.BeanBuilder\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.SecurityQA\"%>\n<%@page import=\"org.apache.commons.validator.CreditCardValidator\"%>\n\n<%@taglib prefix=\"itrust\" uri=\"/WEB-INF/tags.tld\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - Edit Patient\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\n\t/* If the patient id doesn't check out, then kick 'em out to the exception handler */\n\tEditPatientAction action = new EditPatientAction(prodDAO,\n\t\t\tloggedInMID.longValue(), \"\" + loggedInMID.longValue());\n\tSetSecurityQuestionAction saction = new SetSecurityQuestionAction(\n\t\t\tprodDAO, loggedInMID.longValue());\n\tlong pid = action.getPid();\n\n\t/* Now take care of updating information */\n\tboolean formIsFilled = request.getParameter(\"formIsFilled\") != null\n\t\t\t&& request.getParameter(\"formIsFilled\").equals(\"true\");\n\tPatientBean p;\n\tSecurityQA s;\n\tif (formIsFilled) {\n\t\tp = new BeanBuilder<PatientBean>().build(request\n\t\t\t\t.getParameterMap(), new PatientBean());\n\t\ts = new BeanBuilder<SecurityQA>().build(request\n\t\t\t\t.getParameterMap(), new SecurityQA());\n\t\ttry {\n\t\t\taction.updateInformation(p);\n\t\t\tsaction.updateInformation(s);\n\t\t\t\n%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustMessage\">Information Successfully Updated</span>\n\t\t</div>\n<%\n\t} catch (FormValidationException e) {\n%>\n\t\t<div align=center>\n\t\t\t<span class=\"iTrustError\"><%=e.getMessage() %></span>\n\t\t</div>\n<%\n\t\tp = action.getPatient();\n\t\t}\n\t} else {\n\t\tp = action.getPatient();\n\t\ts = saction.retrieveInformation();\n\t}\n%>\n\n<form action=\"editMyDemographics.jsp\" method=\"post\">\n<input type=\"hidden\" name=\"formIsFilled\" value=\"true\"> \n<input type=\"hidden\" name=\"pid\" value=\"<%=pid%>\"> \n<br />\n<table cellspacing=0 align=center cellpadding=0>\n\t<tr>\n\t\t<td valign=top>\n\t\t<table class=\"fTable\" align=center style=\"width: 350px;\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=2>Patient Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">First Name:</td>\n\t\t\t\t<td><input name=\"firstName\" value=\"<%=p.getFirstName()%>\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Last Name:</td>\n\t\t\t\t<td><input name=\"lastName\" value=\"<%=p.getLastName()%>\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Email:</td>\n\t\t\t\t<td><input name=\"email\" value=\"<%=p.getEmail()%>\" type=\"text\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Address:</td>\n\t\t\t\t<td><input name=\"streetAddress1\"\n\t\t\t\t\tvalue=\"<%=p.getStreetAddress1()%>\" type=\"text\"><br />\n\t\t\t\t<input name=\"streetAddress2\" value=\"<%=p.getStreetAddress2()%>\"\n\t\t\t\t\ttype=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">City:</td>\n\t\t\t\t<td><input name=\"city\" value=\"<%=p.getCity()%>\" type=\"text\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">State:</td>\n\t\t\t\t<td><itrust:state name=\"state\" value=\"<%=p.getState()%>\" /></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Zip:</td>\n\t\t\t\t<td><input name=\"zip1\" value=\"<%=p.getZip1()%>\" maxlength=\"5\"\n\t\t\t\t\ttype=\"text\" size=\"5\"> - <input name=\"zip2\"\n\t\t\t\t\tvalue=\"<%=p.getZip2()%>\" maxlength=\"4\" type=\"text\" size=\"4\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t\t<td><input name=\"phone1\" value=\"<%=p.getPhone1()%>\" type=\"text\"\n\t\t\t\t\tsize=\"3\" maxlength=\"3\"> - <input name=\"phone2\"\n\t\t\t\t\tvalue=\"<%=p.getPhone2()%>\" type=\"text\" size=\"3\" maxlength=\"3\">\n\t\t\t\t- <input name=\"phone3\" value=\"<%=p.getPhone3()%>\" type=\"text\"\n\t\t\t\t\tsize=\"4\" maxlength=\"4\"></td>\n\t\t\t</tr>\n\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Mother MID:</td>\n\t\t\t\t<td><input name=\"MotherMID\" value=\"<%=p.getMotherMID()%>\"\n\t\t\t\t\tmaxlength=\"10\" type=\"text\"></td>\n\t\t\t</tr>\n\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Father MID:</td>\n\t\t\t\t<td><input name=\"FatherMID\" value=\"<%=p.getFatherMID()%>\"\n\t\t\t\t\tmaxlength=\"10\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Credit Card Type:</td>\n\t\t\t\t<td><select name=\"creditCardType\">\n\t\t\t\t<option value=\"\">Select:</option>\n\t\t\t\t<option value=\"MASTERCARD\" <%= p.getCreditCardType().equals(\"MASTERCARD\") ? \"selected\" : \"\" %>>Mastercard</option>\n\t\t\t\t<option value=\"VISA\" <%= p.getCreditCardType().equals(\"VISA\") ? \"selected\" : \"\" %>>Visa</option>\n\t\t\t\t<option value=\"DISCOVER\" <%= p.getCreditCardType().equals(\"DISCOVER\") ? \"selected\" : \"\" %>>Discover</option>\n\t\t\t\t<option value=\"AMEX\" <%= p.getCreditCardType().equals(\"AMEX\") ? \"selected\" : \"\" %>>American Express</option>\n\t\t\t\t</select>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Credit Card Number:</td>\n\t\t\t\t<td><input name=\"creditCardNumber\" value=\"<%=p.getCreditCardNumber()%>\"\n\t\t\t\t\tmaxlength=\"19\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</td>\n\t\t<td width=\"15px\">&nbsp;</td>\n\t\t<td valign=top>\n\t\t<table class=\"fTable\" align=center style=\"width: 350px;\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=2>Insurance Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Name:</td>\n\t\t\t\t<td><input name=\"icName\" value=\"<%=p.getIcName()%>\" type=\"text\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Address:</td>\n\t\t\t\t<td><input name=\"icAddress1\" value=\"<%=p.getIcAddress1()%>\"\n\t\t\t\t\ttype=\"text\"><br />\n\t\t\t\t<input name=\"icAddress2\" value=\"<%=p.getIcAddress2()%>\" type=\"text\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">City:</td>\n\t\t\t\t<td><input name=\"icCity\" value=\"<%=p.getIcCity()%>\" type=\"text\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">State:</td>\n\t\t\t\t<td><itrust:state name=\"icState\" value=\"<%=p.getIcState()%>\" />\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Zip:</td>\n\t\t\t\t<td><input name=\"icZip1\" value=\"<%=p.getIcZip1()%>\"\n\t\t\t\t\tmaxlength=\"5\" type=\"text\" size=\"5\"> - <input name=\"icZip2\"\n\t\t\t\t\tvalue=\"<%=p.getIcZip2()%>\" maxlength=\"4\" type=\"text\" size=\"4\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t\t<td><input name=\"icPhone1\" value=\"<%=p.getIcPhone1()%>\"\n\t\t\t\t\ttype=\"text\" size=\"3\" maxlength=\"3\"> - <input\n\t\t\t\t\tname=\"icPhone2\" value=\"<%=p.getIcPhone2()%>\" type=\"text\" size=\"3\"\n\t\t\t\t\tmaxlength=\"3\"> - <input name=\"icPhone3\"\n\t\t\t\t\tvalue=\"<%=p.getIcPhone3()%>\" type=\"text\" size=\"4\" maxlength=\"4\">\n\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Insurance ID:</td>\n\t\t\t\t<td><input name=\"icID\" value=\"<%=p.getIcID()%>\" type=\"text\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</td>\n\t</tr>\n\t<tr height=\"15px\">\n\t\t<td colspan=3>&nbsp;</td>\n\t</tr>\n\t<tr>\n\t\t<td valign=\"top\">\n\t\t<table class=\"fTable\" align=center style=\"width: 350px;\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=2>Authentication Information</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Security Question:</td>\n\t\t\t\t<td><input name=\"question\" value=\"<%=s.getQuestion()%>\"\n\t\t\t\t\ttype=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Security Answer:</td>\n\t\t\t\t<td><input name=\"answer\" value=\"<%=s.getAnswer()%>\"\n\t\t\t\t\ttype=\"password\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Confirm Security Answer:</td>\n\t\t\t\t<td><input name=\"confirmAnswer\" value=\"<%=s.getAnswer()%>\"\n\t\t\t\t\ttype=\"password\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</td>\n\t\t<td width=\"15px\">&nbsp;</td>\n\t\t<td valign=\"top\">\n\t\t<table class=\"fTable\" align=center style=\"width: 350px;\">\n\t\t\t<tr>\n\t\t\t\t<th colspan=2>Emergency Contact</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Name:</td>\n\t\t\t\t<td><input name=\"emergencyName\"\n\t\t\t\t\tvalue=\"<%=p.getEmergencyName()%>\" type=\"text\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td class=\"subHeaderVertical\">Phone:</td>\n\t\t\t\t<td><input name=\"emergencyPhone1\"\n\t\t\t\t\tvalue=\"<%=p.getEmergencyPhone1()%>\" type=\"text\" size=\"3\"\n\t\t\t\t\tmaxlength=\"3\"> - <input name=\"emergencyPhone2\"\n\t\t\t\t\tvalue=\"<%=p.getEmergencyPhone2()%>\" type=\"text\" size=\"3\"\n\t\t\t\t\tmaxlength=\"3\"> - <input name=\"emergencyPhone3\"\n\t\t\t\t\tvalue=\"<%=p.getEmergencyPhone3()%>\" type=\"text\" size=\"4\"\n\t\t\t\t\tmaxlength=\"4\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</td>\n\t</tr>\n</table>\n<br />\n<div align=\"center\"><input type=\"submit\" name=\"action\"\n\tstyle=\"font-size: 16pt; font-weight: bold;\" value=\"Edit Patient Record\">\n<br />\n<br />\nNote: in order to set your password, use the \"Reset Password\" link at\nthe login page.</div>\n</form>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d40"},"name":"src/edu/ncsu/csc/itrust/action/SetSecurityQuestionAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d3e"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d43"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.beans.SecurityQA;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.SecurityQAValidator;\n\n/**\n * Handles setting and retrieving the security questions/answers for users Used by\n * patient/editMyDemographics.jsp, staff/editMyDemographics.jsp, staff/editPersonnell.jsp\n * \n * @author laurenhayward\n * \n */\npublic class SetSecurityQuestionAction {\n\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Sets up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param rLoggedInMID The MID of the user who is setting their security question.\n\t * @throws iTrustException\n\t */\n\tpublic SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tloggedInMID = checkMID(rLoggedInMID);\n\t}\n\n\t/**\n\t * Updates information in the database from the information held in the SecurityQA bean passed as a param\n\t * \n\t * @param a\n\t *            SecurityQuestionBean that holds new information\n\t * @throws Exception\n\t */\n\tpublic void updateInformation(SecurityQA a) throws Exception {\n\t\tSecurityQAValidator sqav = new SecurityQAValidator();\n\t\tsqav.validate(a);\n\t\tauthDAO.setSecurityQuestionAnswer(a.getQuestion(), a.getAnswer(), loggedInMID);\n\t}\n\n\t/**\n\t * Returns a SecurityQA bean holding the security info for the currently logged in user\n\t * \n\t * @return SecurityQA for loggedInMid\n\t * @throws iTrustException\n\t */\n\tpublic SecurityQA retrieveInformation() throws iTrustException {\n\t\tSecurityQA toRet = new SecurityQA();\n\t\ttoRet.setAnswer(authDAO.getSecurityAnswer(loggedInMID));\n\t\ttoRet.setQuestion(authDAO.getSecurityQuestion(loggedInMID));\n\t\treturn toRet;\n\t}\n\t/**\n\t * Checks to make sure the MID exists in iTrust\n\t * \n\t * @param mid MID to check\n\t * @return returns the MID if the user is valid, otherwise, throws an exception\n\t * @throws iTrustException\n\t */\n\n\tprivate long checkMID(long mid) throws iTrustException {\n\t\tif (!authDAO.checkUserExists(mid))\n\t\t\tthrow new iTrustException(\"MID \" + mid + \" is not a user!\");\n\t\treturn mid;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d42"},"name":"src/edu/ncsu/csc/itrust/action/SearchUsersAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d41"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.PatientBean;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.exception.DBException;\n\n\npublic class SearchUsersAction {\n\tprivate PatientDAO patientDAO;\n\tprivate PersonnelDAO personnelDAO;\n\n\n\t/**\n\t * Set up defaults\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the user who is performing the search.\n\t */\n\tpublic SearchUsersAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t}\n\t\n\n\t/**\n\t * Searches for all personnel with the first name and last name specified in the parameter list.\n\t * @param firstName The first name to be searched.\n\t * @param lastName The last name to be searched.\n\t * @return A java.util.List of PersonnelBeans for the users who matched.\n\t */\n\tpublic List<PersonnelBean> searchForPersonnelWithName(String firstName, String lastName) {\n\t\t\n\t\ttry {\t\n\t\t\tif(\"\".equals(firstName))\n\t\t\t\tfirstName = \"%\";\n\t\t\tif(\"\".equals(lastName))\n\t\t\t\tlastName = \"%\";\n\t\t\treturn personnelDAO.searchForPersonnelWithName(firstName, lastName);\n\t\t}\n\t\tcatch (DBException e) {\n\t\t\tSystem.out.println(\"DB Exception from SearchUsersAction\");\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t/**\n\t * Search for all patients with first name and last name given in parameters.\n\t * @param firstName The first name of the patient being searched.\n\t * @param lastName The last name of the patient being searched.\n\t * @return A java.util.List of PatientBeans\n\t */\n\tpublic List<PatientBean> searchForPatientsWithName(String firstName, String lastName) {\n\t\n\t\ttry {\t\n\t\t\tif(\"\".equals(firstName))\n\t\t\t\tfirstName = \"%\";\n\t\t\tif(\"\".equals(lastName))\n\t\t\t\tlastName = \"%\";\n\t\t\treturn patientDAO.searchForPatientsWithName(firstName, lastName);\n\t\t}\n\t\tcatch (DBException e) {\n\t\t\tSystem.out.println(\"DB Exception from SearchUsersAction\");\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d44"},"name":"src/edu/ncsu/csc/itrust/action/EditPersonnelAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d43"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport edu.ncsu.csc.itrust.action.base.PersonnelBaseAction;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\nimport edu.ncsu.csc.itrust.validate.PersonnelValidator;\n\n/**\n * Edits the designated personnel Used by admin/editPersonnel.jsp, staff/editMyDemographics.jsp,\n * editPersonnel.jsp\n * \n * @author laurenhayward\n * \n */\npublic class EditPersonnelAction extends PersonnelBaseAction {\n\tprivate long loggedInMID;\n\tprivate PersonnelDAO personnelDAO;\n\tprivate TransactionDAO transDAO;\n\tprivate AuthDAO authDAO;\n\tprivate PersonnelValidator validator = new PersonnelValidator();;\n\n\t/**\n\t * Super class validates the patient id\n\t * \n\t * @param factory The DAOFactory used to create the DAOs for this action.\n\t * @param loggedInMID The MID of the user editing this personnel.\n\t * @param pidString The ID of the user being edited.\n\t * @throws iTrustException\n\t */\n\tpublic EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\n\t\tsuper(factory, pidString);\n\n\t\tthis.authDAO = factory.getAuthDAO();\n\t\tlong pidlong = Long.parseLong(pidString);\n\t\tRole editor = authDAO.getUserRole(loggedInMID);\n\t\tRole editing = authDAO.getUserRole(pidlong);\n\n\t\tif (editor == editing && pidlong != loggedInMID)\n\t\t\tthrow new iTrustException(\"You can only edit your own demographics!\");\n\t\telse if (editor == Role.HCP && editing == Role.ADMIN || editor == Role.UAP && editing == Role.HCP\n\t\t\t\t|| editor == Role.ADMIN && editing == Role.UAP)\n\t\t\tthrow new iTrustException(\"You are not authorized to edit this record!\");\n\n\t\tthis.personnelDAO = factory.getPersonnelDAO();\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.loggedInMID = loggedInMID;\n\t}\n\n\t/**\n\t * Takes information from the personnelForm param and updates the patient\n\t * \n\t * @param personnelForm\n\t *            PersonnelBean with new information\n\t * @throws iTrustException\n\t * @throws FormValidationException\n\t */\n\tpublic void updateInformation(PersonnelBean personnelForm) throws iTrustException,\n\t\t\tFormValidationException {\n\t\tpersonnelForm.setMID(pid);\n\t\tvalidator.validate(personnelForm);\n\t\tpersonnelDAO.editPersonnel(personnelForm);\n\t\ttransDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID);\n\t}\n\t\n\tpublic void editMessageFilter(String filter) throws iTrustException, FormValidationException {\n\t\tPersonnelBean b = personnelDAO.getPersonnel(this.getPid());\n\t\tb.setMessageFilter(filter);\n\t\tthis.updateInformation(b);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d49"},"name":"WebRoot/auth/patient/viewVisitedHCPs.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d48"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4b"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4d"}]],"contents":"<%@taglib uri=\"/WEB-INF/tags.tld\" prefix=\"itrust\" %>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n\n<%@page import=\"java.util.List\"%>\n<%@page import=\"java.util.ArrayList\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.DAOFactory\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.HCPVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.OfficeVisitBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.iTrustException\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - My Providers\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<script type=\"text/javascript\">\n\tfunction removeHCP(HCPID,formID) {\n\t\tdocument.getElementById(\"removeID\").value = HCPID;\n\t\tdocument.getElementById(formID).submit();\n\t}\n</script>\n\n<%\nPatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue());\nString[] designateHCPs = request.getParameterValues(\"doctor\");\nString filterName = request.getParameter(\"filter_name\");\nString filterSpecialty = request.getParameter(\"filter_specialty\");\nString filterZip = request.getParameter(\"filter_zip\");\nString removeID = request.getParameter(\"removeID\");\n\nboolean filtered = false;\n\nViewVisitedHCPsAction action = new ViewVisitedHCPsAction(DAOFactory.getProductionInstance(),loggedInMID.longValue());\nList<HCPVisitBean> hcpVisits = action.getVisitedHCPs();\n\nString confirm = \"\";\ntry {\n\tif (removeID != null && !removeID.equals(\"\")) {\n\t\tconfirm = action.undeclareHCP(removeID);\n\t}\n\telse if (designateHCPs != null && !designateHCPs[0].equals(\"\")) {\n\t\tfor (String designateHCP : designateHCPs) {\n\t\t\tconfirm = action.declareHCP(designateHCP);\n\t\t}\n\t}\n}\ncatch (iTrustException ie) {\n%>\n<span ><%=ie.getMessage()%></span>\n<% \n}\nif(!\"\".equals(confirm)){%><span><%=confirm%></span><%}\n\nList<PersonnelBean> personnel = null;\nif (filterName != null && !filterName.equals(\"\")) {\n\tfiltered = true;\n\tpersonnel = action.filterHCPList(filterName, filterSpecialty, filterZip);\n}\n \n%>\n\n\n<br />\n\n<div align=center>\n<% if (!filtered) { %>\n\t<h3>Provider list for <%=patient.getFullName()%></h3>\n\t<br />\n\n\t<form name=\"mainForm\" id=\"mainForm\" action=\"viewVisitedHCPs.jsp\" method=\"post\" onSubmit=\"return false;\" target=\"_top\">\n\t\t<input type=\"hidden\" id=\"removeID\" name=\"removeID\" value=\"\" />\n\n\t\t<table id=\"hcp_table\" class=\"fTable\" style=\"text-align: center;\">\n\t\t\t<tr>\n\t\t\t\t<th>HCP Name</th>\n\t\t\t\t<th>Specialty</th>\n\t\t\t\t<th>Address</th>\n\t\t\t\t<th>Date of Office Visit</th>\n\t\t\t\t<th>Designated HCP?</th>\n\t\t\t</tr>\n\n<%\n\t\n\tint i = 0; \n\tfor (HCPVisitBean vb: hcpVisits) { \n%>\n\t\t\t<tr>\n\t\t\t\t<td><%=vb.getHCPName()%></td>\n\t\t\t\t<td><%=vb.getHCPSpecialty()%></td>\n\t\t\t\t<td><%=vb.getHCPAddr()%></td>\n\t\t\t\t<td><%=vb.getOVDate()%></td>\n\t\t\t\t<td>\n\t\t\t\t\t<input name=\"doctor\" value=\"<%=vb.getHCPName()%>\" \n\t\t\t\t\t\t\ttype=\"checkbox\"<%=vb.isDesignated()?\"checked=\\\"checked\\\"\":\"\"%> \n\t\t\t\t\t\t\tonClick=\"if(document.getElementsByName('doctor')[<%=i%>].checked) {this.form.submit();} else {removeHCP('<%=vb.getHCPName()%>', 'mainForm');}\"/>\n\t\t\t\t</td>\n\t\t\t</tr> \n<%\n\t\ti++;\n\t}\n\n\t\n\t\n%>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"5\" style=\"color: #CC3333; text-align: right; font-weight: bold; font-size: 12px;\">\n\t\t\t\t\tSelect checkbox to update designated HCP\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</form>\n<%\n} \nelse {\n%>\n\n\t<form name=\"filterForm\" id=\"filterForm\" action=\"viewVisitedHCPs.jsp\" method=\"post\" onSubmit=\"return false;\" target=\"_top\">\n\t\t<table id=\"filter_hcp_table\" class=\"fTable\">\n\t\t\t<tr>\n\t\t\t\t<th>HCP Name</th>\n\t\t\t\t<th>Specialty</th>\n\t\t\t\t<th>Address</th>\n\t\t\t\t<th>Designated HCP?</th>\n\t\t\t</tr>\n<% \n\tList<PersonnelBean> added = null;\n\tif (null != personnel) {\n\t\tint i = 0; \n\t\tfor (PersonnelBean ele: personnel) {\n\t\t\n%>\n\t\t\t<tr>\n\t\t\t\t<td><%=ele.getFullName() %></td>\n\t\t\t\t<td><%=ele.getSpecialty() == null?\"none\":ele.getSpecialty()%></td>\n\t\t\t\t<td><%=new String(ele.getStreetAddress1() +\" \"+ ele.getStreetAddress2() +\" \"+ ele.getCity() +\", \"+ ele.getState() +\" \"+ ele.getZip()) %></td>\n\t\t\t\t<td>\n\t\t\t\t\t<input name=\"doctor\" value=\"<%=ele.getFullName()%>\" \n\t\t\t\t\t\t\ttype=\"checkbox\"<%=action.checkDeclared(ele.getMID())?\"checked=\\\"checked\\\"\":\"\"%> \n\t\t\t\t\t\t\tonClick=\"if(document.getElementsByName('doctor')[<%=i%>].checked) {this.form.submit();} else {removeHCP('<%=ele.getFullName()%>','filterForm');}\"/>\n\t\t\t\t</td>\n\t\t\t</tr> \n<%\n\n\t\t\ti++;\n\t\t\t\n\t\t}\n\t\n\t\n\t\t\n\t}\n%>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"5\" style=\"color: #CC3333; text-align: right; font-weight: bold; font-size: 12px;\">\n\t\t\t\t\tSelect checkbox to update designated HCP\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t\n\t\t<input type=\"hidden\" id=\"removeID\" name=\"removeID\" value=\"\" >\n\t</form>\n\n<%\n}\n%>\n</div>\n\n<br /><br />\n<form id=\"searchForm\" action=\"viewVisitedHCPs.jsp\" method=\"post\">\n\t<div align=center>\n\t<table class=\"fTable\" style=\"border: none;\" border=0>\n\t\t<tr>\n\t\t\t<th colspan=2>Search HCPs</th>\n\t\t</tr>\n\t\t<tr style=\"text-align: left;\">\n\t\t\t<td class=\"subHeaderVertical\">Last Name:</td>\n\t\t\t<td ><input type=\"text\" name=\"filter_name\" size=\"30\" maxlength=\"255\" ></td>\n\t\t</tr>\n\t\t<tr style=\"text-align: left;\">\n\t\t\t<td class=\"subHeaderVertical\">Specialty:</td>\n\t\t\t<td ><input type=\"text\" name=\"filter_specialty\" size=\"30\" maxlength=\"255\" ></td>\n\t\t</tr>\n\t\t<tr style=\"text-align: left;\">\n\t\t\t<td class=\"subHeaderVertical\">Zip Code: </td>\n\t\t\t<td><input type=\"text\" name=\"filter_zip\" size=\"10\" maxlength=\"10\"></td>\n\t\t</tr>\n\t</table>\n\t<br />\n\t<input type=\"submit\" name=\"update_filter\" value=\"Search\">\n\t</div>\n</form>\n\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d4a"},"name":"src/edu/ncsu/csc/itrust/action/ViewVisitedHCPsAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d48"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4b"}],["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4d"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.beans.OfficeVisitBean;\nimport edu.ncsu.csc.itrust.beans.HCPVisitBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Action class for ViewVisitedHCPs.jsp\n *\n */\npublic class ViewVisitedHCPsAction {\n\n\tprivate long patientMID;\n\tprivate PersonnelDAO docDAO;\n\tprivate OfficeVisitDAO visitDAO;\n\tprivate PatientDAO patientDAO;\n\tprivate ArrayList<HCPVisitBean> visits;\n\tprivate DeclareHCPAction declareAction; \n\tprivate ArrayList<PersonnelBean> filterList;\n\t\n\t/**\n\t * Set up defaults \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person viewing the visited HCPs.\n\t */\n\tpublic ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {\n\t\tpatientMID = loggedInMID;\n\t\tdocDAO = factory.getPersonnelDAO();\n\t\tvisitDAO = factory.getOfficeVisitDAO();\n\t\tpatientDAO = factory.getPatientDAO();\n\t\t\n\t\tvisits = new ArrayList<HCPVisitBean>();\n\t\tdeclareAction = new DeclareHCPAction(factory, loggedInMID);\n\t\tfilterList = new ArrayList<PersonnelBean>();\n\t}\n\t\n\t/**\n\t * Adds all the office visits to a global array\n\t * \n\t * @throws iTrustException\n\t */\n\tprivate void processOfficeVisits() throws iTrustException {\n\t\t\n\t\ttry {\n\t\t\tList<OfficeVisitBean> ovlist = visitDAO.getAllOfficeVisits(patientMID);\n\t\t\tHCPVisitBean visitBean;\n\t\t\tList<PersonnelBean> dhcps = patientDAO.getDeclaredHCPs(patientMID);\n\t\t\tboolean tmp;\n\t\t\tPersonnelBean pb;\n\t\t\tArrayList<PersonnelBean> removeIDs = new ArrayList<PersonnelBean>();\n\t\t\t\n\t\t\tfor (OfficeVisitBean ov: ovlist) {\n\t\t\t\tvisitBean = new HCPVisitBean();\n\t\t\t\tpb = docDAO.getPersonnel(ov.getHcpID());\n\t\t\t\t\n\t\t\t\tvisitBean.setHCPMID(ov.getHcpID());\n\t\t\t\tvisitBean.setHCPName(pb.getFullName());\n\t\t\t\tvisitBean.setOVDate(ov.getVisitDateStr());\n\t\t\t\tvisitBean.setHCPSpecialty(pb.getSpecialty());\n\t\t\t\tvisitBean.setHCPAddr(pb.getStreetAddress1() +\" \"+ pb.getStreetAddress2() +\" \"+ pb.getCity() +\", \"+ pb.getState() +\" \"+ pb.getZip());\n\t\t\t\t\t\t\t\t\n\t\t\t\tif (true == (tmp = patientDAO.checkDeclaredHCP(patientMID, ov.getHcpID()))) {\n\t\t\t\t\tvisitBean.setDesignated(tmp);\n\t\t\t\t\tif (!dhcps.isEmpty()) {\n\t\t\t\t\t\tfor (PersonnelBean hcp : dhcps) {\n\t\t\t\t\t\t\tif (hcp.getMID() == ov.getHcpID()) {\n\t\t\t\t\t\t\t\tremoveIDs.add(hcp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!removeIDs.isEmpty()) {\n\t\t\t\t\t\t\tfor (PersonnelBean pbean: removeIDs) {\n\t\t\t\t\t\t\t\tdhcps.remove(pbean);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvisits.add(visitBean);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfor (PersonnelBean hcp : dhcps) {\n\t\t\t\tvisitBean = new HCPVisitBean();\n\t\t\t\tvisitBean.setHCPMID(hcp.getMID());\n\t\t\t\tvisitBean.setHCPName(hcp.getFullName());\n\t\t\t\tvisitBean.setOVDate(\"\");\n\t\t\t\tvisitBean.setHCPSpecialty(hcp.getSpecialty());\n\t\t\t\tvisitBean.setHCPAddr(hcp.getStreetAddress1() +\" \"+ hcp.getStreetAddress2() +\" \"+ hcp.getCity() +\", \"+ hcp.getState() +\" \"+ hcp.getZip());\n\t\t\t\tvisitBean.setDesignated(true);\n\t\t\t\tvisits.add(visitBean);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tcatch (DBException dbe) {\n\t\t\tthrow new iTrustException(dbe.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns a list of all the visited HCPs\n\t * @return list of all the visited HCPs\n\t */\n\t\n\tpublic List<HCPVisitBean> getVisitedHCPs() {\n\t\t\n\t\ttry {\n\t\t\tprocessOfficeVisits();\n\t\t\n\t\t\tfor(int i = 0; i<visits.size(); i++){\n\t\t\t\tfor(int j = i+1; j<visits.size(); j++){\n\t\t\t\t\tif(visits.get(i).getHCPMID()==visits.get(j).getHCPMID()){\n\t\t\t\t\t\tvisits.remove(visits.get(j));\n\t\t\t\t\t\tj--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (iTrustException ie) {\n\t\t\t\n\t\t}\n\t\t\t\n\t\treturn visits;\n\t}\n\t\n\t/**\n\t * Set a given HCP as undeclared\n\t * \n\t * @param name HCP to undeclare\n\t * @return An empty string.\n\t * @throws iTrustException\n\t */\n\tpublic String undeclareHCP(String name) throws iTrustException {\n\n\t\tHCPVisitBean remove = null;\n\t\t\n\t\tfor (HCPVisitBean visit: visits) {\n\t\t\tif (0 == visit.getHCPName().toLowerCase().compareTo(name.toLowerCase())) {\n\t\t\t\tLong mid = Long.valueOf(visit.getHCPMID());\n\n\t\t\t\t//if (patientDAO.checkDeclaredHCP(patientMID, visit.getHCPMID())) {\n\t\t\t\t\tdeclareAction.undeclareHCP(mid.toString());\n\t\t\t\t//}\n\t\t\t\tvisit.setDesignated(false);\n\t\t\t\t\n\t\t\t\tif (0 == visit.getOVDate().compareTo(\"\")) {\n\t\t\t\t\tremove = visit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (null != remove) {\n\t\t\tvisits.remove(remove);\n\t\t}\n\t\t\t\t\n\t\treturn \"\";\n\t}\n\t\n\t/**\n\t * Set a given HCP as declared\n\t * \n\t * @param name HCP to declare\n\t * @return An empty string.\n\t * @throws iTrustException\n\t */\n\tpublic String declareHCP(String name) throws iTrustException {\n\t\tboolean match = false;\n\t\tfor (HCPVisitBean visit: visits) {\n\t\t\tif (0 == visit.getHCPName().toLowerCase().compareTo(name.toLowerCase())) {\n\t\t\t\tmatch = true;\n\t\t\t\tLong mid = Long.valueOf(visit.getHCPMID());\n\t\t\t\tif (!patientDAO.checkDeclaredHCP(patientMID, visit.getHCPMID())) {\n\t\t\t\t\tdeclareAction.declareHCP(mid.toString());\n\t\t\t\t}\n\t\t\t\tvisit.setDesignated(true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!match) {\n\t\t\t\tList<PersonnelBean> doclist = docDAO.getAllPersonnel();\n\t\t\t\tfor (PersonnelBean ele: doclist) {\n\t\t\t\t\tif (0 == name.compareTo(ele.getFullName())) {\n\t\t\t\t\t\tHCPVisitBean visitBean;\n\t\t\t\t\t\tvisitBean = new HCPVisitBean();\n\t\t\t\t\t\tvisitBean.setHCPMID(ele.getMID());\n\t\t\t\t\t\tvisitBean.setHCPName(ele.getFullName());\n\t\t\t\t\t\tvisitBean.setOVDate(\"\");\n\t\t\t\t\t\tvisitBean.setHCPSpecialty(ele.getSpecialty());\n\t\t\t\t\t\tvisitBean.setHCPAddr(ele.getStreetAddress1() +\" \"+ ele.getStreetAddress2() +\" \"+ ele.getCity() +\", \"+ ele.getState() +\" \"+ ele.getZip());\n\t\t\t\t\t\t\n\t\t\t\t\t\tvisitBean.setDesignated(true);\n\t\t\t\t\n\t\t\t\t\t\tLong mid = Long.valueOf(ele.getMID());\n\t\t\t\t\t\tif (!patientDAO.checkDeclaredHCP(patientMID, mid)) {\n\t\t\t\t\t\t\tdeclareAction.declareHCP(mid.toString());\n\t\t\t\t\t\t\tvisits.add(visitBean);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\t/**\n\t * Check to see if a given HCP is declared\n\t * @param mid HCP to check\n\t * @return true if the HCP is declared, otherwise false\n\t */\n\tpublic boolean checkDeclared(long mid) {\n\t\t\n\t\ttry {\n\t\t\treturn patientDAO.checkDeclaredHCP(patientMID, mid);\n\t\t} catch (DBException dbe) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t/**\n\t * Filter the list of HCPs by last name, specialty, or zip code. \n\t * @param doc sort by last name\n\t * @param specialty sort by specialty\n\t * @param zip sort by zip\n\t * @return sorted list of HCPs\n\t */\n\tpublic List<PersonnelBean> filterHCPList(String doc, String specialty, String zip) {\n\t\tList<PersonnelBean> doclist;\n\t\t\t\n\t\ttry {\n\t\t\tdoclist = docDAO.getAllPersonnel();\n\t\t\tfor (PersonnelBean ele: doclist) {\n\t\t\t\tif (ele.getLastName().toLowerCase().contains(doc.toLowerCase())) {\n\t\t\t\t\tif (null != specialty && !specialty.equals(\"\")) {\n\t\t\t\t\t\tif (0 == specialty.toLowerCase().compareTo(ele.getSpecialty().toLowerCase())) {\n\t\t\t\t\t\t\tif (null != zip && !zip.equals(\"\")) {\n\t\t\t\t\t\t\t\tif (ele.getZip().contains(zip.substring(0, 2))) {\n\t\t\t\t\t\t\t\t\tfilterList.add(ele);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\t\n\t\t\t\t\t\t\t\tfilterList.add(ele);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (null != zip && !zip.equals(\"\")) {\n\t\t\t\t\t\tif (ele.getZip().contains(zip.substring(0, 2))) {\n\t\t\t\t\t\t\tfilterList.add(ele);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfilterList.add(ele);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (DBException dbe) {\n\t\t\t\n\t\t}\n\t\treturn filterList;\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c521258db2dac01e7d4c"},"name":"src/edu/ncsu/csc/itrust/action/DeclareHCPAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4b"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.PersonnelBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.AuthDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.PatientDAO;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.Role;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.iTrustException;\n\n/**\n * Used by the patient to declare HCPs as \"designated\", in editHCPs.jsp.\n * \n * @author Andy Meneely\n * \n */\npublic class DeclareHCPAction {\n\tprivate TransactionDAO transDAO;\n\tprivate PatientDAO patientDAO;\n\tprivate AuthDAO authDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Sets up defaults\n\t * \n\t * @param factory The DAO factory to be used for generating the DAOs for this action.\n\t * @param loggedInMID\n\t *            This patient\n\t * @author Andy Meneely\n\t */\n\tpublic DeclareHCPAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t\tthis.patientDAO = factory.getPatientDAO();\n\t\tthis.authDAO = factory.getAuthDAO();\n\t}\n\n\t/**\n\t * Lists the declared HCPs for this current patient\n\t * \n\t * @return Returns a list of the declared HCPs\n\t * @throws iTrustException\n\t * @author Andy Meneely\n\t */\n\tpublic List<PersonnelBean> getDeclaredHCPS() throws iTrustException {\n\t\treturn patientDAO.getDeclaredHCPs(loggedInMID);\n\t}\n\n\t/**\n\t * Validate an HCP's MID and declare them, if possible\n\t * \n\t * @param hcpStr\n\t *            The MID of an HCP to declare\n\t * @return A status message,\n\t * @throws iTrustException\n\t * @author Andy Meneely\n\t */\n\tpublic String declareHCP(String hcpStr) throws iTrustException {\n\t\ttry {\n\t\t\tlong hcpID = Long.valueOf(hcpStr);\n\t\t\tif (authDAO.getUserRole(hcpID) != Role.HCP)\n\t\t\t\tthrow new iTrustException(\"This user is not a licensed healthcare professional!\");\n\n\t\t\tboolean confirm = patientDAO.declareHCP(loggedInMID, hcpID);\n\n\t\t\tif (confirm) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.DECLARE_HCP, loggedInMID, hcpID,\n\t\t\t\t\t\t\"patient declared hcp\");\n\t\t\t\treturn \"HCP successfully declared\";\n\t\t\t} else\n\t\t\t\treturn \"HCP not declared\";\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new iTrustException(\"HCP's MID not a number\");\n\t\t} \n\t}\n\n\t/**\n\t * Validate an HCP's MID and undeclare them, if possible\n\t * \n\t * @param input\n\t *            The MID of an HCP to undeclare\n\t * @return\n\t * @throws iTrustException\n\t * @author Andy Meneely\n\t */\n\tpublic String undeclareHCP(String input) throws iTrustException {\n\t\ttry {\n\t\t\tlong hcpID = Long.valueOf(input);\n\t\t\tboolean confirm = patientDAO.undeclareHCP(loggedInMID, hcpID);\n\t\t\tif (confirm) {\n\t\t\t\ttransDAO.logTransaction(TransactionType.DECLARE_HCP, loggedInMID, hcpID,\n\t\t\t\t\t\t\"patient undeclared hcp\");\n\t\t\t\treturn \"HCP successfully undeclared\";\n\t\t\t} else\n\t\t\t\treturn \"HCP not undeclared\";\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new iTrustException(\"HCP's MID not a number\");\n\t\t} \n\t}\n}\n"}
{"_id":{"$oid":"5ea8c522258db2dac01e7d4f"},"name":"WebRoot/auth/patient/viewAccessLog.jsp","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4e"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d51"}]],"contents":"<%@page import=\"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction\"%>\n<%@page import=\"java.util.List\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.TransactionBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.exception.FormValidationException\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PersonnelBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO\"%>\n<%@page import=\"edu.ncsu.csc.itrust.beans.PatientBean\"%>\n<%@page import=\"edu.ncsu.csc.itrust.dao.mysql.PatientDAO\"%>\n<%@page errorPage=\"/auth/exceptionHandler.jsp\" %>\n<%@page import=\"java.util.ArrayList\"%>\n\n<%@include file=\"/global.jsp\"%>\n\n<%\n\tpageTitle = \"iTrust - View My Access Log\";\n%>\n\n<%@include file=\"/header.jsp\"%>\n\n<%\nsession.removeAttribute(\"personnelList\");\n\n\tViewMyAccessLogAction action = new ViewMyAccessLogAction(DAOFactory.getProductionInstance(), loggedInMID);\n\tList<TransactionBean> accesses;\n\ttry{\n\t\taccesses = action.getAccesses(request.getParameter(\"startDate\"), request.getParameter(\"endDate\"), \"role\".equals(request.getParameter(\"sortBy\")));\n\t} catch(FormValidationException e){\n\t\te.printHTML(pageContext.getOut());\n\t\taccesses = action.getAccesses(null,null,false);\n\t}\n\t\n\t\n%>\n\n<br />\n<table class=\"fTable\" align='center'>\n\t<tr>\n\t\t<th><a href=\"#\" onClick=\"javascript:sortBy('date');\">Date</a></th>\n\t\t<th>Accessor</th>\n\t\t<th><a href = \"#\" onClick=\"javascript:sortBy('role');\">Role</a></th>\n\t\t<th>Description</th>\n\t</tr>\n<%\n\tboolean hasData = false;\n\tList<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();\n\tint index = 0;\n\tfor(TransactionBean t : accesses){ \n\t\tPersonnelBean hcp = new PersonnelDAO(DAOFactory.getProductionInstance()).getPersonnel(t.getLoggedInMID());\n\t\tif (hcp != null) {\n\t\t\thasData = true;\n\n\t%>\n\t\t\t<tr>\n\t\t\t\t<td ><%=t.getTimeLogged()%></td>\n\t\t\t\t<td ><a href=\"/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>\"><%=hcp.getFullName()%></a></td>\n\t\t\t\t<td><%=t.getRole() %></td>\n\t\t\t\t<td ><%=t.getAddedInfo()%> (<%=t.getTransactionType().getCode()%>)</td>\t\t\n\t\t\t</tr>\n\t<%\n\t\tPersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(t.getLoggedInMID());\n\t\tpersonnelList.add(personnel);\n\t\tindex++;\n\t\t\n\t\t\t}\n\t\t\telse if(\"Personal Health Representative\".equals(t.getRole())) {\n\t\tPatientBean p = new PatientDAO(DAOFactory.getProductionInstance()).getPatient(t.getLoggedInMID());\n\t%>\n\t\t\t<tr>\n\t\t\t\t<td ><%=t.getTimeLogged()%></td>\n\t\t\t\t<td ><%=p.getFullName()%></td>\n\t\t\t\t<td><%=t.getRole()%></td>\n\t\t\t\t<td ><%=t.getAddedInfo()%> (<%=t.getTransactionType().getCode()%>)</td>\t\t\n\t\t\t</tr>\n\t<%\n\n\t\t}\n\t}\n\tsession.setAttribute(\"personnelList\", personnelList);\n\tif(!hasData) {\n%>\n\t<tr>\n\t\t<td colspan=3 align=\"center\">No Data</td>\n\t</tr>\n<%\n\t}\n\t\n\tString startDate = action.getDefaultStart(accesses);\n\tString endDate = action.getDefaultEnd(accesses);\n\tif(\"role\".equals(request.getParameter(\"sortBy\"))) {\n\t\tstartDate = request.getParameter(\"startDate\");\n\t\tendDate = request.getParameter(\"endDate\");\n\t}\n%>\n</table>\n<br />\n<br />\n\n<form action=\"viewAccessLog.jsp\" method=\"post\">\n\n<input type=\"hidden\" name=\"sortBy\" value=\"\"></input>\n\n<div align=center>\n<table class=\"fTable\" align=\"center\">\n\t<tr class=\"subHeader\">\n\t\t<td>Start Date:</td>\n\t\t<td>\n\t\t\t<input name=\"startDate\" value=\"<%=startDate%>\" size=\"10\">\n\t\t\t<input type=button value=\"Select Date\" onclick=\"displayDatePicker('startDate');\">\n\t\t</td>\n\t\t<td>End Date:</td>\n\t\t<td>\n\t\t\t<input name=\"endDate\" value=\"<%=endDate%>\">\n\t\t\t<input type=button value=\"Select Date\" onclick=\"displayDatePicker('endDate');\">\n\t\t</td>\n\t</tr>\n</table>\n<br />\n<input type=\"submit\" name=\"submit\" value=\"Filter Records\">\n\n</div>\n</form>\n\n<script type='text/javascript'>\nfunction sortBy(dateOrRole) {\n\tdocument.getElementsByName('sortBy')[0].value = dateOrRole;\n\tdocument.forms[0].submit.click();\n}\n\n</script>\n\n<%@include file=\"/footer.jsp\"%>\n"}
{"_id":{"$oid":"5ea8c522258db2dac01e7d50"},"name":"src/edu/ncsu/csc/itrust/action/ViewMyAccessLogAction.java","system":"iTrust","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c521258db2dac01e7d4e"}],["requirement_raw",{"$oid":"5ea8c522258db2dac01e7d51"}]],"contents":"package edu.ncsu.csc.itrust.action;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\nimport edu.ncsu.csc.itrust.beans.TransactionBean;\nimport edu.ncsu.csc.itrust.dao.DAOFactory;\nimport edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\nimport edu.ncsu.csc.itrust.enums.TransactionType;\nimport edu.ncsu.csc.itrust.exception.DBException;\nimport edu.ncsu.csc.itrust.exception.FormValidationException;\n\n/**\n * Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp\n * \n * @author laurenhayward\n * \n */\npublic class ViewMyAccessLogAction {\n\tprivate TransactionDAO transDAO;\n\tprivate long loggedInMID;\n\n\t/**\n\t * Set up\n\t * \n\t * @param factory The DAOFactory used to create the DAOs used in this action.\n\t * @param loggedInMID The MID of the person retrieving the logs.\n\t */\n\tpublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\n\t\tthis.loggedInMID = loggedInMID;\n\t\tthis.transDAO = factory.getTransactionDAO();\n\t}\n\n\t/**\n\t * Returns a list of TransactionBeans between the two dates passed as params\n\t * \n\t * @param lowerDate\n\t *            the first date\n\t * @param upperDate\n\t *            the second date\n\t * @return list of TransactionBeans\n\t * @throws DBException\n\t * @throws FormValidationException\n\t */\n\tpublic List<TransactionBean> getAccesses(String lowerDate, String upperDate, boolean getByRole) throws DBException,\n\t\t\tFormValidationException {\n\t\tList<TransactionBean> accesses;\n\t\tif (lowerDate == null || upperDate == null)\n\t\t\treturn transDAO.getAllRecordAccesses(loggedInMID, getByRole);\n\t\tString message = \"\";\n\t\ttry {\n\t\t\tDate lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\n\t\t\tDate upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\n\t\t\tif (lower.after(upper))\n\t\t\t\tthrow new FormValidationException(\"Start date must be before end date!\");\n\t\t\tmessage = \"for dates between \" + lowerDate + \" and \" + upperDate;\n\t\t\ttransDAO.logTransaction(TransactionType.VIEW_ACCESS_LOG, loggedInMID, 0L, message);\n\t\t\taccesses = transDAO.getRecordAccesses(loggedInMID, lower, upper, getByRole);\n\t\t} catch (ParseException e) {\n\t\t\tthrow new FormValidationException(\"Enter dates in MM/dd/yyyy\");\n\t\t}\n\t\treturn accesses;\n\t}\n\n\t/**\n\t * Returns the date of the first Transaction in the list passed as a param if the list is not empty\n\t * otherwise, returns today's date\n\t * \n\t * @param accesses A java.util.List of TransactionBeans for the accesses.\n\t * @return A String representing the date of the first transaction.\n\t */\n\tpublic String getDefaultStart(List<TransactionBean> accesses) {\n\t\tString startDate = \"\";\n\t\tif (accesses.size() > 0) {\n\t\t\tstartDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(accesses.size() - 1)\n\t\t\t\t\t.getTimeLogged().getTime()));\n\t\t} else {\n\t\t\tstartDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\n\t\t}\n\t\treturn startDate;\n\t}\n\n\t/**\n\t * Returns the date of the last Transaction in the list passed as a param if the list is not empty\n\t * otherwise, returns today's date\n\t * \n\t * @param accesses A java.util.List of TransactionBeans storing the access. \n\t * @return A String representation of the date of the last transaction.\n\t */\n\tpublic String getDefaultEnd(List<TransactionBean> accesses) {\n\t\tString endDate = \"\";\n\t\tif (accesses.size() > 0) {\n\t\t\tendDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(0).getTimeLogged()\n\t\t\t\t\t.getTime()));\n\t\t} else {\n\t\t\tendDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\n\t\t}\n\t\treturn endDate;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694257"},"name":"GestioneBeniCulturaliAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694256"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429d"}]],"contents":"package unisa.gps.etour.control.GestioneBeniCulturali;\n\nimport java.rmi.RemoteException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ **\n  * Class management of cultural heritage unique to Agency\n  *\n  * @ Author Michelangelo De Simone\n  * @ Version 0.1\n  *\n  * © 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npublic class GestioneBeniCulturaliAgenzia extends GestioneBeniCulturaliComune\nimplements IGestioneBeniCulturaliAgenzia\n(\n/ *\n* Constructor of class, richicama and initializes the class of common management\n* /\npublic GestioneBeniCulturaliAgenzia () throws RemoteException\n(\nsuper ();\n)\n\n/ *\n* Implements the method for the elimination of a cultural system.\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # cancellaBeneCulturale (int)\n* /\npublic boolean cancellaBeneCulturale (int pBeneCulturaleID)\nthrows RemoteException\n(\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\nTRY\n(\nreturn (dbbc.cancellaBeneCulturale (pBeneCulturaleID));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ *\n* Implement the method for the insertion of a new cultural object.\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # inserisciBeneCulturale (unisa.gps.etour.bean.BeanBeneCulturale)\n* /\npublic boolean inserisciBeneCulturale (BeanBeneCulturale pBeneCulturale)\nthrows RemoteException\n(\nif (! ControlloBeniCulturali.controllaDatiBeneCulturale (pBeneCulturale))\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n\nTRY\n(\nreturn (dbbc.inserisciBeneCulturale (pBeneCulturale));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ *\n* Implements the method for obtaining all the cultural assets currently in the system.\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # ottieniBeniCulturali ()\n* /\n<BeanBeneCulturale> ottieniBeniCulturali public ArrayList () throws RemoteException\n(\nTRY\n(\nreturn (dbbc.ottieniListaBC ());\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ *\n* Implement the method for changing a cultural asset in the system.\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # modificaBeneCulturale (unisa.gps.etour.bean.BeanBeneCulturale)\n* /\npublic boolean modificaBeneCulturale (BeanBeneCulturale pBeneCulturale)\nthrows RemoteException\n(\nif (! ControlloBeniCulturali.controllaDatiBeneCulturale (pBeneCulturale))\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n\nTRY\n(\nreturn (dbbc.modificaBeneCulturale (pBeneCulturale));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ *\n* Implements the method for adding a tag to a cultural object.\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # aggiungiTagBeneCulturale (int, int)\n* /\npublic boolean aggiungiTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException\n(\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID) | |! (pTagID> 0))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\n/ *\n* This segment of code that actually controls the cultural speficiato\n* Have the tag defined.\n* /\n\n/ *\n* Get all tags to the cultural past for parameter\n* /\nArrayList <BeanTag> tempTag = null;\n\ncontieneTag boolean = false;\n\nTRY\n(\ntempTag = dbtag.ottieniTagBeneCulturale (pBeneCulturaleID);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n\n/ *\n* Here we iterate to find the tag that speficiato, if it is you set a sentry\n* In order not to add a tag twice for the same cultural object.\n* /\nfor (t BeanTag: tempTag)\nif (t.getId () == pTagID)\ncontieneTag = true;\n\nif (! contieneTag)\nTRY\n(\nreturn (dbtag.aggiungeTagBeneCulturale (pBeneCulturaleID, pTagID));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\nreturn false;\n)\n\n/ *\n* Implement the method for removing a tag from a cultural object.\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # rimuoviTagBeneCulturale (int, int)\n* /\npublic boolean rimuoviTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException\n(\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID) | |! (pTagID> 0))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\n/ *\n* This segment of code that actually controls the cultural speficiato\n* Has the specified tag.\n* /\n\n/ *\n* Get all tags to the cultural past for parameter\n* /\nArrayList <BeanTag> tempTag = null;\n\nTRY\n(\ntempTag = dbtag.ottieniTagBeneCulturale (pBeneCulturaleID);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n\n/ *\n* Here we iterate to find the tag that speficiato, if you found the transaction is made\n* Removal of the tag and returns control\n* /\nfor (t BeanTag: tempTag)\n(\nif (t.getId () == pTagID)\n(\nTRY\n(\nreturn (dbtag.cancellaTagBeneCulturale (pBeneCulturaleID, pTagID));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n)\n\nreturn false;\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694258"},"name":"DBBeneCulturale.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694256"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}]],"contents":"package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.repository.IDBBeneCulturale;\nimport unisa.gps.etour.util.Punto3D;\n\npublic class DBBeneCulturale implements IDBBeneCulturale\n(\nprivate ArrayList <BeanBeneCulturale> b;\n\npublic DBBeneCulturale ()\n(\nb = new ArrayList <BeanBeneCulturale> (0);\n)\n\npublic boolean cancellaBeneCulturale (int pIdBene) throws SQLException\n(\nboolean res = false;\n\nfor (int i = 0; i <b.size (); i + +)\nif (b.get (i). getId () == pIdBene)\n(\nb.remove (i);\nres = true;\n)\n\nreturn res;\n)\n\npublic boolean inserisciBeneCulturale (BeanBeneCulturale pBene)\nthrows SQLException\n(\nreturn (b.add (pBene));\n)\n\npublic boolean modificaBeneCulturale (BeanBeneCulturale pBene)\nthrows SQLException\n(\nboolean res = false;\n\nfor (int i = 0; i <b.size (); i + +)\nif (b.get (i). getId () == pBene.getId ())\n(\nb.set (i, pBene);\nreturn true;\n)\n\nreturn res;\n)\n\npublic BeanBeneCulturale ottieniBeneCulturale (int pid) throws SQLException\n(\nBeanBeneCulturale res = null;\n\nfor (int i = 0; i <b.size (); i + +)\nif (b.get (i). getId () == pid)\nres = b.get (i);\n\nreturn res;\n)\n\n<BeanBeneCulturale> ottieniListaBC public ArrayList () throws SQLException\n(\nreturn b;\n)\n\npublic int ottieniNumeroElementiRicerca (String pKeyword,\nArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / TODO Auto-generated method stub\nreturn 0;\n)\n\npublic int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / TODO Auto-generated method stub\nreturn 0;\n)\n\npublic ArrayList <BeanBeneCulturale> search (String pKeyword,\nArrayList <BeanTag> pTags, int pNumPagina,\nint pNumeroElementiPerPagina, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / TODO Auto-generated method stub\nreturn null;\n)\n\n<BeanBeneCulturale> ricercaAvanzata public ArrayList (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, int pNumPagina,\nint pNumeroElementiPerPagina, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / TODO Auto-generated method stub\nreturn null;\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694259"},"name":"IDBBeneCulturale.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694256"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.util.Punto3D;\n\n/ **\n  * Interface for the management of cultural heritage database\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\npublic interface IDBBeneCulturale\n(\n/ **\n* Add a cultural heritage, given input\n*\n* @ Param pBene Cultural Heritage for inclusion in database\n* @ Throws SQLException\n* /\npublic boolean inserisciBeneCulturale (BeanBeneCulturale pBene)\nthrows SQLException;\n\n/ **\n* Modify the information in the cultural\n*\n* @ Param pBene contains the information to modify the database\n* @ Throws SQLException\n* @ Return True if there 'was a modified false otherwise\n* /\npublic boolean modificaBeneCulturale (BeanBeneCulturale pBene)\nthrows SQLException;\n\n/ **\n* Delete a cultural object from the database\n*\n* @ Param ID pIdBene cultural property to delete\n* @ Throws SQLException\n* @ Return True if and 'was deleted false otherwise\n* /\npublic boolean cancellaBeneCulturale (int pIdBene) throws SQLException;\n\n/ **\n* Returns the cultural object with id as input\n*\n* @ Param pId cultural property to be extracted from the database\n* @ Throws SQLException\n* @ Return cultural property obtained from the database\n* /\npublic BeanBeneCulturale ottieniBeneCulturale (int pid) throws SQLException;\n\n/ **\n* Research. Returns the list of cultural property in their name or\n* Description given string as input, filtered according to tags and\n* Maximum distance. The returned list contains the number of goods given as input.\n* To browse the real list, which may contain more 'of\n* Ten elements, you use the paramtro numPagina.\n*\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of the cultural\n* @ Param pTags list of tags used to filter the search. the\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored.\n* @ Param pNumPagina The page number you want to view. O for\n* 1 page (the first 10 results), 1 for 2 page (s\n* Results from 11 to 20) etc ...\n* @ Param pPosizione position of the person who carried out the research\n* @ Param pDistanzaMassima Maximum distance from the user to search for good\n* @ Param pNumeroElementiPerPagina number of items to return per page\n* @ Throws SQLException\n* @ Return list contained ten cultural\n* /\npublic ArrayList <BeanBeneCulturale> search (String pKeyword,\nArrayList <BeanTag> pTags, pNumPagina int, int pNumeroElementiPerPagina, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException;\n\n/ **\n* Advanced Search. Returns the list of cultural goods which have in\n* Name or description given string as input, sorted according to\n* Preferences of tourists and filtered according to the tag and the maximum distance. The\n* Returned list contains the number of goods given as input. To scroll\n* The actual list, which may contain multiple 'items, you\n* Use paramtro numPagina.\n*\n* @ Param ID pIdTurista tourists who carried out the research\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of the cultural\n* @ Param pTags list of tags used to filter the search. the\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored.\n* @ Param pNumPagina The page number you want to view. O for\n* 1 page (the first 10 results), 1 for 2 page (s\n* Results from 11 to 20) etc ...\n* @ Param pPosizione position of the person who carried out the research\n* @ Param pDistanzaMassima Maximum distance from the user to search for good\n* @ Param pNumeroElementiPerPagina number of items to return per page\n* @ Throws SQLException\n* @ Return list contained ten cultural\n* /\n<BeanBeneCulturale> ricercaAvanzata public ArrayList (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, pNumPagina int, int pNumeroElementiPerPagina,\nPunto3D pPosizione, double pDistanzaMassima) throws SQLException;\n\n/ **\n* Method to get the number of elements to search.\n*\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of the cultural\n* @ Param pTags list of tags used to filter the search. the\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored.\n* @ Param pPosizione position of the person who carried out the research\n* @ Param pDistanzaMassima Maximum distance from the user to search for good\n* @ Throws SQLException\n* @ Return number of pages.\n* /\npublic int ottieniNumeroElementiRicerca (String pKeyword,\nArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException;\n\n/ **\n* Method to get the number of elements to search.\n*\n* @ Param identifier pIdTurista tourists who carried out the research\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of the cultural\n* @ Param pTags list of tags used to filter the search. the\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored.\n* @ Param pPosizione position of the person who carried out the research\n* @ Param pDistanzaMassima Maximum distance from the user to search for good\n* @ Throws SQLException\n* @ Return number of pages.\n* /\npublic int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException;\n/ **\n* Returns a list of all cultural\n*\n* @ Throws SQLException\n* @ Return List of all cultural\n* /\n<BeanBeneCulturale> ottieniListaBC public ArrayList () throws SQLException;\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69425a"},"name":"BeniCulturali.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694256"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694265"}]],"contents":"ï»¿\t\npackage unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt .*;\nimport java.awt.event .*;\nimport javax.swing .*;\nimport java.util .*;\nimport javax.swing.border .*;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia;\nimport unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune;\nimport unisa.gps.etour.control.GestioneTag.IGestioneTagComune;\nimport unisa.gps.etour.gui.DeskManager;\nimport unisa.gps.etour.gui.HelpManager;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.MediaVotiRenderer;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.Punto3DRenderer;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.ScrollableTable;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.SitoTableModel;\nimport unisa.gps.etour.util.Punto3D;\nimport java.io.FileNotFoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.util.ArrayList;\n\n/ **\n  * Class that implements the interface for the management of cultural side\n  * Operator Agency.\n  *\n  * @ Author Mario Gallo\n  * @ Version 0.8\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class JInternalFrame extends Beniculturali\n(\nPrivate JDesktopPane JDesktopPane;\nprivate JPanel jContentPane = null;\nPrivate JToolBar BCToolbar = null;\nprivate JButton btnNuovoBC = null;\nprivate JButton btnSchedaBC = null;\nprivate JButton btnEliminaBC = null;\nprivate JButton btnModificaBC = null;\nprivate JPanel rightPanel = null;\nprivate JPanel searchPanel = null;\nprivate JPanel helpPanel = null;\nprivate JScrollPane JScrollPane = null;\nprivate JTable tableBC = null;\nPrivate TagPanel pannelloTag = null;\nprivate JTextPane textGuida = null;\nprivate JTextField nomeBC = null;\nprivate JButton btnRicerca = null;\nprivate JButton btnAzzera = null;\nPrivate DeskManager desktopManager;\n<SchedaBC> private ArrayList children;\nprivate SitoTableModel TableModel;\nPrivate HelpManager bcHelp;\nPrivate IGestioneBeniCulturaliAgenzia gestioneBC;\nPrivate IGestioneTagComune tags;\nprotected IGestioneBeniCulturaliComune ricercaBC;\n\n/ **\n* This is the default constructor.\n* /\npublic Beniculturali ()\n(\nsuper ( \"Cultural Heritage\");\nsetPreferredSize (Home.CHILD_SIZE);\nframeIcon = new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"BC.png\"));\nsetDefaultCloseOperation (JInternalFrame.DO_NOTHING_ON_CLOSE);\nclosable = true;\nresizable = true;\niconable = true;\nmaximizable = true;\n\n/ / Setting up dell'help manager for cultural.\ntextGuida = new JTextPane ();\nTRY\n(\nbcHelp = new HelpManager (Home.URL_HELP + \"BeniCulturali.txt\"\ntextGuida);\n)\ncatch (FileNotFoundException e)\n(\ntextGuida\n. setText ( \"<html> <b> Help not available </ b> </ html>\");\n)\nsetContentPane (getJContentPane ());\n<SchedaBC> children = new ArrayList ();\naddInternalFrameListener (new InternalFrameAdapter ()\n(\n/ *\n* Inclusion of the frame on the desktop desktop retrieves bread bread\n* And desktop manager and initializes the remote objects\n* Management of cultural heritage.\n* /\n\npublic void internalFrameOpened (InternalFrameEvent pEvent)\n(\nPEvent.getInternalFrame JInternalFrame frame = ();\nJDesktopPane frame.getDesktopPane = ();\ndesktopManager = (DeskManager) jDesktopPane.getDesktopManager ();\n\n/ / Setting up objects for remote asset management\n/ / Cultural.\nTRY\n(\nRegistry reg = LocateRegistry.getRegistry (Home.HOST);\ngestioneBC = (IGestioneBeniCulturaliAgenzia) reg\n. lookup ( \"GestioneBeniCulturaliAgenzia\");\ntag = (IGestioneTagComune) reg.lookup (GestioneTagComune \");\nricercaBC = (IGestioneBeniCulturaliComune) reg\n. lookup ( \"GestioneBeniCulturaliComune\");\n/ / Load data.\ncaricaTabella (false);\ncaricaTags ();\n)\n/ *\n* Two exceptions: RemoteException and NotBoundException. The\n* Result is the same. The management is not operable and\n* After the error message window closes.\n* /\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> The dialog management request is closed. </ U> </ h3>\"\n+ \"<p> <b> Possible Causes: </ b>\"\n+ \"<ul> <li> No connection to the network. </ Li>\"\n+ \"Server <li> inactive. </ Li>\"\n+ \"Server <li> clogged. </ Li> </ ul>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\nframe.dispose ();\n)\n)\n\n/ *\n* At the end of the frame displays the dialog\n* Confirmation.\n* /\npublic void internalFrameClosing (InternalFrameEvent pEvent)\n(\n/ / Create the confirmation dialog.\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to close the management of cultural heritage?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"NB will be closed all the windows opened by this administration.\"\nSwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Close\", \"Cancel\");\nint choice = JOptionPane.showInternalOptionDialog (jContentPane,\nroot, \"Confirm closing of Cultural Heritage\",\nJOptionPane.OK_CANCEL_OPTION,\nJOptionPane.QUESTION_MESSAGE, frameIcon, options,\noptions [1]);\n/ *\n* If it is confirmed the closing of management, all\n* Classes \"daughters\" are closed.\n* /\nif (choice == JOptionPane.OK_OPTION)\n(\nfor (int i = 0; i <figli.size (); i + +)\n(\nfigli.get (i). dispose ();\n)\npEvent.getInternalFrame (). dispose ();\n)\n)\n\n));\n)\n\n/ **\n* Update the current model of the table of cultural property with the bean\n* Of the cultural supplied input.\n*\n* @ Param pbc BeanBeneCulturale - the bean with which to update the\n* Model.\n* /\nprotected void updateTableModel (BeanBeneCulturale PBC)\n(\ntableModel.updateBC (PBC);\n)\n\n/ **\n* Closes the tab cultural selected.\n*\n* @ Param pScheda SchedaBC - the cultural card to close.\n* /\nprotected void closeScheda (SchedaBC pScheda)\n(\nfigli.remove (pScheda);\npScheda.dispose ();\n)\n\n/ **\n* This method initializes the content pane of the frame.\n*\n* @ Return javax.swing.JPanel - the content pane.\n* /\nprivate JPanel getJContentPane ()\n(\nif (null == jContentPane)\n(\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (getBCToolbar (), BorderLayout.NORTH);\njContentPane.add (getPannelloDestro (), BorderLayout.EAST);\njContentPane.add (getJScrollPane (), BorderLayout.CENTER);\n)\njContentPane return;\n)\n\n/ **\n* This method initializes the toolbar for features on\n* Management of cultural heritage.\n*\n* @ Return javax.swing.JToolBar - the toolbar for managing assets\n* Cultural.\n* /\nPrivate JToolBar getBCToolbar ()\n(\nif (null == BCToolbar)\n(\nBCToolbar JToolBar = new ();\nBCToolbar.setPreferredSize (new Dimension (1, 50));\nBCToolbar.setFloatable (false);\nBCToolbar.setOrientation (JToolBar.HORIZONTAL);\nBCToolbar.setLayout (null);\nBCToolbar.add (getBtnNuovoBC ());\nBCToolbar.addSeparator ();\nBCToolbar.add (getBtnModificaBC ());\nBCToolbar.addSeparator ();\nBCToolbar.add (getBtnSchedaBC ());\nBCToolbar.addSeparator ();\nBCToolbar.add (getBtnEliminaBC ());\n)\nBCToolbar return;\n)\n\n/ **\n* This method initializes the button to insert a new good\n* Cultural.\n*\n* @ Return javax.swing.JButton - the button for the insertion.\n* /\nprivate JButton getBtnNuovoBC ()\n(\nif (null == btnNuovoBC)\n(\nbtnNuovoBC = new JButton ();\nbtnNuovoBC.setText ( \"<html> New <br> Cultural Heritage </ html>\");\nbtnNuovoBC.setBounds (5, 5, 140, 40);\nbtnNuovoBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"nuovoBC.png \")));\nbtnNuovoBC.setName (btnNuovoBC \");\nbtnNuovoBC.addMouseListener (bcHelp);\nbtnNuovoBC\n. setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnNuovoBC.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\n/ / Opens a form for entering a new good\n/ / Cultural.\nOpenOffice.org Messenger MSN Gaim (null, false);\n)\n));\n)\nbtnNuovoBC return;\n)\n\n/ **\n* This method initializes the button to access to details of property\n* Cultural selected.\n*\n* @ Return javax.swing.JButton - the button for the card.\n* /\nprivate JButton getBtnSchedaBC ()\n(\nif (null == btnSchedaBC)\n(\nbtnSchedaBC = new JButton ();\nbtnSchedaBC.setBounds (305, 5, 140, 40);\nbtnSchedaBC.setText ( \"<html> Card <br> Cultural Heritage </ html>\");\nbtnSchedaBC.setVerticalTextPosition (SwingConstants.TOP);\nbtnSchedaBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"scheda.png \")));\nbtnSchedaBC.setEnabled (false);\nbtnSchedaBC.setCursor (Cursor\n. getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnSchedaBC.setName (btnSchedaBC \");\nbtnSchedaBC.addMouseListener (bcHelp);\nbtnSchedaBC.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\nint selectedRow = tableBC.getSelectedRow ();\nBeanBeneCulturale todo = null;\nTRY\n(\ntodo = gestioneBC.ottieniBeneCulturale (TableModel\n. getID (selectedRow));\n/ / Open the card with the change of the cultural\n/ / Disabled.\nOpenOffice.org Messenger MSN Gaim (todo, false);\n)\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"The card <h3> <u> request can not be loaded. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\n)\n)\n));\n)\nbtnSchedaBC return;\n)\n\n/ **\n* This method initializes the button to access the modification of a\n* Cultural.\n*\n* @ Return javax.swing.JButton - the button for the card.\n* /\nprivate JButton getBtnModificaBC ()\n(\nif (null == btnModificaBC)\n(\nbtnModificaBC = new JButton ();\nbtnModificaBC.setBounds (155, 5, 140, 40);\nbtnModificaBC\n. setText ( \"Edit Data <html> <br> Cultural Heritage </ html>\");\nbtnModificaBC.setEnabled (false);\nbtnModificaBC.setCursor (Cursor\n. getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnModificaBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"ModificaBC32.png \")));\nbtnModificaBC.setName (btnModificaBC \");\nbtnModificaBC.addMouseListener (bcHelp);\nbtnModificaBC.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\nint selectedRow = tableBC.getSelectedRow ();\nBeanBeneCulturale todo = null;\nTRY\n(\ntodo = gestioneBC.ottieniBeneCulturale (TableModel\n. getID (selectedRow));\n/ / Open the card with the change of the cultural\n/ / Enabled.\nOpenOffice.org Messenger MSN Gaim (todo, true);\n)\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"The card <h3> <u> request can not be loaded. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\n)\n\n)\n));\n)\nbtnModificaBC return;\n)\n\n/ **\n* This method initializes the button for the elimination of property\n* Cultural selected.\n*\n* @ Return javax.swing.JButton - the delete button for.\n* /\nprivate JButton getBtnEliminaBC ()\n(\nif (null == btnEliminaBC)\n(\nbtnEliminaBC = new JButton ();\nbtnEliminaBC.setBounds (455, 5, 140, 40);\nbtnEliminaBC.setText ( \"Delete <html> <br> Cultural Heritage </ html>\");\nbtnEliminaBC.setVerticalTextPosition (SwingConstants.TOP);\nbtnEliminaBC.setCursor (Cursor\n. getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnEliminaBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"EliminaBC32.png \")));\nbtnEliminaBC.setCursor (Cursor\n. getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnEliminaBC.setEnabled (false);\nbtnEliminaBC.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\nint selectedRow = tableBC.getSelectedRow ();\nString name = (String) TableModel\n. getValueAt (selectedRow, 0);\n\n/ / Create the delete confirmation dialog.\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to delete the cultural heritage\"\n+ Name + \"?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"The deleted data can not be filled again.\"\nSwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Delete\", \"Cancel\");\nint choice = JOptionPane.showInternalOptionDialog (\njContentPane, root, \"Confirm Delete\",\nJOptionPane.YES_NO_OPTION,\nJOptionPane.QUESTION_MESSAGE,\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"EliminaBC48.png\")),\noptions, options [1]);\n/ / If the deletion is confirmed, remove the well\n/ / Cultural selected.\nif (choice == JOptionPane.YES_OPTION)\n(\nTRY\n(\ngestioneBC.cancellaBeneCulturale (TableModel\n. getID (selectedRow));\ntableModel.removeSito (selectedRow);\nJLabel confirm = new JLabel ( \"The cultural heritage\"\n+ Name + \"was deleted.\");\nconfirm.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJOptionPane.showInternalMessageDialog (jContentPane,\nconfirm, \"Cultural Heritage\"\nJOptionPane.OK_OPTION, new ImageIcon (\ngetClass (). getResource (\nHome.URL_IMAGES\n+ \"Ok32.png \")));\n)\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> Delete operation request can not be completed. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass ()\n. getResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\n)\n)\n)\n));\nbtnEliminaBC.setName (btnEliminaBC \");\nbtnEliminaBC.addMouseListener (bcHelp);\n\n)\nbtnEliminaBC return;\n\n)\n\n/ **\n* This method initializes the right side of the interface.\n*\n* @ Return javax.swing.JPanel - the right pane of the interface.\n* /\nprivate JPanel getPannelloDestro ()\n(\nif (null == rightPanel)\n(\nrightPanel = new JPanel ();\nrightPanel.setLayout (new BorderLayout ());\nrightPanel.add (getHelpPanel (), BorderLayout.CENTER);\nrightPanel.add (getSearchPanel (), BorderLayout.CENTER);\n)\nrightPanel return;\n)\n\n/ **\n* This method initializes the panel for finding property\n* Cultural.\n*\n* @ Return javax.swing.JPanel - the search panel.\n* /\nprivate JPanel getSearchPanel ()\n(\nif (null == searchPanel)\n(\nGridBagConstraints g = new GridBagConstraints ();\nsearchPanel = new JPanel (new GridBagLayout ());\nsearchPanel.setBorder (BorderFactory.createTitledBorder (\nBorderFactory.createLineBorder (new Color (51, 102, 255), 3),\n\"Search for Cultural Heritage\"\nTitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\ng.anchor = GridBagConstraints.CENTER;\n/ / Top - Left - Bottom - Right\ng.insets = new Insets (5, 5, 5, 5);\ng.gridwidth = 2;\ng.gridx = 0;\ng.gridy = 0;\nsearchPanel.add (new JLabel ( \"Name of Cultural Heritage\"), g);\ng.gridy = 1;\nnomeBC = new JTextField ();\nnomeBC.setColumns (12);\nnomeBC.setName (nomeBC \");\nnomeBC.addMouseListener (bcHelp);\nsearchPanel.add (nomeBC, g);\ng.gridy = 2;\nsearchPanel.add (new JLabel ( \"Select search tags:\"), g);\ng.fill = GridBagConstraints.VERTICAL;\ng.gridy = 3;\ng.weightx = 1.0;\ng.weighty = 1.0;\ng.insets = new Insets (5, 5, 10, 5);\npannelloTag = new TagPanel ();\npannelloTag.setPreferredSize (new Dimension (180, 40));\npannelloTag.setName (pannelloTag \");\npannelloTag.addMouseListener (bcHelp);\nsearchPanel.add (pannelloTag, g);\ng.insets = new Insets (5, 5, 5, 5);\ng.weightx = 0;\ng.weighty = 0;\ng.gridwidth = 1;\ng.gridy = 4;\ng.fill = GridBagConstraints.NONE;\nsearchPanel.add (getBtnRicerca (), g);\ng.gridx = 1;\nsearchPanel.add (getBtnAzzera (), g);\n\n)\nsearchPanel return;\n)\n\n/ **\n* This method initializes the panel containing the online help.\n*\n* @ Return javax.swing.JPanel - the panel of the guide.\n* /\nprivate JPanel getHelpPanel ()\n(\nif (null == helpPanel)\n(\nhelpPanel = new JPanel ();\nhelpPanel.setLayout (new BorderLayout ());\nhelpPanel.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3),\n\"Help\", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\ntextGuida.setPreferredSize (new Dimension (100, 80));\ntextGuida.setContentType ( \"text / html\");\ntextGuida\n. setText ( \"<html> Move your mouse pointer over a control\"\n+ \"Of interest to display the context-sensitive help. </ Html>\");\ntextGuida.setEditable (false);\ntextGuida.setOpaque (false);\nhelpPanel.add (textGuida, BorderLayout.CENTER);\n)\nhelpPanel return;\n)\n\n/ **\n* This method initializes the bread and table scroll of cultural heritage.\n*\n* @ Return javax.swing.JScrollPane - the scrollPane.\n* /\nprivate JScrollPane getJScrollPane ()\n(\nif (JScrollPane == null)\n(\nif (null == tableBC)\n(\nSitoTableModel = new TableModel ();\ntableBC = new ScrollableTable (TableModel);\ntableBC.setRowHeight (32);\ntableBC.setDefaultRenderer (Double.class,\nNew MediaVotiRenderer ());\ntableBC\n. setDefaultRenderer (Punto3D.class,\nNew Punto3DRenderer ());\ntableBC.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);\ntableBC.setSelectionForeground (Color.RED);\ntableBC.setSelectionBackground (Color.white);\ntableBC.setShowVerticalLines (false);\ntableBC.setColumnSelectionAllowed (false);\ntableBC.addMouseListener (bcHelp);\ntableBC.setName (tableBC \");\n/ *\n* SelectionListener - if a selected row, the buttons\n* Tab, edit and delete are active. Otherwise, are\n* Disabled.\n* /\nListSelectionModel selectionModel = tableBC.getSelectionModel ();\nselectionModel\n. addListSelectionListener (new ListSelectionListener ()\n(\npublic void ValueChanged (ListSelectionEvent pEvent)\n(\nif (tableBC.getSelectedRow ()! = -1)\n(\nbtnEliminaBC.setEnabled (true);\nbtnSchedaBC.setEnabled (true);\nbtnModificaBC.setEnabled (true);\n)\nelse\n(\nbtnEliminaBC.setEnabled (false);\nbtnSchedaBC.setEnabled (false);\nbtnModificaBC.setEnabled (false);\n)\n)\n));\n/ *\n* KeyListener <ENTER> - Details of the cultural selected.\n* <Backspace> - Delete the selected cultural. <space> --\n* Modify the cultural selected.\n* /\ntableBC.addKeyListener (new KeyAdapter ()\n(\npublic void keyPressed (KeyEvent pEvent)\n(\nint keyCode = pEvent.getKeyCode ();\nif (keyCode == KeyEvent.VK_ENTER)\n(\nbtnSchedaBC.doClick ();\n)\nelse if (keyCode == KeyEvent.VK_BACK_SPACE)\n(\nbtnEliminaBC.doClick ();\n)\nelse if (keyCode == KeyEvent.VK_SPACE)\n(\nbtnModificaBC.doClick ();\n)\n)\n));\n)\n\nJScrollPane = new JScrollPane (tableBC);\nJScrollPane\n. setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\nJScrollPane\n. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n)\nJScrollPane return;\n)\n\n/ **\n* This method initializes the button to search for a good\n* Cultural.\n*\n* @ Return javax.swing.JButton - the search button.\n* /\nprivate JButton getBtnRicerca ()\n(\nif (null == btnRicerca)\n(\nbtnRicerca = new JButton ();\nbtnRicerca.setText ( \"Search\");\nbtnRicerca.setPreferredSize (new Dimension (98, 26));\nbtnRicerca.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Ricerca16.png \")));\nbtnRicerca\n. setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnRicerca.setName (btnRicerca \");\nbtnRicerca.addMouseListener (bcHelp);\n)\nbtnRicerca return;\n)\n\n/ **\n* This method initializes the button to clear the form\n* Cultural research.\n*\n* @ Return javax.swing.JButton - the button to reset the form.\n* /\nprivate JButton getBtnAzzera ()\n(\nif (null == btnAzzera)\n(\nbtnAzzera = new JButton ();\nbtnAzzera.setText ( \"Clear\");\nbtnAzzera.setHorizontalTextPosition (SwingConstants.LEADING);\nbtnAzzera.setPreferredSize (new Dimension (98, 26));\nbtnAzzera.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Azzera16.png \")));\nbtnAzzera.setName (btnAzzera \");\nbtnAzzera.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnAzzera.addMouseListener (bcHelp);\nbtnAzzera.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent arg0)\n(\nnomeBC.setText (\"\");\npannelloTag.azzera ();\n)\n\n));\n)\nbtnAzzera return;\n)\n\n/ **\n* This method opens a tab of the selected cultural or opens the\n* Window for entering a new cultural object.\n*\n* @ Param pbc BeanBeneCulturale - the bean of the cultural property of which\n* Want to see the card.\n* @ Param boolean pModifica --\n* <ul>\n* <li> <i> True </ i> - indicates that you are making a change\n* Data cultural.\n* <li> <i> False </ i> indicates that you are viewing the card\n* The cultural property.\n* /\nprivate void OpenOffice.org Messenger MSN Gaim (BeanBeneCulturale PBC, boolean pModifica)\n(\nSchedaBC new;\nif (pbc == null)\n(\nnew = new SchedaBC (this);\n\n)\nelse\n(\nfor (int i = 0; i <figli.size (); i + +)\n(\nSchedaBC current = figli.get (i);\nif (pBc.getId () == corrente.getId ())\n(\ndesktopManager.activateFrame (current);\nreturn;\n)\n)\nnew = new SchedaBC (this, PBC, pModifica);\n)\njDesktopPane.add (new, Integer.MAX_VALUE);\ndesktopManager.centerFrame (new);\nnuova.setVisible (true);\nfigli.add (new);\n)\n\n/ **\n* This method imports the cultural downloaded from the server in\n* Table.\n*\n* @ Param boolean pRicerca\n* <ul>\n* <li> <i> True </ i> - include the search parameters.\n* <li> <i> False </ i> otherwise.\n* </ Ul>\n* /\nprivate void caricaTabella (boolean pRicerca)\n(\nArrayList <BeanBeneCulturale> Beniculturali = null;\nTRY\n(\nif (pRicerca)\n(\n\n)\nelse\n(\nBeniculturali gestioneBC.ottieniBeniCulturali = ();\n)\n)\n/ / If an error displays an error message.\ncatch (RemoteException e)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> The list of cultural goods has been loaded. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showInternalMessageDialog (this, error, \"Error!\"\nJOptionPane.ERROR_MESSAGE, err);\n)\nfinally\n(\nSitoTableModel = new TableModel (Beniculturali);\ntableBC.setModel (TableModel);\norganizzaRiga ();\n)\n)\n\n/ **\n* This method loads the tags available in the system and import them into\n* Panel tag.\n* /\nprivate void caricaTags ()\n(\nArrayList <BeanTag> beanTags = null;\nTRY\n(\nbeanTags = tag.ottieniTags ();\nfor (BeanTag b: beanTags)\n(\npannelloTag.insertTag (b);\n)\npannelloTag.repaint ();\n)\n/ / If an error panel tag remains blank.\ncatch (RemoteException e)\n(\n)\n)\n\n/ **\n* This method sets the size of columns for the data assets\n* Cultural.\n* /\nprivate void organizzaRiga ()\n(\n/ / Name\ntableBC.getColumnModel (). GetColumn (0). setPreferredWidth (120);\n/ / Address\ntableBC.getColumnModel (). GetColumn (1). setPreferredWidth (120);\n/ / Phone\ntableBC.getColumnModel (). GetColumn (2). setPreferredWidth (80);\n/ / Location\ntableBC.getColumnModel (). GetColumn (3). setPreferredWidth (80);\n/ / City\ntableBC.getColumnModel (). GetColumn (4). setPreferredWidth (80);\n/ / CAP\ntableBC.getColumnModel (). GetColumn (5). setPreferredWidth (50);\n/ / Test\ntableBC.getColumnModel (). GetColumn (6). setPreferredWidth (30);\n/ / RATINGS\ntableBC.getColumnModel (). GetColumn (7). setPreferredWidth (80);\n/ / POSGEO\ntableBC.getColumnModel (). GetColumn (8). setPreferredWidth (120);\n)\n)"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69425c"},"name":"IGestioneBeniCulturaliAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}]],"contents":"package unisa.gps.etour.control.GestioneBeniCulturali;\n\nimport java.rmi.RemoteException;\nimport java.util.ArrayList;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanVisitaBC;\n\n/ **\n  * Interface for operations peculiar cultural heritage by\n  * Operator Agency.\n  *\n  * @ Author Michelangelo De Simone\n  * @ Version 0.1 © 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic interface extends IGestioneBeniCulturaliAgenzia\nIGestioneBeniCulturaliComune\n(\n/ **\n* Method for the insertion of a new cultural\n*\n* @ Param pBeneCulturale The raw bean to be included in the database\n* @ Return boolean The result of the operation; true if was successful, false otherwise\n* @ Throws RemoteException Exception flow\n* /\npublic boolean inserisciBeneCulturale (BeanBeneCulturale pBeneCulturale) throws RemoteException;\n\n/ **\n* Method for the cancellation of a cultural object by id\n*\n* @ Param Id pBeneCulturaleID the bean to be deleted\n* @ Return boolean The result of the operation; true if was successful, false otherwise\n* @ Throws RemoteException Exception flow\n* /\npublic boolean cancellaBeneCulturale (int pBeneCulturaleID) throws RemoteException;\n\n/ **\n* Method for the return of all cultural property in the\n* Database\n*\n* @ Return ArrayList all the beans in the database\n* @ Throws RemoteException Exception flow\n* /\n<BeanBeneCulturale> ottieniBeniCulturali public ArrayList () throws RemoteException;\n\n/ **\n* Method for updating (or change) the data of a cultural\n*\n* @ Param pBeneCulturale The bean with the new information of the cultural\n* @ Return boolean The result of the operation; true if was successful, false otherwise\n* @ Throws RemoteException Exception flow\n* /\npublic boolean modificaBeneCulturale (BeanBeneCulturale pBeneCulturale) throws RemoteException;\n\n/ **\n* Method for setting a tag to a certain cultural\n*\n* @ Param pBeneCulturaleID The identifier of the cultural object to which to add a tag\n* @ Param pTagID The ID tag to add to the cultural indicated\n* @ Return boolean The result of the operation; true if was successful, false otherwise\n* @ Throws RemoteException Exception flow\n* /\npublic boolean aggiungiTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException;\n\n/ **\n* Method for removing a tag from a certain cultural\n* To ensure that 'the operation is successful it is necessary that the cultural property has\n* Actually set the specified tag\n*\n* @ Param pBeneCulturaleID The identifier of the cultural object from which to remove the tag\n* @ Param pTagID The ID tag to be removed from the cultural indicated\n* @ Return boolean The result of the operation; true if was successful, false otherwise\n* @ Throws RemoteException Exception flow\n* /\npublic boolean rimuoviTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException;\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69425d"},"name":"ControlloBeniCulturali.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425f"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneBeniCulturali;\n\nimport java.util.Date;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\n\n/ **\n  * This class has the task of checking the data of a cultural object.\n  * Various consistency checks are performed, such as length of strings,\n  * Null reference, dynamic types incorrect.\n  *\n  * @ Author Michelangelo De Simone\n  * @ Version 0.1\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npublic class ControlloBeniCulturali\n(\n/ **\n*\n* Please consistency check by calling the appropriate methods.\n* This method wrappa \"all other methods of control with a single call.\n* At the first false value the flow is interrupted.\n*\n* @ Param bean The PBC of the cultural object to be inspected\n* @ Return boolean The result of the check: true if OK, false otherwise\n* /\npublic static boolean controllaDatiBeneCulturale (BeanBeneCulturale PBC)\n(\n/ / This method checks the input parameter in the cases\n/ / Null reference or dynamic Wrong\nif (PBC == null | |! (PBC instanceof BeanBeneCulturale))\nreturn false;\n\n/ / This method checks if the ID passed as a parameter BeanBeneCulturale\n/ / Is valid or not\nif (! controllaIdBeneCulturale (pBC.getId ()))\nreturn false;\n\n/ / This method checks the objects contained in BeanBeneCulturale Date\n/ / As such, a check is made null and reference checks\n/ / On the dynamic.\nif (! controllaDateBeneCulturale (PBC))\nreturn false;\n\n/ / This method checks all the fields in BeanBeneCulturale, research\n/ / Any null references\nif (! controllaDatiNulli (PBC))\nreturn false;\n\n/ / Check the correct length of string, in this case the CAP must\n/ / To force of circumstances than five digits, while the province of two.\n/ / TODO: To be completed\nif (pBC.getCap (). length ()! = 5 | | pBC.getProvincia (). length ()! = 2)\nreturn false;\n\nreturn true;\n)\n\n/ **\n*\n* Check for null data in a bean cultural property.\n* The check is performed on all fields of the bean.\n*\n* @ Param bean The PBC cultural property to be checked\n* @ Return boolean The result of the check: true if there are no null references, false otherwise\n* /\npublic static boolean controllaDatiNulli (BeanBeneCulturale PBC)\n(\nif (pBC.getCap () == null | | pBC.getCitta () == null | | pBC.getDescrizione () == null | | pBC.getGiornoChiusura () == null | |\npBC.getLocalita () == null | | pBC.getNome () == null | | pBC.getOrarioApertura () == null | |\npBC.getOrarioChiusura () == null | | pBC.getProvincia () == null | | pBC.getTelefono () == null | | pBC.getVia () == null)\nreturn false;\n\nreturn true;\n)\n\n/ **\n*\n* Check the consistency of dates within this BeanBeneCulturale.\n* The check is performed only on objects, while not carried out\n* No validity check 'on a date as a cultural object may also have\n* Dates later than today (see for example on open exhibitions).\n*\n* @ Param The PBC BeanBeneCulturale which check the dates\n* @ Return boolean The result of the check: true if the dates have consistency; false otherwise\n* /\npublic static boolean controllaDateBeneCulturale (BeanBeneCulturale PBC)\n(\nif (pBC.getOrarioApertura () == null | |! (pBC.getOrarioApertura () instanceof Date) | |\npBC.getOrarioChiusura () == null | |! (pBC.getOrarioChiusura () instanceof Date))\nreturn false;\n\nreturn true;\n)\n\n/ **\n*\n* Check the ID of BeanBeneCulturale\n*\n* @ Param pId Id BeanBeneCulturale be checked\n* @ Return boolean The result of the check: true if the ID is correct, false otherwise\n* /\npublic static boolean controllaIdBeneCulturale (int pid)\n(\nreturn (pid> 0);\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69425e"},"name":"BeanBeneCulturale.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69425f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694265"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942ca"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e5"}]],"contents":"ï»¿package unisa.gps.etour.bean;\n\n/ **\n  * Bean containing information relating to a cultural heritage\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\nimport java.io.Serializable;\nimport java.util.Date;\n\nimport unisa.gps.etour.util.Punto3D;\n\npublic class BeanBeneCulturale implements Serializable\n(\n\nprivate static final long serialVersionUID =-460705346474984466L;\n\nprivate int id;\nprivate int numeroVoti;\nprivate String name;\nprivate String city;\nprivate String phone;\nprivate String description;\nprivate String location;\nprivate String street;\nprivate String cap;\nprivate String province;\nprivate String giornoChiusura;\nPrivate Punto3D position;\nprivate Date orarioApertura;\nprivate Date orarioChiusura;\nprivate double costoBiglietto;\nprivate double mediaVoti;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param pNumeroVoti\n* @ Param Pnom\n* @ Param pCitta\n* @ Param pTelefono\n* @ Param pDescrizione\n* @ Param pLocalita\n* @ Param pVia\n* @ Param pcap\n* @ Param pProvincia\n* @ Param pPosizione\n* @ Param pOrarioApertura\n* @ Param pOrarioChiusura\n* @ Param pGiornoChiusura\n* @ Param pCostoBiglietto\n* @ Param pMediaVoti\n* /\npublic BeanBeneCulturale (int pid, int pNumeroVoti, String Pnom,\nPCitta String, String pTelefono, String pDescrizione,\nPLocalita String, String pVia, pcap String, String pProvincia,\nPunto3D pPosizione, Date pOrarioApertura, Date pOrarioChiusura,\nString pGiornoChiusura, double pCostoBiglietto, double pMediaVoti)\n(\nsetId (PID);\nsetNumeroVoti (pNumeroVoti);\nsetNome (Phnom);\nsetCitta (pCitta);\nsetTelefono (pTelefono);\nsetDescrizione (pDescrizione);\nsetlocale (pLocalita);\nsetvar (pVia);\nsetCap (PCAP);\nsetProvincia (pProvincia);\nsetPosizione (pPosizione);\nsetOrarioApertura (pOrarioApertura);\nsetOrarioChiusura (pOrarioChiusura);\nsetGiornoChiusura (pGiornoChiusura);\nsetCostoBiglietto (pCostoBiglietto);\nsetMediaVoti (pMediaVoti);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanBeneCulturale ()\n(\n\n)\n\n/ **\n* Returns the value of giornoChiusura\n*\n* @ Return value giornoChiusura.\n* /\npublic String getGiornoChiusura ()\n(\ngiornoChiusura return;\n)\n\n/ **\n* Sets the new value of giornoChiusura\n*\n* @ Param value pGiornoChiusura New giornoChiusura.\n* /\npublic void setGiornoChiusura (String pGiornoChiusura)\n(\ngiornoChiusura = pGiornoChiusura;\n)\n\n/ **\n* Returns the value of cap\n*\n* @ Return value cap.\n* /\npublic String getCap ()\n(\nreturn cap;\n)\n\n/ **\n* Sets the new value of cap\n*\nNew pcap * @ param value cap.\n* /\npublic void setCap (String PCAP)\n(\nch = pcap;\n)\n\n/ **\n* Returns the value of city\n*\n* @ Return Value of city.\n* /\npublic String getCitta ()\n(\nreturn city;\n)\n\n/ **\n* Sets the new value of city\n*\n* @ Param value New pCitta city.\n* /\npublic void setCitta (String pCitta)\n(\nCity = pCitta;\n)\n\n/ **\n* Returns the value of costoBiglietto\n*\n* @ Return value costoBiglietto.\n* /\npublic double getCostoBiglietto ()\n(\ncostoBiglietto return;\n)\n\n/ **\n* Sets the new value of costoBiglietto\n*\n* @ Param value pCostoBiglietto New costoBiglietto.\n* /\npublic void setCostoBiglietto (double pCostoBiglietto)\n(\ncostoBiglietto = pCostoBiglietto;\n)\n\n/ **\n* Returns the value of description\n*\n* @ Return value of description.\n* /\npublic String getDescrizione ()\n(\nreturn description;\n)\n\n/ **\n* Sets the new value of description\n*\n* @ Param pDescrizione New value of description.\n* /\npublic void setDescrizione (String pDescrizione)\n(\ndescription = pDescrizione;\n)\n\n/ **\n* Returns the value of location\n*\n* @ Return locale values.\n* /\npublic String getLocal ()\n(\nreturn location;\n)\n\n/ **\n* Sets the new value of location\n*\n* @ Param pLocalita New locale values.\n* /\npublic void setLocale (String pLocalita)\n(\nlocation = pLocalita;\n)\n\n/ **\n* Returns the value of mediaVoti\n*\n* @ Return value mediaVoti.\n* /\npublic double getMediaVoti ()\n(\nmediaVoti return;\n)\n\n/ **\n* Sets the new value of mediaVoti\n*\n* @ Param value pMediaVoti New mediaVoti.\n* /\npublic void setMediaVoti (double pMediaVoti)\n(\nmediaVoti = pMediaVoti;\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getName ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new name value\n*\n* @ Param name New value Pnom.\n* /\npublic void setNome (String Pnom)\n(\nname = Pnom;\n)\n\n/ **\n* Returns the value of numeroVoti\n*\n* @ Return value numeroVoti.\n* /\npublic int getNumeroVoti ()\n(\nnumeroVoti return;\n)\n\n/ **\n* Sets the new value of numeroVoti\n*\n* @ Param value pNumeroVoti New numeroVoti.\n* /\npublic void setNumeroVoti (int pNumeroVoti)\n(\nnumeroVoti = pNumeroVoti;\n)\n\n/ **\n* Returns the value of orarioApertura\n*\n* @ Return value orarioApertura.\n* /\npublic Date getOrarioApertura ()\n(\norarioApertura return;\n)\n\n/ **\n* Sets the new value of orarioApertura\n*\n* @ Param value pString New orarioApertura.\n* /\npublic void setOrarioApertura (Date pString)\n(\norarioApertura = pString;\n)\n\n/ **\n* Returns the value of orarioChiusura\n*\n* @ Return value orarioChiusura.\n* /\npublic Date getOrarioChiusura ()\n(\norarioChiusura return;\n)\n\n/ **\n* Sets the new value of orarioChiusura\n*\n* @ Param value pOrarioChiusura New orarioChiusura.\n* /\npublic void setOrarioChiusura (Date pOrarioChiusura)\n(\norarioChiusura = pOrarioChiusura;\n)\n\n/ **\n* Returns the value of position\n*\n* @ Return value of position.\n* /\npublic Punto3D getPosizione ()\n(\nreturn position;\n)\n\n/ **\n* Sets the new position value\n*\n* @ Param pPosizione New position value.\n* /\npublic void setPosizione (Punto3D pPosizione)\n(\nposition = pPosizione;\n)\n\n/ **\n* Returns the value of the province\n*\n* @ Return value of the province.\n* /\npublic String getProvincia ()\n(\nreturn province;\n)\n\n/ **\n* Sets the new value of the province\n*\n* @ Param pProvincia New value for the province.\n* /\npublic void setProvincia (String pProvincia)\n(\nprovince = pProvincia;\n)\n\n/ **\n* Returns the value of telephone\n*\n* @ Return Value of the phone.\n* /\npublic String getTelefono ()\n(\nreturn phone;\n)\n\n/ **\n* Sets the new value of telephone\n*\n* @ Param value New pTelefono phone.\n* /\npublic void setTelefono (String pTelefono)\n(\nphone = pTelefono;\n)\n\n/ **\n* Returns the value of street\n*\n* @ Return value on.\n* /\npublic String getVar ()\n(\nreturn path;\n)\n\n/ **\n* Sets the new value via\n*\n* @ Param value New pVia on.\n* /\npublic void setvar (String pVia)\n(\nvia = pVia;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694261"},"name":"Ricerca.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e2"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneRicerche;\n\nimport java.rmi.RemoteException;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Hashtable;\n\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.repository.DBBeneCulturale;\nimport unisa.gps.etour.repository.DBPuntoDiRistoro;\nimport unisa.gps.etour.repository.DBTag;\nimport unisa.gps.etour.repository.IDBBeneCulturale;\nimport unisa.gps.etour.repository.IDBPuntoDiRistoro;\nimport unisa.gps.etour.repository.IDBTag;\nimport unisa.gps.etour.util.ControlloDati;\nimport unisa.gps.etour.util.MessaggiErrore;\nimport unisa.gps.etour.util.Punto3D;\n\npublic class Search extends UnicastRemoteObject implements IRicerca\n(\n\nprivate static final long serialVersionUID =-6009809097302884655L;\n\npublic Search () throws RemoteException\n(\nsuper ();\n)\n\n/ / Search Parameters\nprivate int pIdTurista = -1;\nprivate String pParoleChiave;\nprivate double pRaggioMax;\nPrivate Punto3D pPosizioneUtente;\nprivate int pElementiPerPagina = -1;\nprivate byte pTipologiaSito = -1;\n\n/ / Objects for the database connection\nPrivate IDBBeneCulturale BeneCulturale = new DBBeneCulturale ();\nPrivate IDBPuntoDiRistoro PuntoDiRistoro = new DBPuntoDiRistoro ();\nPrivate IDBTag Tag DBTag = new ();\n\n/ / List of tags obtained\nprivate ArrayList <BeanTag> pTags;\n\n/ / Search Results pages for partitioned\nprivate Hashtable <Integer, ArrayList <BeanBeneCulturale>> risultatiRicercaBeniCulturali = new Hashtable <Integer, ArrayList <BeanBeneCulturale>> ();\nprivate Hashtable <Integer, ArrayList <BeanPuntoDiRistoro>> risultatiRicercaPuntiDiRistoro = new Hashtable <Integer, ArrayList <BeanPuntoDiRistoro>> ();\n\n/ / Quantity of items and pages results in the research phase\nprivate int numeroPagineRisultati = -1;\nprivate int numeroElementiRicerca = -1;\n\n/ * (Non-Javadoc)\nUnisa.gps.etour.control.GestioneRicerche.IRicerca * @ see # search (int, java.lang.String, int [], double, int, unisa.gps.etour.util.Punto3D, byte)\n* /\npublic int search (int pIdTurista, pParoleChiave String, int [] pTagsId,\npRaggioMax double, int pElementiPerPagina,\nPunto3D pPosizioneUtente, byte pTipologiaSito)\nthrows RemoteException\n(\n/ / Reset the parameters of the previous search\nazzeraParametri ();\n\n/ / Start checking the correctness of the search parameters\nTRY\n(\nthis.pIdTurista = pIdTurista;\nthis.pTags = arrayToArrayListTag (pTagsId);\nthis.pParoleChiave = ControlloDati.correggiStringa (pParoleChiave,\ntrue, true, \"\", ControlloDati.LUNGHEZZA_MASSIMA);\nthis.pRaggioMax = pRaggioMax;\nthis.pPosizioneUtente = pPosizioneUtente;\nthis.pTipologiaSito = pTipologiaSito;\n\n/ / If the parameters are valid, I get the number of results\nif (pElementiPerPagina> 0\n& & ((PTipologiaSito == 0) | | (pTipologiaSito == 1))\nPRaggioMax & &> 0\nPPosizioneUtente & &! = Null\n& & (This.numeroElementiRicerca = ottieniNumeroElementiRicercaSpecializzato ())> = 0)\n(\nthis.pElementiPerPagina = pElementiPerPagina;\nthis.numeroPagineRisultati = calcolaNumeroPagineRicerca ();\n\nthis.numeroElementiRicerca return;\n)\n\n/ / Otherwise returns -1\nelse\nreturn -1;\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # ottieniPaginaRisultatiBeneCulturale (int)\n* /\npublic BeanBeneCulturale [] ottieniPaginaRisultatiBeneCulturale (int pPagina)\nthrows RemoteException\n(\n/ / Check that the type of site is valid and that the page is\n/ / In the range\nif ((this.pTipologiaSito == BENE_CULTURALE) & & controllaPagina (pPagina))\n(\n/ / Transform the list obtained in array\nBeanBeneCulturale [] results = new BeanBeneCulturale [calcolaNumeroElementiPagina (pPagina)];\n/ / Results = ricercaBeniCulturaliPerPagina (pPagina). ToArray (\n/ / Results);\n\nresults = ricercaPerPagina (pPagina). toArray (results);\n\nreturn results;\n)\nelse\nreturn null;\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # ottieniPaginaRisultatiPuntoDiRistoro (int)\n* /\npublic BeanPuntoDiRistoro [] ottieniPaginaRisultatiPuntoDiRistoro (int pPagina)\nthrows RemoteException\n(\n/ / Check that the type of site is valid and that the page is\n/ / In the range\nif ((this.pTipologiaSito == PUNTO_DI_RISTORO)\n& & ControllaPagina (pPagina))\n(\n/ / Transform the list obtained in array\nBeanPuntoDiRistoro [] results = new BeanPuntoDiRistoro [calcolaNumeroElementiPagina (pPagina)];\n/ / Results = ricercaPuntiDiRistoroPerPagina (pPagina). ToArray (\n/ / Results);\n\nresults = ricercaPerPagina (pPagina). toArray (results);\n\nreturn results;\n)\nelse\nreturn null;\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # ottieniNumeroElementiRicerca ()\n* /\npublic int ottieniNumeroElementiRicerca () throws RemoteException\n(\nnumeroElementiRicerca return;\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # ottieniNumeroPagineRicerca ()\n* /\npublic int ottieniNumeroPagineRicerca () throws RemoteException\n(\nnumeroPagineRisultati return;\n)\n\n/ **\n* Method for returning the number of findings from research\n*\n* @ Return number of findings from research. On error\n* Returns -1\n* @ Throws SQLException Exception Connecting to Database\n* /\nprivate int ottieniNumeroElementiRicercaSpecializzato () throws SQLException\n(\n/ / Check the type of site and gets the number of results\nif (controllaIdTurista ())\n(\nswitch (pTipologiaSito)\n(\nhomes BENE_CULTURALE:\nreturn pIdTurista> 0? BeneCulturale\n. ottieniNumeroElementiRicercaAvanzata (\nthis.pIdTurista, this.pParoleChiave,\nthis.pTags, this.pPosizioneUtente,\nthis.pRaggioMax): BeneCulturale\n. ottieniNumeroElementiRicerca (this.pParoleChiave,\nthis.pTags, this.pPosizioneUtente,\nthis.pRaggioMax);\nhomes PUNTO_DI_RISTORO:\nreturn pIdTurista> 0? PuntoDiRistoro\n. ottieniNumeroElementiRicercaAvanzata (\nthis.pIdTurista, this.pParoleChiave,\nthis.pTags, this.pPosizioneUtente,\nthis.pRaggioMax): PuntoDiRistoro\n. ottieniNumeroElementiRicerca (this.pParoleChiave,\nthis.pTags, this.pPosizioneUtente,\nthis.pRaggioMax);\n)\n)\nreturn -1;\n)\n\n/ **\n* Method for returning the list of results\n*\n* @ Param pNumeroPagina range of results to return\n* @ Return Container sites emerged in the research phase as the interval\n* @ Throws RemoteException Exception Remote\n* /\nprivate ArrayList <?> ricercaPerPagina (int pNumeroPagina)\nthrows RemoteException\n(\n\n/ / Declare the list of sites related to the page input\nArrayList <?> RisultatiPaginaCorrente = null;\nTRY\n(\nif (controllaIdTurista ())\n(\n/ / Check the type of site\nswitch (pTipologiaSito)\n(\nhomes BENE_CULTURALE:\n/ / If the list has not already been obtained previously\n/ / Search\nif ((risultatiPaginaCorrente = risultatiRicercaBeniCulturali\n. get (pNumeroPagina)) == null)\n(\nrisultatiPaginaCorrente = (ArrayList <?>) (pIdTurista> 0? BeneCulturale\n. ricercaAvanzata (pIdTurista, pParoleChiave,\npTags, pNumeroPagina,\npElementiPerPagina,\npPosizioneUtente, pRaggioMax)\n: BeneCulturale.ricerca (pParoleChiave,\npTags, pNumeroPagina,\npElementiPerPagina,\npPosizioneUtente, pRaggioMax));\nrisultatiRicercaBeniCulturali\n. put (\npNumeroPagina,\n(ArrayList <BeanBeneCulturale>) risultatiPaginaCorrente);\n)\nbreak;\n\nhomes PUNTO_DI_RISTORO:\n/ / If the list has not already been obtained previously\n/ / Search\nif ((risultatiPaginaCorrente = risultatiRicercaPuntiDiRistoro\n. get (pNumeroPagina)) == null)\n(\nrisultatiPaginaCorrente = (ArrayList <?>) (pIdTurista> 0? PuntoDiRistoro\n. ricercaAvanzata (pIdTurista, pParoleChiave,\npTags, pNumeroPagina,\npElementiPerPagina,\npPosizioneUtente, pRaggioMax)\n: PuntoDiRistoro.ricerca (pParoleChiave,\npTags, pNumeroPagina,\npElementiPerPagina,\npPosizioneUtente, pRaggioMax));\nrisultatiRicercaPuntiDiRistoro\n. put (\npNumeroPagina,\n(ArrayList <BeanPuntoDiRistoro>) risultatiPaginaCorrente);\n)\nbreak;\n)\n)\n/ / Return the results\nrisultatiPaginaCorrente return;\n)\n\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\n)\n\n/ **\n* Method for calculating the number of pages found at\n* Search\n*\n* @ Return many pages in the research phase\n* /\nprivate int calcolaNumeroPagineRicerca ()\n(\n/ / If the number of pages is greater than or equal to 0 returns the number of\n/ / Pages\nif (numeroPagineRisultati> = 0)\nnumeroPagineRisultati return;\n/ / If the number of elements is a multiple of the number of items per page\n/ / Return their relationship\nif ((numeroElementiRicerca% pElementiPerPagina == 0))\nreturn (numeroElementiRicerca / pElementiPerPagina);\n/ / Otherwise returns their relationship + 1\nreturn (numeroElementiRicerca / pElementiPerPagina) + 1;\n)\n\n/ **\n* Method for calculating the number of elements of nell'intevallo\n* A given page\n*\n* @ Param interval nPagina results\n* @ Return number of elements in a page\n* /\nprivate int calcolaNumeroElementiPagina (int nPagina)\n(\n/ / If page number is the last return their form\nif (nPagina == (numeroPagineRisultati - 1))\nreturn (numeroElementiRicerca% pElementiPerPagina);\n/ / Otherwise returns the number of items per page\nelse\nreturn (pElementiPerPagina);\n)\n\n/ **\n* Method for checking the validity of a page\n*\n* @ Param pPagina page to check\n* @ Return true if the page is valid\n* /\nprivate boolean controllaPagina (int pPagina)\n(\n/ / If page number is in the range returns true\nreturn (pPagina> = 0 & & pPagina <numeroPagineRisultati);\n)\n\n/ **\n* Method for checking the correctness of the identifier Tourist\n*\n* @ Return true if the identifier is valid, false otherwise\n* /\nprivate boolean controllaIdTurista ()\n(\nreturn ((pIdTurista> 0) | | (pIdTurista == -1));\n)\n\n/ **\n* Method to reset all the variables related to a search\n*\n* @ Return A constant that indicates the correct zero\n* /\nprivate int azzeraParametri ()\n(\n\n/ / Clears all the search parameters\npIdTurista = -1;\npTipologiaSito = -1;\npElementiPerPagina = -1;\nnumeroElementiRicerca = -1;\nnumeroPagineRisultati = -1;\n\nrisultatiRicercaBeniCulturali.clear ();\nrisultatiRicercaPuntiDiRistoro.clear ();\n\nreturn -1;\n)\n\n/ **\n* Method for the detection and conversion of data tags in struttara List\n*\n* @ Param list of identifiers pTagsId Search Tags\n* @ Return List Search Tags\n* @ Throws SQLException\n* /\nprivate ArrayList <BeanTag> arrayToArrayListTag (int [] pTagsId)\nthrows SQLException\n(\n/ / Initialize the list of Tags\n<BeanTag> PTags ArrayList <BeanTag> = new ArrayList ();\n/ / If the list of identifiers of the tag is empty I get the tags\nif (pTagsId = null)\n(\nBeanTag currentTag = null;\nTRY\n(\n\n/ / Loop for the insertion of tags found in the list\nfor (int i = 0; i <pTagsId.length i + +)\n(\n/ / If the identifier is greater than 0\nif (pTagsId [i]> 0)\n(\ncurrentTag = Tag.ottieniTag (pTagsId [i]);\n/ / Check correctness on tags\nif (ControlloDati.checkBeanTag (currentTag))\npTags.add (currentTag);\n)\n)\n\n)\ncatch (SQLException e)\n(\nthrow new SQLException (MessaggiErrore.ERRORE_DBMS);\n)\n)\n/ / Return the list of tags\npTags return;\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694262"},"name":"RicercaStandard.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e2"}]],"contents":"\t\npackage unisa.gps.etour.control.GestioneRicerche;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\n/ **\n  * Class for managing Standard Search\n  *\n  * @ Author Joseph Penna\n  * @ Version 0.1 © 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class Search extends RicercaStandard\n(\n\n/ ** Constructor of the class\n*\n* /\npublic RicercaStandard ()\n(\n\n)\n\nprotected int ottieniNumeroElementiRicercaSpecializzato ()\nthrows SQLException\n(\n/ / Check the type of site and gets the number of results\nswitch (pTipologiaSito)\n(\nhomes BENE_CULTURALE:\nreturn BeneCulturale.ottieniNumeroElementiRicerca (\nthis.pParoleChiave, this.pTags, this.pPosizioneUtente,\nthis.pRaggioMax);\nhomes PUNTO_DI_RISTORO:\nreturn PuntoDiRistoro.ottieniNumeroElementiRicerca (\nthis.pParoleChiave, this.pTags, this.pPosizioneUtente,\nthis.pRaggioMax);\ndefault:\nreturn -1;\n)\n)\n\nprotected ArrayList <?> ricercaSpecializzataPerPagina (int pNumeroPagina)\nthrows SQLException\n(\n/ / Check the type of site and search\nswitch (pTipologiaSito)\n(\nhomes BENE_CULTURALE:\nreturn BeneCulturale.ricerca (pParoleChiave, pTags,\npNumeroPagina, numeroElementiPerPagina,\npPosizioneUtente, pRaggioMax);\nhomes PUNTO_DI_RISTORO:\nreturn PuntoDiRistoro.ricerca (pParoleChiave, pTags,\npNumeroPagina, numeroElementiPerPagina,\npPosizioneUtente, pRaggioMax);\ndefault:\nreturn null;\n\n)\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694263"},"name":"RicercaAvanzata.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694281"}]],"contents":"\t\nClass RicercaAvanzata\njava.lang.Object\n   unisa.gps.etour.control.GestioneRicerche.Ricerca\n       unisa.gps.etour.control.GestioneRicerche.RicercaAvanzata\nAll Implemented Interfaces:\nIRicerca\n\n-------------------------------------------------- ------------------------------\n\npublic class RicercaAvanzataextends RicercaClasse for managing the Advanced Search\n\nBENE_CULTURALE, PUNTO_DI_RISTORO\n\nRicercaAvanzata (int pIdTurista)\n           Class constructor\n\nottieniNumeroElementiRicerca, ottieniNumeroPagineRicerca, ottieniPaginaRisultatiBeneCulturale, ottieniPaginaRisultatiPuntoDiRistoro, search\n\nGestioneRicerche.Ricerca\n\nRicercaAvanzata\npublic RicercaAvanzata (int pIdTurista) class constructor\n\nParameters:\npIdTurista - ID del T"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694264"},"name":"IRicerca.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694260"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a0"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b3"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e2"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e4"}]],"contents":"package unisa.gps.etour.control.GestioneRicerche;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\n\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.util.Punto3D;\n\n/ **\n  * Interface for management of research\n  *\n  * @ Author Joseph Penna\n  * @ Version 0.1 © 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic interface extends Remote IRicerca\n(\n\n/ / Constants identify the types of site\npublic final static byte BENE_CULTURALE = 0;\npublic final static byte PUNTO_DI_RISTORO = 1;\n\n/ **\n* Initialization method for research\n*\n* @ Param pIdTurista ID of the tourist. Pass -1 in case of a Guest\n* @ Param pParoleChiave Together keyword search\nTogether * @ param pTagsId Search Tags\n* @ Param pRaggioMax Maximum distance between the user and the site\n* @ Param numeroElementiPerPagina number of items to look for in a\n* Search session\n* @ Param pPosizioneUtente detected by the GPS user position\n* @ Param type pTipologiaSito site search\n* @ Return number of elements emerged from the research. On error\n* Returns -1\n* @ Throws RemoteException the remote exception\n* /\npublic int search (int pIdTurista, pParoleChiave String, int [] pTagsId, double pRaggioMax,\nint pElementiPerPagina, Punto3D pPosizioneUtente,\npTipologiaSito bytes) throws RemoteException;\n\n/ **\n* Method for returning the list of emerging from the Cultural Heritage\n* Research, in a given interval\n*\n* @ Param pPagina range of items to be included in the results\n* @ Return entirety of cultural property related to the range of results\n* Selected search. In case of error returns null\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanBeneCulturale [] ottieniPaginaRisultatiBeneCulturale (int pPagina)\nthrows RemoteException;\n\n/ **\n* Method to return the list of eateries have emerged from\n* Research related to a specific intevallo\n*\n* @ Param pPagina range of items to be included in the results\n* @ Return set of points relating to the range of refreshment\n* Selected search results. In case of error returns null\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanPuntoDiRistoro [] ottieniPaginaRisultatiPuntoDiRistoro (int pPagina)\nthrows RemoteException;\n\n/ **\n* Method for returning the number of elements results from\n* Search\n*\n* @ Return number of elements emerged in the research phase. Where no\n* Is initialized the search returns -1\n* /\npublic int ottieniNumeroElementiRicerca () throws RemoteException;\n\n/ **\n* Method for returning the number of pages appear in results\n*\n* @ Return number of pages that have emerged in the research phase. Where no\n* Is initialized the search returns -1\n* /\npublic int ottieniNumeroPagineRicerca () throws RemoteException;\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694266"},"name":"IGestioneBeniCulturaliComune.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694265"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429d"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b3"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d4"}]],"contents":"package unisa.gps.etour.control.GestioneBeniCulturali;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanVisitaBC;\n\n/ **\n  * Interface for operations common to users and operators on Agency\n  * Beniculturali\n  *\n  * @ Author Michelangelo De Simone\n  * @ Version 0.1\n  *\n  * © 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npublic interface extends Remote IGestioneBeniCulturaliComune\n(\n/ **\n*\n* Method to return a particular Cultural Heritage\n*\n* @ Param pBeneCulturaleID The identifier of the cultural property to be returned\n* @ Return BeanBeneCulturale Contains data required of Cultural Heritage\n* @ Throws RemoteException Exception flow\n* /\npublic BeanBeneCulturale ottieniBeneCulturale (int pBeneCulturaleID) throws RemoteException;\n\n/ **\n* Returns the list of tags of a cultural\n*\n* @ Param ID pBeneCulturaleID of Cultural Heritage\n* @ Return ArrayList of the cultural <BeanTag> tags specified\n* @ Throws RemoteException Exception flow\n* /\n<BeanTag> ottieniTagBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException;\n\n/ **\n*\n* Returns a list of feedback to the cultural specified\n*\n* @ Param ID pBeneCulturaleID of Cultural Heritage\n* @ Return HashMap <BeanVisitaBC, String> The feedback of Cultural Heritage\n* @ Throws RemoteException Exception flow\n* /\n<BeanVisitaBC, String> ottieniFeedbackBeneCulturale public HashMap (int pBeneCulturaleID) throws RemoteException;\n\n/ **\n*\n* Returns for the cultural property specified, an array where each position contains the number of\n* Feedback corresponding to the value of the array more than 'one.\n* The calculation and 'made in the period between 30 days and today.\n*\n* @ Param ID pBeneCulturaleID of Cultural Heritage\n* @ Return ArrayList <Integer> The statistics of last thirty days\n* @ Throws RemoteException Exception flow\n* /\n<Integer> ottieniStatisticheBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException;\n\n/ **\n* Method for updating (or modification) of a feedback for a certain good\n* Cultural. The method has the burden of\n*\n* @ Param pBeneCulturaleID The identifier of the cultural change which the feedback\n* @ Param pBeanVisitaBC The new feedback to the cultural indicated\n* @ Return boolean The result of the operation; true if was successful, false otherwise\n* @ Throws RemoteException Exception flow\n* /\npublic boolean modificaFeedbackBeneCulturale (int pBeneCulturaleID, BeanVisitaBC pBeanVisitaBC) throws RemoteException;\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694267"},"name":"GestioneBeniCulturaliComune.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694265"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b3"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d4"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneBeniCulturali;\n\nimport java.rmi.RemoteException;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.repository.DBTag;\n/ / import unisa.gps.etour.repository.DBBeneCulturale;\n/ / import unisa.gps.etour.repository.DBTurista;\n/ / import unisa.gps.etour.repository.DBVisitaBC;\nimport unisa.gps.etour.repository.IDBBeneCulturale;\nimport unisa.gps.etour.repository.IDBTag;\nimport unisa.gps.etour.repository.IDBTurista;\nimport unisa.gps.etour.repository.IDBVisitaBC;\nimport unisa.gps.etour.util.CostantiGlobali;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ / Stub\nimport unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBBeneCulturale / / ***\nimport unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBTurista / / ***\nimport unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBVisitaBC / / ***\n\n/ **\n  * Class management of cultural heritage for operations common to all actors\n  *\n  * @ Author Michelangelo De Simone\n  * @ Version 0.1\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\n/ **\n  *\n  * /\nGestioneBeniCulturaliComune UnicastRemoteObject public class extends implements\nIGestioneBeniCulturaliComune\n(\n/ / Connect to DB for Cultural Heritage\nprotected IDBBeneCulturale dbbc;\n\n/ / Connect to DB Tag\nprotected IDBTag dbtag;\n\n/ / Connect to DB for the Feedback / Visits\nprotected IDBVisitaBC dbvisita;\n\n/ / Connect to DB for Tourists\nprotected IDBTurista dbturista;\n\n/ **\n  * Constructor; you instantiate all fields relevant to data management;\n* Fields are initialized for each instance of the class.\n*\n* @ Throws RemoteException Exception flow\n* /\npublic GestioneBeniCulturaliComune () throws RemoteException\n(\n/ / Class Supercostruttore UnicastRemoteObject\nsuper ();\n\n/ / We instantiate objects\nTRY\n(\ndbbc = new DBBeneCulturale ();\ndbtag = new DBTag ();\ndbvisita = new DBVisitaBC ();\ndbturista = new DBTurista ();\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ *\n* Implements the method for obtaining a cultural object by Id\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniBeneCulturale (int)\n* /\npublic BeanBeneCulturale ottieniBeneCulturale (int pBeneCulturaleID) throws RemoteException\n(\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\nBBC BeanBeneCulturale = null;\n\nTRY\n(\nbbc = dbbc.ottieniBeneCulturale (pBeneCulturaleID);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\nbbc return;\n)\n\n/ *\n* Implements the method for obtaining all the tags of a cultural object.\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniTagBeneCulturale (int)\n* /\n<BeanTag> ottieniTagBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException\n(\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\nArrayList <BeanTag> btag = null;\n\nTRY\n(\nbtag = dbtag.ottieniTagBeneCulturale (pBeneCulturaleID);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\nbtag return;\n)\n\n/ *\n* Implements the method to obtain the list of feedback and their username on a property\n* Cultural specified by Id\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniFeedbackBeneCulturale (int)\n* /\n<BeanVisitaBC, String> ottieniFeedbackBeneCulturale public HashMap (int pBeneCulturaleID) throws RemoteException\n(\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\nHashMap <BeanVisitaBC, String> mappaRitorno;\n\nTRY\n(\n/ / Instantiate the map of the same size as the list of BeanVisitaBC\nmappaRitorno = new HashMap <BeanVisitaBC, String> (dbvisita.ottieniListaVisitaBC (pBeneCulturaleID). size ());\n\n/ / For each visit by adding their username\n/ / Here we begin to iterate to add to any visit their username\nfor (BeanVisitaBC b: dbvisita.ottieniListaVisitaBC (pBeneCulturaleID))\nmappaRitorno.put (b, dbturista.ottieniTurista (b.getIdTurista ()). GetUserName ());\n\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\nmappaRitorno return;\n)\n\n/ *\n* Implements the method to obtain statistics about a cultural past\n* Through Id\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniStatisticheBeneCulturale (int)\n* /\n<Integer> ottieniStatisticheBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException\n(\n/ *\n* This method returns an ArrayList containing 5 elements (0 .. 4).\n* For each index more 'one is the number of equivalent value your feedback\n* Index number more 'one.\n* Even in this case the method is not 'particularly attractive but it does its dirty work\n* Fine.\n* /\n\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\nArrayList <Integer> listaRisultati <Integer> = new ArrayList (5);\n\n/ / Set all the indices to 0\nfor (int i = 0; i <5; i + +)\nlistaRisultati.add (i, Integer.valueOf (0));\n\n/ / Calculate the date for the last thirty days\nDate ultimiTrentaGiorni = new Date (new Date (). GetTime () - CostantiGlobali.TRENTA_GIORNI);\n\nTRY\n(\n/ / Get all visits of a certain cultural\n/ / Loop looking for the requests / feedback obtained within the last thirty days\nfor (BeanVisitaBC b: dbvisita.ottieniListaVisitaBC (pBeneCulturaleID))\nif (b.getDataVisita (). after (ultimiTrentaGiorni))\nlistaRisultati.set (b.getVoto () - 1, Integer.valueOf (listaRisultati.get (b.getVoto () - 1). intValue () + 1));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\nlistaRisultati return;\n)\n\n/ *\n* Implement the method for changing a feedback on a cultural past\n* Through Id\n*\n* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # modificaFeedbackBeneCulturale (int, unisa.gps.etour.bean.BeanVisitaBC)\n* /\npublic boolean modificaFeedbackBeneCulturale (int pBeneCulturaleID, BeanVisitaBC pBeanVisitaBC) throws RemoteException\n(\nif (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID) | |\n! ControlloVisiteBeniCulturali.controllaDatiVisitaBeneCulturale (pBeanVisitaBC))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\n/ *\n* Please check that the vote has not changed.\n* If the vote is changed to an exception is raised\n* /\nvotoOk boolean = true;\n\nTRY\n(\nvotoOk = dbvisita.ottieniVisitaBC (pBeneCulturaleID, pBeanVisitaBC.getIdTurista ()). getVoto () == pBeanVisitaBC.getVoto ();\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\n/ *\n* If the vote is not changed we proceed to send the message to the method of\n* Change the layer's database.\n* /\nif (votoOk)\nTRY\n(\nreturn (dbvisita.modificaVisitaBC (pBeanVisitaBC));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\nreturn false;\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694269"},"name":"DBPuntoDiRistoro.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694268"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694273"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport Java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.sql.Time;\nimport java.util.ArrayList;\nimport java.util.Date;\n\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.util.Punto3D;\n\n/ **\n  * Class that implements the interface of Refreshment\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class DBPuntoDiRistoro implements IDBPuntoDiRistoro\n(\n/ / Empty constructor\npublic DBPuntoDiRistoro ()\n(\n\n)\n\npublic boolean cancellaPuntoDiRistoro (int pIdPuntoDiRistoro)\nthrows SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query cancellation\nString query = \"DELETE FROM puntodiristoro WHERE Id =\"\n+ PIdPuntoDiRistoro;\n/ / You run the query Cancellation\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)\nthrows SQLException\n(\n/ / Create the organization of the Opening and Closing\njava.sql.Time orarioApertura = new Time (pPuntoDiRistoro\n. getOrarioApertura (). getTime ());\njava.sql.Time orarioChiusura = new Time (pPuntoDiRistoro\n. getOrarioChiusura (). getTime ());\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the insertion of a refreshment\nString query = \"INSERT INTO puntodiristoro (Name,\"\n+ \"Description, Telephone, Latitude, Longitude,\"\n+ \"Altitude, OrarioApertura, OrarioChiusura, GiornoChiusura\"\n+ \"Town, city, street, postcode, Province, MediaVoti, NumeroVoti\"\n+ \"PartitaIva) VALUES ( '\" + pPuntoDiRistoro.getNome ()\nPPuntoDiRistoro.getDescrizione + \"','\" + () + \"','\"\nPPuntoDiRistoro.getTelefono + () + \" ',\"\nPPuntoDiRistoro.getPosizione + (). GetLatitudine () + \"\"\nPPuntoDiRistoro.getPosizione + (). GetLongitudine () + \"\"\nPPuntoDiRistoro.getPosizione + (). GetAltitudine () + \" '\"\nOrarioApertura.toString + () + \"','\"\nOrarioChiusura.toString + () + \"','\"\nPPuntoDiRistoro.getGiornoChiusura + () + \"','\"\nPPuntoDiRistoro.getLocalita + () + \"','\"\nPPuntoDiRistoro.getCitta + () + \"','\"\nPPuntoDiRistoro.getVia + () + \"','\"\nPPuntoDiRistoro.getCap + () + \"','\"\nPPuntoDiRistoro.getProvincia + () + \" ',\"\nPPuntoDiRistoro.getMediaVoti + () + \"\"\nPPuntoDiRistoro.getNumeroVoti + () + \" '\"\nPPuntoDiRistoro.getPartitaIva + () + \"');\";\n/ / You run the insert query\nint i = stat.executeUpdate (query);\nreturn (i == 1);\n)\n/ / Is always done and takes care of closing the statement, and\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean modificaPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)\nthrows SQLException\n(\n/ / Create the organization of the Opening and Closing\njava.sql.Time orarioApertura = new Time (pPuntoDiRistoro\n. getOrarioApertura (). getTime ());\njava.sql.Time orarioChiusura = new Time (pPuntoDiRistoro\n. getOrarioChiusura (). getTime ());\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for amendment\nString query = \"UPDATE puntodiristoro SET\" + \"Name = '\"\nPPuntoDiRistoro.getNome + () + \" ', Description ='\"\nPPuntoDiRistoro.getDescrizione + () + \" ', Phone ='\"\nPPuntoDiRistoro.getTelefono + () + \" ', Latitude =\"\nPPuntoDiRistoro.getPosizione + (). GetLatitudine ()\n+ \"Longitude =\"\nPPuntoDiRistoro.getPosizione + (). GetLongitudine ()\n+ \", Height =\"\nPPuntoDiRistoro.getPosizione + (). GetAltitudine ()\n+ \", OrarioApertura = '\" + orarioApertura.toString ()\n+ \" ', OrarioChiusura ='\" + orarioChiusura.toString ()\n+ \" ', GiornoChiusura ='\"\nPPuntoDiRistoro.getGiornoChiusura + () + \" ', Location ='\"\nPPuntoDiRistoro.getLocalita + () + \" ', City ='\"\nPPuntoDiRistoro.getCitta + () + \" ', Via ='\"\nPPuntoDiRistoro.getVia + () + \" ', postcode ='\"\nPPuntoDiRistoro.getCap + () + \" ', State ='\"\nPPuntoDiRistoro.getProvincia + () + \" ', MediaVoti =\"\nPPuntoDiRistoro.getMediaVoti + () + \", NumeroVoti =\"\nPPuntoDiRistoro.getNumeroVoti + () + \", party = '\"\nPPuntoDiRistoro.getPartitaIva + () + \" 'WHERE Id =\"\n+ PPuntoDiRistoro.getId ();\n/ / You run the query for Change\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Is always done and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic int ottieniNumeroElementiRicerca (String pKeyword,\nArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to get the number of pages\nString query = \"\";\nif (pTags.size () == 0)\n(\n/ / Query without the control tag\nquery = \"SELECT count (number) FROM (SELECT count (puntodiristoro.Id) AS number\"\n+ \"FROM puntodiristoro\"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\"\n+ PKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\"\n+ PKeyword\n+ '%') \"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\n+ PPosizione.getLatitudine ()\n+ \"\"\n+ PPosizione.getLongitudine ()\n+ \") <\"\n+ PDistanzaMassima\n+ \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC) AS table\";\n)\nelse\n(\n/ / Query with tags\nquery = \"SELECT count (number) FROM (SELECT count (puntodiristoro.Id) AS number\"\n+ \"FROM puntodiristoro\"\n+ \"JOIN (appartenenzapr JOIN tag ON IdTag = Id)\"\n+ \"ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro\"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\"\n+ PKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\"\n+ PKeyword\n+ '%') AND (tag.Nome = ' \"+ pTags.get (0). GetName ();\nif (pTags.size ()> = 2)\n(\nquery = query + \" 'OR tag.Nome ='\"\nPTags.get + (1). GetName ();\n)\nif (pTags.size ()> = 3)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (2). GetName ();\n)\nif (pTags.size ()> = 4)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (3). GetName ();\n)\nif (pTags.size ()> = 5)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (4). GetName ();\n)\nquery = query\n+ \" ')\"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\nPPosizione.getLatitudine + () + \"\"\nPPosizione.getLongitudine + () + \") <\"\nPDistanzaMassima + + \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC) AS table\";\n\n)\n/ / You run the query\nresult = stat.executeQuery (query);\n/ / It returns the value of count () that contains the number of\n/ / Tuple\nint i = 0;\nif (result.next ())\n(\ni = result.getInt (1);\n)\nreturn i;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to get the number of pages of advanced\nString query = \"\";\nif (pTags.size () == 0)\n(\n/ / Query without the control tag\nquery = \"SELECT count (number) FROM (SELECT count (puntodiristoro.Id) AS number\"\n+ \"FROM (puntodiristoro LEFT JOIN\"\n+ \"(SELECT IdPuntoDiRistoro\"\n+ \"FROM associazionepr, (\"\n+ \"SELECT IdPreferenzeDiRicerca\"\n+ \"FROM rating\"\n+ \"WHERE IdTurista =\"\n+ PIdTurista\n+ \") AS pref\"\n+ \"WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca)\"\n+ Preferences AS ON puntodiristoro.Id preferenze.IdPuntoDiRistoro =) \"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\"\n+ PKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\"\n+ PKeyword\n+ '%') \"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\n+ PPosizione.getLatitudine ()\n+ \"\"\n+ PPosizione.getLongitudine ()\n+ \") <\"\n+ PDistanzaMassima\n+ \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC) AS table\";\n)\nelse\n(\n/ / Query with tags\nquery = \"SELECT count (number) FROM (SELECT count (puntodiristoro.Id) AS number\"\n+ \"FROM (puntodiristoro LEFT JOIN\"\n+ \"(SELECT IdPuntoDiRistoro\"\n+ \"FROM associazionepr, (\"\n+ \"SELECT IdPreferenzeDiRicerca\"\n+ \"FROM rating\"\n+ \"WHERE IdTurista =\"\n+ PIdTurista\n+ \") AS pref\"\n+ \"WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca)\"\n+ Preferences AS ON puntodiristoro.Id preferenze.IdPuntoDiRistoro =) \"\n+ \"JOIN (appartenenzapr JOIN tag ON IdTag = Id)\"\n+ \"ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro\"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\"\n+ PKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\"\n+ PKeyword\n+ '%') AND (tag.Nome = ' \"+ pTags.get (0). GetName ();\nif (pTags.size ()> = 2)\n(\nquery = query + \" 'OR tag.Nome ='\"\nPTags.get + (1). GetName ();\n)\nif (pTags.size ()> = 3)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (2). GetName ();\n)\nif (pTags.size ()> = 4)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (3). GetName ();\n)\nif (pTags.size ()> = 5)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (4). GetName ();\n)\nquery = query\n+ \" ')\"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\nPPosizione.getLatitudine + () + \"\"\nPPosizione.getLongitudine + () + \") <\"\nPDistanzaMassima + + \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC) AS table\";\n)\n/ / You run the query\nresult = stat.executeQuery (query);\n/ / It returns the value of count () that contains the number of\n/ / Tuple\nint i = 0;\nif (result.next ())\n(\ni = result.getInt (1);\n)\nreturn i;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pid)\nthrows SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query\nString query = \"SELECT * FROM puntodiristoro WHERE Id =\" + pid;\n/ / You run the query\nresult = stat.executeQuery (query);\nif (result.next ())\n(\n/ / We create the objects to be returned\nPunto3D point = new Punto3D (result.getDouble ( \"Latitude\")\nresult.getDouble ( \"Longitude\"), result\n. getDouble ( \"Elevation\"));\nDate orarioApertura = new Date (result.getTime (OrarioApertura \")\n. getTime ());\nDate orarioChiusura = new Date (result.getTime (OrarioChiusura \")\n. getTime ());\n/ / This generates the resting spot of bean\nBeanPuntoDiRistoro puntoTemp = new BeanPuntoDiRistoro (result\n. getInt ( \"Id\"), result.getInt ( \"NumeroVoti\"), result\n. getDouble ( \"MediaVoti\"), result.getString ( \"Name\")\nresult.getString ( \"Description\"), result\n. getString ( \"Phone\"), result\n. getString ( \"Location\"), result\n. getString ( \"City\"), result.getString ( \"Way\"),\nresult.getString ( \"Cap\"), result.getString ( \"Province\"),\nresult.getString ( \"PartitaIva\"), point, orarioApertura,\norarioChiusura, result.getString ( \"GiornoChiusura\"));\n/ / It returns the refreshment\npuntoTemp return;\n)\nelse\n(\nreturn null;\n)\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic ArrayList <BeanPuntoDiRistoro> search (String pKeyword,\nArrayList <BeanTag> pTags, int pNumeroPagina,\nint pNumeroElementiPerPagina, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for search\nString query = \"\";\nif (pTags.size () == 0)\n(\n/ / Query without the control tag\nquery = \"SELECT *\"\n+ \"FROM puntodiristoro\"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\"\n+ PKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\"\n+ PKeyword\n+ '%') \"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\nPPosizione.getLatitudine + () + \"\"\nPPosizione.getLongitudine + () + \") <\"\nPDistanzaMassima + + \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC LIMIT\"\n+ (PNumeroPagina * pNumeroElementiPerPagina) + \"\"\n+ PNumeroElementiPerPagina;\n)\nelse\n(\n/ / Query with tags\nquery = \"SELECT *\"\n+ \"FROM puntodiristoro\"\n+ \"JOIN (appartenenzapr JOIN tag ON IdTag = Id)\"\n+ \"ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro\"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\" + pKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\" + pKeyword\n+ '%') AND (tag.Nome = ' \"+ pTags.get (0). GetName ();\nif (pTags.size ()> = 2)\n(\nquery = query + \" 'OR tag.Nome ='\"\nPTags.get + (1). GetName ();\n)\nif (pTags.size ()> = 3)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (2). GetName ();\n)\nif (pTags.size ()> = 4)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (3). GetName ();\n)\nif (pTags.size ()> = 5)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (4). GetName ();\n)\nquery = query\n+ \" ')\"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\nPPosizione.getLatitudine + () + \"\"\nPPosizione.getLongitudine + () + \") <\"\nPDistanzaMassima + + \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC LIMIT\"\n+ (PNumeroPagina * pNumeroElementiPerPagina) + \"\"\n+ PNumeroElementiPerPagina;\n)\n/ / You run the query\nresult = stat.executeQuery (query);\n/ / List that will contain the BeanPuntoDiRistoro\n<BeanPuntoDiRistoro> ArrayList list = new ArrayList <BeanPuntoDiRistoro> ();\nwhile (result.next ())\n(\n/ / We create the objects to be returned\nPunto3D point = new Punto3D (result.getDouble ( \"Latitude\")\nresult.getDouble ( \"Longitude\"), result\n. getDouble ( \"Elevation\"));\nDate orarioApertura = new Date (result.getTime (OrarioApertura \")\n. getTime ());\nDate orarioChiusura = new Date (result.getTime (OrarioChiusura \")\n. getTime ());\n/ / Build the refreshment\nBeanPuntoDiRistoro puntoTemp = new BeanPuntoDiRistoro (result\n. getInt ( \"Id\"), result.getInt ( \"NumeroVoti\"), result\n. getDouble ( \"MediaVoti\"), result.getString ( \"Name\")\nresult.getString ( \"Description\"), result\n. getString ( \"Phone\"), result\n. getString ( \"Location\"), result\n. getString ( \"City\"), result.getString ( \"Way\"),\nresult.getString ( \"Cap\"), result.getString ( \"Province\"),\nresult.getString ( \"PartitaIva\"), point, orarioApertura,\norarioChiusura, result.getString ( \"GiornoChiusura\"));\n/ / Insert the bean in the list\nlista.add (puntoTemp);\n)\n/ / It returns the list\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n<BeanPuntoDiRistoro> ricercaAvanzata public ArrayList (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, int pNumeroPagina,\nint pNumeroElementiPerPagina, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for advanced search\nString query = \"\";\nif (pTags.size () == 0)\n(\n/ / Query without tags\nquery = \"SELECT *\"\n+ \"FROM (puntodiristoro LEFT JOIN\"\n+ \"(SELECT IdPuntoDiRistoro\"\n+ \"FROM associazionepr, (\"\n+ \"SELECT IdPreferenzeDiRicerca\"\n+ \"FROM rating\"\n+ \"WHERE IdTurista =\"\n+ PIdTurista\n+ \") CI pref\"\n+ \"WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca)\"\n+ Preferences AS ON puntodiristoro.Id preferenze.IdPuntoDiRistoro =) \"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\"\n+ PKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\"\n+ PKeyword\n+ \"%')\"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\nPPosizione.getLatitudine + () + \"\"\nPPosizione.getLongitudine + () + \") <\"\nPDistanzaMassima + + \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC LIMIT\"\n+ (PNumeroPagina * pNumeroElementiPerPagina) + \"\"\n+ PNumeroElementiPerPagina;\n)\nelse\n(\n/ / Query with tags\nquery = \"SELECT *\"\n+ \"FROM (puntodiristoro LEFT JOIN\"\n+ \"(SELECT IdPuntoDiRistoro\"\n+ \"FROM associazionepr, (\"\n+ \"SELECT IdPreferenzeDiRicerca\"\n+ \"FROM rating\"\n+ \"WHERE IdTurista =\"\n+ PIdTurista\n+ \") AS pref\"\n+ \"WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca)\"\n+ Preferences AS ON puntodiristoro.Id preferenze.IdPuntoDiRistoro =) \"\n+ \"JOIN (appartenenzapr JOIN tag ON IdTag = Id)\"\n+ \"ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro\"\n+ \"WHERE (puntodiristoro.Nome LIKE '%\" + pKeyword\n+ \"% 'OR puntodiristoro.Descrizione LIKE'%\" + pKeyword\n+ '%') AND (tag.Nome = ' \"+ pTags.get (0). GetName ();\nif (pTags.size ()> = 2)\n(\nquery = query + \" 'OR tag.Nome ='\"\nPTags.get + (1). GetName ();\n)\nif (pTags.size ()> = 3)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (2). GetName ();\n)\nif (pTags.size ()> = 4)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (3). GetName ();\n)\nif (pTags.size ()> = 5)\n(\nquery = query + \" 'OR tag.Nome ='\"\n+ PTags.get (4). GetName ();\n)\nquery = query\n+ \" ')\"\n+ \"AND distance (puntodiristoro.Latitudine, puntodiristoro.Longitudine\"\nPPosizione.getLatitudine + () + \"\"\nPPosizione.getLongitudine + () + \") <\"\nPDistanzaMassima + + \"GROUP BY puntodiristoro.Id\"\n+ \"ORDER BY count (puntodiristoro.Id) DESC LIMIT\"\n+ (PNumeroPagina * pNumeroElementiPerPagina) + \"\"\n+ PNumeroElementiPerPagina;\n)\n/ / You run the query\nresult = stat.executeQuery (query);\n\n<BeanPuntoDiRistoro> ArrayList list = new ArrayList <BeanPuntoDiRistoro> ();\nwhile (result.next ())\n(\n/ / We create the objects to be returned\nPunto3D point = new Punto3D (result.getDouble ( \"Latitude\")\nresult.getDouble ( \"Longitude\"), result\n. getDouble ( \"Elevation\"));\nDate orarioApertura = new Date (result.getTime (OrarioApertura \")\n. getTime ());\nDate orarioChiusura = new Date (result.getTime (OrarioChiusura \")\n. getTime ());\n/ / This creates the cultural\nBeanPuntoDiRistoro beneTemp = new BeanPuntoDiRistoro (result\n. getInt ( \"Id\"), result.getInt ( \"NumeroVoti\"), result\n. getDouble ( \"MediaVoti\"), result.getString ( \"Name\")\nresult.getString ( \"Description\"), result\n. getString ( \"Phone\"), result\n. getString ( \"Location\"), result\n. getString ( \"City\"), result.getString ( \"Way\"),\nresult.getString ( \"Cap\"), result.getString ( \"Province\"),\nresult.getString ( \"PartitaIva\"), point, orarioApertura,\norarioChiusura, result.getString ( \"GiornoChiusura\"));\n/ / Insert the bean in the list\nlista.add (beneTemp);\n)\n/ / It returns the list\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n<BeanPuntoDiRistoro> ottieniListaPR public ArrayList () throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for a list of all the refreshment\nString query = \"SELECT * FROM puntodiristoro\";\n/ / You run the query\nresult = stat.executeQuery (query);\n/ / List that will contain the BeanPuntoDiRistoro\n<BeanPuntoDiRistoro> ArrayList list = new ArrayList <BeanPuntoDiRistoro> ();\nwhile (result.next ())\n(\n/ / We create the objects to be returned\nPunto3D point = new Punto3D (result.getDouble ( \"Latitude\")\nresult.getDouble ( \"Longitude\"), result\n. getDouble ( \"Elevation\"));\nDate orarioApertura = new Date (result.getTime (OrarioApertura \")\n. getTime ());\nDate orarioChiusura = new Date (result.getTime (OrarioChiusura \")\n. getTime ());\n/ / Build the refreshment\nBeanPuntoDiRistoro puntoTemp = new BeanPuntoDiRistoro (result\n. getInt ( \"Id\"), result.getInt ( \"NumeroVoti\"), result\n. getDouble ( \"MediaVoti\"), result.getString ( \"Name\")\nresult.getString ( \"Description\"), result\n. getString ( \"Phone\"), result\n. getString ( \"Location\"), result\n. getString ( \"City\"), result.getString ( \"Way\"),\nresult.getString ( \"Cap\"), result.getString ( \"Province\"),\nresult.getString ( \"PartitaIva\"), point, orarioApertura,\norarioChiusura, result.getString ( \"GiornoChiusura\"));\n/ / Insert the bean in the list\nlista.add (puntoTemp);\n)\n/ / It returns the list\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69426a"},"name":"GestionePuntiDiRistoroAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694268"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426c"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694273"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}]],"contents":"ï»¿package unisa.gps.etour.control.GestionePuntiDiRistoro;\n\nimport java.rmi.RemoteException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport unisa.gps.etour.bean.BeanConvenzione;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n/ *\n  * TEST CASE import\n  * Unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBConvenzione;\n  * Import unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBTurista;\n  * /\nimport unisa.gps.etour.repository.DBConvenzione;\nimport unisa.gps.etour.repository.DBTurista;\nimport unisa.gps.etour.repository.IDBConvenzione;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ **\n  * Class contentente methods for managing Refreshments by\n  * Operator Agency\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class GestionePuntiDiRistoroAgenzia extends GestionePuntiDiRistoroComune\nimplements IGestionePuntiDiRistoroAgenzia\n(\n\nprivate static final long serialVersionUID = 1L;\n\n/ / Constructor\npublic GestionePuntiDiRistoroAgenzia () throws RemoteException\n(\n/ / Call the constructor of the inherited class to instantiate\n/ / Database connections\nsuper ();\ndbTurista = new DBTurista ();\n)\n\n/ / Method that allows the operator to cancel an agency point of\n/ / Refreshment\n/ / Passing as parameter the ID of the same Refreshment\npublic boolean cancellaPuntoDiRistoro (int pPuntoDiRistoroID)\nthrows RemoteException\n(\n/ / Check the validity identifier\nif (pPuntoDiRistoroID <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\nTRY\n(\n/ / Execute the method that clears the Refreshment from the Database\n/ / And in case of operation successful return true\nif (puntoRistoro.cancellaPuntoDiRistoro (pPuntoDiRistoroID))\nreturn true;\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method cancellaPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method cancellaPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If no operations were successful return false end\nreturn false;\n)\n\n/ / Method that allows the operator to include in the Agency database\n/ / The new Refreshment with the information contained in the bean\npublic boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)\nthrows RemoteException\n(\n/ / Check the validity of the bean as a parameter and if\n/ / Triggers except remote\nif ((pPuntoDiRistoro == null)\n| | (! (PPuntoDiRistoro instanceof BeanPuntoDiRistoro)))\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\nTRY\n(\n/ / Calling the method of the class that operates on the database\n/ / Insert the new Refreshment\nif (puntoRistoro.inserisciPuntoDiRistoro (pPuntoDiRistoro))\n/ / In the case where the operations were successful end\n/ / Returns true\nreturn true;\n)\n/ / Exception in database operations\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method inserisciPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method inserisciPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If the operation is not successful return false\nreturn false;\n)\n\n/ / Method for obtaining an ArrayList with all the points Bean\n/ / Refreshments\n<BeanPuntoDiRistoro> ottieniPuntiDiRistoro public ArrayList ()\nthrows RemoteException\n(\n/ / ArrayList to return to the end of the method\nArrayList <BeanPuntoDiRistoro> toReturn = null;\nTRY\n(\n/ / Get the list of Refreshments through the class\n/ / Connect to database\n/ / And save the list itself nell'ArrayList\ntoReturn = puntoRistoro.ottieniListaPR ();\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method ottieniPuntiDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniPuntiDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the ArrayList to return so as not to pass null values\n/ / To the caller\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n/ / Return the ArrayList with all the refreshment\ntoReturn return;\n)\n\n/ / Method that allows you to get all the refreshment that have\n/ / A Convention on or off depending on the parameter passed\npublic ArrayList <BeanPuntoDiRistoro> ottieniPuntiDiRistoro (\nstatoConvenzione boolean) throws RemoteException\n(\n/ / Array that allows me to store all the refreshment and\n/ / Which will remove\n/ / Depending on the parameter passed to the refreshment active or not\nArrayList <BeanPuntoDiRistoro> toReturn = null;\n/ / Array that allows me to store all the refreshment active\n/ / Using the database connection\nArrayList <BeanPuntoDiRistoro> active = null;\n/ / Instance to connect to the database\nIDBConvenzione conv = new DBConvenzione ();\nTRY\n(\n/ / Connect all proceeds from the refreshment Assets\nconv.ottieniListaConvenzioneAttivaPR assets = ();\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method ottieniPuntiDiRistoro (boolean)\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method ottieniPuntiDiRistoro (boolean)\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If you want to get the refreshment active, then return\n/ / Directly to those passed by the connection to the database\nif (statoConvenzione)\n(\n/ / Check the contents dell'ArrayList so as not to return\n/ / Null values to the caller\nif (active == null)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\nreturn active;\n)\nelse\n(\nTRY\n(\n/ / Connect all proceeds from the refreshment then\n/ / Perform comparisons\ntoReturn = puntoRistoro.ottieniListaPR ();\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method ottieniPuntiDiRistoro (boolean)\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method ottieniPuntiDiRistoro (boolean)\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Size dell'ArrayList containing all of gourmet\n/ / Could\n/ / Change size if you remove some element\nint dim = toReturn.size ();\n/ / Variable that allows me to understand whether to remove a Point\n/ / Refreshments\n/ / From array that then I must return\nboolean present = false;\n/ / First loop to loop through all the ArrayList elements of\n/ / All Refreshments\nfor (int i = 0; i <dim; i + +)\n(\n/ / Second loop to loop through all the ArrayList elements\n/ / Cones just Refreshments active\nfor (int j = 0 j <attivi.size () j + +)\n(\n/ / If the catering points in question has the ID equal to one\n/ / Of those assets, then set this to true\nif (attivi.get (j). getId () == toReturn.get (i). getId ())\npresent = true;\n)\n/ / If the catering points in question has a Convention active\n/ / Removes it from those to be returned\nif (present)\ntoReturn.remove (i);\n)\n)\n/ / Return the ArrayList obtained\ntoReturn return;\n)\n\n/ / Method that allows you to change the past as a refreshment\n/ / Parameter\npublic boolean modificaPuntoDiRistoro (\nBeanPuntoDiRistoro pPuntoDiRistoroAggiornato)\nthrows RemoteException\n(\n/ / Check the validity of the bean as a parameter and if\n/ / Trigger an exception remote\nif (null == pPuntoDiRistoroAggiornato\n| | (! (PPuntoDiRistoroAggiornato instanceof BeanPuntoDiRistoro)))\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\nTRY\n(\n/ / Call the method to change the database connection\n/ / The Refreshment\nif (puntoRistoro.modificaPuntoDiRistoro (pPuntoDiRistoroAggiornato))\n/ / Return a positive value if the operation was successful\n/ / End\nreturn true;\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method modificaPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method modificaPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Return false if the operation is successful you should\nreturn false;\n)\n\n/ / Method to obtain the Bean a particular point\n/ / Refreshment whose\n/ / Identifier is passed as parameter\npublic BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pPuntoDiRistoroID)\nthrows RemoteException\n(\n/ / Check the validity identifier\nif (pPuntoDiRistoroID <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Bean to return to the caller\nBeanPuntoDiRistoro toReturn = null;\nTRY\n(\n/ / Revenue catering points in the issue by connecting to\n/ / Database\ntoReturn = puntoRistoro.ottieniPuntoDiRistoro (pPuntoDiRistoroID);\n)\n/ / Exception in the database opearazioni\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the bean to be returned in order not to return null values\n/ / To the caller\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n/ / Return the bean of Refreshment\ntoReturn return;\n)\n\n/ / Method that allows you to activate a particular convention to a Point\n/ / Passed as parameter Refreshments\npublic boolean attivaConvenzione (int pPuntoDiRistoroID,\nBeanConvenzione pConv) throws RemoteException\n(\n/ / Check the validity of parameters passed\nif ((pPuntoDiRistoroID <0) | | (pConv == null)\n| | (! (PConv instanceof BeanConvenzione)))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Check the data further\nif (pConv.getIdPuntoDiRistoro ()! = pPuntoDiRistoroID)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\nIDBConvenzione conv = null;\nTRY\n(\n/ / Instantiate the class to connect to the database\nconv = new DBConvenzione ();\n/ / If the Convention is not yet active, previously provided to\n/ / Activate it locally and then pass the bean to the database changed\nif (conv.ottieniConvezioneAttiva (pPuntoDiRistoroID) == null)\n(\npConv.setAttiva (true);\nconv.modificaConvenzione (pConv);\nreturn true;\n)\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method attivaConvenzione\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If the operation is successful you should return false\nreturn false;\n)\n\n/ / Method that returns a HashMap containing, for Refreshment\n/ / Passed as a parameter, the feedback associated with it\npublic HashMap <BeanVisitaPR, String> ottieniFeedbackPuntoDiRistoro (\npPuntoDiRistoroID int) throws RemoteException\n(\n/ / Check the ID passed as a parameter\nif (pPuntoDiRistoroID <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Instantiate the map and the performance of ArrayList that I will use\n/ / Method\nHashMap <BeanVisitaPR, String> mappaRitorno = null;\nArrayList <BeanVisitaPR> bvisita = null;\nTRY\n(\n/ / Here I take the list of all visits to the PR passed as\n/ / Parameter\nbvisita = feed.ottieniListaVisitaPR (pPuntoDiRistoroID);\n/ / Instantiate the map of the same size as the list of\n/ / BeanVisitaPR\nmappaRitorno = new HashMap <BeanVisitaPR, String> (bvisita.size ());\n/ / Here we begin to iterate on each visit to add its\n/ / Username\nfor (Iterator <BeanVisitaPR> iteratoreVisitaPR = bvisita.iterator (); iteratoreVisitaPR\n. hasNext ();)\n(\n/ / Recuperto the BeanVisitaPR\nBeanVisitaPR bVisitaTemp = iteratoreVisitaPR.next ();\n/ / Retrieve the tourist who left the comment that I\n/ / Examining\nBeanTurista bTuristaTemp = dbTurista.ottieniTurista (bVisitaTemp\n. getIdTurista ());\n/ / Get the username of the Tourist\nString usernameTuristaTemp = bTuristaTemp.getUsername ();\n/ / Put the pair in the map\nmappaRitorno.put (bVisitaTemp, usernameTuristaTemp);\n)\n)\n/ / Exception in database operations\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method ottieniFeedbackPR\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniFeedbackPR\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the return parameter so as not to pass null values\n/ / To the database\nif (null == mappaRitorno)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\nmappaRitorno return;\n)\n\n/ / Method to insert a tag from those of a refreshment\npublic boolean cancellaTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)\nthrows RemoteException\n(\n/ / Check the validity of past data\nif ((pPuntoDiRistoroId <0) | | (pTagId <0))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / ArrayList which stores all the tags\nArrayList <BeanTag> tags;\n/ / Boolean variable to check if the Refreshment\n/ / Holds the tag you want to delete\nboolean present = false;\nTRY\n(\n/ / Use the method through the class of database connection\ntags = tag.ottieniTagPuntoDiRistoro (pPuntoDiRistoroId);\n)\n/ / Exception in the execution of transactions in database\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method cancellaTagPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method cancellaTagPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check if the tag is present cycle currently\n/ / Between those of Refreshment\nfor (t BeanTag: tags)\nif (t.getId () == pTagId)\npresent = true;\n/ / If the tag is present among those of eateries, then\n/ / Provides for executing the erase operation\nif (present)\n(\nTRY\n(\nreturn tag.cancellaTagPuntoDiRistoro (pPuntoDiRistoroId, pTagId);\n)\n/ / Exception in implementing the operation on the database\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method cancellaTagPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception due to other factors\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method cancellaTagPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n/ / In case something did not come to fruition\n/ / Return false\nreturn false;\n)\n\n/ / Method to delete a tag from those of a refreshment\n/ / The operations are identical to those above, except for\n/ / Control over the presence of the tag from those of Refreshment\n/ / Which should give negative results, and the call here is the method of\n/ / Insert\npublic boolean inserisciTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)\nthrows RemoteException\n(\nif ((pPuntoDiRistoroId <0) | | (pTagId <0))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n\nArrayList <BeanTag> tags;\nboolean present = false;\nTRY\n(\ntags = tag.ottieniTagPuntoDiRistoro (pPuntoDiRistoroId);\n)\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method inserisciTagPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method inserisciTagPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\nfor (t BeanTag: tags)\nif (t.getId () == pTagId)\npresent = true;\n/ / Check that the Refreshment has not already specified tag\nif (present)\n(\nTRY\n(\n/ / Calling the method of adding the class via\n/ / Connect to database\nreturn tag.aggiungeTagPuntoDiRistoro (pPuntoDiRistoroId, pTagId);\n)\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method inserisciTagPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method inserisciTagPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n/ / Return false if some operation is not successful you should\nreturn false;\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69426b"},"name":"IGestionePuntiDiRistoroAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694268"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426c"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694273"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}]],"contents":"ï»¿package unisa.gps.etour.control.GestionePuntiDiRistoro;\n\nimport java.rmi.RemoteException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport unisa.gps.etour.bean.BeanConvenzione;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n/ **\n  * Interface for refreshments on the side of the agency\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab - University\n  * Of Salerno\n  * /\npublic interface extends IGestionePuntiDiRistoroAgenzia\nIGestionePuntiDiRistoroComune\n(\n\n/ **\n* Method for inserting a new Refreshment\n*\n* @ Param pPuntoDiRistoro containing all the data from the Refreshment\n* Add\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)\nthrows RemoteException;\n\n/ **\n* Method for deleting a refreshment bar with ID\n*\n* @ Param pIDPuntoDiRistoro for the unique identification of point\n* Refreshments\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean cancellaPuntoDiRistoro (int pPuntoDiRistoroID)\nthrows RemoteException;\n\n/ **\n* Method to return all the refreshment of the DataBase\n*\n* @ Return ArrayList containing all the beans of the present Refreshments\n* In the DataBase\n* @ Throws RemoteException Exception Remote\n* /\n<BeanPuntoDiRistoro> ottieniPuntiDiRistoro public ArrayList ()\nthrows RemoteException;\n\n/ **\n* Method to return all the refreshment with convention\n* Active or not\n*\n* @ Param Boolean statoConvenzione for the type of eateries by\n* Get (contracted or not)\n* @ Return ArrayList containing all the beans of the present Refreshments\n* In the database depending on the status of the Convention\n* @ Throws RemoteException Exception Remote\n* /\npublic ArrayList <BeanPuntoDiRistoro> ottieniPuntiDiRistoro (\nstatoConvenzione boolean) throws RemoteException;\n\n/ **\n* Method for inserting a new convention for a certain point\n* Refreshments\n*\n* @ Param pPuntoDiRistoroID integer that uniquely identifies the point\n* Refreshments\n* @ Param pConv Convention that will enable (Parameter ID\n* Refreshment create redundancy but is useful for security\n* Data)\n* @ Return boolean for confirmation of operation\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean attivaConvenzione (int pPuntoDiRistoroID,\nBeanConvenzione pConv) throws RemoteException;\n\n/ **\n* Method to get all the feedback associated to a certain point\n* Refreshments\n*\n* @ Param pPuntoDiRistoroID unique identifier of the Refreshment\n* To get feedback\n* @ Return HashMap containing the bean as the key value of feedback and how\n* The tourist who issued the feedback\n* @ Throws RemoteException Exception Remote\n* /\npublic HashMap <BeanVisitaPR, String> ottieniFeedbackPuntoDiRistoro (\npPuntoDiRistoroID int) throws RemoteException;\n\n/ **\n* Method for updating (or change) the data of a Refreshment\n*\n* @ Param pPuntoDiRistoroID for the unique identification of point\n* Refreshments to be amended\n* @ Param pPuntoDiRistoroAggiornato containing the new data to be saved\n* @ Return Boolean value-true if the operation went successfully,\n* False otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean modificaPuntoDiRistoro (\nBeanPuntoDiRistoro pPuntoDiRistoroAggiornato)\nthrows RemoteException;\n\n/ **\n* Method which allows you to insert a tag to search for a useful point\n* Refreshments\n*\n* @ Param pPuntoDiRistoroId unique identifier of Refreshment\n* @ Param pTagId unique ID tags to be inserted\n* @ Return Boolean value-true if the operation went successfully,\n* False otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)\nthrows RemoteException;\n\n/ **\n* Method which allows you to delete a tag to search for a useful point\n* Refreshments\n*\n* @ Param pPuntoDiRistoroId unique identifier of Refreshment\n* @ Param pTagId unique ID tags to be inserted\n* @ Return Boolean value-true if the operation went successfully,\n* False otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean cancellaTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)\nthrows RemoteException;\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69426d"},"name":"IDBConvenzione.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426c"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694277"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c9"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanConvenzione;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\n\n/ **\n  * Interface for managing the database Business\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBConvenzione\n(\n\n/ **\n* Add a convention in the database\n*\n* @ Param pConvenzione Convention by adding\n* @ Throws SQLException\n* /\npublic boolean inserisciConvenzione (BeanConvenzione pConvenzione)\nthrows SQLException;\n\n/ **\n* Modify a convention in the database\n*\n* @ Param data pConvenzione Convention of the Convention to be updated\n* @ Return True if there 'was a modified false otherwise\n* @ Throws SQLException\n* /\npublic boolean modificaConvenzione (BeanConvenzione pConvenzione)\nthrows SQLException;\n\n/ **\n* Delete an agreement by the database\n*\n* @ Param pIdConvenzione ID of the Convention by removing\n* @ Return True if been deleted false otherwise\n* @ Throws SQLException\n* /\npublic boolean cancellaConvenzione (int pIdConvenzione) throws SQLException;\n\n/ **\n* Returns the historical conventions of a refreshment\n*\n* @ Param idPuntoDiRistoro point identification Refreshments\n* @ Return List of conventions of Refreshment given as argument\n* @ Throws SQLException\n* /\npublic ArrayList <BeanConvenzione> ottieniStoricoConvenzione (\nidPuntoDiRistoro int) throws SQLException;\n\n/ **\n* Returns the Convention active a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshments\n* @ Return Convention Turns\n* @ Throws SQLException\n* /\npublic BeanConvenzione ottieniConvezioneAttiva (int pIdPuntoDiRistoro)\nthrows SQLException;\n\n/ **\n* Returns a list of all the PR that have a Convention active\n*\n* @ Return list of all the PR with the Convention active\n* @ Throws SQLException\n* /\n<BeanPuntoDiRistoro> ottieniListaConvenzioneAttivaPR public ArrayList ()\nthrows SQLException;\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69426e"},"name":"BeanConvenzione.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426c"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694277"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c9"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\nimport java.util.Date;\n/ **\n  * Bean containing information relating to a Convention\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class BeanConvenzione implements Serializable\n(\n\nprivate static final long serialVersionUID =-3255500940680220001L;\nprivate int id;\nprivate int maxBanner;\nprivate Date StartDate;\nprivate Date EndDate;\nprivate double price;\nprivate boolean active;\nprivate int idPuntoDiRistoro;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param pMaxBanner\n* @ Param pDataInizio\n* @ Param pDataFine\n* @ Param pPrezzo\n* @ Param pacts\n* @ Param pidPuntoDiRistoro\n* /\npublic BeanConvenzione (int pid, int pMaxBanner, Date pDataInizio,\nDate pDataFine, double pPrezzo, boolean terms,\nint pidPuntoDiRistoro)\n(\nsetId (PID);\nsetMaxBanner (pMaxBanner);\nsetDataInizio (pDataInizio);\nsetDataFine (pDataFine);\nsetPrezzo (pPrezzo);\nsetAttiva (Patti);\nsetIdPuntoDiRistoro (pidPuntoDiRistoro);\n)\n\n/ **\n* Empty Constructor\n*\n* /\npublic BeanConvenzione ()\n(\n\n)\n\n/ **\n* Returns the value of active\n*\n* @ Return value of assets.\n* /\npublic boolean isAttiva ()\n(\nreturn active;\n)\n\n/ **\n* Sets the new value of active\n*\n* @ Param new value terms of assets.\n* /\npublic void setAttiva (boolean Patti)\n(\nactive = Pact;\n)\n\n/ **\n* Returns the value of EndDate\n*\n* @ Return Value EndDate.\n* /\npublic Date getDataFine ()\n(\nEndDate return;\n)\n\n/ **\n* Sets the new value for EndDate\n*\n* @ Param pDataFine New value for EndDate.\n* /\npublic void setDataFine (Date pDataFine)\n(\nEndDate = pDataFine;\n)\n\n/ **\n* Returns the value of StartDate\n*\n* @ Return value StartDate.\n* /\npublic Date getDataInizio ()\n(\nStartDate return;\n)\n\n/ **\n* Sets the new value of StartDate\n*\n* @ Param new value pDataInizio StartDate.\n* /\npublic void setDataInizio (Date pDataInizio)\n(\nStartDate = pDataInizio;\n)\n\n/ **\n* Returns the value of maxBanner\n*\n* @ Return value maxBanner.\n* /\npublic int getMaxBanner ()\n(\nmaxBanner return;\n)\n\n/ **\n* Sets the new value of maxBanner\n*\n* @ Param value pMaxBanner New maxBanner.\n* /\npublic void setMaxBanner (int pMaxBanner)\n(\nmaxBanner = pMaxBanner;\n)\n\n/ **\n* Returns the value of money\n*\n* @ Return value price.\n* /\npublic double getPrezzo ()\n(\nreturn price;\n)\n\n/ **\n* Sets the new value of money\n*\n* @ Param pPrezzo New value for money.\n* /\npublic void setPrezzo (double pPrezzo)\n(\nPrice = pPrezzo;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Returns the value of idPuntoDiRistoro\n*\n* @ Return value idPuntoDiRistoro.\n* /\npublic int getIdPuntoDiRistoro ()\n(\nidPuntoDiRistoro return;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n/ **\n* Sets the new value of idPuntoDiRistoro\n*\n* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.\n* /\npublic void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)\n(\nidPuntoDiRistoro = pIdPuntoDiRistoro;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694270"},"name":"ControlloDati.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694283"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694295"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429a"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942af"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b4"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b7"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c6"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c9"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d5"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942de"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e1"}]],"contents":"ï»¿package unisa.gps.etour.util;\n\nimport java.awt.image.BufferedImage;\nimport java.util.Date;\n\nimport javax.swing.ImageIcon;\n\nimport unisa.gps.etour.bean.BeanBanner;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanConvenzione;\nimport unisa.gps.etour.bean.BeanMenu;\nimport unisa.gps.etour.bean.BeanNews;\nimport unisa.gps.etour.bean.BeanOperatorePuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanPiatto;\nimport unisa.gps.etour.bean.BeanPreferenzaDiRicerca;\nimport unisa.gps.etour.bean.BeanPreferenzeGeneriche;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n/ **\n  * Class for managing the control of the correctness of the strings\n  *\n  * @ Author Joseph Penna\n  * @ Version 0.1 Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class ControlloDati\n(\n\nprivate static final String letter = \"abcdefghijklmnopqrstuvxywz\"\n+ \"ABCDEFGHIJKLMNOPQRSTUVXYWZ\";\nprivate final static String numbers = \"0123456789\";\n\npublic final static int max_length = 64;\n\n/ **\n* Static method for verifying correctness of a string\n*\n* @ Param string to check pStringa\n* @ Param letterePermesse Boolean: True if it is allowed to be present\n* Letters in the string, False otherwise\n* @ Param numeriPermessi Boolean: True if it is allowed to be present\n* Numbers in the string, False otherwise\nCaratteriPermessi * @ param string containing all characters\n* Allowed in the string\n* @ Param string contentente all caratteriNecessari characters\n* Must be present in the string\n* @ Param numeroCaratteriMin integer representing the minimum number of\n* Characters allowed in string\n* @ Param numeroCaratteriMax integer representing the maximum number of\n* Characters allowed in string\n* @ Return Boolean: True if the witch meets the conditions, False\n* Otherwise\n* /\npublic static boolean controllaStringa (String pStringa,\nletterePermesse boolean, boolean numeriPermessi,\nCaratteriPermessi String, String caratteriNecessari,\nnumeroCaratteriMin int, int numeroCaratteriMax)\n(\nChance pStringa == null: the function returns false\nif (null == pStringa)\nreturn false;\n\nint lunghezzaStringa = pStringa.length ();\nCarattereCorrente character;\n\n/ / Check the length of the string\nif (lunghezzaStringa <numeroCaratteriMin\n| | LunghezzaStringa> numeroCaratteriMax)\n(\nreturn false;\n)\n\n/ / Check the presence of the necessary characters in the string\nif (caratteriNecessari = null)\n(\nif (! caratteriNecessari.equals (\"\"))\nfor (int i = 0; i <caratteriNecessari.length (); i + +)\n(\ncarattereCorrente = caratteriNecessari.charAt (i);\nif (! pStringa.contains (carattereCorrente.toString ()))\n(\nreturn false;\n)\n)\n)\n\n/ / Create the string containing all characters allowed\nString stringaCaratteriPermessi = caratteriPermessi\nCaratteriNecessari + + (letterePermesse? Letters: \"\")\n+ (NumeriPermessi? Numbers: \"\");\n\n/ / Loop for the inspection of the characters of the string to check\nfor (int i = 0; i <lunghezzaStringa i + +)\n(\n\ncarattereCorrente = pStringa.charAt (i);\n\n/ / Condition: If the character you are watching is not\n/ / In the string of characters allowed\n/ / The string is incorrect and out of the loop.\nif (! (stringaCaratteriPermessi.contains (carattereCorrente\n. toString ())))\n(\n\nreturn false;\n)\n)\n\nreturn true;\n)\n\npublic static String correggiStringa (String pStringa,\nletterePermesse boolean, boolean numeriPermessi,\nCaratteriPermessi String, int numeroCaratteriMax)\n(\n\nif (null == pStringa)\nreturn null;\n\nString stringaCaratteriPermessi = caratteriPermessi\n+ (LetterePermesse? Letters: \"\")\n+ (NumeriPermessi? Numbers: \"\");\n\nCarattereCorrente character;\nint lunghezzaStringa = pStringa.length ();\nint i = 0;\n\nwhile (i <lunghezzaStringa)\n(\ncarattereCorrente = pStringa.charAt (i);\n\nif (! (stringaCaratteriPermessi.contains (carattereCorrente\n. toString ())))\n(\npStringa = pStringa.replaceAll ( \"\\ \\\"\nCarattereCorrente.toString + (), \"\");\nlunghezzaStringa = pStringa.length ();\n\n)\nelse\ni + +;\n)\nif (lunghezzaStringa> numeroCaratteriMax)\n(\n\npStringa = pStringa.substring (0, numeroCaratteriMax);\n)\n\npStringa return;\n)\n\npublic static boolean controllaData (String pData)\n(\n/ / Still I have no idea how I will spend the time\nreturn true;\n)\n\npublic static boolean controllaDate (Date pDataInizio, Date pDataFine)\n(\n\nboolean back = false;\nif (pDataInizio! = null & & pDataFine = null)\n(\n\nif (pDataInizio.before (pDataFine))\nreturn = true;\n)\n\nreturn receipt;\n)\n\npublic static boolean checkBeanTurista (BeanTurista pTurista)\n(\nif (pTurista = null & & pTurista instanceof BeanTurista)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanPreferenzaDiRicerca (\nBeanPreferenzaDiRicerca pPreferenzaDiRicerca)\n(\nif (pPreferenzaDiRicerca = null\n& & PPreferenzaDiRicerca instanceof BeanPreferenzaDiRicerca)\nreturn true;\nreturn true;\n)\n\npublic static boolean checkBeanPreferenzeGeneriche (\nBeanPreferenzeGeneriche pPreferenzeGeneriche)\n(\nif (pPreferenzeGeneriche = null\n& & PPreferenzeGeneriche instanceof BeanPreferenzeGeneriche)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanBeneCulturale (\nBeanBeneCulturale pBeneCulturale)\n(\nif (pBeneCulturale = null\n& & PBeneCulturale instanceof BeanBeneCulturale)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanPuntoDiRistoto (\nBeanPuntoDiRistoro pPuntoDiRistoro)\n(\nif (pPuntoDiRistoro = null\n& & PPuntoDiRistoro instanceof BeanPuntoDiRistoro)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanOperatorePuntoDiRistoro (\nBeanOperatorePuntoDiRistoro pOperaotorePuntoDiRistoro)\n(\nif (pOperaotorePuntoDiRistoro = null\n& & POperaotorePuntoDiRistoro instanceof BeanOperatorePuntoDiRistoro)\nreturn true;\nreturn false;\n)\n\n/ **\n* Please formal control and consistency on the data of the banner\n* Content in the bean passed by parameter.\n*\n* @ Author Fabio Palladino\n* @ Param pBanner bean contains the data of the banner.\n* @ Return True if the data of the banner is correct false otherwise.\n* /\npublic static boolean checkBeanBanner (BeanBanner pBanner)\n(\ntoReturn boolean = false;\n\nif (pBanner = null & & pBanner instanceof BeanBanner)\n(\ntoReturn = (pBanner.getId ()> 0 & & pBanner.getPercorsoFile ()! = \"\" & & pBanner\n. getIdPuntoDiRistoro ()> 0);\n)\n\ntoReturn return;\n)\n\n/ **\n* Method which controls the image contained in the object ImageIcon past\n* Per parameter.\n*\n* @ Author Fabio Palladino\n* @ Param image ImageIcon object containing the image to be checked\n* @ Return true if the image contained in the object is an instance ImageIcon\n* Class BufferedImage.\n* /\npublic static boolean checkImmagine (ImageIcon image)\n(\n\nif (image! = null)\n(\nreturn (immagine.getImage () instanceof BufferedImage);\n)\nreturn false;\n)\n\n/ **\n* Function that checks the data in a news;\n*\n* @ Author Fabio Palladino\n* @ Param bean Pnews containing details of a news.\n* @ Return\n* /\npublic static boolean checkBeanNews (BeanNews Pnews)\n(\ntoReturn boolean = false;\n\n/ * Check the validity of the general method parameter * /\nif (Pnews = null)\n(\n\nPNews.getDataPubblicazione Date dataPubb = () / / Date of\n/ / Publishing\nDate dataScad = pNews.getDataScadenza () / / Due Date\nPNews.getNews String news = (), / / Text of News\nint priority = pNews.getPriorita ();\n\n/ * Checking the invalidity of the fields * /\nif (dataPubb! dataScad = null & &! = null & & news = null)\n(\n/ * Check the consistency of the dates * /\ntoReturn = dataPubb.before (dataScad);\n/ * Check that the text is not empty * /\ntoReturn = toReturn & & (news! = \"\");\n/ * Check that the ID is greater than 0 * /\ntoReturn = toReturn & & (pNews.getId ()> 0);\n/ * Check the priority value * /\ntoReturn = toReturn\n& & (Priority <= CostantiGlobali.MAX_PRIORITY_NEWS)\n& & (Priority> = CostantiGlobali.MIN_PRIORITY_NEWS);\n)\n)\ntoReturn return;\n)\n\npublic static boolean checkBeanTag (BeanTag ptagi)\n(\nif (ptagi! = null & & instanceof ptagi BeanTag)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanConvenzione (BeanConvenzione pConvenzione)\n(\nif (pConvenzione = null & & pConvenzione instanceof BeanConvenzione)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanMenu (BeanMenu pMenu)\n(\nif (pMenu = null & & instanceof pMenu BeanMenu)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanPiatto (BeanPiatto pPiatto)\n(\nif (pPiatto = null & & pPiatto instanceof BeanPiatto)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanVisitaBC (BeanVisitaBC pVisitaBC)\n(\nif (pVisitaBC = null & & pVisitaBC instanceof BeanVisitaBC)\nreturn true;\nreturn false;\n)\n\npublic static boolean checkBeanVisitaPR (BeanVisitaPR pVisitaPR)\n(\nif (pVisitaPR = null & & pVisitaPR instanceof BeanVisitaPR)\nreturn true;\nreturn false;\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694271"},"name":"BeanPuntoDiRistoro.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69426f"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694272"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694273"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c6"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942ca"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e5"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\nimport java.util.Date;\n\nimport unisa.gps.etour.util.Punto3D;\n/ **\n  * Bean for the storage of data refreshment\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\npublic class BeanPuntoDiRistoro implements Serializable\n(\nprivate static final long serialVersionUID = 8417686685147484931L;\nprivate int id;\nprivate int numeroVoti;\nprivate double mediaVoti;\nprivate String name;\nprivate String description;\nprivate String phone;\nprivate String location;\nprivate String city;\nprivate String street;\nprivate String cap;\nprivate String province;\nprivate String PartitaIva;\nPrivate Punto3D position;\nprivate Date orarioApertura;\nprivate Date orarioChiusura;\nprivate String giornoChiusura;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param pNumeroVoti\n* @ Param pMediaVoti\n* @ Param Pnom\n* @ Param pDescrizione\n* @ Param pTelefono\n* @ Param pLocalita\n* @ Param pCitta\n* @ Param pVia\n* @ Param pcap\n* @ Param pProvincia\n* @ Param pPartitaIva\n* @ Param pPosizione\n* @ Param pOrarioApertura\n* @ Param pOrarioChiusura\n* @ Param pGiornoChiusura\n* /\npublic BeanPuntoDiRistoro (int pid, int pNumeroVoti, double pMediaVoti,\nPhnom String, String pDescrizione, String pTelefono,\nPLocalita String, String pCitta, pVia String, String pcap,\nPProvincia String, String pPartitaIva, Punto3D pPosizione,\nDate pOrarioApertura, Date pOrarioChiusura, String pGiornoChiusura)\n(\nsetId (PID);\nsetNumeroVoti (pNumeroVoti);\nsetMediaVoti (pMediaVoti);\nsetNome (Phnom);\nsetDescrizione (pDescrizione);\nsetTelefono (pTelefono);\nsetlocale (pLocalita);\nsetCitta (pCitta);\nsetvar (pVia);\nsetCap (PCAP);\nsetProvincia (pProvincia);\nsetPartitaIva (pPartitaIva);\nsetPosizione (pPosizione);\nsetOrarioApertura (pOrarioApertura);\nsetOrarioChiusura (pOrarioChiusura);\nsetGiornoChiusura (pGiornoChiusura);\n)\n\n/ **\n* Empty Constructor\n*\n* /\npublic BeanPuntoDiRistoro ()\n(\n\n)\n\n/ **\n* Returns the value of cap\n*\n* @ Return value cap.\n* /\npublic String getCap ()\n(\nreturn cap;\n)\n\n/ **\n* Sets the new value of cap\n*\nNew pcap * @ param value cap.\n* /\npublic void setCap (String PCAP)\n(\nch = pcap;\n)\n\n/ **\n* Returns the value of city\n*\n* @ Return Value of city.\n* /\npublic String getCitta ()\n(\nreturn city;\n)\n\n/ **\n* Sets the new value of city\n*\n* @ Param value New pCitta city.\n* /\npublic void setCitta (String pCitta)\n(\nCity = pCitta;\n)\n\n/ **\n* Returns the value of description\n*\n* @ Return value of description.\n* /\npublic String getDescrizione ()\n(\nreturn description;\n)\n\n/ **\n* Sets the new value of description\n*\n* @ Param pDescrizione New value of description.\n* /\npublic void setDescrizione (String pDescrizione)\n(\ndescription = pDescrizione;\n)\n\n/ **\n* Returns the value of giornoChiusura\n*\n* @ Return value giornoChiusura.\n* /\npublic String getGiornoChiusura ()\n(\ngiornoChiusura return;\n)\n\n/ **\n* Sets the new value of giornoChiusura\n*\n* @ Param value pGiornoChiusura New giornoChiusura.\n* /\npublic void setGiornoChiusura (String pGiornoChiusura)\n(\ngiornoChiusura = pGiornoChiusura;\n)\n\n/ **\n* Returns the value of location\n*\n* @ Return locale values.\n* /\npublic String getLocal ()\n(\nreturn location;\n)\n\n/ **\n* Sets the new value of location\n*\n* @ Param pLocalita New locale values.\n* /\npublic void setLocale (String pLocalita)\n(\nlocation = pLocalita;\n)\n\n/ **\n* Returns the value of mediaVoti\n*\n* @ Return value mediaVoti.\n* /\npublic double getMediaVoti ()\n(\nmediaVoti return;\n)\n\n/ **\n* Sets the new value of mediaVoti\n*\n* @ Param value pMediaVoti New mediaVoti.\n* /\npublic void setMediaVoti (double pMediaVoti)\n(\nmediaVoti = pMediaVoti;\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getName ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new name value\n*\n* @ Param name New value Pnom.\n* /\npublic void setNome (String Pnom)\n(\nname = Pnom;\n)\n\n/ **\n* Returns the value of numeroVoti\n*\n* @ Return value numeroVoti.\n* /\npublic int getNumeroVoti ()\n(\nnumeroVoti return;\n)\n\n/ **\n* Sets the new value of numeroVoti\n*\n* @ Param value pNumeroVoti New numeroVoti.\n* /\npublic void setNumeroVoti (int pNumeroVoti)\n(\nnumeroVoti = pNumeroVoti;\n)\n\n/ **\n* Returns the value of orarioApertura\n*\n* @ Return value orarioApertura.\n* /\npublic Date getOrarioApertura ()\n(\norarioApertura return;\n)\n\n/ **\n* Sets the new value of orarioApertura\n*\n* @ Param value pOrarioApertura New orarioApertura.\n* /\npublic void setOrarioApertura (Date pOrarioApertura)\n(\norarioApertura = pOrarioApertura;\n)\n\n/ **\n* Returns the value of orarioChiusura\n*\n* @ Return value orarioChiusura.\n* /\npublic Date getOrarioChiusura ()\n(\norarioChiusura return;\n)\n\n/ **\n* Sets the new value of orarioChiusura\n*\n* @ Param value pOrarioChiusura New orarioChiusura.\n* /\npublic void setOrarioChiusura (Date pOrarioChiusura)\n(\norarioChiusura = pOrarioChiusura;\n)\n\n/ **\n* Returns the value of PartitaIva\n*\n* @ Return value of a political party.\n* /\npublic String getPartitaIva ()\n(\nPartitaIva return;\n)\n\n/ **\n* Sets the new value of PartitaIva\n*\n* @ Param pPartitaIva New value of political parties.\n* /\npublic void setPartitaIva (String pPartitaIva)\n(\nPartitaIva = pPartitaIva;\n)\n\n/ **\n* Returns the value of position\n*\n* @ Return value of position.\n* /\npublic Punto3D getPosizione ()\n(\nreturn position;\n)\n\n/ **\n* Sets the new position value\n*\n* @ Param pPosizione New position value.\n* /\npublic void setPosizione (Punto3D pPosizione)\n(\nposition = pPosizione;\n)\n\n/ **\n* Returns the value of the province\n*\n* @ Return value of the province.\n* /\npublic String getProvincia ()\n(\nreturn province;\n)\n\n/ **\n* Sets the new value of the province\n*\n* @ Param pProvincia New value for the province.\n* /\npublic void setProvincia (String pProvincia)\n(\nprovince = pProvincia;\n)\n\n/ **\n* Returns the value of telephone\n*\n* @ Return Value of the phone.\n* /\npublic String getTelefono ()\n(\nreturn phone;\n)\n\n/ **\n* Sets the new value of telephone\n*\n* @ Param value New pTelefono phone.\n* /\npublic void setTelefono (String pTelefono)\n(\nphone = pTelefono;\n)\n\n/ **\n* Returns the value of street\n*\n* @ Return value on.\n* /\npublic String getVar ()\n(\nreturn path;\n)\n\n/ **\n* Sets the new value via\n*\n* @ Param value New pVia on.\n* /\npublic void setvar (String pVia)\n(\nvia = pVia;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694274"},"name":"IGestionePuntiDiRistoroComune.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694273"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b3"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c6"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942ca"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d4"}]],"contents":"ï»¿package unisa.gps.etour.control.GestionePuntiDiRistoro;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\nimport java.util.ArrayList;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n/ **\n  * Interface for common operations on the refreshment\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface extends Remote IGestionePuntiDiRistoroComune\n(\n\n/ **\n* Method to return a particular Refreshment\n*\n* @ Param pPuntoDiRistoroID to identify the Refreshment from\n* Return\n* @ Return Bean contains the data of Refreshment concerned\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pPuntoDiRistoroID)\nthrows RemoteException;\n\n/ **\n* Method which returns the tags to some refreshment\n*\n* @ Param pPuntoDiRistoroID point identification Refreshment\n* @ Return structure containing all BeanTag associated with the point\n* Refreshments passed as parameter\n* @ Throws RemoteException Exception Remote\n* /\n<BeanTag> ottieniTagPuntoDiRistoro public ArrayList (int pPuntoDiRistoroID)\nthrows RemoteException;\n\n/ **\n* Method which returns the last 10 comments made for a\n* Refreshment\n*\n* @ Param pPuntoDiRistoroID ID for the point of rest in\n* Question\n* @ Return Array of strings containing 10 items\n* @ Throws RemoteException Exception Remote\n* /\npublic String [] ottieniUltimiCommenti (int pPuntoDiRistoroID)\nthrows RemoteException;\n\n/ **\n* Returns for the Refreshment specified, an array where each\n* Location contains the number of ratings corresponding to the value\n* Index of the array more 'one. The calculation and 'made in the period\n* 30 days and today.\n*\n* @ Param pPuntoDiRistoroID unique identifier of Refreshment\n* @ Return ArrayList containing the counters as explained above\n* @ Throws RemoteException Exception Remote\n* /\npublic ArrayList <Integer> ottieniStatistichePuntoDiRistoro (\npPuntoDiRistoroID int) throws RemoteException;\n\n/ **\n* Method which allows you to change the comment issued for a\n* Refreshment\n*\n* @ Param pPuntoDiRistoroId unique identifier of Refreshment\n* @ Param nuovaVisita Bean containing new comment\n* @ Return Boolean value-true if the operation went successfully,\n* False otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean modificaFeedbackPuntoDiRistoro (int pPuntoDiRistoroId,\nBeanVisitaPR nuovaVisita) throws RemoteException;\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694275"},"name":"GestionePuntiDiRistoroComune.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694273"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429d"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b3"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c6"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942ca"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d4"}]],"contents":"ï»¿package unisa.gps.etour.control.GestionePuntiDiRistoro;\n\nimport java.rmi.RemoteException;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n/ *\n  * For import junit tests\n  * Unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBPuntoDiRistoro;\n  * Import unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBVisitaPR;\n  * /\nimport unisa.gps.etour.repository.DBPuntoDiRistoro;\nimport unisa.gps.etour.repository.DBVisitaPR;\nimport unisa.gps.etour.repository.DBTag;\nimport unisa.gps.etour.repository.IDBPuntoDiRistoro;\nimport unisa.gps.etour.repository.IDBTag;\nimport unisa.gps.etour.repository.IDBTurista;\nimport unisa.gps.etour.repository.IDBVisitaPR;\nimport unisa.gps.etour.util.CostantiGlobali;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ **\n  * Class that implements the common tasks for the operator of dining and\n  * For the Operator Agency\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\nGestionePuntiDiRistoroComune UnicastRemoteObject public class extends implements\nIGestionePuntiDiRistoroComune\n(\n\n/ / Instance for database connections\nprivate static final long serialVersionUID = 1L;\nprotected IDBPuntoDiRistoro puntoRistoro;\nprotected IDBTag tags;\nIDBVisitaPR protected feeds;\nprotected IDBTurista dbTurista;\n\npublic GestionePuntiDiRistoroComune () throws RemoteException\n(\nsuper ();\n/ / Connect to the Database\nTRY\n(\npuntoRistoro = new DBPuntoDiRistoro ();\ntag = new DBTag ();\nfeed = new DBVisitaPR ();\n)\n/ / Note: no longer 'cause SQLException thrown\n/ / Changes to the layer DB; changed Exception\ncatch (Exception e)\n(\nSystem.out.println ( \"Error:\" + e.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ *\n* Method which allows to obtain a BeanPuntoDiRistoro through\n* Connect to database\n* /\npublic BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pPuntoDiRistoroID)\nthrows RemoteException\n(\n/ / Check identifier passed\nif (pPuntoDiRistoroID <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Return Instance\nBeanPuntoDiRistoro toReturn = null;\nTRY\n(\n/ / Revenue data through the instance of the database connection\ntoReturn = puntoRistoro.ottieniPuntoDiRistoro (pPuntoDiRistoroID);\n)\n/ / Exception in database operations\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error:\" + e.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error:\" + ee.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the variable return, so they do not pass bad data\n/ / To the caller\n/ / And triggers an exception if the format of the bean\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n/ / Return the bean that contains information about Refreshment\n/ / Required\ntoReturn return;\n)\n\n/ / Method that returns an ArrayList containing the tag identification of a\n/ / Some Refreshment\n<BeanTag> ottieniTagPuntoDiRistoro public ArrayList (int pPuntoDiRistoroID)\nthrows RemoteException\n(\n/ / Check identifier passed\nif (pPuntoDiRistoroID <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Return Instance\nArrayList <BeanTag> toReturn = null;\nTRY\n(\n/ / Revenue data through the instance of the database connection\ntoReturn = tag.ottieniTagPuntoDiRistoro (pPuntoDiRistoroID);\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error:\" + e.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error:\" + ee.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the variable return, so they do not pass bad data\n/ / To the caller\n/ / And triggers an exception if the format of the bean\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n/ / Return the ArrayList containing beans tag of refreshment\n/ / Passed as parameter\ntoReturn return;\n)\n\n/ / Returns an array of 10 strings containing the last 10 comments\n/ / Issued by tourists for Refreshment passed as parameter\npublic String [] ottieniUltimiCommenti (int pPuntoDiRistoroID)\nthrows RemoteException\n(\n/ / Check the validity identifier passed\nif (pPuntoDiRistoroID <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / String that contains only the last 10 comments made\nString [] toReturn = new String [10];\n/ / ArrayList temporary then save the comments contained in the beans\n/ / Inside\n<BeanVisitaPR> ArrayList temp = null;\nTRY\n(\n/ / Attempt to retrieve information from the database via\n/ / The connection instance\ntemp = feed.ottieniListaVisitaPR (pPuntoDiRistoroID);\n)\n/ / Exception in database operations\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method ottieniUltimiCommenti\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniUltimiCommenti\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / The bean that I receive from the database are already sorted by date\n/ / Implicitly, so there is no need for sorting algorithms\nfor (int i = 0; i <10; i + +)\n(\n/ / Insert the text of the comments in cyclically\n/ / Array\ntoReturn [i] = (temp.get (temp.size () - (i + 1))). getCommento ();\n)\n/ / E 'unnecessary control the format of the array\n/ / Then return the array directly with comments\ntoReturn return;\n)\n\n/ / Method that returns an ArrayList containing the number of votes\n/ / Release from 1 to 5 for\n/ / The Refreshment passed as parameter. The method inserts in order\n/ / Counters in positions\n/ / From 0 to 1 vote, 1 vote for 2, etc. ..\npublic ArrayList <Integer> ottieniStatistichePuntoDiRistoro (\npPuntoDiRistoroID int) throws RemoteException\n(\n/ / Check the validity identifier passed\nif (pPuntoDiRistoroID <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / ArrayList that allows me to store the bean containing the feedback\nArrayList <BeanVisitaPR> bVisita = null;\n/ / ArrayList that allows me to store the counters\n/ / And then return to the calling method\nArrayList <Integer> listaRisultati <Integer> = new ArrayList (5);\n/ / Initialize the array of counters\nfor (int i = 0; i <5; i + +)\nlistaRisultati.add (Integer.valueOf (0));\n/ / Data useful to verify that the issued date back thirty Feedback\n/ / Days from current date\nDate ultimiTrentaGiorni = new Date (new Date (). GetTime ()\n- CostantiGlobali.TRENTA_GIORNI);\n\nSystem.out.println ( \"The date of 30 days ago:\" + ultimiTrentaGiorni);\n\nTRY\n(\n/ / All feedback Revenue issued for Refreshment\n/ / Passed as parameter\nbVisita = feed.ottieniListaVisitaPR (pPuntoDiRistoroID);\n/ / Iterate the collection of elements to control the bean\n/ / Visits\nfor (Iterator <BeanVisitaPR> iteratoreVisitaPR = bVisita.iterator (); iteratoreVisitaPR\n. hasNext ();)\n(\n/ / Recuperto the BeanVisitaPR\nBeanVisitaPR bVisitaTemp = iteratoreVisitaPR.next ();\n/ / ... Do not know what does ...\nSystem.out.println ( \"The date of this visit is:\nBVisitaTemp.getDataVisita + ());\nif (bVisitaTemp.getDataVisita (). after (ultimiTrentaGiorni))\nlistaRisultati.set (bVisitaTemp.getVoto () - 1, Integer\n. valueOf (listaRisultati.get (\nbVisitaTemp.getVoto () - 1). intValue () + 1));\n)\n)\n/ / Exception in database operations\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method ottieniStatistichePuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions due to other factors\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method ottieniStatistichePuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\nif (null == listaRisultati)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n/ / Return the list of results that should contain counters\n/ / Comments\n/ / Issued in the last 30 days\nlistaRisultati return;\n)\n\n/ / Method that allows you to change the comment issued for a\n/ / Refreshment\npublic boolean modificaFeedbackPuntoDiRistoro (int pPuntoDiRistoroId,\nBeanVisitaPR nuovaVisita) throws RemoteException\n(\n/ / Check the validity of past data\nif ((pPuntoDiRistoroId <0) | | (! (nuovaVisita instanceof BeanVisitaPR)))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Revenue from the database the bean and stores saved\n/ / In order to verify that the vote has not changed\n/ / Which had been previously released\nBeanVisitaPR temp = null;\nTRY\n(\ntemp = feed.ottieniVisitaPR (pPuntoDiRistoroId, nuovaVisita\n. getIdTurista ());\n)\n/ / Exception running the operation on Database\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method modificaFeedbackPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception caused by other factors\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method modificaFeedbackPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If the vote was amended returns an exception\nif (temp.getVoto ()! nuovaVisita.getVoto = ())\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n/ / If the vote has not been amended shall save the new\n/ / Comment in the database using the specific method of the bean\nelse\n(\nTRY\n(\nfeed.modificaVisitaPR (nuovaVisita);\nreturn true;\n)\n/ / Exception running the operation on Database\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method modificaFeedbackPuntoDiRistoro\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception caused by other factors\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method modificaFeedbackPuntoDiRistoro\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694276"},"name":"IDBPuntoDiRistoro.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694273"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c6"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.util.Punto3D;\n\n\n/ **\n  * Interface for management of eateries in the database\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBPuntoDiRistoro\n(\n/ **\n* Add a refreshment\n*\n* @ Param pPuntoDiRistoro Refreshment to add\n* @ Throws SQLException\n* /\npublic boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)\nthrows SQLException;\n\n/ **\n* Modify a refreshment\n*\n* @ Param pPuntoDiRistoro Refreshment to edit\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean modificaPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)\nthrows SQLException;\n\n/ **\n* Delete a refreshment\n*\n* @ Param ID pIdPuntoDiRistoro Refreshment to eliminate\n* @ Throws SQLException\n* @ Return True if and 'have been deleted false otherwise\n* /\npublic boolean cancellaPuntoDiRistoro (int pIdPuntoDiRistoro)\nthrows SQLException;\n\n/ **\n* Returns data from a point of comfort with the ID given as argument\n*\n* @ Param pId point identification Refreshments\n* @ Throws SQLException\n* @ Return Refreshment\n* /\npublic BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pid)\nthrows SQLException;\n\n/ **\n* Advanced Search. Returns the list of eateries that have in\n* Name or description given string as input, sorted according to\n* Preferences of tourists, the tags and filtered according to the distance\n* Max. The list returned contains only the number of catering outlets input data.\n* To scroll the real list, which may contain multiple 'items, you\n* Use paramtro numPagina.\n*\n* @ Param Id pIdTurista tourists who carried out the research\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of refreshment\n* @ Param pTags list of tags used to filter the search. the\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored.\n* @ Param pNumeroPagina The page number you want to view. O\n* The 1 page (the first 10 results), 1 for 2 page (s\n* Results from 11 to 20) etc ... *\n* @ Param pPosizione position of the person who carried out the research\n* @ Param int Number of elements to return pNumeroElementiPerPagina\n* @ Param pDistanzaMassima Maximum distance from the user to refreshment\n* To seek\n* @ Throws SQLException\n* @ Return list containing ten points Refreshments\n* /\n<BeanPuntoDiRistoro> ricercaAvanzata public ArrayList (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, pNumeroPagina int, int pNumeroElementiPerPagina,\nPunto3D pPosizione, double pDistanzaMassima) throws SQLException;\n\n/ **\n* Method to get the number of elements to search.\n*\n* @ See ricercaAvanzata ()\n* @ Param Id pIdTurista tourists who carried out the research\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of refreshment\n* @ Param pTags list of tags used to filter the search. the\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored. *\n* @ Param pPosizione position of the person who carried out the research\n* @ Param pDistanzaMassima Maximum distance from the user to refreshment\n* To seek\n* @ Throws SQLException\n* @ Return number of pages.\n* /\npublic int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,\nPKeyword String, ArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException;\n\n/ **\n* Research. Returns the list of eateries that have the name or\n* Description given string as input, filtered and tags\n* According to the maximum distance. The returned list contains the number of\n* Points Refreshments input data. To scroll the real list, which\n* May contain more 'items, you use the paramtro\n* NumPagina.\n*\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of refreshment\n* @ Param pTags list of tags used to filter the search. the\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored.\n* @ Param pNumeroPagina The page number you want to view. O\n* The 1 page (the first 10 results), 1 for 2 page (s\n* Results from 11 to 20) etc ... *\n* @ Param pPosizione position of the person who carried out the research\n* @ Param pDistanzaMassima Maximum distance from the user to refreshment\n* @ Param int Number of elements to return pNumeroElementiPerPagina\n* @ Throws SQLException\n* @ Return list containing ten points Refreshments\n* /\npublic ArrayList <BeanPuntoDiRistoro> search (String pKeyword,\nArrayList <BeanTag> pTags, pNumeroPagina int, int pNumeroElementiPerPagina, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException;\n\n/ **\n* Method to get you the elements for an advanced search.\n*\n* @ See search ()\n* @ Param username pUsernameTurista tourists who carried out the research\nPKeyword * @ param string that contains the keyword to search the\n* Name or description of refreshment\n* @ Param pTags list of tags used to filter the search. The\n* Maximum number of tags to be included should not exceed five\n* Units'. If you exceed this number the other tags\n* Excess will be ignored.\n* @ Param pPosizione position of the person who carried out the research\n* @ Param pDistanzaMassima Maximum distance from the user to refreshment\n* To seek\n* @ Throws SQLException\n* @ Return number of pages.\n* /\npublic int ottieniNumeroElementiRicerca (String pKeyword,\nArrayList <BeanTag> pTags, Punto3D pPosizione,\ndouble pDistanzaMassima) throws SQLException;\n\n/ **\n* Returns a list of all the refreshment\n*\n* @ Throws SQLException\n* @ Return list of all the refreshment\n* /\n<BeanPuntoDiRistoro> ottieniListaPR public ArrayList () throws SQLException;\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694279"},"name":"Turisti.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694278"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69427d"}]],"contents":"\t\n/ *\n  * Tourists.java\n  *\n  * 1.0\n  *\n  * 26/05/2007\n  *\n  * © 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno\n  * /\npackage unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt.BorderLayout;\nimport javax.swing.JPanel;\nimport javax.swing.JInternalFrame;\nimport java.awt.Dimension;\n\nimport javax.swing.JDesktopPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextPane;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JButton;\nimport javax.swing.ListSelectionModel;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport javax.swing.BorderFactory;\nimport javax.swing.JLabel;\nimport javax.swing.SwingConstants;\nimport java.awt.Color;\nimport java.awt.Insets;\nimport javax.swing.JTextField;\nimport javax.swing.JOptionPane;\nimport javax.swing.border.TitledBorder;\nimport javax.swing.event.InternalFrameAdapter;\nimport javax.swing.event.InternalFrameEvent;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport java.awt.font;\nimport javax.swing.ImageIcon;\nimport unisa.gps.etour.util.Data;\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.gui.DeskManager;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.AttivazioneTuristaRenderer;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.ScrollableTable;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.TuristiTableModel;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport java.util.Date;\n\n/ **\n  * This class implements the interface for the management of tourists\n  * Agency by the Operator.\n  *\n  * @ Version 1.0\n  * @ See javax.swing.JInternalFrame\n  * @ Author Mario Gallo\n  *\n  * /\npublic class JInternalFrame extends Tourists\n(\n\nprivate JPanel jContentPane = null;\nPrivate JToolBar toolbarTuristi = null;\nprivate JButton btnModificaDati = null;\nprivate JScrollPane scrollTableTuristi = null;\nprivate JTable tableTuristi = null;\nprivate JPanel searchPanel = null;\nprivate JTextField cognomeTurista = null;\nprivate JPanel panelHelp = null;\nprivate JTextPane textGuida = null;\nprivate JPanel rightPanel = null;\nprivate JButton btnAttiva;\nprivate JButton btnVisualizzaScheda;\nprivate JButton btnElimina;\nprivate TuristiTableModel TableModel;\nPrivate JToggleButton turistiDisattivati;\nPrivate JToggleButton turistiAttivati;\nprivate JButton btnAzzera;\nprivate JButton btnRicerca;\nprotected DeskManager desktopManager;\nprotected JDesktopPane JDesktopPane;\n<schedaturista> private ArrayList children;\n\n/ **\n* This is the default constructor.\n*\n* /\npublic Tourists ()\n(\nsuper ( \"Tourists\");\nsetPreferredSize (new Dimension (700, 480));\nframeIcon = new ImageIcon (getClass (). getResource (\n\"/ unisa / gps / eTour / gui / operatoreagenzia / images / Turisti.png\"));\nsetDefaultCloseOperation (JInternalFrame.DO_NOTHING_ON_CLOSE);\nclosable = true;\nresizable = true;\niconable = true;\nmaximizable = true;\nsetContentPane (getJContentPane ());\n<schedaturista> children = new ArrayList ();\naddInternalFrameListener (new InternalFrameAdapter ()\n(\npublic void internalFrameOpened (InternalFrameEvent pEvent)\n(\nJDesktopPane pEvent.getInternalFrame = (). getDesktopPane ();\ndesktopManager = (DeskManager) jDesktopPane.getDesktopManager ();\n)\n\npublic void internalFrameClosing (InternalFrameEvent pEvent)\n(\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to close the management of tourists?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"NB will be closed all the windows opened by this administration.\"\nSwingConstants.CENTER);\nLegal\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Close\", \"Cancel\");\nint choice = JOptionPane.showInternalOptionDialog (jContentPane, root, \"Confirm closure Tourists\"\nJOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, options, options [1]);\nif (choice == JOptionPane.OK_OPTION)\n(\nfor (int i = 0; i <figli.size (); i + +)\n(\nfigli.get (i). dispose ();\n)\npEvent.getInternalFrame (). dispose ();\n)\n)\n));\n)\n\n/ **\n* This method initializes the internal frame's content pane.\n*\n* @ Return javax.swing.JPanel - the content pane.\n*\n* /\nprivate JPanel getJContentPane ()\n(\nif (null == jContentPane)\n(\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (getToolbarTuristi (), BorderLayout.NORTH);\njContentPane.add (getRightPanel (), BorderLayout.EAST);\njContentPane.add (getScrollTableTuristi (), BorderLayout.CENTER);\n)\njContentPane return;\n)\n\n/ **\n* This method initializes the toolbar on the management of\n* Tourists.\n*\n* @ Return javax.swing.JToolBar - the toolbar.\n*\n* /\nPrivate JToolBar getToolbarTuristi ()\n(\nif (null == toolbarTuristi)\n(\ntoolbarTuristi JToolBar = new ();\ntoolbarTuristi.setLayout (null);\ntoolbarTuristi.setPreferredSize (new Dimension (1, 50));\ntoolbarTuristi.setOrientation (JToolBar.HORIZONTAL);\ntoolbarTuristi.setFloatable (false);\ntoolbarTuristi.add (getBtnAttiva ());\ntoolbarTuristi.add (getBtnModificaDati ());\ntoolbarTuristi.add (getBtnVisualizzaScheda ());\ntoolbarTuristi.add (getBtnElimina ());\n\n)\ntoolbarTuristi return;\n)\n\n/ **\n* This method initializes the button to activate\n* A tourist.\n*\n* @ Return javax.swing.JButton - the button.\n*\n* /\nprivate JButton getBtnAttiva ()\n(\nif (null == btnAttiva)\n(\nbtnAttiva = new JButton ();\nbtnAttiva.setText ( \"Enable <html> <br> region </ html>\");\nbtnAttiva.setBounds (5, 5, 140, 40);\nbtnAttiva.setEnabled (false);\nbtnAttiva\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/AttivaTurista32.png \")));\n\nbtnAttiva.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent arg0)\n(\nint selected = tableTuristi.getSelectedRow ();\nString [] fields = ( \"Name\", \"Name\", \"Date of Birth\",\n\"Place of Birth\", \"E-Mail\", \"Phone\",\n\"Address\", \"CPC\", \"Province\", \"City\");\nint [] modelReference = (1, 2, 5, 6, 3, 4, 7, 9, 10, 8);\nDatiTurista JPanel = new JPanel (new GridBagLayout ());\nRootDialog JPanel = new JPanel (new GridBagLayout ());\ndatiTurista.setBorder (BorderFactory.createTitledBorder (\nBorderFactory.createLineBorder (new Color (51, 102,\n255), 2), \"Tourist Information\"\nTitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\nGridBagConstraints g = new GridBagConstraints ();\ng.insets = new Insets (5, 5, 5, 5);\ng.anchor = GridBagConstraints.WEST;\ng.gridx = 0;\ng.gridy = 0;\nfor (int i = 0; i <campi.length i + +)\n(\ndatiTurista.add (new JLabel (fields [i]), g);\ng.gridx + +;\nif (i == 2) / / Date of Birth\n(\nDate dob = (Date) tableModel.getValueAt (\nselected, 5);\ndatiTurista.add (new JLabel (\nData.toCompact (dob)), g);\n\n)\nelse\n(\ndatiTurista.add (new JLabel (\ntableModel.getValueAt (\nselected, modelReference [i]). toString ()), g);\n)\ng.gridx--;\ng.gridy + +;\n)\ng.gridx = 0;\ng.gridy = 0;\nrootDialog.add (datiTurista, g);\ng.gridy + +;\nJLabel txtAttiva = new JLabel ();\nrootDialog.add (txtAttiva, g);\nString [] options = new String [2];\nImageIcon iconDialog;\noptions [1] = \"Cancel\";\nString title;\nboolean enabled = (Boolean) tableModel.getValueAt (\nselected, 0);\nif (enabled) / / The process of decommissioning\n(\ntitle = \"Turn off the tourist\"\n+ TableModel.getValueAt (selected, 1) + \"\"\n+ TableModel.getValueAt (selected, 2) + \"?\"\noptions [0] = \"Disable\";\ntxtAttiva\n. setText ( \"Turn off the tourist selected?\");\niconDialog = new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista48.png\"));\n)\nelse / / The process of activation\n(\ntitle = \"Turn on the tourist\"\n+ TableModel.getValueAt (selected, 1) + \"\"\n+ TableModel.getValueAt (selected, 2) + \"?\"\noptions [0] = \"Enable\";\ntxtAttiva.setText ( \"Activate the tourists selected?\");\niconDialog = new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/AttivaTurista48.png\"));\n)\ntxtAttiva.setForeground (Color.red);\nJOptionPane.showInternalOptionDialog int choice = (\njContentPane, rootDialog, title,\nJOptionPane.OK_CANCEL_OPTION,\nJOptionPane.QUESTION_MESSAGE, iconDialog, options,\noptions [1]);\nif (choice == JOptionPane.OK_OPTION)\n(\ntableModel.setValueAt ((activated)? false: true,\nselected, 0);\ntableModel.fireTableDataChanged ();\n)\n)\n));\n)\nbtnAttiva return;\n)\n\n/ **\n* This method initializes the button for changing\n* Data of a tourist.\n*\n* @ Return javax.swing.JButton - the button.\n* /\nprivate JButton getBtnModificaDati ()\n(\nif (null == btnModificaDati)\n(\nbtnModificaDati = new JButton ();\nbtnModificaDati\n. setText ( \"Edit Data <html> <br> region </ html>\");\nbtnModificaDati.setBounds (155, 5, 140, 40);\nbtnModificaDati.setEnabled (false);\nbtnModificaDati\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/ModificaTurista32.png \")));\nbtnModificaDati.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent arg0)\n(\n/ / TEST\nNew Date = new Date ();\nnuova.setMonth (12);\nnuova.setDate (30);\nnuova.setYear (82);\nNuova2 Date = new Date ();\nnuova2.setMonth (4);\nnuova2.setDate (30);\nnuova2.setYear (107);\nBeanTurista test = new BeanTurista (0, \"mlmlml\", \"Ottabio\"\n\"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\",\n\"84932nd\", \"V.le della Mimosa 33\", \"NA\"\n\"ottavio_ottawa@wawa.com\", \"micacae\" new nuova2, false);\n/ / TEST\nOpenOffice.org Messenger MSN Gaim (TEST, true);\n)\n));\n)\nbtnModificaDati return;\n)\n\n/ **\n* This method initializes the button to display the\n* Board a tourist.\n*\n* @ Return javax.swing.JButton - the button.\n* /\nprivate JButton getBtnVisualizzaScheda ()\n(\nif (null == btnVisualizzaScheda)\n(\nbtnVisualizzaScheda = new JButton ();\nbtnVisualizzaScheda\n. setText ( \"Show <html> <br> tourist profile </ html>\");\nbtnVisualizzaScheda.setBounds (305, 5, 140, 40);\nbtnVisualizzaScheda\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa / gps / eTour / gui / operatoreagenzia / images / schedaturista.png \")));\nbtnVisualizzaScheda.setEnabled (false);\nbtnVisualizzaScheda.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\n/ / TEST\nNew Date = new Date ();\nnuova.setMonth (12);\nnuova.setDate (30);\nnuova.setYear (82);\nNuova2 Date = new Date ();\nnuova2.setMonth (4);\nnuova2.setDate (30);\nnuova2.setYear (107);\nBeanTurista test = new BeanTurista (0, \"mlmlml\", \"Ottabio\"\n\"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\",\n\"84932nd\", \"V.le della Mimosa 33\", \"NA\"\n\"ottavio_ottawa@wawa.com\", \"micacae\" new nuova2, false);\n/ / TEST\nOpenOffice.org Messenger MSN Gaim (TEST, false);\n)\n\n));\n)\nbtnVisualizzaScheda return;\n)\n\n/ **\n*\n* This method initializes the delete button for a tourist.\n*\n* @ Return javax.swing.JButton - the button.\n* /\nprivate JButton getBtnElimina ()\n(\nif (null == btnElimina)\n(\nbtnElimina = new JButton ();\nbtnElimina.setText ( \"Delete <html> <br> region </ html>\");\nbtnElimina.setBounds (455, 5, 140, 40);\nbtnElimina.setEnabled (false);\nbtnElimina\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/EliminaTurista32.png \")));\nbtnElimina.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nint selectedRow = tableTuristi.getSelectedRow ();\nif (selectedRow! = -1)\n(\nString name = (String) tableModel.getValueAt (\nselectedRow, 1)\n+ \"\"\n+ (String) TableModel\n. getValueAt (selectedRow, 2);\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to delete the account of the tourist\"\n+ Name + \"?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\nThe data account and all personal settings \"\n+ \"Can not be filled again.\"\nSwingConstants.CENTER);\nLegal\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Delete\", \"Cancel\");\nint choice = JOptionPane\n. showInternalOptionDialog (\njContentPane,\nroot\n\"Confirm Delete\",\nJOptionPane.YES_NO_OPTION,\nJOptionPane.QUESTION_MESSAGE,\nnew ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/EliminaTurista48.png\")),\noptions, options [1]);\nif (choice == JOptionPane.YES_OPTION)\n(\ntableModel.removeTurista (selectedRow);\ntableModel.fireTableDataChanged ();\nJLabel confirm = new JLabel ( \"Account Tourists\" + name\n+ \"Was deleted.\");\nconfirm.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJOptionPane\n. showInternalMessageDialog (\njContentPane,\nconfirm,\nAccounts Turista out! \"\nJOptionPane.OK_OPTION,\nnew ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/ok32.png \")));\n)\n)\n\n)\n\n));\n)\nbtnElimina return;\n)\n\n/ **\n* This method initializes the scroll with the table bread tourists.\n*\n* @ Return javax.swing.JScrollPane - the scroll pane.\n* /\nprivate JScrollPane getScrollTableTuristi ()\n(\nif (null == scrollTableTuristi)\n(\nTuristiTableModel = new TableModel ();\n/ / TEST\nNew Date = new Date ();\nnuova.setMonth (12);\nnuova.setDate (30);\nnuova.setYear (82);\nNuova2 Date = new Date ();\nnuova2.setMonth (4);\nnuova2.setDate (30);\nnuova2.setYear (107);\nBeanTurista new = new BeanTurista (0, \"mlmlml\", \"Ottabio\"\n\"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\",\n\"84932nd\", \"V.le della Mimosa 33\", \"NA\"\n\"ottavio_ottawa@wawa.com\", \"micacae\" new nuova2, false);\nBeanTurista nuovo2 = new BeanTurista (1, \"mlmlml\", \"Ottabiolino\"\n\"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\",\n\"84932nd\", \"V.le della Mimosa 33\", \"NA\"\n\"ottavio_ottawa@wawa.com\", \"micacae\" new nuova2, true);\nBeanTurista nuovo3 = new BeanTurista (2, \"mlmlml\", \"Ottavio\",\n\"Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\", \"84932nd\"\n\"V.le Mimose 33\", \"NA\", \"ottavio_ottawa@wawa.com\"\n\"micacae\" new nuova2, false);\ntableModel.insertTurista (new);\ntableModel.insertTurista (nuovo2);\ntableModel.insertTurista (nuovo3);\nfor (int i = 0; i <12; i + +)\n(\ntableModel.insertTurista (new);\n)\n/ / END TEST\ntableTuristi = new ScrollableTable (TableModel);\ntableTuristi.setAutoCreateColumnsFromModel (true);\ntableTuristi.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);\ntableTuristi.setSelectionForeground (Color.RED);\ntableTuristi.setSelectionBackground (Color.white);\ntableTuristi.setColumnSelectionAllowed (false);\ntableTuristi.setShowVerticalLines (false);\ntableTuristi.setRowHeight (32);\n/ / Status\ntableTuristi.getColumnModel (). GetColumn (0). setPreferredWidth (40);\ntableTuristi.getColumnModel (). GetColumn (0). setCellRenderer (\nNew AttivazioneTuristaRenderer ());\n/ / Name\ntableTuristi.getColumnModel (). GetColumn (1). setPreferredWidth (100);\n/ / Surname\ntableTuristi.getColumnModel (). GetColumn (2). setPreferredWidth (100);\n/ / Email\ntableTuristi.getColumnModel (). GetColumn (3). setPreferredWidth (140);\n/ / Phone\ntableTuristi.getColumnModel (). GetColumn (4). setPreferredWidth (80);\n/ / Date of Birth\ntableTuristi.getColumnModel (). GetColumn (5). setPreferredWidth (100);\n/ / City of Birth\ntableTuristi.getColumnModel (). GetColumn (6). setPreferredWidth (100);\n/ / Address\ntableTuristi.getColumnModel (). GetColumn (7). setPreferredWidth (100);\n/ / Residence\ntableTuristi.getColumnModel (). GetColumn (8). setPreferredWidth (80);\n/ / CAP\ntableTuristi.getColumnModel (). GetColumn (9). setPreferredWidth (60);\n/ / State\ntableTuristi.getColumnModel (). GetColumn (10). setPreferredWidth (30);\n/ / Data entry\ntableTuristi.getColumnModel (). GetColumn (11). setPreferredWidth (90);\n\nListSelectionModel selectionModel = tableTuristi\n. getSelectionModel ();\nselectionModel.addListSelectionListener (new ListSelectionListener ()\n(\npublic void ValueChanged (ListSelectionEvent event)\n(\nint selectedRow = tableTuristi.getSelectedRow ();\nif (selectedRow! = -1)\n(\nbtnAttiva.setEnabled (true);\nbtnModificaDati.setEnabled (true);\nbtnVisualizzaScheda.setEnabled (true);\nbtnElimina.setEnabled (true);\nif ((Boolean) tableModel.getValueAt (selectedRow, 0))\n(\nbtnAttiva.setText ( \"Enable <html> <br> region </ html>\");\nbtnAttiva\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/AttivaTurista32.png \")));\n)\nelse\n(\nbtnAttiva\n. setText ( \"Disable <html> <br> region </ html>\");\nbtnAttiva\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista32.png \")));\n)\n)\nelse\n(\nbtnElimina.setEnabled (false);\nbtnModificaDati.setEnabled (false);\nbtnAttiva.setEnabled (false);\nbtnVisualizzaScheda.setEnabled (false);\n)\n\n)\n));\nscrollTableTuristi = new JScrollPane ();\nscrollTableTuristi.setViewportView (tableTuristi);\nscrollTableTuristi\n. setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\nscrollTableTuristi\n. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n)\nscrollTableTuristi return;\n)\n\n/ **\n* This method initializes the form to the search for tourists.\n*\n* @ Return javax.swing.JPanel\n*\n* /\nprivate JPanel getSearchPanel ()\n(\nif (null == searchPanel)\n(\nsearchPanel = new JPanel ();\nsearchPanel.setLayout (new GridBagLayout ());\nsearchPanel.setBorder (BorderFactory.createTitledBorder (\nBorderFactory.createLineBorder (new Color (51, 102, 255), 3),\nResearch Tourists \", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\nGridBagConstraints g = new GridBagConstraints ();\n/ / Create Panel, choose tourists\nTourists JPanel = new JPanel (new GridBagLayout ());\nturisti.setPreferredSize (new Dimension (200, 120));\nturisti.setBorder (BorderFactory.createLoweredBevelBorder ());\nturistiAttivati JToggleButton = new ( \"active tourists\");\nturistiAttivati.setPreferredSize (new Dimension (165, 30));\nturistiDisattivati JToggleButton = new ( \"Tourists Off\");\nturistiDisattivati.setPreferredSize (new Dimension (165, 30));\nturistiAttivati\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/schedaturista24.png \")));\nActionListener almenoUno = new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\nif (pEvent.getSource () == turistiAttivati)\n(\nif (! turistiAttivati.isSelected ()\n& &! TuristiDisattivati.isSelected ())\n(\nturistiDisattivati.setSelected (true);\n)\n)\nelse\n(\nif (! turistiAttivati.isSelected ()\n& &! TuristiDisattivati.isSelected ())\n(\nturistiAttivati.setSelected (true);\n)\n)\n\n)\n);\nturistiAttivati.addActionListener (almenoUno);\nturistiDisattivati.addActionListener (almenoUno);\nturistiAttivati.setSelected (true);\nturistiDisattivati.setSelected (true);\nturistiDisattivati\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista24.png \")));\ng.insets = new Insets (8, 8, 8, 8);\ng.gridx = 0;\ng.gridy = 0;\ng.weighty = 0.2;\ng.fill = GridBagConstraints.HORIZONTAL;\nturisti.add (turistiAttivati, g);\ng.gridy + +;\nturisti.add (turistiDisattivati, g);\n\n/ / Create search panel\ng.gridx = 0;\ng.gridy = 0;\ng.gridwidth = 2;\ng.anchor = GridBagConstraints.CENTER;\ng.fill = GridBagConstraints.NONE;\ng.insets = new Insets (5, 5, 5, 5);\nsearchPanel.add (new JLabel ( \"Name Turista\"), g);\ncognomeTurista = new JTextField (12);\ng.gridy + +;\nsearchPanel.add (cognomeTurista, g);\ng.gridy + +;\nsearchPanel.add (new JLabel ( \"View\"), g);\ng.gridy + +;\ng.weighty = 0.2;\ng.insets = new Insets (5, 5, 20, 5);\nsearchPanel.add (tourists, g);\ng.insets = new Insets (5,5,5,5);\ng.gridwidth = 1;\ng.gridy + +;\nsearchPanel.add (getBtnRicerca (), g);\ng.gridx = 1;\nsearchPanel.add (getBtnAzzera (), g);\n)\nsearchPanel return;\n)\n\n/ **\n* This method initializes the panel's online help.\n*\n* @ Return javax.swing.JPanel\n*\n* /\nprivate JPanel getPanelHelp ()\n(\nif (null == panelHelp)\n(\npanelHelp = new JPanel ();\npanelHelp.setLayout (new BorderLayout ());\npanelHelp.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3),\n\"Help\", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\npanelHelp.setPreferredSize (new Dimension (200, 100));\ntextGuida = new JTextPane ();\ntextGuida.setOpaque (false);\ntextGuida.setContentType ( \"text / html\");\ntextGuida.setEditable (false);\ntextGuida.setOpaque (false);\npanelHelp.add (textGuida, BorderLayout.CENTER);\n\n)\npanelHelp return;\n)\n\n/ **\n* This method initializes the side panel of the interface.\n*\n* @ Return javax.swing.JPanel\n*\n* /\nprivate JPanel getRightPanel ()\n(\nif (null == rightPanel)\n(\nrightPanel = new JPanel ();\nrightPanel.setLayout (new GridBagLayout ());\nGridBagConstraints g = new GridBagConstraints ();\ng.gridx = 0;\ng.gridy = 1;\ng.fill = GridBagConstraints.BOTH;\ng.weighty = 0.3;\nrightPanel.add (getPanelHelp (), g);\ng.weighty = 0.7;\ng.gridx = 0;\ng.gridy = 0;\nrightPanel.add (getSearchPanel (), g);\n)\nrightPanel return;\n)\n\n/ **\n* This method initializes the search button tourists.\n*\n* @ Return javax.swing.JButton\n*\n* /\nprivate JButton getBtnRicerca ()\n(\nif (null == btnRicerca)\n(\nbtnRicerca = new JButton ();\nbtnRicerca.setText ( \"Search\");\nbtnRicerca.setPreferredSize (new Dimension (98, 26));\nbtnRicerca\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/Ricerca16.png \")));\n)\nbtnRicerca return;\n)\n\n/ **\n* This method initializes the button to reset form\n* Search.\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnAzzera ()\n(\nif (null == btnAzzera)\n(\nbtnAzzera = new JButton ();\nbtnAzzera.setText ( \"Clear\");\nbtnAzzera.setHorizontalTextPosition (SwingConstants.LEADING);\nbtnAzzera.setPreferredSize (new Dimension (98, 26));\nbtnAzzera\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/Azzera16.png \")));\nbtnAzzera.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pAcEvent)\n(\ncognomeTurista.setText (\"\");\nturistiAttivati.setSelected (true);\nturistiDisattivati.setSelected (true);\n)\n));\n)\nbtnAzzera return;\n)\n\n/ **\n*\n* This method opens a tab for the bean tourists supplied input.\n*\n* @ Param pTurista BeanTurista - the bean tourists\n* @ Param boolean pModifica <ul> <li> true - if you change the data.\n<li> * False - if you receive the card. </ Ul>\n* @ Return void\n* /\nprivate void OpenOffice.org Messenger MSN Gaim (BeanTurista pTurista, boolean pModifica)\n(\nfor (int i = 0; i <figli.size (); i + +)\n(\nfiling current figli.get = (i);\nif (pTurista.getId () == corrente.getId ())\n(\ndesktopManager.activateFrame (current);\nreturn;\n)\n)\nnew = new filing filing (this, pTurista, pModifica);\njDesktopPane.add (new, Integer.MAX_VALUE);\nnuova.setVisible (true);\nfigli.add (new);\n)\n\n/ **\n*\n* Closes the selected tab.\n*\n* @ Param pScheda profiling - the tab to close.\n* @ Return void\n* /\nprotected void closeScheda (filing pScheda)\n(\nfigli.remove (pScheda);\npScheda.dispose ();\n)\n\n/ **\n*\n* Update the table model of the tourists with the bean supplied\n* Input.\n*\n* @ Param pTurista BeanTurista - the bean of the tourist.\n* @ Return void\n* /\nprotected void updateTableModel (BeanTurista pTurista)\n(\ntableModel.updateTurista (pTurista);\n)\n)"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69427a"},"name":"TuristiTableModel.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694278"}]],"contents":"ï»¿/ *\n  * TuristiTableModel.java\n  *\n  * 1.0\n  *\n  * 27/05/2007\n  *\n  * 2007 eTour Project - Copyright by SE @ SA Lab - DMI University of Salerno\n  * /\npackage unisa.gps.etour.gui.operatoreagenzia.tables;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Vector;\nimport javax.swing.table.AbstractTableModel;\n\nimport unisa.gps.etour.bean.BeanTurista;\n\n\n/ **\n  * <b> TuristiTableModel </ b>\n  * <p> Acts as a container of data from the tourists who have\n  * Be displayed in a JTable. </ P>\n  * @ See javax.swing.table.AbstractTableModel\n  * @ See javax.swing.JTable\n  * @ See unisa.gps.etour.bean.BeanTurista\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  * /\npublic class extends TuristiTableModel AbstractTableModel\n(\nprivate static final String [] headers = ( \"Status\", \"Name\", \"Name\", \"E-Mail\", \"Phone\",\n\"Date of Birth\", \"City of Birth\",\n\"Address\", \"City\", \"CPC\", \"test\", \"Save\");\nprivate static final Class [] (columnClasses = Boolean.class, String.class, String.class,\nString.class, String.class, Date.class, String.class, String.class, String.class, String.class, String.class,\nDate.class);\n<Object[]> private Vector data;\n\n/ **\n* Default Constructor. We only provide the template without loading\n* No data in it.\n*\n* /\npublic TuristiTableModel ()\n(\n<Object[]> data = new Vector ();\n)\n\n/ **\n* Create a model of the table and loads the data provided through an array of BeanBeneCulturale.\n*\n* @ Param pTuristi java.util.ArrayList <BeanTurista> - an ArrayList of BeanTurista.\n*\n* /\npublic TuristiTableModel (ArrayList <BeanTurista> pTuristi)\n(\nthis ();\nif (null == pTuristi)\n(\nreturn;\n)\nfor (int i = 0; i <pTuristi.size (); i + +)\n(\ninsertTurista (pTuristi.get (i));\n)\n)\n\n/ **\n* Returns the number of columns provided by the model.\n*\n* @ Return int - the number of columns.\n*\n* /\npublic int getColumnCount ()\n(\nheaders.length return;\n)\n\n/ **\n* Returns the number of rows currently in the model.\n*\n* @ Return int - the number of rows.\n*\n* /\npublic int GetRowCount ()\n(\ndata.size return ();\n)\n\n/ **\n* Returns the column name from the index provided.\n*\n* @ Return String - the name of the column.\n* @ Exception IllegalArgumentException - if the column index is not provided\n* In the model.\n*\n* /\npublic String getColumnName (int pColumn) throws IllegalArgumentException\n(\nif (pColumn> = getColumnCount () | | pColumn <0)\n(\nthrow new IllegalArgumentException (\n\"The column index is not provided in the model.\");\n)\nreturn headers [pColumn];\n)\n\n/ **\n* Returns the object in the model to the row and column provided.\n*\n* @ Param pRow - the line number.\n* @ Param pColumn - the column number.\n* @ Return Object - the object contained in the selected cell.\n* @ Exception IllegalArgumentException - if the index or the row or column not provided\n* Are present in the model.\n*\n* /\npublic Object getValueAt (pRow int, int pColumn)\nthrows IllegalArgumentException\n(\nif (pRow> = GetRowCount () | | pRow <0)\n(\nthrow new IllegalArgumentException (\n\"The row index is not provided in the model.\");\n)\nif (pColumn> = getColumnCount () | | pColumn <0)\n(\nthrow new IllegalArgumentException (\n\"The column index is not provided in the model.\");\n)\nreturn data.get (pRow) [pColumn];\n)\n\n/ **\n* Returns the class of objects in the column of which is provided in the index.\n*\n* @ Param pColumn - the column number.\n* @ Return Class - the class of objects of the selected column.\n* @ Exception IllegalArgumentException - if the index column does not pro\n* In the model.\n*\n* /\npublic class getColumnClass (int pColumn) throws IllegalArgumentException\n(\nif (pColumn> = getColumnCount () | | pColumn <0)\n(\nthrow new IllegalArgumentException (\n\"The column index is not provided in the model.\");\n)\nreturn columnClasses [pColumn];\n)\n\n/ **\n* Returns whether the selected cell editable.\n*\n* @ Return boolean - true if the cell editable\n* False otherwise\n* @ Param pRow - the line number.\n* @ Param pColumn - the column number.\n* @ Exception IllegalArgumentException - if the index or the row or column are not provided\n* In the model.\n*\n* /\npublic boolean isCellEditable (pRow int, int pColumn)\nthrows IllegalArgumentException\n(\nreturn false;\n)\n\n/ **\n* The method is inherited by the TableModel not setValueAt\n* Necessary because not provided for the possibility of amending a\n* Single cell.\n*\n* @ Deprecated\n* /\npublic void setValueAt (Object value, int row, int col)\n(\n\n)\n\n/ **\n* Enables or disables the tourist in the selected row.\n*\n* @ Param int pRow - the selected row.\n* @ Return int - the id of the tourist on / off.\n*\n* /\npublic int attivaTurista (int pRow) throws IllegalArgumentException\n(\ndata.get (pRow) [0] = (isAttivato (pRow))? false: true;\nfireTableDataChanged ();\nreturn getID (pRow);\n)\n\n/ **\n* Determines if a visitor to the selected row is enabled or disabled.\n*\n* @ Param int pRow - the selected row.\n* @ Return <ul> <li> <i> true </ i> - enabled </ li>\n* <li> <i> False </ i> - disabled </ li> </ ul>\n* /\npublic boolean isAttivato (int pRow) throws IllegalArgumentException\n(\nreturn (Boolean) getValueAt (pRow, 0);\n)\n\n/ **\n*\n* Enter data for a tourist in the model since its Bean.\n*\n* @ Param pTurista BeanTurisa - the bean that contains the data of the tourist.\n*\n* /\npublic void insertTurista (BeanTurista pTurista) throws IllegalArgumentException\n(\nif (null == pTurista)\n(\nthrow new IllegalArgumentException (\n\"The bean provided can not be null.\");\n)\nObject [] aRow = new Object [13];\naRow [0] = pTurista.isAttiva ();\naRow [1] = pTurista.getNome ();\naRow [2] = pTurista.getCognome ();\naRow [3] = pTurista.getEmail ();\naRow [4] = pTurista.getTelefono ();\naRow [5] = pTurista.getDataNascita ();\naRow [6] = pTurista.getCittaNascita ();\naRow [7] = pTurista.getVia ();\naRow [8] = pTurista.getCittaResidenza ();\naRow [9] = pTurista.getCap ();\naRow [10] = pTurista.getProvincia ();\naRow [11] = pTurista.getDataRegistrazione ();\naRow [12] = pTurista.getId ();\ndata.add (aRow);\n)\n\n/ **\n*\n* Update the information of the tourist in the model (if any)\n* With the bean supplied input.\n*\n* @ Param pTurista BeanTurista - the bean that contains the data of the tourist.\n*\n* /\npublic void updateTurista (BeanTurista pTurista) throws IllegalArgumentException\n(\nif (null == pTurista)\n(\nthrow new IllegalArgumentException (\n\"The bean provided can not be null.\");\n)\nint i;\nfor (i = 0; i <data.size () i + +)\n(\nint id = (Integer) data.get (i) [12];\nif (id == pTurista.getId ())\n(\nbreak;\n)\n)\nif (i! data.size = ()) / / Found\n(\nObject [] aRow = new Object [13];\naRow [0] = pTurista.isAttiva ();\naRow [1] = pTurista.getNome ();\naRow [2] = pTurista.getCognome ();\naRow [3] = pTurista.getEmail ();\naRow [4] = pTurista.getTelefono ();\naRow [5] = pTurista.getDataNascita ();\naRow [6] = pTurista.getCittaNascita ();\naRow [7] = pTurista.getVia ();\naRow [8] = pTurista.getCittaResidenza ();\naRow [9] = pTurista.getCap ();\naRow [10] = pTurista.getProvincia ();\naRow [11] = pTurista.getDataRegistrazione ();\naRow [12] = pTurista.getId ();\ndata.set (i, aRow);\nfireTableDataChanged ();\n)\n\n)\n\n/ **\n*\n* Returns the id of the visitor whose data are displayed in row\n* Provided input.\n*\n* @ Param pRow - the line number.\n* @ Return - the id of the tourist.\n* @ Exception IllegalArgumentException - if the row index does not pro\n* In the model.\n* /\npublic int getID (int pRow) throws IllegalArgumentException\n(\nif (pRow> = GetRowCount () | | pRow <0)\n(\nthrow new IllegalArgumentException (\n\"The row index is not provided in the model.\");\n)\nreturn (Integer) data.get (pRow) [12];\n)\n\n/ **\n*\n* Returns the id of the tourist at the line number provided as input and removes it from the model.\n*\n* @ Param pRow - the line number.\n* @ Return - the id of the tourist.\n* @ Exception IllegalArgumentException - if the row index does not pro\n* In the model.\n*\n* /\npublic int removeTurista (int pRow) throws IllegalArgumentException\n(\nint id = getID (pRow);\ndata.remove (pRow);\nreturn id;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69427b"},"name":"BeanTurista.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694278"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69427d"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694281"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694283"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694284"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b4"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d1"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\nimport java.util.Date;\n/ **\n  * Bean containing information relating to a tourist\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class BeanTurista implements Serializable\n(\nprivate static final long serialVersionUID = 4214744963263090577L;\nprivate int id;\nprivate String username;\nprivate String name;\nprivate String name;\nprivate String cittaNascita;\nprivate String cittaResidenza;\nprivate String phone;\nprivate String cap;\nprivate String street;\nprivate String province;\nprivate String email;\nprivate String password;\nprivate Date dob;\nprivate Date dataRegistrazione;\nprivate boolean active;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pid\n* @ Param pUsername\n* @ Param Pnom\n* @ Param pCognome\n* @ Param pCittaNascita\n* @ Param pCittaResidenza\n* @ Param pTelefono\n* @ Param pcap\n* @ Param pVia\n* @ Param pProvincia\n* @ Param pEmail\n* @ Param pPassword\n* @ Param pDataNascita\n* @ Param pDataRegistrazione\n* @ Param pacts\n* /\npublic BeanTurista (int pid, String pUsername, String Pnom,\nPCognome String, String pCittaNascita, String pCittaResidenza,\nPTelefono String, String pcap, pVia String, String pProvincia,\nPEmail String, String pPassword, Date pDataNascita,\nDate pDataRegistrazione, boolean Patti)\n(\nsetId (pid);\nsetUsername (pUsername);\nsetNome (Phnom);\nsetCognome (pCognome);\nsetCittaNascita (pCittaNascita);\nsetCittaResidenza (pCittaResidenza);\nsetTelefono (pTelefono);\nsetCap (PCAP);\nsetvar (pVia);\nsetProvincia (pProvincia);\nsetEmail (pEmail);\nsetPassword (pPassword);\nsetDataNascita (pDataNascita);\nsetDataRegistrazione (pDataRegistrazione);\nsetAttiva (Patti);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanTurista ()\n(\n\n)\n\n/ **\n* Returns the value of cap\n*\n* @ Return value cap.\n* /\npublic String getCap ()\n(\nreturn cap;\n)\n\n/ **\n* Sets the new value of cap\n*\nNew pcap * @ param value cap.\n* /\npublic void setCap (String PCAP)\n(\nch = pcap;\n)\n\n/ **\n* Returns the value of cittaNascita\n*\n* @ Return value cittaNascita.\n* /\npublic String getCittaNascita ()\n(\ncittaNascita return;\n)\n\n/ **\n* Sets the new value of cittaNascita\n*\n* @ Param value pCittaNascita New cittaNascita.\n* /\npublic void setCittaNascita (String pCittaNascita)\n(\ncittaNascita = pCittaNascita;\n)\n\n/ **\n* Returns the value of cittaResidenza\n*\n* @ Return value cittaResidenza.\n* /\npublic String getCittaResidenza ()\n(\ncittaResidenza return;\n)\n\n/ **\n* Sets the new value of cittaResidenza\n*\n* @ Param value pCittaResidenza New cittaResidenza.\n* /\npublic void setCittaResidenza (String pCittaResidenza)\n(\ncittaResidenza = pCittaResidenza;\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getCognome ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new value of name\n*\n* @ Param value New pCognome surname.\n* /\npublic void setCognome (String pCognome)\n(\nlast = pCognome;\n)\n\n/ **\n* Returns the value of dob\n*\n* @ Return value dob.\n* /\npublic Date getDataNascita ()\n(\nreturn dob;\n)\n\n/ **\n* Sets the new value of dob\n*\n* @ Param value New pDataNascita dob.\n* /\npublic void setDataNascita (Date pDataNascita)\n(\ndob = pDataNascita;\n)\n\n/ **\n* Returns the value of dataRegistrazione\n*\n* @ Return value dataRegistrazione.\n* /\npublic Date getDataRegistrazione ()\n(\ndataRegistrazione return;\n)\n\n/ **\n* Sets the new value of dataRegistrazione\n*\n* @ Param value pDataRegistrazione New dataRegistrazione.\n* /\npublic void setDataRegistrazione (Date pDataRegistrazione)\n(\ndataRegistrazione = pDataRegistrazione;\n)\n\n/ **\n* Returns the value of email\n*\n* @ Return value of email.\n* /\npublic String getEmail ()\n(\nreturn email;\n)\n\n/ **\n* Sets the new value of email\n*\n* @ Param pEmail New value of email.\n* /\npublic void setEmail (String pEmail)\n(\nemail = pEmail;\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getName ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new name value\n*\n* @ Param name New value Pnom.\n* /\npublic void setNome (String Pnom)\n(\nname = Pnom;\n)\n\n/ **\n* Returns the value of password\n*\n* @ Return value of password.\n* /\npublic String getPassword ()\n(\nreturn password;\n)\n\n/ **\n* Sets the new password value\n*\n* @ Param pPassword new password value.\n* /\npublic void setPassword (String pPassword)\n(\npassword = pPassword;\n)\n\n/ **\n* Returns the value of the province\n*\n* @ Return value of the province.\n* /\npublic String getProvincia ()\n(\nreturn province;\n)\n\n/ **\n* Sets the new value of the province\n*\n* @ Param pProvincia New value for the province.\n* /\npublic void setProvincia (String pProvincia)\n(\nprovince = pProvincia;\n)\n\n/ **\n* Returns the value of telephone\n*\n* @ Return Value of the phone.\n* /\npublic String getTelefono ()\n(\nreturn phone;\n)\n\n/ **\n* Sets the new value of telephone\n*\n* @ Param value New pTelefono phone.\n* /\npublic void setTelefono (String pTelefono)\n(\nphone = pTelefono;\n)\n\n/ **\n* Returns the value of street\n*\n* @ Return value on.\n* /\npublic String getVar ()\n(\nreturn path;\n)\n\n/ **\n* Sets the new value via\n*\n* @ Param value New pVia on.\n* /\npublic void setvar (String pVia)\n(\nvia = pVia;\n)\n\n/ **\n* Returns the value of username\n*\n* @ Return value of username.\n* /\npublic String GetUserName ()\n(\nreturn username;\n)\n\n/ **\nReturns to be 1 or 0, indicating whether a tourist or not\n* Active\n*\n* @ Return value of activation\n* /\npublic boolean isAttiva ()\n(\nreturn active;\n)\n\n/ **\n* Sets the new value of active\n*\n* @ Param new value terms of assets.\n* /\npublic void setAttiva (boolean Patti)\n(\nactive = Pact;\n)\n\n/ **\n* Sets the new value of username\n*\n* @ Param pUsername New value for username.\n* /\npublic void setUsername (String pUsername)\n(\nusername = pUsername;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param new value of id pid.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69427c"},"name":"GestioneTuristaComune.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694278"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694283"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942cb"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d1"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dd"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneUtentiRegistrati;\n\nimport java.rmi.RemoteException;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.sql.SQLException;\n\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.repository.DBTurista;\nimport unisa.gps.etour.repository.IDBTurista;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ **\n  * Class that implements the common tasks for Operators and Tourist Agency\n  * Ie modificaTurista and ottieniTurista\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\nGestioneTuristaComune UnicastRemoteObject public class extends implements\nIGestioneTuristaComune\n(\n\nprotected IDBTurista tourist;\n\n/ / Constructor that richama turn the class constructor\n/ / UnicastRemoteObject to connect via RMI\n/ / Instantiate and connect to the database\npublic GestioneTuristaComune () throws RemoteException\n(\nsuper ();\n/ / Connect to the Database\nTRY\n(\nTourists DBTurista = new ();\n)\n/ / Exception in the database connection\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ / Method that allows you to change the data of a tourist through its\n/ / Data\npublic boolean modificaTurista (BeanTurista pProfiloTurista)\nthrows RemoteException\n(\n/ / Check the validity of past data\nif ((pProfiloTurista == null)\n| | (! (PProfiloTurista instanceof BeanTurista)))\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\n/ / Execution of the amendment\nTRY\n(\n/ / If the changes were made returns true\nif (turista.modificaTurista (pProfiloTurista))\nreturn true;\n)\n/ / Exception in operations on database\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in method modificaTurista\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method modificaTurista\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If there were no exceptions but the changes are not\n/ / Returns false were made\nreturn false;\n)\n\n/ / Method to obtain the bean with data from the Tourist\n/ / Identified by\n/ / The parameter passed\npublic BeanTurista ottieniTurista (int pIdTurista) throws RemoteException\n(\n/ / Check the validity identifier\nif (pIdTurista <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\nBeanTurista toReturn = null, / / variable return\n/ / Retrieve data\nTRY\n(\n/ / Are requested to return the bean layer on the tourist\n/ / With id equal to pIdTurista\ntoReturn = turista.ottieniTurista (pIdTurista);\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Exception in database operations\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in method ottieniTurista\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniTurista\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Return the result\ntoReturn return;\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69427e"},"name":"IGestioneTuristiAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69427d"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694281"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694283"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694284"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneUtentiRegistrati;\n\nimport java.rmi.RemoteException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n/ **\n  * Interface for handling tourists from the side of the transaction Agency\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IGestioneTuristiAgenzia extends IGestioneTuristaComune\n(\n\n/ **\n* Method for the cancellation of a tourist from the Database\n*\n* @ Param pIdTurista Identifier Tourist delete\n* @ Return Boolean: true if the operation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean delete (int pIdTurista) throws RemoteException;\n\n/ **\n* Method to activate a registered tourists\n*\n* @ Param pIdTurista ID to activate the Tourist\n* @ Return Boolean: true if the operation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean attivaTurista (int pIdTurista) throws RemoteException;\n\n/ **\n* Method to disable an active tourists\n*\n* @ Param to disable pIdTurista Identifier Tourist\n* @ Return Boolean: true if the operation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean disattivaTurista (int pIdTurista) throws RemoteException;\n\n/ **\n* Method to obtain a collection of Tourists\n*\n* @ Return ArrayList of BeanTurista\n* @ Throws RemoteException Exception Remote\n* /\n<BeanTurista> ottieniTuristi public ArrayList () throws RemoteException;\n\n/ **\n* Method to obtain a collection of active tourists or not\n*\n* @ Param boolean statoAccount Tourists can choose\n* On whether\n* @ Return ArrayList of BeanTurista\n* @ Throws RemoteException Exception Remote\n* /\npublic ArrayList <BeanTurista> ottieniTuristi (boolean statoAccount)\nthrows RemoteException;\n\n/ **\n* Method to get all the feedback issued by a tourist for the points\n* Refreshments\n*\n* @ Param pIdTurista ID to pick up the tourists in\n* Feedback\n* @ Return ArrayList containing all the beans Feedback released\n* @ Throws RemoteException Exception Remote\n* /\n<BeanVisitaPR> ottieniFeedbackPR public ArrayList (int pIdTurista)\nthrows RemoteException;\n\n/ **\n* Method to get all the feedback issued by a tourist for Heritage\n* Cultural\n*\n* @ Param pIdTurista ID to pick up the tourists in\n* Feedback\n* @ Return ArrayList containing all the beans Feedback released\n* @ Throws RemoteException Exception Remote\n* /\n<BeanVisitaBC> ottieniFeedbackBC public ArrayList (int pIdTurista)\nthrows RemoteException;\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69427f"},"name":"DBTurista.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69427d"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942af"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d1"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dd"}]],"contents":"package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Date;\n\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.repository.IDBTurista;\n\npublic class DBTurista implements IDBTurista\n(\n\npublic boolean cancellaBeneCulturalePreferito (int pIdTurista,\npIdBeneCulturale int) throws SQLException\n(\nreturn false;\n)\n\npublic boolean cancellaPuntoDiRistoroPreferito (int pIdTurista,\npIdPuntoDiRistoro int) throws SQLException\n(\nreturn false;\n)\n\npublic boolean delete (int pIdTurista) throws SQLException\n(\nreturn false;\n)\n\npublic boolean inserisciBeneCulturalePreferito (int pIdTurista,\npIdBeneCulturale int) throws SQLException\n(\nreturn false;\n)\n\npublic boolean inserisciPuntoDiRistoroPreferito (int pIdTurista,\npIdPuntoDiRistoro int) throws SQLException\n(\nreturn false;\n)\n\npublic boolean inserisciTurista (BeanTurista pTurista) throws SQLException\n(\nreturn false;\n)\n\npublic boolean modificaTurista (BeanTurista pTurista) throws SQLException\n(\nreturn false;\n)\n\npublic BeanTurista ottieniTurista (String pUsername) throws SQLException\n(\nreturn null;\n)\n\npublic BeanTurista ottieniTurista (int pIdTurista) throws SQLException\n(\n/ / ArrayList <BeanTurista> t = new ArrayList <BeanTurista> (0);\n/ / T.add (New BeanTurista (1, \"username\", \"Astrubale\", \"Silberschatz\", \"Naples\", \"Naples\", \"0111111\", \"80100th\", \"Way of the systems, 1\", \"NA\" ,\n/ / \"Trapano@solitario.it\", \"passwordsolomia\", new Date (), new Date (), true));\n/ /\n/ / T.add (new BeanTurista (1, \"username\", \"Astrubale\", \"Silberschatz\", \"Naples\", \"Naples\", \"0111111\", \"80100th\", \"Way of the systems, 1\", \"NA\" ,\n/ / \"Trapano@solitario.it\", \"passwordsolomia\", new Date (), new Date (), true));\n/ /\n/ / Return t;\n\nreturn (new BeanTurista (1, \"username\", \"Astrubale\", \"Silberschatz\", \"Naples\", \"Naples\", \"0111111\", \"80100th\", \"Way of the systems, 1\", \"NA\",\n\"trapano@solitario.it\", \"passwordsolomia\", new Date (), new Date (), true));\n)\n\npublic ArrayList <BeanTurista> ottieniTuristi (String pUsernameTurista)\nthrows SQLException\n(\nreturn null;\n)\n\npublic ArrayList <BeanTurista> ottieniTuristi (boolean condition)\nthrows SQLException\n(\nreturn null;\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694280"},"name":"IDBTurista.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69427d"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694281"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694283"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694284"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942af"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d1"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dd"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTurista;\n\n/ **\n  * Interface for the management of tourists in the database\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBTurista\n(\n/ **\n* Add a tourist\n*\n* @ Param to add pTurista Tourist\n* @ Throws SQLException\n* /\npublic boolean inserisciTurista (BeanTurista pTurista) throws SQLException;\n\n/ **\n* Modify a tourist\n*\n* @ Param to change pTurista Tourist\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean modificaTurista (BeanTurista pTurista) throws SQLException;\n\n/ **\n* Delete a tourist from the database\n*\n* @ Param pIdTurista Identificatie Tourist delete\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean delete (int pIdTurista) throws SQLException;\n\n/ **\n* Returns the data of the Tourist\n*\n* @ Param pUsername Username tourists\n* @ Throws SQLException\n* @ Return Information about tourist\n* /\npublic BeanTurista ottieniTurista (String pUsername) throws SQLException;\n\n/ **\n* Attach a cultural tourists preferred\n*\n* @ Param ID pIdTurista tourists\n* @ Param pIdBeneCulturale ID of the cultural\n* @ Throws SQLException\n* /\npublic boolean inserisciBeneCulturalePreferito (int pIdTurista,\npIdBeneCulturale int) throws SQLException;\n\n/ **\n* Attach a point of catering to the tourist favorite\n*\n* @ Param ID pIdTurista tourists\n* @ Param pIdPuntoDiRistoro ID of the cultural\n* @ Throws SQLException\n* /\npublic boolean inserisciPuntoDiRistoroPreferito (int pIdTurista,\npIdPuntoDiRistoro int) throws SQLException;\n\n/ **\n* Delete a cultural favorite\n*\n* @ Param ID pIdTurista tourists\n* @ Param pIdBeneCulturale ID of the cultural\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean cancellaBeneCulturalePreferito (int pIdTurista,\npIdBeneCulturale int) throws SQLException;\n\n/ **\n* Delete a favorite resting spot\n*\n* @ Param ID pIdTurista tourists\n* @ Param pIdPuntoDiRistoro ID of the cultural\n* @ Throws SQLException\n* @ Return True if and 'was deleted false otherwise\n* /\npublic boolean cancellaPuntoDiRistoroPreferito (int pIdTurista,\npIdPuntoDiRistoro int) throws SQLException;\n\n/ **\n* Returns an ArrayList of tourists who have a username like that\n* Given as argument\n*\n* @ Param pUsernameTurista Usrername tourists to search\n* @ Throws SQLException\n* @ Return data for Tourists\n* /\npublic ArrayList <BeanTurista> ottieniTuristi (String pUsernameTurista)\nthrows SQLException;\n\n/ **\n* Returns the list of tourists turned on or off\n*\n* @ Param select pact True False those tourists turned off\n* @ Return data for Tourists\n* @ Throws SQLException\n* /\npublic ArrayList <BeanTurista> ottieniTuristi (boolean condition)\nthrows SQLException;\n\n/ **\n* Returns the data of the tourist with ID equal to that given in\n* Input\n*\n* @ Param ID pIdTurista tourists to find\n* @ Return Tourists with id equal to the input, null if there is\n* @ Throws SQLException\n* /\npublic BeanTurista ottieniTurista (int pIdTurista) throws SQLException;\n\n/ **\n* Returns the list of cultural favorites from a particular\n* Tourist\n*\n* @ Param ID pIdTurista tourists to find\n* @ Return List of Cultural Heritage Favorites\n* @ Throws SQLException\n* /\n<Integer> ottieniBeniCulturaliPreferiti public ArrayList (int pIdTurista)\nthrows SQLException;\n\n/ **\n* Returns a list of favorite resting spot by a particular\n* Tourist\n*\n* @ Param ID pIdTurista tourists to find\n* @ Return List of Refreshment Favorites\n* @ Throws SQLException\n* /\n<Integer> ottieniPuntoDiRistoroPreferiti public ArrayList (int pIdTurista)\nthrows SQLException;\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694282"},"name":"GestioneTuristiAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694281"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694283"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694284"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneUtentiRegistrati;\n\nimport java.rmi.RemoteException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.bean.BeanVisitaPR;\nimport unisa.gps.etour.repository.DBVisitaBC;\nimport unisa.gps.etour.repository.DBVisitaPR;\nimport unisa.gps.etour.repository.IDBVisitaBC;\nimport unisa.gps.etour.repository.IDBVisitaPR;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ **\n  * Class that implements the interface for managing the side Tourists\n  * Agency and extends UnicastRemoteObject for communication in remote\n  * Provides basic methods for handling and additional methods for returning\n  * Tourists with special characteristics of\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class GestioneTuristiAgenzia extends GestioneTuristaComune implements\nIGestioneTuristiAgenzia\n(\n\nPrivate IDBVisitaBC feedbackBC;\nPrivate IDBVisitaPR feedbackPR;\n\npublic GestioneTuristiAgenzia () throws RemoteException\n(\nsuper ();\nTRY\n(\n/ / Instantiate objects for database connections\nfeedbackBC = new DBVisitaBC ();\nfeedbackPR = new DBVisitaPR ();\n)\n/ / Exception on the database connection\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ / Method for obtaining all tourists alike present\n/ / In the database\n<BeanTurista> ottieniTuristi public ArrayList () throws RemoteException\n(\n/ / Object that will contain the return value\nArrayList <BeanTurista> toReturn;\n/ / Retrieve data\nTRY\n(\n/ / Invoke the method with empty string to get all Tourists\ntoReturn = turista.ottieniTuristi (\"\");\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Exception in database operations\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nSystem.out.println ( \"Error in method ottieniTuristi\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniTuristi\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Return the result from the data layer ottenuro\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\ntoReturn return;\n)\n\n/ / Method that allows to obtain all the tourists who have an account\n/ / Active or not\npublic ArrayList <BeanTurista> ottieniTuristi (boolean statoAccount)\nthrows RemoteException\n(\n/ / ArrayList containing the results\nArrayList <BeanTurista> toReturn;\n/ / Retrieve data\nTRY\n(\n/ / All tourists are taken to the state as a parameter\ntoReturn = turista.ottieniTuristi (statoAccount);\n)\n/ / Exception in implementing the operation on the database\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in method ottieniTuristi (boolean)\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniTuristi (boolean)\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the data to return, so you do not return null values\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\ntoReturn return;\n)\n\n/ / Method that allows the activation of a tourist is not yet activated\npublic boolean attivaTurista (int pIdTurista) throws RemoteException\n(\n/ / Check the validity of input data\nif (pIdTurista <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Bean that contains the data of tourists to activate\nBeanTurista toChange;\n/ / Retrieve and edit data required\nTRY\n(\n/ / Get the data from the Database\ntoChange = turista.ottieniTurista (pIdTurista);\n/ / Check that the tourist is not already activated\nif (toChange.isAttiva ())\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / It sets the value indicating the activation status to true\ntoChange.setAttiva (true);\n/ / You try to change the database\nif (turista.modificaTurista (toChange))\n/ / If the edit operation is successful returns\n/ / True\nreturn true;\n)\n/ / Exception in the execution of database operations\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in method attivaTurista\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method attivaTurista\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If no exceptions were thrown but the changes\n/ / Not have been successful returns false\nreturn false;\n)\n\n/ / Method that allows you to disable a tourist\npublic boolean disattivaTurista (int pIdTurista) throws RemoteException\n(\n/ / Check the validity of data\nif (pIdTurista <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\nBeanTurista toChange / / bean that contains the data from the tourist\n/ / Disable\n/ / Retrieve and edit data required\nTRY\n(\n/ / Get the data from the database\ntoChange = turista.ottieniTurista (pIdTurista);\n/ / Check that the tourist is active\nif (! toChange.isAttiva ())\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / It sets the value indicating the activation status to false\ntoChange.setAttiva (false);\n/ / You try to change the database\nif (turista.modificaTurista (toChange))\n/ / If the edit operation is successful returns\n/ / True\nreturn true;\n)\n/ / Exception in the execution of database operations\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in method disattivaTurista\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method disattivaTurista\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / If no exceptions were thrown but the changes\n/ / Not have been successful returns false\nreturn false;\n)\n\n/ / Method that erases a tourist from the Database\npublic boolean delete (int pIdTurista) throws RemoteException\n(\n/ / Check the validity of data\nif (pIdTurista <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\nTRY\n(\n/ / If the cancellation is successful it returns true\nif (turista.cancellaTurista (pIdTurista))\nreturn true;\n)\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in delete method\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in delete method\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Otherwise if you have not thrown exceptions, but the cancellation\n/ / Not have been successful returns false\nreturn false;\n)\n\n/ / Method that returns an ArrayList containing the feedback issued by\n/ / Some for the Cultural Tourist\n<BeanVisitaBC> ottieniFeedbackBC public ArrayList (int pIdTurista)\nthrows RemoteException\n(\n/ / Check the validity of data\nif (pIdTurista <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / ArrayList return\nArrayList <BeanVisitaBC> toReturn;\nTRY\n(\n/ / Retrieve data from Database\ntoReturn = feedbackBC.ottieniListaVisitaBCTurista (pIdTurista);\n)\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in method ottieniFeedbackBC\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exception caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniFeedbackBC\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the data back in order not to return null values\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\ntoReturn return;\n)\n\n/ / Method that returns an ArrayList containing the feedback issued by\n/ / Some for the Cultural Tourist\n<BeanVisitaPR> ottieniFeedbackPR public ArrayList (int pIdTurista)\nthrows RemoteException\n(\n/ / Check the validity of data\nif (pIdTurista <0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\nArrayList <BeanVisitaPR> toReturn / / variable return\nTRY\n(\n/ / Insert the result in toReturn\n/ / Returned from the Data Layer\ntoReturn = feedbackPR.ottieniListaVisitaPRTurista (pIdTurista);\n)\ncatch (SQLException e)\n(\n/ / If the data layer sends an exception is throws the exception remote\nSystem.out.println ( \"Error in method ottieniFeedbackPR\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method ottieniFeedbackPR\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n/ / Check the array of return, so you do not return null values\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\ntoReturn return;\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694286"},"name":"BannerNode.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}]],"contents":"ï»¿package unisa.gps.etour.gui.operatoreagenzia.tables;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.tree.DefaultMutableTreeNode;\n\n/ **\n  * This class creates a node in a JTree to store\n  * Information about a banner.\n  *\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class DefaultMutableTreeNode extends BannerNode\n(\nprivate int id;\n\n/ **\n* This is the default constructor.\n*\n* /\npublic BannerNode ()\n(\nsuper ();\n)\n\n/ **\n* Create a node with the image of the banner and\n* Your id supplied as parameters.\n*\n* @ Param pBanner Imagelcon - the image of the banner.\nPID * @ param int - the id of the banner.\n* @ Throws IllegalArgumentException - if the image provided as input is invalid.\n*\n* /\npublic BannerNode (ImageIcon pBanner, int pid) throws IllegalArgumentException\n(\nsuper ();\nif (null == pBanner)\n(\nthrow new IllegalArgumentException ( \"Image is invalid.\");\n)\nsetUserObject (pBanner);\nid = pid;\n)\n\n/ **\n*\n* Returns the node type PRNode father.\n*\n* @ Return PRNode - the parent node.\n*\n* /\npublic PRNode getParent ()\n(\nreturn (PRNode) super.getParent ();\n)\n\n/ **\n*\n* Returns the id of the banner for which information\n* Are stored in this node.\n*\n* @ Return int - the id of the banner.\n*\n* /\npublic int getID ()\n(\nreturn id;\n)\n\n/ **\n*\n* Stores the id of the banner supplied input.\n*\n* @ Param int PID - an ID of a banner.\n*\n* /\npublic void setID (int pid)\n(\nid = pid;\n)\n\n/ **\n*\n* Returns the banner image.\n*\n* @ Return ImageIcon - the image.\n* /\npublic ImageIcon getBanner ()\n(\nreturn (ImageIcon) getUserObject ();\n)\n\n/ **\n*\n* Save the image provided as input.\n*\n* @ Param pImmagine Imagelcon - the image to be stored.\n* @ Throws IllegalArgumentException - if the supplied parameter is null.\n* /\npublic void setBanner (ImageIcon pImmagine) throws IllegalArgumentException\n(\nif (null == pImmagine)\n(\nthrow new IllegalArgumentException ( \"Image is invalid.\");\n)\nsetUserObject (pImmagine);\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694287"},"name":"IDBBanner.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694291"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bd"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanBanner;\n\n/ **\n  * Interface for managing the banner on the database\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\npublic interface IDBBanner\n(\n/ **\n* Add a banner in the database\n*\n* @ Param pBanner bean containing the information of the banner\n* @ Throws SQLException\n* /\npublic boolean inserisciBanner (BeanBanner pBanner) throws SQLException;\n\n/ **\n* Modify the contents of the advertisement, and returns the contents before\n* Edit\n*\n* @ Param pBanner Bean that contains the new information of the banner\n* @ Return True if there 'was a modified false otherwise\n* @ Throws SQLException\n* /\npublic boolean modificaBanner (BeanBanner pBanner) throws SQLException;\n\n/ **\n* Delete a banner from the database and returns\n*\n* @ Param pIdBanner ID BeanBanner\n* @ Return True if and 'was deleted false otherwise\n* @ Throws SQLException\n* /\npublic boolean cancellaBanner (int pIdBanner) throws SQLException;\n\n/ **\n* Returns a list of banners for a refreshment point, if the id of\n* Refreshment and 'equal to -1 will' return the complete list\n* Banners\n*\n* @ Param Id pIdPuntoDiRistoro of refreshment point from which to obtain the list\n* Banner\n* @ Return list of banners linked to Refreshment\n* @ Throws SQLException\n* /\n<BeanBanner> ottieniBanner public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException;\n\n/ **\n* Method which returns a banner given its id\n*\n* @ Param ID pIdBanner the banner to return\n* @ Return Banner found in the database, null if there is' match\n* @ Throws SQLException\n* /\npublic BeanBanner ottieniBannerDaID (int pIdBanner) throws SQLException;\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694288"},"name":"DBBanner.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694291"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}]],"contents":"/ **\n  * Stubs for dynamic class DBBanner. Is used for testing\n  * Class package GestioneAdvertisement.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * © 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npackage unisa.gps.etour.control.GestioneAdvertisement.test.stubs;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanBanner;\nimport unisa.gps.etour.repository.IDBBanner;\n\npublic class DBBanner implements IDBBanner\n(\n\nprivate static int NUM_TEST = 0;\n\npublic boolean cancellaBanner (int pIdBanner) throws SQLException\n(\nif (NUM_TEST == 5)\n(\nthrow new SQLException ();\n)\nelse\n(\nreturn true;\n)\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.repository.IDBBanner # inserisciBanner (unisa.gps.etour.bean.BeanBanner)\n* /\npublic boolean inserisciBanner (BeanBanner pBanner) throws SQLException\n(\nif (NUM_TEST == 1 | | NUM_TEST == 2)\n(\nreturn true;\n) else\n(\nreturn false;\n)\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.repository.IDBBanner # modificaBanner (unisa.gps.etour.bean.BeanBanner)\n* /\npublic boolean modificaBanner (BeanBanner pBanner) throws SQLException\n(\nreturn true;\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.repository.IDBBanner # ottieniBanner (int)\n* /\n<BeanBanner> ottieniBanner public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException\n(\n<BeanBanner> ToReturn ArrayList <BeanBanner> = new ArrayList ();\n\nif (NUM_TEST == 1 | | NUM_TEST == 2)\n(\n/ * Must return an ArrayList with 3 elements * /\ntoReturn.add (new BeanBanner ());\ntoReturn.add (new BeanBanner ());\ntoReturn.add (new BeanBanner ());\ntoReturn return;\n)\nelse if (NUM_TEST == 4)\n(\ntoReturn.add (new BeanBanner (3, \"c: \\ \\ ProvaBannerInserimento.jpg\", 55));\ntoReturn.add (new BeanBanner (4, \"c: \\ \\ ProvaBannerInserimento.jpg\", 55));\ntoReturn.add (new BeanBanner (5, \"c: \\ \\ ProvaBannerInserimento.jpg\", 55));\ntoReturn.add (new BeanBanner (5, \"c: \\ \\ ProvaBannerInserimento.jpg\", 55));\ntoReturn return;\n) else\n(\nreturn null;\n)\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.repository.IDBBanner # ottieniBannerDaID (int)\n* /\npublic BeanBanner ottieniBannerDaID (int pIdBanner) throws SQLException\n(\nif (NUM_TEST == 7)\n(\nreturn null;\n)\nelse\n(\nreturn new BeanBanner (55, \"c: / / ProvaBanner.jpg\", 3);\n)\n)\n\npublic static void setNUM_TEST (int num_test)\n(\nNUM_TEST = num_test;\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694289"},"name":"BeanBanner.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694291"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bd"}]],"contents":"ï»¿package unisa.gps.etour.bean;\n\n/ **\n  * Bean which contains data on the Banner\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\nimport java.io.Serializable;\n\npublic class BeanBanner implements Serializable\n(\nprivate static final long serialVersionUID =-872783211721655763L;\nprivate int id;\nprivate int idPuntoDiRistoro;\nprivate String filepath;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param pPercorsoFile\n* @ Param pidPuntoDiRistoro\n* /\n\npublic BeanBanner (int pid, String pPercorsoFile, int pidPuntoDiRistoro)\n(\nsetId (PID);\nsetPercorsoFile (pPercorsoFile);\nsetIdPuntoDiRistoro (pidPuntoDiRistoro);\n)\n\n/ **\n* Empty Constructor\n*\n* /\npublic BeanBanner ()\n(\n\n)\n\n/ **\n* Returns the value of FilePath\n*\n* @ Return value of FilePath.\n* /\n\npublic String getPercorsoFile ()\n(\nreturn filepath;\n)\n\n/ **\n* Sets the new value of filepath\n*\n* @ Param pPercorsoFile New value filepath.\n* /\npublic void setPercorsoFile (String pPercorsoFile)\n(\nfilepath = pPercorsoFile;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Returns the value of idPuntoDiRistoro\n*\n* @ Return value idPuntoDiRistoro.\n* /\npublic int getIdPuntoDiRistoro ()\n(\nidPuntoDiRistoro return;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n/ **\n* Sets the new value of idPuntoDiRistoro\n*\n* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.\n* /\npublic void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)\n(\nidPuntoDiRistoro = pIdPuntoDiRistoro;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69428a"},"name":"IGestioneAdvertisement.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694291"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bd"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneAdvertisement;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\nimport java.util.HashMap;\n\nimport javax.swing.ImageIcon;\n\nimport unisa.gps.etour.bean.BeanBanner;\n\n/ **\n  * Interface General Manager of Banner and news.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno\n  * /\npublic interface extends Remote IGestioneAdvertisement\n(\n/ **\n* Inserts a new banner.\n*\n* @ Param pBanner Bean contains the data of the banner\n* @ Throws RemoteException\n* /\npublic boolean inserisciBanner (int pIdPuntoDiRistoro, Imagelcon pImmagineBanner)\nthrows RemoteException;\n/ **\n* Delete a banner from the system.\n*\n* @ Param pBannerID ID banner to be deleted.\n* @ Return true if the operation is successful false otherwise.\n* @ Throws RemoteException\n* /\npublic boolean cancellaBanner (int pBannerID) throws RemoteException;\n/ **\n* Modify the data of the banner or the image associated.\n*\n* @ Param pBanner Bean contains the data of the banner.\n* @ Return true if the operation is successful, false otherwise.\n* @ Throws RemoteException\n* /\npublic boolean modificaBanner (int pBannerID, Imagelcon pImmagine)\nthrows RemoteException;\n/ **\n* Returns a list of Banner of a particular point of comfort.\n*\n* @ Param Id pPuntoDiRistoroID of refreshment owner of banner\n* @ Return ArrayList containing the list of banner refreshment\n* @ Throws RemoteException\n* /\n<BeanBanner,ImageIcon> ottieniBannersDaID public HashMap (int pIdPuntoDiRistoro)\nthrows RemoteException;\n\n)\n\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69428b"},"name":"GestioneAdvertisement.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bd"}]],"contents":"ï»¿/ **\n  * Class that implements the general\n  * Management dell'advertisement.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno\n  * /\npackage unisa.gps.etour.control.GestioneAdvertisement;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.rmi.RemoteException;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\nimport unisa.gps.etour.bean.BeanBanner;\nimport unisa.gps.etour.bean.BeanConvenzione;\nimport unisa.gps.etour.repository.DBBanner;\n/ / import unisa.gps.etour.control.GestioneAdvertisement.test.stubs .*;\nimport unisa.gps.etour.repository.DBConvenzione;\nimport unisa.gps.etour.repository.IDBBanner;\nimport unisa.gps.etour.repository.IDBConvenzione;\nimport unisa.gps.etour.util.ControlloDati;\nimport unisa.gps.etour.util.CostantiGlobali;\nimport unisa.gps.etour.util.MessaggiErrore;\n\nGestioneAdvertisement UnicastRemoteObject public class extends implements\nIGestioneAdvertisement\n(\nprivate static final long serialVersionUID = 1L;\n/ ** An object that handles operations on the banner * /\nPrivate IDBBanner dbBanner;\n/ **\n* Constructor, instantiates an object of type DBBanner that\n* Contains methods that perform operations on data\n* Entity banner.\n*\n* @ Throws RemoteException\n* /\npublic GestioneAdvertisement () throws RemoteException\n(\nsuper ();\ndbBanner = new DBBanner ();\n)\n/ **\n* Delete a banner and the image associated with the system.\n*\n* @ Param id of the banner to remove pBannerID\n* @ Throws RemoteException\n* /\npublic boolean cancellaBanner (int pIdBanner) throws RemoteException\n(\n/ * Bean containing the data of the banner * /\nBeanBanner banner;\n\nTRY\n(\n/ * Load the banner and check the data * /\nbanner = dbBanner.ottieniBannerDaID (pIdBanner);\nif (! ControlloDati.checkBeanBanner (banner)) (\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n)\n/ * Remove the image associated with the banner * /\nImage file = new File (banner.getPercorsoFile ());\nimmagine.delete ();\n/ * Clear the whole bean banner * /\nreturn (dbBanner.cancellaBanner (pIdBanner));\n)\ncatch (SQLException e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\n)\n/ **\n* Method to change the image associated with the banner:\n* Delete the old image and stores the new\n* Enjoy the same path as the old image.\n*\n* @ Param id pBannerID banner\n* @ Param pImmagine ImageIcon object containing the new image of the banner\n* @ Return returns true if the operation is successful\n* /\npublic boolean modificaBanner (int pBannerID, Imagelcon pImmagine) throws RemoteException\n(\n\nTRY\n(\n/ * Performs a check on the image of the banner * /\nif (! ControlloDati.checkImmagine (pImmagine)) (\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n)\n/ * Load the icon image * /\nBufferedImage buffImg = (BufferedImage) pImmagine.getImage ();\n/ * Load the data of the banner * /\nBeanBanner banner = dbBanner.ottieniBannerDaID (pBannerID);\n/ * Check the banner on the data uploaded * /\nif (! ControlloDati.checkBeanBanner (banner)) (\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n)\n/ * Rewrite the image file and returns the result of the operation * /\nImgfile file = new File (banner.getPercorsoFile ());\nreturn (ImageIO.write (buffImg, \"jpg\", Imgfile));\n)\ncatch (SQLException e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\ncatch (Exception e) (\nif (e instanceof RemoteException)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n) else\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_FILE);\n)\n)\n)\n/ **\n* Returns a list of banners for a refreshment.\n* Use the method (@ link) DBBanner.ottieniBanner\n*\n* @ Param ID pPuntoDiRistoroID refreshment\n* @ Throws RemoteException\n* /\n<BeanBanner,ImageIcon> ottieniBannersDaID public HashMap (int pIdPuntoDiRistoro)\nthrows RemoteException (\n/ * Create a HashMap that will hold the banner and associated images * /\n<BeanBanner,ImageIcon> ToReturn HashMap <BeanBanner, ImageIcon> = new HashMap ();\n\nTRY\n(\n/ * Get the list of banners for a refreshment point * /\nArrayList <BeanBanner> listaBanner = dbBanner.ottieniBanner (pIdPuntoDiRistoro);\n/ * For each banner valid list * /\nfor (BeanBanner banner: listaBanner) (\n/ * If the banner is a valid charge in the HashMap with the image file * /\nif (ControlloDati.checkBeanBanner (banner)) (\n/ * Create the image file * /\nFileImmagine file = new File (banner.getPercorsoFile ());\n/ * Create an object ImageIcon from the image file * /\nImageIcon icon = new ImageIcon (ImageIO.read (fileImmagine));\n/ * Add the banner and the image all'HashMap * /\ntoReturn.put (banner, icon);\n)\n)\ntoReturn return;\n)\ncatch (SQLException e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\ncatch (Exception e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_FILE);\n)\ncatch (Exception e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n/ **\n* Create and insert a new banner, making sure the num. maximum\n* Banner displayed for a refreshment point is\n* Already been reached in this case throws an exception to the calling method.\n*\n* @ Param Id pIDPuntoDiRistoro of refreshment\n* @ Param pImmagineBanner ImageIcon object containing the banner image\n* @ Return Returns true if the insertion has been successful.\n* @ Exception RemoteException\n* /\npublic boolean inserisciBanner (int pIdPuntoDiRistoro, Imagelcon pImmagineBanner)\nthrows RemoteException\n(\n\nTRY\n(\n/ * Performs a check on the image * /\nif (! ControlloDati.checkImmagine (pImmagineBanner)) (\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n)\n/ * Create an object that handles the conventions * /\nIDBConvenzione dbConvenzione = new DBConvenzione ();\n/ * Load the data of the convention of a refreshment point * /\nBeanConvenzione Convention dbConvenzione.ottieniConvezioneAttiva = (pIdPuntoDiRistoro);\n/ * Get the number of banners displayed by the Convention Masssimo * /\nint maxBanner = convenzione.getMaxBanner ();\n/ * Load the list of banners for a refreshment and stores the number * /\nint numBanner = (dbBanner.ottieniBanner (pIdPuntoDiRistoro)). size ();\n/ * Check that the maximum number of banners is not reached * /\nif (! (numBanner <maxBanner))\n(\nthrow new Exception (MessaggiErrore.ERRORE_NUM_BANNER);\n)\n/ * Create a blank banner * /\nBanner BeanBanner = new BeanBanner ();\n/ * Create a unique file name * /\nString path = CostantiGlobali.SERVER_IMAGE_PATH + pIdPuntoDiRistoro;\nint i = 0;\nFileImg file = new File (path + \"_\" + i + \". Jpg\");\nwhile (fileImg.exists ()) (\ni + +;\nfileImg = new File (path + \"_\" + i + \". jpg\");\n)\n/ * Stores the image in the file system * /\nBufferedImage im = (BufferedImage) pImmagineBanner.getImage ();\nif (! ImageIO.write (im, \"jpg\", fileImg)) (\n/ * Write failed * /\nthrow new IOException ();\n)\n/ * Loads the data in the banner * /\nbanner.setIdPuntoDiRistoro (pIdPuntoDiRistoro);\nbanner.setPercorsoFile (fileImg.getPath ());\n/ * Insert the banner in the database * /\nreturn (dbBanner.inserisciBanner (banner));\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_FILE);\n)\ncatch (Exception e)\n(\nif (e.getMessage (). equals (MessaggiErrore.ERRORE_NUM_BANNER))\n(\n/ * Has been reached on most of banner inserted num * /\nthrow new RemoteException (MessaggiErrore.ERRORE_NUM_BANNER);\n) else\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\n)\n\n)\n\n)\n\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69428c"},"name":"GestioneAdvertisementAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694295"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694299"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429a"}]],"contents":"ï»¿/ **\n  * Implementing the management dell'advertisement\n  * For the operator agency. Contains methods for managing\n  * News.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno\n  * /\npackage unisa.gps.etour.control.GestioneAdvertisement;\n\nimport java.rmi.RemoteException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanNews;\n/ * Import the stub * /\n/ / import unisa.gps.etour.control.GestioneAdvertisement.test.stubs.DBNews;\nimport unisa.gps.etour.repository.DBNews;\nimport unisa.gps.etour.repository.IDBNews;\nimport unisa.gps.etour.util.ControlloDati;\nimport unisa.gps.etour.util.CostantiGlobali;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n\npublic class GestioneAdvertisementAgenzia extends GestioneAdvertisement\nimplements IGestioneAdvertisementAgenzia\n(\nprivate static final long serialVersionUID = 1L;\n/ ** Contains the methods for collecting news in the database * /\nPrivate IDBNews dbNews;\n\n/ **\n* Constructor. Instantiates an object of type (@ link unisa.gps.etour.repository.DBNews).\n*\n* @ Throws RemoteException\n* /\npublic GestioneAdvertisementAgenzia () throws RemoteException\n(\nsuper ();\ndbNews = new DBNews ();\n)\n\n/ **\n* Method which removes news from the database. Uses the\n* (@ Link Boolean unisa.gps.etour.repository.IDBNews # cancellaNews (int))\n*\n* @ Param id pNewsID news be erased.\n* @ Return true if the cancellation was successful or FALSE otherwise.\n* @ Throws RemoteException\n*\n* /\npublic boolean cancellaNews (int pNewsID) throws RemoteException\n(\n\nTRY\n(\n/ * Check that the ID is valid * /\nif (pNewsID> 0) (\nreturn (dbNews.cancellaNews (pNewsID));\n) else (\nreturn false;\n)\n) Catch (SQLException e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\n)\n\n/ **\n* Insert a new news in the database.\n* Use the method (@ link unisa.gps.etour.repository.IDBNews # inserisciNews (BeanNews))\n* To insert the news and the method (@ link unisa.gps.etour.repository.IDBNews # ottieniNews ())\n* To count the number of news in the system.\n*\n* @ Param Pnews bean containing data news.\n* @ Return true if the insertion is successful, false if it was\n* Reached the maximum number of news stored or if the insertion fails.\n* @ Throws RemoteException\n* /\npublic boolean inserisciNews (BeanNews Pnews) throws RemoteException\n(\nTRY\n(\n/ * Check the data of the news * /\nif (! ControlloDati.checkBeanNews (Pnews)) (\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n)\n/ * Check that has not been exceeded the no. Max news presets * /\nint numNews = dbNews.ottieniNews (). size ();\nif (numNews <CostantiGlobali.MAX_NEWS_ATTIVE) (\n/ * Possible inclusion * /\nreturn (dbNews.inserisciNews (Pnews));\n) else (\n/ * Insertion is not possible * /\nreturn false;\n)\n) Catch (SQLException e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\n)\n\n/ **\n* Method to change data of a news.\n* Use the method (@ link unisa.gps.etour.repository.IDBNews # modificaNews (BeanNews)).\n*\n* @ Param Pnews bean containing the data of news changed.\n* @ Return true if the change goes through.\n* @ Throws RemoteException\n* /\npublic boolean modificaNews (BeanNews Pnews) throws RemoteException\n(\n\nTRY\n(\n/ * Check the data of the news * /\nif (! ControlloDati.checkBeanNews (Pnews)) (\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n)\nreturn (dbNews.modificaNews (Pnews));\n) Catch (SQLException e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\n)\n\n/ **\n* Method that returns an array containing all the news stored in the system.\n* Use the method (@ link unisa.gps.etour.repository.IDBNews # ottieniNews ()).\n*\n* @ Return ArrayList containing beans of news.\n* @ Throws RemoteException\n* /\n<BeanNews> ottieniAllNews public ArrayList () throws RemoteException\n(\n\nTRY\n(\nreturn (dbNews.ottieniNews ());\n) Catch (SQLException e) (\nthrow new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n)\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69428d"},"name":"IGestioneAdvertisementAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694295"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694299"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429a"}]],"contents":"\t\n/ **\n  * Interface that provides management services dell'advertisement\n  * Operator agency.\n  *\n  * @ Author author\n  * @ Version 0.1\n  *\n  * © 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npackage com.trapan.spg.control.GestioneAdvertisement;\n\nimport java.rmi.RemoteException;\nimport java.util.ArrayList;\n\nimport com.trapan.spg.bean.BeanNews;\n\npublic interface IGestioneAdvetisementAgenzia extends IGestioneAdvertisement\n(\n/ **\n* Method that inserts a new news system.\n*\n* @ Param Pnews Bean containing data news\n* @ Throws RemoteException\n* /\npublic boolean inserisciNews (BeanNews Pnews) throws RemoteException;\n/ **\n* Method which removes from the news system.\n*\n* @ Param ID pNewsID news be erased.\n* @ Throws RemoteException\n* /\npublic boolean cancellaNews (int pNewsID) throws RemoteException;\n/ **\n* Method amending the text of a news.\n*\n* @ Param Pnews Bean containing data news\n* @ Throws RemoteException\n* /\npublic boolean modificaNews (BeanNews Pnews) throws RemoteException;\n/ **\n* Returns the list of active news.\n*\n* @ Return ArrayList of ArrayList News\n* @ Throws RemoteException\n* /\n<BeanNews> ottieniAllNews public ArrayList () throws RemoteException;\n)"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69428e"},"name":"ControlloDatiAdvertisement.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694295"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694299"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429a"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bd"}]],"contents":"ï»¿/ **\n  * Class that contains static methods that perform\n  * Consistency checks on the data bean banner\n  * And news.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npackage com.trapan.spg.control.GestioneAdvertisement;\n\nimport java.util.Date;\n\nimport com.trapan.spg.bean.BeanBanner;\nimport com.trapan.spg.bean.BeanNews;\n\npublic class ControlloDatiAdvertisement\n(\n/ **\n* Please formal control and consistency on\n* Data content of the banner in the bean passed by parameter.\n* @ Param pBanner bean contains the data of the banner.\n* @ Return\n* /\npublic static boolean controlloBanner (BeanBanner pBanner) (\ntoReturn boolean = false;\n\nif (pBanner = null) (\ntoReturn = (pBanner.getId ()> 0 & & & & pBanner.getPercorsoFile ()!=\"\"\npBanner.getIdPuntoDiRistoro ()> 0);\n)\n\ntoReturn return;\n)\n/ **\n* Method that performs consistency checks and\n* Correctness of the information contained in the bean past\n* Per parameter, in particular check that the dates\n* Publication and expiration of the news are consistent,\n* Or that the second is the later.\n*\n* @ Param Pnews bean containing data news\n* @ Return Returns true if the bean contains consistent data\n* /\npublic static boolean controlloNews (BeanNews Pnews) (\ntoReturn boolean = false;\n\n/ * Check the validity of the general method parameter * /\nif (Pnews = null) (\n\nDate dataPubb = pNews.getDataPubblicazione () / / Released\nDate dataScad = pNews.getDataScadenza () / / Due Date\nPNews.getNews String news = (), / / Text of News\n\n/ * Checking the invalidity of the fields * /\nif (dataPubb! dataScad = null & &! = null & & news = null) (\n/ * Check the consistency of the dates * /\ntoReturn = dataPubb.before (dataScad);\n\n/ * Check that the text is not empty * /\ntoReturn = toReturn & & (news! = \"\");\n\n/ * Check that the ID is greater than 0 * /\ntoReturn = toReturn & & (pNews.getId ()> 0);\n\n/ * Check the priority value * /\n)\n\n)\n\ntoReturn return;\n\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69428f"},"name":"CostantiGlobali.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}]],"contents":"ï»¿package unisa.gps.etour.util;\n\nimport java.io.File;\n\n/ **\n  * Class that contains the constants of the environmental system.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npublic class CostantiGlobali\n(\n/ ** Highest precedence of news. * /\npublic static final int MAX_PRIORITY_NEWS = 5;\n/ ** Priority least one news. * /\npublic static final int MIN_PRIORITY_NEWS = 1;\n/ ** Maximum number of news on the machine. * /\npublic static final int MAX_NEWS_ATTIVE = 10;\n/ ** Path to directory containing the images\n* Banners stored on the server. * /\npublic static final String SERVER_IMAGE_PATH = \"c:\"\nFile.separator + + \"ImmaginiBanner\" + file.separator;\n/ ** URL of the server for RMI calls * /\npublic static final String server_url = \"localhost /\";\n/ ** Milliseconds of 30 days * /\npublic static final long TRENTA_GIORNI = 2592000000L;\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694290"},"name":"Banner.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694285"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694293"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694294"}]],"contents":"package unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt .*;\nimport java.awt.event .*;\nimport java.io.FileNotFoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport javax.swing .*;\nimport java.util .*;\nimport javax.swing.tree .*;\nimport javax.swing.border .*;\nimport unisa.gps.etour.gui.operatoreagenzia.BannerDialog;\nimport unisa.gps.etour.gui.operatoreagenzia.Home;\nimport unisa.gps.etour.gui.operatoreagenzia.TagPanel;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.BannerNode;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.PRNode;\nimport unisa.gps.etour.bean.BeanBanner;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.control.GestioneAdvertisement.IGestioneAdvertisementAgenzia;\nimport unisa.gps.etour.control.GestionePuntiDiRistoro.IGestionePuntiDiRistoroAgenzia;\nimport unisa.gps.etour.control.GestioneTag.IGestioneTagComune;\nimport unisa.gps.etour.gui.DeskManager;\nimport unisa.gps.etour.gui.HelpManager;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.BannerRenderer;\n\npublic class JInternalFrame extends Banner\n(\n\nprivate JPanel jContentPane = null;\nprivate JPanel rightPanel = null;\nPrivate JToolBar bannerToolbar = null;\nprivate JButton btnInserisci = null;\nprivate JButton btnSostituisci = null;\nprivate JButton btnElimina = null;\nprivate JScrollPane JScrollPane = null;\nprivate JPanel helpPanel = null;\nprivate JTextPane textGuida = null;\nPrivate TagPanel panelTag = null;\nprivate JButton btnRicerca = null;\nprivate JButton btnAzzera = null;\nprivate JPanel panelSearch = null;\nprivate JTextField nomePR = null;\nprivate JTree treeBanner = null;\nPrivate JDesktopPane JDesktopPane;\nPrivate HelpManager bannerHelp;\nprotected DeskManager desktopManager;\nprotected IGestionePuntiDiRistoroAgenzia gestionePuntiRistoro;\nprotected IGestioneAdvertisementAgenzia gestioneBanner;\nprotected IGestioneTagComune tags;\n\n/ **\n* This &grave; the default constructor.\n* /\npublic Banner ()\n(\nsuper ( \"Banner\");\nresizable = true;\nclosable = true;\niconable = true;\nmaximizable = true;\nsetPreferredSize (Home.CHILD_SIZE);\nframeIcon = new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"banner2.png\"));\n\n/ / Setting up dell'help manager for cultural.\n\ntextGuida = new JTextPane ();\n\nTRY\n(\nbannerHelp = new HelpManager (Home.URL_HELP + \"Banner.txt\"\ntextGuida);\n)\ncatch (FileNotFoundException e)\n(\ntextGuida\n. setText ( \"<html> <b> Help not available </ b> </ html>\");\n)\n\nsetContentPane (getJContentPane ());\naddInternalFrameListener (new InternalFrameAdapter ()\n(\n/ *\n* Inclusion of the frame on the desktop retrieves the bread\n* Link to the desktop pane.\n* /\n\npublic void internalFrameOpened (InternalFrameEvent pEvent)\n(\nPEvent.getInternalFrame JInternalFrame frame = ();\nJDesktopPane frame.getDesktopPane = ();\ndesktopManager = (DeskManager) jDesktopPane.getDesktopManager ();\n\n/ / Setting up of remote objects for the management of cultural heritage.\nTRY\n(\nRegistry reg = LocateRegistry.getRegistry (Home.HOST);\ngestioneBanner =\n(IGestioneAdvertisementAgenzia) reg.lookup (GestioneBeniCulturaliAgenzia \");\ntag =\n(IGestioneTagComune) reg.lookup (GestioneTagComune \");\ngestionePuntiRistoro =\n(IGestionePuntiDiRistoroAgenzia) reg.lookup (GestionePuntiDiRistoroAgenzia \");\n\n/ / Load data.\ncreateTree ();\ncaricaTags ();\n)\n/ *\n* Two exceptions: RemoteException and NotBoundException. The\n* Result is the same. The management is not operable and\n* After the error message window closes.\n* /\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> The dialog management request is closed. </ U> </ h3>\"\n+ \"<p> <b> Possible Causes: </ b>\"\n+ \"<ul> <li> No connection to the network. </ Li>\"\n+ \"Server <li> inactive. </ Li>\"\n+ \"Server <li> clogged. </ Li> </ ul>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\nframe.dispose ();\n)\n)\n));\n)\n\n/ **\n* This method initializes the content pane.\n*\n* @ Return javax.swing.JPanel - the content pane.\n* /\nprivate JPanel getJContentPane ()\n(\nif (null == jContentPane)\n(\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (getRightPanel (), BorderLayout.EAST);\njContentPane.add (getBannerToolbar (), BorderLayout.NORTH);\njContentPane.add (getTreeBanner (), BorderLayout.CENTER);\n)\njContentPane return;\n)\n\n/ **\n* This method initializes the toolbar to the functions of management\n* Banner.\n*\n* @ Return javax.swing.JToolBar - the toolbar.\n* /\nPrivate JToolBar getBannerToolbar ()\n(\nif (null == bannerToolbar)\n(\nbannerToolbar JToolBar = new ();\nbannerToolbar.setLayout (null);\nbannerToolbar.setPreferredSize (new Dimension (1, 50));\nbannerToolbar.setFloatable (false);\nbannerToolbar.add (getBtnInserisci ());\nbannerToolbar.add (getBtnSostituisci ());\nbannerToolbar.add (getBtnElimina ());\n)\nbannerToolbar return;\n)\n\n/ **\n* This method initializes the button to insert a banner.\n*\n* @ Return javax.swing.JButton - the button for the insertion.\n* /\nprivate JButton getBtnInserisci ()\n(\nif (null == btnInserisci)\n(\nbtnInserisci = new JButton ();\nbtnInserisci.setBounds (5, 5, 140, 40);\nbtnInserisci.setText ( \"<html> <br> Show Banner </ html>\");\nbtnInserisci.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"NuovoBanner32.png \")));\nbtnInserisci.setEnabled (false);\nbtnInserisci.setName (btnInserisci \");\nbtnInserisci.addMouseListener (bannerHelp);\nbtnInserisci.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nDefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) treeBanner\n. getSelectionPath (). getLastPathComponent ();\nOpenDialog (selectedNode);\n)\n\n));\n)\nbtnInserisci return;\n)\n\n/ **\n* This method initializes the button for editing a banner.\n*\n* @ Return javax.swing.JButton - the button for the change.\n* /\nprivate JButton getBtnSostituisci ()\n(\nif (null == btnSostituisci)\n(\nbtnSostituisci = new JButton ();\nbtnSostituisci.setBounds (155, 5, 140, 40);\nbtnSostituisci.setText ( \"Replace <html> <br> Banner </ html>\");\nbtnSostituisci.setEnabled (false);\nbtnSostituisci.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"SostituisciBanner32.png \")));\nbtnSostituisci.setName (btnSostituisci \");\nbtnSostituisci.addMouseListener (bannerHelp);\nbtnSostituisci.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nDefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) treeBanner\n. getSelectionPath (). getLastPathComponent ();\nOpenDialog (selectedNode);\n)\n\n));\n)\nbtnSostituisci return;\n)\n\n/ **\n* This method initializes the delete button for a banner.\n*\n* @ Return javax.swing.JButton - the delete button for.\n* /\nprivate JButton getBtnElimina ()\n(\nif (null == btnElimina)\n(\nbtnElimina = new JButton ();\nbtnElimina.setBounds (305, 5, 140, 40);\nbtnElimina.setText ( \"Delete <html> <br> Banner </ html>\");\nbtnElimina.setEnabled (false);\nbtnElimina.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"EliminaBanner32.png \")));\nbtnElimina.setName (btnElimina \");\nbtnElimina.addMouseListener (bannerHelp);\nbtnElimina.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to delete the banner selected?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"The banner can not be more recovered.\"\nSwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Delete\", \"Cancel\");\nint choice = JOptionPane.showInternalOptionDialog (\njContentPane, root, \"Confirm Delete\",\nJOptionPane.YES_NO_OPTION,\nJOptionPane.QUESTION_MESSAGE, new ImageIcon (\ngetClass (). getResource (\nHome.URL_IMAGES\n+ \"EliminaBanner48.png\")),\noptions, options [1]);\nif (choice == JOptionPane.YES_OPTION)\n(\nDefaultTreeModel model = (DefaultTreeModel) treeBanner\n. getModel ();\nmodel\n. removeNodeFromParent ((DefaultMutableTreeNode) treeBanner\n. getSelectionPath ()\n. getLastPathComponent ());\nJLabel confirm = new JLabel ( \"The banner selected\"\n+ \"Was deleted.\");\nconfirm.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJOptionPane.showInternalMessageDialog (jContentPane,\nconfirm, \"Banner out!\"\nJOptionPane.OK_OPTION, new ImageIcon (getClass ()\n. getResource (\nHome.URL_IMAGES + \"ok32.png \")));\n)\n\n)\n\n));\n)\nbtnElimina return;\n)\n\n/ **\n* This method creates the tree starting from the information contained in the two\n* ArrayList of bean.\n*\n* @ Param ArrayList PPR <BeanPuntoDiRistoro> - the array of places to eat.\n* @ Param pBanner ArrayList <BeanBanner> - the array of banners associated.\n* /\nprivate void createTree ()\n(\n/ / Create the root\nDefaultMutableTreeNode root = new DefaultMutableTreeNode ( \"eTour\");\n\n/ / For each refreshment dell'arraylist calls the method get\n/ / Banner.\nTRY\n(\nArrayList <BeanPuntoDiRistoro> PPR =\ngestionePuntiRistoro.ottieniPuntiDiRistoro ();\nfor (int i = 0; i <pPR.size (); i + +)\n(\nBeanPuntoDiRistoro current = pPR.get (i);\nint id = corrente.getId ();\nPRNode puntoDiRistoro = new PRNode (corrente.getNome (), id);\nHashMap <BeanBanner, ImageIcon> banner = gestioneBanner.ottieniBannersDaID (id);\nIterator <BeanBanner> iteraBanner = banner.keySet (). Iterator ();\nwhile (iteraBanner.hasNext ())\n(\nBeanBanner bannercorrente = iteraBanner.next ();\nBannerNode nuovoBanner = new BannerNode (banner\n. get (bannercorrente) bannercorrente.getId ());\npuntoDiRistoro.add (nuovoBanner);\n)\n\nroot.add (puntoDiRistoro);\n)\n)\ncatch (RemoteException ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ <h3> <u> The list of banners was not loaded. </ U> </ h3> \"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showInternalMessageDialog (this, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\n)\nfinally\n(\ntreeBanner.setModel (new DefaultTreeModel (root));\n)\n\n)\n\n/ **\n* This method initializes the tree where it displays the banner.\n*\n* @ Return javax.swing.JTree\n* /\nprivate JScrollPane getTreeBanner ()\n(\n\nif (null == treeBanner)\n(\ntreeBanner = new JTree (new DefaultTreeModel (new DefaultMutableTreeNode ( \"\"))); eTour\ntreeBanner.setScrollsOnExpand (true);\ntreeBanner.setAutoscrolls (true);\ntreeBanner.setScrollsOnExpand (true);\ntreeBanner.getSelectionModel (). setSelectionMode (\nTreeSelectionModel.SINGLE_TREE_SELECTION);\ntreeBanner.setName (treeBanner \");\ntreeBanner.addMouseListener (bannerHelp);\ntreeBanner.setRootVisible (false);\ntreeBanner.setCellRenderer (new BannerRenderer ());\ntreeBanner.addTreeSelectionListener (new TreeSelectionListener ()\n(\npublic void ValueChanged (TreeSelectionEvent s)\n(\nDefaultMutableTreeNode node = (DefaultMutableTreeNode) treeBanner\n. getLastSelectedPathComponent ();\n\nif (node instanceof PRNode)\n(\nbtnInserisci.setEnabled (true);\nbtnElimina.setEnabled (false);\nbtnSostituisci.setEnabled (false);\n)\nelse if (node instanceof BannerNode)\n(\nbtnInserisci.setEnabled (false);\nbtnSostituisci.setEnabled (true);\nbtnElimina.setEnabled (true);\n)\nelse\n(\nbtnInserisci.setEnabled (false);\nbtnSostituisci.setEnabled (false);\nbtnElimina.setEnabled (false);\n)\n\n)\n));\n\n)\nJScrollPane = new JScrollPane (treeBanner);\nJScrollPane\n. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\nJScrollPane return;\n)\n\n/ **\n* This method initializes the right side panel.\n*\n* @ Return javax.swing.JPanel - the right panel.\n* /\nprivate JPanel getRightPanel ()\n(\nif (null == rightPanel)\n(\nrightPanel = new JPanel ();\nrightPanel.setLayout (new GridBagLayout ());\nGridBagConstraints g = new GridBagConstraints ();\ng.gridx = 0;\ng.gridy = 0;\ng.fill = GridBagConstraints.BOTH;\ng.weighty = 0.7;\nrightPanel.add (getSearchPanel (), g);\ng.gridy + +;\ng.weighty = 0.3;\nrightPanel.add (getHelpPanel (), g);\n)\nrightPanel return;\n)\n\n/ **\n* This method initializes the panel that contains the online help.\n*\n* @ Return javax.swing.JPanel - the panel for the guide.\n* /\nprivate JPanel getHelpPanel ()\n(\nif (null == helpPanel)\n(\nhelpPanel = new JPanel ();\nhelpPanel.setLayout (new BorderLayout ());\nhelpPanel.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3),\n\"Help\", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\nhelpPanel.setPreferredSize (new Dimension (200, 60));\ntextGuida.setPreferredSize (new Dimension (6, 30));\ntextGuida.setOpaque (false);\ntextGuida.setContentType ( \"text / html\");\ntextGuida.setText ( \"<html> Move your mouse pointer over a control\" +\n\"of interest to display the context-sensitive help. </ html>\");\ntextGuida.setEditable (false);\ntextGuida.setName (textGuida \");\ntextGuida.addMouseListener (bannerHelp);\nhelpPanel.add (textGuida, BorderLayout.CENTER);\n)\nhelpPanel return;\n)\n\n/ **\n* This method initializes the panel for the detection of points\n* Refreshments.\n*\n* @ Return javax.swing.JPanel - the panel for research.\n* /\nprivate JPanel getSearchPanel ()\n(\nif (null == panelSearch)\n(\npanelSearch = new JPanel ();\npanelSearch.setLayout (new GridBagLayout ());\npanelSearch.setBorder (BorderFactory.createTitledBorder (\nBorderFactory.createLineBorder (new Color (51, 102, 255), 3),\nResearch Refreshment \"\nTitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\nGridBagConstraints g = new GridBagConstraints ();\ng.anchor = GridBagConstraints.CENTER;\ng.gridx = 0;\ng.gridy = 0;\ng.gridwidth = 2;\ng.insets = new Insets (5, 5, 5, 5);\npanelSearch.add (new JLabel ( \"Name Refreshments:\"), g);\nnomePR = new JTextField ();\nnomePR.setName (nomePR \");\nnomePR.addMouseListener (bannerHelp);\nnomePR.setColumns (12);\ng.insets = new Insets (5, 5, 10, 5);\ng.gridy + +;\npanelSearch.add (nomePR, g);\ng.insets = new Insets (5, 5, 5, 5);\ng.gridy + +;\npanelSearch.add (new JLabel ( \"Select search tags:\"), g);\ng.weighty = 1.0;\ng.insets = new Insets (5, 5, 10, 5);\ng.gridy + +;\npanelTag = new TagPanel ();\npanelTag.setName (pannelloTag \");\npanelTag.addMouseListener (bannerHelp);\npanelTag.setPreferredSize (new Dimension (180, 10));\ng.fill = GridBagConstraints.VERTICAL;\npanelSearch.add (panelTag, g);\ng.fill = GridBagConstraints.NONE;\ng.insets = new Insets (5, 5, 5, 5);\ng.weighty = 0;\ng.gridy + +;\ng.gridwidth = 1;\npanelSearch.add (getBtnRicerca (), g);\ng.gridx + +;\npanelSearch.add (getBtnAzzera (), g);\n)\npanelSearch return;\n)\n\n/ **\n* This method initializes the button for the submission of the form\n* Search for a refreshment.\n*\n* @ Return javax.swing.JButton - the search button.\n* /\nprivate JButton getBtnRicerca ()\n(\nif (null == btnRicerca)\n(\nbtnRicerca = new JButton ();\nbtnRicerca.setPreferredSize (new Dimension (98, 26));\nbtnRicerca.setText ( \"Search\");\nbtnRicerca.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Ricerca16.png \")));\nbtnRicerca.setName (btnRicerca \");\nbtnRicerca.addMouseListener (bannerHelp);\n)\nbtnRicerca return;\n)\n\n/ **\n* This method initializes the button to reset the fields of\n* Search Form for a refreshment.\n*\n* @ Return javax.swing.JButton - the Reset button.\n* /\nprivate JButton getBtnAzzera ()\n(\nif (null == btnAzzera)\n(\nbtnAzzera = new JButton ();\nbtnAzzera.setPreferredSize (new Dimension (98, 26));\nbtnAzzera.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Azzera16.png \")));\nbtnAzzera.setText ( \"Clear\");\nbtnAzzera.setHorizontalTextPosition (SwingConstants.LEADING);\nbtnAzzera.setName (btnAzzera \");\nbtnAzzera.addMouseListener (bannerHelp);\nbtnAzzera.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\npanelTag.azzera ();\nnomePR.setText (\"\");\n)\n\n));\n)\nbtnAzzera return;\n)\n\n/ **\n* This method opens the dialog box for entering a new\n* Banner or editing a banner selected.\n*\n* @ Param pSelectedNode DefaultMutableTreeNode - the selected node.\n* /\nprivate void OpenDialog (DefaultMutableTreeNode pSelectedNode)\n(\n/ / This class intercepts mouse events and then\n/ / Makes the frame below blocked.\nclass ModalAdapter extends InternalFrameAdapter\n(\nComponent glass;\n\npublic ModalAdapter (Component pGlassComponent)\n(\nthis.glass = pGlassComponent;\n\nMouseInputAdapter adapter = new MouseInputAdapter ()\n(\n);\npGlassComponent.addMouseListener (adapter);\npGlassComponent.addMouseMotionListener (adapter);\n)\n\npublic void internalFrameClosed (InternalFrameEvent s)\n(\nglass.setVisible (false);\n)\n)\n\n/ / Construction of the dialog\nJOptionPane optionPane = new JOptionPane ();\nfinal JInternalFrame modal = optionPane.createInternalFrame (\nJDesktopPane, \"\");\nfinal JPanel glass = new JPanel ();\nBannerDialog final BannerDialog dialog = new ();\noptionPane.setMessage (dialogue);\noptionPane.setMessageType (JOptionPane.INFORMATION_MESSAGE);\nJButton [] options = new JButton [2];\noptions [0] = new JButton ();\noptions [1] = new JButton ( \"Cancel\");\noptions [0]. setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Salva16.png \")));\noptions [1]. setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Annulla16.png \")));\noptionPane.setOptions (options);\noptions [1]. addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent arg0)\n(\nmodal.setVisible (false);\nglass.setVisible (false);\n)\n));\n\nglass.setOpaque (false);\nmodal.addInternalFrameListener (new ModalAdapter (glass));\nglass.add (modal);\nsetGlassPane (glass);\nmodal.setLocation (this.getWidth () / 2, this.getHeight () / 2);\nglass.setVisible (true);\nmodal.setVisible (true);\nif (pSelectedNode instanceof BannerNode) / / Replace\n(\nfinal BannerNode banner = (BannerNode) pSelectedNode;\noptions [0]. setText ( \"Replace\");\noptions [0]. addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nDefaultTreeModel model = (DefaultTreeModel) treeBanner\n. getModel ();\nbanner.setBanner (dialogo.getSelectedBanner ());\nmodel.nodeChanged (banner);\nglass.setVisible (false);\nmodal.setVisible (false);\n)\n\n));\n\noptionPane.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"SostituisciBanner48.png \")));\nmodal.setTitle ( \"Replace the banner to the point of relief\"\n+ ((PRNode) pSelectedNode.getParent ()). GetUserObject ()\n. toString ());\n)\nelse if (pSelectedNode instanceof PRNode) / / Inserting\n(\nPRNode final pr = (PRNode) pSelectedNode;\noptions [0]. setText ( \"Save\");\noptions [0]. addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nDefaultTreeModel model = (DefaultTreeModel) treeBanner\n. getModel ();\nBannerNode new = new BannerNode (dialogue\n. getSelectedBanner (), pr.getID ());\nmodel.insertNodeInto (new, pr, 0);\nglass.setVisible (false);\nmodal.setVisible (false);\n)\n\n));\noptionPane.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"nuovoBanner48.png \")));\nmodal.setTitle ( \"Enter banner to the point of relief\"\nPSelectedNode.getUserObject + (). ToString ());\n)\n\n)\n\nprivate void caricaTags ()\n(\nArrayList <BeanTag> beanTags = null;\nTRY\n(\nbeanTags = tag.ottieniTags ();\n)\n/ / If an error displays an error message.\ncatch (RemoteException e)\n(\n)\nfinally\n(\nfor (BeanTag b: beanTags)\n(\npanelTag.insertTag (b);\n)\npanelTag.repaint ();\n)\n\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df694292"},"name":"MessaggiErrore.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694291"}]],"contents":"ï»¿package unisa.gps.etour.util;\n\n/ **\n  * Standard error message self-describing\n  *\n  * @ Author Michelangelo De Simone\n  * @ Version 0.1\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npublic class MessaggiErrore\n(\n/ / Occurs when connecting to the DBMS\npublic static final String ERRORE_CONNESSIONE_DBMS = \"Connection to DBMS Failed\";\n\n/ / Occurs when you can not perform an operation on the DBMS\npublic static final String ERRORE_DBMS = \"Error DBMS;\n\n/ / It occurs in conditions not specified\npublic static final String ERRORE_SCONOSCIUTO = \"Unknown error\";\n\n/ / Occurs when there are format errors in a bean\npublic static final String ERRORE_FORMATO_BEAN = \"Error data bean;\n\n/ / Occurs when a data error\npublic static final String ERRORE_DATI = \"Data Error\";\n\n/ / Occurs when an error occurs on read / write files\npublic static final String ERRORE_FILE = \"Error reading / writing file\";\n\n/ / Occurs when you have reached the maximum number of banners displayed\npublic static final String ERRORE_NUM_BANNER = \"count exceeded banner inserted\";\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694296"},"name":"IDBNews.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694295"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694299"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429a"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanNews;\n\n/ **\n  * Interface for the management of news in the Database\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBNews\n(\n/ **\n* Add a news database\n*\n* @ Param Pnews News to add\n* @ Throws SQLException\n* /\npublic boolean inserisciNews (BeanNews Pnews) throws SQLException;\n\n/ **\n* Modify a news database\n*\n* @ Param Pnews News to change with the new data\n* @ Throws SQLException\n* @ Return True if there 'was a modified false otherwise\n* /\npublic boolean modificaNews (BeanNews Pnews) throws SQLException;\n\n/ **\n* Delete a database from news\n*\n* @ Param ID pIdNews News to eliminate\n* @ Throws SQLException\n* @ Return True if and 'have been deleted false otherwise\n* /\npublic boolean cancellaNews (int pIdNews) throws SQLException;\n\n/ **\n* Returns the active news\n*\n* @ Throws SQLException\n* @ Return list of active news\n* /\n<BeanNews> ottieniNews public ArrayList () throws SQLException;\n)"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694297"},"name":"News.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694295"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429a"}]],"contents":"ï»¿package unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt .*;\nimport java.awt.event .*;\nimport java.io.FileNotFoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport javax.swing .*;\nimport java.util .*;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Document;\nimport javax.swing.border .*;\nimport unisa.gps.etour.bean.BeanNews;\nimport unisa.gps.etour.control.GestioneAdvertisement.IGestioneAdvertisementAgenzia;\nimport unisa.gps.etour.gui.DeskManager;\nimport unisa.gps.etour.gui.HelpManager;\nimport unisa.gps.etour.gui.operatoreagenzia.document.LimitedDocument;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.NewsTableModel;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.PrioritaRenderer;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.ScrollableTable;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.TestoNewsRenderer;\nimport unisa.gps.etour.util.Data;\n\n/ **\n  * This class implements the interface for collecting news for the actor\n  * Operator Agency.\n  *\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class News extends JInternalFrame\n(\nprivate JPanel jContentPane = null;\nPrivate JToolBar NewsToolbar = null;\nprivate JButton btnEliminaN = null;\nprivate JPanel rightPanel = null;\nprivate JPanel formNews = null;\nPrivate JSlider prSlider = null;\nprivate JButton btnInsertModify = null;\nprivate JButton btnReset = null;\nprivate JPanel panelHelp = null;\nprivate JTextPane textGuida = null;\nprivate JScrollPane scrollTableNews = null;\nprivate JTable tableNews = null;\nprivate JTextArea testoNews = null;\nprivate JComboBox durataNews = null;\nprivate JButton btnModificaN = null;\nprivate JLabel labelCaratteri;\nprivate int idNews = -1;\nprivate NewsTableModel TableModel;\nPrivate HelpManager newsHelp;\nprotected DeskManager desktopManager;\nprotected JDesktopPane JDesktopPane;\nPrivate IGestioneAdvertisementAgenzia gestioneNews;\n\n/ **\n* This is the default constructor.\n* /\npublic News ()\n(\nsuper ( \"News\");\nsetPreferredSize (Home.CHILD_SIZE);\nsetMinimumSize (new Dimension (600, 480));\nsetResizable (true);\nsetFrameIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"News32.png \")));\nsetIconifiable (true);\nsetMaximizable (true);\nsetClosable (true);\n\n/ / Setting up dell'help manager to manage the news.\ntextGuida = new JTextPane ();\nTRY\n(\nnewsHelp = new HelpManager (Home.URL_HELP + \"news.txt\" textGuida);\n)\ncatch (FileNotFoundException e)\n(\ntextGuida\n. setText ( \"<html> <b> Help not available </ b> </ html>\");\n)\n\nsetContentPane (getJContentPane ());\n\naddInternalFrameListener (new InternalFrameAdapter ()\n(\n\n/ *\n* Inclusion of the frame on the desktop desktop retrieves bread bread\n* And desktop manager and initializes the remote objects\n* Management of cultural heritage.\n* /\n\npublic void internalFrameOpened (InternalFrameEvent pEvent)\n(\nPEvent.getInternalFrame JInternalFrame frame = ();\nJDesktopPane frame.getDesktopPane = ();\ndesktopManager = (DeskManager) jDesktopPane.getDesktopManager ();\n\n/ / Setting up objects for remote asset management\n/ / Cultural.\nTRY\n(\nRegistry reg = LocateRegistry.getRegistry (Home.HOST);\ngestioneNews = (IGestioneAdvertisementAgenzia) reg\n. lookup ( \"GestioneAdvertisementAgenzia\");\n\n/ / Load data.\ncaricaTabella ();\n)\n/ *\n* Two exceptions: RemoteException and NotBoundException. The\n* Result is the same. The management is not operable and\n* After the error message window closes.\n* /\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> The dialog management request is closed. </ U> </ h3>\"\n+ \"<p> <b> Possible Causes: </ b>\"\n+ \"<ul> <li> No connection to the network. </ Li>\"\n+ \"Server <li> inactive. </ Li>\"\n+ \"Server <li> clogged. </ Li> </ ul>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\nframe.dispose ();\n)\n)\n));\n)\n\n/ **\n* Initialize the content pane of the frame inside.\n*\n* @ Return javax.swing.JPanel - the content pane.\n* /\nprivate JPanel getJContentPane ()\n(\nif (null == jContentPane)\n(\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (getNewsToolbar (), BorderLayout.NORTH);\njContentPane.add (getRightPanel (), BorderLayout.EAST);\njContentPane.add (getTableNews (), BorderLayout.CENTER);\n)\njContentPane return;\n)\n\n/ **\n* This method initializes the toolbar to manage the news.\n*\n* @ Return javax.swing.JToolBar - the toolbar management news.\n* /\nPrivate JToolBar getNewsToolbar ()\n(\nif (null == NewsToolbar)\n(\nNewsToolbar JToolBar = new ();\nNewsToolbar.setFloatable (false);\nNewsToolbar.add (getBtnModificaN ());\nNewsToolbar.addSeparator ();\nNewsToolbar.add (getBtnEliminaN ());\n)\nNewsToolbar return;\n)\n\n/ **\n* This method initializes the button to edit a news.\n*\n* @ Return javax.swing.JButton - button to change.\n* /\nprivate JButton getBtnModificaN ()\n(\nif (null == btnModificaN)\n(\nbtnModificaN = new JButton ();\nbtnModificaN.setText ( \"Edit News\");\nbtnModificaN.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"ModificaNews32.png \")));\nbtnModificaN.setCursor (Cursor\n. getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnModificaN.setName (btnModifica \");\nbtnModificaN.addMouseListener (newsHelp);\nbtnModificaN.setEnabled (false);\nbtnModificaN.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pActionEvent)\n(\nint selectedRow = tableNews.getSelectedRow ();\nif (idNews == -1) / / In this way I know if she was\n/ / Edit\n(\nbtnInsertModify.setText ( \"Change\");\nbtnInsertModify.setIcon (new ImageIcon (getClass ()\n. getResource (Home.URL_IMAGES + \"Salva16.png \")));\nbtnReset.setText ( \"Cancel\");\nbtnReset.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Annulla16.png \")));\nformNews.setBorder (BorderFactory.createTitledBorder (\nBorderFactory.createLineBorder (new Color (51,\n102, 255), 3), \"Edit News\"\nTitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font (\n\"Dialog\", Font.BOLD, 12), new Color (0,\n102, 204)));\n)\nString text = (String) tableModel.getValueAt (selectedRow,\n0);\nnumCaratteri int = 200 - testo.length () + 1;\nlabelCaratteri.setText ( \"# Characters:\" + numCaratteri);\nDocument testoNews.getDocument doctest = ();\nTRY\n(\ndocTesto.remove (0, docTesto.getLength ());\ndocTesto.insertString (0, text, null);\n)\ncatch (BadLocationException s)\n(\ne.printStackTrace ();\n)\nExpiry date = (Date) TableModel\n. getValueAt (selectedRow, 3);\ndurataNews.setSelectedIndex (Data.getNumDays (expires));\nidNews = tableModel.getID (selectedRow);\nprSlider.setValue ((Integer) tableModel.getValueAt (\nselectedRow, 1));\n)\n\n));\n)\nbtnModificaN return;\n)\n\n/ **\n* This method initializes the button to delete a news.\n*\n* @ Return javax.swing.JButton - the button for deletion.\n* /\nprivate JButton getBtnEliminaN ()\n(\nif (null == btnEliminaN)\n(\nbtnEliminaN = new JButton ();\nbtnEliminaN.setText ( \"Delete News\");\nbtnEliminaN.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"EliminaNews32.png \")));\nbtnEliminaN.setEnabled (false);\nbtnEliminaN.setCursor (Cursor\n. getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnEliminaN.setName (btnElimina \");\nbtnEliminaN.addMouseListener (newsHelp);\nbtnEliminaN.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\nint selectedRow = tableNews.getSelectedRow ();\n\n/ / Construction of the dialog for confirmation\n/ / Elimination\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to delete the selected news?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"The deleted data can not be filled again.\"\nSwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Delete\", \"Cancel\");\n\n/ / The dialog screen appears\nint choice = JOptionPane.showInternalOptionDialog (\njContentPane, root, \"Confirm Delete News\"\nJOptionPane.YES_NO_OPTION,\nJOptionPane.QUESTION_MESSAGE, new ImageIcon (\ngetClass (). getResource (\nHome.URL_IMAGES\n+ \"EliminaNews48.png\")),\noptions, options [1]);\n\n/ / If you chose to confirm the deletion\nif (choice == JOptionPane.YES_OPTION)\n(\nTRY\n(\ngestioneNews.cancellaNews (TableModel\n. getID (selectedRow));\ntableModel.removeNews (selectedRow);\nJOptionPane\n. showInternalMessageDialog (\njContentPane,\n\"The news has been selected successfully deleted\"\n\"News out!\"\nJOptionPane.OK_OPTION,\nnew ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES\n+ \"Ok48.png \")));\nazzeraForm ();\n)\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> Delete operation request can not be completed. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass ()\n. getResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\n)\n)\n)\n));\n)\nbtnEliminaN return;\n)\n\n/ **\n* This method initializes the panel that realizes the interface side\n* Right of news management.\n*\n* @ Return javax.swing.JPanel - the right panel.\n* /\nprivate JPanel getRightPanel ()\n(\nif (null == rightPanel)\n(\nrightPanel = new JPanel ();\nrightPanel.setLayout (new GridBagLayout ());\nGridBagConstraints g = new GridBagConstraints ();\ng.fill = GridBagConstraints.BOTH;\ng.gridx = 0;\ng.gridy = 0;\ng.weighty = 0.7;\nrightPanel.add (getFormNews (), g);\ng.weighty = 0.3;\ng.gridy = 1;\nrightPanel.add (getPanelHelp (), g);\n\n)\nrightPanel return;\n)\n\n/ **\n* This method initializes the form for entering and editing a\n* News.\n*\n* @ Return javax.swing.JPanel - the format\n* /\nprivate JPanel getFormNews ()\n(\nif (null == formNews)\n(\nformNews = new JPanel (new GridBagLayout ());\nformNews.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3),\n\"New News\", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\nGridBagConstraints g = new GridBagConstraints ();\ng.anchor = GridBagConstraints.CENTER;\ng.gridx = 0;\ng.gridy = 0;\ng.weighty = 0.1;\ng.gridwidth = 1;\ng.gridheight = 1;\ng.insets = new Insets (5, 5, 5, 5);\nformNews.add (new JLabel ( \"Text of the news:\"), g);\nlabelCaratteri = new JLabel ( \"# Characters: 200\");\ng.gridx = 1;\nformNews.add (labelCaratteri, g);\ng.gridx = 0;\ng.gridwidth = 2;\ng.gridy = 1;\ng.weighty = 0.3;\ng.fill = GridBagConstraints.VERTICAL;\nJScrollPane scrollTesto = new JScrollPane (getTestoNews ());\nscrollTesto\n. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\nformNews.add (scrollTesto, g);\ng.weighty = 0.1;\ng.gridy = 2;\ng.fill = GridBagConstraints.NONE;\nformNews.add (new JLabel ( \"Priority:\"), g);\ng.gridy = 3;\nformNews.add (getPrSlider (), g);\nNew JPanel = new JPanel (new FlowLayout ());\nnuovo.add (new JLabel ( \"Length of news :\"));\ndurataNews = new JComboBox ();\nfor (int i = 0; i <= 60; i + +)\n(\ndurataNews.addItem ( \"\" + i);\n)\ndurataNews.setSelectedIndex (0);\ndurataNews.setEditable (false);\ndurataNews.setName ( \"duration\");\ndurataNews.addMouseListener (newsHelp);\nnuovo.add (durataNews);\nnuovo.add (new JLabel ( \"days\"));\ng.gridy = 4;\ng.fill = GridBagConstraints.HORIZONTAL;\nformNews.add (new, g);\ng.gridwidth = 1;\ng.gridy = 5;\nformNews.add (getBtnInsertModify (), g);\ng.gridx = 1;\nformNews.add (getBtnReset (), g);\n)\nformNews return;\n)\n\n/ **\n* This method initializes the slider to set the priority of a\n* News.\n*\n* @ Return javax.swing.JSlider - the slider with ticks from 1 to 5.\n* /\nPrivate JSlider getPrSlider ()\n(\nif (null == prSlider)\n(\nprSlider = new JSlider (JSlider.HORIZONTAL, 5, 1);\nprSlider.setMinimum (1);\nprSlider.setMaximum (5);\nprSlider.setMajorTickSpacing (1);\nprSlider.setLabelTable (prSlider.createStandardLabels (1));\nprSlider.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nprSlider.setName ( \"priority\");\nprSlider.addMouseListener (newsHelp);\nprSlider.setPaintLabels (true);\nprSlider.setPaintTicks (true);\nprSlider.setPaintTicks (true);\nprSlider.setSnapToTicks (true);\n)\nprSlider return;\n)\n\n/ **\n* This method initializes the radio button for submission of the form\n* Insert / edit.\n*\n* @ Return javax.swing.JButton - the button of submission of the form.\n* /\nprivate JButton getBtnInsertModify ()\n(\nif (null == btnInsertModify)\n(\nbtnInsertModify = new JButton ();\nbtnInsertModify.setText ( \"Insert\");\nbtnInsertModify.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"nuovaNews16.png \")));\nbtnInsertModify.setCursor (Cursor\n. getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnInsertModify.setName (btnInserisci \");\nbtnInsertModify.addMouseListener (newsHelp);\nbtnInsertModify.setFont (new Font ( \"Dialog\", Font.BOLD, 12));\nbtnInsertModify.setHorizontalTextPosition (SwingConstants.TRAILING);\nbtnInsertModify.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent pEvent)\n(\nif (testoNews.getText (). length () == 0)\n(\nJOptionPane.showInternalMessageDialog (jContentPane,\n\"The text of a news can not be empty!\"\n\"Error New News\", JOptionPane.ERROR_MESSAGE,\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"error32.png \")));\nreturn;\n)\nif (idNews! = -1) / / We're making a change\n(\n/ / Construction of the dialog for confirmation of\n/ / Edit\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Changing the selected news with\"\n+ \"New data?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"The previous data can not be more recovered.\"\nSwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Edit\", \"Cancel\");\n/ / The dialog screen appears\nint choice = JOptionPane\n. showInternalOptionDialog (\njContentPane,\nroot\n\"Confirmation Change News\"\nJOptionPane.YES_NO_OPTION,\nJOptionPane.QUESTION_MESSAGE,\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES\n+ \"ModificaNews48.png\")),\noptions, options [1]);\n/ / If you chose to confirm the change\nif (choice == JOptionPane.YES_OPTION)\n(\nTRY\n(\nDate expires = new Date ();\nscadenza.setDate (scadenza.getDate ()\nDurataNews.getSelectedIndex + ());\nBeanNews new = new BeanNews (testoNews\n. getText (), new Date (), expiration\nprSlider.getValue (), idNews);\ngestioneNews.modificaNews (new);\ntableModel.updateNews (new);\nJOptionPane\n. showInternalMessageDialog (\njContentPane,\n\"The news has been changed successfully selected.\"\n\"News changed!\"\nJOptionPane.OK_OPTION,\nnew ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES\n+ \"Ok48.png \")));\n)\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> Change operation request can not be completed. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES\n+ \"Error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane,\nerror, \"Error!\"\nJOptionPane.ERROR_MESSAGE, err);\n)\n)\n)\nelse\n/ / We are posting\n(\nDate expires = new Date ();\nscadenza.setDate (scadenza.getDate ()\nDurataNews.getSelectedIndex + ());\nBeanNews new = new BeanNews (testoNews.getText (),\nnew Date (), maturity, prSlider.getValue (), 33);\nTRY\n(\nboolean ok = gestioneNews.inserisciNews (new);\nif (ok)\n(\ncaricaTabella ();\ntableModel.insertNews (new);\nJOptionPane\n. showInternalMessageDialog (\njContentPane,\n\"The news is selected correctly inserted into the system.\"\n\"New news!\"\nJOptionPane.OK_OPTION,\nnew ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES\n+ \"NuovaNews48.png \")));\n)\n)\ncatch (RemoteException e)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> Insertion operation request can not be completed. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass ()\n. getResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (JDesktopPane, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\n)\n)\ntableModel.fireTableDataChanged ();\nazzeraForm ();\n)\n));\n\n)\nbtnInsertModify return;\n)\n\n/ **\n* This method initializes the button to clear the form or\n* Cancel editing actions on a selected news.\n*\n* @ Return javax.swing.JButton - the button above.\n* /\nprivate JButton getBtnReset ()\n(\nif (null == btnReset)\n(\nbtnReset = new JButton ();\nbtnReset.setText ( \"Clear\");\nbtnReset.setHorizontalTextPosition (SwingConstants.LEADING);\nbtnReset.setPreferredSize (new Dimension (103, 26));\nbtnReset.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"azzera16.png \")));\nbtnReset.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnReset.setName (btnAzzera \");\nbtnReset.addMouseListener (newsHelp);\nbtnReset.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent arg0)\n(\nazzeraForm ();\n)\n));\n)\nbtnReset return;\n)\n\n/ **\n* This method initializes the panel's online help.\n*\n* @ Return javax.swing.JPanel\n* /\nprivate JPanel getPanelHelp ()\n(\nif (null == panelHelp)\n(\npanelHelp = new JPanel ();\npanelHelp.setLayout (new BorderLayout ());\npanelHelp.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3),\n\"Help\", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\ntextGuida.setEditable (false);\ntextGuida.setContentType ( \"text / html\");\ntextGuida.setOpaque (false);\ntextGuida\n. setText ( \"<html> Move your mouse pointer over a control\"\n+ \"Of interest to display the context-sensitive help. </ Html>\");\ntextGuida.setName (textGuida \");\ntextGuida.addMouseListener (newsHelp);\npanelHelp.setPreferredSize(new Dimension(200, 100));\npanelHelp.add (textGuida, BorderLayout.CENTER);\n)\npanelHelp return;\n)\n\n/ **\n* This method initializes the table with all the news these\n* In the system.\n*\n* @ Return javax.swing.JTable\n* /\nprivate JScrollPane getTableNews ()\n(\nif (null == tableNews)\n(\nNewsTableModel = new TableModel ();\ntableNews = new ScrollableTable (TableModel);\ntableNews.setRowHeight (64);\ntableNews.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);\ntableNews.setSelectionBackground (new Color (0xe6, 0xe6, 0xFA));\ntableNews.setColumnSelectionAllowed (false);\nListSelectionModel selectionModel = tableNews.getSelectionModel ();\nselectionModel.addListSelectionListener (new ListSelectionListener ()\n(\npublic void ValueChanged (ListSelectionEvent event)\n(\nint selectedRow = tableNews.getSelectedRow ();\nbtnModificaN.setEnabled ((selectedRow! = -1)? true: false);\nbtnEliminaN.setEnabled ((selectedRow! = -1)? true: false);\n)\n));\ntableNews.addKeyListener (new KeyAdapter ()\n(\npublic void keyPressed (KeyEvent PKEY)\n(\nint keyCode = pKey.getKeyCode ();\nif (keyCode == KeyEvent.VK_ENTER)\n(\nbtnModificaN.doClick ();\n)\nelse if ((keyCode == KeyEvent.VK_CANCEL)\n| | (KeyCode == KeyEvent.VK_BACK_SPACE))\n(\nbtnEliminaN.doClick ();\n)\n)\n));\n\nscrollTableNews = new JScrollPane ();\nscrollTableNews.setViewportView (tableNews);\nscrollTableNews\n. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n)\nscrollTableNews return;\n)\n\n/ **\n* This method initializes the text area that contains the text of a news.\n*\n* @ Return javax.swing.JTextArea - the text area.\n* /\nprivate JTextArea getTestoNews ()\n(\nif (null == testoNews)\n(\ntestoNews = new JTextArea ();\ntestoNews.setWrapStyleWord (true);\ntestoNews.setLineWrap (true);\ntestoNews.setBorder (BorderFactory.createLoweredBevelBorder ());\ntestoNews.setColumns (18);\ntestoNews.setLineWrap (true);\ntestoNews.setRows (4);\ntestoNews.setDocument (new LimitedDocument (200));\ntestoNews.setName ( \"text\");\ntestoNews.addMouseListener (newsHelp);\ntestoNews.addKeyListener (new KeyAdapter ()\n(\npublic void keyTyped (KeyEvent pKeyEvent)\n(\nkeyChar pKeyEvent.getKeyChar = char ();\nif (Character.isDigit (keyChar)\n| | Character.isLetter (keyChar)\n| | Character.isWhitespace (keyChar))\n(\nint len = testoNews.getText (). length ();\nif (len! = 200)\n(\nlabelCaratteri\n. setText ( \"# Characters\"\n+ (200 - (testoNews.getText ()\n. length () + 1)));\n)\n)\n)\n\npublic void keyPressed (KeyEvent pKeyEvent)\n(\nint keyCode = pKeyEvent.getKeyCode ();\nif (keyCode == KeyEvent.VK_CANCEL\n| | KeyCode == KeyEvent.VK_BACK_SPACE)\n(\nint len = testoNews.getText (). length ();\nif (len! = 0)\n(\nlabelCaratteri.setText ( \"# Characters\"\n+ (200 - len + 1));\n)\n)\n)\n));\n\n)\ntestoNews return;\n)\n\n/ **\n* This method resets the form fields.\n* /\nprivate void azzeraForm ()\n(\nbtnInsertModify.setText ( \"Insert\");\nbtnReset.setText ( \"Clear\");\nbtnReset.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"azzera16.png \")));\nformNews.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3), \"New News\"\nTitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION,\nnew Font ( \"Dialog\", Font.BOLD, 12), new Color (0, 102, 204)));\ndurataNews.setSelectedIndex (0);\ntestoNews.setText (\"\");\ntableNews.clearSelection ();\nprSlider.setValue (1);\nlabelCaratteri.setText ( \"# Characters: 200\");\nidNews = -1;\n)\n\n/ **\n* This method imports the news downloaded from the server in the table.\n* /\nprivate void caricaTabella ()\n(\nArrayList <BeanNews> news = null;\nTRY\n(\ngestioneNews.ottieniAllNews news = ();\n)\n/ / If an error displays an error message.\ncatch (RemoteException e)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"The list of <h3> <u> News is not loaded. </ U> </ h3>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showInternalMessageDialog (this, error, \"Error!\"\nJOptionPane.ERROR_MESSAGE, err);\n)\nfinally\n(\nNewsTableModel = new TableModel (news);\ntableNews.setModel (TableModel);\n/ / Text of news\ntableNews.getColumnModel (). GetColumn (0). setPreferredWidth (320);\ntableNews.getColumnModel (). GetColumn (0). setCellRenderer (\nNew TestoNewsRenderer ());\n/ / Priority\ntableNews.getColumnModel (). GetColumn (1). setPreferredWidth (100);\ntableNews.getColumnModel (). GetColumn (1). setCellRenderer (\nNew PrioritaRenderer ());\n/ / Date of entry\ntableNews.getColumnModel (). GetColumn (2). setPreferredWidth (80);\n/ / End Date\ntableNews.getColumnModel (). GetColumn (3). setPreferredWidth (80);\n)\n\n)\n)"}
{"_id":{"$oid":"5ea8c53a6864fdc7df694298"},"name":"BeanNews.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694295"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df694299"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429a"}]],"contents":"ï»¿package unisa.gps.etour.bean;\n\n/ **\n  * Bean containing information relating to the News\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class BeanNews implements Serializable\n(\nprivate String news;\nprivate Date dataPubblicazione;\nprivate Date dataScadenza;\nprivate int priority;\nprivate int id;\nprivate static final long serialVersionUID =-6249491056436689386L;\n\n/ **\n* Parameterized constructor\n*\n* @ Param Pnews\n* @ Param pDataPubblicazione\n* @ Param pDataScadenza\n* @ Param pPriorita\n* @ Param pId\n* /\npublic BeanNews (String Pnews, Date pDataPubblicazione, Date pDataScadenza,\npPriorita int, int pid)\n(\nsetNews (Pnews);\nsetDataPubblicazione (pDataPubblicazione);\nsetDataScadenza (pDataScadenza);\nsetPriorita (pPriorita);\nsetId (PID);\n)\n\n/ **\n* Empty Constructor\n*\n* /\npublic BeanNews ()\n(\n\n)\n\n/ **\n* Returns the value of dataPubblicazione\n*\n* @ Return value dataPubblicazione.\n* /\npublic Date getDataPubblicazione ()\n(\ndataPubblicazione return;\n)\n\n/ **\n* Sets the new value of dataPubblicazione\n*\n* @ Param value pDataPubblicazione New dataPubblicazione.\n* /\npublic void setDataPubblicazione (Date pDataPubblicazione)\n(\ndataPubblicazione = pDataPubblicazione;\n)\n\n/ **\n* Returns the value of dataScadenza\n*\n* @ Return value dataScadenza.\n* /\npublic Date getDataScadenza ()\n(\ndataScadenza return;\n)\n\n/ **\n* Sets the new value of dataScadenza\n*\n* @ Param value pDataScadenza New dataScadenza.\n* /\npublic void setDataScadenza (Date pDataScadenza)\n(\ndataScadenza = pDataScadenza;\n)\n\n/ **\n* Returns the value of news\n*\n* @ Return value of news.\n* /\npublic String getNews ()\n(\nreturn news;\n)\n\n/ **\n* Sets the new value of news\n*\n* @ Param value New Pnews news.\n* /\npublic void setNews (String Pnews)\n(\nnews = Pnews;\n)\n\n/ **\n* Returns the priority value\n*\n* @ Return the priority value.\n* /\npublic int getPriorita ()\n(\nreturn priority;\n)\n\n/ **\n* Set the new priority value\n*\n* @ Param pPriorita New priority value.\n* /\npublic void setPriorita (int pPriorita)\n(\nPriority = pPriorita;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df69429c"},"name":"FeedBackTableModel.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429b"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429e"}]],"contents":"ï»¿/ *\n  * FeedbackTableModel.java\n  *\n  * 1.0\n  *\n  * 21/05/2007\n  *\n  * 2007 eTour Project - Copyright by SE @ SA Lab - DMI University of Salerno\n  * /\npackage unisa.gps.etour.gui.operatoreagenzia.tables;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\n\ntable .*;\n\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n\n\n/ **\n  * <b> FeedbackTableModel </ b>\n  * <p> 'Container model of data for feedback received\n  * To be a cultural or a refreshment. </ P>\n  *\n  * @ See javax.swing.table.AbstractTableModel\n  * @ See unisa.gps.etour.bean.BeanVisitaBC\n  * @ See unisa.gps.etour.bean.BeanVisitaPR\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  * /\npublic class extends FeedBackTableModel AbstractTableModel\n(\n\nprivate static final long serialVersionUID = 1L;\nprivate static final String [] headers = ( \"rating\", \"Comment\",\n\"Release Date\", \"Issued by\");\nprivate static final Class [] (columnClasses = Integer.class, String.class,\nDate.class, String.class);\n<Object[]> private ArrayList data;\n\n\n/ **\n* Default Constructor. We only provide the model but not\n* Loads no data in it.\n*\n* /\npublic FeedBackTableModel ()\n(\n<Object[]> data = new ArrayList ();\n)\n\n/ **\n* Constructor that takes as input an ArrayList of BeanVisitaBC or\n* BeanVisitaPR and copies of the data within the model\n* Preparing for display.\n*\n* @ Param PVIS java.util.ArrayList - the ArrayList of bean.\n* /\npublic FeedBackTableModel (HashMap <?, String> pDatiFeedback)\n(\nthis ();\nif (pDatiFeedback == null | | pDatiFeedback.size () == 0)\n(\nreturn;\n)\nIterator <?> Iter = pDatiFeedback.keySet (). Iterator ();\nwhile (itera.hasNext ())\n(\nObject current = itera.next ();\nif (current instanceof BeanVisitaBC)\n(\ninsertVisitaBC ((BeanVisitaBC) current pDatiFeedback.get (current));\n)\nelse if (current instanceof BeanVisitaPR)\n(\ninsertVisitaPR ((BeanVisitaPR) current pDatiFeedback.get (current));\n)\n)\n)\n\n/ **\n* Returns the number of columns provided by the model.\n*\n* @ Return int - the number of columns.\n*\n* /\npublic int getColumnCount ()\n(\nheaders.length return;\n)\n\n/ **\n* Returns the number of rows currently in the model.\n*\n* @ Return int - the number of rows.\n*\n* /\npublic int GetRowCount ()\n(\ndata.size return ();\n)\n\n\n/ **\n* Returns the column name from the index provided.\n*\n* @ Return String - the name of the column.\n* @ Exception IllegalArgumentException - if the column index is not provided\n* In the model.\n*\n* /\npublic String getColumnName (int pColumn) throws IllegalArgumentException\n(\nif (pColumn> = getColumnCount () | | pColumn <0)\n(\nthrow new IllegalArgumentException (\n\"The column index is not provided in the model.\");\n)\nreturn headers [pColumn];\n)\n\n/ **\n* Returns the object in the model to the row and column provided.\n*\n* @ Param pRow - the line number.\n* @ Param pColumn - the column number.\n* @ Return Object - the object contained in the selected cell.\n* @ Exception IllegalArgumentException - if the index or the row or column not provided\n* Are present in the model.\n*\n* /\npublic Object getValueAt (pRow int, int pColumn) throws IllegalArgumentException\n(\nif (pRow> = GetRowCount () | | pRow <0)\n(\nthrow new IllegalArgumentException ( \"The row index is not provided in the model.\");\n)\nif (pColumn> = getColumnCount () | | pColumn <0)\n(\nthrow new IllegalArgumentException ( \"The column index is not provided in the model.\");\n)\nreturn data.get (pRow) [pColumn];\n)\n\n/ **\n* Returns the class of objects in the column of which is provided in the index.\n*\n* @ Param pColumn - the column number.\n* @ Return Class - the class of objects of the selected column.\n* @ Exception IllegalArgumentException - if the index column does not pro\n* In the model.\n*\n* /\npublic class getColumnClass (int pColumn) throws IllegalArgumentException\n(\nif (pColumn> = getColumnCount () | | pColumn <0)\n(\nthrow new IllegalArgumentException ( \"The column index is not provided in the model.\");\n)\nreturn columnClasses [pColumn];\n)\n\n/ **\n* Returns whether the selected cell editable.\n*\n* @ Return boolean - true if the cell editable\n* False otherwise\n* @ Param pRow - the line number.\n* @ Param pColumn - the column number.\n* @ Exception IllegalArgumentException - if the index or the row or column are not provided\n* In the model.\n*\n* /\npublic boolean isCellEditable (pRow int, int pColumn) throws IllegalArgumentException\n(\nreturn false;\n)\n\n/ **\n* The method is inherited by setValueAt TableModel does not need to SitoTableModel\n* Because it provided the possibility to change a single cell.\n* @ Deprecated\n*\n* /\npublic void setValueAt (Object value, int row, int col)\n(\n\n)\n\n/ **\n*\n* Enter data on the feedback received from a cultural\n* In the model from Bean.\n*\n* @ Param BeanVisitaBC PBC - the bean that contains the feedback from\n* Cultural.\n* @ Throws IllegalArgumentException - if the parameters supplied input not\n* Are valid.\n*\n* /\npublic void insertVisitaBC (BeanVisitaBC pVisitaBC, String pUsername) throws IllegalArgumentException\n(\nif (pVisitaBC == null | | pUsername == null | | pUsername.equals (\"\"))\n(\nthrow new IllegalArgumentException ( \"invalid parameters supplied input.\");\n)\nObject [] aRow = new Object [6];\naRow [0] = pVisitaBC.getVoto ();\naRow [1] = pVisitaBC.getCommento ();\naRow [2] = pVisitaBC.getDataVisita ();\naRow [3] = pUsername;\naRow [4] = pVisitaBC.getIdBeneCulturale ();\naRow [5] = pVisitaBC.getIdTurista ();\ndata.add (aRow);\n)\n\n/ **\n*\n* Enter data on the feedback received from a refreshment\n* In the model from Bean.\n*\n* @ Param BeanVisitaPR PBC - the bean that contains the feedback from\n* Refreshment.\n* @ Throws IllegalArgumentException - if the parameters supplied input not\n* Are valid.\n*\n* /\npublic void insertVisitaPR (BeanVisitaPR pVisitaPR, String pUsername) throws IllegalArgumentException\n(\nif (pVisitaPR == null | | pUsername == null | | pUsername.equals (\"\"))\n(\nthrow new IllegalArgumentException ( \"invalid parameters supplied input.\");\n)\nObject [] aRow = new Object [6];\naRow [0] = pVisitaPR.getVoto ();\naRow [1] = pVisitaPR.getCommento ();\naRow [2] = pVisitaPR.getDataVisita ();\naRow [3] = pUsername;\naRow [4] = pVisitaPR.getIdPuntoDiRistoro ();\naRow [5] = pVisitaPR.getIdTurista ();\ndata.add (aRow);\n)\n/ **\n*\n* Updates the comment feedback contained in the table row selected.\n*\nPNuovoCommento * @ param String - the new comment.\n* @ Param pRow - the row to update.\n* @ Throws IllegalArgumentException - if <ul> <li> the row index is not present in the model.\n* <li> New comment supplied input is zero. </ Ul>\n* /\npublic void modificaCommento (pNuovoCommento String, int pRow) throws IllegalArgumentException\n(\nif (pRow> = GetRowCount () | | pRow <0)\n(\nthrow new IllegalArgumentException ( \"The row index is not provided in the model.\");\n)\nif (null == pNuovoCommento)\n(\nthrow new IllegalArgumentException ( \"The new comment can not be null.\");\n)\ndata.get (pRow) [1] = pNuovoCommento;\nfireTableDataChanged ();\n)\n\n/ **\n*\n* Returns the id of the row receive feedback provided on input.\n*\n* @ Param pRow int - the row number.\n* @ Return int [] - the id of the feedback.\n* @ Throws IllegalArgumentException - if the row index does not pro\n* In the model.\n* /\npublic int [] getIDFeedback (int pRow) throws IllegalArgumentException\n(\nif (pRow> = GetRowCount () | | pRow <0)\n(\nthrow new IllegalArgumentException ( \"The row index is not provided in the model.\");\n)\nint [] ids = new int [2];\nids [0] = (Integer) data.get (pRow) [4];\nids [1] = (Integer) data.get (pRow) [5];\nreturn ids;\n)\n\n/ **\n*\n* Returns the id of feedback to line number provided as input and removes it from the model.\n*\n* @ Param pRow int - the row number.\n* @ Return int [] - the id of the feedback.\n* @ Exception IllegalArgumentException - if the row index does not pro\n* In the model.\n*\n* /\npublic int [] removeFeedback (int pRow) throws IllegalArgumentException\n(\nint [] ids = getIDFeedback (pRow);\ndata.remove (pRow);\nreturn ids;\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df69429f"},"name":"BeanVisitaPR.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df69429e"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e1"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\nimport java.util.Date;\n/ **\n  * Bean that contains the data for feedback to a refreshment\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class BeanVisitaPR implements Serializable\n(\n\nprivate static final long serialVersionUID =-4065240072283418782L;\nprivate int rating;\nprivate int idPuntoDiRistoro;\nprivate String comment;\nprivate int IdTurista;\nprivate Date dataVisita;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pVoto\n* @ Param pIdPuntoDiRistoro\n* @ Param pCommento\n* @ Param pIdTurista\n* @ Param pDataVisita\n* /\npublic BeanVisitaPR (pVoto int, int pIdPuntoDiRistoro,\nPCommento String, int pIdTurista, Date pDataVisita)\n(\nsetVoto (pVoto);\nsetIdPuntoDiRistoro (pIdPuntoDiRistoro);\nsetCommento (pCommento);\nsetIdTurista (pIdTurista);\nsetDataVisita (pDataVisita);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanVisitaPR ()\n(\n\n)\n\n/ **\n* Returns the value of comment\n*\n* @ Return value of comment.\n* /\npublic String getCommento ()\n(\nreturn comment;\n)\n\n/ **\n* Sets the new value of comment\n*\n* @ Param value New pCommento comment.\n* /\npublic void setCommento (String pCommento)\n(\ncomment = pCommento;\n)\n\n/ **\n* Returns the value of dataVisita\n*\n* @ Return value dataVisita.\n* /\npublic Date getDataVisita ()\n(\ndataVisita return;\n)\n\n/ **\n* Sets the new value of dataVisita\n*\n* @ Param value pDataVisita New dataVisita.\n* /\npublic void setDataVisita (Date pDataVisita)\n(\ndataVisita = pDataVisita;\n)\n\n/ **\n* Returns the value of idPuntoDiRistoro\n*\n* @ Return value idPuntoDiRistoro.\n* /\npublic int getIdPuntoDiRistoro ()\n(\nidPuntoDiRistoro return;\n)\n\n/ **\n* Sets the new value of idPuntoDiRistoro\n*\n* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.\n* /\npublic void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)\n(\nidPuntoDiRistoro = pIdPuntoDiRistoro;\n)\n\n/ **\n* Returns the value of IdTurista\n*\n* @ Return value IdTurista.\n* /\npublic int getIdTurista ()\n(\nIdTurista return;\n)\n\n/ **\n* Sets the new value of IdTurista\n*\n* @ Param value pIdTurista New IdTurista.\n* /\npublic void setIdTurista (int pIdTurista)\n(\nIdTurista = pIdTurista;\n)\n\n/ **\n* Returns the value of voting\n*\n* @ Return value of vote.\n* /\npublic int getVoto ()\n(\nreturn rating;\n)\n\n/ **\n* Sets the new value of voting\n*\nNew value * @ param pVoto to vote.\n* /\npublic void setVoto (int pVoto)\n(\nvote = pVoto;\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942a2"},"name":"IDBTag.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a1"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a8"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanTag;\n\n/ **\n  * Interface for managing the database Tag\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBTag\n(\n/ **\n* Add a tag\n*\n* @ Param ptagi Tag to add\n* @ Throws SQLException\n* /\npublic boolean inserisciTag (BeanTag ptagi) throws SQLException;\n\n/ **\n* Modify the data in a tag\n*\n* @ Param ptagi Tag to modify\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean modificaTag (BeanTag ptagi) throws SQLException;\n\n/ **\n* Delete a tag from the database\n*\n* @ Param pIdTag ID Tag to be deleted\n* @ Throws SQLException\n* @ Return True if and 'was deleted false otherwise\n* /\npublic boolean cancellaTag (int pIdTag) throws SQLException;\n\n/ **\n* Returns the list of tags in the database\n*\n* @ Throws SQLException\n* @ Return List containing the tags\n* /\n<BeanTag> ottieniListaTag public ArrayList () throws SQLException;\n\n/ **\n* Returns a single tag\n*\n* @ Param pId ID tag\n* @ Throws SQLException\n* @ Return Tags\n* /\npublic BeanTag ottieniTag (int pid) throws SQLException;\n\n/ **\n* Tag with immovable cultural\n*\n* @ Param ID pIdBeneCulturale of Cultural Heritage\n* @ Param pIdTag ID tag\n* @ Throws SQLException\n* /\npublic boolean aggiungeTagBeneCulturale (pIdBeneCulturale int, int pIdTag)\nthrows SQLException;\n\n/ **\n* Tag to a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshments\n* @ Param pIdTag ID tag\n* @ Throws SQLException\n* /\npublic boolean aggiungeTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)\nthrows SQLException;\n\n/ **\n* Returns the list of tags of a cultural\n*\n* @ Param ID pIdBeneCulturale of Cultural Heritage\n* @ Throws SQLException\n* @ Return list of tags\n* /\n<BeanTag> ottieniTagBeneCulturale public ArrayList (int pIdBeneCulturale)\nthrows SQLException;\n\n/ **\n* Returns a list of tags of a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshments\n* @ Throws SQLException\n* @ Return list of tags\n* /\n<BeanTag> ottieniTagPuntoDiRistoro public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException;\n\n/ **\n* Delete a tag to a cultural\n*\n* @ Param ID pIdBeneCulturale of Cultural Heritage\n* @ Param pIdTag ID tag\n* @ Throws SQLException\n* @ Return True if and 'was deleted false otherwise\n* /\npublic boolean cancellaTagBeneCulturale (pIdBeneCulturale int, int pIdTag)\nthrows SQLException;\n\n/ **\n* Delete a tag to a refreshment\n*\n* @ Param pIdPuntoDiRistoro ID\n* @ Param pIdTag ID tag\n* @ Throws SQLException\n* @ Return True if and 'was deleted false otherwise\n* /\npublic boolean cancellaTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)\nthrows SQLException;\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942a3"},"name":"GestioneTagOperatoreAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a1"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a7"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a8"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneTag;\n\nimport java.rmi.RemoteException;\nimport java.sql.SQLException;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ **\n  * Class that implements the methods for the functionality of the Operator Agency\n  * Extending the class of common Tag Management\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class GestioneTagOperatoreAgenzia extends GestioneTagComune implements\nIGestioneTagOperatoreAgenzia\n(\n\nprivate static final long serialVersionUID = 1L;\n\npublic GestioneTagOperatoreAgenzia () throws RemoteException\n(\n/ / Invoke the constructor of the superclass for communication with\n/ / Database\nsuper ();\n)\n\n/ / Method to delete from database the tag whose ID is passed\n/ / As parameter\npublic boolean cancellaTag (int pTagID) throws RemoteException\n(\n/ / Check the valise of past data\nif ((pTagID <= 0))\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\nTRY\n(\n/ / Make the database operation\ntag.cancellaTag (pTagID);\nreturn true;\n)\n/ / Exception in the execution of database operations\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method cancellaTag:\" + e.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method cancellaTag\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ / Method that allows the insertion of a new tag as a parameter\npublic boolean inserisciTag (BeanTag pTagNuovo) throws RemoteException\n(\n/ / Check the validity of the Bean and the data contained within\nif (null == pTagNuovo)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\nif ((pTagNuovo = checkTag (pTagNuovo)) == null)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\nTRY\n(\n/ / Execute the operation on the Database\ntag.inserisciTag (pTagNuovo);\nreturn true;\n)\n/ / Exception running the operation on Database\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method inserisciTag\"\n+ E.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method inserisciTag\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ / Method that enables the modification of a tag that is passed as\n/ / Parameter\npublic boolean modificaTag (BeanTag pTagModificato) throws RemoteException\n(\n/ / Check the validity of data\nif ((pTagModificato = checkTag (pTagModificato)) == null)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\nTRY\n(\n/ / Execute the operation on the Database\ntag.modificaTag (pTagModificato);\nreturn true;\n)\n/ / Exception running the operation on Database\ncatch (SQLException e)\n(\nSystem.out\n. System.out.println ( \"Error in method modificaTag:\" + e.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out.println ( \"Error in method modificaTag\"\nEe.toString + ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\n\n/ / Method to obtain the tags whose identifier is passed\n/ / As parameter\npublic BeanTag ottieniTag (int pTagID) throws RemoteException\n(\n/ / Check the validity of data\nif (pTagID <= 0)\nthrow new RemoteException (MessaggiErrore.ERRORE_DATI);\n/ / Bean to return\nBeanTag toReturn;\nTRY\n(\n/ / Execute the operation on the Database\ntoReturn = tag.ottieniTag (pTagID);\n)\n/ / Exception running the operation on Database\ncatch (SQLException e)\n(\nSystem.out.println ( \"Error in method ottieniTag:\" + e.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n/ / Unexpected exceptions caused by other factors\ncatch (Exception ee)\n(\nSystem.out\n. System.out.println ( \"Error in method ottieniTag:\" + ee.toString ());\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\nif (null == toReturn)\nthrow new RemoteException (MessaggiErrore.ERRORE_FORMATO_BEAN);\ntoReturn return;\n)\n\n/ / Method that controls all the attributes of a BeanTag\nPrivate BeanTag checkTag (BeanTag toControl)\n(\n/ / Check the ID\nif (toControl.getId () <= 0)\nreturn null;\n/ / Check the description\nif (toControl.getDescrizione (). equals (\"\"))\ntoControl.setDescrizione (\"***\");\n/ / Check the name\nif (toControl.getNome (). equals (\"\"))\nreturn null;\n/ / Check that the name does not contain a space\nif (toControl.getNome (). Contains ( \"\"))\nreturn null;\ntoControl return;\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942a4"},"name":"IGestioneTagOperatoreAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a1"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneTag;\n\nimport java.rmi.RemoteException;\n\nimport unisa.gps.etour.bean.BeanTag;\n\n/ **\n  * Interface for the tag handler by the Operator Agency\n  *\n  * @ Author Joseph Morelli\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IGestioneTagOperatoreAgenzia extends IGestioneTagComune\n(\n\n/ **\n* Method to insert a new tag\n*\n* @ Param pTagNuovo containing all the data of the new Tag\n* @ Return Boolean: true if the operation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciTag (BeanTag pTagNuovo) throws RemoteException;\n\n/ **\n* Method for the cancellation of an existing tag\n*\n* @ Param pTagID to identify the tags in question\n* @ Return Boolean: true if the operation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean cancellaTag (int pTagID) throws RemoteException;\n\n/ **\n* Method for editing a Tag\n*\n* @ Param pTagModificato containing the details of the new Tag\n* @ Return Boolean: true if the operation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean modificaTag (BeanTag pTagModificato) throws RemoteException;\n\n/ **\n* Method which returns a tag identified by its ID\n*\n* @ Param pTagID to identify a particular tag\n* @ Return a BeanTag containing data Tag concerned\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanTag ottieniTag (int pTagID) throws RemoteException;\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942a5"},"name":"TAGTableModel.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a1"}]],"contents":"\t\n/ *\n* TAGTableModel.java\n*\n* 1.0\n*\n* 28/05/2007\n*\n* © 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno\n* /\npackage unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.util.Vector;\nimport javax.swing.table.AbstractTableModel;\nimport unisa.gps.etour.bean.BeanTag;\n/ **\n* <p>\n* <B> Title: </ B> TagTableModel\n* </ P>\n* <p>\n* <B> Description: </ B> TableModel for dynamic management of Table\n* Within the section GestioneTag\n* </ P>\n*\n* @ Author _Lello_\n* @ Version 1.0\n* /\n\npublic class extends TAGTableModel AbstractTableModel (\n\n\nprivate static final long serialVersionUID = 1L;\nprivate static final String [] headers =\n( \"Name\", \"Description\");\nprivate static final Class [] = columnClasses\n(String.class, String.class);\n<Object[]> private Vector data;\n\n/ **\n* Constructor for class TagTableModel\n*\n* @ Param BeanTag []\n*\n* /\npublic TAGTableModel (BeanTag [] tags)\n(\n<Object[]> data = new Vector ();\nfor (int i = 0; i <tag.length i + +)\n(\nObject [] new = new Object [10];\nnew [0] = tag [i]. getId ();\nNew [1] = tag [i]. getName ();\nnew [2] = tag [i]. getDescrizione ();\n\n)\n)\n\n/ **\n* Returns the number of columns\n*\n* /\npublic int getColumnCount () (\nheaders.length return;\n)\n\n/ **\n* Returns the number of rows\n*\n* /\npublic int GetRowCount () (\ndata.size return ();\n)\n\n/ **\n* Returns the column heading i_esima\n*\n* @ Param pCol\n*\n* /\npublic String getColumnName (int pCol) (\nreturn headers [pCol];\n)\n\n/ **\n* Returns the coordinates given by the pair of row, column\n*\n* @ Param pCol\n* @ Param pRow\n*\n* /\npublic Object getValueAt (int prow, int pCol) (\nreturn data.get (pRow) [pCol];\n)\n\n/ **\n* Returns the column pCol\n*\n* @ Param pCol\n*\n* /\npublic class getColumnClass (int pCol) (\nreturn columnClasses [pCol];\n)\n\n/ **\n* Always returns false because the cells in the table are not editable\n*\n* @ Param pCol\n* @ Param pRow\n*\n* @ Return false\n*\n* /\npublic boolean isCellEditable (int row, int col) (\nreturn false;\n)\n\n/ **\n* This method is empty.\n* Can not be included an element within a cell\n*\n* @ Deprecated\n*\n* /\npublic void setValueAt (Object value, int row, int col) (\n\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942a6"},"name":"BeanTag.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a1"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a8"}]],"contents":"ï»¿package unisa.gps.etour.bean;\n\n/ **\n  * Bean that contains the data for a Tag\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\nimport java.io.Serializable;\n\npublic class BeanTag implements Serializable\n(\nprivate static final long serialVersionUID =-6320421006595188597L;\nprivate int id;\nprivate String name;\nprivate String description;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param Pnom\n* @ Param pDescrizione\n* /\npublic BeanTag (int pid, Phnom String, String pDescrizione)\n(\nsetId (PID);\nsetNome (Phnom);\nsetDescrizione (pDescrizione);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanTag ()\n(\n\n)\n\n/ **\n* Returns the value of description\n*\n* @ Return value of description.\n* /\npublic String getDescrizione ()\n(\nreturn description;\n)\n\n/ **\n* Sets the new value of description\n*\n* @ Param pDescrizione New value of description.\n* /\npublic void setDescrizione (String pDescrizione)\n(\ndescription = pDescrizione;\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getName ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new value of name\n*\n* @ Param Phnom New value for name.\n* /\npublic void setNome (String Pnom)\n(\nname = Pnom;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942a9"},"name":"DBTag.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942a8"}]],"contents":"package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.repository.IDBTag;\n\npublic class DBTag implements IDBTag\n(\nprivate ArrayList <BeanTag> b;\n\npublic DBTag ()\n(\nb = new ArrayList <BeanTag> (0);\n)\n\npublic boolean aggiungeTagBeneCulturale (pIdBeneCulturale int, int pIdTag)\nthrows SQLException\n(\nreturn true;\n)\n\npublic boolean aggiungeTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)\nthrows SQLException\n(\nreturn true;\n)\n\npublic boolean cancellaTag (int pIdTag) throws SQLException\n(\nreturn true;\n)\n\npublic boolean cancellaTagBeneCulturale (pIdBeneCulturale int, int pIdTag)\nthrows SQLException\n(\nreturn true;\n)\n\npublic boolean cancellaTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)\nthrows SQLException\n(\nreturn true;\n)\n\npublic boolean inserisciTag (BeanTag ptagi) throws SQLException\n(\nreturn true;\n)\n\npublic boolean modificaTag (BeanTag ptagi) throws SQLException\n(\n/ / TODO Auto-generated method stub\nreturn false;\n)\n\n<BeanTag> ottieniListaTag public ArrayList () throws SQLException\n(\n/ / TODO Auto-generated method stub\nreturn null;\n)\n\npublic BeanTag ottieniTag (int pid) throws SQLException\n(\n/ / TODO Auto-generated method stub\nreturn null;\n)\n\n<BeanTag> ottieniTagBeneCulturale public ArrayList (int pIdBeneCulturale)\nthrows SQLException\n(\n/ / TODO Auto-generated method stub\nreturn null;\n)\n\n<BeanTag> ottieniTagPuntoDiRistoro public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException\n(\n/ / TODO Auto-generated method stub\nreturn null;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942ab"},"name":"DBOperatoreAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942aa"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942ae"}]],"contents":"/ **\n  * Class that implements the Agency's Operator\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1\n  *\n  * © 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npackage unisa.gps.etour.repository;\n\nimport Java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport unisa.gps.etour.bean.BeanOperatoreAgenzia;\n\npublic class DBOperatoreAgenzia implements IDBOperatoreAgenzia\n(\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.repository.IDBOperatoreAgenzia # ottieniOperatoreAgenzia (int)\n* /\npublic BeanOperatoreAgenzia ottieniOperatoreAgenzia (String pUsername)\nthrows SQLException\n(\n/ / Connect to database\nConnection conn = null;\n/ / Statement for running queries\nStatement stat = null;\n/ / Resut set where the output of the query is inserted\nResultSet result = null;\n/ / Try block which performs the query and the database connection\nTRY\n(\n/ / You get the database connection from the pool\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the statement\nstat = conn.createStatement ();\n/ / Query\nString query = \"SELECT * FROM operatoreagenzia WHERE Username = '\"\nPUsername + + \" '\";\nresult = stat.executeQuery (query);\nOr BeanOperatoreAgenzia = null;\nif (result.next ())\n(\n/ / Build the bean when the query returns a\n/ / Value\n/ / Otherwise will return null\nor BeanOperatoreAgenzia = new ();\noa.setId (result.getInt ( \"Id\"));\noa.setUsername (result.getString ( \"Username\"));\noa.setNome (result.getString ( \"Name\"));\noa.setCognome (result.getString ( \"Name\"));\noa.setPassword (result.getString ( \"Password\"));\n)\nor return;\n)\n/ / Finally block that contains the instructions to close the connections\n/ / Hyenas run in any case\nfinally\n(\n/ / This closes the result set only if and 'the query was made\nif (result! = null)\n(\nresult.close ();\n)\n/ / This closes the if statement and 'opened\nif (stat = null)\n(\nstat.close ();\n)\n/ / It returns the connection to the pool if and 'opened\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.repository.IDBOperatoreAgenzia # modificaPassword (java.lang.String)\n* /\npublic boolean modificaPassword (BeanOperatoreAgenzia poa) throws SQLException\n(\n/ / Connect to database\nConnection conn = null;\n/ / Statement for running queries\nStatement stat = null;\n/ / Try block which performs the query and the database connection\nTRY\n(\n/ / You get the database connection from the pool\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the statement\nstat = conn.createStatement ();\n\n/ / Query\nString query = \"UPDATE operatoreagenzia SET\" + \"Password = '\"\nPOa.getPassword + () + \" 'WHERE Id =\" + pOa.getId ();\n/ / You run the query\nint i = stat.executeUpdate (query);\n\nreturn (i == 1);\n)\n/ / Finally block that contains the instructions to close the connections\n/ / Hyenas run in any case\nfinally\n(\n/ / This closes the if statement and 'opened\nif (stat = null)\n(\nstat.close ();\n)\n/ / It returns the connection to the pool if and 'opened\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942ac"},"name":"OperatoreAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942aa"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942ae"}]],"contents":"package beans;\n\nimport java.sql.Date;\n\npublic class OperatoreAgenzia\n(\nprivate String Name, Last Name, CittàResidenza, Phone, Zip, Address, Email, Password, username;\nprivate Date DoB;\n\npublic OperatoreAgenzia () ()\npublic OperatoreAgenzia (String name, String name, String city, String phone, String ch, String address, String email, String pass, String user, Date date)\n(\nthis.Nome = name;\nthis.Cognome = surname;\nthis.CittàResidenza = city;\nthis.Telefono = phone;\nthis.Cap = cap;\nthis.Indirizzo = address;\nthis.Email = email;\nthis.password = pass;\nthis.Username = user;\nthis.DataNascita = data;\n)\n\npublic void setNome (String par1)\n(\nthis.Nome = par1;\n)\npublic String getName ()\n(\nreturn Name;\n)\n\npublic void setCognome (String par1)\n(\nthis.Cognome = par1;\n)\npublic String getCognome ()\n(\nreturn Name;\n)\n\npublic void setCittàResidenza (String par1)\n(\nthis.CittàResidenza = par1;\n)\npublic String getCittàResidenza ()\n(\nCittàResidenza return;\n)\n\npublic void setTelefono (String par1)\n(\nthis.Telefono = par1;\n)\npublic String getTelefono ()\n(\nreturn phone;\n)\n\npublic void setCap (String par1)\n(\nthis.Cap = par1;\n)\npublic String getCap ()\n(\nreturn postcode;\n)\n\npublic void setIndirizzo (String par1)\n(\nthis.Indirizzo = par1;\n)\npublic String getIndirizzo ()\n(\nreturn Address;\n)\n\npublic void setEmail (String par1)\n(\nthis.Email = par1;\n)\npublic String getEmail ()\n(\nreturn Email;\n)\n\npublic void setPassword (String par1)\n(\nthis.password = par1;\n)\npublic String getPassword ()\n(\nreturn password;\n)\n\npublic void setUsername (String par1)\n(\nthis.Username = par1;\n)\npublic String GetUserName ()\n(\nreturn username;\n)\n\npublic void setDataNascita (Date par1)\n(\nthis.DataNascita = par1;\n)\npublic Date getDataNascita ()\n(\nDoB return;\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942ad"},"name":"IDBOperatoreAgenzia.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942aa"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\n\nimport unisa.gps.etour.bean.BeanOperatoreAgenzia;\n\n/ **\n  * Interface for managing the database OperatoreAgenzia\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBOperatoreAgenzia\n(\n/ **\n* Returns the data Operator Agency with ID equal to that given in\n* Input\n*\n* @ Param pUsername Username dell'OperatoreAgenzia to find\n* @ Return OperatoreAGenzia with id equal to the input, null if there is\n* @ Throws SQLException\n* /\npublic BeanOperatoreAgenzia ottieniOperatoreAgenzia (String pUsername) throws SQLException;\n\n/ **\n* Returns the data Operator Agency with ID equal to that given in\n* Input\n*\n* @ Param pUsername Username dell'OperatoreAgenzia to find\n* @ Return OperatoreAGenzia with id equal to the input, null if there is\n* @ Throws SQLException\n* /\npublic boolean modificaPassword (BeanOperatoreAgenzia poa) throws SQLException;\n\n)"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942b0"},"name":"IGestioneTuristaClient.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942af"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d1"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d2"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d4"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dd"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneUtentiRegistrati;\n\nimport java.rmi.RemoteException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanPreferenzaDiRicerca;\nimport unisa.gps.etour.bean.BeanPreferenzeGeneriche;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n/ **\n  * Interface on the Management of Tourist Information\n  *\n  * @ Author Joseph Penna, Federico Leon\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab University of DMI\n  * Salerno\n  * /\npublic interface IGestioneTuristaClient extends IGestioneTuristaComune\n(\n\n/ **\n* Method for the insertion of a Tourist\n*\n* @ Param pTurista container for all data relating to tourism by\n* Insert\n* @ Return Boolean: True if the insertion is successful, False otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciTurista (BeanTurista pTurista)\nthrows RemoteException;\n\n/ **\n* Method for including the General Preferences Tourist\n*\n* @ Param pIdTurista Identifier Turista which involve\n* General Preferences\n* @ Param pPreferenzeGeneriche General Preferences for inclusion\n* @ Return Boolean: True if the insertion is successful, False otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciPreferenzeGeneriche (\nBeanPreferenzeGeneriche pPreferenzeGeneriche)\nthrows RemoteException;\n\n/ **\n* Method for the extraction Preferences generously given Tourists\n*\n* @ Param pIdTurista Identifier Turista which you want\n* Get the General Preferences\n* @ Return Preferences General information relating to tourism\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanPreferenzeGeneriche ottieniPreferenzeGeneriche (int pIdTurista)\nthrows RemoteException;\n\n/ **\n* Method for changing the Preferences generously given Tourists\n*\n* @ Param ID pIdTurista of tourists for whom you want\n* Change the General Preferences\n* @ Param pPreferenzeGenericheNuove The Prefereferze General for inclusion\n* @ Param pPreferenzeGenericheVecchie Preferences generous to replace\n* @ Return Boolean: True if the MADIF successful, False otherwise\n* @ Throws RemoteException\n* /\npublic boolean modificaPreferenzeGeneriche (\nBeanPreferenzeGeneriche pPreferenzeGenericheNuove)\nthrows RemoteException;\n\n/ **\n* Method for the removal of preferences associated with the General\n* Tourist\n*\n* @ Param ID pIdTurista of tourists for whom you want\n* Delete the General Preferences\n* @ Return Preferences General erased\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanPreferenzeGeneriche cancellaPreferenzeGeneriche (int pIdTurista)\nthrows RemoteException;\n\n/ **\n* Method to insert a Search Preferences\n*\n* @ Param ID pIdTurista of tourists for which you intend\n* Insert a Search Preferences\n* @ Param pPreferenzaDiRicerca Search Preferences be included\n* @ Return Boolean: True if the insertion is successful, False otherwise\n* @ Throws RemoteException\n* /\npublic boolean inserisciPreferenzaDiRicerca (int pIdTurista,\nBeanPreferenzaDiRicerca pPreferenzaDiRicerca)\nthrows RemoteException;\n\n/ **\n* Method for extracting the set of Search Preferences given\n* Tourist\n*\n* @ Param ID pIdTurista of tourists for whom you want\n* Extract search preferences\nTogether * @ return the search preferences associated with the Tourist information\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanPreferenzaDiRicerca [] ottieniPreferenzeDiRicerca (\npIdTurista int) throws RemoteException;\n\n/ **\n* Method for deleting a Search Preference given its\n* ID and Tourists\n*\n* @ Param ID pIdTurista of tourists for whom you want\n* Delete a Search Preferences\n* @ Param ID pIdPreferenzaDiRicerca Search Preferences\n* To cancel\n* @ Return The preference of search Delete\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanPreferenzaDiRicerca cancellaPreferenzeDiRicerca (int pIdTurista,\npIdPreferenzaDiRicerca int) throws RemoteException;\n\n/ **\n* Method to extract the list references to the Cultural Heritage\n* Visited by a tourist\n*\n* @ Param pIdTurista Identifier Turista\n* @ Return list of references to the Cultural Heritage Visited\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanVisitaBC [] ottieniBeniCulturaliVisitati (int pIdTurista)\nthrows RemoteException;\n\n/ **\n* Method for the extraction of the list when making reference to Refreshments\n* Visited by a tourist\n*\n* @ Param pIdTurista Identifier Turista\n* @ Return list of references to Refreshments Visited\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanVisitaPR [] ottieniPuntiDiRistoroVisitati (int pIdTurista)\nthrows RemoteException;\n\n/ **\n* Method for the insertion of a cultural Visited\n*\n* @ Param pVisitaBC package containing all information relating to\n* Visit\n* @ Return true if the item is added successfully, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciBeneCulturaleVisitato (BeanVisitaBC pVisitaBC)\nthrows RemoteException;\n\n/ **\n* Method for inserting a refreshment Visited\n*\n* @ Param pVisitaPR package containing all information relating to\n* Visit\n* @ Return true if the item is added successfully, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciPuntoDiRistoroVisitato (BeanVisitaPR pVisitaPR)\nthrows RemoteException;\n\n/ **\n* Method for the insertion of a cultural object in the list of Favorites\n*\n* @ Param pIdTurista Identifier Turista\n* @ Param ID pIdBeneCulturale of Cultural Heritage\n* @ Return true if the insertion is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciBeneCulturalePreferito (int pIdTurista,\npIdBeneCulturale int) throws RemoteException;\n\n/ **\n* Method for inserting a refreshment to my Favorites\n*\n* @ Param pIdTurista Identifier Turista\n* @ Param pIdPuntoDiRistoro point identification Refreshment\n* @ Return true if the insertion is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean inserisciPuntoDiRistoroPreferito (int pIdTurista,\npIdPuntoDiRistoro int) throws RemoteException;\n\n/ **\n* Method for the cancellation of a cultural object from the list of Favorites\n*\n* @ Param pIdTurista Identifier Turista\n* @ Param ID pIdBeneCulturale of Cultural Heritage\n* @ Return true if the cancellation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean cancellaBeneCulturalePreferito (int pIdTurista,\npIdBeneCulturale int) throws RemoteException;\n\n/ **\n* Method for deleting a refreshment from the list of Favorites\n*\n* @ Param pIdTurista Identifier Turista\n* @ Param pIdPuntoDiRistoro point identification Refreshment\n* @ Return true if the cancellation is successful, false otherwise\n* @ Throws RemoteException Exception Remote\n* /\npublic boolean cancellaPuntoDiRistoroPreferito (int pIdTurista,\npIdPuntoDiRistoro int) throws RemoteException;\n\n/ **\n* Method to extract the list of Cultural Heritage Favorites\n*\n* @ Param pIdTurista Identifier Turista\n* @ Return List of Cultural Heritage Favorites\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanBeneCulturale [] ottieniBeniCulturaliPreferiti (int pIdTurista)\nthrows RemoteException;\n\n/ **\n* Method to extract the list of Refreshments\n*\n* @ Param pIdTurista Identifier Turista\n* @ Return list of eateries Favorites\n* @ Throws RemoteException Exception Remote\n* /\npublic BeanPuntoDiRistoro [] ottieniPuntiDiRistoroPreferiti (int pIdTurista)\nthrows RemoteException;\n\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942b1"},"name":"GestioneTuristaClient.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942af"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d1"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d2"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d4"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneUtentiRegistrati;\n\nimport java.rmi.RemoteException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanPreferenzaDiRicerca;\nimport unisa.gps.etour.bean.BeanPreferenzeGeneriche;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.bean.BeanVisitaPR;\nimport unisa.gps.etour.repository.DBBeneCulturale;\nimport unisa.gps.etour.repository.DBPreferenzeDiRicerca;\nimport unisa.gps.etour.repository.DBPreferenzeGeneriche;\nimport unisa.gps.etour.repository.DBPuntoDiRistoro;\nimport unisa.gps.etour.repository.DBTurista;\nimport unisa.gps.etour.repository.DBVisitaBC;\nimport unisa.gps.etour.repository.DBVisitaPR;\nimport unisa.gps.etour.repository.IDBBeneCulturale;\nimport unisa.gps.etour.repository.IDBPreferenzeDiRicerca;\nimport unisa.gps.etour.repository.IDBPreferenzeGeneriche;\nimport unisa.gps.etour.repository.IDBPuntoDiRistoro;\nimport unisa.gps.etour.repository.IDBTurista;\nimport unisa.gps.etour.repository.IDBVisitaBC;\nimport unisa.gps.etour.repository.IDBVisitaPR;\nimport unisa.gps.etour.util.ControlloDati;\nimport unisa.gps.etour.util.MessaggiErrore;\n\n/ **\n  * Class on the Management of Tourist Information\n  *\n  * @ Author Federico Leon\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab University of DMI\n  * Salerno\n  * /\n\npublic class GestioneTuristaClient extends GestioneTuristaComune implements\nIGestioneTuristaClient\n(\nprivate static final long serialVersionUID =-6161592850721537385L;\nPrivate IDBTurista profiloTurista / / Data Management for tourists\nPrivate IDBPreferenzeGeneriche prefGenTurista / / preferences, general manager of the tourist\nPrivate IDBPreferenzeDiRicerca prefRicTurista, / / Handle search preferences of tourists\nPrivate IDBVisitaBC visitatiBC / / Managing cultural Visited\nPrivate IDBVisitaPR visitatiPR / / Manager catering outlets visited\nPrivate IDBBeneCulturale beneCulturale / / Managing cultural heritage (we need only obtain a bean BeneCulturale x\n/ / from its ID\nPrivate IDBPuntoDiRistoro puntoDiRistoro / / Management refreshment areas (use the same object \"beneCulturale\"\n\npublic GestioneTuristaClient () throws RemoteException\n(\nsuper ();\n\nprofiloTurista = new DBTurista ();\nprefGenTurista = new DBPreferenzeGeneriche ();\nprefRicTurista = new DBPreferenzeDiRicerca ();\nvisitatiBC = new DBVisitaBC ();\nvisitatiPR = new DBVisitaPR ();\nbeneCulturale = new DBBeneCulturale ();\npuntoDiRistoro = new DBPuntoDiRistoro ();\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaPreferenzeDiRicerca (int,\n* Int)\n* /\npublic BeanPreferenzaDiRicerca cancellaPreferenzeDiRicerca (pIdTurista int, int pIdPreferenzaDiRicerca) throws RemoteException\n(\nTRY\n(\nboolean delete = true;\nBeanPreferenzaDiRicerca PrefRic = new BeanPreferenzaDiRicerca ();\n<BeanPreferenzaDiRicerca> ElencoPrefRic ArrayList <BeanPreferenzaDiRicerca> = new ArrayList ();\n\nElencoPrefRic = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista (pIdTurista);\n<BeanPreferenzaDiRicerca> = ElencoPrefRic.iterator list iterator ();\n\nwhile (elenco.hasNext () & & cancel == true)\n(\nPrefRic = elenco.next ();\nif (PrefRic.getId () == pIdPreferenzaDiRicerca)\ndelete = false; / / Find the anniversary with the id\n/ / We leave the interested\n/ / Cycle\n)\n\nCancellation prefRicTurista.cancellaPreferenzaDiRicercaTurista = (\npIdTurista, pIdPreferenzaDiRicerca);\nPrefRic return;\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaPreferenzeGeneriche (int)\n* /\npublic BeanPreferenzeGeneriche cancellaPreferenzeGeneriche (int pIdTurista) throws RemoteException\n(\nTRY\n(\nBeanPreferenzeGeneriche temp = prefGenTurista.ottieniPreferenzaGenerica (pIdTurista);\nboolean canceled = prefGenTurista.cancellaPreferenzaGenerica (temp.getId ());\n\nif (cancel)\nreturn temp;\nelse\nreturn null; / / The cancellation occurred\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPreferenzaDiRicerca (int,\n* Unisa.gps.etour.bean.BeanPreferenzaDiRicerca)\n* /\npublic boolean inserisciPreferenzaDiRicerca (int pIdTurista, BeanPreferenzaDiRicerca pPreferenzaDiRicerca) throws RemoteException\n(\nTRY\n(\nboolean checkdate = ControlloDati.checkBeanPreferenzaDiRicerca (pPreferenzaDiRicerca);\n\nif (checkdate)\n(/ / If the data control is positive\nreturn prefRicTurista.inserisciPreferenzaDiRicercaDelTurista (pIdTurista, pPreferenzaDiRicerca.getId ());\n)\nelse\n(\nreturn false; / / Data error\n)\n\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPreferenzeGeneriche (unisa.gps.etour.bean.BeanPreferenzeGeneriche)\n* /\npublic boolean inserisciPreferenzeGeneriche (BeanPreferenzeGeneriche pPreferenzeGeneriche) throws RemoteException\n(\nTRY\n(\nboolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche (pPreferenzeGeneriche);\n\nif (checkdate)\n(/ / If the data control is positive\nreturn prefGenTurista.inserisciPreferenzaGenenerica (pPreferenzeGeneriche);\n)\nelse\n(\nreturn false; / / Data error\n)\n\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciTurista (unisa.gps.etour.bean.BeanTurista)\n* /\npublic boolean inserisciTurista (BeanTurista pTurista) throws RemoteException\n(\nTRY\n(\n\n/ / Check if the username entered is already present in DB\nBeanTurista temp = profiloTurista.ottieniTurista (pTurista.getUsername ());\n\n/ / If there is no choice all'username Tourist Offices\nif (temp == null)\n(\nboolean checkdate = ControlloDati.checkBeanTurista (pTurista);\n\nif (checkdate)\n(/ / If the data control is positive\nreturn profiloTurista.inserisciTurista (pTurista);\n)\nelse\n(\nreturn false; / / Data error\n)\n)\nelse\n(\nreturn false; / / Username already exists in DB\n)\n\n\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # modificaPreferenzeGeneriche (unisa.gps.etour.bean.BeanPreferenzeGeneriche)\n* /\npublic boolean modificaPreferenzeGeneriche (BeanPreferenzeGeneriche pPreferenzeGenericheNuove) throws RemoteException\n(\nTRY\n(\nboolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche (pPreferenzeGenericheNuove);\n\nif (checkdate)\n(/ / If the data control is positive\nreturn prefGenTurista.modificaPreferenzaGenerica (pPreferenzeGenericheNuove);\n)\nelse\n(\nreturn false; / / Data error\n)\n\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniPreferenzeDiRicerca (int)\n* /\npublic BeanPreferenzaDiRicerca [] ottieniPreferenzeDiRicerca (int pIdTurista) throws RemoteException\n(\n/ / Array containing the list of search preferences tourists ID = pIdTurista\nBeanPreferenzaDiRicerca [] preferences = null;\n\nTRY\n(\n/ / ** Convert ArrayList (return type of method \"ottieniPreferenzeDiRicerca\") to simple array **\nArrayList <BeanPreferenzaDiRicerca> listaPreferenze = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista (pIdTurista);\npreferences = new BeanPreferenzaDiRicerca [listaPreferenze.size ()];\n= listaPreferenze.toArray preferences (preferences);\n/ / ** ** End Conversion\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n\nreturn preferences;\n\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniPreferenzeGeneriche (int)\n* /\npublic BeanPreferenzeGeneriche ottieniPreferenzeGeneriche (int pIdTurista) throws RemoteException\n(\nTRY\n(\nreturn prefGenTurista.ottieniPreferenzaGenerica (pIdTurista);\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.GestioneTuristaComune # modificaTurista (unisa.gps.etour.bean.BeanTurista)\n* /\npublic boolean modificaTurista (BeanTurista pprofiloTurista) throws RemoteException\n(\nTRY\n(\n/ / Boolean variable that will hold true if the bean is correct, false otherwise\nboolean checkdate = ControlloDati.checkBeanTurista (pprofiloTurista);\n\nif (checkdate)\n(/ / If the data control is positive\nreturn profiloTurista.modificaTurista (pprofiloTurista);\n)\nelse\n(\nreturn false; / / Data error\n)\n\n)\ncatch (SQLException e)\n(\n/ / If the data layer is thrown an exception SQLException\n/ / It throws RemoteException the remote exception\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\n\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniBeniCulturaliVisitati (int)\n* /\npublic BeanVisitaBC [] ottieniBeniCulturaliVisitati (int pIdTurista) throws RemoteException\n(\nBeanVisitaBC [] visited = null;\nif (pIdTurista> 0)\n(\nTRY\n(\nArrayList <BeanVisitaBC> listavisitati = visitatiBC.ottieniListaVisitaBCTurista (pIdTurista);\nvisited = new BeanVisitaBC [listavisitati.size ()];\nvisited = listavisitati.toArray (visited);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\n)\nreturn visit;\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniPuntiDiRistoroVisitati (int)\n* /\npublic BeanVisitaPR [] ottieniPuntiDiRistoroVisitati (int pIdTurista) throws RemoteException\n(\n/ / Array containing the list of catering outlets visited by tourists with id \"pIdTurista\"\nBeanVisitaPR [] visited = null;\nif (pIdTurista> 0)\n(\nTRY\n(\nArrayList <BeanVisitaPR> listavisitati = visitatiPR.ottieniListaVisitaPRTurista (pIdTurista);\nvisited = new BeanVisitaPR [listavisitati.size ()];\nvisited = listavisitati.toArray (visited);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n\n)\nreturn visit;\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciBeneCulturaleVisitato (unisa.gps.etour.bean.BeanVisitaBC)\n* /\npublic boolean inserisciBeneCulturaleVisitato (BeanVisitaBC pVisitaBC) throws RemoteException\n(\nif (ControlloDati.checkBeanVisitaBC (pVisitaBC))\n(\nTRY\n(\n\nreturn visitatiBC.inserisciVisitaBC (pVisitaBC);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn false;\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPuntoDiRistoroVisitato (unisa.gps.etour.bean.BeanVisitaPR)\n* /\npublic boolean inserisciPuntoDiRistoroVisitato (BeanVisitaPR pVisitaPR) throws RemoteException\n(\nif (ControlloDati.checkBeanVisitaPR (pVisitaPR))\n(\nTRY\n(\nreturn visitatiPR.inserisciVisitaPR (pVisitaPR);\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn false;\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciBeneCulturalePreferito (int,\n* Int)\n* /\npublic boolean inserisciBeneCulturalePreferito (pIdTurista int, int pIdBeneCulturale) throws RemoteException\n(\nif (pIdTurista> 0 & & pIdBeneCulturale> 0)\n(\nTRY\n(\nreturn profiloTurista.inserisciBeneCulturalePreferito (pIdTurista, pIdBeneCulturale);\n)\ncatch (SQLException e)\n(\n\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn false;\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPuntoDiRistoroPreferito (int,\n* Int)\n* /\npublic boolean inserisciPuntoDiRistoroPreferito (pIdTurista int, int pIdPuntoDiRistoro) throws RemoteException\n(\nif (pIdTurista> 0 & & pIdPuntoDiRistoro> 0)\n(\nTRY\n(\nreturn profiloTurista.inserisciPuntoDiRistoroPreferito (pIdTurista, pIdPuntoDiRistoro);\n)\ncatch (SQLException e)\n(\n\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn false;\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaBeneCulturalePreferito (int,\n* Int)\n* /\npublic boolean cancellaBeneCulturalePreferito (pIdTurista int, int pIdBeneCulturale) throws RemoteException\n(\nif (pIdTurista> 0 & & pIdBeneCulturale> 0)\n(\nTRY\n(\nreturn profiloTurista.cancellaBeneCulturalePreferito (pIdTurista, pIdBeneCulturale);\n)\ncatch (SQLException e)\n(\n\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn false;\n)\n\n/ *\n* (Non-Javadoc)\n*\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaPuntoDiRistoroPreferito (int,\n* Int)\n* /\npublic boolean cancellaPuntoDiRistoroPreferito (pIdTurista int, int pIdPuntoDiRistoro) throws RemoteException\n(\nif (pIdTurista> 0 & & pIdPuntoDiRistoro> 0)\n(\nTRY\n(\nreturn profiloTurista.cancellaPuntoDiRistoroPreferito (pIdTurista, pIdPuntoDiRistoro);\n)\ncatch (SQLException e)\n(\n\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn false;\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniBeniCulturaliPreferiti (int)\n* /\npublic BeanBeneCulturale [] ottieniBeniCulturaliPreferiti (int pIdTurista) throws RemoteException\n(\nif (pIdTurista> 0)\n(\nTRY\n(\n/ / List of cultural favorites of tourists cn id = \"pIdTurista\"\nArrayList <Integer> listaPreferiti = profiloTurista.ottieniBeniCulturaliPreferiti (pIdTurista);\n/ / Convert ArrayList a simple array\nBeanBeneCulturale [] favorites = null;\nFavorite = new BeanBeneCulturale [listaPreferiti.size ()];\nFavorite listaPreferiti.toArray = (favorites);\n\nint k = 0, / / Cycle counter\nfor (Integer i: listaPreferiti)\n(\n/ / Fill the array with the favorite bean of all cultural favorites from the tourist\nFavorites [k + +] = beneCulturale.ottieniBeneCulturale (i);\n)\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn null;\n)\n\n/ * (Non-Javadoc)\n* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniPuntiDiRistoroPreferiti (int)\n* /\npublic BeanPuntoDiRistoro [] ottieniPuntiDiRistoroPreferiti (int pIdTurista) throws RemoteException\n(\nif (pIdTurista> 0)\n(\nTRY\n(\n/ / List of places for refreshment favorite tourist cn id = \"pIdTurista\"\nArrayList <Integer> listaPreferiti = profiloTurista.ottieniPuntoDiRistoroPreferiti (pIdTurista);\n\n/ / Convert ArrayList a simple array\nBeanPuntoDiRistoro [] favorites = null;\nFavorite = new BeanPuntoDiRistoro [listaPreferiti.size ()];\nFavorite listaPreferiti.toArray = (favorites);\n\nint k = 0, / / Cycle counter\nfor (Integer i: listaPreferiti)\n(\n/ / Fill the array with the favorite bean of all cultural favorites from the tourist\nFavorites [k + +] = puntoDiRistoro.ottieniPuntoDiRistoro (i);\n)\n)\ncatch (SQLException e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_DBMS);\n)\ncatch (Exception e)\n(\nthrow new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);\n)\n)\nreturn null;\n)\n)\n\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942b2"},"name":"SchedaTurista.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942af"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d1"}]],"contents":"ï»¿package unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt .*;\nimport java.awt.event .*;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport javax.swing .*;\nimport java.util .*;\nimport javax.swing.border .*;\nimport unisa.gps.etour.bean.BeanTurista;\nimport unisa.gps.etour.util.Data;\n\n/ **\n  * Class that models the interface for displaying the card and\n  * Modify the data of an account tourist.\n  *\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class SchedaTurista extends JInternalFrame implements IScheda tourist\n(\n\nprivate static final String [] help = ( \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n\"\" \"\" \"\" \"\" \"\");\nprivate JPanel jContentPane = null;\nPrivate tourist JToolBar toolbarscheda = null;\nPrivate JToggleButton btnModifica = null;\nprivate JButton btnSalva = null;\nprivate JButton btnReimposta = null;\nprivate JTabbedPane JTabbedPane = null;\nprivate JTextField address2 = null;\nprivate JComboBox Address1 = null;\nprivate JTextField city = null;\nprivate JTextField ch = null;\nprivate JTextField phone = null;\nprivate JComboBox province = null;\nprivate JPanel datiTurista = null;\nprivate JTextField name = null;\nprivate Vector <JLabel> suggestions;\nPrivate BeanTurista tourist;\nprivate JTextField name;\nprivate JComboBox day;\nprivate JComboBox month;\nprivate JComboBox years;\nprivate JTextField luogoNascita;\nprivate JTextField email;\nprivate JTextField username;\nPrivate JPasswordField password;\nprivate JLabel dataRegistrazione;\nPrivate Tourists parent;\n\n/ **\n*\n* The only card manufacturer model of a tourist or modification of data\n* From the bean.\n*\n* @ Param pParent unisa.gps.etour.gui.operatoreagenzia.Turisti - the window \"father.\"\n* @ Param pTurista unisa.gps.etour.bean.BeanTurista - the bean contentente data\n* Of the tourist.\n* @ Param boolean pModifica <ul> <li> true - if amendments are made to the\n* Data. <li> False - if you are viewing the card.\n*\n* /\nPublic profile tourists (tourism pParent, BeanTurista pTurista,\nboolean pModifica)\n(\nsuper ();\nthis.parent = pParent;\nsetIconifiable (true);\nsetSize (560, 520);\nsuggestions <JLabel> = new Vector ();\nsetDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);\nsetClosable (true);\ntourist = pTurista;\nif (turista.isAttiva ())\n(\nframeIcon = new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa / gps / eTour / gui / operatoreagenzia / images / tab turista.png\"));\n)\nelse\n(\nframeIcon = new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista32.png\"));\n)\ninitialize ();\nif (pModifica)\n(\nbtnModifica.setSelected (true);\nbtnSalva.setVisible (true);\nbtnReimposta.setVisible (true);\n)\nelse\n(\nmostraNascondiSuggerimenti ();\nattivaDisattivaEdit ();\n)\naddInternalFrameListener (new InternalFrameAdapter ()\n(\npublic void internalFrameClosing (InternalFrameEvent pEvent)\n(\nif (btnModifica.isSelected ())\n(\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to close the tab of this tourist?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"Warning! Unsaved data will be lost.\" SwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Close\", \"Cancel\");\nint choice = JOptionPane.showInternalOptionDialog (jContentPane, root,\n\"Confirm closing Tourist Card\" + turista.getNome () + \"\" + turista.getCognome (),\nJOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, options, options [1]);\nif (choice == JOptionPane.OK_OPTION)\n(\nparent.closeScheda ((tourist board) pEvent.getInternalFrame ());\n)\n)\nelse\n(\nparent.closeScheda ((tourist board) pEvent.getInternalFrame ());\n)\n)\n));\n)\n\n/ **\n*\n* This method initializes the interface card for tourists.\n*\n* @ Return void\n*\n* /\nprivate void initialize ()\n(\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (tourist getToolbarscheda (), BorderLayout.CENTER);\nJTabbedPane = new JTabbedPane ();\njTabbedPane.setCursor (new Cursor (Cursor.DEFAULT_CURSOR));\njTabbedPane.addTab ( \"Tourist Information\", frameIcon, getDatiTuristaForm (),\nnull);\njContentPane.add (JTabbedPane, BorderLayout.CENTER);\nsetContentPane (jContentPane);\ncaricaDatiForm ();\n)\n\n/ **\n*\n* This method loads the bean data provided tourist camps\n* Of the form.\n*\n* @ Return void\n*\n* /\nprivate void caricaDatiForm ()\n(\nsetTitle ( \"Profile Tourist -\" + turista.getNome () + \"\"\nTurista.getCognome + ());\nnome.setText (turista.getNome ());\ncognome.setText (turista.getCognome ());\nDate dob = turista.getDataNascita ();\ngiorno.setSelectedIndex (dataNascita.getDate ());\nmese.setSelectedIndex (dataNascita.getMonth ());\nanno.setSelectedIndex (dataNascita.getYear ());\nStringTokenizer tokenizer = new StringTokenizer (turista.getVia ());\nString string = tokenizer.nextToken ();\nindirizzo1.setSelectedItem (string);\nindirizzo2.setText (turista.getVia (). substring (stringa.length ()));\nluogoNascita.setText (turista.getCittaNascita ());\ntelefono.setText (turista.getTelefono ());\ncitta.setText (turista.getCittaResidenza ());\npassword.setText (turista.getPassword ());\nprovincia.setSelectedItem (turista.getProvincia ());\nusername.setText (turista.getUsername ());\ncap.setText (turista.getCap ());\nemail.setText (turista.getEmail ());\ndataRegistrazione\n. setText (Data.toEstesa (turista.getDataRegistrazione ()));\n)\n\n/ **\n*\n* This method shows or hides the suggestions relating to the form fields.\n*\n* @ Return void\n*\n* /\nprivate void mostraNascondiSuggerimenti ()\n(\n<JLabel> S = suggerimenti.iterator iterator ();\nwhile (s.hasNext ())\n(\nCurrent = s.next JLabel ();\ncorrente.setVisible (corrente.isVisible ()? false: true);\n)\n)\n\n/ **\n*\n* This method makes it or not editable form fields.\n*\n* @ Return void\n*\n* /\nprivate void attivaDisattivaEdit ()\n(\nComponent [] components = datiTurista.getComponents ();\nfor (int i = 0; i <componenti.length i + +)\n(\nCurrent component = components [i];\nif (current instanceof JTextField)\n(\nJTextField textbox = (JTextField) current;\ntextbox.setEditable (textbox.isEditable ()? false: true);\ntextbox.setBackground (Color.white);\n\n)\nelse if (current instanceof JComboBox)\n(\nJComboBox combo = (JComboBox) current;\ncombobox.setEnabled (combobox.isEnabled ()? false: true);\n\n)\n)\n)\n\n/ **\n* This method initializes the toolbar for the functionality of the card\n* Tourist.\n*\n* @ Return javax.swing.JToolBar\n*\n* /\nPrivate tourist JToolBar getToolbarscheda ()\n(\nif (toolbarscheda tourist == null)\n(\ntourist toolbarscheda JToolBar = new ();\ntoolbarscheda turista.setFloatable (false);\ntoolbarscheda turista.add (getBtnModifica ());\ntoolbarscheda turista.addSeparator ();\ntoolbarscheda turista.add (getBtnSalva ());\ntoolbarscheda turista.addSeparator ();\ntoolbarscheda turista.add (getBtnReimposta ());\ntoolbarscheda turista.addSeparator ();\n)\nreturn toolbarscheda tourist;\n)\n\n/ **\n* This method initializes the button for editing data.\n*\n* @ Return javax.swing.JToggleButton\n*\n* /\nPrivate JToggleButton getBtnModifica ()\n(\nif (null == btnModifica)\n(\nbtnModifica JToggleButton = new ();\nbtnModifica.setText ( \"Change Data\");\nbtnModifica\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/ModificaTurista32.png \")));\nbtnModifica\n. setToolTipText ( \"Enable or disable data modification tourists selected.\");\nbtnModifica.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nmostraNascondiSuggerimenti ();\nattivaDisattivaEdit ();\nbtnSalva.setVisible ((btnModifica.isSelected ()? true\n: False));\nbtnReimposta.setVisible ((btnModifica.isSelected ()? true\n: False));\n\n)\n\n));\n)\nbtnModifica return;\n)\n\n/ **\n* This method initializes the button to save the changes\n* Made to the data of the tourist.\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnSalva ()\n(\nif (null == btnSalva)\n(\nbtnSalva = new JButton ();\nbtnSalva.setText ( \"Save\");\nbtnSalva.setIcon (new ImageIcon (getClass (). getResource (\n\"/ unisa / gps / eTour / gui / operatoreagenzia / images / salva.png \")));\nbtnSalva\n. setToolTipText ( \"Save changes to the tourist profile selected.\");\nbtnSalva.setVisible (false);\nbtnSalva.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\n/ / Construction of the dialog for confirmation of the change\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Updating the tourist profile of\"\nTurista.getNome + () + \"\"\nTurista.getCognome + () + \"with\"\n+ \"Data form?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"The previous data can not be more recovered.\"\nSwingConstants.CENTER);\nLegal\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Edit\", \"Cancel\");\n/ / The dialog screen appears\nint choice = JOptionPane\n. showInternalOptionDialog (\njContentPane,\nroot\n\"Commit Changes tourist figures,\nJOptionPane.YES_NO_OPTION,\nJOptionPane.QUESTION_MESSAGE,\nnew ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/ModificaTurista48.png\")),\noptions, options [1]);\n/ / If you chose to confirm the change\nif (choice == JOptionPane.YES_OPTION)\n(\nturista.setNome (nome.getText ());\nturista.setCognome (cognome.getText ());\nturista.setCap (cap.getText ());\nturista.setCittaNascita (luogoNascita.getText ());\nturista.setDataNascita (new Date (\nanno.getSelectedIndex (), month\n. getSelectedIndex (), day\n. getSelectedIndex ()));\nturista.setCittaResidenza (citta.getText ());\nturista.setUsername (username.getText ());\nturista.setEmail (email.getText ());\nturista.setTelefono (telefono.getText ());\nturista.setVia (indirizzo1.getSelectedItem (). toString ()\n+ \"\" + Indirizzo2.getText ());\nturista.setProvincia (provincia.getSelectedItem ()\n. toString ());\nString pass = \"\";\nchar [] password = password.getPassword ();\nfor (int i = 0; i <passWord.length i + +)\n(\npass + = password [i];\n)\nturista.setPassword (pass);\ncaricaDatiForm ();\nattivaDisattivaEdit ();\nbtnSalva.setVisible (false);\nbtnReimposta.setVisible (false);\nbtnModifica.setSelected (false);\nmostraNascondiSuggerimenti ();\nparent.updateTableModel (tourists);\nJOptionPane\n. showInternalMessageDialog (\njContentPane,\nThe data of tourists have been updated successfully. \"\n\"Modified Profile Tourist!\"\nJOptionPane.OK_OPTION,\nnew ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/ok48.png \")));\n)\n)\n));\n)\nbtnSalva return;\n)\n\n/ **\n* This method initializes the button to reset the data of the tourist\n* In the form.\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnReimposta ()\n(\nif (null == btnReimposta)\n(\nbtnReimposta = new JButton ();\nbtnReimposta.setText ( \"Reset\");\nbtnReimposta\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\n\"/ unisa/gps/etour/gui/operatoreagenzia/images/Annulla32.png \")));\nbtnReimposta\n. setToolTipText ( \"Reload the selected tourist information.\");\nbtnReimposta.setVisible (false);\nbtnReimposta.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent arg0)\n(\ncaricaDatiForm ();\n)\n));\n)\nbtnReimposta return;\n)\n\n/ **\n* This method initializes the form contentente data of the tourist.\n*\n* @ Return javax.swing.JPanel\n*\n* /\nprivate JPanel getDatiTuristaForm ()\n(\nif (null == datiTurista)\n(\ndatiTurista = new JPanel (null);\ndatiTurista.setBorder (new SoftBevelBorder (SoftBevelBorder.LOWERED));\n/ / Creation Tips\nString [] txts = ( \"Name\", \"Name\", \"Date of Birth\",\n\"Place of Birth\", \"Phone\", \"Address\", \"City\",\n\"CPC\", \"Province\", \"E-Mail\", \"Username\", \"Password\",\n\"Save\");\n\nfor (int i = 0; i <help.length i + +)\n(\nJLabel new = new JLabel ();\nnuova.setIcon (new ImageIcon (getClass (). getResource (\n\"/ unisa/gps/etour/gui/images/Info16.png \")));\nnuova.setBounds (145, 8 + 30 * i, 24, 24);\nnuova.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nnuova.setToolTipText (help [i]);\nsuggerimenti.add (new);\ndatiTurista.add (new);\n\n)\n\nfor (int i = 0; i <txts.length i + +)\n(\nNew = new JLabel JLabel (txts [i], SwingConstants.RIGHT);\nnuova.setBounds (25, 10 + 30 * i, 120, 20);\nnuova.repaint ();\ndatiTurista.add (new, null);\n)\n/ / Name\nname = new JTextField (12);\nnome.setBounds (185, 10, 136, 20);\nnome.setName ( \"Name\");\ndatiTurista.add (name, null);\n\n/ / Surname\nname = new JTextField (12);\ncognome.setBounds (185, 40, 136, 20);\ncognome.setName ( \"Name\");\ndatiTurista.add (name, null);\n\n/ / Date of Birth\nday = new JComboBox ();\ngiorno.setBounds (185, 70, 40, 20);\nfor (int i = 1; i <= 31; i + +)\n(\ngiorno.addItem (i);\n)\nmonth = new JComboBox ();\nmese.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent pEvent)\n(\nint number = giorno.getItemCount ();\nswitch (mese.getSelectedIndex ())\n(\ncase 0:\ncase 2:\ncase 4:\ncase 6:\ncase 7:\ncase 9:\ncase 11:\nfor (int i = number + 1; i <= 31; i + +)\n(\ngiorno.addItem (i);\n)\nbreak;\n\ncase 1:\nint year = (Integer) anno.getSelectedItem ();\nboolean leap = ((year% 4 == 0 & & year% 100! = 0) | | (year% 400 == 0));\nif (number! = 28)\n(\nfor (int i = number - 1, i> 27; i -)\n(\ngiorno.removeItemAt (i);\n)\n)\nif (leap & & number! = 29)\n(\ngiorno.addItem ( \"29\");\n)\nbreak;\n\ncase 3:\ncase 5:\ncase 8:\ncase 10:\nif (number == 31)\n(\ngiorno.removeItemAt (30);\n)\nelse\n(\nfor (int i = number + 1; i <= 30; i + +)\n(\ngiorno.addItem (i);\n)\n)\nbreak;\n)\n)\n\n));\nmese.setBounds (245, 70, 40, 20);\nfor (int i = 1; i <= 12; i + +)\n(\nmese.addItem (i);\n)\nyear = new JComboBox ();\nanno.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nif (mese.getSelectedIndex () == 1)\n(\nint year = (Integer) anno.getSelectedItem ();\nboolean leap = ((year% 4 == 0 & & year% 100! = 0) | | (year% 400 == 0));\nint number = giorno.getItemCount ();\nif (leap & & number! = 29)\n(\ngiorno.addItem ( \"29\");\n)\nelse if (leap & & number == 29)\n(\ngiorno.removeItemAt (28);\n)\n)\n\n)\n\n));\nanno.setBounds (305, 70, 80, 20);\nDate today = new Date ();\nfor (int i = 0; i <= odierna.getYear () - 14; i + +)\n(\nanno.addItem (1900 + i);\n)\ndatiTurista.add (day, null);\ndatiTurista.add (month, null);\ndatiTurista.add (year, null);\n\n/ / Place of Birth\nluogoNascita = new JTextField (12);\nluogoNascita.setBounds (185, 100, 136, 20);\nluogoNascita.setName ( \"Birth Place\");\ndatiTurista.add (luogoNascita, null);\n\n/ / Phone\nphone = new JTextField (12);\ntelefono.setBounds (185, 130, 136, 20);\ntelefono.setName ( \"Phone\");\ndatiTurista.add (telephone, null);\n\n/ / Address\naddress2 = new JTextField (12);\nindirizzo2.setBounds (270, 160, 136, 20);\nAddress1 = new JComboBox (address);\nindirizzo1.setSelectedIndex (-1);\nindirizzo1.setBounds (185, 160, 60, 20);\ndatiTurista.add (address2, null);\ndatiTurista.add (Address1, null);\n\n/ / City\ncity = new JTextField (12);\ncitta.setBounds (185, 190, 136, 20);\ncitta.setName ( \"City\");\ndatiTurista.add (city, null);\n\n/ / CAP\nch = new JTextField (8);\ncap.setBounds (185, 220, 92, 20);\ndatiTurista.add (cap, null);\n\n/ / State\nprovince = new JComboBox (province);\nprovincia.setSelectedIndex (-1);\nprovincia.setBounds (185, 250, 50, 20);\ndatiTurista.add (province, null);\n\n/ / E-Mail\nemail = new JTextField ();\nemail.setBounds (185, 280, 200, 20);\nemail.setName ( \"E-Mail\");\ndatiTurista.add (email, null);\n\n/ / Username\nusername = new JTextField ();\nusername.setBounds (185, 310, 136, 20);\nusername.setName ( \"Username\");\ndatiTurista.add (username, null);\n\n/ / Password\npassword = new JPasswordField (12);\npassword.setBounds (185, 340, 136, 20);\npassword.setName ( \"Password\");\ndatiTurista.add (password, null);\n\n/ / Data entry\ndataRegistrazione = new JLabel ();\ndataRegistrazione.setBounds (185, 370, 140, 20);\ndatiTurista.add (dataRegistrazione, null);\n)\ndatiTurista return;\n)\n\n/ **\n* This method returns the id of the tourist who is viewing /\n* Edit.\n*\n* @ Return int - the id of the tourist.\n*\n* /\npublic int getId ()\n(\nturista.getId return ();\n)\n) "}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942b5"},"name":"IAutenticazione.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b4"}],["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b7"}]],"contents":"package unisa.gps.etour.control.GestioneUtentiRegistrati;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\n\n/ **\n  * Interface relating to operations performed by the User login and logout\n  * Register\n  *\n  * @ Author Joseph Penna\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab University of DMI\n  * Salerno\n  * /\npublic interface extends Remote IAutenticazione\n(\n\n/ / Static constants that identify the type of users who\n/ / True\npublic static final byte VISITORS = 0;\npublic static final byte OP_PUNTO_DI_RISTORO = 1;\n\n/ **\n* Method to authenticate a registered user (Turista - Operator\n* Refreshment)\n*\nUsername * @ param pUserName on a Registered User\n* @ Param password for pPassword Registered User\n* @ Param type pTipologiaUtente user is authenticated\n* @ Return If the data are correct user ID logged in the event\nOtherwise -1 *\n* /\npublic int login (String pUsername, String pPassword, byte pTipologiaUtente)\nthrows RemoteException;\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942b6"},"name":"BeanOperatorePuntoDiRistoro.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b4"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\n/ **\n  * Bean containing information relating to food\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class BeanOperatorePuntoDiRistoro implements Serializable\n(\nprivate int id;\nprivate String name;\nprivate String name;\nprivate String username;\nprivate String password;\nprivate String email;\nprivate int idPuntoDiRistoro;\nprivate static final long serialVersionUID =-6485826396352557404L;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param Pnom\n* @ Param pCognome\n* @ Param pUsername\n* @ Param pPassword\n* @ Param pEmail\n* @ Param pIdPuntoDiRistoro\n* /\npublic BeanOperatorePuntoDiRistoro (int pid, Phnom String, String pCognome,\nPUsername String, String pPassword, String pEmail,\nint pIdPuntoDiRistoro)\n(\nsetId (PID);\nsetNome (Phnom);\nsetCognome (pCognome);\nsetUsername (pUsername);\nsetPassword (pPassword);\nsetEmail (pEmail);\nsetIdPuntoDiRistoro (pIdPuntoDiRistoro);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanOperatorePuntoDiRistoro ()\n(\n\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getCognome ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new value of name\n*\n* @ Param value New pCognome surname.\n* /\npublic void setCognome (String pCognome)\n(\nlast = pCognome;\n)\n\n/ **\n* Returns the value of email\n*\n* @ Return value of email.\n* /\npublic String getEmail ()\n(\nreturn email;\n)\n\n/ **\n* Sets the new value of email\n*\n* @ Param pEmail New value of email.\n* /\npublic void setEmail (String pEmail)\n(\nemail = pEmail;\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getName ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new name value\n*\n* @ Param name New value Pnom.\n* /\npublic void setNome (String Pnom)\n(\nname = Pnom;\n)\n\n/ **\n* Returns the value of password\n*\n* @ Return value of password.\n* /\npublic String getPassword ()\n(\nreturn password;\n)\n\n/ **\n* Sets the new password value\n*\n* @ Param pPassword new password value.\n* /\npublic void setPassword (String pPassword)\n(\npassword = pPassword;\n)\n\n/ **\n* Returns the value of username\n*\n* @ Return value of username.\n* /\npublic String GetUserName ()\n(\nreturn username;\n)\n\n/ **\n* Sets the new value of username\n*\n* @ Param pUsername New value for username.\n* /\npublic void setUsername (String pUsername)\n(\nusername = pUsername;\n)\n\n/ **\n* Returns the value of idPuntoDiRistoro\n*\n* @ Return value idPuntoDiRistoro.\n* /\npublic int getIdPuntoDiRistoro ()\n(\nidPuntoDiRistoro return;\n)\n\n/ **\n* Sets the new value of idPuntoDiRistoro\n*\n* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.\n* /\npublic void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)\n(\nidPuntoDiRistoro = pIdPuntoDiRistoro;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942b9"},"name":"GestioneAdvertisementPuntoDiRistoro.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bd"}]],"contents":"ï»¿/ **\n  * Class that implements management services dell'advertisement\n  * For the operator eating place.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno\n  * /\npackage unisa.gps.etour.control.GestioneAdvertisement;\n\nimport java.rmi.RemoteException;\n\npublic class GestioneAdvertisementPuntoDiRistoro extends GestioneAdvertisement\nimplements IGestioneAdvertisementPuntoDiRistoro\n(\n\nprivate static final long serialVersionUID = 1L;\n\n/ **\n* Constructor, call the constructor of the superclass.\n* @ Throws RemoteException\n* /\npublic GestioneAdvertisementPuntoDiRistoro () throws RemoteException\n(\nsuper ();\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942ba"},"name":"IGestioneAdvertisementPuntoDiRistoro.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bd"}]],"contents":"ï»¿/ **\n  * Interface that provides management services dell'advertisement\n  * Operator eating place.\n  *\n  * @ Author Fabio Palladino\n  * @ Version 0.1\n  *\n  * 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno\n  * /\npackage unisa.gps.etour.control.GestioneAdvertisement;\n\npublic interface extends IGestioneAdvertisementPuntoDiRistoro\nIGestioneAdvertisement\n(\n/ / Empty interface\n)"}
{"_id":{"$oid":"5ea8c53a6864fdc7df6942bb"},"name":"BannerDialog.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53a6864fdc7df6942b8"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942bc"}]],"contents":"ï»¿package unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt .*;\nimport java.awt.event .*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\nimport javax.swing .*;\nimport javax.swing.filechooser.FileFilter;\nimport javax.swing.border .*;\n\nimport unisa.gps.etour.gui.operatoreagenzia.Home;\n\n/ **\n  * This class realizes the panel for the dialog for entering a\n  * New banner or a banner for replacing selected.\n  *\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  * /\npublic class JPanel extends BannerDialog\n(\nprivate final static Dimension bannerSize = new Dimension (140, 40);\nprivate JLabel preview = null;\nprivate JButton btnCarica = null;\nprivate JPanel that;\n\n/ **\n* This is the default constructor.\n* /\npublic BannerDialog ()\n(\nsuper (null);\nthis = this;\nsetPreferredSize (new Dimension (420, 160));\npreview = new JLabel ();\nanteprima.setBounds (new Rectangle (40, 20, 250, 60));\nanteprima.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3),\nPreview Banner \", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION,\nnew Font ( \"Dialog\", Font.BOLD, 12), new Color (0, 102, 204)));\nbtnCarica = new JButton ();\nbtnCarica.setBounds (new Rectangle (320, 30, 50, 40));\nbtnCarica.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"ApriFile.png \")));\nbtnCarica.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nFile f = apriFileDialog ();\n\nif (f == null)\n(\nreturn;\n)\n\nBufferedImage img = null;\nTRY\n(\nimg = ImageIO.read (f);\nif (img.getWidth ()> bannerSize.width\n| | Img.getHeight ()> bannerSize.height)\n(\nimg.getSubimage img = (0, 0, bannerSize.width,\nbannerSize.height);\n)\n)\ncatch (Exception e)\n(\ne.printStackTrace ();\n)\nN = new ImageIcon ImageIcon (img);\nanteprima.setIcon (n);\nanteprima.repaint ();\n)\n));\n\nJLabel txtAttenzione = new JLabel ( \"Warning!\");\ntxtAttenzione.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\ntxtAttenzione.setBounds (10, 85, 100, 30);\nJLabel txtTest = new JLabel (\n\"<html> <ul> <li> image for the banner can not exceed <b> <font color=\\\"red\\\">\"\n+ BannerSize.width\n+ \"X\"\n+ BannerSize.height\n+ \"</ Font> </ b> pixels.\"\n+ \"<li> Images of magnitude larger will be resized. </ Ul> </ html>\");\ntxtTesto.setBounds (0, 90, 420, 80);\nadd (txtTest, null);\nadd (txtAttenzione, null);\nadd (prev, null);\nadd (btnCarica, null);\n\n)\n\n/ **\n* This method initializes the image contained in the preview.\n*\n* @ Param pBanner ImageIcon - an image of a banner.\n* /\npublic void setSelectedBanner (ImageIcon pBanner)\n(\nanteprima.setIcon (pBanner);\n)\n\n/ **\n* This method returns the image contained in the preview.\n*\n* @ Return ImageIcon - the image of the banner.\n* /\npublic ImageIcon getSelectedBanner ()\n(\nreturn (ImageIcon) anteprima.getIcon ();\n)\n\n/ **\n* This method opens the dialog for selecting a file from disk.\n*\n* @ Return\n* <ul>\n* <li> Files - the selected file.\n* <li> Null - if you have not selected any files.\n* </ Ul>\n* /\nprivate File apriFileDialog ()\n(\nJFileChooser apriFile = new JFileChooser ();\napriFile.setDialogTitle ( \"Select a new image\");\napriFile.setAcceptAllFileFilterUsed (false);\napriFile.setMultiSelectionEnabled (false);\n\n/ / File Filter for the window to open the file.\napriFile.setFileFilter (new FileFilter ()\n(\npublic boolean accept (File arg0)\n(\nif (arg0.isDirectory ())\nreturn true;\nString name = arg0.getName (). ToLowerCase ();\nif (nome.endsWith ( \"jpg\") | | nome.endsWith ( \"gif\")\n| | Nome.endsWith ( \"png\"))\nreturn true;\nelse\nreturn false;\n)\n\npublic String getDescription ()\n(\nreturn \"Images (*. PNG, *. GIF, *. JPG)\";\n)\n\n));\nint returnVal = apriFile.showOpenDialog (this);\nif (returnVal == JFileChooser.APPROVE_OPTION)\n(\napriFile.getSelectedFile return ();\n)\nelse\nreturn null;\n\n)\n\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942bf"},"name":"DBMenu.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942be"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c5"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport Java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanMenu;\n\n/ **\n  * Class that implements the interface Menu\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class DBMenu implements IDBMenu\n(\n/ / Empty constructor\npublic DBMenu ()\n(\n\n)\n\npublic boolean cancellaMenu (int pIdMenu) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query cancellation\nString query = \"DELETE FROM menu WHERE id =\" + pIdMenu;\n/ / You run the query Cancellation\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Is always done and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic boolean inserisciMenu (BeanMenu pMenu) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the insertion\nString query = \"INSERT INTO menu (Day, IdPuntoDiRistoro) VALUES ( '\"\n+ PMenu.getGiorno ()\n+ \" ',\"\n+ PMenu.getIdPuntoDiRistoro ()\n+ \")\";\n/ / You run the insert query\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean modificaMenu (BeanMenu pMenu) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for amendment\nString query = \"UPDATE menu SET\" + \"Date = '\"\nPMenu.getGiorno + () + \" 'WHERE Id =\" + pMenu.getId ();\n/ / You run the query for Change\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Is always done and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n<BeanMenu> ottieniMenu public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of Menu\nString query = \"SELECT * FROM menu WHERE IdPuntoDiRistoro =\"\n+ PIdPuntoDiRistoro;\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / List that will contain all BeanMenu obtained\n<BeanMenu> ArrayList list = new ArrayList <BeanMenu> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\n/ / Fill the list\nlist\n. add (new BeanMenu (result.getInt ( \"Id\"), result\n. getString ( \"Day\"), result\n. getInt ( \"IdPuntoDiRistoro \")));\n)\n/ / Return the list\nreturn list;\n)\n/ / Is always done and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic BeanMenu ottieniMenuDelGiorno (int pIdPuntoDiRistoro, String pGiorno)\nthrows SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the extraction of Daily Menu\nString query = \"SELECT * FROM menu WHERE IdPuntoDiRistoro =\"\nPIdPuntoDiRistoro + + \"AND day = '\" + pGiorno + \"'\";\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / Get the bean of the daily menu based on the ID of the point of\n/ / Dining and a day\nBeanMenu beanTemp = null;\nif (result.next ())\n(\n/ / Create the proceeds Bean\nbeanTemp = new BeanMenu (result.getInt ( \"Id\"), result\n. getString ( \"Day\"), result.getInt ( \"IdPuntoDiRistoro\"));\n)\n/ / Return the Bean obtained\nbeanTemp return;\n)\n/ / Is always done and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942c0"},"name":"IDBMenu.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942be"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c5"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanMenu;\n\n\n/ **\n  * Interface for managing the menu in the database\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBMenu\n(\n/ **\n* Adds a menu in the database\n*\n* @ Param pMenu menu to add\n* @ Throws SQLException\n* /\npublic boolean inserisciMenu (BeanMenu pMenu) throws SQLException;\n\n/ **\n* Modify a menu in the database\n*\n* @ Param pMenu Contains the data to change\n* @ Throws SQLException\n* @ Return True if there 'was a modified false otherwise\n* /\npublic boolean modificaMenu (BeanMenu pMenu) throws SQLException;\n\n/ **\n* Delete a menu from database\n*\n* @ Param ID pIdMenu menu to delete\n* @ Throws SQLException\n* @ Return True if and 'was deleted false otherwise\n* /\npublic boolean cancellaMenu (int pIdMenu) throws SQLException;\n\n/ **\n* Returns the menu of the day of a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshments\n* @ Param pGiorno Day of the week in which the menu\n* Daily\n* @ Throws SQLException\n* @ Return Day menu de Refreshment\n* /\npublic BeanMenu ottieniMenuDelGiorno (int pIdPuntoDiRistoro, String pGiorno)\nthrows SQLException;\n\n/ **\n* Returns a list of the menu of a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshment\n* @ Throws SQLException\n* @ Return List of menus\n* /\n<BeanMenu> ottieniMenu public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException;\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942c1"},"name":"DBPiatto.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942be"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c5"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport Java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanPiatto;\n\n/ **\n  * Class that implements the interface plate\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class DBPiatto implements IDBPiatto\n(\n/ / Empty constructor\npublic DBPiatto ()\n(\n\n)\n\npublic boolean cancellaPiatto (int pIdPiatto) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query cancellation\nString query = \"DELETE FROM courses WHERE ID =\" + pIdPiatto;\n/ / You run the query Cancellation\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean inserisciPiatto (BeanPiatto pPiatto) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the insertion\nString query = \"INSERT INTO courses (Name, Price, IdMenu) VALUES ( '\"\nPPiatto.getNome + () + \" ',\" + pPiatto.getPrezzo () + \"'\nPPiatto.getIdMenu + () + \")\";\n/ / You run the insert query\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean modificaPiatto (BeanPiatto pPiatto) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for amendment\nString query = \"UPDATE courses SET\" + \"Name = '\"\nPPiatto.getNome + () + \" ', Price =\" + pPiatto.getPrezzo ()\n+ \", IdMenu =\" + pPiatto.getIdMenu () + \"WHERE Id =\"\n+ PPiatto.getId ();\n/ / You run the query for Change\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n<BeanPiatto> ottieniPiatto public ArrayList (int pIdMenu) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of dishes given the id of the Menu\nString query = \"SELECT * FROM courses WHERE IdMenu =\" + pIdMenu;\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / List that contains all the plates obtained\n<BeanPiatto> ArrayList list = new ArrayList <BeanPiatto> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\n/ / Add the list BeanPiatto\nlista.add (new BeanPiatto (result.getInt ( \"Price\"), result\n. getString ( \"Name\"), result.getInt ( \"IdMenu\"), result\n. getInt ( \"id \")));\n)\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942c2"},"name":"IDBPiatto.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942be"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c5"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanPiatto;\n\n/ **\n  * Interface for the management of food in the database\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBPiatto\n(\n/ **\n* Add a dish\n*\n* @ Param pPiatti plate add\n* /\npublic boolean inserisciPiatto (BeanPiatto pPiatto) throws SQLException;\n\n/ **\n* Modify the data in a flat in the database\n*\n* @ Param pPiatti data plate to be inserted in database\n* @ Return True if there 'was a modified false otherwise\n* /\npublic boolean modificaPiatto (BeanPiatto pPiatto) throws SQLException;\n\n/ **\n* Delete a dish from the database\n*\n* @ Param pIdPiatto ID plate eliminre\n* @ Throws SQLException\n* @ Return True if and 'was deleted false otherwise\n* /\npublic boolean cancellaPiatto (int pIdPiatto) throws SQLException;\n\n/ **\n* Returns a list of dishes on a menu\n*\n* @ Param ID pIdMenu menu\n* @ Throws SQLException\n* @ Return list of dishes in the menu\n* /\n<BeanPiatto> ottieniPiatto public ArrayList (int pIdMenu) throws SQLException;\n\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942c3"},"name":"BeanMenu.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942be"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c5"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\n/ **\n  * Bean containing information relating to a Menu\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class BeanMenu implements Serializable\n(\nprivate static final long serialVersionUID =-3112032222839565409L;\nprivate int id;\nprivate String day;\nprivate int idPuntoDiRistoro;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param pGiorno\n* @ Param pIdPuntoDiRistoro\n* /\npublic BeanMenu (int pid, String pGiorno, int pIdPuntoDiRistoro)\n(\nsetId (PID);\nsetGiorno (pGiorno);\nsetIdPuntoDiRistoro (pIdPuntoDiRistoro);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanMenu ()\n(\n\n)\n\n/ **\n* Returns the value of days\n*\n* @ Return Value of the day.\n* /\npublic String getGiorno ()\n(\nreturn day\n)\n\n/ **\n* Sets the new value of days\n*\n* @ Param value New pGiorno day.\n* /\npublic void setGiorno (String pGiorno)\n(\nday = pGiorno;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Returns the value of idPuntoDiRistoro\n*\n* @ Return value idPuntoDiRistoro.\n* /\npublic int getIdPuntoDiRistoro ()\n(\nidPuntoDiRistoro return;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n/ **\n* Sets the new value of idPuntoDiRistoro\n*\n* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.\n* /\npublic void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)\n(\nidPuntoDiRistoro = pIdPuntoDiRistoro;\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942c4"},"name":"BeanPiatto.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942be"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c5"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\n\n/ **\n  * Bean containing information relating to food\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\npublic class BeanPiatto implements Serializable\n(\nprivate int id;\nprivate String name;\nprivate double price;\nprivate int idMenu;\nprivate static final long serialVersionUID =-3775462843748984482L;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param Pnom\n* @ Param pPrezzo\n* @ Param pIdMenu\n* /\npublic BeanPiatto (int pid, String Pnom, double pPrezzo, int pIdMenu)\n(\nsetId (PID);\nsetNome (Phnom);\nsetPrezzo (pPrezzo);\nsetIdMenu (pIdMenu);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanPiatto ()\n(\n\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getName ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new name value\n*\n* @ Param name New value Pnom.\n* /\npublic void setNome (String Pnom)\n(\nname = Pnom;\n)\n\n/ **\n* Returns the value of money\n*\n* @ Return value price.\n* /\npublic double getPrezzo ()\n(\nreturn price;\n)\n\n/ **\n* Sets the new value of money\n*\n* @ Param pPrezzo New value for money.\n* /\npublic void setPrezzo (double pPrezzo)\n(\nPrice = pPrezzo;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Returns the value of idMenu\n*\n* @ Return value idMenu.\n* /\npublic int getIdMenu ()\n(\nidMenu return;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n/ **\n* Sets the new value of idMenu\n*\n* @ Param value pIdMenu New idMenu.\n* /\npublic void setIdMenu (int pIdMenu)\n(\nidMenu = pIdMenu;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942c7"},"name":"PuntiDiRistoro.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c6"}]],"contents":"package unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt.BorderLayout;\n\nimport javax.swing.JDesktopPane;\nimport javax.swing.JPanel;\nimport javax.swing.JInternalFrame;\nimport java.awt.Dimension;\nimport javax.swing.ImageIcon;\nimport java.awt.GridBagLayout;\nimport javax.swing.JToolBar;\nimport javax.swing.JLabel;\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\n\nimport javax.swing.JCheckBox;\nimport javax.swing.BorderFactory;\nimport java.awt.Color;\nimport javax.swing.border.BevelBorder;\nimport javax.swing.JButton;\nimport java.awt.GridBagConstraints;\nimport java.awt.Point;\nimport javax.swing.JScrollPane;\nimport javax.swing.border.TitledBorder;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport javax.swing.table.DefaultTableCellRenderer;\n\nimport java.awt.font;\nimport javax.swing.JTextPane;\nimport javax.swing.JTextField;\nimport java.awt.Insets;\nimport java.util.Date;\n\nimport javax.swing.SwingConstants;\n\n\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanPuntoDiRistoro;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.util.Punto3D;\n\nimport javax.swing.JTable;\nimport java.awt.Rectangle;\n\nextends JInternalFrame (public class PuntiDiRistoro\n\nprivate Dimension SIZE;\nprivate JPanel jContentPane = null;\nprivate JPanel RightPanel = null;\nPrivate JToolBar toolbarPR = null;\nprivate JLabel status = null;\nprivate JPanel CentrePanel = null;\nprivate JButton btnSkeda = null;\nprivate JButton btnModifica = null;\nprivate JButton btnElimina = null;\nprivate JScrollPane JScrollPane = null;\nprivate JPanel HelpPanel = null;\nprivate JTextPane jTextPane = null;\nprivate JScrollPane PannelloTag = null;\nprivate JButton btnRicerca2 = null;\nprivate JButton btnAzzera2 = null;\nprivate JPanel RicercaPanel = null;\nprivate JLabel LabelPr = null;\nprivate JTextField nomePR = null;\nprivate JLabel LabelTag = null;\nprivate JTable TablePr = null;\nPrivate JDesktopPane JDesktopPane;\nPrivate PuntiDiRistoro internalFrame;\nprivate JButton btnAttiva = null;\nprivate JButton btnStorico = null;\n/ **\n* This is the default constructor xxx\n* /\npublic PuntiDiRistoro () (\nsuper ();\ninitialize ();\n)\n\n/ **\n* This method initializes this\n*\n* @ Return void\n* /\nprivate void initialize () (\nSIZE = new Dimension (700.480);\nsetPreferredSize (SIZE);\nthis.setSize (new Dimension (700, 480));\nthis.setResizable (true);\nthis.setClosable (true);\nthis.setTitle ( \"Refreshments\");\nthis.setFrameIcon (new ImageIcon (getClass (). getResource ( \"/ interfacceAgenzia / images / PR.png \")));\nthis.setIconifiable (true);\nthis.setMaximizable (true);\nthis.setContentPane (getJContentPane ());\n)\n\n/ **\n* This method initializes jContentPane\n*\n* @ Return javax.swing.JPanel\n* /\ngetJContentPane private JPanel () (\nif (jContentPane == null) (\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (getRightPanel (), BorderLayout.EAST);\njContentPane.add (getToolbarPR (), BorderLayout.NORTH);\njContentPane.add (getCentrePanel (), BorderLayout.CENTER);\n)\njContentPane return;\n)\n\n/ **\n* This method initializes RightPanel\n*\n* @ Return javax.swing.JPanel\n* /\ngetRightPanel private JPanel () (\nif (RightPanel == null) (\nRightPanel = new JPanel ();\nRightPanel.setLayout (new BorderLayout ());\nRightPanel.add (getHelpPanel (), BorderLayout.CENTER);\nRightPanel.add (getRicercaPanel (), BorderLayout.CENTER);\n)\nRightPanel return;\n)\n\n/ **\n* This method initializes jJToolBarBar\n*\n* @ Return javax.swing.JToolBar\n* /\nPrivate JToolBar getToolbarPR () (\nif (toolbarPR == null) (\ntoolbarPR JToolBar = new ();\ntoolbarPR.setLayout (null);\ntoolbarPR.setPreferredSize (new Dimension (1, 49));\ntoolbarPR.setFloatable (false);\ntoolbarPR.add (getBtnAttiva ());\ntoolbarPR.addSeparator ();\ntoolbarPR.add (getBtnStorico ());\ntoolbarPR.addSeparator ();\ntoolbarPR.add (getBtnModifica ());\ntoolbarPR.addSeparator ();\ntoolbarPR.add (getBtnSkeda ());\ntoolbarPR.addSeparator ();\ntoolbarPR.add (getBtnElimina ());\n)\ntoolbarPR return;\n)\n\n/ **\n* This method initializes CentrePanel\n*\n* @ Return javax.swing.JPanel\n* /\ngetCentrePanel private JPanel () (\nif (CentrePanel == null) (\nGridBagConstraints = GridBagConstraints new GridBagConstraints ();\ngridBagConstraints.fill = GridBagConstraints.BOTH;\ngridBagConstraints.weighty = 1.0;\ngridBagConstraints.weightx = 1.0;\nCentrePanel = new JPanel ();\nCentrePanel.setLayout (new GridBagLayout ());\nCentrePanel.setPreferredSize (new Dimension (1, 30));\nCentrePanel.add (getJScrollPane (), GridBagConstraints);\n\n)\nCentrePanel return;\n)\n\n/ **\n* This method initializes btnSkeda\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnSkeda () (\nif (btnSkeda == null) (\nbtnSkeda = new JButton ();\nbtnSkeda.setText ( \"Point Card <html> <br> Refreshments </ html>\");\nbtnSkeda.setLocation (new Point (16, 3));\nbtnSkeda.setSize (new Dimension (130, 42));\nbtnSkeda.setPreferredSize (new Dimension (130, 42));\nbtnSkeda.setIcon (new ImageIcon (getClass (). getResource ( \"/ interfacceAgenzia / images / Browse 1.png \")));\nbtnSkeda.addActionListener (new ActionListener () (\npublic void actionPerformed (ActionEvent arg0) (\n\n)\n\n));\n)\nbtnSkeda return;\n)\n\n/ **\n* This method initializes btnModifica\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnModifica () (\nif (btnModifica == null) (\nbtnModifica = new JButton ();\nbtnModifica.setText ( \"<html> Edit Point <br> Refreshments </ html>\");\nbtnModifica.setPreferredSize (new Dimension (130, 42));\nbtnModifica.setMnemonic (KeyEvent.VK_UNDEFINED);\nbtnModifica.setEnabled (false);\nbtnModifica.setBounds (new Rectangle (413, 3, 140, 42));\nbtnModifica.setIcon (new ImageIcon (getClass (). getResource ( \"/ interfacceAgenzia/immagini/edit-32x32.png \")));\n)\nbtnModifica return;\n)\n\n/ **\n* This method initializes btnElimina\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnElimina () (\nif (btnElimina == null) (\nbtnElimina = new JButton ();\nbtnElimina.setText ( \"Delete item <html> <br> Refreshments </ html>\");\nbtnElimina.setPreferredSize (new Dimension (130, 42));\nbtnElimina.setEnabled (false);\nbtnElimina.setMnemonic (KeyEvent.VK_UNDEFINED);\nbtnElimina.setBounds (new Rectangle (555, 3, 130, 42));\nbtnElimina.setIcon (new ImageIcon (getClass (). getResource ( \"/ interfacceAgenzia/immagini/edit-delete-32x32.png \")));\n)\nbtnElimina return;\n)\n\n/ **\n* This method initializes JScrollPane\n*\n* @ Return javax.swing.JScrollPane\n* /\nprivate JScrollPane getJScrollPane () (\nif (JScrollPane == null) (\nif (TablePr == null) (\n/ *\n* @ Param pId\n* @ Param pNumeroVoti\n* @ Param Pnom\n* @ Param pCitta\n* @ Param pTelefono\n* @ Param pDescrizione\n* @ Param pLocalita\n* @ Param pVia\n* @ Param pcap\n* @ Param pProvincia\n* @ Param pPosizione\n* @ Param pOrarioApertura\n* @ Param pOrarioChiusura\n* @ Param pGiornoChiusura\n* @ Param pCostoBiglietto\n* @ Param pMediaVoti\n* /\n\nBeanPuntoDiRistoro [] test = new BeanPuntoDiRistoro [30];\nfor (int i = 0; i <30; i + +) (\ntest [i] = new BeanPuntoDiRistoro (1, 12, 3.5,\n\"Arturo\", \"Near the sea, great view, romantic and Miao,\n\"089203202\", \"the mountains\", \"Amalfi\", \"Via Principe 35\", \"84123rd\"\n\"Salerno\", \"1234567898741\", new Punto3D (34,34,34),\nnew Date (2,23,3), new Date (3,3,4), \"Monday\");\n)\n\nSitoTableModel new SitoTableModel = new (test);\n\nTablePr = new ScrollableTable (new);\n/ / Name\nTablePr.getColumnModel (). GetColumn (0). SetPreferredWidth (140);\n/ / Description\nTablePr.getColumnModel (). GetColumn (1). SetPreferredWidth (80);\n/ / Location\nTablePr.getColumnModel (). GetColumn (2). SetPreferredWidth (140);\n/ / City\nTablePr.getColumnModel (). GetColumn (3). SetPreferredWidth (80);\n/ / State\nTablePr.getColumnModel (). GetColumn (4). SetPreferredWidth (70);\n/ / Number of Votes\nTablePr.getColumnModel (). GetColumn (5). SetPreferredWidth (70);\n/ / Average Ratings\nTablePr.getColumnModel (). GetColumn (6). SetPreferredWidth (60);\n/ / PosGeo\nTablePr.getColumnModel (). GetColumn (7). SetPreferredWidth (30);\nTablePr.setDefaultRenderer (String.class, new DefaultTableCellRenderer ());\nTablePr.setRowHeight (32);\nTablePr.setShowVerticalLines (false);\nTablePr.setDefaultRenderer (Double.class, new MediaVotiRenderer ());\nTablePr.setSelectionMode (javax.swing.ListSelectionModel.SINGLE_SELECTION);\nTablePr.setSelectionForeground (Color.RED);\nTablePr.setSelectionBackground (Color.white);\nTablePr.setColumnSelectionAllowed (false);\nfinal javax.swing.ListSelectionModel this TablePr.getSelectionModel = ();\nquesto.addListSelectionListener (new ListSelectionListener () (\n\npublic void ValueChanged (ListSelectionEvent event) (\nbtnElimina.setEnabled (true);\nbtnModifica.setEnabled (true);\nbtnAttiva.setEnabled (true);\nbtnStorico.setEnabled (true);\n)\n\n));\n\nTablePr.addKeyListener (new KeyListener () (\n\npublic void keyPressed (KeyEvent arg0) (\nSystem.out.println ( \"keyPressed\");\n\n)\n\npublic void keyReleased (KeyEvent arg0) (\nSystem.out.println ( \"keyRelased\");\n\n)\n\npublic void keyTyped (KeyEvent arg0) (\nSystem.out.println ( \"keyTyped\");\n\n)\n\n));\n\n/ / private static final String [] headers = ( \"Name\", \"Phone\", \"Gone\", \"Location\", \"City\", \"CPC\", \"Province\", \"Media Votes\", \"Number Votes\");\n\n)\n\nJScrollPane = new JScrollPane (TablePr);\njScrollPane.setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\njScrollPane.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n\n)\nJScrollPane return;\n)\n\n\n/ **\n* This method initializes HelpPanel\n*\n* @ Return javax.swing.JPanel\n* /\ngetHelpPanel private JPanel () (\nif (HelpPanel == null) (\nGridBagConstraints gridBagConstraints1 = new GridBagConstraints ();\ngridBagConstraints1.fill = GridBagConstraints.BOTH;\ngridBagConstraints1.gridy = 0;\ngridBagConstraints1.weightx = 1.0;\ngridBagConstraints1.weighty = 1.0;\ngridBagConstraints1.ipadx = 0;\ngridBagConstraints1.gridwidth = 1;\ngridBagConstraints1.ipady = 0;\ngridBagConstraints1.gridx = 0;\nHelpPanel = new JPanel ();\nHelpPanel.setLayout (new GridBagLayout ());\nHelpPanel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createLineBorder (new Color (51, 153, 255), 3), \"Help\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\", Font.BOLD, 12), new Color (51, 102, 255)));\nHelpPanel.setPreferredSize (new Dimension (100, 100));\nHelpPanel.add (getJTextPane (), gridBagConstraints1);\n)\nHelpPanel return;\n)\n\n/ **\n* This method initializes jTextPane\n*\n* @ Return javax.swing.JTextPane\n* /\nprivate JTextPane getJTextPane () (\nif (jTextPane == null) (\njTextPane = new JTextPane ();\njTextPane.setPreferredSize (new Dimension (6, 30));\n)\njTextPane return;\n)\n\n/ **\n* This method initializes ricercaPanel1\n*\n* @ Return javax.swing.JPanel\n* /\n\n/ **\n* This method initializes btnRicerca2\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnRicerca2 () (\nif (btnRicerca2 == null) (\nbtnRicerca2 = new JButton ();\nbtnRicerca2.setPreferredSize (new Dimension (98, 26));\nbtnRicerca2.setText ( \"Search\");\nbtnRicerca2.setIcon (new ImageIcon (getClass (). getResource ( \"/ unisa/gps/etour/gui/operatoreagenzia/images/Ricerca16.png \")));\n)\nbtnRicerca2 return;\n)\n\n/ **\n* This method initializes btnAzzera2\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnAzzera2 () (\nif (btnAzzera2 == null) (\nbtnAzzera2 = new JButton ();\nbtnAzzera2.setPreferredSize (new Dimension (98, 26));\nbtnAzzera2.setIcon (new ImageIcon (getClass (). getResource ( \"/ unisa/gps/etour/gui/operatoreagenzia/images/Azzera16.png \")));\nbtnAzzera2.setText ( \"Clear\");\nbtnAzzera2.setHorizontalTextPosition (SwingConstants.LEADING);\n)\nbtnAzzera2 return;\n)\n\n/ **\n* This method initializes RicercaPanel\n*\n* @ Return javax.swing.JPanel\n* /\ngetRicercaPanel private JPanel () (\nif (RicercaPanel == null) (\nGridBagConstraints gridBagConstraints5 = new GridBagConstraints ();\ngridBagConstraints5.fill = GridBagConstraints.BOTH;\ngridBagConstraints5.gridy = 4;\ngridBagConstraints5.weightx = 1.0;\ngridBagConstraints5.weighty = 1.0;\ngridBagConstraints5.gridwidth = 2;\ngridBagConstraints5.gridx = 0;\nGridBagConstraints gridBagConstraints8 = new GridBagConstraints ();\ngridBagConstraints8.gridwidth = 2;\ngridBagConstraints8.insets = new Insets (5, 5, 5, 5);\nGridBagConstraints gridBagConstraints7 = new GridBagConstraints ();\ngridBagConstraints7.gridx = 0;\ngridBagConstraints7.insets = new Insets (5, 5, 5, 5);\ngridBagConstraints7.gridy = 6;\nGridBagConstraints gridBagConstraints6 = new GridBagConstraints ();\ngridBagConstraints6.gridx = 1;\ngridBagConstraints6.gridwidth = 2;\ngridBagConstraints6.insets = new Insets (5, 5, 5, 5);\ngridBagConstraints6.gridy = 6;\nGridBagConstraints gridBagConstraints4 = new GridBagConstraints ();\ngridBagConstraints4.gridx = 0;\ngridBagConstraints4.gridwidth = 2;\ngridBagConstraints4.insets = new Insets (5, 5, 5, 5);\ngridBagConstraints4.gridy = 3;\nLabelTag = new JLabel ();\nLabelTag.setText ( \"Select search tags:\");\nGridBagConstraints gridBagConstraints3 = new GridBagConstraints ();\ngridBagConstraints3.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints3.gridx = 0;\ngridBagConstraints3.gridy = 2;\ngridBagConstraints3.gridwidth = 2;\ngridBagConstraints3.insets = new Insets (5, 5, 5, 5);\ngridBagConstraints3.weightx = 1.0;\nLabelPr = new JLabel ();\nLabelPr.setText ( \"Name Refreshments:\");\nRicercaPanel = new JPanel ();\nRicercaPanel.setLayout (new GridBagLayout ());\nRicercaPanel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createLineBorder (new Color (51, 153, 255), 3), \"Searching for refreshments:\" TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\", Font. BOLD, 12), new Color (51, 102, 255)));\nRicercaPanel.add (LabelPr, gridBagConstraints8);\nRicercaPanel.add (getNomePR (), gridBagConstraints3);\nRicercaPanel.add (LabelTag, gridBagConstraints4);\nBeanTag [] test = new BeanTag [8];\ntest [0] = new BeanTag (0, \"castle\", \"really a castle\");\ntest [1] = new BeanTag (1, \"stronghold\", \"really a hostel\");\ntest [2] = new BeanTag (3, \"Pub\", \"really a basket\");\ntest [3] = new BeanTag (4, \"Restaurant\", \"really a basket\");\ntest [4] = new BeanTag (5, \"Pizza\", \"really a basket\");\ntest [5] = new BeanTag (6, \"Trattoria\", \"really a basket\");\ntest [6] = new BeanTag (7, \"range\", \"really a basket\");\ntest [7] = new BeanTag (8, \"Romantic\", \"really a basket\");\nPannelloTag = new TagPanel (test);\nPannelloTag.setPreferredSize (new Dimension (180.40));\nRicercaPanel.add (getBtnAzzera2 (), gridBagConstraints6);\nRicercaPanel.add (getBtnRicerca2 (), gridBagConstraints7);\nRicercaPanel.add (PannelloTag, gridBagConstraints5);\n)\nRicercaPanel return;\n)\n\n/ **\n* This method initializes nomePR\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getNomePR () (\nif (nomePR == null) (\nnomePR = new JTextField ();\nnomePR.setColumns (12);\n)\nnomePR return;\n)\n\n/ **\n* This method initializes btnAttiva\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnAttiva () (\nif (btnAttiva == null) (\nbtnAttiva = new JButton ();\nbtnAttiva.setText ( \"Enable <html> <br> Convention </ html>\");\nbtnAttiva.setPreferredSize (new Dimension (130, 42));\nbtnAttiva.setSize (new Dimension (130, 42));\nbtnAttiva.setLocation (new Point (280, 3));\nbtnAttiva.setMnemonic (KeyEvent.VK_UNDEFINED);\nbtnAttiva.setEnabled (false);\nbtnAttiva.setIcon (new ImageIcon (getClass (). getResource ( \"/ interfacceAgenzia/immagini/wi0054-32x32.png \")));\n)\nbtnAttiva return;\n)\n\n/ **\n* This method initializes btnStorico\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnStorico () (\nif (btnStorico == null) (\nbtnStorico = new JButton ();\nbtnStorico.setText ( \"Historical <html> <br> Conventions </ html>\");\nbtnStorico.setPreferredSize (new Dimension (130, 42));\nbtnStorico.setBounds (new Rectangle (148, 3, 130, 42));\nbtnStorico.setEnabled (false);\nbtnStorico.setIcon (new ImageIcon (getClass (). getResource ( \"/ interfacceAgenzia / images / Browse 1.png \")));\nbtnStorico.addActionListener (new java.awt.event.ActionListener ()\n(\npublic void actionPerformed (java.awt.event.ActionEvent e)\n(\nNew StoricoConvenzioni ();\n)\n));\n)\nbtnStorico return;\n)\n\n\n\n) / / @ JVE: decl-index = 0: visual-constraint = \"10.10\"\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942c8"},"name":"PRNode.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942c6"}]],"contents":"ï»¿package unisa.gps.etour.gui.operatoreagenzia.tables;\n\nimport javax.swing.tree.DefaultMutableTreeNode;\n\n/ **\n  * <b> PRNode </ b>\n  <p> * This class creates a node in a JTree to store\n  * Information for a refreshment. </ P>\n  *\n  * @ See javax.swing.JTree;\n  * @ See javax.swing.tree.DefaultMutableTreeNode;\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  * /\npublic class DefaultMutableTreeNode extends PRNode\n(\nprivate int id;\n\npublic PRNode ()\n(\nsuper ();\n)\n\n/ **\n* Create a node with the name of refreshment and\n* Your id supplied as parameters.\n*\nPNomePR * @ param String - the name of refreshment.\nPID * @ param int - the id of refreshment.\n* @ Throws IllegalArgumentException - if the name provided as input is invalid.\n* /\npublic PRNode (Phnom String, int pid) throws IllegalArgumentException\n(\nsuper ();\nif (Phnom == null | | pNome.equals (\"\"))\n(\nthrow new IllegalArgumentException (\n\"Name of refreshment supplied invalid input.\");\n)\nsetUserObject (Phnom);\nid = pid;\n)\n\n/ **\n*\n* Returns the id of the point of comfort for which information\n* Are stored in this node.\n*\n* @ Return int - the id of refreshment.\n* /\npublic int getID ()\n(\nreturn id;\n)\n\n/ **\n*\n* Stores the id of the refreshment provided input.\n*\n* @ Param int PID - an ID of an eating place.\n* /\npublic void setID (int pid)\n(\nid = pid;\n)\n\n/ **\n*\n* Return the name of refreshment.\n*\n* @ Return String - the name of refreshment.\n* /\npublic String getName ()\n(\nreturn (String) super.getUserObject ();\n)\n\n/ **\n*\n* Stores the name of the refreshment provided input.\n*\nPnom * @ param String - the name of a refreshment.\n* @ Throws IllegalArgumentException - if the name provided as input is invalid.\n* /\npublic void setNome (String Pnom) throws IllegalArgumentException\n(\nif (Phnom == null | | pNome.equals (\"\"))\n(\nthrow new IllegalArgumentException (\n\"Name of refreshment supplied invalid input.\");\n)\nsetUserObject (Phnom);\n)\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942cc"},"name":"DBPreferenzeDiRicerca.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942cb"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport Java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanPreferenzaDiRicerca;\n\n/ **\n  * Class that implements the interface PreferenzeDiRicerca\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class DBPreferenzeDiRicerca implements IDBPreferenzeDiRicerca\n(\n/ / Empty constructor\npublic DBPreferenzeDiRicerca ()\n(\n)\n\npublic boolean cancellaPreferenzaDiRicerca (int pIdPreferenza)\nthrows SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query cancellation\nString query = \"DELETE FROM preferenzediricerca WHERE Id =\"\n+ PIdPreferenza;\n/ / You run the query Cancellation\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean cancellaPreferenzaDiRicercaBC (int pIdBeneCulturale,\npIdPreferenzaDiRicerca int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query cancellation\nString query = \"DELETE FROM associazionebc WHERE IdPreferenzeDiRicerca =\"\n+ PIdPreferenzaDiRicerca\n+ \"AND IdBeneCulturale =\"\n+ PIdBeneCulturale;\n/ / You run the query Cancellation\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean cancellaPreferenzaDiRicercaPR (int pIdPuntoDiRistoro,\npIdPreferenza int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query cancellation\nString query = \"DELETE FROM associazionepr WHERE IdPreferenzeDiRicerca =\"\n+ PIdPreferenza\n+ \"AND IdPuntoDiRistoro =\"\n+ PIdPuntoDiRistoro;\n/ / You run the query Cancellation\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic boolean cancellaPreferenzaDiRicercaTurista (int pIdTurista,\npIdPreferenza int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query cancellation\nString query = \"DELETE FROM rating WHERE IdTurista =\"\nPIdTurista + + \"AND IdPreferenzeDiRicerca =\"\n+ PIdPreferenza;\n/ / You run the query Cancellation\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic boolean inserisciPreferenzaDiRicercaDelBC (int pIdBeneCulturale,\npIdPreferenzaDiRicerca int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the insertion\nString query = \"INSERT INTO associazionebc (IdPreferenzeDiRicerca, IdBeneCulturale) VALUES (\"\nPIdPreferenzaDiRicerca + + \",\" + pIdBeneCulturale + \")\";\n/ / You run the insert query\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic boolean inserisciPreferenzaDiRicerca (\nBeanPreferenzaDiRicerca pPreferenza) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the insertion\nString query = \"INSERT INTO preferenzediricerca (Id, Name) VALUES (\"\nPPreferenza.getId + () + \" '\" + pPreferenza.getNome ()\n+ \"')\";\n/ / You run the insert query\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean inserisciPreferenzaDiRicercaDelPR (int pIdPuntoDiRistoro,\npIdPreferenzaDiRicerca int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the insertion\nString query = \"INSERT INTO associazionepr (IdPreferenzeDiRicerca, IdPuntoDiRistoro) VALUES (\"\nPIdPreferenzaDiRicerca + + \",\" + pIdPuntoDiRistoro + \")\";\n/ / You run the insert query\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean inserisciPreferenzaDiRicercaDelTurista (int pIdTurista,\npIdPreferenzaDiRicerca int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the insertion\nString query = \"INSERT INTO rating (IdTurista, IdPreferenzeDiRicerca) VALUES (\"\nPIdTurista + + \",\" + pIdPreferenzaDiRicerca + \")\";\n/ / You run the insert query\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care of closing the Statement and the\n/ / Connect\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic ArrayList <BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelBC (\npIdBeneCulturale int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of search preferences\n/ / A cultural\nString query = \"SELECT * FROM associazionebc, preferenzediricerca WHERE IdBeneCulturale =\"\n+ PIdBeneCulturale\n+ \"AND IdPreferenzeDiRicerca preferenzediricerca.Id =\";\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / List that will contain the BeanPreferenzaDiRicerca\n<BeanPreferenzaDiRicerca> ArrayList list = new ArrayList <BeanPreferenzaDiRicerca> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\n/ / Add to the list BeanPreferenzaDiRicerca\nlista.add (new BeanPreferenzaDiRicerca (result.getInt ( \"Id\")\nresult.getString ( \"Name \")));\n)\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic ArrayList <BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelPR (\npIdPuntoDiRistoro int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of search preferences\n/ / A refreshment\nString query = \"SELECT * FROM associazionepr, preferenzediricerca WHERE IdPuntoDiRistoro =\"\n+ PIdPuntoDiRistoro\n+ \"AND IdPreferenzeDiRicerca preferenzediricerca.Id =\";\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / List that will contain the BeanPreferenzaDiRicerca\n<BeanPreferenzaDiRicerca> ArrayList list = new ArrayList <BeanPreferenzaDiRicerca> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\n/ / Add to the list BeanPreferenzaDiRicerca\nlista.add (new BeanPreferenzaDiRicerca (result.getInt ( \"Id\")\nresult.getString ( \"Name \")));\n)\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic ArrayList <BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelTurista (\npIdTurista int) throws SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of search preferences\n/ / A Turista\nString query = \"SELECT * FROM liking preferenzediricerca WHERE IdTurista =\"\n+ PIdTurista\n+ \"AND IdPreferenzeDiRicerca preferenzediricerca.Id =\";\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / List that will contain the BeanPreferenzaDiRicerca\n<BeanPreferenzaDiRicerca> ArrayList list = new ArrayList <BeanPreferenzaDiRicerca> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\n/ / Add to the list BeanPreferenzaDiRicerca\nlista.add (new BeanPreferenzaDiRicerca (result.getInt ( \"Id\")\nresult.getString ( \"Name \")));\n)\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicerca public ArrayList ()\nthrows SQLException\n(\n/ / Variables for database connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of search preferences\n/ / A Turista\nString query = \"SELECT * FROM preferenzediricerca\";\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / List that will contain the BeanPreferenzaDiRicerca\n<BeanPreferenzaDiRicerca> ArrayList list = new ArrayList <BeanPreferenzaDiRicerca> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\n/ / Add to the list BeanPreferenzaDiRicerca\nlista.add (new BeanPreferenzaDiRicerca (result.getInt ( \"Id\")\nresult.getString ( \"Name \")));\n)\n/ / Return the list of search preferences in the DB\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942cd"},"name":"IDBPreferenzeDiRicerca.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942cb"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanPreferenzaDiRicerca;\n\n/ **\n  * Interface for managing search preferences in database\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBPreferenzeDiRicerca\n(\n/ **\n* Add a preference of Search\n*\n* @ Param pPreferenza Search Preferences\n* @ Throws SQLException\n* /\npublic boolean inserisciPreferenzaDiRicerca (\nBeanPreferenzaDiRicerca pPreferenza) throws SQLException;\n\n/ **\n* Delete a preference for research\n*\n* @ Param pPreferenza preference to eliminate\n* @ Throws SQLException\n* @ Return True if and 'have been deleted false otherwise\n* /\npublic boolean cancellaPreferenzaDiRicerca (int pIdPreferenza)\nthrows SQLException;\n\n/ **\n* Returns the list of preferences to find a tourist\n*\n* @ Param Id pIdTurista tourists\n* @ Throws SQLException\n* @ Return List Search Preferences\n* /\npublic ArrayList <BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelTurista (\npIdTurista int) throws SQLException;\n\n/ **\n* Returns the list of preferences for research of a cultural\n*\n* @ Param pIdBeneCulturale ID of the cultural\n* @ Throws SQLException\n* @ Return list search preferences.\n* /\npublic ArrayList <BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelBC (\npIdBeneCulturale int) throws SQLException;\n\n/ **\n* Returns the list of preferences to find a resting spot\n*\n* @ Param identifier pIdPuntoDiRistoro a refreshment\n* @ Throws SQLException\n* @ Return list search preferences.\n* /\npublic ArrayList <BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelPR (\npIdPuntoDiRistoro int) throws SQLException;\n\n/ **\n* Add a preference for a cultural\n*\n* @ Param pIdBeneCulturale ID of the cultural\n* @ Param pIdPreferenzaDiRicerca ID PreferenzaDiRicerca\n* @ Throws SQLException\n* @ Param pPreferenza Search Preferences\n* /\npublic boolean inserisciPreferenzaDiRicercaDelBC (int pIdBeneCulturale,\npIdPreferenzaDiRicerca int) throws SQLException;\n\n/ **\n* Add a search preference to a tourist\n*\n* @ Param Id pIdTurista tourists\n* @ Param pIdPreferenzaDiRicerca ID PreferenzeDiRicerca\n* @ Throws SQLException\n* @ Param pPreferenza Search Preferences\n* /\npublic boolean inserisciPreferenzaDiRicercaDelTurista (int pIdTurista,\npIdPreferenzaDiRicerca int) throws SQLException;\n\n/ **\n* Add a preference research to a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshments\n* @ Param pIdPreferenzaDiRicerca ID PreferenzaDiRicerca\n* @ Throws SQLException\n* @ Param pPreferenza Search Preferences\n* /\npublic boolean inserisciPreferenzaDiRicercaDelPR (int pIdPuntoDiRistoro,\npIdPreferenzaDiRicerca int) throws SQLException;\n\n/ **\n* Deletes a preference to find a Tourist\n*\n* @ Param Id pIdTurista tourists\n* @ Param pIdPreferenza Search Preferences\n* @ Throws SQLException\n* @ Return True if and 'have been deleted false otherwise\n* /\npublic boolean cancellaPreferenzaDiRicercaTurista (int pIdTurista,\npIdPreferenza int) throws SQLException;\n\n/ **\n* Deletes a preference for research of a cultural\n*\n* @ Param pIdPreferenzaDiRicerca Search Preferences\n* @ Param pIdBeneCulturale ID of the cultural\n* @ Throws SQLException\n* @ Return True if and 'have been deleted false otherwise\n* /\npublic boolean cancellaPreferenzaDiRicercaBC (int pIdBeneCulturale,\npIdPreferenzaDiRicerca int) throws SQLException;\n\n/ **\n* Deletes a preference to find a resting spot\n*\n* @ Param pIdPreferenza Search Preferences\n* @ Param pIdPuntoDiistoro point identification Refreshments\n* @ Throws SQLException\n* @ Return True if and 'have been deleted false otherwise\n* /\npublic boolean cancellaPreferenzaDiRicercaPR (int pIdPuntoDiistoro,\npIdPreferenza int) throws SQLException;\n\n/ **\n* Returns a list of all search preferences in the DB\n*\n* @ Throws SQLException\n* @ Return List of search preferences in the DB\n* /\n<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicerca public ArrayList ()\nthrows SQLException;\n\n)\n\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942ce"},"name":"BeanPreferenzaDiRicerca.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942cb"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\n\n/ **\n  * Bean which contains data search preferences\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class BeanPreferenzaDiRicerca implements Serializable\n(\nprivate static final long serialVersionUID = 7576354037868937929L;\nprivate int id;\nprivate String name;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param Pnom\n* /\npublic BeanPreferenzaDiRicerca (int pid, String Pnom)\n(\nsetId (PID);\nsetNome (Phnom);\n)\n\n/ **\n* Empty Constructor\n*\n* /\npublic BeanPreferenzaDiRicerca ()\n(\n\n)\n\n/ **\n* Returns the value of name\n*\n* @ Return value of name.\n* /\npublic String getName ()\n(\nreturn name;\n)\n\n/ **\n* Sets the new name value\n*\n* @ Param name New value Pnom.\n* /\npublic void setNome (String Pnom)\n(\nname = Pnom;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n)\n\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942cf"},"name":"IDBPreferenzeGeneriche.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942cb"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d2"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dd"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\n\nimport unisa.gps.etour.bean.BeanPreferenzeGeneriche;\n\n/ **\n  * Interface for handling general preferences in database\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBPreferenzeGeneriche\n(\n/ **\n* Add a preference General\n*\n* @ Param pPreferenza preference to be added\n* @ Throws SQLException\n* /\npublic boolean inserisciPreferenzaGenenerica (\nBeanPreferenzeGeneriche pPreferenza) throws SQLException;\n\n/ **\n* Edit a general preference\n*\n* @ Param pPreferenza preference to change\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean modificaPreferenzaGenerica (\nBeanPreferenzeGeneriche pPreferenza) throws SQLException;\n\n/ **\n* Delete a general preference\n*\n* @ Param ID pIdPreferenza preference to delete\n* @ Throws SQLException\n* @ Return True if and 'have been deleted false otherwise\n* /\npublic boolean cancellaPreferenzaGenerica (int pIdPreferenza)\nthrows SQLException;\n\n/ **\n* Returns the generic preference for tourists\n*\n* @ Param Id pIdTurista tourists\n* @ Throws SQLException\n* @ Return generic preference\n* /\npublic BeanPreferenzeGeneriche ottieniPreferenzaGenerica (int pIdTurista)\nthrows SQLException;\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942d0"},"name":"DBPreferenzeGeneriche.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942cb"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d2"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport Java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport unisa.gps.etour.bean.BeanPreferenzeGeneriche;\n\n/ **\n  * Implementing the IDBPreferenzeGeneriche\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class DBPreferenzeGeneriche implements IDBPreferenzeGeneriche\n(\n/ / Constructor without parameters\npublic DBPreferenzeGeneriche ()\n(\n\n)\n\npublic boolean cancellaPreferenzaGenerica (int pIdPreferenza)\nthrows SQLException\n(\n/ / Connect to database\nConnection conn = null;\n/ / Statement for running queries\nStatement stat = null;\n/ / Try block which performs the query and the database connection\nTRY\n(\n/ / You get the database connection from the pool\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the statement\nstat = conn.createStatement ();\n/ / Query\nString query = \"DELETE FROM preferenzegeneriche WHERE Id =\"\n+ PIdPreferenza;\n/ / You run the query\nint i = stat.executeUpdate (query);\n\nreturn (i == 1);\n)\n/ / Finally block that contains the instructions to close the connections\n/ / Hyenas run in any case\nfinally\n(\n/ / This closes the if statement and 'opened\nif (stat = null)\n(\nstat.close ();\n)\n/ / It returns the connection to the pool if and 'opened\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean inserisciPreferenzaGenenerica (\nBeanPreferenzeGeneriche pPreferenza) throws SQLException\n(\n/ / Connect to database\nConnection conn = null;\n/ / Statement for running queries\nStatement stat = null;\n/ / Try block which performs the query and the database connection\nTRY\n(\n/ / You get the database connection from the pool\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the statement\nstat = conn.createStatement ();\n/ / Query\nString query = \"INSERT INTO preferenzegeneriche (IdTurista, Font, Tema, DimensioneFont)\"\n+ \"VALUES (\"\n+ PPreferenza.getIdTurista ()\n+ \" '\"\n+ PPreferenza.getFont ()\n+ \"','\"\n+ PPreferenza.getTema ()\n+ \" ',\" + PPreferenza.getDimensioneFont () + \")\";\n/ / You run the query\nint i = stat.executeUpdate (query);\nreturn (i == 1);\n)\n/ / Finally block that contains the instructions to close the connections\n/ / Hyenas run in any case\nfinally\n(\n/ / This closes the if statement and 'opened\nif (stat = null)\n(\nstat.close ();\n)\n/ / It returns the connection to the pool if and 'opened\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean modificaPreferenzaGenerica (\nBeanPreferenzeGeneriche pPreferenza) throws SQLException\n(\n/ / Connect to database\nConnection conn = null;\n/ / Statement for running queries\nStatement stat = null;\n/ / Try block which performs the query and the database connection\nTRY\n(\n/ / You get the database connection from the pool\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the statement\nstat = conn.createStatement ();\n/ / Query\nString query = \"UPDATE preferenzegeneriche SET\" + \"= IdTurista\"\nPPreferenza.getIdTurista + () + \", font = '\"\nPPreferenza.getFont + () + \" ', theme ='\"\nPPreferenza.getTema + () + \" ', DimensioneFont =\"\nPPreferenza.getDimensioneFont + () + \"WHERE Id =\"\n+ PPreferenza.getId ();\n/ / You run the query\nint i = stat.executeUpdate (query);\n\nreturn (i == 1);\n)\n/ / Finally block that contains the instructions to close the connections\n/ / Hyenas run in any case\nfinally\n(\n/ / This closes the if statement and 'opened\nif (stat = null)\n(\nstat.close ();\n)\n/ / It returns the connection to the pool if and 'opened\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic BeanPreferenzeGeneriche ottieniPreferenzaGenerica (int pIdTurista)\nthrows SQLException\n(\n/ / Connect to database\nConnection conn = null;\n/ / Statement for running queries\nStatement stat = null;\n/ / Resut set where the output of the query is inserted\nResultSet result = null;\n/ / Try block which performs the query and the database connection\nTRY\n(\n/ / You get the database connection from the pool\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the statement\nstat = conn.createStatement ();\n/ / Query\nString query = \"SELECT * FROM preferenzegeneriche WHERE IdTurista =\"\n+ PIdTurista;\n/ / Run the query\nresult = stat.executeQuery (query);\nBeanPreferenzeGeneriche pref = null;\n/ / Check that the query returns at least one result\nif (result.next ())\n(\nBeanPreferenzeGeneriche pref = new ();\npref.setId (result.getInt ( \"Id\"));\npref.setIdTurista (result.getInt (IdTurista \"));\npref.setDimensioneFont (result.getInt (DimensioneFont \"));\npref.setFont (result.getString ( \"Font\"));\npref.setTema (result.getString ( \"Theme\"));\n)\nreturn pref;\n)\n/ / Finally block that contains the instructions to close the connections\n/ / Hyenas run in any case\nfinally\n(\n/ / This closes the result set only if and 'the query was made\nif (result! = null)\n(\nresult.close ();\n)\n/ / This closes the if statement and 'opened\nif (stat = null)\n(\nstat.close ();\n)\n/ / It returns the connection to the pool if and 'opened\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942d3"},"name":"BeanPreferenzeGeneriche.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d2"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dc"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942dd"}]],"contents":"ï»¿package unisa.gps.etour.bean;\n\n/ **\n  * Bean containing information relating to the General Preferences\n  *\n  * @ Author Mauro Miranda\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\n\nimport java.io.Serializable;\n\npublic class BeanPreferenzeGeneriche implements Serializable\n(\nprivate static final long serialVersionUID = 6805656922951334071L;\nprivate int id;\nprivate int dimensioneFont;\nprivate String font;\nprivate String subject;\nprivate int idTurista;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pId\n* @ Param pDimensioneFont\n* @ Param pFont\n* @ Param pTema\n* @ Param pIdTurista\n* /\npublic BeanPreferenzeGeneriche (int pid, int pDimensioneFont, String pFont,\nPTema String, int pIdTurista)\n(\nsetId (PID);\nsetDimensioneFont (pDimensioneFont);\nsetFont (pFont);\nSeptember (pTema);\nsetIdTurista (pIdTurista);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanPreferenzeGeneriche ()\n(\n\n)\n\n/ **\n* Returns the value of dimensioneFont\n*\n* @ Return value dimensioneFont.\n* /\npublic int getDimensioneFont ()\n(\ndimensioneFont return;\n)\n\n/ **\n* Sets the new value of dimensioneFont\n*\n* @ Param value pDimensioneFont New dimensioneFont.\n* /\npublic void setDimensioneFont (int pDimensioneFont)\n(\ndimensioneFont = pDimensioneFont;\n)\n\n/ **\n* Returns the value of font\n*\n* @ Return Value of fonts.\n* /\npublic String getFont ()\n(\nreturn font;\n)\n\n/ **\n* Sets the new value of font\n*\nNew value * @ param pFont font.\n* /\npublic void setFont (String pFont)\n(\nfont = pFont;\n)\n\n/ **\n* Returns the value of the subject\n*\n* @ Return value issue.\n* /\npublic String getTema ()\n(\nreturn theme;\n)\n\n/ **\n* Sets the new value of the subject\n*\n* @ Param value New pTema theme.\n* /\npublic void September (String pTema)\n(\ntopic = pTema;\n)\n\n/ **\n* Returns the value of id\n*\n* @ Return value id.\n* /\npublic int getId ()\n(\nreturn id;\n)\n\n/ **\n* Returns the value of usernameTurista\n*\n* @ Return value usernameTurista.\n* /\npublic int getIdTurista ()\n(\nidTurista return;\n)\n\n/ **\n* Sets the new value of usernameTurista\n*\n* @ Param value pIdTurista New usernameTurista.\n* /\npublic void setIdTurista (int pIdTurista)\n(\nidTurista = pIdTurista;\n)\n\n/ **\n* Sets the new value of id\n*\n* @ Param pId New value for id.\n* /\npublic void setId (int pid)\n(\nid = pid;\n)\n\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942d6"},"name":"IDBVisitaBC.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d5"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942de"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanVisitaBC;\n\n/ **\n  * Interface for handling feedback on a given asset\n  * Cultural\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBVisitaBC\n(\n\n/ **\n* Inserts a visit\n*\n* @ Param PVIS Visit to insert\n* @ Throws SQLException\n* /\npublic boolean inserisciVisitaBC (BeanVisitaBC PVIS) throws SQLException;\n\n/ **\n* Modify a visit\n*\n* @ Param PVIS Visit to edit\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean modificaVisitaBC (BeanVisitaBC PVIS) throws SQLException;\n\n/ **\n* Extract the list of visits to a cultural\n*\n* @ Param pIdBeneCulturale ID of the cultural\n* @ Throws SQLException\n* @ Return list of visits of the cultural\n* /\n<BeanVisitaBC> ottieniListaVisitaBC public ArrayList (int pIdBeneCulturale)\nthrows SQLException;\n\n/ **\n* Extract the list of cultural visited by a tourist\n*\n* @ Param ID pIdTurista tourists\n* @ Throws SQLException\n* @ Return ArrayList of all feedback issued by a tourist for a\n* Specified cultural\n* /\n<BeanVisitaBC> ottieniListaVisitaBCTurista public ArrayList (int pIdTurista)\nthrows SQLException;\n\n/ **\n* Extract a visit by a tourist to a cultural\n*\n* @ Param pIdBeneCulturale ID of the cultural\n* @ Param ID pIdTurista tourists\n* @ Throws SQLException\n* @ Return visit\n* /\npublic BeanVisitaBC ottieniVisitaBC (pIdBeneCulturale int, int pIdTurista)\nthrows SQLException;\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942d7"},"name":"DBVisitaPR.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d5"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942de"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport Java.sql.Connection;\nimport java.sql.Date;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n/ **\n  * Class that implements the interface IDBVisitaPR\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class DBVisitaPR implements IDBVisitaPR\n(\n/ / Empty constructor\npublic DBVisitaPR ()\n(\n\n)\n\npublic boolean inserisciVisitaPR (BeanVisitaPR PVIS) throws SQLException\n(\n/ / Variable for the connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Create the date of visit\njava.sql.Date dataVisita = new Date (pVisita.getDataVisita ()\n. getTime ());\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to get the average rating of a property\nQueryMediaVoti String = \"SELECT MediaVoti, NumeroVoti FROM puntodiristoro WHERE Id =\"\n+ PVisita.getIdPuntoDiRistoro ();\nresult = stat.executeQuery (queryMediaVoti);\n/ / Variable for the average rating\ndouble average = 0;\n/ / Variable for the number of votes\nnumeroVoti int = 0;\nif (result.next ())\n(\naverage = result.getDouble ( \"MediaVoti\");\nnumeroVoti = result.getInt (NumeroVoti \");\naverage = ((average * numeroVoti) + pVisita.getVoto ())\n/ + + NumeroVoti;\n)\n/ / Query for the insertion\nString query = \"INSERT INTO visitapr (IdTurista, IdPuntoDiRistoro, DataVisita, Vote, Comment) VALUES (\"\n+ PVisita.getIdTurista ()\n+ \"\"\n+ PVisita.getIdPuntoDiRistoro ()\n+ \" '\"\n+ DataVisita\n+ \" ',\"\nPVisita.getVoto + () + \" '\" + pVisita.getCommento () + \"')\";\nString query2 = \"UPDATE puntodiristoro September MediaVoti =\" + media\n+ \", NumeroVoti =\" + numeroVoti + \"WHERE Id =\"\n+ PVisita.getIdPuntoDiRistoro ();\n/ / You run the insert query\nstat.executeQuery ( \"BEGIN\");\nint i = stat.executeUpdate (query);\ni = i * stat.executeUpdate (query2);\nstat.executeQuery ( \"COMMIT\");\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\npublic boolean modificaVisitaPR (BeanVisitaPR PVIS) throws SQLException\n(\n/ / Variable for the connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\nTRY\n(\n/ / Create the date of visit\njava.sql.Date dataVisita = new Date (pVisita.getDataVisita ()\n. getTime ());\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for amendment\nString query = \"UPDATE visitapr SET\" + \"DataVisita = '\"\nDataVisita + + \" ', Comment ='\" + pVisita.getCommento ()\n+ \" 'WHERE IdPuntoDiRistoro =\"\nPVisita.getIdPuntoDiRistoro + () + \"AND IdTurista =\"\n+ PVisita.getIdTurista ();\n/ / You run the query for Change\nint i = stat.executeUpdate (query);\n/ / This returns the backup\nreturn (i == 1);\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\n<BeanVisitaPR> ottieniListaVisitaPR public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException\n(\n/ / Variable for the connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of requests for a\n/ / Refreshment\nString query = \"SELECT * FROM visitapr WHERE IdPuntoDiRistoro =\"\n+ PIdPuntoDiRistoro;\n/ / The query is executed\nresult = stat.executeQuery (query);\n<BeanVisitaPR> ArrayList list = new ArrayList <BeanVisitaPR> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\njava.util.Date dataVisita = new java.util.Date (result.getDate (\n\"DataVisita\"). GetTime ());\nlista.add (new BeanVisitaPR (result.getInt ( \"Customer\"), result\n. getInt ( \"IdPuntoDiRistoro\"), result\n. getString ( \"Comment\"), result.getInt ( \"IdTurista\"),\ndataVisita));\n)\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\n<BeanVisitaPR> ottieniListaVisitaPRTurista public ArrayList (int pIdTurista)\nthrows SQLException\n(\n/ / Variable for the connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query to extract the list of requests for a\n/ / Eating place for tourists\nString query = \"SELECT * FROM visitapr WHERE IdTurista =\"\n+ PIdTurista;\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / List that will contain the BeanVisitaPR\n<BeanVisitaPR> ArrayList list = new ArrayList <BeanVisitaPR> ();\n/ / We extract the results from the result set and moves in\n/ / List\n/ / To be returned\nwhile (result.next ())\n(\n/ / Add to the list BeanVisitaPR\njava.util.Date dataVisita = new java.util.Date (result.getDate (\n\"DataVisita\"). GetTime ());\nlista.add (new BeanVisitaPR (result.getInt ( \"Customer\"), result\n. getInt ( \"IdPuntoDiRistoro\"), result\n. getString ( \"Comment\"), result.getInt ( \"IdTurista\"),\ndataVisita));\n)\n/ / Return the list\nreturn list;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n\n)\n\npublic BeanVisitaPR ottieniVisitaPR (pIdPuntoDiRistoro int, int pIdTurista)\nthrows SQLException\n(\n/ / Variable for the connection\nConnection conn = null;\n/ / Variable for the query\nStatement stat = null;\n/ / Variable for the query results\nResultSet result = null;\nTRY\n(\n/ / Get the connection\nDBConnessionePool.ottieniConnessione conn = ();\n/ / Create the Statement\nstat = conn.createStatement ();\n/ / Query for the extraction of the visit made by a tourist to\n/ / A given point of comfort\nString query = \"SELECT * FROM visitapr WHERE IdPuntoDiRistoro =\"\nPIdPuntoDiRistoro + + \"AND IdTurista =\" + pIdTurista;\n/ / The query is executed\nresult = stat.executeQuery (query);\n/ / Get the bean's visit sought based on the ID of the tourist and\n/ / Of refreshment\nBeanVisitaPR beanTemp = null;\nif (result.next ())\n(\n/ / Create the BeanVisitaPR\njava.util.Date dataVisita = new java.util.Date (result.getDate (\n\"DataVisita\"). GetTime ());\nbeanTemp = new BeanVisitaPR (result.getInt ( \"Customer\"), result\n. getInt ( \"IdPuntoDiRistoro\"), result\n. getString ( \"Comment\"), result.getInt ( \"IdTurista\"),\ndataVisita);\n)\n/ / Return the BeanTemp\nbeanTemp return;\n)\n/ / Always runs and takes care to close the Result, the Statement\n/ / And Connection\nfinally\n(\nif (result! = null)\n(\nresult.close ();\n)\nif (stat = null)\n(\nstat.close ();\n)\nif (conn! = null)\n(\nDBConnessionePool.rilasciaConnessione (conn);\n)\n)\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942d8"},"name":"IDBVisitaPR.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d5"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942de"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}]],"contents":"ï»¿package unisa.gps.etour.repository;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport unisa.gps.etour.bean.BeanVisitaPR;\n\n/ **\n  * Interface for managing feedback related to a specific point\n  * Refreshments\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic interface IDBVisitaPR\n(\n\n/ **\n* Add a visit to a refreshment\n*\n* @ Param PVIS visit to add\n* @ Throws SQLException\n* /\npublic boolean inserisciVisitaPR (BeanVisitaPR PVIS) throws SQLException;\n\n/ **\n* Modify a visit\n*\n* @ Param PVIS Visit to edit\n* @ Throws SQLException\n* @ Return True if and 'been changed otherwise false\n* /\npublic boolean modificaVisitaPR (BeanVisitaPR PVIS) throws SQLException;\n\n/ **\n* Extract the list of visits to a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshments\n* @ Throws SQLException\n* @ Return List of visits\n* /\n<BeanVisitaPR> ottieniListaVisitaPR public ArrayList (int pIdPuntoDiRistoro)\nthrows SQLException;\n\n/ **\n* Extract a visit by a tourist at a refreshment\n*\n* @ Param pIdPuntoDiRistoro point identification Refreshments\n* @ Param ID pIdTurista tourists\n* @ Throws SQLException\n* @ Return visit\n* /\npublic BeanVisitaPR ottieniVisitaPR (pIdPuntoDiRistoro int, int pIdTurista)\nthrows SQLException;\n\n/ **\n* Extract the list of visits of a tourist\n*\n* @ Param ID pIdTurista tourists\n* @ Return List of visits\n* @ Throws SQLException\n* /\n<BeanVisitaPR> ottieniListaVisitaPRTurista public ArrayList (int pIdTurista)\nthrows SQLException;\n\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942d9"},"name":"ControlloVisiteBeniCulturali.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d5"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942de"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}]],"contents":"ï»¿package unisa.gps.etour.control.GestioneBeniCulturali;\n\nimport unisa.gps.etour.bean.BeanVisitaBC;\n\n/ **\n  * This class has the task of monitoring data from a cultural visit.\n  * Various consistency checks are performed, such as length of strings,\n  * Null reference, dynamic types incorrect.\n  *\n  * @ Author Michelangelo De Simone\n  * @ Version 0.1\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno\n  * /\npublic class ControlloVisiteBeniCulturali\n(\n/ **\n*\n* Please consistency check by calling the appropriate methods\n*\n* @ Param bean The pVBC cultural visit to check\n* @ Return boolean The result of the check: true if OK, false otherwise\n* /\npublic static boolean controllaDatiVisitaBeneCulturale (BeanVisitaBC pVBC)\n(\n/ / If the bean is null\nif (pVBC == null | |! (pVBC instanceof BeanVisitaBC))\nreturn false;\n\n/ / Check the ID of a cultural visit\n/ / And the id of its tourist\nif (! (pVBC.getIdBeneCulturale ()> 0) | |! (pVBC.getIdTurista ()> 0))\nreturn false;\n\n/ / Check the vote (of course ratings are accepted only between 1 and 5\nif (! (pVBC.getVoto ()> = 1 & & pVBC.getVoto () <= 5))\nreturn false;\n\n/ / Check for null references in the bean\nif (! controllaDatiNulli (pVBC))\nreturn false;\n\n/ / Check the correct length of string\nif (! (pVBC.getCommento (). length ()> 0))\nreturn false;\n\nreturn true;\n)\n\n/ **\n*\n* Check for null data in a bean cultural visit\n*\n* @ Param bean The PBC cultural visit to check\n* @ Return boolean The result of the check: true if there are no null references, false otherwise\n* /\npublic static boolean controllaDatiNulli (BeanVisitaBC PBC)\n(\n/ / Check the nullity of the fields of feedback\nif (pBC.getCommento () == null | | pBC.getDataVisita () == null)\nreturn false;\n\nreturn true;\n)\n) "}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942da"},"name":"SitoTableModel.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d5"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942de"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}]],"contents":"\t\n/ *\n  * SitoTableModel.java\n  *\n  * 1.0\n  *\n  * 21/05/2007\n  *\n  * © 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno\n  * /\nHandheld Package;\n\nimport Bean.BeanPuntoDiRistoro;\nimport javax.swing.table.AbstractTableModel;\nimport Bean .*;\nimport Util.Punto3D;\n\n/ **\n  * <b> SitoTableModel </ b>\n  * Serves as a data container <p> of cultural or refreshment areas that need\n  * Be displayed in a JTable. </ P>\n  * @ See javax.swing.table.AbstractTableModel\n  * @ See javax.swing.JTable\n  * @ See unisa.gps.etour.bean.BeanBeneCulturale\n  * @ See unisa.gps.etour.bean.BeanPuntoDiRistoro\n  * @ Version 1.0\n  * @ Author Raphael Landi\n  * /\n\npublic class extends SitoTableModel AbstractTableModel (\n     String [] columnNames = ( \"Name\",\n     \"City\", \"Distance\");\n     Object [] [] cells;\n     Punto3D posizioneSito;\n     Punto3D myLocation;\n    \n     SitoTableModel (BeanPuntoDiRistoro [] pr, Punto3D myLocation) (\n         super ();\n         cells = new Object [pr.length] [3] / / First value = second rows = columns\n         for (int i = 0; i <pr.length i + +) (\n             Cells [i] [0] = pr [i]. getName ();\n             Cells [i] [1] = pr [i]. getCitta ();\n            \n            \n            \n            \n         )\n     )\n    \n     SitoTableModel (BeanBeneCulturale [] bc, Punto3D myLocation) (\n         super ();\n         cells = new Object [bc.length] [3] / / First value = second rows = columns\n         for (int i = 0; i <bc.length i + +) (\n             Cells [i] [0] = bc [i]. getName ();\n             Cells [i] [1] = bc [i]. getCitta ();\n            \n         )\n     )\n    \n     public int GetRowCount () (\n         cells.length return;\n     )\n    \n     public int getColumnCount () (\n         columnNames.length return;\n     )\n    \n     public Object getValueAt (int r, int c) (\n         if (c <columnNames.length - 1)\n             return cells [r] [c];\n         else (\n             double value = miaPosizione.distanza (posizioneSito);\n             return new Double (value);\n         )\n        \n     )\n    \n     public String getColumnName (int c) (\n         return columnNames [c];\n     )\n)\n\n\n\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942db"},"name":"BeanVisitaBC.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942d5"}],["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e1"}]],"contents":"ï»¿package unisa.gps.etour.bean;\nimport java.io.Serializable;\nimport java.util.Date;\n/ **\n  * Bean containing information relating to the feedback of a cultural\n  *\n  * @ Author Joseph Martone\n  * @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University\n  * Of Salerno\n  * /\npublic class BeanVisitaBC implements Serializable\n(\nprivate static final long serialVersionUID = 3331567128449243852L;\nprivate int rating;\nprivate int idBeneCulturale;\nprivate String comment;\nprivate int IdTurista;\nprivate Date dataVisita;\n\n/ **\n* Parameterized constructor\n*\n* @ Param pVoto\n* @ Param pIdBeneCulturale\n* @ Param pCommento\n* @ Param pIdTurista\n* @ Param pDataVisita\n* /\npublic BeanVisitaBC (pVoto int, int pIdBeneCulturale,\nPCommento String, int pIdTurista, Date pDataVisita)\n(\nsetVoto (pVoto);\nsetIdBeneCulturale (pIdBeneCulturale);\nsetCommento (pCommento);\nsetIdTurista (pIdTurista);\nsetDataVisita (pDataVisita);\n)\n\n/ **\n* Empty Constructor\n* /\npublic BeanVisitaBC ()\n(\n\n)\n\n/ **\n* Returns the value of comment\n*\n* @ Return value of comment.\n* /\npublic String getCommento ()\n(\nreturn comment;\n)\n\n/ **\n* Sets the new value of comment\n*\n* @ Param value New pCommento comment.\n* /\npublic void setCommento (String pCommento)\n(\ncomment = pCommento;\n)\n\n/ **\n* Returns the value of dataVisita\n*\n* @ Return value dataVisita.\n* /\npublic Date getDataVisita ()\n(\ndataVisita return;\n)\n\n/ **\n* Sets the new value of dataVisita\n*\n* @ Param value pDataVisita New dataVisita.\n* /\npublic void setDataVisita (Date pDataVisita)\n(\ndataVisita = pDataVisita;\n)\n\n/ **\n* Returns the value of idBeneCulturale\n*\n* @ Return value idBeneCulturale.\n* /\npublic int getIdBeneCulturale ()\n(\nidBeneCulturale return;\n)\n\n/ **\n* Sets the new value of idBeneCulturale\n*\n* @ Param value pIdBeneCulturale New idBeneCulturale.\n* /\npublic void setIdBeneCulturale (int pIdBeneCulturale)\n(\nidBeneCulturale = pIdBeneCulturale;\n)\n\n/ **\n* Returns the value of IdTurista\n*\n* @ Return value IdTurista.\n* /\npublic int getIdTurista ()\n(\nIdTurista return;\n)\n\n/ **\n* Sets the new value of IdTurista\n*\n* @ Param value pIdTurista New IdTurista.\n* /\npublic void setIdTurista (int pIdTurista)\n(\nIdTurista = pIdTurista;\n)\n\n/ **\n* Returns the value of voting\n*\n* @ Return value of vote.\n* /\npublic int getVoto ()\n(\nreturn rating;\n)\n\n/ **\n* Sets the new value of voting\n*\nNew value * @ param pVoto to vote.\n* /\npublic void setVoto (int pVoto)\n(\nvote = pVoto;\n)\n\n\n\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942e0"},"name":"DBVisitaBC.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942df"}]],"contents":"package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.bean.BeanVisitaPR;\nimport unisa.gps.etour.repository.IDBVisitaBC;\n\npublic class DBVisitaBC implements IDBVisitaBC\n(\npublic boolean inserisciVisitaBC (BeanVisitaBC PVIS) throws SQLException\n(\nreturn false;\n)\n\npublic boolean modificaVisitaBC (BeanVisitaBC PVIS) throws SQLException\n(\nreturn false;\n)\n\n<BeanVisitaBC> ottieniListaVisitaBC public ArrayList (int pIdBeneCulturale)\nthrows SQLException\n(\n<BeanVisitaBC> FinteVisite ArrayList = new ArrayList <BeanVisitaBC> (0);\n\nfinteVisite.add (new BeanVisitaBC (4, 1, \"beautiful exhibition\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (3, 1, \"show particular but interesting\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (4, 1, \"beautiful exhibition\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (3, 1, \"show particular but interesting\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (4, 1, \"beautiful exhibition\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (3, 1, \"show particular but interesting\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (4, 1, \"beautiful exhibition\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (3, 1, \"show particular but interesting\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (4, 1, \"beautiful exhibition\", 1, new Date ()));\nfinteVisite.add (new BeanVisitaBC (3, 1, \"show particular but interesting\", 1, new Date ()));\n\n\n/ / FinteVisite.add (new BeanVisitaBC (5, 1, \"This show is not 'evil', 1, new Date (new Date (). GetTime () - (unisa.gps.etour.util.CostantiGlobali.TRENTA_GIORNI * 1 ))));\nfinteVisite.add (new BeanVisitaBC (5, 1, \"This show is not 'evil', 1, new Date (new Date (). getTime () - 2591000000L)));\nfinteVisite.add (new BeanVisitaBC (3, 1, \"This show is not 'evil', 1, new Date (new Date (). getTime () - (unisa.gps.etour.util.CostantiGlobali.TRENTA_GIORNI * 2)) ));\n\n\n/ / FinteVisite.add (new BeanVisitaBC (1, 1, \"E 'nice but you pay so much!\", 2, new Date (106, 0, 23)));\n/ / FinteVisite.add (new BeanVisitaBC (3, 1, \"The food is pretty good!\", 1, new Date (106, 3, 23)));\n/ / FinteVisite.add (new BeanVisitaBC (4, 1, \"We eat very well!\", 2, new Date (107, 4, 4)));\n/ / FinteVisite.add (new BeanVisitaBC (1, 1, \"We eat!\", 3, new Date (107, 5, 24)));\n/ / FinteVisite.add (new BeanVisitaBC (5, 1, \"Beautiful place\", 4, new Date (107, 4, 25)));\n/ / FinteVisite.add (new BeanVisitaBC (4, 1, \"Excellent views of the sea\", 5, new Date (107, 4, 25)));\n/ / FinteVisite.add (new BeanVisitaBC (3, 1, \"Bell\", 6, new Date (107, 4, 25)));\n/ / FinteVisite.add (new BeanVisitaBC (3, 1, \"I think it's a bad place\", 7, new Date (107, 4, 26)));\n/ / FinteVisite.add (new BeanVisitaBC (3, 1, \"W open air\", 8, new Date (107, 4, 27)));\n/ / FinteVisite.add (new BeanVisitaBC (5, 1, \"better than others\", 9, new Date (107, 5, 2)));\n/ / FinteVisite.add (new BeanVisitaBC (3, 1, \"Forza Napoli\", 10, new Date (107, 5, 8)));\n/ / FinteVisite.add (new BeanVisitaBC (4, 1, \"The food is pretty good!\", 11, new Date (107, 5, 9)));\n/ / FinteVisite.add (new BeanVisitaBC (5, 1, \"We eat very well!\", 12, new Date (107, 5, 11)));\n/ / FinteVisite.add (new BeanVisitaBC (4, 1, \"very good\", 13, new Date (107, 5, 12)));\n/ / FinteVisite.add (new BeanVisitaBC (5, 1, \"very good\", 14, new Date (107, 5, 13)));\n/ / FinteVisite.add (new BeanVisitaBC (5, 1, \"I was really good\", 15, new Date (107, 5, 13)));\n/ / FinteVisite.add (new BeanVisitaBC (4, 1, \"good place\", 16, new Date (107, 5, 14)));\n/ / FinteVisite.add (new BeanVisitaBC (3, 1, \"I guess I'm not going back\", 17, new Date (107, 5, 23)));\n/ / FinteVisite.add (new BeanVisitaBC (3, 1, \"I think there is better\", 18, new Date (107, 5, 24)));\n/ / FinteVisite.add (new BeanVisitaBC (2, 1, \"sucks\", 19, new Date (107, 5, 24)));\n/ / FinteVisite.add (new BeanVisitaBC (5, 1, \"Too beautiful\", 20, new Date (107, 5, 25)));\n\nfinteVisite return;\n)\n\n<BeanVisitaBC> ottieniListaVisitaBCTurista public ArrayList (int pIdTurista)\nthrows SQLException\n(\nreturn null;\n)\n\npublic BeanVisitaBC ottieniVisitaBC (pIdBeneCulturale int, int pIdTurista)\nthrows SQLException\n(\nreturn null;\n)\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942e3"},"name":"Punto3DRenderer.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e2"}]],"contents":"ï»¿package unisa.gps.etour.gui.operatoreagenzia.tables;\n\nimport java.awt.Component;\nimport javax.swing.JLabel;\nimport javax.swing.JTable;\nimport javax.swing.SwingConstants;\nimport javax.swing.table.TableCellRenderer;\nimport unisa.gps.etour.util.Punto3D;\n\n/ **\n  * <b> Punto3DRenderer </ b>\n  <p> * This class creates a custom renderer for\n  * Objects of type Punto3D. </ P>\n  *\n  * @ See javax.swing.table.TableCellRenderer\n  * @ See unisa.gps.etour.util.Punto3D\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  *\n  * /\npublic class Punto3DRenderer implements TableCellRenderer\n(\n/ **\n* Method that returns the custom component for the\n* Display of the data contained in the cell of a table.\n*\n* @ Param pTable JTable - the table.\n* @ Param Object pValue - the data.\n* @ Param boolean pSelected --\n* <ul>\n* <li> <i> True </ i> if the cell is selected.\n* <li> <i> False </ i> otherwise.\n* </ Ul>\n* @ Param boolean pHasFocus --\n* <ul>\n* <li> <i> True </ i> if the cell has the focus.\n* <li> <i> False </ i> otherwise.\n* </ Ul>\n* @ Param int pRow - the line number.\n* @ Param int pColumn - the column number.\n* @ Return Component - the component that customizes render the cell.\n* @ Throws IllegalArgumentException - if the value of the cell can not\n* Be rendered by this renderer.\n* /\npublic Component getTableCellRendererComponent (JTable pTable,\nObject pValue, boolean pSelected, boolean pHasFocus, int prow,\nint pColumn)\n(\nif ((pValue instanceof Punto3D))\n(\nthrow new IllegalArgumentException ( \"Value Cella unexpected.\");\n)\nPointe Punto3D = (Punto3D) pValue;\nAPoint.getLatitudine String point = () + \";\"\nAPoint.getLongitudine + () + \"\" + aPoint.getAltitudine ();\nJLabel aLabel = new JLabel (point, SwingConstants.CENTER);\nif (pSelected)\n(\naLabel.setForeground (pTable.getSelectionForeground ());\naLabel.setBackground (pTable.getSelectionBackground ());\n)\naLabel return;\n\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942e6"},"name":"SchedaBC.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e5"}]],"contents":"ï»¿package unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt .*;\nimport java.awt.event .*;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport javax.swing .*;\nimport java.util .*;\nimport javax.swing.table.TableColumn;\nimport javax.swing.text.JTextComponent;\nimport javax.swing.border .*;\nimport unisa.gps.etour.bean.BeanBeneCulturale;\nimport unisa.gps.etour.bean.BeanTag;\nimport unisa.gps.etour.bean.BeanVisitaBC;\nimport unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia;\nimport unisa.gps.etour.control.GestioneTag.IGestioneTagComune;\nimport unisa.gps.etour.gui.operatoreagenzia.document.LimitedDocument;\nimport unisa.gps.etour.gui.operatoreagenzia.document.NumericDocument;\nimport unisa.gps.etour.gui.operatoreagenzia.document.OnlyCharactersDocument;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.FeedBackTableModel;\nimport unisa.gps.etour.gui.operatoreagenzia.tables.MediaVotiRenderer;\nimport unisa.gps.etour.util.Punto3D;\n\n\n/ **\n  * Class that models the interface for viewing the card,\n  * Modify the data and the insertion of a new cultural object.\n  *\n  * @ Version 1.0\n  * @ Author Mario Gallo\n  *\n  * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --\n  * University of Salerno\n  *\n  * /\npublic class SchedaBC extends JInternalFrame implements IScheda\n(\n\nprivate static final String [] txts = ( \"Name\", \"Address\", \"City\", \"Location\", \"CAP\"\n\"Province\", \"Geographical Location\", \"Phone\",\n\"Opening Hours\", \"Closing Time\"\n\"Closing Date\", \"Ticket price\", \"Description\");\nprivate static final String [] help = (\n\"Enter the name of cultural property.\"\n\"Enter the address where is located the cultural property.\"\n\"Enter the city 'where is located the cultural property.\"\n\"Enter the location 'of membership of a cultural object.\"\n\"Enter your zip code, the area where the cultural object is located.\"\n\"Select the province belonging to the cultural property.\"\n\"Incorporating three dimensional coordinates for the location of\" +\n\"cultural heritage.\"\n\"Enter the phone for delivery of the cultural management office.\"\n\"Select the time of public opening of the cultural property.\"\n\"Select the closing time for the public of cultural property.\"\n\"Select the weekly closing day.\"\n\"Give the ticket price of admission to cultural property.\"\n\"<html> Enter a full and comprehensive description for the cultural property. <br> Please note that this\" +\n\"description will be used as a source of keywords <br> in research by\" +\n\"tourists </ html>\"\n\"<html> Select the search tags for cultural property. <br> search tags allow tourists to seek\" +\n\"The sites with the features of interest. </ Html>\");\nprivate JPanel jContentPane = null;\nPrivate JToolBar toolbarSchedaBC = null;\nPrivate JToggleButton btnModifica = null;\nprivate JButton btnSalva = null;\nprivate JButton btnAnnulla = null;\nprivate JButton btnModificaCommento = null;\nprivate JTabbedPane JTabbedPane = null;\nprivate JPanel statistics = null;\nprivate JPanel feedback = null;\nprivate JTextField address2 = null;\nprivate JComboBox Address1 = null;\nprivate JTextField cittaBC = null;\nprivate JTextField localitaBC = null;\nprivate JTextField capBC = null;\nprivate JTextField posGeoX = null;\nprivate JScrollPane JScrollPane = null;\nprivate JTextArea descrizioneBC = null;\nprivate JTextField telefonoBC = null;\nprivate JComboBox oreAP = null;\nprivate JComboBox minAP = null;\nPrivate TagPanel pannelloTag;\nprivate JTextField costoBC = null;\nprivate JComboBox Oreca = null;\nprivate JComboBox mince = null;\nprivate JComboBox provBC = null;\nprivate JPanel datiBC = null;\nprivate JTextField nomeBC = null;\nprivate JScrollPane scrollPaneFeedback = null;\nprivate JTable tableFeedback = null;\nprivate JLabel txtNomeBene = null;\nprivate JLabel mediaVotoBC = null;\nprivate JPanel statMeseCorrente = null;\nprivate JPanel statTotali = null;\nprivate JTextField posGeoY = null;\nprivate JTextField posGeoZ = null;\nprivate Vector <JLabel> suggestions;\nPrivate BeanBeneCulturale bc;\nprivate JComboBox giornoChiusura;\nprivate JLabel [] statMeseC;\nprivate JLabel [] statt;\nPrivate Beniculturali parent;\nPrivate FeedBackTableModel feedbackModel;\nprotected IGestioneTagComune tags;\nprotected IGestioneBeniCulturaliAgenzia gestioneBC;\nprivate ArrayList <Integer> idTag = null;\n\n/ **\n* The default constructor for inclusion of the interface model\n* A new cultural object.\n*\n* /\npublic SchedaBC (Beniculturali pParent)\n(\nsuper ( \"New Cultural Heritage\");\nframeIcon = new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"nuovoBC.png\"));\nclosable = true;\nresizable = false;\niconable = true;\nsetSize (600, 560);\nsetDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);\nsuggestions <JLabel> = new Vector ();\nparent = pParent;\nbc = null;\n\n/ / Initialize the content pane\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (getToolbarSchedaBC (), BorderLayout.CENTER);\nJTabbedPane = new JTabbedPane ();\njTabbedPane.addTab ( \"Data Cultural Heritage\"\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"dati.png\")),\ngetDatiBCForm (), null);\njContentPane.add (JTabbedPane, BorderLayout.CENTER);\nsetContentPane (jContentPane);\n\n/ / Dialog closure to close the entry window.\naddInternalFrameListener (new InternalFrameAdapter ()\n(\n/ *\n* Inclusion of the frame on the desktop desktop retrieves bread bread\n* And desktop manager and initializes the remote objects for managing\n* Cultural heritage.\n* /\n\npublic void internalFrameOpened (InternalFrameEvent pEvent)\n(\nPEvent.getInternalFrame JInternalFrame frame = ();\n\n/ / Setting up of remote objects for the management of cultural heritage.\nTRY\n(\nRegistry reg = LocateRegistry.getRegistry (Home.HOST);\ntag =\n(IGestioneTagComune) reg.lookup (GestioneTagComune \");\ngestioneBC =\n(IGestioneBeniCulturaliAgenzia) reg.lookup (GestioneBeniCulturaliAgenzia \");\n/ / Load data.\ncaricaTags ();\n)\n/ *\n* Two exceptions: RemoteException and NotBoundException. The\n* Result is the same. The management is not operable and\n* After the error message window closes.\n* /\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> Card for entering a new cultural asset will be closed. </ U> </ h3>\"\n+ \"<p> <b> Possible Causes: </ b>\"\n+ \"<ul> <li> No connection to the network. </ Li>\"\n+ \"Server <li> inactive. </ Li>\"\n+ \"Server <li> clogged. </ Li> </ ul>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (frame, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\nframe.dispose ();\n)\n)\n\npublic void internalFrameClosing (InternalFrameEvent pEvent)\n(\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to cancel the creation of a new cultural asset?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"Warning! Unsaved data will be lost.\" SwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Close\", \"Cancel\");\nint choice = JOptionPane.showInternalOptionDialog (jContentPane, root,\n\"Confirm closure\",\nJOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, options, options [1]);\nif (choice == JOptionPane.OK_OPTION)\n(\nparent.closeScheda ((SchedaBC) pEvent.getInternalFrame ());\n)\n)\n));\n\n/ / Initialize button\nbtnModifica.setVisible (false);\nbtnSalva.setVisible (true);\nbtnAnnulla.setVisible (true);\nbtnAnnulla.setText ( \"Clear\");\n\n\n)\n\n/ **\n* This interface models the manufacturer regarding modification of data and\n* Display of the tab of a cultural object.\n*\n* @ Param BeanBeneCulturale pbc - the bean contains the data of\n* Selected cultural.\n* @ Param boolean pModifica <ul> <li> true - the fields will be editable, and then you are\n* To amend the data of a cultural object. <li> False - the fields will not be\n* Edit, and then you are viewing the tab of a cultural object. </ Ul>\n*\n* /\npublic SchedaBC (Beniculturali pParent, BeanBeneCulturale PBC, boolean pModifica)\n(\nsuper ();\nframeIcon = new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"scheda.png\"));\nclosable = true;\nresizable = false;\niconable = true;\nsetSize (600, 560);\nsetDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);\n\n/ / Initialize instance variables\nbc = pbc;\nthis.parent = pParent;\nsuggestions <JLabel> = new Vector ();\ninitializeSchedaBC ();\n\nif (pModifica) / / Are we change the cultural property.\n(\nbtnModifica.setSelected (true);\nbtnSalva.setVisible (true);\nbtnAnnulla.setVisible (true);\nbtnAnnulla.setText ( \"Reset\");\n)\nelse / / We're viewing the tab of a cultural object.\n(\nmostraNascondiSuggerimenti ();\nattivaDisattivaEdit ();\n)\n\n)\n\n/ **\n* This method returns the id of the cultural property for which you are viewing the\n* Contact or changing data.\n*\n* @ Return int - the id of the cultural property.\n*\n* /\npublic int getId ()\n(\nif (bc == null)\n(\nreturn -1;\n)\nbc.getId return ();\n)\n\n/ **\n*\n* This method initializes the interface for display board\n* A cultural object.\n*\n* @ Return void\n* /\nprivate void initializeSchedaBC ()\n(\nsetTitle (bc.getNome ());\n\n/ / Dialog closed frame\naddInternalFrameListener (new InternalFrameAdapter ()\n(\n/ *\n* Inclusion of the frame on the desktop desktop retrieves bread bread\n* And desktop manager and initializes the remote objects for managing\n* Cultural heritage.\n* /\n\npublic void internalFrameOpened (InternalFrameEvent pEvent)\n(\nPEvent.getInternalFrame JInternalFrame frame = ();\n\n/ / Setting up of remote objects for the management of cultural heritage.\nTRY\n(\nRegistry reg = LocateRegistry.getRegistry (Home.HOST);\ntag =\n(IGestioneTagComune) reg.lookup (GestioneTagComune \");\ngestioneBC =\n(IGestioneBeniCulturaliAgenzia) reg.lookup (GestioneBeniCulturaliAgenzia \");\n/ / Load data.\ncaricaTags ();\ncaricaStatistiche ();\n)\n/ *\n* Two exceptions: RemoteException and NotBoundException. The\n* Result is the same. The management is not operable and\n* After the error message window closes.\n* /\ncatch (Exception ex)\n(\nJLabel error = new JLabel (\n\"<html> <h2> Unable to communicate with the server eTour. </ h2>\"\n+ \"<h3> <u> The board of the cultural inquiry will be closed. </ U> </ h3>\"\n+ \"<p> <b> Possible Causes: </ b>\"\n+ \"<ul> <li> No connection to the network. </ Li>\"\n+ \"Server <li> inactive. </ Li>\"\n+ \"Server <li> clogged. </ Li> </ ul>\"\n+ \"<p> Please try again later. </ P>\"\n+ \"<p> If the error persists, please contact technical support. </ P>\"\n+ \"<p> We apologize for the inconvenience. </ Html>\");\nErr = new ImageIcon ImageIcon (getClass (). GetResource (\nHome.URL_IMAGES + \"error48.png\"));\nJOptionPane.showMessageDialog (frame, error,\n\"Error!\" JOptionPane.ERROR_MESSAGE, err);\nframe.dispose ();\n)\n)\n\npublic void internalFrameClosing (InternalFrameEvent pEvent)\n(\n/ / If you are an amendment asks for confirmation.\nif (btnModifica.isSelected ())\n(\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\n\"Are you sure you want to close the tab of this cultural asset?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"Warning! Unsaved data will be lost.\" SwingConstants.CENTER);\navviso.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Close\", \"Cancel\");\nint choice = JOptionPane.showInternalOptionDialog (jContentPane, root,\n\"Confirm closing tab Cultural Heritage\" bc.getNome + (),\nJOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, options, options [1]);\nif (choice == JOptionPane.OK_OPTION)\n(\nparent.closeScheda ((SchedaBC) pEvent.getInternalFrame ());\n)\n)\n/ / Otherwise directly closes the window.\nelse\n(\nparent.closeScheda ((SchedaBC) pEvent.getInternalFrame ());\n)\n)\n));\n\n/ / Initialize the content pane.\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\njContentPane.add (getToolbarSchedaBC (), BorderLayout.CENTER);\nJTabbedPane = new JTabbedPane ();\njTabbedPane.addTab ( \"Data Cultural Heritage\"\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"dati.png\")),\ngetDatiBCForm (), null);\nNew = new JScrollPane JScrollPane (getStatistiche ());\nnuovo.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\njTabbedPane.addTab ( \"Statistics\"\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"stat24.png\")), new, null);\njTabbedPane.addTab ( \"Feedback received\"\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"feedback.png\")),\ngetFeedback (), null);\njContentPane.add (JTabbedPane, BorderLayout.CENTER);\nsetContentPane (jContentPane);\njTabbedPane.addChangeListener (new ChangeListener ()\n(\n\npublic void stateChanged (ChangeEvent pChange)\n(\n/ / Data cultural\nif (jTabbedPane.getSelectedIndex () == 0)\n(\ntoolbarSchedaBC.setVisible (true);\nbtnModifica.setVisible (true);\nif (btnModifica.isSelected ())\n(\nbtnSalva.setVisible (true);\nbtnAnnulla.setVisible (true);\n)\nbtnModificaCommento.setVisible (false);\n)\n/ / Statistics\nelse if (jTabbedPane.getSelectedIndex () == 1)\n(\ntoolbarSchedaBC.setVisible (false);\n)\n/ / Feedback received\nelse\n(\nif (btnModifica.isSelected ())\n(\nbtnSalva.setVisible (false);\nbtnAnnulla.setVisible (false);\n)\ntoolbarSchedaBC.setVisible (true);\nbtnModificaCommento.setVisible (true);\nbtnModifica.setVisible (false);\n\n)\n\n)\n\n));\n\n/ / Load the data of the cultural and statistics.\ncaricaDatiForm ();\n)\n\n/ **\n*\n* This method loads the data supplied to the constructor of the cultural\n* In the form.\n*\n* /\nprivate void caricaDatiForm ()\n(\nnomeBC.setText (bc.getNome ());\ncapBC.setText (bc.getCap ());\ncittaBC.setText (bc.getCitta ());\ncostoBC.setText ( \"\" + bc.getCostoBiglietto ());\ndescrizioneBC.setText (bc.getDescrizione ());\nStringTokenizer tokenizer = new StringTokenizer (bc.getVia ());\nString string = tokenizer.nextToken ();\nindirizzo1.setSelectedItem (string);\nindirizzo2.setText (bc.getVia (). substring (stringa.length ()));\nprovBC.setSelectedItem (bc.getProvincia ());\nPunto3D pos = bc.getPosizione ();\nposGeoX.setText ( \"\" + pos.getLatitudine ());\nposGeoY.setText ( \"\" + pos.getLongitudine ());\nposGeoZ.setText ( \"\" + pos.getAltitudine ());\ntelefonoBC.setText (bc.getTelefono ());\nint minutes = bc.getOrarioApertura (). getMinutes ();\nif (minutes == 0)\n(\nminAP.setSelectedIndex (0);\n)\nelse\n(\nminAP.setSelectedItem (minutes);\n)\nint hours = bc.getOrarioApertura (). getHours ();\nif (hours <10)\n(\noreAP.setSelectedItem ( \"0\" + hours);\n)\nelse\n(\noreAP.setSelectedItem (hours);\n)\nbc.getOrarioChiusura minutes = (). getMinutes ();\nif (minutes == 0)\n(\nminCH.setSelectedIndex (0);\n)\nelse\n(\nminCH.setSelectedItem (minutes);\n)\nbc.getOrarioChiusura hours = (). getHours ();\nif (hours <10)\n(\noreCH.setSelectedItem ( \"0\" + hours);\n)\nelse\n(\noreCH.setSelectedItem (hours);\n)\n)\n\n/ **\n*\n* This method loads the statistics provided cultural\n* Input to the constructor of the class.\n*\n* /\nprivate void caricaStatistiche ()\n(\ntxtNomeBene.setText (bc.getNome ());\ndouble voting bc.getMediaVoti = ();\nif (rating> = 4)\n(\nmediaVotoBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"stella5.gif \")));\n)\nelse if (rating <4 & & rating> = 3)\n(\nmediaVotoBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"stella4.gif \")));\n)\nelse if (rating <3 & & rating> = 2)\n(\nmediaVotoBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"stella3.gif \")));\n)\nelse if (grade <2 & & rating> = 1)\n(\nmediaVotoBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"stella2.gif \")));\n)\nelse\n(\nmediaVotoBC.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"stella1.gif \")));\n)\n\nArrayList <Integer> stats = null;\nTRY\n(\nstats =\ngestioneBC.ottieniStatisticheBeneCulturale (bc.getId ());\n\n)\ncatch (RemoteException e)\n(\n)\nstatMeseC [0]. setText ( \"\" + stats.get (0));\nstatMeseC [1]. setText ( \"\" + stats.get (1));\nstatMeseC [2]. setText ( \"\" + stats.get (2));\nstatMeseC [3]. setText ( \"\" + stats.get (3));\nstatMeseC [4]. setText ( \"\" + stats.get (4));\nstatMeseC [5]. setText ( \"\" + stats.get (5));\nstatt [0]. setText ( \"142\");\nstatt [1]. setText ( \"112\");\nstatt [2]. setText ( \"132\");\nstatt [3]. setText ( \"212\");\nstatt [4]. setText ( \"152\");\nstatt [5]. setText ( \"748\");\n/ / END TEST\n)\n\n/ **\n*\n* This method shows or hides the label next to the suggestions\n* Of the form.\n*\n* /\nprivate void mostraNascondiSuggerimenti ()\n(\n<JLabel> S = suggerimenti.iterator iterator ();\nwhile (s.hasNext ())\n(\nCurrent = s.next JLabel ();\ncorrente.setVisible (corrente.isVisible ()? false: true);\n)\n)\n\n/ **\n*\n* This method makes the form editable or not.\n*\n* /\nprivate void attivaDisattivaEdit ()\n(\nComponent [] components = datiBC.getComponents ();\nfor (int i = 0; i <componenti.length i + +)\n(\nCurrent component = components [i];\nif (current instanceof JTextField)\n(\nJTextField textbox = (JTextField) current;\ntextbox.setEditable (textbox.isEditable ()? false: true);\ntextbox.setBackground (Color.white);\n\n)\nelse if (current instanceof JComboBox)\n(\nJComboBox combo = (JComboBox) current;\ncombobox.setEnabled (combobox.isEnabled ()? false: true);\n\n)\n)\ndescrizioneBC.setEditable (descrizioneBC.isEditable ()? false: true);\npannelloTag.attivaDisattiva ();\n)\n\n/ **\n* This method initializes the toolbar tab of a cultural object.\n*\n* @ Return javax.swing.JToolBar - the toolbar.\n* /\nPrivate JToolBar getToolbarSchedaBC ()\n(\nif (null == toolbarSchedaBC)\n(\ntoolbarSchedaBC JToolBar = new ();\ntoolbarSchedaBC.setFloatable (false);\ntoolbarSchedaBC.add (getBtnModifica ());\ntoolbarSchedaBC.addSeparator ();\ntoolbarSchedaBC.add (getBtnSalva ());\ntoolbarSchedaBC.addSeparator ();\ntoolbarSchedaBC.add (getBtnAnnulla ());\ntoolbarSchedaBC.addSeparator ();\nif (bc! = null)\n(\ntoolbarSchedaBC.add (getBtnModificaCommento ());\ntoolbarSchedaBC.addSeparator ();\n)\n)\ntoolbarSchedaBC return;\n)\n\n/ **\n* This method initializes the button to modify data of good\n* Cultural.\n*\n* @ Return javax.swing.JToggleButton - the button for the change.\n*\n* /\nPrivate JToggleButton getBtnModifica ()\n(\nif (null == btnModifica)\n(\nbtnModifica JToggleButton = new ();\nbtnModifica.setText ( \"Change Data\");\nbtnModifica\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES + \"ModificaBC32.png \")));\nbtnModifica.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnModifica.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nmostraNascondiSuggerimenti ();\nattivaDisattivaEdit ();\nbtnSalva.setVisible ((btnModifica.isSelected ()? true\n: False));\nbtnAnnulla.setVisible ((btnModifica.isSelected ()? true\n: False));\n\n)\n\n));\n)\nbtnModifica return;\n)\n\n/ **\n* This method initializes btnSalva\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnSalva ()\n(\nif (null == btnSalva)\n(\nbtnSalva = new JButton ();\nbtnSalva.setText ( \"Save\");\nbtnSalva.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"salva.png \")));\nbtnSalva.setVisible (false);\nbtnSalva.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnSalva.addActionListener (new ActionListener ()\n(\npublic void actionPerformed (ActionEvent pEvent)\n(\nif (bc == null)\n(\nbc = riversaDatiNelBean ();\nTRY\n(\ngestioneBC.inserisciBeneCulturale (bc);\n)\ncatch (RemoteException ex)\n(\nex.printStackTrace ();\n)\n)\nelse (\n/ / Construction of the dialog for confirmation of the change\nRoot = new JPanel JPanel (new BorderLayout ());\nJLabel message = new JLabel (\nUpdating the data of the cultural \"\nBc.getNome + () + \"with\"\n+ \"Data form?\");\nmessage.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\nJLabel alert = new JLabel (\n\"The previous data can not be more recovered.\"\nSwingConstants.CENTER);\nLegal\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES + \"warning16.png \")));\nroot.add (message, BorderLayout.NORTH);\nroot.add (notice, BorderLayout.CENTER);\nString [] options = ( \"Edit\", \"Cancel\");\n/ / The dialog screen appears\nint choice = JOptionPane\n. showInternalOptionDialog (\njContentPane,\nroot\n\"Edit Data Confirm Cultural Heritage\"\nJOptionPane.YES_NO_OPTION,\nJOptionPane.QUESTION_MESSAGE,\nnew ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES + \"ModificaBC48.png\")),\noptions, options [1]);\n/ / If you chose to confirm the change\nif (choice == JOptionPane.YES_OPTION)\n(\nbc = riversaDatiNelBean ();\ncaricaDatiForm ();\nattivaDisattivaEdit ();\nbtnSalva.setVisible (false);\nbtnAnnulla.setVisible (false);\nbtnModifica.setSelected (false);\nmostraNascondiSuggerimenti ();\nparent.updateTableModel (bc);\nJOptionPane\n. showInternalMessageDialog (\njContentPane,\nThe data of the cultural object has been updated successfully. \"\n\"Data cultural change!\"\nJOptionPane.OK_OPTION,\nnew ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES + \"ok32.png \")));\n)\n)\n)\n));\n)\nbtnSalva return;\n)\n\n/ **\n* This method initializes the button to clear the form (well again\n* Culture) or reload the data of the cultural (change data).\n*\n* @ Return javax.swing.JButton - the button above.\n*\n* /\nprivate JButton getBtnAnnulla ()\n(\nif (null == btnAnnulla)\n(\nbtnAnnulla = new JButton ();\nbtnAnnulla.setText ( \"Cancel\");\nbtnAnnulla\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES + \"Annulla32.png \")));\nbtnAnnulla.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nbtnAnnulla.setVisible (false);\nbtnAnnulla.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent arg0)\n(\nif (bc == null)\n(\nComponent [] components = datiBC.getComponents ();\nfor (int i = 0; i <componenti.length i + +)\n(\nCurrent component = components [i];\nif (current instanceof JTextComponent)\n(\n((JTextComponent) current). SetText (\"\");\n)\nelse if (current instanceof JComboBox)\n(\nJComboBox combo = (JComboBox) current;\ncombobox.setSelectedIndex (-1);\n)\n)\npannelloTag.azzera ();\ndescrizioneBC.setText (\"\");\n)\nelse\n(\ncaricaDatiForm ();\n)\n\n)\n\n));\n)\nbtnAnnulla return;\n)\n\n/ **\n* This method initializes the button to edit a comment.\n*\n* @ Return javax.swing.JButton - the button to edit a comment.\n* /\nprivate JButton getBtnModificaCommento ()\n(\nif (null == btnModificaCommento)\n(\nbtnModificaCommento = new JButton ();\nbtnModificaCommento.setText ( \"Edit Comment\");\nbtnModificaCommento\n. setIcon (new ImageIcon (\ngetClass ()\n. getResource (\nHome.URL_IMAGES + \"modificaCommento.png \")));\nbtnModificaCommento.setVisible (false);\nbtnModificaCommento.setEnabled (false);\nbtnModificaCommento.addActionListener (new ActionListener ()\n(\n\npublic void actionPerformed (ActionEvent pEvent)\n(\nint selectedRow = tableFeedback.getSelectedRow ();\nNuovoCommento String = (String) JOptionPane.showInternalInputDialog (\njContentPane, \"Changing the selected comment:\"\n\"Edit Comment\", JOptionPane.QUESTION_MESSAGE,\nnew ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"modificaCommento.png\")),\nnull feedbackModel.getValueAt (selectedRow, 1));\nif (nuovoCommento = null)\n(\nfeedbackModel.modificaCommento (nuovoCommento, selectedRow);\n)\n)\n\n));\n)\nbtnModificaCommento return;\n)\n\n/ **\n* This method initializes the format for the data of a cultural object.\n*\n* @ Return javax.swing.JPanel - the form for the data.\n*\n* /\nprivate JPanel getDatiBCForm ()\n(\nif (null == datiBC)\n(\ndatiBC = new JPanel (null);\ndatiBC.setBorder (new SoftBevelBorder (SoftBevelBorder.LOWERED));\n\n/ / Creation Tips\nfor (int i = 0; i <help.length i + +)\n(\nJLabel new = new JLabel ();\nnuova.setIcon (new ImageIcon (getClass (). getResource (\nHome.URL_IMAGES + \"Info16.png \")));\nnuova.setBounds (145, 8 + 30 * i, 24, 24);\nnuova.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));\nnuova.setToolTipText (help [i]);\nsuggerimenti.add (new);\ndatiBC.add (new);\nif (i == help.length - 1)\n(\nnuova.setBounds (400, 155, 24, 24);\n)\n\n)\n\nfor (int i = 0; i <txts.length i + +)\n(\nNew = new JLabel JLabel (txts [i], SwingConstants.RIGHT);\nnuova.setBounds (25, 10 + 30 * i, 120, 16);\nnuova.repaint ();\ndatiBC.add (new, null);\n)\n/ / Name of Cultural Heritage\nnomeBC = new JTextField ();\nnomeBC.setColumns (12);\nnomeBC.setDocument (new LimitedDocument (30));\nnomeBC.setBounds (185, 10, 136, 20);\nnomeBC.setName ( \"Name Cultural Heritage\");\ndatiBC.add (nomeBC, null);\n\n/ / Address\naddress2 = new JTextField ();\nindirizzo2.setBounds (270, 40, 136, 20);\nindirizzo2.setDocument (new LimitedDocument (30));\nAddress1 = new JComboBox (address);\nindirizzo1.setSelectedIndex (-1);\nindirizzo1.setBounds (185, 40, 60, 20);\nindirizzo2.setName ( \"Address\");\ndatiBC.add (address2, null);\ndatiBC.add (Address1, null);\n\n/ / City\ncittaBC = new JTextField ();\ncittaBC.setColumns (12);\ncittaBC.setBounds (185, 70, 136, 20);\ncittaBC.setName ( \"City\");\ncittaBC.setDocument (new OnlyCharactersDocument (25));\ndatiBC.add (cittaBC);\n\n/ / Location\nlocalitaBC = new JTextField ();\nlocalitaBC.setBounds (185, 100, 136, 20);\nlocalitaBC.setName (Localit \");\nlocalitaBC.setDocument (new OnlyCharactersDocument (25));\ndatiBC.add (localitaBC, null);\n\n/ / CAP\ncapBC = new JTextField ();\ncapBC.setColumns (8);\ncapBC.setBounds (185, 130, 92, 20);\ncapBC.setDocument (new NumericDocument (5));\ndatiBC.add (capBC, null);\n\n\n/ / Geographical Location\nJLabel txtX = new JLabel ( \"X\");\nJLabel txtY = new JLabel ( \"Y\");\nJLabel txtZ = new JLabel ( \"Z\");\nNew fonts = new Font ( \"Dialog\", Font.BOLD, 14);\ntxtX.setFont (new);\ntxtY.setFont (new);\ntxtZ.setFont (new);\ntxtZ.setBounds (365, 190, 10, 22);\ntxtY.setBounds (295, 190, 10, 22);\ntxtX.setBounds (227, 190, 14, 20);\nposGeoX = new JTextField (12);\nposGeoX.setBounds (185, 190, 40, 20);\nposGeoY = new JTextField (12);\nposGeoY.setBounds (255, 190, 40, 20);\nposGeoZ = new JTextField (12);\nposGeoZ.setBounds (325, 190, 40, 20);\nposGeoX.setName ( \"X-coordinate\");\nposGeoY.setName ( \"Y coordinate\");\nposGeoZ.setName ( \"z coordinate\");\ndatiBC.add (txtX, null);\ndatiBC.add (txtY, null);\ndatiBC.add (txtZ, null);\ndatiBC.add (posGeoX, null);\ndatiBC.add (posGeoY, null);\ndatiBC.add (posGeoZ, null);\n\n/ / State\nprovBC = new JComboBox (province);\nprovBC.setSelectedIndex (-1);\nprovBC.setBounds (185, 160, 50, 20);\ndatiBC.add (provBC, null);\n\n/ / Description\ndescrizioneBC = new JTextArea ();\ndescrizioneBC.setCursor (new Cursor (Cursor.TEXT_CURSOR));\ndescrizioneBC.setWrapStyleWord (true);\ndescrizioneBC.setLineWrap (true);\nJScrollPane = new JScrollPane (descrizioneBC);\nJScrollPane\n. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\njScrollPane.setBounds (new Rectangle (185, 370, 395, 69));\ndescrizioneBC.setName ( \"Description\");\ndatiBC.add (JScrollPane, null);\n\n/ / Phone\ntelefonoBC = new JTextField (12);\ntelefonoBC.setBounds (185, 220, 136, 20);\ntelefonoBC.setDocument (new NumericDocument (10));\ntelefonoBC.setName ( \"Phone\");\ndatiBC.add (telefonoBC, null);\n\n/ / Opening\noreAP = new JComboBox ();\noreAP.setBounds (185, 250, 40, 20);\nOreca = new JComboBox ();\noreCH.setBounds (185, 280, 40, 20);\nfor (int i = 0; i <24; i + +)\n(\nif (i <10)\n(\noreCH.addItem ( \"0\" + i);\noreAP.addItem ( \"0\" + i);\n)\nelse\n(\noreAP.addItem (i);\noreCH.addItem (i);\n)\n)\nminAP = new JComboBox ();\nminAP.setBounds (241, 250, 40, 20);\nminAP.addItem ( \"00\");\nminAP.addItem ( \"15\");\nminAP.addItem ( \"30\");\nminAP.addItem ( \"45\");\nmince = new JComboBox ();\nminCH.setBounds (241, 280, 40, 20);\nminCH.addItem ( \"00\");\nminCH.addItem ( \"15\");\nminCH.addItem ( \"30\");\nminCH.addItem ( \"45\");\nminAP.setSelectedIndex (0);\noreAP.setSelectedIndex (-1);\nminCH.setSelectedIndex (0);\noreCH.setSelectedIndex (-1);\nnew = new Font ( \"Dialog\", Font.BOLD, 18);\nTAG 1 = new JLabel JLabel (\":\");\npunto1.setBounds (230, 245, 10, 24);\npunto1.setFont (new);\nJLabel punto2 = new JLabel (\":\");\npunto2.setBounds (230, 275, 10, 24);\npunto2.setFont (new);\ndatiBC.add (oreAP, null);\ndatiBC.add (minAP, null);\ndatiBC.add (mince, null);\ndatiBC.add (Oreca, null);\ndatiBC.add (point 1, null);\ndatiBC.add (punto2, null);\n\n/ / Closed\nString [] days = ( \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n\"Friday\", \"Saturday\", \"Sunday\");\ngiornoChiusura = new JComboBox (days);\ngiornoChiusura.setBounds (185, 310, 96, 20);\ngiornoChiusura.setSelectedIndex (-1);\ndatiBC.add (giornoChiusura, null);\n\n/ / Cost\ncostoBC = new JTextField ();\ncostoBC.setColumns (8);\ncostoBC.setBounds (185, 340, 40, 20);\nJLabel euro = new JLabel ( \"Euro\");\neuro.setBounds (230, 340, 30, 16);\ndatiBC.add (costoBC, null);\ndatiBC.add (euro, null);\n\n/ / PannelloTag\npannelloTag = new TagPanel ();\npannelloTag.setBounds (405, 180, 180, 170);\nJLabel txtTag = new JLabel ( \"Search Tags\");\ntxtTag.setBounds (420, 150.140, 30);\ndatiBC.add (txtTag, null);\ndatiBC.add (pannelloTag, null);\n\n)\ndatiBC return;\n)\n\n/ **\n* This method initializes the statistics of a container panel\n* Cultural.\n*\n* @ Return javax.swing.JPanel - the panel statistics.\n*\n* /\nprivate JPanel getStatistiche ()\n(\nif (statistics == null)\n(\nstatistics = new JPanel (new GridBagLayout ());\nGridBagConstraints g = new GridBagConstraints ();\ng.gridx = 0;\ng.gridy = 0;\ng.insets = new Insets (5, 5, 5, 5);\ng.anchor = GridBagConstraints.WEST;\nStat = new JLabel JLabel ( \"Statistics\");\nNew fonts = new Font ( \"Dialog\", Font.BOLD, 18);\nstat.setFont (new);\nstatistiche.add (stat, g);\ng.gridx = 1;\ntxtNomeBene = new JLabel ();\ntxtNomeBene.setFont (new);\nstatistiche.add (txtNomeBene, g);\ng.gridx = 2;\nmediaVotoBC = new JLabel ();\nstatistiche.add (mediaVotoBC, g);\ng.gridwidth = 3;\ng.gridx = 0;\ng.anchor = GridBagConstraints.CENTER;\ng.gridy = 1;\nstatistiche.add (getStatMeseCorrente (), g);\ng.gridy = 2;\nstatistiche.add (getStatTotali (), g);\n)\nreturn statistics;\n)\n\n/ **\n* This method initializes the panel to display feedback\n* Received from a cultural object.\n*\n* @ Return javax.swing.JPanel - the panel of feedback.\n*\n* /\nprivate JPanel getFeedback ()\n(\nif (feedback == null)\n(\nfeedback = new JPanel ();\nfeedback.setLayout (new BorderLayout ());\nfeedbackModel = new FeedBackTableModel ();\ntableFeedback = new JTable (feedbackModel);\nTableColumn aColumn = tableFeedback.getColumnModel (). GetColumn (0);\n/ / Rating\naColumn.setPreferredWidth (80);\naColumn.setCellRenderer (new MediaVotiRenderer ());\n/ / Comment\naColumn = tableFeedback.getColumnModel (). GetColumn (1);\naColumn.setPreferredWidth (260);\n/ / Release Date\naColumn = tableFeedback.getColumnModel (). GetColumn (2);\naColumn.setPreferredWidth (80);\n/ / Username\naColumn = tableFeedback.getColumnModel (). GetColumn (3);\naColumn.setPreferredWidth (80);\ntableFeedback.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);\ntableFeedback.setColumnSelectionAllowed (false);\nListSelectionModel selectionModel = tableFeedback.getSelectionModel ();\nselectionModel\n. addListSelectionListener (new ListSelectionListener ()\n(\npublic void ValueChanged (ListSelectionEvent event)\n(\nbtnModificaCommento.setEnabled (\n(tableFeedback.getSelectedRow ()! = -1)\n? true: false);\n)\n));\nscrollPaneFeedback = new JScrollPane (tableFeedback);\nscrollPaneFeedback\n. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\nfeedback.add (scrollPaneFeedback, BorderLayout.CENTER);\n\n)\nreturn feedback;\n)\n\n/ **\n* This method initializes the panel of statistics for the current month.\n*\n* @ Return javax.swing.JPanel - the panel of statistics for the current month.\n*\n* /\nprivate JPanel getStatMeseCorrente ()\n(\nif (null == statMeseCorrente)\n(\nstatMeseCorrente = new JPanel ();\nstatMeseCorrente.setLayout (new GridBagLayout ());\nstatMeseCorrente.setPreferredSize (new Dimension (500, 280));\nstatMeseCorrente.setBorder (BorderFactory.createTitledBorder (\nBorderFactory.createLineBorder (new Color (51, 102, 255), 3),\n\"Statistics Current Month\"\nTitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\nstatMeseCorrente.setBackground (Color.white);\nstatMeseC = new JButton [6];\nGridBagConstraints g = new GridBagConstraints ();\ng.gridx = 0;\ng.gridy = 0;\ng.gridwidth = 3;\ng.insets = new Insets (5, 5, 5, 8);\ng.anchor = GridBagConstraints.WEST;\nstatMeseCorrente.add (new JLabel (\n\"Details votes received this month:\"), g);\ng.anchor = GridBagConstraints.CENTER;\ng.gridwidth = 1;\nNew fonts = new Font ( \"Dialog\", Font.BOLD, 16);\nfor (int i = 5; i> = 1, i -)\n(\n\nint gridX = g.gridx;\ng.gridy + +;\nJLabel aLabel = new JLabel (new ImageIcon (getClass ()\n. getResource (\nHome.URL_IMAGES + \"star\" + i\n+. \"Gif\")), JLabel.CENTER);\nstatMeseCorrente.add (aLabel, g);\ng.gridx + +;\nstatMeseCorrente.add (new JLabel (\"==\"), g);\ng.gridx + +;\ng.anchor = GridBagConstraints.EAST;\nstatMeseC [i - 1] = new JLabel ();\nstatMeseC [i - 1]. setFont (new);\nstatMeseCorrente.add (statMeseC [i - 1], g);\ng.gridx = gridX;\ng.anchor = GridBagConstraints.CENTER;\n)\ng.gridy = 6;\ng.anchor = GridBagConstraints.WEST;\ng.gridwidth = 2;\ng.gridx = 0;\nstatMeseCorrente.add (new JLabel (\n\"Number of ratings released this month:\"), g);\nstatMeseC [5] = new JLabel ();\nstatMeseC [5]. setFont (new Font ( \"Dialog\", Font.BOLD, 18));\ng.gridx = 2;\ng.gridwidth = 1;\nstatMeseCorrente.add (statMeseC [5], g);\n\n)\nstatMeseCorrente return;\n)\n\n/ **\n* This method initializes the panel on the total statistics\n* The cultural property.\n*\n* @ Return javax.swing.JPanel - the panel statistics totals.\n*\n* /\nprivate JPanel getStatTotali ()\n(\nif (null == statTotali)\n(\nstatTotali = new JPanel ();\nstatTotali.setLayout (new GridBagLayout ());\nstatTotali.setPreferredSize (new Dimension (500, 280));\nstatTotali.setBorder (BorderFactory.createTitledBorder (BorderFactory\n. createLineBorder (new Color (51, 102, 255), 3),\n\"Statistics Total\", TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\",\nFont.BOLD, 12), new Color (0, 102, 204)));\nstatTotali.setBackground (Color.white);\nstatt = new JButton [6];\nGridBagConstraints g = new GridBagConstraints ();\ng.gridx = 0;\ng.gridy = 0;\ng.gridwidth = 3;\ng.insets = new Insets (5, 5, 5, 8);\ng.anchor = GridBagConstraints.WEST;\nstatTotali.add (new JLabel (\n\"Details votes received this month:\"), g);\ng.anchor = GridBagConstraints.CENTER;\ng.gridwidth = 1;\nNew fonts = new Font ( \"Dialog\", Font.BOLD, 16);\nfor (int i = 5; i> = 1, i -)\n(\nint gridX = g.gridx;\ng.gridy + +;\nJLabel aLabel = new JLabel (new ImageIcon (getClass ()\n. getResource (\n\"/ unisa / gps / eTour / gui / images / star\" + i\n+. \"Gif\")), JLabel.CENTER);\nstatTotali.add (aLabel, g);\ng.gridx + +;\nstatTotali.add (new JLabel (\"==\"), g);\ng.gridx + +;\ng.anchor = GridBagConstraints.EAST;\nstatt [i - 1] = new JLabel ();\nstatt [i - 1]. setFont (new);\nstatTotali.add (statt [i - 1], g);\ng.gridx = gridX;\ng.anchor = GridBagConstraints.CENTER;\n)\ng.gridy = 6;\ng.anchor = GridBagConstraints.WEST;\ng.gridwidth = 2;\ng.gridx = 0;\nstatTotali.add (new JLabel (\n\"Number of ratings released this month:\"), g);\nstatt [5] = new JLabel ();\nstatt [5]. setFont (new Font ( \"Dialog\", Font.BOLD, 18));\ng.gridx = 2;\ng.gridwidth = 1;\nstatTotali.add (statt [5], g);\n)\nstatTotali return;\n)\n\nPrivate BeanBeneCulturale riversaDatiNelBean ()\n(\nBeanBeneCulturale new BeanBeneCulturale = new ();\nnuovo.setNome (nomeBC.getText ());\nnuovo.setDescrizione (descrizioneBC.getText ());\nnuovo.setCap (capBC.getText ());\nnuovo.setCostoBiglietto (Double.parseDouble (costoBC.getText ()));\nnuovo.setGiornoChiusura ((String) giornoChiusura.getSelectedItem ());\nnuovo.setTelefono (telefonoBC.getText ());\nnuovo.setCitta (cittaBC.getText ());\nnuovo.setLocalita (localitaBC.getText ());\n/ / Date (int year, int month, int date, int hrs, int min)\nDate orarioAP = new Date (0,0,0, oreAP.getSelectedIndex (),\nminAP.getSelectedIndex ());\nDate orarioCH = new Date (0,0,0, oreCH.getSelectedIndex (),\nminCH.getSelectedIndex ());\nnuovo.setOrarioApertura (orarioAP);\nnuovo.setOrarioChiusura (orarioCH);\nnuovo.setProvincia ((String) provBC.getSelectedItem ());\nnuovo.setVia (((String) indirizzo1.getSelectedItem ()) + \"\" + indirizzo2.getText ());\nPunto3D position = new Punto3D (\nDouble.parseDouble (posGeoX.getText ()),\nDouble.parseDouble (posGeoY.getText ()),\nDouble.parseDouble (posGeoZ.getText ()));\nnuovo.setPosizione (position);\nreturn new;\n)\n\nprivate void caricaTags ()\n(\nArrayList <BeanTag> beanTags = null;\nTRY\n(\nbeanTags = tag.ottieniTags ();\nif (bc! = null)\n(\nidTag <Integer> = new ArrayList ();\nArrayList <BeanTag> tagDaSelezionare =\ngestioneBC.ottieniTagBeneCulturale (bc.getId ());\nfor (BeanTag b: tagDaSelezionare)\n(\nidTag.add (b.getId ());\n)\n)\n)\n/ / If an error panel tag remains blank.\ncatch (RemoteException e)\n(\n)\nfinally\n(\nfor (BeanTag b: beanTags)\n(\npannelloTag.insertTag (b);\n)\npannelloTag.setSelectedTags (idTag);\npannelloTag.repaint ();\n)\n)\n)\n"}
{"_id":{"$oid":"5ea8c53b6864fdc7df6942e7"},"name":"SchedaPR.java","system":"eTour","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c53b6864fdc7df6942e5"}]],"contents":"/ *\n* SchedaPR.java\n*\n* 1.0\n*\n* 28/05/2007\n*\n* © 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno\n* /\n\npackage unisa.gps.etour.gui.operatoreagenzia;\n\nimport java.awt.BorderLayout;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.InputVerifier;\nimport javax.swing.JComponent;\nimport javax.swing.JPanel;\nimport javax.swing.JInternalFrame;\nimport javax.swing.ImageIcon;\nimport javax.swing.WindowConstants;\nimport java.awt.Dimension;\nimport javax.swing.JTabbedPane;\nimport java.awt.GridBagLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridBagConstraints;\nimport javax.swing.JTextField;\nimport javax.swing.JComboBox;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport java.awt.Rectangle;\nimport javax.swing.JToolBar;\nimport javax.swing.JToggleButton;\nimport javax.swing.JButton;\nimport java.awt.font;\nimport java.awt.Cursor;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.StringTokenizer;\n\nimport javax.swing.JComboBox.KeySelectionManager;\nimport javax.swing.border.SoftBevelBorder;\nimport javax.swing.border.TitledBorder;\nimport javax.swing.text.AttributeSet;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.PlainDocument;\nimport javax.swing.JCheckBox;\nimport javax.swing.JTable;\nimport unisa.gps.etour.bean .*;\nimport unisa.gps.etour.bean.util.Punto3D;\n/ **\n  * Class that models the interface for viewing the card,\n  * Modify the data and the insertion of a new resting spot.\n  *\n  * @ Author Lello\n  *\n  * /\nextends JInternalFrame (public class SchedaPR\n\nprivate JPanel jContentPane = null;\nPrivate JToolBar toolbarSchedaBC = null;\nPrivate JToggleButton btnModifica = null;\nprivate JButton btnSalva = null;\nprivate JButton btnAnnulla = null;\nbtnModificaCommento JButton private = null;\nprivate JTabbedPane JTabbedPane = null;\nprivate JPanel statistics = null;\nprivate JPanel feedback = null;\nprivate JLabel txtNome = null;\nprivate JLabel txtIndirizzo = null;\nprivate JLabel txtCAP = null;\nprivate JLabel txtCitta = null;\nprivate JLabel txtLocalità = null;\nprivate JLabel txtProvincia = null;\nprivate JLabel txtPos = null;\nprivate JLabel txtTel = null;\nprivate JLabel txtOraAp = null;\nprivate JLabel txtOraCh = null;\n\nprivate JLabel JLabel = null;\nprivate JTextField indirizzoPR = null;\nprivate JComboBox indirizzoPR1 = null;\nprivate JTextField cittaPR = null;\nprivate JComboBox localitaPR = null;\nprivate JTextField capPR = null;\nprivate JScrollPane JScrollPane = null;\nprivate JTextArea descrizionePR = null;\nprivate JTextField telefonoPR = null;\nprivate JComboBox orarioAPOrePR = null;\nprivate JLabel jLabel1 = null;\nprivate JComboBox orarioApMinPR = null;\nPrivate TagPanel pannelloTag;\nprivate JTextField costoBC = null;\n\nprivate JLabel jLabel3 = null;\nprivate JComboBox orarioCHMinPR = null;\nprivate JComboBox provPR = null;\nprivate JPanel datiPR = null;\nprivate JTextField nomePR = null;\nprivate JPanel JPanel = null;\nprivate JScrollPane jScrollPane2 = null;\nprivate JTable feedbackTable = null;\nprivate JLabel txtNomeBene = null;\nprivate JLabel mediaVotoPR = null;\nprivate JPanel statisticheMeseCorrente = null;\nprivate JPanel statisticheTotali = null;\nprivate JLabel jLabel4 = null;\nprivate JLabel jLabel41 = null;\nprivate ActionListener campoCompilato;\nPrivate FocusListener validating;\nPrivate JToolBar ToolbarSchedaPR = null;\nprivate JTextField posGeoX = null;\nprivate JTextField posGeoY = null;\nprivate JTextField posGeoZ = null;\nprivate JLabel jLabel2 = null;\nprivate JComboBox orarioCHOrePR = null;\n/ **\n* The default constructor for inclusion of the interface model\n* A new refreshment.\n*\n* /\npublic SchedaPR ()\n(\nsuper ( \"New Refreshment\");\ncampoCompilato = new ActionListener () (\n\npublic void actionPerformed (ActionEvent actionEvent)\n(\n((JComponent) actionEvent.getSource ()). TransferFocus ();\n)\n\n);\nvalidating FocusListener = new () (\n\nprivate final ERROR_BACKGROUND Color = new Color (255, 215, 215);\nprivate final WARNING_BACKGROUND Color = new Color (255, 235, 205);\nprivate String text;\n\npublic void focusGained (FocusEvent fe) (\nif (fe.getSource () instanceof JTextField) (\nJTextField textbox = (JTextField) fe.getSource ();\ntextbox.getText text = ();\n)\n\n)\n\npublic void focusLost (FocusEvent fe) (\nif (fe.getSource () instanceof JTextField) (\nJTextField textbox = (JTextField) fe.getSource ();\nif (! text.equals (textbox.getText ())) (\ntextbox.getText text = ();\nif (text.equals (\"\")) (\ntextbox.setBackground (ERROR_BACKGROUND);\nRectangle bounds = textbox.getBounds ();\nJLabel new = new JLabel ();\nnuova.setIcon (new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / images / error.png \")));\nnuova.setBounds (bounds.x-24, bounds.y, 24.24);\nnuova.setToolTipText ( \"Field\" + textbox.getName () + \"can not be empty!\");\ndatiPR.add (new, null);\ndatiPR.repaint ();\n)\n)\n)\n\n)\n\n);\ninitialize ();\n)\n/ **\n* This interface models the manufacturer regarding modification of data and\n* Display board a refreshment.\n* @ Param unisa.gps.etour.bean.BeanPuntoDiRistoro PR - the bean contains the data of\n* PuntoDiRistoro selected.\n* @ Param boolean change - indicates whether the fields should be editable, so if\n* You are viewing a card or change the cultural property.\n*\n* /\npublic SchedaPR (BeanPuntoDiRistoro pr, boolean edit)\n(\nthis ();\n\nnomePR.setText (pr.getNome ());\nsetTitle (pr.getNome ());\ncapPR.setText (pr.getCap ());\ncittaPR.setText (pr.getCitta ());\n\ndescrizionePR.setText (pr.getDescrizione ());\nStringTokenizer tokenizer = new StringTokenizer (pr.getVia ());\n/ *\n* IndirizzoPR1.addItem ( \"Via\");\nindirizzoPR1.addItem (P.zza \");\nindirizzoPR1.addItem ( \"V.le\");\nindirizzoPR1.addItem (V.co \");\nindirizzoPR1.addItem ( \"Largo\");\nindirizzoPR1.addItem ( \"Course\");\n* /\nString [] path = ( \"Street\", \"P.zza\", \"V.le\", \"V.co\", \"Largo\", \"Course\");\nString string = tokenizer.nextToken ();\nint i;\nfor (i = 0; i <via.length i + +)\nif (stringa.equalsIgnoreCase (via [i]))\nbreak;\nthis.indirizzoPR1.setSelectedIndex (i);\nwhile (tokenizer.hasMoreTokens ())\nthis.indirizzoPR.setText (indirizzoPR.getText () + \"\" + tokenizer.nextToken ());\nthis.provPR.setSelectedItem (pr.getProvincia ());\nPunto3D pos = pr.getPosizione ();\nthis.posGeoX.setText ( \"\" + pos.getX ());\nthis.posGeoY.setText ( \"\" + pos.getY ());\nthis.posGeoZ.setText ( \"\" + pos.getZ ());\nthis.telefonoPR.setText (pr.getTelefono ());\nint minutes = pr.getOrarioApertura (). getMinutes ();\nif (minutes == 0)\nthis.orarioApMinPR.setSelectedIndex (0);\nelse\nthis.orarioApMinPR.setSelectedItem (minutes);\nint hours = pr.getOrarioApertura (). getHours ();\nif (hours <10)\nthis.orarioAPOrePR.setSelectedItem ( \"0\" + hours);\nelse\nthis.orarioAPOrePR.setSelectedItem (hours);\nthis.orarioCHMinPR.setSelectedItem (pr.getOrarioChiusura (). getMinutes ());\nthis.orarioAPOrePR.setSelectedItem (pr.getOrarioApertura (). getHours ());\nthis.orarioCHOrePR.setSelectedItem (pr.getOrarioChiusura (). getHours ());\nif (change) (\nbtnModifica.setSelected (true);\n)\nelse (\nmakeEditabled ();\n)\n\n)\n/ **\n* Method called by the constructor\n*\n* @ Return void\n* /\nprivate void initialize () (\nthis.setIconifiable (true);\nthis.setBounds (new Rectangle (0, 0, 600, 540));\nthis.setDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);\nthis.setFrameIcon (new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / operatoreagenzia / images / scheda.png \")));\nthis.setClosable (true);\nthis.setContentPane (getJContentPane ());\n)\n\nprivate void makeEditabled ()\n(\nComponent [] components = datiPR.getComponents ();\nfor (int i = 0; i <componenti.length i + +) (\nCurrent component = components [i];\nif (current instanceof JTextField)\n(\nJTextField textbox = (JTextField) current;\ntextbox.setEditable (textbox.isEditable ()? false: true);\ntextbox.setBackground (Color.white);\n\n)\nelse if (current instanceof JComboBox)\n(\nJComboBox combo = (JComboBox) current;\ncombobox.setEnabled (combobox.isEnabled ()? false: true);\n\n)\n)\ndescrizionePR.setEditable (descrizionePR.isEditable ()? false: true);\npannelloTag.attivaDisattiva ();\n)\n\n\n/ **\n* Method which initializes a jContentPane\n*\n* @ Return javax.swing.JPanel\n* /\ngetJContentPane private JPanel () (\nif (jContentPane == null) (\njContentPane = new JPanel ();\njContentPane.setLayout (new BorderLayout ());\n\njContentPane.add (getJTabbedPane (), BorderLayout.CENTER);\njContentPane.add (getToolbarSchedaPR (), BorderLayout.CENTER);\n)\njContentPane return;\n)\n\n/ **\n* This method initializes the button (ToggleButton) the alteration\n* Data for puntoDiRistoro\n*\n* @ Return javax.swing.JToggleButton\n* /\nPrivate JToggleButton getBtnModifica () (\nif (btnModifica == null) (\nbtnModifica JToggleButton = new ();\nbtnModifica.setText ( \"Change Data\");\nbtnModifica.setIcon (new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / operatoreagenzia / images / modifica.png \")));\nbtnModifica.addActionListener (new ActionListener () (\n\npublic void actionPerformed (ActionEvent arg0) (\nmakeEditabled ();\nbtnSalva.setVisible ((btnModifica.isSelected ()? true: false));\nbtnAnnulla.setVisible ((btnModifica.isSelected ()? true: false));\n\n\n)\n\n));\n)\nbtnModifica return;\n)\n\n/ **\n* Method to initialize the Save button (btnSalva)\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnSalva () (\nif (btnSalva == null) (\nbtnSalva = new JButton ();\nbtnSalva.setText ( \"Save\");\nbtnSalva.setIcon (new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / operatoreagenzia / images / salva.png \")));\nbtnSalva.setVisible (false);\n)\nbtnSalva return;\n)\n\n/ **\n* Method to initialize the Cancel button (btnAnnulla)\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnAnnulla () (\nif (btnAnnulla == null) (\nbtnAnnulla = new JButton ();\nbtnAnnulla.setText ( \"Cancel\");\nbtnAnnulla.setIcon (new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / operatoreagenzia / images / annulla.png \")));\nbtnAnnulla.setVisible (false);\n)\nbtnAnnulla return;\n)\n\n/ **\n* Method to initialize the button for\n* Changing a comment (btnModificaCommento)\n*\n* @ Return javax.swing.JButton\n* /\nprivate JButton getBtnModificaCommento () (\nif (btnModificaCommento == null) (\nbtnModificaCommento = new JButton ();\nbtnModificaCommento.setText ( \"Edit Comment\");\nbtnModificaCommento.setIcon (new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / operatoreagenzia / images / modificaCommento.png \")));\nbtnModificaCommento.setVisible (false);\n)\nbtnModificaCommento return;\n)\n\n/ **\n* Create and initialize a JTabbedPane\n*\n* @ Return javax.swing.JTabbedPane\n* /\nprivate JTabbedPane getJTabbedPane () (\nif (JTabbedPane == null) (\nJTabbedPane = new JTabbedPane ();\njTabbedPane.setCursor (new Cursor (Cursor.DEFAULT_CURSOR));\njTabbedPane.addTab ( \"Data Refreshment\", new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / operatoreagenzia / images / dati.png\")), getDatiPR (), null);\njTabbedPane.addTab ( \"MenuTuristico\", new ImageIcon (getClass (). getResource ( \"/ unisa/gps/etour/gui/operatoreagenzia/images/stat24.png\")), null, null);\njTabbedPane.addTab ( \"Statistics\", new ImageIcon (getClass (). getResource ( \"/ unisa/gps/etour/gui/operatoreagenzia/images/stat24.png\")), getStatistiche (), null);\njTabbedPane.addTab ( \"Feedback received\", new ImageIcon (getClass (). getResource ( \"/ unisa / gps / eTour / gui / operatoreagenzia / images / feedback.png\")), getFeedback (), null);\n\n)\nJTabbedPane return;\n)\n/ **\n* Method to initialize a panel (datiPR)\n*\n* @ Return javax.swing.JPanel\n* /\ngetDatiPR private JPanel () (\nif (datiPR == null) (\nGridBagConstraints gridBagConstraints27 = new GridBagConstraints ();\ngridBagConstraints27.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints27.gridy = 9;\ngridBagConstraints27.weightx = 1.0;\ngridBagConstraints27.anchor = GridBagConstraints.WEST;\ngridBagConstraints27.insets = new Insets (5, 5, 36, 0);\ngridBagConstraints27.ipadx = 18;\ngridBagConstraints27.gridx = 1;\nGridBagConstraints gridBagConstraints34 = new GridBagConstraints ();\ngridBagConstraints34.gridx = 7;\ngridBagConstraints34.insets = new Insets (0, 0, 0, 0);\ngridBagConstraints34.gridy = 6;\njLabel2 = new JLabel ();\njLabel2.setText ( \"z\");\nGridBagConstraints gridBagConstraints33 = new GridBagConstraints ();\ngridBagConstraints33.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints33.gridy = 6;\ngridBagConstraints33.weightx = 1.0;\ngridBagConstraints33.ipadx = 50;\ngridBagConstraints33.insets = new Insets (5, 5, 5, 5);\ngridBagConstraints33.anchor = GridBagConstraints.WEST;\ngridBagConstraints33.gridx = 6;\nGridBagConstraints gridBagConstraints38 = new GridBagConstraints ();\ngridBagConstraints38.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints38.gridy = 6;\ngridBagConstraints38.weightx = 1.0;\ngridBagConstraints38.ipadx = 50;\ngridBagConstraints38.insets = new Insets (5, 5, 5, 5);\ngridBagConstraints38.anchor = GridBagConstraints.WEST;\ngridBagConstraints38.gridx = 4;\nGridBagConstraints gridBagConstraints22 = new GridBagConstraints ();\ngridBagConstraints22.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints22.gridy = 6;\ngridBagConstraints22.weightx = 0.0;\ngridBagConstraints22.ipadx = 50;\ngridBagConstraints22.anchor = GridBagConstraints.WEST;\ngridBagConstraints22.insets = new Insets (5, 5, 5, 5);\ngridBagConstraints22.gridx = 1;\nGridBagConstraints gridBagConstraints36 = new GridBagConstraints ();\ngridBagConstraints36.insets = new Insets (0, 5, 0, 5);\ngridBagConstraints36.gridy = 6;\ngridBagConstraints36.ipadx = 0;\ngridBagConstraints36.ipady = 0;\ngridBagConstraints36.gridwidth = 1;\ngridBagConstraints36.gridx = 5;\nGridBagConstraints gridBagConstraints35 = new GridBagConstraints ();\ngridBagConstraints35.insets = new Insets (0, 0, 0, 0);\ngridBagConstraints35.gridy = 6;\ngridBagConstraints35.ipadx = 0;\ngridBagConstraints35.ipady = 0;\ngridBagConstraints35.gridwidth = 1;\ngridBagConstraints35.anchor = GridBagConstraints.WEST;\ngridBagConstraints35.gridx = 3;\nGridBagConstraints gridBagConstraints32 = new GridBagConstraints ();\ngridBagConstraints32.insets = new Insets (15, 20, 5, 0);\ngridBagConstraints32.gridx = 16;\ngridBagConstraints32.gridy = 4;\ngridBagConstraints32.ipadx = 172;\ngridBagConstraints32.ipady = 125;\ngridBagConstraints32.gridwidth = 0;\ngridBagConstraints32.gridheight = 6;\nGridBagConstraints gridBagConstraints31 = new GridBagConstraints ();\ngridBagConstraints31.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints31.gridwidth = 9;\ngridBagConstraints31.gridx = 1;\ngridBagConstraints31.gridy = 0;\ngridBagConstraints31.weightx = 0.0;\ngridBagConstraints31.ipadx = 240;\ngridBagConstraints31.anchor = GridBagConstraints.WEST;\ngridBagConstraints31.insets = new Insets (20, 5, 5, 0);\nGridBagConstraints gridBagConstraints30 = new GridBagConstraints ();\ngridBagConstraints30.fill = GridBagConstraints.BOTH;\ngridBagConstraints30.gridwidth = 17;\ngridBagConstraints30.gridx = 1;\ngridBagConstraints30.gridy = 10;\ngridBagConstraints30.ipadx = 265;\ngridBagConstraints30.ipady = 70;\ngridBagConstraints30.weightx = 1.0;\ngridBagConstraints30.weighty = 1.0;\ngridBagConstraints30.gridheight = 4;\ngridBagConstraints30.anchor = GridBagConstraints.WEST;\ngridBagConstraints30.insets = new Insets (5, 5, 2, 5);\nGridBagConstraints gridBagConstraints29 = new GridBagConstraints ();\ngridBagConstraints29.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints29.gridwidth = 3;\ngridBagConstraints29.gridx = 4;\ngridBagConstraints29.gridy = 9;\ngridBagConstraints29.weightx = 1.0;\ngridBagConstraints29.ipadx = 18;\ngridBagConstraints29.anchor = GridBagConstraints.WEST;\ngridBagConstraints29.insets = new Insets (5, 5, 36, 2);\nGridBagConstraints gridBagConstraints28 = new GridBagConstraints ();\ngridBagConstraints28.insets = new Insets (3, 5, 34, 4);\ngridBagConstraints28.gridy = 9;\ngridBagConstraints28.gridx = 3;\nGridBagConstraints gridBagConstraints26 = new GridBagConstraints ();\ngridBagConstraints26.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints26.gridwidth = 3;\ngridBagConstraints26.gridx = 4;\ngridBagConstraints26.gridy = 8;\ngridBagConstraints26.weightx = 1.0;\ngridBagConstraints26.anchor = GridBagConstraints.WEST;\ngridBagConstraints26.ipadx = 18;\ngridBagConstraints26.insets = new Insets (6, 5, 4, 2);\nGridBagConstraints gridBagConstraints25 = new GridBagConstraints ();\ngridBagConstraints25.insets = new Insets (4, 5, 2, 4);\ngridBagConstraints25.gridy = 8;\ngridBagConstraints25.anchor = GridBagConstraints.WEST;\ngridBagConstraints25.gridx = 3;\nGridBagConstraints gridBagConstraints24 = new GridBagConstraints ();\ngridBagConstraints24.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints24.gridx = 1;\ngridBagConstraints24.gridy = 8;\ngridBagConstraints24.weightx = 1.0;\ngridBagConstraints24.ipadx = 18;\ngridBagConstraints24.gridwidth = 3;\ngridBagConstraints24.anchor = GridBagConstraints.WEST;\ngridBagConstraints24.insets = new Insets (6, 5, 4, 1);\nGridBagConstraints gridBagConstraints23 = new GridBagConstraints ();\ngridBagConstraints23.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints23.gridwidth = 9;\ngridBagConstraints23.gridx = 1;\ngridBagConstraints23.gridy = 7;\ngridBagConstraints23.weightx = 1.0;\ngridBagConstraints23.ipadx = 120;\ngridBagConstraints23.anchor = GridBagConstraints.WEST;\ngridBagConstraints23.insets = new Insets (4, 5, 4, 17);\nGridBagConstraints gridBagConstraints21 = new GridBagConstraints ();\ngridBagConstraints21.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints21.gridwidth = 7;\ngridBagConstraints21.gridx = 1;\ngridBagConstraints21.gridy = 5;\ngridBagConstraints21.ipadx = 70;\ngridBagConstraints21.ipady = 0;\ngridBagConstraints21.weightx = 1.0;\ngridBagConstraints21.anchor = GridBagConstraints.WEST;\ngridBagConstraints21.insets = new Insets (5, 5, 5, 6);\nGridBagConstraints gridBagConstraints20 = new GridBagConstraints ();\ngridBagConstraints20.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints20.gridwidth = 7;\ngridBagConstraints20.gridx = 1;\ngridBagConstraints20.gridy = 4;\ngridBagConstraints20.weightx = 1.0;\ngridBagConstraints20.ipadx = 60;\ngridBagConstraints20.anchor = GridBagConstraints.WEST;\ngridBagConstraints20.insets = new Insets (0, 5, 0, 0);\nGridBagConstraints gridBagConstraints19 = new GridBagConstraints ();\ngridBagConstraints19.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints19.gridwidth = 4;\ngridBagConstraints19.gridx = 1;\ngridBagConstraints19.gridy = 3;\ngridBagConstraints19.weightx = 1.0;\ngridBagConstraints19.ipadx = 20;\ngridBagConstraints19.anchor = GridBagConstraints.WEST;\ngridBagConstraints19.insets = new Insets (6, 5, 5, 18);\nGridBagConstraints gridBagConstraints18 = new GridBagConstraints ();\ngridBagConstraints18.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints18.gridwidth = 6;\ngridBagConstraints18.gridx = 1;\ngridBagConstraints18.gridy = 2;\ngridBagConstraints18.weightx = 1.0;\ngridBagConstraints18.ipadx = 100;\ngridBagConstraints18.anchor = GridBagConstraints.WEST;\ngridBagConstraints18.insets = new Insets (0, 5, 0, 0);\nGridBagConstraints gridBagConstraints17 = new GridBagConstraints ();\ngridBagConstraints17.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints17.gridwidth = 9;\ngridBagConstraints17.gridx = 2;\ngridBagConstraints17.gridy = 1;\ngridBagConstraints17.weightx = 1.0;\ngridBagConstraints17.ipadx = 200;\ngridBagConstraints17.anchor = GridBagConstraints.WEST;\ngridBagConstraints17.insets = new Insets (5, 5, 5, 0);\nGridBagConstraints gridBagConstraints16 = new GridBagConstraints ();\ngridBagConstraints16.fill = GridBagConstraints.VERTICAL;\ngridBagConstraints16.gridwidth = 3;\ngridBagConstraints16.gridx = 1;\ngridBagConstraints16.gridy = 1;\ngridBagConstraints16.weightx = 1.0;\ngridBagConstraints16.anchor = GridBagConstraints.WEST;\ngridBagConstraints16.ipadx = 0;\ngridBagConstraints16.insets = new Insets (5, 5, 5, 0);\nGridBagConstraints gridBagConstraints15 = new GridBagConstraints ();\ngridBagConstraints15.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints15.gridy = 10;\ngridBagConstraints15.gridwidth = 1;\ngridBagConstraints15.gridheight = 0;\ngridBagConstraints15.gridx = 0;\nGridBagConstraints gridBagConstraints14 = new GridBagConstraints ();\ngridBagConstraints14.insets = new Insets (5, 15, 36, 0);\ngridBagConstraints14.gridy = 9;\ngridBagConstraints14.gridx = 0;\nGridBagConstraints gridBagConstraints13 = new GridBagConstraints ();\ngridBagConstraints13.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints13.gridy = 8;\ngridBagConstraints13.gridx = 0;\nGridBagConstraints gridBagConstraints12 = new GridBagConstraints ();\ngridBagConstraints12.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints12.gridy = 7;\ngridBagConstraints12.gridx = 0;\nGridBagConstraints gridBagConstraints11 = new GridBagConstraints ();\ngridBagConstraints11.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints11.gridy = 6;\ngridBagConstraints11.gridx = 0;\nGridBagConstraints gridBagConstraints10 = new GridBagConstraints ();\ngridBagConstraints10.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints10.gridy = 5;\ngridBagConstraints10.gridx = 0;\nGridBagConstraints gridBagConstraints9 = new GridBagConstraints ();\ngridBagConstraints9.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints9.gridy = 4;\ngridBagConstraints9.gridx = 0;\nGridBagConstraints gridBagConstraints8 = new GridBagConstraints ();\ngridBagConstraints8.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints8.gridy = 3;\ngridBagConstraints8.gridx = 0;\nGridBagConstraints gridBagConstraints7 = new GridBagConstraints ();\ngridBagConstraints7.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints7.gridy = 2;\ngridBagConstraints7.gridx = 0;\nGridBagConstraints gridBagConstraints6 = new GridBagConstraints ();\ngridBagConstraints6.insets = new Insets (5, 15, 5, 0);\ngridBagConstraints6.gridy = 1;\ngridBagConstraints6.gridx = 0;\nGridBagConstraints gridBagConstraints5 = new GridBagConstraints ();\ngridBagConstraints5.insets = new Insets (20, 15, 5, 0);\ngridBagConstraints5.gridy = 0;\ngridBagConstraints5.gridwidth = 1;\ngridBagConstraints5.gridx = 0;\njLabel41 = new JLabel ();\njLabel41.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\njLabel41.setText ( \"y\");\njLabel4 = new JLabel ();\njLabel4.setFont (new Font ( \"Dialog\", Font.BOLD, 14));\njLabel4.setText ( \"x\");\njLabel3 = new JLabel ();\njLabel3.setFont (new Font ( \"Dialog\", Font.BOLD, 18));\njLabel3.setText (\":\");\n\njLabel1 = new JLabel ();\njLabel1.setFont (new Font ( \"Dialog\", Font.BOLD, 18));\njLabel1.setText (\":\");\nJButton = new JLabel ();\njLabel.setText ( \"Description\");\ntxtOraCh = new JLabel ();\ntxtOraCh.setText ( \"Closing Time\");\ntxtOraAp = new JLabel ();\ntxtOraAp.setText ( \"Opening Hours\");\ntxtTel = new JLabel ();\ntxtTel.setText ( \"Phone\");\ntxtPos = new JLabel ();\ntxtPos.setText ( \"Geographic Position\");\ntxtProvincia = new JLabel ();\ntxtProvincia.setText ( \"Province\");\ntxtLocalità = new JLabel ();\ntxtLocalità.setText ( \"Location\");\ntxtCitta = new JLabel ();\ntxtCitta.setText ( \"City\");\ntxtCAP = new JLabel ();\ntxtCAP.setText ( \"CAP\");\ntxtIndirizzo = new JLabel ();\ntxtIndirizzo.setText ( \"Address\");\ntxtNome = new JLabel ();\ntxtNome.setText ( \"Name Refreshment\");\ndatiPR = new JPanel ();\ndatiPR.setLayout (new GridBagLayout ());\ndatiPR.setBorder (new SoftBevelBorder (SoftBevelBorder.LOWERED));\ndatiPR.add (txtNome, gridBagConstraints5);\ndatiPR.add (txtIndirizzo, gridBagConstraints6);\ndatiPR.add (txtCitta, gridBagConstraints7);\ndatiPR.add (txtLocalità, gridBagConstraints8);\ndatiPR.add (txtCAP, gridBagConstraints9);\ndatiPR.add (txtProvincia, gridBagConstraints10);\ndatiPR.add (txtPos, gridBagConstraints11);\ndatiPR.add (txtTel, gridBagConstraints12);\ndatiPR.add (txtOraAp, gridBagConstraints13);\ndatiPR.add (txtOraCh, gridBagConstraints14);\ndatiPR.add (JLabel, gridBagConstraints15);\ndatiPR.add (getIndirizzoPR1 (), gridBagConstraints16);\ndatiPR.add (getIndirizzoPR (), gridBagConstraints17);\ndatiPR.add (getCittaPR (), gridBagConstraints18);\ndatiPR.add (getLocalitaPR (), gridBagConstraints19);\ndatiPR.add (getCapPR (), gridBagConstraints20);\ndatiPR.add (getProvPR (), gridBagConstraints21);\ndatiPR.add (getTelefonoPR (), gridBagConstraints23);\ndatiPR.add (getOrarioAPOrePR (), gridBagConstraints24);\ndatiPR.add (jLabel1, gridBagConstraints25);\ndatiPR.add (getOrarioApMinPR (), gridBagConstraints26);\ndatiPR.add (jLabel3, gridBagConstraints28);\ndatiPR.add (getOrarioCHMinPR (), gridBagConstraints29);\ndatiPR.add (getJScrollPane (), gridBagConstraints30);\ndatiPR.add (getNomePR (), gridBagConstraints31);\ndatiPR.add (getJPanel (), gridBagConstraints32);\ndatiPR.add (jLabel4, gridBagConstraints35);\ndatiPR.add (jLabel41, gridBagConstraints36);\ndatiPR.add (getPosGeoX (), gridBagConstraints22);\ndatiPR.add (getPosGeoY (), gridBagConstraints38);\ndatiPR.add (getPosGeoZ (), gridBagConstraints33);\ndatiPR.add (jLabel2, gridBagConstraints34);\ndatiPR.add (getOrarioCHOrePR (), gridBagConstraints27);\n)\ndatiPR return;\n)\n\n/ **\n* Method for iniziailizzare a panel (statistics)\n*\n* @ Return javax.swing.JPanel\n* /\ngetStatistiche private JPanel () (\nif (statistics == null) (\nGridBagConstraints gridBagConstraints4 = new GridBagConstraints ();\ngridBagConstraints4.gridx = 0;\ngridBagConstraints4.gridwidth = 0;\ngridBagConstraints4.fill = GridBagConstraints.HORIZONTAL;\ngridBagConstraints4.insets = new Insets (20, 0, 0, 0);\ngridBagConstraints4.gridy = 2;\nGridBagConstraints gridBagConstraints3 = new GridBagConstraints ();\ngridBagConstraints3.gridx = 0;\ngridBagConstraints3.gridwidth = 2;\ngridBagConstraints3.fill = GridBagConstraints.HORIZONTAL;\ngridBagConstraints3.insets = new Insets (0, 0, 20, 0);\ngridBagConstraints3.gridy = 1;\nGridBagConstraints gridBagConstraints2 = new GridBagConstraints ();\ngridBagConstraints2.gridx = 1;\ngridBagConstraints2.insets = new Insets (0, 30, 30, 0);\ngridBagConstraints2.anchor = GridBagConstraints.WEST;\ngridBagConstraints2.gridy = 0;\nmediaVotoPR = new JLabel ();\nmediaVotoPR.setText ( \"JLabel\");\nGridBagConstraints gridBagConstraints1 = new GridBagConstraints ();\ngridBagConstraints1.gridx = 0;\ngridBagConstraints1.insets = new Insets (0, 0, 30, 0);\ngridBagConstraints1.gridy = 0;\ntxtNomeBene = new JLabel ();\ntxtNomeBene.setText ( \"Well name> Culturale>\");\ntxtNomeBene.setFont (new Font ( \"Dialog\", Font.BOLD, 18));\nstatistics = new JPanel ();\nstatistiche.setLayout (new GridBagLayout ());\nstatistiche.add (txtNomeBene, gridBagConstraints1);\nstatistiche.add (mediaVotoPR, gridBagConstraints2);\nstatistiche.add (getStatisticheMeseCorrente (), gridBagConstraints3);\nstatistiche.add (getStatisticheTotali (), gridBagConstraints4);\n)\nreturn statistics;\n)\n\n/ **\n* Method to initialize a panel (feedback)\n*\n* @ Return javax.swing.JPanel\n* /\ngetFeedback private JPanel () (\nif (feedback == null) (\nGridBagConstraints = GridBagConstraints new GridBagConstraints ();\ngridBagConstraints.fill = GridBagConstraints.BOTH;\ngridBagConstraints.gridy = 0;\ngridBagConstraints.weightx = 1.0;\ngridBagConstraints.weighty = 1.0;\ngridBagConstraints.gridx = 0;\nfeedback = new JPanel ();\nfeedback.setLayout (new GridBagLayout ());\nfeedback.add (getJScrollPane2 (), GridBagConstraints);\n)\nreturn feedback;\n)\n\n/ **\n* Initialize a JexField (indirizzoPR)\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getIndirizzoPR () (\nif (indirizzoPR == null) (\nindirizzoPR = new JTextField ();\nindirizzoPR.setColumns (12);\nindirizzoPR.addActionListener (campoCompilato);\n)\nindirizzoPR return;\n)\n\n/ **\n* Method to initialize the type field address (indirizzoPR)\n* Or via, piazza ....\n*\n* @ Return javax.swing.JComboBox\n* /\nprivate JComboBox getIndirizzoPR1 () (\nif (indirizzoPR1 == null) (\nindirizzoPR1 = new JComboBox ();\nindirizzoPR1.setPreferredSize (new Dimension (60, 20));\nindirizzoPR1.setMinimumSize (new Dimension (60, 25));\nindirizzoPR1.setCursor (new Cursor (Cursor.DEFAULT_CURSOR));\nindirizzoPR1.addItem ( \"Via\");\nindirizzoPR1.addItem (P.zza \");\nindirizzoPR1.addItem ( \"V.le\");\nindirizzoPR1.addItem (V.co \");\nindirizzoPR1.addItem ( \"Largo\");\nindirizzoPR1.addItem ( \"Course\");\n\n)\nindirizzoPR1 return;\n)\n\n/ **\n* Initialize a JTextField for entering\n* Uan city CittaPR\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getCittaPR () (\nif (cittaPR == null) (\ncittaPR = new JTextField ();\ncittaPR.setColumns (12);\ncittaPR.addActionListener (campoCompilato);\n)\ncittaPR return;\n)\n\n/ **\n* This method initializes localitaPR\n*\n* @ Return javax.swing.JComboBox\n* /\nprivate JComboBox getLocalitaPR () (\nif (localitaPR == null) (\nlocalitaPR = new JComboBox ();\nlocalitaPR.setMinimumSize (new Dimension (80, 25));\nlocalitaPR.setPreferredSize (new Dimension (80, 20));\nlocalitaPR.addActionListener (campoCompilato);\n)\nlocalitaPR return;\n)\n\n/ **\n* Code of refreshment. Definition capPR JTextField\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getCapPR () (\nif (capPR == null) (\ncapPR = new JTextField ();\ncapPR.setColumns (8);\ncapPR.addActionListener (campoCompilato);\n)\ncapPR return;\n)\n\n/ **\n* Creation JScrollPane\n*\n* @ Return javax.swing.JScrollPane\n* /\nprivate JScrollPane getJScrollPane () (\nif (JScrollPane == null) (\nJScrollPane = new JScrollPane ();\njScrollPane.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\njScrollPane.setViewportView (getDescrizionePR ());\n)\nJScrollPane return;\n)\n\n/ **\n* Method to create JTextArea's whole descrizionePR\n*\n* @ Return javax.swing.JTextArea\n* /\ngetDescrizionePR private JTextArea () (\nif (descrizionePR == null) (\ndescrizionePR = new JTextArea ();\ndescrizionePR.setColumns (12);\ndescrizionePR.setCursor (new Cursor (Cursor.TEXT_CURSOR));\n\n)\ndescrizionePR return;\n)\n\n/ **\n* Method to create the JTextField telefonoPR\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getTelefonoPR () (\nif (telefonoPR == null) (\ntelefonoPR = new JTextField ();\ntelefonoPR.setColumns (12);\ntelefonoPR.addActionListener (campoCompilato);\n)\ntelefonoPR return;\n)\n\n/ **\n* method to initialize a JComboBox with the hours (orarioAPOrePR)\n*\n* @ Return javax.swing.JComboBox\n* /\nprivate JComboBox getOrarioAPOrePR () (\nif (orarioAPOrePR == null) (\norarioAPOrePR = new JComboBox ();\norarioAPOrePR.setPreferredSize (new Dimension (40, 20));\nfor (int i = 0; i <24; i + +) (\nif (i <10)\norarioAPOrePR.addItem ( \"0\" + i);\nelse\norarioAPOrePR.addItem (i);\n\n)\norarioAPOrePR.addActionListener (campoCompilato);\n)\norarioAPOrePR return;\n)\n\n/ **\n* Method to initialize a JComboBox with the minutes (orarioApMinPR)\n*\n* @ Return javax.swing.JComboBox\n* /\nprivate JComboBox getOrarioApMinPR () (\nif (orarioApMinPR == null) (\norarioApMinPR = new JComboBox ();\norarioApMinPR.setLightWeightPopupEnabled (true);\norarioApMinPR.setPreferredSize (new Dimension (40, 20));\norarioApMinPR.addItem ( \"00\");\norarioApMinPR.addItem ( \"15\");\norarioApMinPR.addItem ( \"30\");\norarioApMinPR.addItem ( \"45\");\norarioApMinPR.addActionListener (campoCompilato);\n)\norarioApMinPR return;\n)\n\n\n\n/ **\n* Method to initialize a JComboBox with the minutes (orarioCHMinPR)\n*\n* @ Return javax.swing.JComboBox\n* /\nprivate JComboBox getOrarioCHMinPR () (\nif (orarioCHMinPR == null) (\norarioCHMinPR = new JComboBox ();\norarioCHMinPR.setPreferredSize (new Dimension (40, 20));\norarioCHMinPR.addItem ( \"00\");\norarioCHMinPR.addItem ( \"15\");\norarioCHMinPR.addItem ( \"30\");\norarioCHMinPR.addItem ( \"45\");\norarioCHMinPR.addActionListener (campoCompilato);\n)\norarioCHMinPR return;\n\n)\n\n/ **\n* Create and initialize a jCombo Box with all the provinces (provPR)\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JComboBox getProvPR () (\nif (provPR == null) (\nfinal String [] Province = ( \"AG\", \"AL\", \"an\", \"AO\", \"AQ\", \"AR\", \"AP\", \"AT\", \"AV\", \"BA\", \"BL\" , \"BN\", \"BG\", \"BI\", \"BO\", \"BR\", \"BS\", \"BZ\",\n\"CA\", \"CB\", \"CE\", \"CH\", \"CI\", \"CL\", \"CN\", \"CO\", \"CR\", \"CS\", \"KR\", \"en\", \"FC \",\" FE \",\" FI \",\" FG \",\" FR \",\" GE \",\" GO \",\" GR \",\" IM \",\" IS \",\" LC \",\n\"LE\", \"LI\", \"LO\", \"LT\", \"LU\", \"MC\", \"ME\", \"MF\", \"MN\", \"MO\", \"MS\", \"MT\", \"NA \",\" NO \",\" NU \",\" OG \",\" OR \",\" OT \",\" PA \",\" PC \",\" PD \",\" PE \",\" PG \",\" PO \",\" PR \", \"PU\", \"R\", \"RA\", \"RC\", \"RE\", \"RG\",\n\"RI\", \"RM\", \"RN\", \"RO\", \"SA\", \"YES\", \"SO\", \"SP\", \"SS\", \"SV\", \"TA\", \"TE\", \"TN \",\" TP \",\" TR \",\" TS \",\" TV \",\" UD \",\" VA \",\" VB \",\" VC \",\" VE \",\" VI \",\n\"VR\", \"VS\", \"VT\", \"VV\");\nprovPR = new JComboBox ();\nfor (int i = 0; i <province.length i + +) (\nprovPR.addItem (provinces [i]);\n)\nprovPR.addActionListener (campoCompilato);\n)\nprovPR return;\n)\n\nDocumentoNumerico PlainDocument class extends (\n\n\nprivate int limit;\n\n\npublic DocumentoNumerico (int limit) (\n\nthis.limit = limit;\n\n)\n\n/ **\n* Initialization and management position\n*\n* @ Param integer pOffset\n* @ Param String pString\n* @ Param Attribute Pattra\n*\n* /\npublic void insertString (int pOffset, String pStr, AttributeSet Pattra) throws BadLocationException (\nif (pStr == null)\nreturn;\n\nif ((getLength () + pStr.length ()) <= limit) (\nsuper.insertString (pOffset, pStr, Pattra);\n)\n)\n)\n\n\n/ **\n* Initialization of a data point of the snack (nomePR)\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getNomePR () (\nif (nomePR == null) (\nnomePR = new JTextField ();\nnomePR.setColumns (12);\nnomePR.setPreferredSize (new Dimension (180, 20));\nnomePR.addActionListener (campoCompilato);\nnomePR.addFocusListener (validating);\nnomePR.setDocument (new DocumentoNumerico (20));\n\n)\nnomePR return;\n)\n\n/ **\n* Initialize and create a panel (JPanel)\n*\n* @ Return javax.swing.JPanel\n* /\ngetJPanel private JPanel () (\nif (JPanel == null) (\nJPanel = new JPanel ();\njPanel.setLayout (new BorderLayout ());\njPanel.setBorder (BorderFactory.createTitledBorder (\nBorderFactory.createEmptyBorder (),\n\"Tag the 'Search TitledBorder.DEFAULT_JUSTIFICATION,\nTitledBorder.DEFAULT_POSITION, new Font ( \"Dialog\", Font.BOLD, 12),\nColor.black));\nBeanTag [] test = new BeanTag [8];\ntest [0] = new BeanTag (0, \"castle\", \"really a castle\");\ntest [1] = new BeanTag (1, \"stronghold\", \"really a hostel\");\ntest [2] = new BeanTag (3, \"statue\", \"really a basket\");\ntest [3] = new BeanTag (4, \"Column\", \"really a basket\");\ntest [4] = new BeanTag (5, \"internal\", \"really a basket\");\ntest [5] = new BeanTag (6, \"external\", \"really a basket\");\ntest [6] = new BeanTag (7, \"eight hundred\", \"really a basket\");\ntest [7] = new BeanTag (8, \"Novecento\", \"really a basket\");\npannelloTag = new TagPanel (test);\njPanel.add (pannelloTag, BorderLayout.CENTER);\n)\nJPanel return;\n)\n\n/ **\n* Creating a JScrollPane (jScrollPane2)\n*\n* @ Return javax.swing.JScrollPane\n* /\nprivate JScrollPane getJScrollPane2 () (\nif (jScrollPane2 == null) (\njScrollPane2 = new JScrollPane ();\njScrollPane2.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\njScrollPane2.setViewportView (getFeedbackTable ());\n)\njScrollPane2 return;\n)\n\n/ **\n* Create a JTable (feedbackTable)\n*\n* @ Return javax.swing.JTable\n* /\nprivate JTable getFeedbackTable () (\nif (feedbackTable == null) (\nfeedbackTable = new JTable ();\n)\nfeedbackTable return;\n)\n\n/ **\n* Creation of a panel (statisticheMeseCorrente)\n*\n* @ Return javax.swing.JPanel\n* /\ngetStatisticheMeseCorrente private JPanel () (\nif (statisticheMeseCorrente == null) (\nstatisticheMeseCorrente = new JPanel ();\nstatisticheMeseCorrente.setLayout (new GridBagLayout ());\nstatisticheMeseCorrente.setPreferredSize (new Dimension (500, 120));\n)\nstatisticheMeseCorrente return;\n)\n\n/ **\n* Creation of a panel (statisticheTotali)\n*\n* @ Return javax.swing.JPanel\n* /\ngetStatisticheTotali private JPanel () (\nif (statisticheTotali == null) (\nstatisticheTotali = new JPanel ();\nstatisticheTotali.setLayout (new GridBagLayout ());\nstatisticheTotali.setPreferredSize (new Dimension (500, 120));\n)\nstatisticheTotali return;\n)\n/ **\n* Method for creating a toolbar\n* (ToolbarSchedaPR)\n*\n* @ Return javax.swing.JToolBar\n* /\nPrivate JToolBar getToolbarSchedaPR () (\nif (ToolbarSchedaPR == null) (\n\nToolbarSchedaPR JToolBar = new ();\nToolbarSchedaPR.setFloatable (false);\nToolbarSchedaPR.add (getBtnModifica ());\nToolbarSchedaPR.addSeparator ();\nToolbarSchedaPR.add (getBtnSalva ());\nToolbarSchedaPR.addSeparator ();\nToolbarSchedaPR.add (getBtnAnnulla ());\nToolbarSchedaPR.addSeparator ();\nToolbarSchedaPR.add (getBtnModificaCommento ());\nToolbarSchedaPR.addSeparator ();\n)\nToolbarSchedaPR return;\n)\n/ **\n* Method to initialize posGeoX\n* The X position of the GPS\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getPosGeoX () (\nif (posGeoX == null) (\nposGeoX = new JTextField ();\n)\nposGeoX return;\n)\n/ **\n* Method to initialize posGeoY\n* The Y position of the GPS\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getPosGeoY () (\nif (posGeoY == null) (\nposGeoY = new JTextField ();\n)\nposGeoY return;\n)\n/ **\n* Method to initialize posGeoZ\n* The Z position of the GPS\n*\n* @ Return javax.swing.JTextField\n* /\nprivate JTextField getPosGeoZ () (\nif (posGeoZ == null) (\nposGeoZ = new JTextField ();\n)\nposGeoZ return;\n)\n/ **\n* Method to initialize a JComboBox with the hours (orarioCHOrePR)\n*\n* @ Return javax.swing.JComboBox\n* /\nprivate JComboBox getOrarioCHOrePR () (\nif (orarioCHOrePR == null) (\norarioCHOrePR = new JComboBox ();\norarioCHOrePR.setPreferredSize (new Dimension (40, 20));\n)\norarioCHOrePR return;\n)\n\n)\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fcff"},"name":"62.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce6"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce8"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf6"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf8"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf9"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfa"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3c"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd46"}]],"contents":"62\t\"Call Back private Hash table requirementDescTable = new Hash table();\n\n private Hash table constraintDescTable = new Hash table();\n\n private Hash table performanceModelTable = new Hash table();\n\n private PerformanceModel performance model= nullpublic void parseSpeculateInformation(String str)\n {\n\nSystem. out. println(\"\"Received String = \"\" + str);\n\nConnection conn = null;\n\nStatement stmt = null;\n\nDriverDescription dd = null;\n\nString eventType = null; // public void identifyPerformanceModels()\n {\n\nConnection conn = null;\nResultSet rs = null;\nStatement stmt = null;\n\nString subscriberName = null;\n\nDriverDescription dd = null;\n\nEnumeration subscriberTableEnumeration = nu public void pullInformationFromDoors()\n {\n\nString serverIP = \"\"140.192.37.150\"\";\n\nString[] attribute = { \"\"Value\"\", \"\"Logic\"\", \"\"Units\"\", \"\"Attribute\"\" };\n\nString subscriberName = null;\n\nVector constraints = n public void insertValuesInDataBase()\n {\n\nConnection conn = null;\n\nStatement stmt = null;\n\nString subscriberName = null;\n\nDriverDescription dd = null;\nVector driverVector = null;\n\nConstraintsDescription cd = null;\n public void createExecuteString()\n {\n\nConnection conn = null;\n\nStatement stmt = null;\n\nResultSet rs = null;\n\nStringBuffer sb = null;\n\nString subscriberName = null;\n\nDriverDescription dd = null;\nVector driverVector public void parseImpactReport(String str)\n {\n\nConnection conn = null;\n\nStatement stmt = null;\n\nVector constraintsVector = null;\nVector driversVector = null;\n\nConstraintsDescription constraint = null;\n\nint driverLoop\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd00"},"name":"74.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce7"}]],"contents":"74\t\"database QueryConnection conn=null;\n ResultSet rs=null;\n Statement stmt=null;\n String mSQL=\"\"\"\";\n\n Vector structVector = new Vector(); // for holding the dummy variable objects used in executeStructure()\n Variable v;// create this object and /**\n * Construct a connection object.\n * @param Returns an object of type Connection\n */\n public Connection getConnection()\n {\nSystem. out. println(\"\" in get Connection\"\");\nConnection connect=null;\ntry\n{\n Class. fo /**\n* Returns GraphId as int\n* @param graphName performance modelHandler calls this method with graphName\n* as parameter, performance modelHandler parse the EventServer message and get the\n* graphName\n*/\n public int get /**\n* Copy data from one set of columns to other in table Variable\n* @param graphId is the id of graph for which you want to save the\n* current state of variables\n*/\n public void saveCurrentModel( int graphId)\n {\n\nconn = this. getConnect/**\n* Injects new value into Variable table, using Data stored in\n* Vector of Variable object\n* @param graphId is the id of graph\n* @param Vector var is the Vector that stores the Object of type Variable\n*/\n public void injectVa /**\n* this method will pick up the structure id from SPE Structure\n* If DependentStructureId is 0 then select StructureID\n* and invoke the executeStructure method on Selected\n* StructureId\n* Who Invokes this method: performance model // this method is about executing the structure\n // based on StructureId find all the data related to given StructureId\n // and using the equation in string format call the method equationParser.\n //I am passing Vector that has all the data abou public void solveStructure( int StructureId, Vector vr)\n {\nSystem. out. println(\"\"Inside solveStructure()&&&&&&&&&&&&&&&&&&&&&&&\"\");\n\nConnection conn1 = this. getConnection();\nSystem. out. println(\"\" in solveStru public void solveStructureEquation()\n {\nSystem. out. println(\"\"Inside solveStructureEquation()%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\"\");\n\n//Based on that result find out the equation and replace the name by its value\nSystem public void getTrackVariableName()\n {\nSystem. out. println(\"\"Inside getTrackVariableName()$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\"\");\n//This will get the variable name from SPE Graph and find the same name in variable\n// and inse public void setCalculatedValues()\n {\nSystem. out. println(\"\"Inside setCalculatedValues()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\"\");\n// and at matching location put the calculated values\nSystem. out. println(\"\" enter calcValue // this method creates the token for each variable name in the string\n // and store that variable into vector\n // it also creates the vector called varValues\n // varValues has values of each variable stored in varName\n //So equation has variable n public Vector getImpactReport()\n {\n//This SPE Graph works on the assumption that each model tracks\n// the effect of changes on one variable\nVector report = new Vector();\nreport. add( trackVariableName);\nreport. add(Stri\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd01"},"name":"58.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcd9"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcda"}]],"contents":"58\t\"Subscribed Model private String SubscriberName;\nprivate String SubscriberReqno;\nprivate String SubscriberModule;\nprivate String SubscriberKeyword1;\nprivate String SubscriberKeyword2;public SubscribedModel(String sn, String sr, String sm, String sk1, String sk2)\n{\nSubscriberName = sn;\nSubscriberReqno = sr;\nSubscriberModule = sm;\nSubscriberKeyword1 = sk1;\nSubscriberKeyword2 = s public String GetSubscriberName() { return SubscriberName;} public String GetSubscriberReqno() { return SubscriberReqno;} public String GetSubscriberModule() { return SubscriberModule;} public String GetSubscriberKeyword1() { return SubscriberKeyword1;} public String GetSubscriberKeyword2() { return SubscriberKeyword2;}\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd02"},"name":"81.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce4"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce7"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce8"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd39"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3c"}]],"contents":"81\t\"subscribermanager Socket aSocket;\n int ID;\n String EventLog;\n\n Connection conn;\n ResultSet rs;\n Statement stmt; // constructor, this object will be created in the main method of these class\n SubscriberListener() { } // constructor, this object will be created in the main method of these class\n SubscriberListener(Socket socket, int ID, String ELog)\n {\n\n this. aSocket = socket;\nthis.ID = ID;\nthis.EventLog = ELog;\n\ntry\n{\npublic void sendImpactReportToEventServer(String text)\n {\n\n//String impactReport = text;\nSystem. out. println(\"\"WOW IN SEND REPORT\"\");\nSystem. out. println(\"\"The IR = \"\"+ text);\nString serverIP = \"\"140. // run method will be execute from the main method when u say Thread. start() in main\n public void run()\n {\n\nSystem. out. println(\"\"Inside Run method\"\");\n\nString str=\"\"\"\";\ntry\n{\n // set up for reading the byte data in to characte // start of class from here\n public static void main(String[] args)\n {\n// default port number\nint port = 1705;\n// the message coming from eventserver\nString LogName = \"\"EventLog\"\";\n//LogName is the database name used to log t\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd03"},"name":"78.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce0"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce7"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fceb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcec"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fced"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcee"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcef"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf0"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf1"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd38"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3d"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3e"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3f"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd40"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd41"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd42"}]],"contents":"78\t\"Notification Event public String m_SubscriberName = \"\"\"\";\npublic String m_EventID = \"\"\"\";\npublic String m_Message type = \"\"\"\";\npublic String m_EventType = \"\"\"\";\npublic int m_NumberOfRequirements = 0;\npublic String m_EventTim // constructor\npublic Notification_Event()\n{\n m_LeftSide = new ArrayList();\n m_RightSide = new ArrayList();\n}// end of class Notification_Event public Object clone() throws CloneNotSupportedException\n {\n\n// create new object with the same type\nNotification_Event nEvt = (Notification_Event) super. clone();\n nEvt. m_LeftSide = new ArrayList();\n npublic void ParseEvent(String TextLine)\n {\n\nString msg = TextLine;\n\nif( msg. startsWith(\"\"Re-execute\"\") )\n{\n\n ModelDriver md = new ModelDriver( msg );\n md. init();\n\n//ToDo:\n// divert all the calls fo // Set the other members before calling this function\n\n public void ParseLeftAndRightLists(String LeftLine, String RightLine)\n {\n\nm_LeftSide = new ArrayList();\n m_RightSide = new ArrayList();\n\nif ( m_Eve //Comment Added by Amit Uchat\n //This method displays the contents of two array list to console\npublic void DisplayValues()\n{\n System. out. println(\"\"\\ r\\ nValues of the event:\\ r\\ n\"\");\n System. out. println(\"\" \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd04"},"name":"54.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce6"}]],"contents":"54\t\"eventserver public static void main(String args[])\n {\n\nThreadPool pool = new ThreadPool(1);\n\n int port = defaultPort;\n try\n {\n ServerSocket ss = new ServerSocket( port);\n for( int i=0; i<4; i++)\n {\np public final static int defaultPort = 1701;\n ServerSocket theServer;\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd05"},"name":"55.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce6"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf2"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf4"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd43"}]],"contents":"55\t\"eventserver Threadstatic private int count = 0;\n private int taskNumber;\n protected Done done;\n ServerSocket theServer;\n\n private Connection conn;\n private Statement stmt;\n private ResultSet rs;\n\n private EventParser ep;\n private int id; EventServerThread(ServerSocket ss)\n {\n theServer = ss;\n count++;\n taskNumber = count;\n ep = new EventParser();\n } public void run()\n {\n\n while( true)\n {\n try\n {\n\nSocket client = theServer. accept();\nBufferedReader input = new BufferedReader( new InputStreamReader( client. getInputStream()));\nPrintWriter output = new P public String getNextID()\n {\n\ntry\n{\nClass. forName(\"\" sun. jdbc. odbc.jdbcodbcDriver\"\");\nthis. conn = DriverManager. getConnection(\"\" jdbc: odbc:EBT\"\",\"\"EBT\"\",\"\"EBT\"\");\nthis. stmt = connpublic String searchDate()\n {\n\nString dateString = new String();\nVector dateVector = new Vector();\n\ntry\n{\n\n Class. forName(\"\" sun. jdbc. odbc.jdbcodbcDriver\"\");\n Connection conn = DriverManager. getConnectio public String searchQueryID(String date)\n {\nVector queryVector = new Vector();\n\nString searchQuery = new String();\n\ntry\n{\n Class. forName(\"\" sun. jdbc. odbc.JdbcOdbcDriver\"\");\n conn = DriverManager. getpublic String getConstraintFromDataBase(String queryID)\n {\n\nString ConstString = new String();\n\n\ntry\n{\n\n Class. forName(\"\" sun. jdbc. odbc.JdbcOdbcDriver\"\");\n\n conn = DriverManager. getConnection(\"\" j public String getDriverFromDataBase(String queryID)\n {\n\nString driverString = new String();\n\ntry\n{\n\n Class. forName(\"\" sun. jdbc. odbc.JdbcOdbcDriver\"\");\n\n conn = DriverManager. getConnection(\"\" jdbc \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd06"},"name":"79.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce7"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce8"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3c"}]],"contents":"79\t\"performance model Handler String strES; // string received from eventserver\n String impactReport;// string to be send to eventServer\n\n String commandStr; // represent the command ex. execute, re - execute etc\n String eventId;// refers to the eventId\n String performance model Handler(String msg)\n {\nthis. strES = msg;\n } public void messageParser()\n {\nSystem. out. println(\"\"INSIDE PARSER\"\");\n\nmainSto = new StringTokenizer( strES,\"\"|\"\"); // current ex will have 10 tokens in mainSto\n\n\ntempStr1 = mainSto. nextToken();\n//Re-execut public String generateReport()\n{\n System. out. println(\"\"INSIDE generateReport\"\");\n\n mainSto = new StringTokenizer( strES,\"\"|\"\"); // current ex will have 10 tokens in mainSto\n /*\n\"\"ImpactReport|1015818161020| int grId; public int getId(){\n // get GraphId\n System. out. println(\"\"database start\"\");\n int grId = database. getGraphId( modelName);\n return grId;\n } public void saveModel( int id)\n {\n// save current model\ndatabase. saveCurrentModel( id);\n } public void insertData( int id){\n// inject data into model\ndatabase. injectVariables( id, variable);\n } public void execute( int id){\n// inject data into model\ndatabase. executeModel( id, variable);\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd07"},"name":"80.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"80\t\"Requirement public String m_RequirementID =\"\"\"\";\npublic String m_Project =\"\"\"\";\npublic String m_ModulePath=\"\"\"\";\npublic String m_Content = \"\"\"\";\npublic String m_RegFlag = \"\"N\"\";public Requirement() {// empty constructor\n\n} public Object clone() throws CloneNotSupportedException {\n\nRequirement requirement= (Requirement) super. clone();\n\nreturn requirement ; \n } public void ReadValues(String RequirementID, String Project, String ModulePath, String Content, String RegFlag) {\nthis. m_RequirementID = RequirementID;\nthis. m_Project = Project;\nthis. m_ModulePathpublic void ParseRequirement(String TextLine) {\n\n StringTokenizer LineSt;\nLineSt = new StringTokenizer(TextLine, \"\",\"\");\n\nm_RequirementID=LineSt. nextToken();\nm_Project=Line\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd08"},"name":"59.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"59\t\"Done /**\n* The number of Worker object\n* threads that are currently working\n* on something.\n*/\n private int _ activeThreads = 0;\n\n /**\n* This boolean keeps track of if\n* the very first thread has started\n* or not. This prevents this objec /**\n* This method can be called to block\n* the current thread until the ThreadPool\n* is done.\n*/\n\n synchronized public void waitDone()\n {\ntry {\n while ( _ activeThreads>0 ) {\nwait();\n }\n} catch ( InterruptedException/**\n* Called to wait for the first thread to\n* start. Once this method returns the\n* process has begun.\n*/\n\n synchronized public void waitBegin()\n {\ntry {\n while ( !_ started ) {\nwait();\n }\n} catch ( InterruptedException e/**\n* Called by a Worker object\n* to indicate that it has begun\n* working on a workload.\n*/\n synchronized public void workerBegin()\n {\n_ activeThreads++;\n_ started = true;\nnotify();\n } /**\n* Called by a Worker object to\n* indicate that it has completed a\n* workload.\n*/\n synchronized public void workerEnd()\n {\n_ activeThreads--;\nnotify();\n } /**\n* Called to reset this object to\n* its initial state.\n*/\n synchronized public void reset()\n {\n_ activeThreads = 0;\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd09"},"name":"75.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"75\t\"Driver String id;\n double valueFrom;\n double valueTo;\n String name; Driver(String id, double valueFrom, double valueTo, String name)\n {\nthis. id = id;\nthis. valueFrom = valueFrom;\nthis. valueTo = valueTo;\nthis. name = name;\n } public String toString()\n {\nString temp;\ntemp = \"\"ID = \"\" + id + \"\", valueFrom = \"\" + valueFrom + \"\", valueTo = \"\" + valueTo + \"\", Name = \"\" + name;\nreturn temp;\n } /**\n* Returns the id.\n* @return int\n*/\n public String getId()\n {\nreturn id;\n } /**\n* Returns the name.\n* @return String\n*/\n public String getName()\n {\nreturn name;\n } /**\n* Returns the value.\n* @return double\n*/\n public double getValueFrom()\n {\nreturn valueFrom;\n } public double getValueTo()\n {\nreturn valueTo;\n } /**\n* Sets the id.\n* @param id The id to set\n*/\n public void setId(String id)\n {\nthis. id = id;\n } **\n* Sets the name.\n* @param name The name to set\n*/\n public void setName(String name)\n {\nthis. name = name;\n } **\n* Sets the value.\n* @param value The value to set\n*/\n public void setValueFrom( double value)\n {\nthis. valueFrom = valueFrom;\n } public void setValueTo( double value)\n {\nthis. valueTo = valueTo;\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd0a"},"name":"63.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf8"}]],"contents":"63\t\"Doors Thread static private int count = 0;\n private int taskNumber;\n protected Done done;\n ServerSocket theServer;\n\n private Connection conn;\n private Statement stmt;\n private ResultSet rs; DOORsThread(ServerSocket ss)\n {\n theServer = ss;\n count++;\n taskNumber = count;\n } public void run()\n {\n\n while( true)\n {\n try\n {\n\nSocket client = theServer. accept();\nBufferedReader input = new BufferedReader( new InputStreamReader( client. getInputStream()));\nPrintWriter output = new P\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd0b"},"name":"68.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcdd"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce2"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fceb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcec"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fced"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcee"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcef"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf0"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfc"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfd"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfe"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd33"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd34"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd35"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3d"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3e"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3f"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd40"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd41"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd42"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd47"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd48"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd49"}]],"contents":"68\t\"Events Processor // event list\n private JList eventList;\n private DefaultListModel listModel;\n private ArrayList events;\n\n // popup menu\n private JPopupMenu popup;\n\n // Subscriber name\n String m_SubscriberName;\n\n // list of requirements to be d public EventsProcessor(Notification_Processing parent, boolean modal, String SubsName)\n {\n\n setTitle(\"\"EventsProcessor\"\");\n\naddWindowListener( new WindowAdapter()\n{\n public void windowClosing(WindowEve void exitApplication() {\nm_ parent.UpdateDisplayList();\n this. setVisible( false);\n this. dispose();\n} // action for \"\" double click on Event List\"\"\n private void doubleClickEventList (MouseEvent evt)\n {\n\nint index = eventList. getSelectedIndex();\nif ( index != -1)\n{\n try\n {\nNotification // action for \"\"Open First Record\"\" in popup menu\n private void popupOpenActionPerformed (ActionEvent evt)\n {\nif (! listModel. isEmpty())\n{\n int index =0;\n try\n {\nNotification_Event nEvt1 = (Notificati / action for \"\"View Current Record\"\" in popup menu\n private void popupViewActionPerformed (ActionEvent evt)\n {\nint index = eventList. getSelectedIndex();\nif ( index != -1)\n{\n try\n {\nN void DeleteEvent(String SubscriberName, String EventID)\n {\n\ntry\n{\n\n int i, j=-1;\n for ( i=0; i< events. size(); i++)\n {\nNotification_Event nEvt = (Notification_Event) events. get( i);\ni void DeleteRelatedEvents()\n {\n\nwhile ( m_Deleterequirement List. size()!=0)\n{\n\n Requirement requirement= (Requirement)( m_Deleterequirement List. get(0));\n\n m_Deleterequirement List. remove(0);\nvoid AddSubscription(String SubscriberName, Requirement requirement )\n {\n\nString SubscriberDependency = \"\"Requirements\"\";\n\nString Message = \"\"ADD_SUBSCRIPTION\"\"+\"\"|\"\";\nMessage += m_UserName + \"\"|\"\";\nMessage += Subscribervoid DeleteSubscription(String SubscriberName, Requirement requirement )\n {\nString Message = \"\"REMOVE_SUBSCRIPTION\"\"+\"\"|\"\";\nMessage += SubscriberName + \"\"|\"\";\nMessage += requirement . m_RequirementID + \"\",\"\";\nMessage += req void UpdateDisplayList()\n {\n\nlistModel. removeAllElements();\n\nfor ( int j=0; j< events. size(); j++)\n{\n\n Notification_Event nEvt = (Notification_Event) events. get( j);\n\n String displayStri // Passes a CHECK_SUBSCRIPTION message to the eventserver and waits for a response\nprivate boolean Check_Subscription(String ip,\n int PortNo,\n String SubscriberName,\n String Requirement // Takes an event string returned from the eventserver and\n// extracts True or False response\nprivate boolean Analyze_CheckSubscription(String str)\n{\nStringTokenizer tokens = new StringTokenizer( str,\"\"|\"\");\nString Messag\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd0c"},"name":"87.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fceb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcec"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fced"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcee"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcef"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf0"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3d"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3e"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3f"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd40"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd41"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd42"}]],"contents":"87\t\"EBTprivate JSplitPane splitPane;\nprivate JSplitPane splitPane2;\nprivate Frame FrameParent;\nprivate JPanel MenuPanel;\nprivate TextModel WorkArea;\nprivate EventModel VisualPanel;\nprivate MergeModel M public EBT(Frame f)\n{\n\nFrameParent = f;\nCurrentEvent = -1;\n\nthis. serverIP =\n JOptionPane\n. showInputDialog(\"\"Please Enter the IP Address of eventserver\"\")\n. trim();\n\n // Set up JList Selection wid public void getrequirement Text(EBShape sh)\n{\nWorkArea. showText( sh);\n } public boolean mouseDown( java. awt.Evente, int x, int y)\n {\n return true;\n }public boolean mouseUp( java. awt.Evente, int x, int y)\n{\nreturn true;\n } public void mouseClicked( java. awt. event.MouseEvente)\n{\nVisualPanel.Clicked( e. getX(), e. getY());\n} public void mouseExited( java. awt. event.MouseEvente){} public void mousePressed( java. awt. event.MouseEvente){} public void mouseReleased( java. awt. event.MouseEvente){}public void mouseEntered( java. awt. event.MouseEvente){} public void paint(Graphics g) {} public void update(Graphics g) {} public JSplitPane getSplitPane()\n{\nreturn splitPane;\n} public void valueChanged(ListSelectionEvent e)\n{\nif ( e. getValueIsAdjusting())\nreturn;\n} private class ValueReporter implements ListSelectionListener\n{\n\npublic void valueChanged(ListSelectionEvent event)\n{\n if (! event. getValueIsAdjusting())\n {\nswitch(EventList. getSelectedIndex())\npublic void RedrawAll(EBShape sh)\n{\nVisualPanel. drawModel( sh);\nVisualPanel.CheckNotifyStatus();\n} public static void main(String s[])\n{\nJFrame mainframe = new JFrame(\"\"Trigger an Event Notification\"\");\n\nmainframe. addWindowListener( new WindowAdapter()\n{\npublic void windowClosing(Wind\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd0d"},"name":"91.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcee"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd40"}]],"contents":"91\t\"Modify Model public ModifyModel(EBT em)\n{\nsuper( em);\n } // Construct Visual model for Merge Event\npublic void BuildEvent()\n{\n ClearVectors();\nAddEventRect(60,80,1);\nCurrentEvent = 4;\n} public StringBuffer GenerateEvent()\n{\nStringBuffer thisEvent = new StringBuffer();\nthisEvent. append(\"\"Modify|0|\"\");\nthisEvent. append( new Date(). toString()+ \"\"|\"\");\n ebs = (EBShape)EventShapes protected void paintComponent(Graphics g)\n{\ng. drawString(\"\"TESTING MODIFY\"\",5,5);\nsuper. paintComponent( g);\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd0e"},"name":"52.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"52\t\"Pair private String queryID;\n private String queryString; public Pair(String queryID, String queryString) {\n\nthis. queryID = queryID;\nthis. queryString = queryString;\n\n } public String getQueryID() {\nreturn this. queryID;\n } public String getQueryString() {\nreturn this. queryString;\n } public void setQueryID(String queryID) {\nthis. queryID = queryID ;\n } public void setQueryString(String queryString) {\nthis. queryString = queryString;\n } public String toString(){\n\n\nreturn \"\"Query ID: \"\"\n+ this. queryID\n+ \"\"\\ n\"\"\n+\"\"Query String : \"\"\n+ this. queryString\n+ \"\"\\ n\"\";\n\n\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd0f"},"name":"64.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf8"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfb"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd47"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd48"}]],"contents":"64\t\"DOORs Thread Pool public final static int defaultPort = 2347;\n ServerSocket theServer;\n // static int numberOfThreads = 3; //@param argsNo arguments are used.\n public static void main(String args[])\n {\n\nThreadPool pool = new ThreadPool(1);\n\n int port = defaultPort;\n try\n {\n ServerSocket ss = new ServerSocket( port);\n for\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd10"},"name":"72.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"72\t\"Balance /**\n * Symbol represents what will be placed on the stack.\n */\nprivate static class Symbol\n{\npublic chartoken;\npublic int theLine;\n\npublic Symbol( char tok, int line )\n{\ntoken = /**\n * Constructor.\n * @param inStream the stream containing a program.\n */\npublic Balance( Reader inStream )\n{\nerrors = 0;\ntok = new Tokenizer( inStream );\n}/**\n * Print an error message for unbalanced symbols.\n * @return number of errors detected.\n */\npublic int checkBalance( )\n{\nchar ch;\nSymbol match = null;\nStack pendingTokens = new Stack( );\n\n private Tokenizer tok;\nprivate int errors; /**\n * Print an error message if clSym does not match opSym.\n * Update errors.\n */\nprivate void checkMatch( Symbol opSym, Symbol clSym )\n{\nif( opSym. token == '(' && clSym. token != ')' ||\n /**\n * main routine for balanced symbol checker.\n * Slightly different from text.\n * If no command line parameters, standard input is used.\n * Otherwise, files in command line are used.\n */\npublic static void main( St\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd11"},"name":"48.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf7"}]],"contents":"48\t\"Constraint Inner Panel  private String server  IP = \"\" local host  \"\";\n private JLabel performance  Model  Label = null  ;\n private JLabel project  Name  Label = null  ;\n private JLabel module  Path  Label = null  ;\n private JLabel requirement  Id  Label = null  ;\n private JLabel public Constraint  Inner  Panel  (\n  String performance  Model  Name  ,\n  String project  Name  ,\n  String module  Path  ,\n  String requirement  Id  ,\n  String description  ,\n  String logic  ,\n  String units  ,\n  String value  ,\n  String impacted  Value    private void set goal  Label  Values  (\n  String attribute  ,\n  String logic  ,\n  String value  ,\n  String units  )\n {\n  goal  Label  . set  Text  (\n   \"\"  Goal : \"\" + attribute + \"\"  \"\" + logic + \"\"  \"\" + value + \"\" \"\" + units  );\n\n }  public Vector get  Values  From  Data  Base  ()\n {\n\n  Vector v = new Vector  ();\n\n  Socket server  ;\n  String line = new String  ();\n\n\n  try\n  {\n   server = new Socket  ( server  IP  ,  1701  );\n\n   if ( server  . is  Connected  () )\n   {\n    Buffered  R  private void set impacted  Label  Value  (\n  String attribute  ,\n  String value  ,\n  String impacted  Value  ,\n  String units  ,\n  String logic  )\n {\n\n  if ( impacted  Value !  = null  )\n  {\n\n   double value  1 = Double  . parse  Double  ( value  );\n   d  public JPanel get  Panel  ()\n {\n  return panel  ;\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd12"},"name":"49.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf7"}]],"contents":"49\t\"Constraints Description private String project  Name = null  ;\n private String module  Path = null  ;\n private String requirement  ID = null  ;\n\n private String value = null  ;\n private String logic = null  ;\n private String units = null  ;\n private String description = null  ;\n public Constraints  Description  (\n  String project  Name  ,\n  String module  Path  ,\n  String requirement  ID  )\n {\n\n  this  . project  Name = project  Name  ;\n  this  . module  Path = module  Path  ;\n  this  . requirement  ID = requirement  ID  ;\n\n }  public String get  Description  () {\n  return this  . description  ;\n }  public String get  Logic  () {\n  return this  . logic  ;\n }  public String get  Module  Path  () {\n  return this  . module  Path  ;\n }  public String get  Project  Name  () {\n  return this  . project  Name  ;\n }  public String get  Requirement  ID  () {\n  return this  . requirement  ID  ;\n }  public String get  Units  () {\n  return this  . units  ;\n }  public String get  Value  () {\n  return this  . value  ;\n }  public void set  Description  (  String description  ) {\n  this  . description = description  ;\n }  public void set  Logic  (  String logic  ) {\n  this  . logic = logic  ;\n }  public void set  Module  Path  (  String module  Path  ) {\n  this  . module  Path = module  Path  ;\n }  public void set  Project  Name  (  String project  Name  ) {\n  this  . project  Name = project  Name  ;\n }  public void set  Requirement  ID  (  String requirement  ID  ) {\n  this  . requirement  ID = requirement  ID  ;\n }  public void set  Units  (  String units  ) {\n  this  . units = units  ;\n }  public void set  Value  (  String units  ) {\n  this  . value = units  ;\n }  public String get  Impacted  Constraint  () {\n  return this  . impacted  Constraint  ;\n }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {\n  this  . impacted  Constraint = impacted  Constraint  ;\n }  public String get  Attribute  () {\n  return this  . attribute  ;\n }  public void set  Attribute  (  String attribute  ) {\n  this  . attribute = attribute  ;\n }  public String get  Performance  Model  Name  () {\n  return this  . performance  Model  Name  ;\n }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {\n  this  . performance  Model  Name = performance  Model  Name  ;\n } public String to  String  () {\n\n  String str =\n   \"\"\\ n  Project Name = \"\"\n    + this  . project  Name\n    + \"\"\\ n  \"\"\n    + \"\"  Module Path = \"\"\n    + this  . module  Path\n    + \"\"\\ n  \"\"\n    + \"\"  Requirement ID = \"\"\n    + this  . requirement  ID\n    + \"\"\\ n  \"\"\n   public boolean equals  (  Object o  ) {\n\n  if (!( o instance of Constraints  Description  ))\n   return false  ;\n\n  Constraints  Description cd = (  Constraints  Description  ) o  ;\n\n  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {\n\n  int hash  Code = 0  ;\n\n  if ( hash  Code == 0  ) {\n   int result = 17  ;\n   result = 37 * result + this  . project  Name  . hash  Code  ();\n   result = 37 * result + this  . module  Path  . hash  Code  ();\n   result = 37 * \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd13"},"name":"73.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"73\t\"Constraints String id;\n String name;\n double value;\n String logic; Constraints(String id, String name, double value, String logic){\nthis. id = id;\nthis. name = name;\nthis. value = value;\nthis. logic = logic;\n } public String toString(){\n String temp;\n temp = \"\"ID = \"\" + id + \"\", Name = \"\" + name +\"\", value = \"\" + value + \"\", Logic = \"\" + logic;\n return temp;\n } /**\n* Returns the id.\n* @return int\n*/\n public String getId() {\nreturn id;\n } /**\n* Returns the logic.\n* @return String\n*/\n public String getLogic() {\nreturn logic;\n } /**\n* Returns the name.\n* @return String\n*/\n public String getName() {\nreturn name;\n } /**\n* Returns the value.\n* @return double\n*/\n public double getValue() {\nreturn value;\n } /**\n* Sets the id.\n* @param id The id to set\n*/\n public void setId(String id) {\nthis. id = id;\n } **\n* Sets the logic.\n* @param logic The logic to set\n*/\n public void setLogic(String logic) {\nthis. logic = logic;\n } /**\n* Sets the name.\n* @param name The name to set\n*/\n public void setName(String name) {\nthis. name = name;\n } /**\n* Sets the value.\n* @param value The value to set\n*/\n public void setValue( double value) {\nthis. value = value;\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd14"},"name":"65.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"65\t\"About Dialog public AboutDialog(JFrame parent, boolean modal) {\n\n super ( parent, modal);\n \n getContentPane (). setLayout ( new BorderLayout ());\n setTitle (\"\"About\"\");\n setName (\"\" aboutDialog\"\");\n \n private JTextArea text;\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd15"},"name":"53.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"53\t\"Performance Modelprivate String name = null;\n private Vector driverVector = null;\n private Vector constraintVector = null;\n\n private long queryID = 0;\n\n public static int count = 0; public PerformanceModel(String name, long queryID)\n {\nthis. name = name;\nthis. queryID = queryID;\n\nthis. driverVector = new Vector();\nthis. constraintVector = new Vector();\n } public Vector getConstraints()\n {\nreturn constraintVector;\n } public Vector getDrivers()\n {\nreturn driverVector;\n } public String getName()\n {\nreturn name;\n } public void setName(String name)\n {\nthis. name = name;\n } public void addDriver(DriverDescription driver)\n {\n\nif ( driverVector. contains( driver))\n{\n}\nelse\n this. driverVector. add( driver);\n\n } public void removeDriver(DriverDescription driver)\n {\nthis. driverVector. remove( driver);\n } public boolean containsDriver(DriverDescription driver)\n {\nreturn this. driverVector. contains( driver);\n } public void addConstraint(ConstraintsDescription constraint)\n {\nthis. constraintVector. add( constraint);\n } public boolean containsConstraint(ConstraintsDescription constraint)\n {\nreturn this. constraintVector. contains( constraint);\n } public void removeConstraint(ConstraintsDescription constraint)\n {\nthis. constraintVector. remove( constraint);\n } public DriverDescription getDriver(DriverDescription driver)\n {\nDriverDescription dd = null;\n\nfor ( int i = 0; i < this. driverVector. size(); i++)\n{\n dd = (DriverDescription) this. driverVector. get( i) public ConstraintsDescription getConstraint(ConstraintsDescription constraint)\n {\nConstraintsDescription cd = null;\n\nfor ( int i = 0; i < this. constraintVector. size(); i++)\n{\n cd = (ConstraintsDescription) thispublic long getQueryID()\n {\nreturn this. queryID;\n } public void setQueryID( long id)\n {\nthis. queryID = id;\n } public String toString()\n {\nreturn \"\"performance modelName = \"\"\n + this. name\n + \"\"\\ n\"\"\n + \"\"Query ID = \"\"\n + this. queryID\n + \"\"\\ n\"\"\n + \"\"Drivers = \"\"\n + this. driverVector\n + \"\"\\ n\"\"\n + \"\"Constraints = \"\"\n + this.\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd16"},"name":"90.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf0"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd42"}]],"contents":"90\t\"Merge Model public MergeModel(EBT em)\n {\nsuper( em);\n MinimumNoRects = 3;\n } // Construct Visual model for Merge Event\npublic void BuildEvent()\n{\n ClearVectors();\nAddEventRect(90,220,1);\n AddEventRect(20,20,1);\nAddEventRect(20,70,1);\nAddEvent public StringBuffer GenerateEvent()\n{\nStringBuffer thisEvent = new StringBuffer();\nStringBuffer temp = new StringBuffer();\nint MergeCount = -1;\nthisEvent. append(\"\"Merge|\"\");\n\nfor ( int i = 0; i < EventSha\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd17"},"name":"69.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce2"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fceb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcec"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fced"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcee"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcef"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf0"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfc"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd33"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd34"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3d"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3e"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3f"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd40"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd41"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd42"}]],"contents":"69\t\"Notification Event public String m_SubscriberName = \"\"\"\";\npublic String m_EventID = \"\"\"\";\npublic String m_Message type = \"\"\"\";\npublic String m_EventType = \"\"\"\";\npublic int m_NumberOfRequirements = 0;\npublic String m_EventTim public Notification_Event()\n{\n m_LeftSide = new ArrayList();\n m_RightSide = new ArrayList();\n} public Object clone() throws CloneNotSupportedException\n {\n\nNotification_Event nEvt = (Notification_Event) super. clone();\n nEvt. m_LeftSide = new ArrayList();\n nEvt. m_RightSide = new ArrayLis public void ParseEvent(String TextLine)\n {\n\n StringTokenizer LineSt; // Tokenizer for the line\n\nint i=0;\n\nLineSt = new StringTokenizer(TextLine, \"\"|\"\");\n\nm_SubscriberName = LineSt. nextToken// Set the other members before calling this function\n\n public void ParseLeftAndRightLists(String LeftLine, String RightLine)\n {\n\nm_LeftSide = new ArrayList();\n m_RightSide = new ArrayList();\n\nif ( m_Eve public void DisplayValues()\n{\n System. out. println(\"\"\\ r\\ nValues of the event:\\ r\\ n\"\");\n System. out. println(\"\" m_SubscriberName: \"\"+ m_SubscriberName);\n System. out. println(\"\" m_EventI\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd18"},"name":"86.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"86\t\"EB Shape private int x, y;\n private String requirement No;\n private String ProjectName, ModulePath;\nprivate Color c; public EBShape( int xpos, int ypos, Color col)\n {\nx = xpos;\ny = ypos;\nc = col;\nrequirement No = \"\"\"\";\nProjectName = \"\"\"\";\nModulePath = \"\"\"\";\n } public void Updaterequirement Info(String rno, String pname, String mname)\n {\nrequirement No = rno. trim();\nProjectName = pname. trim();\nModulePath = mname. trim();\n } public boolean match( int mx, int my)\n {\nreturn true;\n\n } public int GetX()\n {\nreturn x;\n } public int GetY()\n {\nreturn y;\n } public Color GetC()\n{\nreturn c;\n } public String GetReqno()\n {\nreturn requirement No;\n } public String GetProject()\n {\nreturn ProjectName;\n } public String GetModule()\n {\nreturn ModulePath;\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd19"},"name":"46.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce5"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3b"}]],"contents":"private JPanel center  Panel = null  ;\n\n private JLabel des  Label = null  ;\n private JLabel change  Label = null  ;\n private JLabel from  Label = null  ;\n private JLabel to  Label = null  ;\n private JText  Area des  Text = null  ;\n private JText  Field c Speculate Gui public Speculate  Gui  ()\n {\n\n  super  (\"  Speculate GUI  \");\n\n  container = get  Content  Pane  ();\n\n  set  Size  (  800  , 600  );\n\n  this  . event  Server  IP =\n   JOption  Pane\n    . show  Input  Dialog  (\"  Please Enter the IP Address of eventserver  Submit Listener public void action  Performed  (  Action  Event e  ) {\n\n   if ( e  . get  Source  () == submit  Button  ) {\n\n    send  Query  TO Server  ();\n\n   }\n\n   if ( e  . get  Source  () == fetch  Button  ) {\n\n\n    System  . out  . println  (\"  Fetch Button Pressed void send  Query  TO Server  ()\n {\n\n  String ip = this  . event  Server  IP  ;\n  int Port  No = 1701  ;\n\n  Socket socket  ;\n  try {\n\n   socket = new Socket  ( ip  , Port  No  );\n\n   Output  Stream os = socket  . get  Output  Stream  ();\n   Output  Stream  public void pull  Value  From  DOORS  ()\n {\n\n  String server  IP = new String  ( doors server  IP  ); //\"  140  .  192  .  37  .  150  \";\n\n  String  [] attribute = { \"  Value  \", \"  Attribute  \" };\n\n  String project  Name = this  . proj  Name  Text  . get public static void main  (  String  [] args  )\n {\n  new Speculate  Gui  ();\n }"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd1a"},"name":"50.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf7"}]],"contents":"50\t\"Driver Description private String projectName = null;\n private String modulePath = null;\n private String requirementID = null;\n\n private String description = null; // Description of the requirement.\n private String changedArrtibute = null;\n private Strinpublic DriverDescription(\nString projectName,\nString modulePath,\nString requirementID,\nString description,\nString changedAttribute,\nString fromAttribute,\nString toAttribute)\n {\n\nthis. projectName = projecpublic String getChangedAttribute()\n {\nreturn changedAttribute;\n }public String getDescription()\n {\nreturn description;\n }public String getFromAttribute()\n {\nreturn fromAttribute;\n } public String getModulePath()\n {\nreturn modulePath;\n }public String getProjectName()\n {\nreturn projectName;\n } public String getRequirementID()\n {\nreturn requirementID;\n } public String getToAttribute()\n {\nreturn toAttribute;\n } public void setChangedAttribute(String changedAttribute)\n {\nthis. changedAttribute = changedAttribute;\n } public void setDescription(String description)\n {\nthis. description = description;\n } public void setFromAttribute(String fromAttribute)\n {\nthis. fromAttribute = fromAttribute;\n } public void setModulePath(String modulePath)\n {\nthis. modulePath = modulePath;\n } public void setProjectName(String projectName)\n {\nthis. projectName = projectName;\n } public void setRequirementID(String requirementID)\n {\nthis. requirementID = requirementID;\n } public void setToAttribute(String toAttribute)\n {\nthis. toAttribute = toAttribute;\n } public String createKey()\n {\nString key =\n this. projectName + this. modulePath + \"\"\\\\\"\" + this. requirementID;\n\nreturn key. toLowerCase();\n\n } public boolean equals(Object o)\n {\nif (!( o instance of DriverDescription))\n return false;\n\nDriverDescription dd = (DriverDescription) o;\n\nif ( dd. projectName. equalsIgnoreCase( this. projectName)\n && ddpublic String toString()\n {\n\nString str =\n \"\"\\ nProject Name = \"\"\n+ this. projectName\n+ \"\"\\ n\"\"\n+ \"\"Module Path = \"\"\n+ this. modulePath\n+ \"\"\\ n\"\"\n+ \"\"Requirement ID = \"\"\n+ this. requirementID\n+ \"\"\\ n\"\"\npublic int hashCode()\n {\n\nint hashCode = 0;\n\nif ( hashCode == 0)\n{\n int result = 17;\n result = 37 * result + this. projectName. hashCode();\n result = 37 * result + this. modulePath. hashCode();\n result = 37 \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd1b"},"name":"93.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcef"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd41"}]],"contents":"93\t\"Obsolete Modelpublic ObsoleteModel(EBT em)\n{\nsuper( em);\n } // Construct Visual model for Merge Event\npublic void BuildEvent()\n{\n ClearVectors();\nAddEventRect(60,80,1);\nAddLine(60,60,225,135);\nAddLine(60,135,225,60);\nCurrentEve public StringBuffer GenerateEvent()\n {\nStringBuffer thisEvent = new StringBuffer();\nthisEvent. append(\"\"Obsolete|0|\"\");\nthisEvent. append( new Date(). toString()+\"\"|\"\");\nebs = (EBShape)EventShapes. e\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd1c"},"name":"85.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fceb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcec"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fced"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcee"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcef"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf0"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3d"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3e"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3f"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd40"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd41"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd42"}]],"contents":"85\t\"Decompose Model public DecomposeModel(EBT em)\n{\nsuper( em);\nMinimumNoRects = 3;\n }// Construct Visual model for Merge Event\npublic void BuildEvent()\n{\n ClearVectors();\nAddEventRect(20,20,1);\nAddEventRect(60,70,1);\nAddEventRect(60,120,1);\nAddEventRect public StringBuffer GenerateEvent()\n{\nStringBuffer thisEvent = new StringBuffer();\nStringBuffer temp = new StringBuffer();\nint Count = -1;\nthisEvent. append(\"\"Decompose|\"\");\n\nfor ( int i = 0; i < EventShapes\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd1d"},"name":"70.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce2"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfb"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd33"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd34"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd47"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd48"}]],"contents":"70\t\"Notification Processing // member variables for menu\n private JMenuBar menuBar;\n\n // subscriber list\n private JList SubscriberList;\n private DefaultListModel listModel;\n\n // popup menu\n\n private JPopupMenu popup;\n\n // database and eventserver information\n S public Notification_Processing()\n {\n\nsetDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n\naddWindowListener( new WindowAdapter()\n{\n public void windowClosing(WindowEvent evt)\n {\ntry\npublic static void main(String args[])\n {\ntry\n{\n Notification_Processing mainFrame = new Notification_Processing();\n mainFrame. setSize(600, 400);\n mainFrame. setLocation(100, 100);\n mainFrame. void exitApplication()\n{\ntry\n{\nint reply = JOptionPane. showConfirmDialog( this,\n\"\"Do you really want to exit?\"\",\n\"\"No // action for \"\"Open log database\"\"\n private void openMenuItemActionPerformed (ActionEvent evt)\n {\nnew ConfigDialog( this, true). show();\n\n if( m_DSN. equals(\"\"\"\") || m_EventServerIP. equals(\"\"\"\") || m_// action for \"\"Close log database\"\"\n private void saveMenuItemActionPerformed (ActionEvent evt)\n {\ntry\n{\n m_ conn. close();\n m_DSN=\"\"\"\";\n m_EventServerIP=\"\"\"\";\n m_EventServerPort=\"\"\"\";\n\n // action for \"\" exit\"\"\n private void exitMenuItemActionPerformed (ActionEvent evt)\n {\nexitApplication();\n } // action for \"\"Open Events\"\" in popup menu\n private void popupOpenActionPerformed (ActionEvent evt)\n {\nopenEventsMenuItemActionPerformed( evt);\n } // action for \"\"Open Events\"\"\n private void openEventsMenuItemActionPerformed (ActionEvent evt)\n {\nif (! listModel. isEmpty())\n{\n int index = SubscriberList. getSelectedIndex();\n if ( index != -1)\n // action for \"\" double click on Subscriber List\"\"\n private void doubleClickSubscriberList (MouseEvent evt)\n {\nif (! listModel. isEmpty())\n{\n int index = SubscriberList. getSelectedIndex();\n if ( index != -1 // action for \"\"About\"\"\n private void aboutMenuItemActionPerformed (ActionEvent evt)\n {\nnew AboutDialog ( this, true). show();\n } void UpdateDisplayList()\n {\nlistModel. removeAllElements();\n\n String mSQL = \"\"SELECT distinct SubscriberName FROM EventDetails\"\";\n\ntry\n{\n rs = stmt. executeQuery( mSQL);\n while ( rs. next())\n {\n \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd1e"},"name":"89.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"89\t\"Event Line protected int top, left, right, bottom; public EventLine ( int t, int l, int r, int b)\n{\ntop = t;\nleft = l;\nright = r;\nbottom = b;\n} public int GetT() { return top;} public int GetL() { return left;}public int GetR() { return right;} public int GetB() { return bottom;}\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd1f"},"name":"66.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"66\t\"Config Dialog public ConfigDialog(Notification_Processing parent, boolean modal) {\n \nsuper ( parent, modal);\n setTitle(\"\"Config Dialog Box\"\");\n getContentPane (). setLayout ( new GridLayout(5,2));\n\nprivate void closeDialog(WindowEvent evt) {\nsetVisible ( false);\ndispose ();\n}// event listener for \"\"Ok\"\" button \nprivate void okButtonActionPerformed (ActionEvent evt) {\n \n if( UserName. getText(). equals(\"\"\"\") || DSN. getText(). equals(\"\"\"\") || EventServerIP. getText(). equa// event listener for \"\"Cancel\"\" button\nprivate void cancelButtonActionPerformed (ActionEvent evt) {\nsetVisible ( false);\ndispose (); \n} // configuration entries\nprivate JLabel UserNameLabel; \nprivate JTextField UserName;\nprivate JLabel DSN Label; \nprivate JTextField DSN;\nprivate JLabel EventServerIP Label; \nprivate JTextField EventSe\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd20"},"name":"88.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"88\t\"Event Model \nprotected Vector EventShapes = new Vector();\nprotected Vector EventLines = new Vector();\nprotected EB Shape ebs, ebs2;\nprotected EventLine mline;\nprotected Color ShapeColor = new Color (190,190,190);\n public EventModel(EBT e)\n{\nebt = e;\nCurrentEvent = -1;\nNotifyButton = new JButton(\"\"Notify\"\");\nsetLayout( null);\nNotifyButton. setBounds(305,265,80,25);\nMinimumNoRects = 1;\n\nadd public void getIP Server( String serverIP)\n {\n\nthis. serverIP = serverIP;\n } public void ClearVectors()\n{\nEventShapes. removeAllElements();\nEventLines. removeAllElements();\n}public void drawModel()\n{\nrepaint();\n} public void drawModel(EBShape sh)\n{\nEventShapes. setElementAt( sh, ESCursor);\nrepaint();\n} private void ClearData()\n{\nfor ( int i = 0; i < EventShapes. size(); i++)\n{\nebs = (EBShape)EventShapes. elementAt( i);\nebs.Updaterequirement Info(\"\"\"\",\"\"\"\",\"\"\"\");\n }\n}public void Clicked ( int x, int y)\n{\nint Hit = 0;\nfor ( int i = 0; i < EventShapes. size(); i++)\n{\n ebs = (EBShape)EventShapes. elementAt( i);\n\nif (( x >= ebs.GetX() && ( x <= ebs public void CheckNotifyStatus()\n {\n//Check if Minimum Standards have been met.\nint j = 0;\nfor ( j = 0; j < MinimumNoRects; j++)\n{\nebs2 = (EBShape)EventShapes. elementAt( j);\n\n if (((((protected void BuildEvent(){} protected void AddLine( int t, int l, int r, int b)\n{\nEventLines. addElement( new EventLine( t, l, r, b));\n} protected void AddEventRect( int x, int y, int colorStatus)\n{\nif ( colorStatus == 1)\n{\n EventShapes. addElement( new EBShape( x, y, new Color (100,100,100)));\n }\n else\n {\nEven public String getrequirement Text(String r, String p, String m)\n{\nreturn new String(\"\"requirementwill go here\"\");\n } public StringBuffer GenerateEvent()\n{\nreturn new StringBuffer(\"\" \"\");\n }// end of GenerateEvent method protected void paintComponent(Graphics g)\n{\nsuper. paintComponent( g);\nfor ( int i = 0; i < EventShapes. size(); i++)\n{\nebs = (EBShape)EventShapes. elementAt( i);\n g. setC\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd21"},"name":"67.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfc"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd47"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd48"}]],"contents":"67\t\"Event Detail Dialog private GridBagLayout grid bag;\nprivate GridBagConstraints c;\n\n// objects in top panel\nprivate JPanel topPanel;\nprivate JLabel modelLabel;\nprivate JLabel typeLabel;\nprivate JTextField modelField;\np public EventDetailDialog(EventsProcessor parent, boolean modal,Notification_Event nEvt, boolean mode)\n{\n\nsuper ( parent, modal);\n setTitle(\"\"Event Details\"\");\n getContentPane (). setLayout (private void closeDialog(WindowEvent evt)\n{\nsetVisible ( false);\ndispose ();\n} // event listener for \"\"Ok/Update\"\" button\nprivate void okButtonActionPerformed (ActionEvent evt)\n{\n\n if ( displayMode == true)\n {\n\n// m_ parent.DeleteEvent( m_Evt. m_SubscriberName, m_ // event listener for \"\"Cancel\"\" button\nprivate void cancelButtonActionPerformed (ActionEvent evt)\n{\nsetVisible ( false);\ndispose ();\n} private void LeftListClicked(MouseEvent e){\n\n if (!LeftList. isSelectionEmpty()) {\n\n int index = LeftList. getSelectedIndex();\n Requirement requirement= (Requirement) m_Evt. m_LeftSideprivate void RightListClicked(MouseEvent e){\n\n if (!RightList. isSelectionEmpty()) {\n\n int index = RightList. getSelectedIndex();\n Requirement requirement= (Requirement) m_Evt. m_RightS\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd22"},"name":"71.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"71\t\"Requirementpublic String m_RequirementID =\"\"\"\";\npublic String m_Project =\"\"\"\";\npublic String m_ModulePath=\"\"\"\";\npublic String m_Content = \"\"\"\";\npublic String m_RegFlag = \"\"N\"\"; public Requirement()\n{\n\n} public Object clone() throws CloneNotSupportedException\n {\n\nRequirement requirement= (Requirement) super. clone();\nreturn requirement ;\n } public void ReadValues(String RequirementID, String Project, String ModulePath, String Content, String RegFlag)\n {\nthis. m_RequirementID = RequirementID;\nthis. m_Project = Project;\nthis. m_ModulePath public void ParseRequirement(String TextLine)\n {\n\n StringTokenizer LineSt;\nLineSt = new StringTokenizer(TextLine, \"\",\"\");\nm_RequirementID=LineSt. nextToken();\nm_Project=LineSt. \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd23"},"name":"84.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"84\t\"White Board Execution Graph //Driver data members\n double avgShapeSize_Original;\n double avgShapeSize_Speculate;\n\n // constraints data members\n double avgTextSize;\n double writeTime;\n double noShapes;\n double noTextItems;\n double bandWidth public WhiteBoardExecutionGraph(Vector driver, Vector constraints){\nthis. driver = driver;\nthis. constraints = constraints;\n }// end of constructor public String toString(){\n String result;\n\n result = \"\" avgShapeSize_Original = \"\" + avgShapeSize_Original +\n\"\",\\ navgShapeSize_Speculate = \"\" + avgShapeSize_Speculate +\n\"\",\\ navgTextSize = \"\" + avgTextSizepublic void injectDrivers(){\nSystem. out. println(\"\"\\ t\\ tINSIDE INJECT DRIVERs METHOD\"\");\n//To Do: Run for loop for more then one drivers\n//To Do: have a case insensitive check for driver name and then populate the data member public void injectConstraints(){\nSystem. out. println(\"\"\\ t\\ tINSIDE INJECT CONSTRAINTs METHOD\"\");\n\n//To Do: have a case insensitive check for constraints name and then populate the data member\n//System. out. println( const public double timeToBroadcastShapeBefore(){\nSystem. out. println(\"\"\\ t\\ t\\ tINSIDE timeToBroadcastShapeBefore METHOD\"\");\n\ndouble targetResponse time_ temp = 0.00;\n\n for( int i=0; i< noShapes; i++ public double timeToBroadcastShapeAfter(){\nSystem. out. println(\"\"\\ t\\ t\\ tINSIDE timeToBroadcastShapeAfter METHOD\"\");\n\ndouble targetResponse time_ temp = 0.00;\n\n for( int i=0; i< noShapes; i++){ public double timeToBroadcastText(){\nSystem. out. println(\"\"\\ t\\ t\\ tINSIDE timeToBroadcastText METHOD\"\");\n\ndouble targetResponse time_ temp = 0.00;\n\n for( int i=0; i< noTextItems; i++){\n\n target public double writeTime(){\nSystem. out. println(\"\"\\ t\\ t\\ tINSIDE writeTime METHOD\"\");\n\nSystem. out. println(\"\"\\ t\\ t\\ t\\ tTotal time to write = \"\" + writeTime);\n\nSystem. out. println(\"\"\\ t\\ t\\ tLEAVING w public double targetResponseTimeBefore(){\nSystem. out. println(\"\"\\ t\\ tINSIDE targetResponseTimeBefore METHOD\\ n\"\");\n\ntargetResponse time = timeToBroadcastShapeBefore() +\ntimeToBroadcastText()public double targetResponseTimeAfter(){\nSystem. out. println(\"\"\\ t\\ tINSIDE targetResponseTimeAfter METHOD\\ n\"\");\n\ntargetResponse time = timeToBroadcastShapeAfter() +\ntimeToBroadcastText() + w\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd24"},"name":"92.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fceb"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3d"}]],"contents":"92\t\"New Modelpublic NewModel(EBT em)\n{\nsuper( em);\n } // Construct Visual model for Merge Event\npublic void BuildEvent()\n{\nClearVectors();\nAddEventRect(60,80,1);\nAddArrow(35,97,59,97);\nCurrentEvent = 0;\n} public StringBuffer GenerateEvent()\n{\nStringBuffer thisEvent = new StringBuffer();\nthisEvent. append(\"\"New|0|\"\");\nthisEvent. append( new Date(). toString()+ \"\"|\"\");\nebs = (EBShape)EventShapes. elem\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd25"},"name":"51.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf7"}]],"contents":"51\t\"Driver Inner Panel private JLabel projectNameLabel = null;\n private JLabel modulePathLabel = null;\n private JLabel requirementIdLabel = null;\n private JLabel desLabel = null;\n private JLabel changeLabel = null;\n private JLabel fromLabel = null;String projectName,\nString modulePath,\nString requirementID,\nString description,\nString changeAttribute,\nString fromValue,\nString toValue) {\n\npanel = new JPanel();\n\npanel. setBackground(Color.LIGHTpublic JPanel createPanel() {\n\nreturn panel;\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd26"},"name":"47.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce8"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3c"}]],"contents":"47\t\"Impact Report private String server  IP = \"\" local host  \"\";\n private JPanel center  Panel = null  ;\n\n private JPanel driver  Panel = new JPanel  ();\n\n private JPanel driver  Inner  Panel = null  ;\n\n private JPanel impact  Panel = null  ;\n private JPanel impact  Inner  P public Impact  Report  ()\n {\n\n  super  (\"\"  Search Result GUI  \"\");\n\n  container = get  Content  Pane  ();\n\n  set  Size  (  800  , 250  );\n\n  panel = new JPanel  ();\n\n  panel  . set  Layout  ( null  );\n\n  this  . server  IP =\n   JOption  Pane\n    . show  In public static void main  (  String [] args  )\n {\n\n  Impact  Report im = new Impact  Report  ();\n\n\n\n } public Vector search  Date  ()\n {\n\n  date  Vector = new Vector  ();\n  date  Vector  . add  (\"\"  Select Query Date  \"\");\n  Socket server  ;\n  String line = new String  ();\n\n\n  try\n  {\n\n   server = new Socket  ( server  IP  ,  1701  );\n   if ( server  . is  C public void search  Query  ID  (  String date  )\n {\n\n  pair  Vector = new Vector  ();\n\n  query  String  Combo  . remove  All  Items  ();\n\n  query  String  Combo  . add  Item  (\"\"  Select Query String  \"\");\n\n  Socket server  ;\n  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )\n  {\n\n   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())\n   {\n    date = (  String  ) date  Combo  . get  Selected  Item  ();\n    search  Query  ID  ( date  );\n   }\n  } Button Actions  public void action  Performed  (  Action  Event e  ) {\n\n   if ( submit  Button == e  . get  Source  ()) {\n\n    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {\n\n     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );\n\n     if ( pair\n      . get public void impact  Report  (  String id  )\n {\n\n  // super  (\"\"  Impact Report  \"\");\n\n  container = get  Content  Pane  ();\n\n  set  Size  (  1020  , 740  );\n\n  this  . query  ID = id  ;\n\n  System  . out  . println  (\"\"  Impact Report Constructor ..... ID \"\" + public Vector get  Constraint  From  Data  Base  ()\n {\n\n  Vector v = new Vector  ();\n\n  Socket server  ;\n  String line = new String  ();\n\n\n  try\n  {\n   server = new Socket  ( server  IP  ,  1701  );\n\n   if ( server  . is  Connected  () )\n   {\n    Buffered  public Vector get  Driver  From  Data  Base  ()\n {\n\n  Vector v = new Vector  ();\n\n     Socket server  ;\n  String line = new String  ();\n\n\n  try\n  {\n   server = new Socket  ( server  IP  ,  1701  );\n\n   if ( server  . is  Connected  () )\n   {\n    Buffered\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd27"},"name":"76.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"76\t\"Evaluatorprivate static final int EOL = 0;\nprivate static final int VALUE = 1;\nprivate static final int OPAREN= 2;\nprivate static final int CPAREN= 3;\nprivate static final int EXP = 4;\nprivate static final int MULT= private static class Precedence\n{\n\npublic int inputSymbol; // refers to the precedence level of operator\npublic int topOfStack; // stores the operator in the form of integer\n\npublic Precedence( int inSymbol, int // PrecTable matches order of Token enumeration\nprivate static Precedence [ ] precTable = new Precedence[ ]\n{\n\nnew Precedence( 0, -1 ),// EOL\nnew Precedence( 0,0 ),// VALUE\nnew Precedence( 100private static class Token\n{\n\npublic Token( ) { this( EOL ); }\n\npublic Token( int t ) { this( t, 0 ); }\n\npublic Token( int t, double v ) {\n\n System. out. println(\"\" INSIDE Token.Token()\"\");\n private static class EvalTokenizer {\n\npublic EvalTokenizer( StringTokenizer is ) {\n System. out. println(\"\"INSIDE EvalTokenizer\"\");\n str = is;\n} /**\n * Find the next token, skipping blanks, and return it.\n * For VALUE token, place the processed value in currentValue.\n * Print error message if input is unrecognized.\n */\npublic Token getToken /**\n * Construct an evaluator object.\n * @param s the string containing the expression.\n */\npublic Evaluator( String s ) {\n\nopStack = new Stack( );\npostfixStack = new Stack( );\nstr = new StringTokeni // The only publicly visible routine\n/**\n * Public routine that performs the evaluation.\n * Examine thepostfix machine to see if a single result is\n * left and if so, return it; otherwise print error.\n * @return the result. private Stack opStack; // Operator stack for conversion\nprivate Stack postfixStack;// Stack for postfix machine that stores the numbers could be values or result\nprivate StringTokenizer str; // StringTokenizer stream, conte /**\n * Internal method that hides type-casting.\n * Changed the method to support double\n */\nprivate double postFixTopAndPop( ) {\n System. out. println(\"\"INSIDE postFixTopAndPop method\"\");\n System /**\n * Another internal method that hides type-casting.\n */\nprivate int opStackTop( ) {\nreturn ( (Integer) ( opStack. peek( ) ) ). intValue( );\n} /**\n * After a token is read, use operator precedence parsing\n * algorithm to process it; missing opening parentheses\n * are detected here.\n */\nprivate void processToken( Token lastToken ) {\n\nSystem. out. printl /*\n * topAndPop the postfix machine stack; return the result.\n * If the stack is empty, print an error message.\n */\nprivate double getTop( ) { // change to support double\n System. out. println(\"\"INSIDE GET TOP/**\n * Internal routine to compute x^ n.\n */\nprivate static double pow( double x, double n ) {\n System. out. println(\"\"INSIDE pow\"\");\n\nif( x == 0 ) {\n if( n == 0 ){\nSystem. out. /**\n * Process an operator by taking two items off the postfix\n * stack, applying the operator, and pushing the result.\n * Print error if missing closing parenthesis or division by 0.\n */\nprivate void binaryOp( int topOp/**\n * Simple main to exercise Evaluator class.\n */\npublic static void main( String [ ] args ) {\n\n\n\nString str;\nBufferedReader in = new BufferedReader( new InputStreamReader( System. in ) );\n\ntry {\n \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd28"},"name":"60.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"60\t\"Thread Pool /**\n* The threads in the pool.\n*/\nprotected Thread threads[] = null;\n/**\n* The backlog of assignments, which are waiting\n* for the thread pool.\n*/\nCollection assignments = new ArrayList(3);\n/**\n* A Done object that is /**\n * The constructor.\n *\n * @param sizeHow many threads in the thread pool.\n */\npublic ThreadPool( int size)\n{\n\nthreads = new WorkerThread[ size];\n\nfor ( int i=0; i< threads. length; i++)\n{\nthr /**\n* Add a task to the thread pool. Any class\n* which implements the Runnable interface\n* may be assigned. When this task runs, its\n* run method will be called.\n*\n* @param r An object that implements the Runnable interface\n*/\n pub /**\n* Get a new work assignment.\n*\n* @return A new assignment\n*/\n public synchronized Runnable getAssignment()\n {\ntry {\n while ( ! assignments. iterator(). hasNext() )\nwait();\n\n Runnable r = (Runnable) assignments./**\n* Called to block the current thread until\n* the thread pool has no more work.\n*/\n public void complete()\n {\ndone. waitBegin();\ndone. waitDone();\n } protected void finalize()\n {\ndone. reset();\nfor ( int i=0; i< threads. length; i++) {\n threads[ i]. interrupt();\n done. workerBegin();\n threads[ i]. destroy();\n}\ndone. waitDone();\n }\n}\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd29"},"name":"56.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcdd"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce6"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce8"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf2"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf3"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf9"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcfa"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd35"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3c"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd44"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd46"}]],"contents":"56\t\"Event Parser private Connection conn;\n private ResultSet rs;\n private Statement stmt; //EventParser Constructor\n // initializes the Database connection\n public EventParser()\n {\ntry\n{\n Class. forName(\"\" sun. jdbc. odbc.JdbcOdbcDriver\"\");\n this. conn = DriverManager. getConnection(\"\" jdbc: odbc: public void updateEvent(String str, String ID)\n {\n\nString mProject;\nString mEvent;\nString mType;\nString mNum;\nString mrequirement ;\nString mModule;\nString mSQL;\nString mDate;\nString mReqtext;\n//Check if a subscription exists\n public boolean CheckSubscription(String str)\n {\n\nStringTokenizer tokens = new StringTokenizer( str, \"\"|\"\");\nString Message type = tokens. nextToken();\nString SubscriberName = tokens. next //Insert a subscription into the \"\"Subscription\"\" table\n public void AddSubscription(String str, int ID)\n {\n\n// Parse the message string and get the fields\n\nStringTokenizer tokens = new StringTokenizer( str, \"\"|\"\");\nString Messag //DeleteSubscription from the \"\"Subscription\"\" table\n public void DeleteSubscription(String str, int ID)\n {\n// Parse the message string and get the fields\nStringTokenizer tokens = new StringTokenizer( str, \"\"|\"\");\nString Messag //Speculate method will receive a string from the Speculative GUI\n // tool and parse it using CallBack class to identify the\n // performance models\n public void speculate(String str)\n {\nSystem. out. println(\"\"Speculate\"\");\nCallBack public void impactReport(String str)\n {\nCallBack cb = new CallBack();\ncb. parseImpactReport( str);\n }// end impactReport()\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd2a"},"name":"95.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fceb"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcec"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fced"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcee"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcef"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf0"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3d"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3e"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3f"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd40"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd41"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd42"}]],"contents":"95\t\"Text Model private int CurrentEvent;\nprivate EBT ebt;\nprivate JLabel lblrequirement No, lblProject, lblModulePath;\nprivate JTextField txtrequirement No, txtProject, txtModulePath;\nprivate boolean HideMsg;\np public TextModel(EBT e)\n{\n // System. out. println(\"\"Trying to create text box\"\");\nebt = e;\nCurrentEvent = -1;\n// setForeground( new Color ( 255,255,255) );\n lblrequirement No = new JLabel(\"\"requirement public void showText(EBShape sh)\n{\n // Hide message in bottom box.\n HideMsg = true;\n repaint();\nlblProject. setVisible( true);\nlblrequirement No. setVisible( true);\nlblModulePath. set public void HideText()\n{\nlblProject. setVisible( false);\nlblrequirement No. setVisible( false);\nlblModulePath. setVisible( false);\ntxtProject. setVisible( false);\ntxtrequirement No. setVisi public void ShowInfo( int CE)\n{\nCurrentEvent = CE;\nHideMsg = false;\nHideText();\n repaint();\n} public void drawModel()\n{\nrepaint();\n} protected void paintComponent(Graphics g)\n{\n super. paintComponent( g);\n\nif (HideMsg == true)\n{\n g. drawString(\"\" \"\",20,25);\n g. drawString(\"\" \"\",20,40);\n g. drawString(\"\" \"\",20,55 \"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd2b"},"name":"83.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce7"}]],"contents":"83\t\"Variable String id = \"\"\"\"; // requirement id ex WB10\n String type= \"\"\"\"; // type of requirement ex Driver or Constraints\n String name= \"\"\"\"; // requirement name which is same as variable name in graph\n double value= 0.0; // value of variable\n double speculat //General Constructor to initialize all the members\n Variable(String id, String type, String name, double value, double speculateValue, String logic, String project_ path)\n {\nthis. id = id;\nthis. type = type;\nthis.//Constructor to Add driver related members\n Variable(String id, String type, String name, double value, double speculateValue)\n {\nthis. id = id;\nthis. type = type;\nthis. name = name;\nthis. value = value;\nthis //Constructor to Add constraints related members\n Variable(String id, String type, String name, double value, String logic){\nthis. id = id;\nthis. type = type;\nthis. name = name;\nthis. value = value;\nthis. logicpublic String toString()\n {\nString temp;\ntemp = \"\"ID = \"\" + id + \"\", Type = \"\" + type + \"\", Name = \"\" + name +\"\", value = \"\" + value +\n \"\", SpeculateValue = \"\" + speculateValue + \"\", Logic = \"\" + logic + \"\", Project_Path = \"\" + project_ path /**\n* Returns the id.\n* @return int\n*/\n public String getId()\n {\nreturn id;\n } /**\n* Returns the logic.\n* @return String\n*/\n public String getLogic()\n {\nreturn logic;\n } /**\n* Returns the name.\n* @return String\n*/\n public String getName()\n {\nreturn name;\n } /**\n* Returns the value.\n* @return double\n*/\n public double getValue() {\nreturn value;\n } /**\n* Sets the id.\n* @param id The id to set\n*/\n public void setId(String id) {\nthis. id = id;\n } /**\n* Sets the logic.\n* @param logic The logic to set\n*/\n public void setLogic(String logic) {\nthis. logic = logic;\n } /**\n* Sets the name.\n* @param name The name to set\n*/\n public void setName(String name) {\nthis. name = name;\n } /**\n* Sets the value.\n* @param value The value to set\n*/\n public void setValue( double value) {\nthis. value = value;\n } /**\n* Returns the speculateValue.\n* @return double\n*/\n public double getSpeculateValue() {\nreturn speculateValue;\n } /**\n* Sets the speculateValue.\n* @param speculateValue The speculateValue to set\n*/\n public void setSpeculateValue( double speculateValue) {\nthis. speculateValue = speculateValue;\n } /**\n* Returns the type.\n* @return String\n*/\n public String getType() {\nreturn type;\n } /**\n* Sets the type.\n* @param type The type to set\n*/\n public void setType(String type) {\nthis. type = type;\n } /**\n* Returns the project_ path.\n* @return String\n*/\n public String getProject_ path() {\nreturn project_ path;\n } /**\n* Sets the project_ path.\n* @param project_ path The project_ path to set\n*/\n public void setProject_ path(String project_ path) {\nthis. project_ path = project_ path;\n }\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd2c"},"name":"82.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"82\t\"Tokenizer /**\n * Constructor.\n * @param inStream the stream containing a program.\n */\npublic Tokenizer( Reader inStream )\n{\nerrors = 0;\nch = '\\0';\ncurrentLine = 1;\nin = new PushbackReader /**\n * Gets current line number.\n * @return current line number.\n */\npublic int getLineNumber( )\n{\nreturn currentLine;\n} /**\n * Gets error count.\n * @return error count.\n */\npublic int getErrorCount( )\n{\nreturn errors;\n} /**\n * Get the next opening or closing symbol.\n * Return false if end of file.\n * Skip past comments and character and string constants\n */\npublic char getNextOpenClose( )\n{\nwhile( nextChar( ) )\n{\n /**\n * Return true if ch can be part of a Java identifier\n */\nprivate static final boolean isIdChar( char ch )\n{\nreturn Character. isJavaIdentifierPart( ch );\n}/**\n * Return an identifier read from input stream\n * First character is already read into ch\n */\nprivate String getRemainingString( )\n{\nString result = \"\"\"\" + ch;\n\nfor( ; nextChar( ); result += ch )\n /**\n * Return next identifier, skipping comments\n * string constants, and character constants.\n * Place identifier in currentIdNode. word and return false\n * only if end of stream is reached.\n */\npublic String getNe /**\n * nextChar sets ch based on the next character in the input stream.\n * putBackChar puts the character back onto the stream.\n * It should only be used once after a nextChar.\n * Both routines adjust currentLine if necess private void putBackChar( )\n{\nif( ch == '\\ n' )\ncurrentLine--;\ntry\n{ in. unread( ( int) ch ); }\ncatch( IO Exception e ) { }\n} /**\n * Precondition: We are about to process a comment; have already seen\n * comment-start token\n * Post condition: Stream will be set immediately after\n * comment-ending token\n */\nprivate/**\n * Precondition: We are about to process a quote; have already seen\n * beginning quote.\n * Post condition: Stream will be set immediately after\n * matching quote\n */\nprivate void skip /**\n * After the opening slash is seen deal with next character.\n * If it is a comment starter, process it; otherwise put back\n * the next character if it is not a new line.\n */\nprivate void processSlash( )\n{\nifpublic static final int SLASH_SLASH = 0;\npublic static final int SLASH_STAR= 1;\n\nprivate PushbackReader in;// The input stream\nprivate char ch;// Current character\nprivate int currentLine;//\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd2d"},"name":"94.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fced"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3f"}]],"contents":"94\t\"Refine Modelpublic RefineModel(EBT em)\n{\nsuper( em);\n } // Construct Visual model for Merge Event\npublic void BuildEvent()\n{\n ClearVectors();\nAddEventRect(60,80,1);\nCurrentEvent = 3;\n} public StringBuffer GenerateEvent()\n{\nStringBuffer thisEvent = new StringBuffer();\nthisEvent. append(\"\"Refine|0|\"\");\nthisEvent. append( new Date(). toString()+\"\"|\"\");\nebs = (EBShape)EventShapes. el\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd2e"},"name":"57.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcdf"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce1"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce3"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf3"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fcf5"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd37"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3a"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd44"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd45"}]],"contents":"57\t\"Event Notifier // Variables to process the requirement\n private String requirement No;//Requirement No.\n private String ProjName; //Project name\n private String ModPath;//Modular path\n private String requirement Text;/ public EventNotifier(String rno, String proj, String mod, String rtext,String eID, String em, String eventType)\n {\nrequirement No = rno;//Requirement number\nProjName = proj;// project name\nModPath = mo // finds the subscribers for this requirement\n public void IdentifySubscribers()\n {\nString mSQL;\n// Create an SQL statement that will limit the selection as much as possible\n// If a subscription is to a specific requirement - check for requi //Reads the result from IdentifySubscribers method selection\n // and adds each result into ActualSubscribers Vector.\n void ProcessResultSet()\n {\n\nString sName, sReqno, sModule, sKey1, sKey2;\ntry\n{\n System. o // Send messages to all subscribers listed in ActualSubscriber Vector\n// Possible that a sort routine can be added later so that all notification to\n// the same subscribermanager can be batched.This is not implemented yet.\n\n public void Dispatch public String getErrorMessage()\n {\n return errMsg;\n\n } public boolean Contains(String ContextString, String SearchString)\n {\nint cLen = ContextString. length();\nint sLen = SearchString. length();\nif (SearchString. length() == 0)\n return false;\n\nfor ( int i = 0\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd2f"},"name":"61.java","system":"EBT","applied_transformations":[],"ground_truth":[],"contents":"61\t\"Worker Thread /**\n* True if this thread is currently processing.\n */\npublic boolean busy;\n/**\n * The thread pool that this object belongs to.\n */\npublic ThreadPool owner; /**\n * The constructor.\n *\n * @param o the thread pool\n */\nWorkerThread(ThreadPool o)\n{\nowner = o;\n} /**\n * Scan for and execute tasks.\n */\npublic void run()\n{\nRunnable target = null;\n\ndo\n{\ntarget = owner. getAssignment();\nif ( target!=null)\n{\n target. run();\n owner. done. worker\"\n"}
{"_id":{"$oid":"5ea8c55e2b8dd33caf44fd30"},"name":"77.java","system":"EBT","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce7"}],["requirement_raw",{"$oid":"5ea8c55e2b8dd33caf44fce8"}],["test_raw",{"$oid":"5ea8c55e2b8dd33caf44fd3c"}]],"contents":"77\t\"Model Driver String msg=\"\"\"\"; public ModelDriver(String text)\n {\nthis. msg = text;\ninit();\n } public void init()\n {\n\nSystem. out. println(\"\"MODEL DRIVER CLASS 1/10\"\");\nperformance modelHandler pmh = new performance modelHandler( msg);\nSystem. out. println(\"\"MODEL DRIVER CLASS 2/10\"\");\n pmh. messageParser\"\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d1e"},"name":"MascheraPerAddebitare.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d13"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class MascheraPerAddebitare extends Frame\n{\n\t// variabili per tenere tutto in memoria\n\tListaBeniServizi elenco_extra = new ListaBeniServizi();\n\tListaAddebiti elenco_addebiti = new ListaAddebiti();\n\tListaBeniServizi elenco_extra_addebitati = new ListaBeniServizi();\n\t\n\t// oggetti per la costruzione della finestra\n   \tLabel etich4, etich5, etich6, etich7;\n\tPanel panel1, panel2, panel3, panel4, panel5, panel6, panel7;\n   \tButton conferma, annulla, addebita, deaddebita, aggiungi;\n   \tTextField extra_add, totale;\n\tList addebiti, extra;\n\tGridBagLayout gridbag = new GridBagLayout();\n\t\n\t// attributi per la gestione della gerarchia delle finestre;\n\tFrame padre = new Frame();      \n\tAggiungiBeneServizio nuovo;\n\t\n\t// flag per capire se si tratta di un addebito o di un deaddebito\n\tboolean addebito;\n\n    // variabili per il travaso del database in memoria\n    int quantita_mod[] = new int[0]; // quantita aggiunge o tolte a vecchi addebiti\n\n\tpublic MascheraPerAddebitare(String titolo, String bottone_conf)\n\t{\n\t\tsuper(titolo);\n\t\tsetupPanels(bottone_conf);\n\t\tinit();\n\t\tpack();\n\t}\n\t\n\t// Creazione della finestra\n\tvoid setupPanels(String bottone_conf)\n\t{\n\t\tthis.setFont(ConfigurazioneSistema.font_base);\n\t\t// creo l'elenco degli addebiti alla stanza e degli extra\n\t\taddebiti = new List(10, false);\n\t\taddebiti.setFont(ConfigurazioneSistema.font_allineato);\n\t\textra = new List(10, false);\n\t\textra.setFont(ConfigurazioneSistema.font_allineato);\n  \n\t\t// creo i textfield\n\t\textra_add = new TextField(\"\", 40);\n\t\ttotale = new TextField(\"\", 20);\n\t\textra_add.setEditable(false);\n\t\ttotale.setEditable(false);\n\n\t\t// creo i pulsanti\n\t\taddebita = new Button(\"Addebita\");\n\t\tdeaddebita = new Button(\"Togli dall'addebito\");\n\t\taggiungi = new Button(\"Aggiungi nuovo bene/servizio\");\n\t\tannulla = new Button(\"Annulla\");\n\t\tconferma = new Button(bottone_conf);\n\t\t\n\t\t// creo le label\n\t\tetich4 = new Label(\"Informazioni sugli addebiti\");\n\t\tetich4.setFont(ConfigurazioneSistema.font_titolo);\n\t\tetich5 = new Label(\"Ultimo addebito effettuato\");\n\t\tetich6 = new Label(\"Lista degli addebiti\");\n\t\tetich7 = new Label(\"Totale dell'addebito\");\n\n\t\t// creo il primo pannello vuoto\n\t\tpanel1 = new Panel();\n\t\t\n\t\t// creo pannello di informazione degli addebiti\n\t\tpanel2 = new Panel();\n\t\tpanel2.setLayout(gridbag);\n\t\tUtils.constrain(panel2, etich4, 0, 0, 3, 1);\n\t\tUtils.constrain(panel2, etich5, 0, 2, 3, 1, 10, 0, 0, 0);\n\t\tUtils.constrain(panel2, extra_add, 0, 3, 1, 1, 0, 20, 0, 0);\n\t\tUtils.constrain(panel2, etich6, 0, 5, 3, 1, 10, 0, 0, 0);\n\t\tUtils.constrain(panel2, addebiti, 0, 6, 2, 4, GridBagConstraints.BOTH,\n\t\t\t\t\tGridBagConstraints.WEST, 1.0, 1.0, 0, 20, 0, 20);\n\t\tUtils.constrain(panel2, etich7, 0, 12, 3, 1, 10, 0, 0, 0);\n\t\tUtils.constrain(panel2, totale, 0, 13, 1, 1, 0, 20, 0, 0);\n\n\t\t// creo pannello per addebita\n\t\tpanel3 = new Panel();\n\t\tpanel3.setLayout(gridbag);\n\t\tUtils.constrain(panel3, addebita, 0, 0, 1, 1, GridBagConstraints.HORIZONTAL,\n\t\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 0, 0, 0, 5);\n\t\tUtils.constrain(panel3, deaddebita, 1, 0, 1, 1, GridBagConstraints.HORIZONTAL,\n\t\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 0, 5, 0, 0);\n\n\t\t// creo pannello vuoto per num_stanza o coperti\n\t\tpanel4 = new Panel();\n\t\t\n\t\t// creo pannello per aggiungi\n\t\tpanel5 = new Panel();\n\t\tpanel5.setLayout(gridbag);\n\t\tUtils.constrain(panel5, aggiungi, 0, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\n\t\t\n\t\t// creo pannello per annulla\n\t\tpanel6 = new Panel();\n\t\tpanel6.setLayout(gridbag);\n\t\tUtils.constrain(panel6, annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 0, 0, 0, 0);\n\t\n\t\t// creo pannello per conferma\t\n\t\tpanel7 = new Panel();\n\t\tpanel7.setLayout(gridbag);\n\t\tUtils.constrain(panel7, conferma, 0, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 0, 0, 0, 0);\n\n\t\t// costruisco la finestra definitiva attaccando i pannelli\n\t\tthis.setLayout(gridbag);\n\t\tUtils.constrain(this, panel1, 0, 0, 1, 1, GridBagConstraints.VERTICAL,\n\t\t\t\t\tGridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\n\t\tUtils.constrain(this, panel2, 1, 0, 1, 4, GridBagConstraints.VERTICAL,\n\t\t\t\t\tGridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\n\t\tUtils.constrain(this, panel3, 0, 1, 1, 1, GridBagConstraints.VERTICAL,\n\t\t\t\t\tGridBagConstraints.CENTER, 0.0, 0.0, 5, 0, 5, 0);\n\t\tUtils.constrain(this, panel4, 0, 2, 1, 1, GridBagConstraints.VERTICAL,\n\t\t\t\t\tGridBagConstraints.WEST, 0.5, 0.5, 5, 0, 5, 0);\n\t\tUtils.constrain(this, panel5, 0, 3, 1, 1, GridBagConstraints.VERTICAL,\n\t\t\t\t\tGridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(this, panel6, 0, 4, 1, 1, GridBagConstraints.BOTH,\n\t\t\t\t\tGridBagConstraints.CENTER, 0.0, 0.0, 5, 0, 5, 0);\n\t\tUtils.constrain(this, panel7, 1, 4, 2, 1, GridBagConstraints.BOTH,\n\t\t\t\t\tGridBagConstraints.CENTER, 0.0, 0.0, 5, 0, 5, 0);\n\t}\n\n\t// Per la gestione degli eventi della finestra\n\tvoid init()\n\t{\n\t\tannulla.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n\n        aggiungi.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n            \tstartAggiungi();\n            }\n        });\n\t}\n\n    void startAggiungi()\n    {\n\t\tnuovo = new AggiungiBeneServizio(this);\n    }\n}\n\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d1f"},"name":"AggiungiBeneServizio.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport moduli.*;\n\n\npublic class AggiungiBeneServizio extends InserisciBeniServizi\n{\n\tButton annulla1, annulla2, conferma1, conferma2;\n\tTextField tf_supp, tf_rid, tf_stanza_supp, tf_stanza_rid, tf_mot_supp, tf_mot_rid;\n\tLabel label_supp, label_rid, label_stanza_supp, label_stanza_rid, label_mot_supp, label_mot_rid;\n\t\n\tpublic AggiungiBeneServizio(Frame parent)\n\t{\n\t\tsuper(\"Creazione di un nuovo bene/servizio/riduzione/supplemento\");\n\t\tpadre = parent;\n\t\tpadre.setEnabled(false);\n\t\tsetupNuovi();\n\t\tinizializza();\n\t\tsetSize(450,600);\n\t\tsetVisible(true);\n\t}\n\n\tvoid setupNuovi()\n\t{\n\t\t//Creo i pannelli\n\t\tremove(panel[0]);\n\t\tpanel[0] = new Panel();\n\t\tpanel[0].setLayout(grid1);\n\t\tpanel[0].setVisible(false);\n\n\t\t//Creo il pannello in alto\n\t\tlabel = new Label(\"Tipi\");\n\t\tlabel.setFont(ConfigurazioneSistema.font_titolo);\n\t\ttipi = new CheckboxGroup();\n\t\tpanel[0].add(label);\n\t\tpanel[0].add(prima_scelta[0]);\n\t\tpanel[0].add(prima_scelta[1]);\n\t\tpanel[0].add(prima_scelta[2]);\n\t\tpanel[0].add(prima_scelta[3]);\n\t\tpanel[0].add(prima_scelta[4]);\n\t\tpanel[0].setVisible(true);\n\n\t\t//Attacco il pannello in alto al frame\n\t\tthis.setLayout(grid);\n\t\tthis.add(panel[0]);\n\n\t\t//Creo il pannello supplemento\n\t\tpanel[11].setLayout(gridbag);\n\t\tlabel_supp = new Label(\"Ammontare del supplemento \"+(Principale.config).getValuta()+\".\");\n\t\ttf_supp = new TextField(\"\", 10);\n\t\tlabel_stanza_supp = new Label(\"A carico della stanza numero\");\n\t\ttf_stanza_supp = new TextField(\"\", 6);\n\t\tif (padre instanceof MascheraContoRistorazione)\n\t\t\ttf_stanza_supp.setEnabled(false);\n\t\tlabel_mot_supp = new Label(\"Motivazione\");\n\t\ttf_mot_supp = new TextField(\"\", 35);\n\t\tannulla1 = new Button(\"Annulla\");\n\t\tconferma1 = new Button(\"Conferma\");\n\t\tUtils.constrain(panel[11], label_supp, 0, 0, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], tf_supp, 1, 0, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], label_stanza_supp, 0, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], tf_stanza_supp, 1, 1, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], label_mot_supp, 0, 2, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], tf_mot_supp, 1, 2, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], annulla1, 1, 3, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.EAST, 0.0, 0.0, 5, 0, 5, 10);\n\t\tUtils.constrain(panel[11], conferma1, 3, 3, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 5, 10, 5, 0);\n\n\t\t//Creo il pannello riduzione\n\t\tpanel[12].setLayout(gridbag);\n\t\tlabel_rid = new Label(\"Ammontare della riduzione \"+(Principale.config).getValuta()+\".\");\n\t\ttf_rid = new TextField(\"\",10);\n\t\tlabel_stanza_rid = new Label(\"A carico della stanza numero\");\n\t\ttf_stanza_rid = new TextField(\"\", 6);\n\t\tif (padre instanceof MascheraContoRistorazione)\n\t\t\ttf_stanza_rid.setEnabled(false);\n\t\tlabel_mot_rid = new Label(\"Motivazione\");\n\t\ttf_mot_rid = new TextField(\"\", 35);\n\t\tannulla2 = new Button(\"Annulla\");\n\t\tconferma2 = new Button(\"Conferma\");\n\t\tUtils.constrain(panel[12], label_rid, 0, 0, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], tf_rid, 1, 0, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], label_stanza_rid, 0, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], tf_stanza_rid, 1, 1, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], label_mot_rid, 0, 2, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], tf_mot_rid, 1, 2, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], annulla2, 1, 3, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.EAST, 0.0, 0.0, 5, 5, 5, 0);\n\t\tUtils.constrain(panel[12], conferma2, 2, 3, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 0);\n\t}\n              \n\tpublic void inizializza()\n\t{\n\t\tprima_scelta[3].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(prima_scelta[3].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneDE(11, BeneServizio.SUPPLEMENTI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tprima_scelta[4].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(prima_scelta[4].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneDE(12, BeneServizio.RIDUZIONI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tannulla1.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n\n\t\tannulla2.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n\n\t\tconferma1.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tscriviSuDB( tf_supp.getText(), tf_stanza_supp.getText(), tf_mot_supp.getText() );\n\t\t\t}           \n\t\t});\n\n\t\tconferma2.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tscriviSuDB( new String(\"-\"+tf_rid.getText()), tf_stanza_rid.getText(), tf_mot_rid.getText() );\n\t\t\t}\n\t\t});\n\t} // init\n\n\tvoid inComuneDE(int numero_pannello, char c)\n\t{\n\t\tlevel = 0;\n\t\tfor(int i=1;i<13;++i)\n\t\t{\n\t\t\tif(panel[i].isVisible())\n\t\t\t\tremove(panel[i]);\n\t\t}\n\t\tthis.add(panel[numero_pannello]);\n\t\tpanel[numero_pannello].setVisible(true);\n\t\tsetVisible(true);\n\t\tcodice = composeCode(level, c);\n\t}\n\t\n\tvoid scriviSuDB(String sup_rid, String stanza, String mot)\n\t{\n\t\tMessageDialog msg;\n\t\t\n\t\tcompleteCode();\n\t\tFloat px = Float.valueOf(sup_rid);\n\t\textra = new BeneServizio((new String(codice)) + tornaCodId((Principale.config).getIdBeneservizio()), \n\t\t\t\t\t\t\tmot, px.floatValue());\n\t\tif (padre instanceof MascheraAddebiti)\n\t\t{\n\t\t\tif ( ((Principale.db).readStanza(stanza) != null) && Utils.isFloatPos(sup_rid) && (mot.length() < 33) )\n\t\t\t{\n\t\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(stanza, false);\n\t\t\t\tif (L_sogg != null)\n\t\t\t\t{\n\t\t\t\t\tif (!L_sogg.isEmpty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint j;\n\t\t\t\t\t\tif ((j = (Principale.db).newIdBeneservizio()) == DataBase.OK)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t(Principale.config).updateIdBeneservizio();\n\t\t\t\t\t\t\tif ((j = (Principale.db).writeBeneServizio(extra)) == DataBase.OK)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAddebito da_addebitare = new Addebito(stanza, extra.getCodExtra(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1, px.floatValue());\n\t\t\t\t\t\t\t\tif ((j = (Principale.db).writeAddebito(da_addebitare)) == DataBase.OK)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdispose();\n\t\t\t\t\t\t\t\t\tif ( stanza.equals(((MascheraAddebiti) padre).stanza_prec) )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t(((MascheraAddebiti) padre).elenco_addebiti).addAddebito(da_addebitare);\n\t\t\t\t\t\t\t\t\t\t(((MascheraAddebiti) padre).elenco_extra_addebitati).addBeneServizio(extra);\n\t\t\t\n\t\t\t\t\t\t                /* travaso delle quantita modificate nel nuovo array per poi \n\t\t\t\t\t\t                   aggiungere il supplemento o riduzione appena inseriti */\n\t\t\t\t    \t\t            int nuove_quantita_mod[] = new int[((MascheraAddebiti) padre).elenco_addebiti.length()];\n\t\t    \t        \t\t    \n\t            \t\t\t\t\t    for (int i = 0; i < ((MascheraAddebiti) padre).quantita_mod.length; i++)\n\t\t\t\t\t\t                \tnuove_quantita_mod[i] = ((MascheraAddebiti) padre).quantita_mod[i];\n\t\t\t\t\t\t                nuove_quantita_mod[nuove_quantita_mod.length-1] = 0;\n\t\t\t\t\t\t                ((MascheraAddebiti) padre).quantita_mod = nuove_quantita_mod;\n\t\t    \t\t\t            \n\t\t\t\t\t\t\t\t\t\t((MascheraAddebiti) padre).continuaAggiornamento();\n\t\t\n\t\t\t\t\t\t\t\t\t\t/* se il numero di stanza era stato cambiato senza addebiti\n\t\t\t\t\t\t\t\t\t\t   allora rimetto il precedente numero di stanza nel textfield\n\t\t\t\t\t\t\t\t\t\t   della finestra Addebiti */\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( !(((MascheraAddebiti) padre).num_stanza.getText()).equals(((MascheraAddebiti) padre).stanza_prec) )\n\t\t\t\t\t\t\t\t\t\t((MascheraAddebiti) padre).num_stanza.setText( ((MascheraAddebiti) padre).stanza_prec );\n\t\t\t\t\t\t\t\t\tpadre.setEnabled(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tmsg = new MessageDialog(this, \"Errore nell'addebitare: \"+DataBase.strErrore(j));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmsg = new MessageDialog(this, \"Errore nell'aggiornamento: \"+DataBase.strErrore(j));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tmsg = new MessageDialog(this, \" La stanza inserita non e' occupata! \");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Errore nei parametri!\");\n\t\t}\n\t\telse\n\t\t{ // si tratta della maschera del conto ristorazione\n\t\t\tdispose();\n\t\t\tAddebito da_addebitare = new Addebito(\"RIST\", extra.getCodExtra(),\n\t\t\t\t\t\t\t\t\t\t\t\t  1, px.floatValue());\n\t\t\t(((MascheraContoRistorazione) padre).elenco_addebiti).addAddebito(da_addebitare);\n\t\t\t(((MascheraContoRistorazione) padre).elenco_extra_addebitati).addBeneServizio(extra);\n\n            /* travaso delle quantita modificate nel nuovo array per poi \n               aggiungere il supplemento o riduzione appena inseriti */\n\n\t\t\tint nuove_quantita_mod[] = new int[((MascheraContoRistorazione) padre).elenco_addebiti.length()];\n\t\t\tfor (int i = 0; i < ((MascheraContoRistorazione) padre).quantita_mod.length; i++)\n\t\t\t\tnuove_quantita_mod[i] = ((MascheraContoRistorazione) padre).quantita_mod[i];\n            nuove_quantita_mod[nuove_quantita_mod.length-1] = 1;\n            ((MascheraContoRistorazione) padre).quantita_mod = nuove_quantita_mod;\n            \n\t\t\t((MascheraContoRistorazione) padre).continuaAggiornamento();\n\t\t\tpadre.setEnabled(true);\n\t\t}\n\t}\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d20"},"name":"CancellaPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d18"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class CancellaPrenotazione extends MascheraPrenotazione\n{  \n\tPrenotazione p;\t   \n   \tRicercaPrenotazione parent;\n   \n   \tpublic CancellaPrenotazione(Prenotazione pren, Stanza room, RicercaPrenotazione papa)\n    {\n        super(room,\"\",\"\",\"Cancellazione della prenotazione\",\"Cancella\",3, pren.getPensionamento());\n        p = pren;\n        parent = papa;\n        init();\n    }\n        \n    public void init()\n    {\n    \twriteDatiPren(p);\n    \tfor(int i=0; i<11; i++)\n    \t\ttesto[i].setEditable(false);\n    \tmyCheckbox.setEnabled(false);\n    \tmyCheckbox1.setEnabled(false);\n    \tfor (int i=0; i<checkboxes.length; i++)\n    \t\tcheckboxes[i].setEnabled(false);\n    \ttesto[9].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(p.getDataPren())));\t    \n     \n    \n    \tAzione.addActionListener(new ActionListener()\n    \t{\n            public void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tstartCancella();\n            }       \n    \t});\n\n    } \n\n\tvoid startCancella()\n\t{\n\t\tFrame msg;\n\t\t(Principale.db).delPrenotazione(p.getIdPrenotazione());\t\n       \taggiornaDisp(p, Flag.DISPONIBILE);\n       \tUtils.restoreCommissioni(p.getNumStanza());\n       \tparent.creaLista(1);\n        dispose();\n        padre.setEnabled(true);\n\t} \n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d21"},"name":"AggiungiSoggiornante.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport moduli.*;\nimport common.utility.*;\nimport common.def.*;\nimport interfacce.*;\nimport java.util.Date;\n\npublic class AggiungiSoggiornante extends MascheraSoggiorno\n{\n   \tPrenotazione prenotazione;\n   \tint num_sogg;\n\tStanza stanza; \n  \t\n  \tpublic AggiungiSoggiornante(RicercaPrenotazione parent, Prenotazione p, Stanza s, int num)\n   \t{\n      \tsuper(\"Inserimento dati del soggiornante\",\"Aggiungi agli altri\", p.getPensionamento(), Flag.ADULTO);\n      \tpadre = parent;\n      \tstanza = s;\n      \tnum_sogg= num;\n      \tprenotazione = p;\n      \tinizializza();\n   \t}\n\n   public void inizializza()\n   {\n      testo1.setText(stanza.getNumStanza());\n      testo1.setEditable(false);\n      testo13.setText(DateUtils.giveStringOfDate(new Date()));\n      testo13.setEditable(false);\n      testo14.setText(DateUtils.giveStringOfDate(prenotazione.getFineSogg()));\n      testo14.setEditable(false);\n      \n      Conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartConferma();\n         }\n      });\n      \n    }\n\n\tvoid startConferma()\n\t{\n\t\tFrame msg;\n\t\t\n        if (!errori())\n        {\n\t\t\tSoggiornante sogg = readDatiSogg(prenotazione, num_sogg+1);\n\t\t\tsogg.setInizioSogg(new Date());\n\t\t\tsogg.setFineSogg(prenotazione.getFineSogg());\n\t\t\tsogg.setNumStanza(stanza.getNumStanza());\n\t\t\tint j;\n          \tif ( (j = (Principale.db).writeSoggiornante(sogg)) == DataBase.OK )\n          \t{     //\tModifico la prenotazione relativa\n\t\t\t\tif (stanza.getPostiLetto() > num_sogg)\n\t\t\t\t\tprenotazione.setNumPers(num_sogg+1);\n\t\t\t\telse\n\t\t\t\t\tif ( (stanza.getPostiLetto() == num_sogg) && (stanza.getDispLettoAgg() == Const.SI) )\n\t\t\t\t\t \tprenotazione.setRichLettoAgg(Const.SI);\n\t\t\t\t\t\t\t\n\t\t\t\t(Principale.db).changePrenotazione(prenotazione.getIdPrenotazione(), prenotazione.getNumStanza(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprenotazione.getNumPers(),prenotazione.getNome(),prenotazione.getCognome(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprenotazione.getNumTel(), prenotazione.getInizioSogg(), prenotazione.getFineSogg(), prenotazione.getDataPren(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprenotazione.getCaparra(), prenotazione.getRichLettoAgg(), prenotazione.getPensionamento(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprenotazione.getTramiteAgenzia(), prenotazione.getNomeAgenzia(), prenotazione.getRichParticolari());\t\n\t\t\t\tmsg = new AvvisoLocale(this, \" Nuovo soggiornante registrato! \");\n           \t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n       \t}\n\t}\n}\n\nclass AvvisoLocale extends Frame\n{\n   Button OK;\n   AggiungiSoggiornante padre;\n\n   public AvvisoLocale(AggiungiSoggiornante parent, String testo)\n   {\n      super(\"Avviso\");\n      padre = parent;\n      padre.setEnabled(false);\n\t  this.setFont(ConfigurazioneSistema.font_titolo);\n      Panel textPanel = new Panel();\n      Panel buttonPanel = new Panel();\n      textPanel.add(new Label(testo));\n      OK = new Button(\"OK\");\n      buttonPanel.add(OK);\n      add(\"North\",textPanel);\n      add(\"Center\",buttonPanel);\n      init();\n      pack();\n      //setSize(250,100);\n      setVisible(true);\n   }\n\n   public void init()\n   {\n      OK.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n         \tsetVisible(false);\n\t\t\tdispose();\n\t\t\tpadre.dispose();\n\t\t\tpadre.padre.setEnabled(true);\n         }\n      });\n   }\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d22"},"name":"MascheraDisponibilita.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d1b"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.ListaDisponibilita;\nimport moduli.Disponibilita;\nimport moduli.ListaCommissionamenti;\nimport moduli.Commissionamento;\n\n\npublic class MascheraDisponibilita extends Frame\n{\n   Button Indietro, Visualizza;\n   TextField testo;\n   Label etichetta1, etichetta2, etichetta3, label3, label5, label1;\n   Panel panel[];\n   CheckboxGroup checkbox_group;\n   Checkbox[] checkboxes;\n   GridBagLayout gridbag = new GridBagLayout();\n   List lista_disp;\n   Frame padre;\n   Costanti cost;\n   int anno_corr, anno_prox;\n   String agenzia;\n   \n   ListaDisponibilita L;\n\n   public MascheraDisponibilita(Frame parent, String nome_ag)\n   {\n      super(\"Disponibilita delle stanze\");\n      padre = parent;\n      agenzia = new String(nome_ag);\n      padre.setEnabled(false);\n      setupPanels();\n      pack();\n      init();\n      this.setVisible(true);\n   }\n\n   void setupPanels()\n   {\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      //Creo i pulsanti\n      Indietro = new Button(\" Indietro \");\n      //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n      Visualizza = new Button(\"Visualizza disponibilita\");\n      Visualizza.setEnabled(false);\n      //Conferma.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n\n      //Creo le etichette\n      etichetta1 = new Label(\"Selezionare il tipo di ricerca che si desidera effettuare:\");\n      etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta2 = new Label(\"Risultato della ricerca:\");\n      etichetta2.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta3 = new Label(\"Ricerca per stanza:\");\n      etichetta3.setFont(ConfigurazioneSistema.font_titolo);\n      label1 = new Label(\"Stanza numero\");\n\n      //Creo un Checkbox ad esclusione\n      checkbox_group = new CheckboxGroup();\n      checkboxes = new Checkbox[2];\n      checkboxes[0] = new Checkbox(\" Ricerca per stanza\",checkbox_group,false);\n      checkboxes[1] = new Checkbox(\" Ricerca su tutte le stanze\",checkbox_group,false);\n\n\n      //Creo il TextField e lo rendo non editabili\n      testo = new TextField(\"\", 4);\n      testo.setEditable(false);\n\n      //creo una Lista\n      lista_disp = new List(10, false);\n\n      panel=new Panel[5];\n      for(int i=0;i<panel.length;++i)\n      {\n         panel[i]=new Panel();\n         panel[i].setLayout(gridbag);\n      }\n      \n      //Creo il pannello in alto a sinistra\n      Utils.constrain(panel[1], etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0); \n      Utils.constrain(panel[1], checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0); \n      Utils.constrain(panel[1], checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n            \n      //Creo il pannello ricerca per stanza\n      Utils.constrain(panel[2], etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[2], label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[2], testo, 1, 1, 1, 1, GridBagConstraints.NONE,\n                      GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\n      //Creo il pannello dei pulsanti\n      Utils.constrain(panel[0], Indietro, 1, 0, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.EAST, 0.3, 0.0, 10, 0, 10, 5);\n      Utils.constrain(panel[0], Visualizza, 3, 0, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.WEST, 0.3, 0.0, 10, 5, 10, 0);\n\n      //Creo il pannello contenente la list_soggiornanti \n      Utils.constrain(panel[4], etichetta2, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[4], lista_disp, 0, 1, 1, 1, GridBagConstraints.BOTH,\n                         GridBagConstraints.NORTHWEST, 1.0, 1.0, 0, 5, 0, 20);\n\n      //Attacco i pannelli al frame\n      this.setLayout(gridbag);\n      Utils.constrain(this, panel[1], 0, 0, 5, 4, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[2], 0, 4, 5, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[0], 0, 6, 5, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.SOUTHEAST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[4], 0, 7, 5, 7, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n   }\n\n   public void init()\n   {\n      cost = new Costanti();\n      anno_corr = cost.getAnnoCorr();\n      anno_prox = cost.getAnnoProx();\n      \n      checkboxes[0].addItemListener(new ItemListener()   \n      {\n         public void itemStateChanged(ItemEvent e)\n         {\n                testo.setEditable(true);\n\t\t\t\tVisualizza.setEnabled(true);\n\t\t\t\tif (lista_disp.getItemCount() > 0)\n\t\t\t\t\tlista_disp.removeAll();\n         }\n      });\n                      \n      checkboxes[1].addItemListener(new ItemListener()   \n      {\n         public void itemStateChanged(ItemEvent e)\n         {\n                testo.setEditable(false);\n\t\t\t\ttesto.setText(\"\");\n\t\t\t\tVisualizza.setEnabled(true);\n\t\t\t\tif (lista_disp.getItemCount() > 0)\n\t\t\t\t\tlista_disp.removeAll();\n         }\n      });\n\n      Visualizza.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tDisponibilita disp = new Disponibilita();\n\t\t\tString str = new String(\"\");\n\t\t\t//Tramuto temporaneamente tutti i commissionamenti di una certa agenzia \n\t\t\t//in disponibilita\n\t\t\n\t\t\tListaDisponibilita L_disp = (Principale.db).elencoDisponibilita();\n\t\t\tif (!agenzia.equals(\"\"))\n\t\t\t{\n\t\t\t\tListaCommissionamenti L_comm = (Principale.db).foundCommissionamenti(agenzia);\t\t\n\t\t\t\tCommissionamento comm;\n\t\t\t\tfor (int i = 1; i <= L_comm.length(); i++)\n\t\t\t\t{\n\t\t\t\t\tcomm = L_comm.getCommissionamento(i);\n\t\t\t\t\tdisp = Utils.getDispOfRoom(L_disp,comm.getNumStanza(),true);\t\t\n\t\t\t\t\tdisp.setDisponibilita(comm.getInizioComm(),comm.getFineComm(),Flag.DISPONIBILE, Flag.COMMISSIONATA);\n\t\t\t\t\tL_disp.addDisponibilita(disp);\n\t\t\t\t}\n\t\t\t\tstr = new String(\"  ---  commissioni \"+agenzia);\n\t\t\t}\n\t\t\tif (L_disp.length() > 0)\n\t\t\t\tlista_disp.addItem(\"TABELLA DELLE DISPONIBILITA'\"+str);\n\t\t\tif (checkboxes[0].getState())\n\t\t\t\tshowDispOfRoom(L_disp,testo.getText());\n\t\t\telse\n\t\t\t\tshowDispOfHotel(L_disp);\t\n         }\n       });\n\n      Indietro.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            padre.setEnabled(true);\n          }\n       });\n   }\n   \n\tvoid showDispOfRoom(ListaDisponibilita L, String room)\n\t{\n\t\tFrame msg;\n\t\tDisponibilita disp;\n\t\tString aus;\n\t\t\n\t\tif (room.equals(\"\"))\n\t\t\t\tmsg = new MessageDialog(this,\"Inserire il numero della stanza per la ricerca delle sue dispoibilita\");\n\t\telse\n\t\t{\t\n\t\t\tdisp = Utils.getDispOfRoom(L, room, false);\n\t\t\tif (disp == null)\n\t\t\t{\t\n\t\t\t\tmsg = new MessageDialog(this,\"La stanza inserita e' inesistente!\");\n\t\t\t\tif (lista_disp.getItemCount() > 0)\n\t\t\t\t\tlista_disp.removeAll();\n\t\t\t}\t\n\t\t\telse\n\t\t\t{\n\t\t\t\tlista_disp.addItem(\"\");\n\t\t\t\tlista_disp.addItem(\"Disponibilita' stanza n. \"+room+\" per l'anno \"+anno_corr);\n\t\t\t\taus = new String(Utils.scanVectorForDisp(disp.getDispAnnoCorr(), anno_corr, (Principale.config).getStagAnnoCorr()));\n\t\t\t\tif (aus.equals(\"\"))\n\t\t\t\t\tlista_disp.addItem(\"NESSUNA DISPONIBILITA'\");\n\t\t\t\telse\n\t\t\t\t\tlista_disp.addItem(aus);\n\t\t\t\tlista_disp.addItem(\"\");\n\t\t\t\tlista_disp.addItem(\"Disponibilita' stanza n. \"+room+\" per l'anno \"+anno_prox);\n\t\t\t\taus = new String(Utils.scanVectorForDisp(disp.getDispAnnoProx(), anno_prox, (Principale.config).getStagAnnoProx()));\n\t\t\t\tif (aus.equals(\"\"))\n\t\t\t\t\tlista_disp.addItem(\"NESSUNA DISPONIBILITA'\");\n\t\t\t\telse\n\t\t\t\t\tlista_disp.addItem(aus);\n\t\t\t}\t\t\t\t\n\t\t}\t\n\t}\n\t\n\tvoid showDispOfHotel(ListaDisponibilita L)\n\t{\n\t\tFrame msg;\n\t\tif (L.length() == 0)\n\t\t\tmsg = new AvvisoDialog(this,\"Nessuna stanza trovata!\");\n\t\telse\n\t\t\tfor (int i = 1; i <= L.length(); i++)\n\t\t\t\tshowDispOfRoom(L, (L.getDisponibilita(i)).getNumStanza());\n\t}   \n}\n\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d23"},"name":"MascheraPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class MascheraPrenotazione extends Frame\n{  \n    //Dichiarazioni di variabili\n    Panel panel1, panel2, panel3;\n    Label  etichetta1, label1, label2, label3, label4, label5, label6, label7, \n    \tlabel8, label9, label10, label11, label12, label13;\n    List lista;\n    public Button  Annulla, Azione, Assegna, Cancella;\n    TextField  testo[];\n    Choice mychoice;\n    Checkbox[] checkboxes;\n    Checkbox myCheckbox, myCheckbox1;\n    CheckboxGroup pensione;\n    GridBagLayout gridbag = new GridBagLayout();\n\tFrame padre = new Frame();\n  \tListaPrenotazioni L;  \n    Stanza stanza;\n    int caller;\n      \n    \n    public MascheraPrenotazione(Stanza s, String data_i, String data_f, String title, String caption, int c, char pens)\n    {\n        super(title);\n        caller = c;\n        stanza = s;\n        setupPanels(data_i, data_f, caption, pens);\n        inizializza();\n        pack(); \n    }\n                     \n        void setupPanels(String data_i, String data_f, String caption, char pens)\n        {  \n\t\t\tthis.setFont(ConfigurazioneSistema.font_base);\n            \n            //Creo dei pulsanti e ne disabilito due  \n            Annulla = new Button(\" Fine \");\n            Azione = new Button(caption);\n            Assegna = new Button(\" Assegna Stanza \");\n            Cancella = new Button(\" Cancella prenotazione \");\n\n            //Creo le etichette\n            etichetta1 = new Label (\"Inserimento dei dati della prenotazione:\");\n            etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n            label1 = new Label(\"Numero stanza\");\n            label2 = new Label(\"Cognome\");\n            label3 = new Label(\"Nome\");\n            label4 = new Label(\"Numero telefonico\");\n            label5 = new Label(\"Numero persone\");\n            label6 = new Label(\"Data inizio\");\n            label7 = new Label(\"Data fine\");\n            label8 = new Label(\"Caparra versata \"+(Principale.config).getValuta()+\".\");\n            label9 = new Label(\"Richieste particolari\");\n            label11 = new Label(\"Nome Agenzia\");\n            label10 = new Label(\"Tipo di pensionamento:\");\n            label10.setFont(ConfigurazioneSistema.font_titolo);\n\t\t\tlabel12 = new Label(\"Risultato della ricerca\");\n\t\t\tlabel12.setFont(ConfigurazioneSistema.font_titolo);\n\t\t\tlabel13 = new Label(\"Data di prenotazione\");\n            \n            //Creo i TextField e ne rendo  alcuni non editabili\n            testo=new TextField[11];\n            testo[0] = new TextField(\"\", 4);\n            testo[1] = new TextField(\"\", 20);\n            testo[2] = new TextField(\"\", 20);\n            testo[3] = new TextField(\"\", 10);\n            testo[4] = new TextField(\"\", 12);\n            testo[5] = new TextField(\"\", 12);\n            testo[6] = new TextField(\"\", 10);\n            testo[7] = new TextField(\"\", 20);\n            testo[8] = new TextField(\"\", 20);\n            testo[8].setEditable(false);\n            testo[9] = new TextField(\"\", 12);\n            testo[9].setEditable(false);\n            testo[10] = new TextField(\"\",3); \n\t\t\t\n            //Creo un Checkbox ad esclusione \n            pensione = new CheckboxGroup();\n            checkboxes = new Checkbox[4];\n            checkboxes[0] = new Checkbox(\" Solo pernottamento\", pensione, false);\n            checkboxes[1] = new Checkbox(\" Prima colazione\", pensione, false);\n            checkboxes[2] = new Checkbox(\" Mezza pensione\", pensione, false);\n            checkboxes[3] = new Checkbox(\" Pensione completa\", pensione, false);\n\t\t    switch (pens)\n\t\t    {\n\t\t  \t\tcase Flag.SOLO_PERNOTTAMENTO: \n\t\t  \t\t\tcheckboxes[0] = new Checkbox(\" Solo pernottamento\", pensione, true);\n\t\t  \t\t\tbreak;\n\t\t\t  \tcase Flag.SOLO_COLAZIONE: \n\t\t\t\t\tcheckboxes[1] = new Checkbox(\" Prima colazione\", pensione, true);\n\t  \t\t\t\tbreak;\n\t\t  \t\tcase Flag.MEZZA_PENSIONE:\n\t\t\t\t\tcheckboxes[2] = new Checkbox(\" Mezza pensione\", pensione, true);\n\t\t\t \t\tbreak;\n\t\t  \t\tcase Flag.PENSIONE_COMPLETA: \n\t\t\t\t\tcheckboxes[3] = new Checkbox(\" Pensione completa\", pensione, true);\n\t\t  \t\t\tbreak;\n\t\t    }\n            \n\n            //Creo due Checkbox a se' stanti \n            myCheckbox = new Checkbox(\" Letto aggiuntivo\", null, false);\n\t\t\tif (stanza != null)\n\t            if (stanza.getDispLettoAgg() == Const.NO)\n    \t        \tmyCheckbox.setEnabled(false);\n            \n            myCheckbox1 = new Checkbox(\" Prenotazione tramite agenzia\", null, false);\n\t\t\tmyCheckbox1.setEnabled(false);\n\n            //Creo un Choice \n            if (caller == 1)\n            {\n            \tmychoice = new Choice();\n\t\t\t\tif (stanza != null)\n\t            \tfor (int i=1; i<= stanza.getPostiLetto(); i++)\n    \t\t        \tmychoice.addItem(\"\"+i);\n    \t\t\telse\n    \t\t\t\tmychoice.addItem(\"1\");\t        \n            }\n            //Creo il pannello in alto per inserimento dei dati del cliente\n            panel1 = new Panel();\n            panel1.setLayout(gridbag);\n            Utils.constrain(panel1, etichetta1, 0, 0, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel1, label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[0], 1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.5, 5, 5, 5, 5);\n            Utils.constrain(panel1, label13, 2, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[9], 3, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.5, 5, 5, 5, 5);\n            Utils.constrain(panel1, label2, 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[1], 1, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.5, 5, 5, 5, 5);\n            Utils.constrain(panel1, label3, 2, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[2], 3, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label4, 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[3], 1, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label5, 2, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            if (caller == 1)\n            \tUtils.constrain(panel1, mychoice, 3, 3, 1, 1, GridBagConstraints.NONE,\n                        \tGridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            else\n            \tUtils.constrain(panel1, testo[10], 3, 3, 1, 1, GridBagConstraints.NONE,\n                        \tGridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label6, 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[4], 1, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label7, 2, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[5], 3, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label8, 0, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[6], 1, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label9, 0, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[7], 1, 6, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, myCheckbox, 0, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, myCheckbox1, 1, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label11, 2, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, testo[8], 3, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label10, 0, 8, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, checkboxes[0], 0, 9, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, checkboxes[1], 0, 10, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, checkboxes[2], 0, 11, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, checkboxes[3], 0, 12, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n           \n            //Creo il pannello in basso con due pulsanti                  \n            panel2 = new Panel();\n            panel2.setLayout(gridbag);\n            Utils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel2, Azione, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);             \n            if (caller == 2 )\n            \tUtils.constrain(panel2, Assegna, 2, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);             \n            if (caller == 5 )\n            \tUtils.constrain(panel2, Cancella, 2, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);             \n            \n            \t\n            //Creo il pannello con la lista dei risultati della ricerca\n            lista = new List(7,false);\n            lista.setFont(ConfigurazioneSistema.font_allineato);\n            \n            panel3 = new Panel();\n            panel3.setLayout(gridbag);\n            Utils.constrain(panel3, label12, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel3, lista, 0, 1, 4, 3, GridBagConstraints.BOTH,\n                        GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);             \n            \n            \n            //Attacco i pannelli al frame\n            this.setLayout(gridbag);\n            Utils.constrain(this, panel1, 0, 1, 4, 13, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(this, panel2, 0, 14, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tUtils.constrain(this, panel3, 0, 15, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tpanel3.setVisible(false);\n        \tpack();\n        \n        }\n\n\tpublic void inizializza()\n    {\n        Annulla.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                dispose();\n                padre.setEnabled(true);   \n            }       \n        });\n    }\n\n\tpublic Prenotazione readDatiPren()\n\t{\n\t\tPrenotazione pren = new Prenotazione();\n\t\tpren.setNumStanza(testo[0].getText());\n\t\tpren.setCognome(testo[1].getText());\n\t\tpren.setNome(testo[2].getText());\n\t\tpren.setNumTel(testo[3].getText());\n\t\tif (caller == 1)\n\t\t\tpren.setNumPers(Integer.parseInt(mychoice.getSelectedItem())); //Conversione String -> Int\n\t\telse\n\t\t\tpren.setNumPers(Integer.parseInt(testo[10].getText()));\n\t\tpren.setInizioSogg(DateUtils.convertDate(testo[4].getText()));\n\t\tpren.setFineSogg(DateUtils.convertDate(testo[5].getText()));\n\t\t\n\t\tif  ( (testo[6].getText().equals(\"\")) )\n\t\t\tpren.setCaparra(0);\n\t\telse\n\t\t\tpren.setCaparra((Float.valueOf(testo[6].getText())).floatValue());  // Conversione String -> Float\n\t\tpren.setRichParticolari(testo[7].getText());\n\t\tif (myCheckbox.getState() == true)\n\t\t\tpren.setRichLettoAgg(Const.SI);\n\t\tif (myCheckbox1.getState() == true)\n\t\t{\n\t\t\tpren.setTramiteAgenzia(Const.SI);\n\t\t\tpren.setNomeAgenzia(testo[8].getText());\n\t\t}\t\n\t\t\n\t\tif (checkboxes[0].getState() == true)\n\t\t\tpren.setPensionamento(Flag.SOLO_PERNOTTAMENTO);\n\t\telse\t\n\t\t\tif (checkboxes[1].getState() == true)\n\t\t\t\tpren.setPensionamento(Flag.SOLO_COLAZIONE);\n\t\t\telse\n\t\t\t\tif (checkboxes[2].getState() == true)\n\t\t\t\t\tpren.setPensionamento(Flag.MEZZA_PENSIONE);\n\t\t\t\telse\n\t\t\t\t\tpren.setPensionamento(Flag.PENSIONE_COMPLETA);\t\t \t\t \n\t\t \n\t\tpren.setIdPrenotazione(Principale.config.getIdPrenotazione());\n\t\treturn pren;\n\t}\n\t\n\tpublic void writeDatiPren(Prenotazione pren)\n\t{\n\t\tmyCheckbox.setState(false);\n\t\tmyCheckbox1.setState(false);\n\t\ttesto[8].setText(\"\");\n\t\ttesto[0].setText(pren.getNumStanza());\n\t\ttesto[1].setText(pren.getCognome());\n\t\ttesto[2].setText(pren.getNome());\n\t\ttesto[3].setText(pren.getNumTel());\n\t\t\n\t\ttesto[4].setText(DateUtils.giveStringOfDate(pren.getInizioSogg()));\n\t\ttesto[5].setText(DateUtils.giveStringOfDate(pren.getFineSogg()));\n\t\t\n\t\ttesto[6].setText(\"\"+pren.getCaparra());\n\t\ttesto[7].setText(pren.getRichParticolari());\n\t\ttesto[8].setText(pren.getNomeAgenzia());\n\t\ttesto[9].setText(DateUtils.giveStringOfDate(pren.getDataPren()));\n\t\tif (caller != 1)\n\t\t{\n\t\t\ttesto[10].setText(\"\"+pren.getNumPers());\n\t\t}\n\t\tif (pren.getTramiteAgenzia() == Const.SI)\n\t\t{\t\n\t\t\tmyCheckbox1.setState(true);\n\t\t\ttesto[8].setText(pren.getNomeAgenzia());\n\t\t}\n\t}\n\t\n\tprotected boolean errori()\n\t{\n\t\tboolean numeri_corretti;\n\t\tFrame msg;\n\t\tif (caller != 1)\n\t\t{\n\t\t\tif (Utils.isIntPos(testo[10].getText()))\n\t\t\t{\n\t\t\t\tint num = Integer.parseInt(testo[10].getText());\n\t\t\t\tif ( (num > stanza.getPostiLetto()) || (num <= 0) )\n\t\t\t\t{\t\n\t\t\t\t\tmsg = new MessageDialog(this,\" La stanza non puo' contenere \"+num+\" persone! \"); \n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this,\" Inserire correttamente il numero di persone \"); \n\t\t\t\treturn true; \n\t\t\t}\t\t\t\n\t\t}\t\n\t\tif (!((testo[0].getText()).length() <= 4))\n\t\t{\n\t\t\tmsg = new MessageDialog(this,\" Il numero di stanza deve avere al piu' 4 caratteri! \"); \n\t\t\treturn true;\n\t\t}\n\t\tif (!((testo[1].getText()).length() <= 20))\n\t\t{\n\t\t\tmsg = new MessageDialog(this,\" Il cognome deve avere al piu' 20 caratteri! \"); \n\t\t\treturn true;\n\t\t}\n\t\tif (!((testo[2].getText()).length() <= 20))\n\t\t{\n\t\t\tmsg = new MessageDialog(this,\" Il nome deve avere al piu' 20 caratteri! \"); \n\t\t\treturn true;\n\t\t}\n\t\tif (!((testo[3].getText()).length() <= 16))\n\t\t{\n\t\t\tmsg = new MessageDialog(this,\" Il numero di telefono deve avere al piu' 16 caratteri! \"); \n\t\t\treturn true;\n\t\t}\n\t\tif ((testo[1].getText()).equals(\"\")) \n\t\t{\n\t\t\tmsg = new MessageDialog(this,\" Manca il cognome! \"); \n\t\t\treturn true;\n\t\t}\n\t\tif ((testo[2].getText()).equals(\"\")) \n\t\t{\n\t\t\tmsg = new MessageDialog(this,\" Manca il nome! \"); \n\t\t\treturn true;\n\t\t}\n\t\tif ((testo[3].getText()).equals(\"\"))\n\t\t{\n\t\t\tmsg = new MessageDialog(this,\" Manca il numero di telefono! \"); \n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic void cleanFields()\n\t{\n\t\ttesto[0].setText(\"\");\n        testo[1].setText(\"\");\n        testo[2].setText(\"\");\n        testo[3].setText(\"\");\n        testo[4].setText(\"\");\n        testo[5].setText(\"\");\n        testo[6].setText(\"\");\n        testo[7].setText(\"\");\n        testo[8].setText(\"\");\t\n\t}\t\n\t\n\tvoid creaLista()\n\t{\n\t\tFrame msg;\n\t\tPrenotazione p;\t\t\n\t\t\n\t\tL = (Principale.db).foundPrenotazioni(testo[1].getText(),testo[2].getText());\n\t\tif (L != null)\n\t\t{\n\t\t\tif (!L.isEmpty())\n\t\t\t{\n\t\t\t\tif (lista.getItemCount() > 0)\n\t\t\t\t\tlista.removeAll();\n\t\t\t\tpanel3.setVisible(true);\n\t\t\t\tpack();\n\t\t\t\tfor(int i = 1; i<=L.length(); i++)\n\t\t\t\t\tlista.addItem(L.getPrenotazione(i).toString());\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new AvvisoDialog(this, \"Prenotazione non trovata!\");\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Problemi con il DataBase\");\n\t}\t\t\t\n\t\t\t\n\n\tvoid aggiornaDisp(Prenotazione pren, char tipo)\n\t{\n\t\tDisponibilita disp_da_cambiare = new Disponibilita();\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\tif (elenco_disp == null)\n\t\t{\n\t\t\tFrame msg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tdisp_da_cambiare = Utils.getDispOfRoom(elenco_disp, pren.getNumStanza(),true);\n\t\tif (tipo == Flag.DISPONIBILE) //cancellazione della prenotazione\n\t\t{\t\n\t\t\tdisp_da_cambiare.setDisponibilita(pren.getInizioSogg(), pren.getFineSogg(), tipo, Flag.ASSEGNATA);\n\t\t\tdisp_da_cambiare.setDisponibilita(pren.getInizioSogg(), pren.getFineSogg(), tipo, Flag.BLOCCATA);\n\t\t}\n\t\telse\n\t\t\t{\n\t\t\t\tdisp_da_cambiare.setDisponibilita(pren.getInizioSogg(), pren.getFineSogg(), tipo, Flag.DISPONIBILE);\n\t\t\t\tdisp_da_cambiare.setDisponibilita(pren.getInizioSogg(), pren.getFineSogg(), tipo, Flag.COMMISSIONATA);\n\t\t\t}\t\t\t\n\t\t(Principale.db).changeDisponibilita( disp_da_cambiare.getNumStanza(), \n\t\t\t\t\t\t\t\t\t\t\tdisp_da_cambiare.getDispAnnoCorr(),\n\t\t\t\t\t\t\t\t\t\t\tdisp_da_cambiare.getDispAnnoProx() );\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d24"},"name":"DefinizioneStagionalita.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport moduli.*;\nimport common.def.*;\nimport common.utility.Utils;\nimport java.util.Date;\n\npublic class DefinizioneStagionalita extends Frame\n{\n \t//Dichiaro gli oggetti che mi serviranno per costruire la finestra\n   \tPanel panel1, panel2, panel3, panel4, panel5;\n   \tLabel etichetta1, etichetta2, etichetta3, etichetta, etichetta4;\n   \tButton  Annulla, Conferma, Aggiungi;\n   \tTextField data_inizio, data_fine;\n   \tList list;\n   \tGridBagLayout gridbag = new GridBagLayout();\n\tCheckboxGroup checkbox_group;\n   \tCheckbox[] checkboxes; \n\n\t// variabili locali di supporto\n   \tchar conf_stag_corr[], conf_stag_prox[];\n   \tConfigurazione config_locale;\n   \tint anno_corr, anno_prox;\n\n\t// segue la finestra madre di questa\n  \tFrame config; \t\n\n    public DefinizioneStagionalita(Frame parent)\n    {\n        super(\"Definisione delle stagionalita'\");\n        config = parent;\n        config.setEnabled(false);\n        setupPanels();\n\t\tinitVectors();\n        init();\n        pack();\n        setVisible(true);\n    }\n                     \n\tvoid setupPanels()\n\t{\n\t\tthis.setFont(ConfigurazioneSistema.font_base);\n\t\t//Creo i TextField\n\t\tdata_inizio = new TextField(\"\", 12);\n\t\tdata_fine = new TextField(\"\", 12);\n\n\t\t//Creo i pulsanti e ne disabilito due\n\t\tAnnulla = new Button(\"Annulla\");\n\t\tConferma = new Button(\"Conferma\");\n\t\tAggiungi = new Button(\"Aggiungi\");\n\t\tAggiungi.setEnabled(false);\n\t\t\t\n\t\t//Creo le etichette\n\t\tetichetta= new Label(\"Periodo di soggiorno\");\n\t\tetichetta.setFont(ConfigurazioneSistema.font_titolo);\n\t\tetichetta1 = new Label(\"Data inizio:\");\n\t\tetichetta2 = new Label(\"    Data fine:\");\n\t\tetichetta3 = new Label (\"Prospetto della distriduzione delle staginalita':\");\n\t\tetichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\n\t\tLabel space = new Label(\"               \");\n\n\t\t//Creo la lista\n\t\tlist = new List(15,false);\n           \n\t\t//Creo il pannello in alto      \n\t\tpanel1 = new Panel();\n\t\tpanel1.setLayout(gridbag);\n\t\tUtils.constrain(panel1, etichetta, 0, 0, 4, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n\t\tUtils.constrain(panel1, etichetta1, 0, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel1, data_inizio, 1, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST,1.0,0.0,0,0,0,0);\n\t\t//Utils.constrain(panel1, space, 2, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\t//GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);            \n\t\tUtils.constrain(panel1, etichetta2, 3, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel1,data_fine, 4, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel1, space, 5, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);                         \n\n\t\t//Creo un pannello con due pulsanti\n\t\tpanel2 = new Panel();\n\t\tpanel2.setLayout(gridbag);\n\t\tUtils.constrain(panel2, Aggiungi, 0, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.CENTER, 0.3, 0.0, 0, 0, 0, 10);\n\n\t\t//Creo un Checkbox ad esclusione\n\t\tcheckbox_group = new CheckboxGroup();\n\t\tcheckboxes = new Checkbox[5];\n\t\tcheckboxes[0] = new Checkbox(\" Alta stagione\",checkbox_group,false);\n\t\tcheckboxes[1] = new Checkbox(\" Media stagione\",checkbox_group,false);\n\t\tcheckboxes[2] = new Checkbox(\" Bassa stagione\",checkbox_group,false);\n\t\tcheckboxes[3] = new Checkbox(\" Bassissima stagione\",checkbox_group,false);\n\t\tcheckboxes[4] = new Checkbox(\" Chiusura\",checkbox_group,false);\n\t\t\t\n\t\tetichetta4= new Label(\"Stagionalita' disponibili\");\n\t\tetichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      \t\t\n\t\t//Creo il pannello \n\t\tpanel3 = new Panel();\n\t\tpanel3.setLayout(gridbag);\n\t\tUtils.constrain(panel3, etichetta4, 0, 1, 4, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n\t\tUtils.constrain(panel3, checkboxes[0], 0, 2, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0); \n\t\tUtils.constrain(panel3, checkboxes[1], 0, 3, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n\t\tUtils.constrain(panel3, checkboxes[2], 0, 4, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n\t\tUtils.constrain(panel3, checkboxes[3], 0, 5, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n\t\tUtils.constrain(panel3, checkboxes[4], 0, 6, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);                        \n\n\t\t//Creo il pannello contenente la TextArea\n\t\tpanel4 = new Panel();\n\t\tpanel4.setLayout(gridbag);\n\t\tUtils.constrain(panel4, etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel4,list, 0, 1, 4, 3, GridBagConstraints.BOTH,\n\t\t\tGridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);\n\n\t\t//Creo il pannello in basso con due pulsanti\n\t\tpanel5 = new Panel();\n\t\tpanel5.setLayout(gridbag);\n\t\tUtils.constrain(panel5, Annulla, 0, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.SOUTHEAST, 0.3, 0.0, 0, 0, 0, 10);\n\t\tUtils.constrain(panel5, Conferma, 1, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.SOUTHWEST, 0.3, 0.0, 0, 0, 0, 0);\n\n\t\t//Attacco i pannelli al frame\n\t\tthis.setLayout(gridbag);\n\t\tUtils.constrain(this, panel1, 0, 0, 4, 2, GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 15, 10, 10, 10);\n\t\tUtils.constrain(this, panel3, 0, 2, 4, 1,GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.NORTHEAST, 1.0, 0.0, 10, 10, 0, 10);\n\t\tUtils.constrain(this, panel2, 0, 5, 4, 1,GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.NORTHEAST, 1.0, 0.0, 10, 10, 0, 10);\n\t\tUtils.constrain(this, panel4, 0, 6, 4, 3, GridBagConstraints.BOTH,\n\t\t\tGridBagConstraints.CENTER, 2.0, 2.0, 10, 10, 10, 10);\n\t\tUtils.constrain(this, panel5, 0, 10, 4, 1, GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.SOUTHWEST, 1.0, 1.0, 10, 10, 15, 10);\n\t}\n\n\t//Gestione degli eventi\n\tpublic void init()\n\t{\n\t\t//Ascoltatore degli eventi della finestra\n\t\tcheckboxes[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[0].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcheckboxes[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[1].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n            }\n\t\t});\n\n\t\tcheckboxes[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[2].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcheckboxes[3].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[3].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcheckboxes[4].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[4].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n       \n\t\t/* Nel caso di annullamento dell'operazione ripristino i vettori\n\t\t * originali della Configurazione\n\t\t */   \n            \n\t\tAnnulla.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tconfig.setEnabled(true);\n\t\t\t}\n\t\t});\n            \n\t\t//Ascoltatore del pulsante Conferma, se il pulsante viene premuto si apre\n\t\t//la finestra riguardante l'inserimento della prenotazione\n\t\tAggiungi.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartAggiungi();\n            }\n        });\n        \n        Conferma.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tConfigurazioneSistema.new_stag_anno_corr = (config_locale.getStagAnnoCorr());\n\t\t\t\tConfigurazioneSistema.new_stag_anno_prox = (config_locale.getStagAnnoProx());\n\t\t\t\tdispose();\n\t\t\t\tconfig.setEnabled(true);\n\t\t\t}\n\t\t});\n    }\n\t\n\tvoid startAggiungi()\n\t{\n\t\tchar flag;\n\t\tString lista[];\n\t\t\n\t\tif (Utils.dateEPeriodoCorretti(this, data_inizio.getText(), data_fine.getText()))\n\t\t{\n\t\t\tif (checkboxes[0].getState() == true)\n\t\t\t\tflag = Flag.ALTA_STAGIONE;\n\t\t\telse\t\n\t\t\t\tif (checkboxes[1].getState() == true)\n\t\t\t\t\tflag = Flag.MEDIA_STAGIONE;\n\t\t\t\telse\n\t\t\t\t\tif (checkboxes[2].getState() == true)\n\t\t\t\t\t\tflag = Flag.BASSA_STAGIONE;\n\t\t\t\t\telse\n\t\t\t\t\t\tif (checkboxes[3].getState() == true)\n\t\t\t\t\t\t\tflag = Flag.BASSISSIMA_STAGIONE;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tflag = Flag.CHIUSO;\n\t\t\tconfig_locale.setStagione(new Date(DateUtils.invertDate(DateUtils.parseDate(data_inizio.getText()))), new Date(DateUtils.invertDate(DateUtils.parseDate(data_fine.getText()))), flag);\n\t        conf_stag_corr = config_locale.getStagionalita(Const.ANNO_CORRENTE);\n\t        conf_stag_prox = config_locale.getStagionalita(Const.ANNO_PROSSIMO);\n\t\t\tvisStagionalita();\n\t\t\tdata_inizio.setText(\"\");\t\n\t\t\tdata_fine.setText(\"\");\n\t\t\tfor (int i = 0; i<checkboxes.length; i++)\n\t\t\t\tcheckboxes[i].setState(false);\n\t\t\tAggiungi.setEnabled(false);\n\t\t}\n\t}\n\t\n    /* \tCreo un duplicato dei vettori delle stagionalita per permettere\n     *\tl'annullamento delle operazioni\n     */\n    void initVectors()\n    {\n        config_locale = new Configurazione();\n        config_locale.setStagAnnoCorr(ConfigurazioneSistema.new_stag_anno_corr);\n        config_locale.setStagAnnoProx(ConfigurazioneSistema.new_stag_anno_prox);\n        conf_stag_corr = config_locale.getStagionalita(Const.ANNO_CORRENTE);\n        conf_stag_prox = config_locale.getStagionalita(Const.ANNO_PROSSIMO);\n        Costanti cost = new Costanti();\n        anno_corr = cost.getAnnoCorr();\n        anno_prox = cost.getAnnoProx();\n  \t\tvisStagionalita();\n    }\n    \n\tvoid visStagionalita()\n\t{\n\t\tString lista[] = reportStagionalita();\n\t\tif (list.getItemCount() > 0)\n\t\t\tlist.removeAll();\n\t\tfor (int k = 0; k<lista.length; k++)\n\t\t\tlist.addItem(lista[k]);\n\t}\n\t\n\tString[] reportStagionalita()\n\t{\n\t\tString lista_loc[] = new String[30];\n\t\tint index = 0;\n\t\tString str_aus;\n\t\tinitLista(lista_loc);\n\t\t\n\t//Scansione dei 5 tipi di stagionalita per l'anno corrente\n \t\tstr_aus = Utils.scanVector(Flag.ALTA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di alta stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.MEDIA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di media stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassa stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSISSIMA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassissima stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.CHIUSO, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di chiusura per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\n\t//\tScansione dei 5 tipi di stagionalita per l'anno seguente \t\n\t\tstr_aus = Utils.scanVector(Flag.ALTA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di alta stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.MEDIA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di media stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassa stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSISSIMA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassissima stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.CHIUSO, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di chiusura per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\treturn lista_loc;\n\t}\n\t\n\tvoid initLista(String lista[])\n\t{\n\t\tfor (int k = 0; k < lista.length; k++)\n\t\t\tlista[k] = new String(\"\");\n\t}\t\n}\n\n             \n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d25"},"name":"VediAddebito.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class VediAddebito extends Frame\n{\n   \tTextField num_stanza, desc, quantita, tot, tot_addebiti;\n   \tLabel etich1, etich2, etich3, etich4, etich5, etich6;\n   \tPanel panel1, panel2;\n   \tButton Annulla;\n   \tGridBagLayout gridbag = new GridBagLayout();\n   \tFrame padre = new Frame();\n\tAddebito add;\n  \tfloat addebiti_totali; \t\n   \tpublic VediAddebito(Frame p, Addebito a, float tot)\n   \t{\n      \tsuper(\"Visualizzazione dei dati dell'addebito scelto\");\n      \tpadre = p;\n      \tadd = a;\n      \taddebiti_totali = tot;\n      \tpadre.setEnabled(false);\n      \tsetupPanels();\n      \tinizializza();\n      \tpack();\n      \tsetVisible(true);\n   \t}\n\n   \tvoid setupPanels()\n   \t{\n\t    this.setFont(ConfigurazioneSistema.font_base);\n      \t//Creo le etichette\n      \tetich1 = new Label(\"Dati dell'addebito\");\n      \tetich1.setFont(ConfigurazioneSistema.font_titolo);\n      \tetich2 = new Label(\"Numero Stanza\");\n      \tetich3 = new Label(\"Descrizione\");\n      \tetich4 = new Label(\"Quantita\");\n      \tetich5 = new Label(\"Addebito relativo\");\n      \tetich6 = new Label(\"Totale addebiti sulla stanza \"+add.getNumStanza());\n      \tetich6.setFont(ConfigurazioneSistema.font_titolo);\n      \n      \t//Creo i TextField e ne rendo  alcuni non editabili\n      \tnum_stanza = new TextField(\"\",4);\n      \tdesc = new TextField(\"\",32);\n     \tquantita = new TextField(\"\",6);\n      \ttot = new TextField(\"\",8);\n      \ttot_addebiti = new TextField(\"\",10);\n      \t\n      \t//Disabilita i TextField\n      \tnum_stanza.setEditable(false);\n      \tdesc.setEditable(false);\n     \tquantita.setEditable(false);\n      \ttot.setEditable(false);\n      \ttot_addebiti.setEditable(false);\n\n      \t//Creo i pulsanti\n      \tAnnulla = new Button(\" Indietro \");\n\n      \t//Creo il pannello\n      \tpanel1 = new Panel();\n      \tpanel1.setLayout(gridbag);\n      \tUtils.constrain(panel1, etich1, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0); \n      \tUtils.constrain(panel1, etich2, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n \t    Utils.constrain(panel1,num_stanza, 1, 1, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich3, 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,desc, 1, 2, 2, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich4, 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,quantita , 1, 3, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich5, 2, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,tot , 3, 3, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich6, 0, 4, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 15, 5, 5, 5);\n      \tUtils.constrain(panel1, tot_addebiti, 2, 4, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 15, 5, 5, 5);\n\n      \tpanel2 = new Panel();\n     \tpanel2.setLayout(gridbag);\n      \tUtils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 0, 0, 0, 15);\n\t\t\n      \t//Attacco i pannelli al frame\n      \tthis.setLayout(gridbag);\n      \tUtils.constrain(this, panel1, 0, 0, 6, 5, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(this, panel2, 0, 5, 6, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n   }\n\n   public void inizializza()\n   {\n      writeDatiTel();\n      \n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tdispose();\n\t\t\tpadre.setEnabled(true);\n         }\n      });\n   }\n\n\tvoid writeDatiTel()\n\t{\n      \tString d = new String(\"\");\n      \tBeneServizio extra = (Principale.db).readBeneServizio(add.getCodExtra());\n\t\tif (extra == null)\n\t\t\td = new String(\"\");\n\t\telse\n\t\td = new String(extra.getDescrizione());\t\n      \tnum_stanza.setText(add.getNumStanza());\n      \tdesc.setText(d);\n     \tquantita.setText(\"\"+add.getQuantita());\n      \ttot.setText(\"\"+add.getTotAddebito());\n      \ttot_addebiti.setText(\"\"+addebiti_totali);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d26"},"name":"VediBeniServizi.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport moduli.BeneServizio;\nimport moduli.DataBase;\nimport moduli.ListaBeniServizi;\n\npublic class VediBeniServizi extends MascheraBeneServizio\n{\n\tBeneServizio extra = null;\n\tLabel elenco_extra1, elenco_extra2, desc_extra, px_extra;\n\tTextField desc, prezzo;\n\tButton annulla3, annulla_canc;\n\t\t\n\tpublic VediBeniServizi()\n\t{\n\t\tsuper(\"Visualizzazione dei dati di un bene o servizio\");\n\t\tsetupPannello();\n\t\tinitialize();\n\t}\n\t\n\tvoid setupPannello()\n\t{\n\t\tpanel[11].setLayout(gridbag);\n\t\telenco_extra1 = new Label(\"Scegliere il bene o servizio, appartenente\");\n\t\telenco_extra2 = new Label(\"alla categoria selezionata, da visualizzare\");\n\t\tannulla3 = new Button(\" Fine \");\n\t\tUtils.constrain(panel[11], elenco_extra1, 0, 0, 5, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel[11], elenco_extra2, 0, 1, 5, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 0, 5, 0);\n\t\tUtils.constrain(panel[11], elenco, 0, 2, 5, 1,GridBagConstraints.HORIZONTAL,\n\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], annulla3, 2, 3, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\n\n\t\tpanel[12].setLayout(gridbag);\n\t\tdesc_extra = new Label(\"Nome del bene\");\n\t\tpx_extra = new Label(\"Prezzo del bene\");\n\t\tdesc = new TextField(\"\",40);\n\t\tprezzo = new TextField(\"\",10);\n\t\tdesc.setEditable(false);\n\t\tprezzo.setEditable(false);\n\t\tannulla_canc = new Button(\" Indietro \");\n\t\tUtils.constrain(panel[12], desc_extra, 0, 0, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], desc, 1, 0, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], px_extra, 0, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 5, 5, 5, 0);\n\t\tUtils.constrain(panel[12], prezzo, 1, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 0);\n\t\tUtils.constrain(panel[12], annulla_canc, 1, 2, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.EAST, 1.0, 0.0, 5, 5, 0, 5);\n\t}\n\n\tpublic void initialize()\n\t{\n\t\tscelta_piatto[4].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[4].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DESSERT);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_piatto[5].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[5].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FRUTTA);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.RICREATIVI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALTRO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CAFFETTERIA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ANALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DOLCI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SALATI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FREDDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CALDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SOLIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.LIQUIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CARNE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.PESCE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_COTTA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_CRUDA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FORMAGGIO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tannulla_canc.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tgoBack();\n\t\t\t}\n\t\t});\n\n\t\tannulla3.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n\n\t\telenco.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tbeneSelezionato();\n\t\t\t}\n\t\t});\n\t} // init\n\n\tvoid beneSelezionato()\n\t{\n\t\textra = L.getBeneServizio((elenco.getSelectedIndexes())[0]+1);\n\t\tremove(panel[11]);\n\t\tthis.add(panel[12]);\n\t\tdesc.setText(extra.getDescrizione());\n\t\tprezzo.setText(extra.getPxUnitario()+\"\");\n\t\tpanel[12].setVisible(true);\n\t\tsetVisible(true);\n\t}\n\t\n\tvoid goBack()\n\t{\n\t\tremove(panel[12]);\n\t\tthis.add(panel[11]);\n\t\tpanel[11].setVisible(true);\n\t\tsetVisible(true);\n\t}\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d27"},"name":"InserisciBeniServizi.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport moduli.BeneServizio;\nimport moduli.DataBase;\n\npublic class InserisciBeniServizi extends MascheraBeneServizio\n{\n\tBeneServizio extra = null;\n\n\tpublic InserisciBeniServizi(String title)\n\t{\n\t\tsuper(title);\n\t\tinitialize();\n\t\tsetSize(350,520);\n\t}\n\n\tpublic void initialize()\n\t{\n\t\tscelta_piatto[4].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[4].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DESSERT);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_piatto[5].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[5].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FRUTTA);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.RICREATIVI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALTRO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CAFFETTERIA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ANALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DOLCI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SALATI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FREDDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CALDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SOLIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.LIQUIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CARNE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.PESCE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_COTTA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_CRUDA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FORMAGGIO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconferma.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartConferma(padre);\n\t\t\t}\n\t\t});\n\t} // init\n\n\tvoid startConferma(Frame padre)\n\t{\n\t\tMessageDialog msg;\n\t\tif (!errore())\n\t\t{\n\t\t\tFloat px = Float.valueOf(testo4.getText());\n\t\t\textra = new BeneServizio((new String(codice))+tornaCodId((Principale.config).getIdBeneservizio()), testo3.getText(), px.floatValue());\n\t\t\tint j;\n\t\t\tif ( (j = (Principale.db).newIdBeneservizio()) == DataBase.OK )\n\t\t\t{\n\t\t\t\t(Principale.config).updateIdBeneservizio();\n\t\t\t\tif ((j = (Principale.db).writeBeneServizio(extra)) == DataBase.OK)\n\t\t\t\t{\n\t\t\t\t\tif (padre instanceof MascheraAddebiti)\n\t\t\t\t\t{ // questo serve in quanto l'AggiungiBeneServizio e' una estensione di questa classe\n\t\t\t\t\t\tdispose();\n\t\t\t\t\t\tpadre.setEnabled(true);\n\t\t\t\t\t\t((MascheraAddebiti) padre).inizExtra();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{ // questo serve in quanto AggiungiBeneServizio e' una estensione di questa\n\t\t\t\t\t  // classe ed e' utilizzata dalla maschera del conto ristorazione\n\t\t\t\t\t\tif (padre instanceof MascheraContoRistorazione)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdispose();\n\t\t\t\t\t\t\tpadre.setEnabled(true);\n\t\t\t\t\t\t\t((MascheraContoRistorazione) padre).inizExtra();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttesto3.setText(\"\");\n\t\t\t\t\t\t\ttesto4.setText(\"\");\n\t\t\t\t\t\t\tpanel[10].setVisible(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n\t\t}\n\t}\n\n\tvoid o()\n\t{\n\t\tcompleteCode();\n\t\tthis.add(panel[10]);\n\t\tpanel[10].setVisible(true);\n\t\ttesto3.setText(\"\");\n\t\ttesto4.setText(\"\");\n\t\tsetVisible(true);\n\t}\n   \n\tvoid p()\n\t{\n\t\tcompleteCode();\n\t\tif(panel[1].isVisible())\n\t\t\tremove(panel[1]);\n\t\tfor(int i=3;i<13;++i)\n\t\t{\n\t\t\tif(panel[i].isVisible())\n\t\t\t\tremove(panel[i]);\n\t\t}\n\t\to();\n\t}\n\t\n\tString tornaCodId(long id)\n\t{\n\t\tcompleteCode();\n\t\tString str_id = Long.toString(id);\n\t\twhile (str_id.length() < 5)\n\t\t\tstr_id = new String(\"0\"+str_id);\n\t\treturn str_id;\n\t}\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d28"},"name":"ModificaBeniServizi.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport moduli.BeneServizio;\nimport moduli.DataBase;\nimport moduli.ListaBeniServizi;\n\npublic class ModificaBeniServizi extends MascheraBeneServizio\n{\n\tBeneServizio extra = null;\n\tLabel elenco_extra1, elenco_extra2;\n\tButton annulla3;\n\t\t\n\tpublic ModificaBeniServizi()\n\t{\n\t\tsuper(\"Modifica dei dati di un bene o servizio\");\n\t\tsetupPannello();\n\t\tinitialize();\n\t}\n\t\n\tvoid setupPannello()\n\t{\n\t\tpanel[11].setLayout(gridbag);\n\t\telenco_extra1 = new Label(\"Scegliere il bene o servizio, appartenente\");\n\t\telenco_extra2 = new Label(\"alla categoria selezionata, da modificare\");\n\t\telenco = new List(3, false);\t\t\n\t\tannulla3 = new Button(\" Fine \");\n\t\tUtils.constrain(panel[11], elenco_extra1, 0, 0, 5, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel[11], elenco_extra2, 0, 1, 5, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 0, 5, 0);\n\t\tUtils.constrain(panel[11], elenco, 0, 2, 5, 1,GridBagConstraints.HORIZONTAL,\n\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], annulla3, 2, 3, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\n\t}\n\n\tpublic void initialize()\n\t{\n\t\tscelta_piatto[4].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[4].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DESSERT);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_piatto[5].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[5].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FRUTTA);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.RICREATIVI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALTRO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CAFFETTERIA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ANALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DOLCI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SALATI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FREDDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CALDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SOLIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.LIQUIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CARNE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.PESCE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_COTTA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_CRUDA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FORMAGGIO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconferma.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartConferma();\n\t\t\t}\n\t\t});\n\n\t\tannulla3.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\t\t\t\t\n\t\t\t}\n\t\t});\n\n\t\telenco.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tbeneSelezionato();\n\t\t\t}\n\t\t});\n\t} // init\n\n\tvoid startConferma()\n\t{\n\t\tint id;\n\t\tMessageDialog msg;\n\t\t\n\t\tif (!errore())\n\t\t{\n\t\t\tFloat px = Float.valueOf(testo4.getText());\n\t\t\tint j;\n\t\t\tif ((j = (Principale.db).changeBeneServizio(extra.getCodExtra(),\n\t\t\t\t\t\t\ttesto3.getText(), px.floatValue())) == DataBase.OK)\n\t\t\t{\n\t\t\t\tfor(int i=1;i<13;++i)\n\t\t\t\t\tif(panel[i].isVisible())\n\t\t\t\t\t\tremove(panel[i]);\n\t\t\t\tpanel[0].setVisible(true);\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il data base: \"+DataBase.strErrore(j));\n\t\t}\n\t}\n\t\n\tvoid beneSelezionato()\n\t{\n\t\textra = L.getBeneServizio((elenco.getSelectedIndexes())[0]+1);\n\t\tremove(panel[11]);\n\t\tthis.add(panel[10]);\n\t\ttesto3.setText(extra.getDescrizione());\n\t\ttesto4.setText(extra.getPxUnitario()+\"\");\n\t\tpanel[10].setVisible(true);\n\t\tsetVisible(true);\n\t}\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d29"},"name":"CancellaStanze.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class CancellaStanze extends DescrittoreStanze\n{\n\tpublic CancellaStanze()\n\t{\n\t\tsuper(\"Cancellazione delle stanze\", \"Cancella\", 3);\n\t\tinit();\n\t}\n\n\tpublic void init()\n\t{\n\t\ttesto1.setEditable(true);\n\t\ttesto2.setEditable(false);\n\t\ttesto3.setEditable(false);\n\t\ttesto4.setEditable(false);\n\t\tmycheckboxes.setEnabled(false);\n\t\tAzione.setEnabled(false);\n\n\t\tAzione.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartAzione();\n\t\t\t}\n\t\t});\n\t\t\n\t\ttesto1.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartTesto1();\n\t\t\t}\n\t\t});\n\t\t\n\t\tCerca.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartTesto1();\n\t\t\t}\n\t\t});\n\t} // init\n\t\n\tvoid startAzione()\n\t{\n\t\tMessageDialog msg;\n\t\t\n\t\tint j;\n\t\tif ( (j = (Principale.db).delStanza(testo1.getText())) != DataBase.OK )\n\t\t\tmsg = new MessageDialog(this, \"Problemi con il data base: \"+DataBase.strErrore(j));\n\t\telse\n\t\t{\n\t\t\tcleanFields();\n\t\t\tAzione.setEnabled(false);\n\t\t}\n\t\ttesto1.setEditable(true);\n\t}\n\t\n\tvoid startTesto1()\n\t{\n\t\tMessageDialog msg;\n\t\t\n\t\tStanza room;\n\t\tif ((room = (Principale.db).readStanza(testo1.getText())) != null)\n\t\t{\n\t\t\twriteDatiStanza(room);\n\t\t\ttesto1.setEditable(false);\n\t\t\tAzione.setEnabled(true);\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Stanza inesistente!\");\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d2a"},"name":"CancellaBeniServizi.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport moduli.BeneServizio;\nimport moduli.DataBase;\nimport moduli.ListaBeniServizi;\n\npublic class CancellaBeniServizi extends MascheraBeneServizio\n{\n\tBeneServizio extra = null;\n\tLabel elenco_extra1, elenco_extra2, desc_extra, px_extra;\n\tTextField desc, prezzo;\n\tButton annulla3, annulla_canc, conferma_canc;\n\t\t\n\tpublic CancellaBeniServizi()\n\t{\n\t\tsuper(\"Cancellazione di un bene o servizio\");\n\t\tsetupPannello();\n\t\tinitialize();\n\t}\n\t\n\tvoid setupPannello()\n\t{\n\t\tpanel[11].setLayout(gridbag);\n\t\telenco_extra1 = new Label(\"Scegliere il bene o servizio, appartenente\");\n\t\telenco_extra2 = new Label(\"alla categoria selezionata, da cancellare\");\n\t\tannulla3 = new Button(\" Fine \");\n\t\tUtils.constrain(panel[11], elenco_extra1, 0, 0, 5, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel[11], elenco_extra2, 0, 1, 5, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 0, 5, 0);\n\t\tUtils.constrain(panel[11], elenco, 0, 2, 5, 1,GridBagConstraints.HORIZONTAL,\n\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[11], annulla3, 2, 3, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\n\n\t\tpanel[12].setLayout(gridbag);\n\t\tdesc_extra = new Label(\"Nome del bene\");\n\t\tpx_extra = new Label(\"Prezzo del bene\");\n\t\tdesc = new TextField(\"\",40);\n\t\tprezzo = new TextField(\"\",10);\n\t\tdesc.setEditable(false);\n\t\tprezzo.setEditable(false);\n\t\tannulla_canc = new Button(\"Annulla\");\n\t\tconferma_canc = new Button(\"Conferma\");\n\t\tUtils.constrain(panel[12], desc_extra, 0, 0, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], desc, 1, 0, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[12], px_extra, 0, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 5, 5, 5, 0);\n\t\tUtils.constrain(panel[12], prezzo, 1, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 0);\n\t\tUtils.constrain(panel[12], annulla_canc, 1, 2, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.EAST, 1.0, 0.0, 5, 5, 0, 5);\n\t\tUtils.constrain(panel[12], conferma_canc, 2, 2, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 5, 5, 0, 5);\n\t}\n\n\tpublic void initialize()\n\t{\n\t\tscelta_piatto[4].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[4].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DESSERT);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_piatto[5].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[5].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FRUTTA);\n\t\t\t\t\tp();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.RICREATIVI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_servizio[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_servizio[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 1;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALTRO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CAFFETTERIA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ANALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bevanda[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bevanda[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.ALCOLICI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.DOLCI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_cibo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_cibo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SALATI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FREDDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_antipasto[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_antipasto[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CALDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.SOLIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_primo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_primo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.LIQUIDI);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.CARNE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_secondo[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_secondo[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.PESCE);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[0].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_COTTA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[1].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.VERDURA_CRUDA);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_contorno[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_contorno[2].getState())\n\t\t\t\t{\n\t\t\t\t\tlevel = 2;\n\t\t\t\t\tcodice = composeCode(level, BeneServizio.FORMAGGIO);\n\t\t\t\t\to();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconferma_canc.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartConfermaCanc();\n\t\t\t}\n\t\t});\n\n\t\tannulla_canc.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tgoBack();\n\t\t\t}\n\t\t});\n\n\t\tannulla3.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n\n\t\telenco.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tbeneSelezionato();\n\t\t\t}\n\t\t});\n\t} // init\n\n\tvoid startConfermaCanc()\n\t{\n\t\tint id;\n\t\tMessageDialog msg;\n\t\t\t\t\t\t\n\t\t// questa e' una forzatura sporca\n\t\ttesto3 = desc;\n\t\ttesto4 = prezzo;\n\t\tint j;\n\t\tif ((j = (Principale.db).delBeneServizio(extra.getCodExtra())) == DataBase.OK)\n\t\t{\n\t\t\tfor(int i=1;i<13;++i)\n\t\t\t\tif(panel[i].isVisible())\n\t\t\t\t\tremove(panel[i]);\n\t\t\tpanel[0].setVisible(true);\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Problemi con il data base: \"+DataBase.strErrore(j));\n\t}\n\t\n\tvoid beneSelezionato()\n\t{\n\t\textra = L.getBeneServizio((elenco.getSelectedIndexes())[0]+1);\n\t\tremove(panel[11]);\n\t\tthis.add(panel[12]);\n\t\tdesc.setText(extra.getDescrizione());\n\t\tprezzo.setText(extra.getPxUnitario()+\"\");\n\t\tpanel[12].setVisible(true);\n\t\tsetVisible(true);\n\t}\n\n\tvoid goBack()\n\t{\n\t\tremove(panel[12]);\n\t\tthis.add(panel[11]);\n\t\tpanel[11].setVisible(true);\n\t\tsetVisible(true);\n\t}\n\n\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d2b"},"name":"MascheraTelefonate.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d12"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class MascheraTelefonate extends Frame\n{\n   \tTextField num_stanza, data_tel, ora_i, ora_f, numero, durata, scatti, costo,\n   \t\t\t  tot_scatti, tot_costo;\n   \tLabel etich1, etich2, etich3, etich4, etich5, etich6, etich7, etich8, etich9,\n   \t\t  etich10, etich11, etich12;\n   \tPanel panel1, panel2;\n   \tButton Annulla;\n   \tGridBagLayout gridbag = new GridBagLayout();\n   \tFrame padre = new Frame();\n\tTelefonata phone;\n  \tint scatti_totali; \t\n   \tpublic MascheraTelefonate(Frame p, Telefonata t, int tot)\n   \t{\n      \tsuper(\"Visualizzazione dei dati delle telefonate\");\n      \tpadre = p;\n      \tphone = t;\n      \tscatti_totali = tot;\n      \tpadre.setEnabled(false);\n      \tsetupPanels();\n      \tinizializza();\n      \tpack();\n      \tsetVisible(true);\n   \t}\n\n   \tvoid setupPanels()\n   \t{\n\t    this.setFont(ConfigurazioneSistema.font_base);\n      \t//Creo le etichette\n      \tetich1 = new Label(\"Dati della telefonata\");\n      \tetich1.setFont(ConfigurazioneSistema.font_titolo);\n      \tetich2 = new Label(\"Numero Stanza\");\n      \tetich3 = new Label(\"Data Telefonata\");\n      \tetich4 = new Label(\"Ora di Inizio\");\n      \tetich5 = new Label(\"Ora di Fine\");\n      \tetich6 = new Label(\"Durata\");\n      \tetich7 = new Label(\"Numero Chiamato\");\n      \tetich8 = new Label(\"Scatti Addebitati\");\n\t\tetich9 = new Label(\"Spesa Addebitata\");\n      \tetich10 = new Label(\"Totale Scatti\");\n      \tetich10.setFont(ConfigurazioneSistema.font_titolo);\n      \tetich11 = new Label(\"Totale Spesa\");\n\t\tetich11.setFont(ConfigurazioneSistema.font_titolo);\n\t\tetich12 = new Label(\"Riassunto totali stanza \"+phone.getNumStanza());\n\t\tetich12.setFont(ConfigurazioneSistema.font_titolo);\n      \n      \t//Creo i TextField e ne rendo  alcuni non editabili\n      \tdata_tel = new TextField(\"\",12);\n      \tnum_stanza = new TextField(\"\",4);\n      \tora_i = new TextField(\"\",12);\n     \tora_f = new TextField(\"\",12);\n      \tdurata = new TextField(\"\",12);\n      \tscatti = new TextField(\"\",4);\n      \tnumero = new TextField(\"\",18);\n      \tcosto = new TextField(\"\",12);\n      \ttot_scatti = new TextField(\"\",4);\n      \ttot_costo = new TextField(\"\",14);\n      \t\n      \t//Disabilita i TextField\n      \tdata_tel.setEditable(false);\n      \tnum_stanza.setEditable(false);\n      \tora_i.setEditable(false);\n     \tora_f.setEditable(false);\n      \tdurata.setEditable(false);\n      \tscatti.setEditable(false);\n      \tnumero.setEditable(false);\n      \tcosto.setEditable(false);\n      \ttot_scatti.setEditable(false);\n      \ttot_costo.setEditable(false);\n\n      \t//Creo i pulsanti\n      \tAnnulla = new Button(\" Indietro \");\n\n      \t//Creo il pannello\n      \tpanel1 = new Panel();\n      \tpanel1.setLayout(gridbag);\n      \tUtils.constrain(panel1, etich1, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0); \n      \tUtils.constrain(panel1, etich2, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n \t    Utils.constrain(panel1,num_stanza, 1, 1, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich3, 2, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,data_tel, 3, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich4, 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,ora_i , 1, 2, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich5, 2, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,ora_f , 3, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich6, 4, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,durata, 5, 2, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1, etich7, 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,numero , 1, 3, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel1, etich8, 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(panel1,scatti, 1, 4, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);                         \n\t\tUtils.constrain(panel1, etich9, 2, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel1,costo, 3, 4, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n        Utils.constrain(panel1,etich12, 0, 5, 2, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);                 \n        Utils.constrain(panel1, etich10, 0, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n        Utils.constrain(panel1,tot_scatti, 1, 6, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);                         \n\t\tUtils.constrain(panel1, etich11, 2, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel1,tot_costo, 3, 6, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);                                          \n\n      \tpanel2 = new Panel();\n     \tpanel2.setLayout(gridbag);\n      \tUtils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 0, 0, 0, 15);\n\t\t\n      \t//Attacco i pannelli al frame\n      \tthis.setLayout(gridbag);\n      \tUtils.constrain(this, panel1, 0, 0, 6, 7, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n      \tUtils.constrain(this, panel2, 0, 7, 6, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n   }\n\n   public void inizializza()\n   {\n      writeDatiTel();\n      \n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tdispose();\n\t\t\tpadre.setEnabled(true);\n         }\n      });\n   }\n\n\tvoid writeDatiTel()\n\t{\n\t\tdata_tel.setText(DateUtils.giveStringOfDate(phone.getDataTel()));\n      \tnum_stanza.setText(phone.getNumStanza());\n      \tora_i.setText(\"\"+phone.getInizioTel());\n     \tora_f.setText(\"\"+phone.getFineTel());\n      \tdurata.setText(\"\"+phone.getDurataTel());\n      \tscatti.setText(\"\"+phone.getNumScatti());\n      \tnumero.setText(phone.getNumChiamato());\n      \tcosto.setText(\"\"+((Principale.config).getCostoXScatto())*phone.getNumScatti());      \t\n      \ttot_scatti.setText(\"\"+scatti_totali);\n      \ttot_costo.setText(\"\"+((Principale.config).getCostoXScatto())*scatti_totali);\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d2c"},"name":"VediPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class VediPrenotazione extends MascheraPrenotazione\n{  \n\tPrenotazione p;\t   \n   \tRicercaPrenotazione parent;\n    char flag;\n    \n   \tpublic VediPrenotazione(Prenotazione pren, Stanza room, RicercaPrenotazione papa)\n    {\n        super(room,\"\",\"\",\"Visualizzazione dei dati della prenotazione\",\"\",4, pren.getPensionamento());\n        p = pren;\n        parent = papa;\n        init();\n    }\n        \n    public void init()\n    {\n    \tFrame msg;\n    \t\n    \twriteDatiPren(p);\n    \tfor(int i=0; i<11; i++)\n    \t\ttesto[i].setEditable(false);\n    \tmyCheckbox.setEnabled(false);\n    \tmyCheckbox1.setEnabled(false);\n    \tfor (int i=0; i<checkboxes.length; i++)\n    \t\tcheckboxes[i].setEnabled(false);\n    \ttesto[9].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(p.getDataPren())));\t    \n     \tpanel2.remove(Azione);\n    } \n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d2d"},"name":"MascheraCambio.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d14"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.Date;\nimport common.def.*;\nimport common.utility.Utils;\nimport common.utility.DateUtils;\nimport moduli.*;\n\npublic class MascheraCambio extends Frame\n{\n\tTextField stanza1, stanza2;\n\tButton Annulla, Conferma, Ricerca;\n\tLabel etichetta1, etichetta2;\n\tPanel panel1, panel2;\n\tGridBagLayout gridbag = new GridBagLayout();\n\tPrenotazione p;\n\tFrame padre;\n\tMascheraRicercaStanza figlio;\n\t\n\tpublic MascheraCambio(Frame parent)\n\t{\n      super(\"Cambio di stanza\");\n      padre = parent;\n      padre.setEnabled(false);\n      setup();\n      init();\n      pack();\n      this.setVisible(true);\n\t}\n\n\tvoid setup()\n\t{\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      stanza1 = new TextField(\"\", 4);\n      stanza2 = new TextField(\"\", 4);\n      stanza2.setEditable(false);\n      etichetta1 = new Label(\"Stanza attuale\");\n      etichetta2 = new Label(\"     Nuova stanza\");\n      Annulla = new Button(\" Annulla \");\n      Ricerca = new Button(\" Ricerca \");\n      Conferma = new Button(\"Conferma\");\n      Conferma.setEnabled(false);\n\t\t\t\t\n      panel1 = new Panel();\n      panel1.setLayout(gridbag);\n      Utils.constrain(panel1, etichetta1, 0, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel1, stanza1,    1, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel1, etichetta2, 2, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel1, stanza2,    3, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n\n      panel2 = new Panel();\n      panel2.setLayout(gridbag);\n      Utils.constrain(panel2, Annulla,  0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel2, Ricerca,  1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel2, Conferma, 2, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 0, 0, 0, 0);                  \n\n      \n      this.setLayout(gridbag);\n      Utils.constrain(this, panel1, 0, 0, 1, 1, GridBagConstraints.BOTH,\n                        GridBagConstraints.WEST, 1.0, 1.0, 10, 10, 10, 10);\n      Utils.constrain(this, panel2, 0, 1, 1, 1, GridBagConstraints.BOTH,\n                        GridBagConstraints.EAST, 1.0, 1.0, 10, 10, 10, 10);\n\t}\n\n\tpublic void init()\n\t{\n      \n      \n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            padre.setEnabled(true);\n         }\n      });\n\n      Conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartConferma();\n         }\n      });\n      \n      Ricerca.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tif (noErrors()) \n\t\t\t{\t\n\t\t\t\t//stanza1.setEditable(false);\n\t\t\t\tstartRicerca();\n         \t}\n         }\n      });\n\t}\n   \n\tvoid startConferma()\n\t{\n\t\tFrame msg;\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\tif (elenco_disp == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{   \n\t\t\tif (ctrlPosti())\n\t\t\t{\n\t\t\t\tint ris;\n\t\t\t\tif ( (ris = (Principale.db).changeStanzaSoggiornanti(stanza1.getText(), stanza2.getText())) > 0 )\n\t\t\t\t{\n\t\t\t\t\tif ( (ris = (Principale.db).changeStanzaAddebiti(stanza1.getText(), stanza2.getText())) < 0 )\n\t\t\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(ris));\n\t\t\t\t\tif ( (ris = (Principale.db).changeStanzaTelefonate(stanza1.getText(), stanza2.getText())) < 0 )\n\t\t\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(ris));\n\t\t\t\t\tUtils.aggiornaDisp(elenco_disp,stanza1.getText(),p.getInizioSogg(),p.getFineSogg(),Flag.DISPONIBILE,Flag.OCCUPATA,true);\t\t\n\t\t\t\t\tUtils.aggiornaDisp(elenco_disp,stanza2.getText(),p.getInizioSogg(),p.getFineSogg(),Flag.OCCUPATA,Flag.DISPONIBILE,true);\t\t\n\t\t\t\t\tUtils.aggiornaDisp(elenco_disp,stanza2.getText(),p.getInizioSogg(),p.getFineSogg(),Flag.OCCUPATA,Flag.COMMISSIONATA,true);\t\t\n\t\t\t\t\n\t\t\t\t\tUtils.aggiornaDisp(elenco_disp,stanza2.getText(),p.getInizioSogg(),p.getFineSogg(),Flag.OCCUPATA,Flag.DISPONIBILE,true);\t\t\n\t\t\t\t\tUtils.aggiornaDisp(elenco_disp,stanza2.getText(),p.getInizioSogg(),p.getFineSogg(),Flag.OCCUPATA,Flag.COMMISSIONATA,true);\t\t\n\t\t\t\t\tif (p.getTramiteAgenzia() == Const.SI)\n\t\t\t\t\t{\t\n\t\t\t\t\t\tUtils.restoreCommissioni(stanza1.getText());\n\t\t\t\t\t}\n\t\t\t\t\tmsg = new AvvisoDialog(this,\"La stanza e' stata cambiata e tutti i dati riferiti ad essa aggiornati\");\n\t\t\t\t\tConferma.setEnabled(false);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tif ( (ris != 0) && (!(ris == DataBase.DONT_EXISTS_STANZA) ) )\n\t\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(ris));\n\t\t\t}\n\t\t}\n\t}\n   \n\tboolean ctrlPosti()\n\t{\n\t\tFrame msg;\n\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(stanza1.getText(),false);\n\t\tStanza room2 = (Principale.db).readStanza(stanza2.getText());\n\t\tif ( !(room2 ==null) && !(L_sogg == null))\n\t\t\tif\t(L_sogg.length() > contaPosti(room2))\n\t\t\t{\t\n\t\t\t\tmsg = new AvvisoDialog(this,\"La stanza scelta e' troppo piccola per \"+L_sogg.length()+\" persone\"); \t\t\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t return true;\n\t\telse\n\t\t{\n\t\t \tmsg = new MessageDialog(this,\" Problemi con il database! \");\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tint contaPosti(Stanza s)\n\t{\n\t\tint c = s.getPostiLetto();\n\t\tif (s.getDispLettoAgg() == Const.SI)\n\t\t\tc++;\n\t\treturn c;\t\n\t}\n\t\n\tvoid startRicerca()\n\t{\n\t\tthis.setEnabled(false);\n\t\tfiglio = new MascheraRicercaStanza(\"Ricerca di stanze disponibili per cambio stanza\",3);\n\t\tSoggiornante sogg = (Principale.db).readSoggiornante(stanza1.getText(),1);\n\t\tp = (Principale.db).readPrenotazione(sogg.getIdPrenotazione());\n\t\tif ( !(p == null))\n\t\t{\t\n\t\t\tfiglio.data_inizio.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(new Date())));\n\t\t\tfiglio.data_inizio.setEditable(false);\n\t\t\tfiglio.data_fine.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(p.getFineSogg())));\n\t\t\tfiglio.save_date = p.getFineSogg();\n\t\t\tif (p.getTramiteAgenzia() == Const.SI)\n\t\t\t{\n\t\t\t\tfiglio.con_ag.setState(true);\n\t\t\t\tfiglio.con_ag.setEnabled(false);\n\t\t\t\tfiglio.nome_ag.setText(p.getNomeAgenzia());\n\t\t\t\tfiglio.nome_ag.setEditable(false);\n\t\t\t}\t\n\t\t\tfiglio.setVisible(true);\n\t\t\tfiglio.father = this;\n\t\t}\n\t}\n\t\n\tboolean noErrors()\n\t{\n\t\tFrame msg;\n\t\tDisponibilita disp = new Disponibilita();\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\t\n\t\tif (elenco_disp == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif ((stanza1.getText().equals(\"\")) ) \n\t\t{\n\t\t\tmsg = new AvvisoDialog(this,\" Inserire il numero della stanza da cambiare! \");\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( (Principale.db).readStanza(stanza1.getText()) == null )\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this,\" La stanza inserita e' inesistente! \");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\n\t\t\t\tdisp = Utils.getDispOfRoom(elenco_disp, stanza1.getText(), true);\n\t\t\t\tif (disp != null)\n\t\t\t\t{\n\t\t\t\t\tif (  disp.getStatusGiorno(DateUtils.dataTogiorni(new Date()),Const.ANNO_CORRENTE) != Flag.OCCUPATA )\n\t\t\t\t\t{\t\n\t\t\t\t\t\tmsg = new MessageDialog(this,\" La stanza inserita non e' attualmente occupata! \");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d2e"},"name":"VediStanza.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d0e"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class VediStanza extends DescrittoreStanze\n{\n\tpublic VediStanza()\n\t{\n\t\tsuper(\"Visualizzazione dei dati delle stanze\", \"Cerca\",4);\n\t\tinit();\n\t}\n\n\tpublic void init()\n\t{\n\t\ttesto1.setEditable(true);\n\t\ttesto2.setEditable(false);\n\t\ttesto3.setEditable(false);\n\t\ttesto4.setEditable(false);\n\t\tmycheckboxes.setEnabled(false);\n\n\t\t\n\t\t\n\t\tAzione.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartCerca();\n\t\t\t}\n\t\t});\n\t\t\n\t\ttesto1.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartCerca();\n\t\t\t}\n\t\t});\n\t} // init\n\t\n\tvoid startCerca()\n\t{\n\t\tMessageDialog msg;\n\t\t\n\t\tStanza room;\n\t\tif ((room = (Principale.db).readStanza(testo1.getText())) != null)\n\t\t{\n\t\t\twriteDatiStanza(room);\n\t\t\tAzione.setEnabled(true);\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Stanza inesistente!\");\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d2f"},"name":"MascheraRicercaStorico.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d0f"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.ListaClienti;\nimport moduli.Cliente;\n\npublic class MascheraRicercaStorico extends Frame\n{\n   Button Annulla, Conferma;\n   TextField testo[];\n   Label etichetta1, etichetta2, etichetta3, etichetta4, etichetta5, label1, label2,\n         label3, label5;\n   Panel panel[];\n   CheckboxGroup checkbox_group;\n   Checkbox[] checkboxes;\n   GridBagLayout gridbag =new GridBagLayout();\n   List list_clienti;\n   Frame padre;\n   VediCliente figlio;\n   Cliente cliente;\n   \n   // la seguente variabile serve per tenere in memoria la lista dei clienti\n   // cercati nello storico\n   ListaClienti elenco_clienti;\n\n   public MascheraRicercaStorico(Frame parent)\n   {\n      super(\"Ricerca nello storico\");\n      padre = parent;\n      padre.setEnabled(false);\n      setupPanels();\n      pack();\n      init();\n      this.setVisible(true);\n   }\n\n   void setupPanels()\n   {\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      //Creo i pulsanti\n      Annulla = new Button(\"Annulla \");\n      //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n      Conferma = new Button(\"Conferma\");\n      Conferma.setEnabled(false);\n      //Conferma.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n\n      //Creo le etichette\n      etichetta1 = new Label(\"Selezionare il tipo di ricerca che si desidera effettuare:\");\n      etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta2 = new Label(\"Risultato della ricerca:\");\n      etichetta2.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta3 = new Label(\"Ricerca per stanza:\");\n      etichetta3.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta4 = new Label(\"Ricerca per nome:\");\n      etichetta4.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta5 = new Label(\"Ricerca per data:\");\n      etichetta5.setFont(ConfigurazioneSistema.font_titolo);\n      label1 = new Label(\"Stanza numero\");\n      label2 = new Label(\"Cognome\");\n      label3 = new Label(\"Nome\");\n      label5 = new Label(\"Data di soggiorno desiderata\");\n\n      //Creo un Checkbox ad esclusione\n      checkbox_group = new CheckboxGroup();\n      checkboxes = new Checkbox[3];\n      checkboxes[0] = new Checkbox(\"Ricerca per stanza\",checkbox_group,false);\n      checkboxes[1] = new Checkbox(\"Ricerca per nome\",checkbox_group,false);\n      checkboxes[2] = new Checkbox(\"Ricerca per data\",checkbox_group,false);\n\n\n      //Creo i TextField e li rendo non editabili\n      testo = new TextField[4];\n      testo[0] = new TextField(\"\", 6);\n      testo[1] = new TextField(\"\", 25);\n      testo[2] = new TextField(\"\", 25);\n      testo[3] = new TextField(\"\", 12);\n      for(int i=0;i<testo.length;++i)\n      testo[i].setEditable(false);\n\n      //creo una TextArea\n      list_clienti = new List(10, false);\n\n      panel=new Panel[6];\n      for(int i=0;i<6;++i)\n         {\n            panel[i]=new Panel();\n            panel[i].setLayout(gridbag);\n         }\n      //Creo il pannello in alto a sinistra\n      Utils.constrain(panel[1], etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0); \n      Utils.constrain(panel[1], checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0); \n      Utils.constrain(panel[1], checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n      Utils.constrain(panel[1], checkboxes[2], 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n            \n      //Creo il pannello ricerca per stanza\n      Utils.constrain(panel[2], etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[2], label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[2], testo[0], 1, 1, 1, 1, GridBagConstraints.NONE,\n                      GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\n      //Creo il pannello ricerca per nome e cognome\n      Utils.constrain(panel[3], etichetta4, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[3], label2, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[3], testo[1], 1, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel[3], label3, 0, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 0.0, 0.0, 20, 5, 0, 20);\n      Utils.constrain(panel[3], testo[2], 1, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 1.0, 0.0, 20, 0, 0, 0);\n\n      //Creo il pannnello ricerca per data\n      Utils.constrain(panel[4], etichetta5, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[4], label5, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[4], testo[3], 1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 5); \n      \n      //Creo il pannello dei pulsanti\n      Utils.constrain(panel[0], Annulla, 1, 0, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.EAST, 0.3, 0.0, 10, 0, 10, 5);\n      Utils.constrain(panel[0], Conferma, 3, 0, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.WEST, 0.3, 0.0, 10, 5, 10, 0);\n\n      //Creo il pannello contenente la list_clienti \n      Utils.constrain(panel[5], etichetta2, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[5], list_clienti, 0, 1, 1, 1, GridBagConstraints.BOTH,\n                         GridBagConstraints.NORTHWEST, 1.0, 1.0, 0, 5, 0, 20);\n\n      //Attacco i pannelli al frame\n      this.setLayout(gridbag);\n      Utils.constrain(this, panel[1], 0, 0, 5, 4, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[2], 0, 4, 5, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[3], 0, 6, 5, 3,GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel[4], 0, 9, 5, 2,GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[0], 0, 11, 5, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.SOUTHEAST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[5], 0, 12, 5, 7, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n   }\n\n   \tpublic void init()\n   \t{\n      \tcheckboxes[0].addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n            \tif(checkboxes[0].getState())\n            \t{\n                \tif (list_clienti.getItemCount() > 0)\n\t\t\t\t\t\tlist_clienti.removeAll();\n                \ttesto[0].setEditable(true);\n                \tfor(int i=1;i<=3;++i)\n                   \t\ttesto[i].setEditable(false);\n\t\t\t\t\tConferma.setEnabled(true);\n             \t}\n         \t}\n      \t});\n                      \n      \tcheckboxes[1].addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n            \tif(checkboxes[1].getState())\n            \t{\n                \tif (list_clienti.getItemCount() > 0)\n\t\t\t\t\t\tlist_clienti.removeAll();\n               \t\t for(int i=1;i<3;++i)\n                   \t\ttesto[i].setEditable(true);\n                \ttesto[0].setEditable(false);\n                \ttesto[3].setEditable(false);\n\t\t\t\t\tConferma.setEnabled(true);\n             \t}\n         \t}\n      \t});\n\n      \tcheckboxes[2].addItemListener(new ItemListener()\n     \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n            \tif(checkboxes[2].getState())\n            \t{\n                \tif (list_clienti.getItemCount() > 0)\n\t\t\t\t\t\tlist_clienti.removeAll();\n                \ttesto[3].setEditable(true);\n                \tfor(int i=0;i<3;++i)\n                   \t\ttesto[i].setEditable(false);\n\t\t\t\t\tConferma.setEnabled(true);\n            \t}\n         \t}\n      \t}); \n\n      \tConferma.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartConferma();\n         \t}\n      \t});\n\n\t\tAnnulla.addActionListener(new ActionListener()\n      \t{\n      \t\tpublic void actionPerformed(ActionEvent e)\n         \t{\n            \tdispose();\n            \tpadre.setEnabled(true);\n          \t}\n       \t});\n   \t\t\n   \t\tlist_clienti.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartVediCliente();\t\t\n\t\t\t}\n      \t});\n   \t\t\n   \t}\n   \n   \tvoid startConferma()\n   \t{\n\t\tint i;\n\t\tFrame msg;\n\t\t\t\t\n\t\tConferma.setEnabled(false);\n\t\tif (!errori())\n\t\t{\n\t\t\tif(checkboxes[0].getState())\n\t\t\t\telenco_clienti = (Principale.db).foundStorico(testo[0].getText());\n\t\t\telse if(checkboxes[1].getState())\n\t\t\t\telenco_clienti = (Principale.db).foundStorico(testo[1].getText(), testo[2].getText());\n\t\t\telse if(checkboxes[2].getState())\n\t\t\t\telenco_clienti = (Principale.db).foundStorico(DateUtils.convertDate(testo[3].getText()));\n\t\t\telse\n\t\t\t\telenco_clienti = new ListaClienti();\n\t\t\tif (elenco_clienti != null)\n\t\t\t{\n\t\t\t\tif (list_clienti.getItemCount() > 0)\n\t\t\t\t\tlist_clienti.removeAll();\n\t\t\t\tfor (i = 1; i <= elenco_clienti.length(); i++)\n\t\t\t\t\tlist_clienti.addItem((elenco_clienti.getCliente(i)).toString());\n\t\t\t\tif (list_clienti.getItemCount() == 0)\n\t\t\t\t\tmsg = new AvvisoDialog(this, \"Trovata nessuna corrispondenza!\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database!\");\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Errore nei parametri!\");\n\t\tfor (i = 0; i<testo.length; i++)\n\t\t{\n\t\t\ttesto[i].setText(\"\");\n\t\t\ttesto[i].setEditable(false);\n\t\t}\n\t\tfor (i = 0; i<checkboxes.length; i++)\n\t\t\tcheckboxes[i].setEnabled(true);\n   \t}\n   \n   \tboolean errori()\n   \t{\n\t\tif(checkboxes[0].getState())\n\t\t\treturn ( (testo[0].getText()).length() > 4 );\n\t\telse if(checkboxes[1].getState())\n\t\t\treturn( (testo[1].getText()).length() > 20 || (testo[2].getText()).length() > 20 );\n\t\telse if(checkboxes[2].getState())\n\t\t\treturn( !DateUtils.dataCorretta(testo[3].getText()) );\n\t\telse\n\t\t\treturn true;\n   \t}\n\n\tvoid startVediCliente()\n\t{\n\t\tcliente = elenco_clienti.getCliente((list_clienti.getSelectedIndexes())[0]+1);\n\t\tfiglio = new VediCliente(this,cliente);\n\t}\n}\n\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d30"},"name":"ModificaPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d17"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class ModificaPrenotazione extends MascheraPrenotazione\n{  \n    Prenotazione p;\n    RicercaPrenotazione parent;\n\t    \n    public ModificaPrenotazione(Prenotazione pren, Stanza room, RicercaPrenotazione papa)\n    {\n        super(room,\"\",\"\",\"Modifica dei dati della prenotazione\",\"Modifica\",2, pren.getPensionamento());\n        p= pren;\n        parent = papa;\n        init();\n    }\n                     \n    public void init()\n    {\n\t\tFrame msg;\n\t\twriteDatiPren(p);\n\t\ttesto[0].setEditable(false);\n   \t\ttesto[4].setEditable(false);\n   \t\ttesto[5].setEditable(false);\n\t\ttesto[9].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(p.getDataPren())));\n\t\tif (!p.getNomeAgenzia().equals(\"\"))\n\t\t{\n\t\t\ttesto[6].setEditable(false);\n\t\t\tmyCheckbox1.setState(true);\n\t\t}\n\n    \tAzione.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tif ( !errori() )\n\t\t\t\t{\n\t\t\t\t\tPrenotazione pren = readDatiPren();\n\t\t\t\t\tpren.setIdPrenotazione(p.getIdPrenotazione());\n\t\t\t\t\tpren.setDataPren(p.getDataPren());\n\t\t\t\t\tint j ;\n\t\t\t\t\tj = (Principale.db).changePrenotazione(pren.getIdPrenotazione(), pren.getNumStanza(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpren.getNumPers(),pren.getNome(),pren.getCognome(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpren.getNumTel(), pren.getInizioSogg(), pren.getFineSogg(), pren.getDataPren(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpren.getCaparra(), pren.getRichLettoAgg(), pren.getPensionamento(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpren.getTramiteAgenzia(), pren.getNomeAgenzia(), pren.getRichParticolari());\t\n\t\t\t\t\tdispose();\n\t\t\t\t\tparent.creaLista(1);\n\t\t\t\t\tparent.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n      });\n      \n      Assegna.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartAssegnazione();\n\t\t\t}\n      \t});\t\n\n    } \n\t\n\tvoid startAssegnazione()\n\t{\n\t\tFrame msg;\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\tif (elenco_disp == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\tUtils.aggiornaDisp(elenco_disp,p.getNumStanza(),p.getInizioSogg(),p.getFineSogg(),Flag.ASSEGNATA,Flag.BLOCCATA,true);\n\t\tmsg = new AvvisoDialog(this, \" Assegnata la stanza \"+p.getNumStanza()+\" alla prenotazione \");\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d31"},"name":"DescrittoreStanze.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class DescrittoreStanze extends Frame\n{\n\t//Dichiaro gli oggetti che utilizzero' per costruire la finestra\n\tLabel etichetta, label1, label2, label3, label4;\n\tTextField testo1, testo2, testo3, testo4;\n\tButton Annulla, Azione, Cerca;\n\tPanel panel1, panel2;\n\tGridBagLayout gridbag = new GridBagLayout();\n\tCheckbox mycheckboxes;\n\tSubStanze stanze = new SubStanze();\t\t\n    int caller;  \n\tpublic DescrittoreStanze(String title, String caption, int c)\n\t{\n\t\tsuper(title);\n\t\tcaller = c;\n\t\tsetupPanels(caption);\n\t\tinizializza();\n\t\tpack();\n\t}\n\n\tvoid setupPanels(String caption)\n\t{\n\t\tthis.setFont(ConfigurazioneSistema.font_base);\n\t\t//Creo  le etichette\n\t\tetichetta=new Label(\"Informazioni sulle stanze\");\n\t\tetichetta.setFont(ConfigurazioneSistema.font_titolo);\n\t\tlabel1 = new Label(\"Numero di stanza\");\n\t\tlabel2 = new Label(\"Numero di posti letto\");\n\t\tlabel3 = new Label(\"Prezzo base della stanza \"+(Principale.config).getValuta()+\".\");\n\t\tlabel4 = new Label(\"Descrizione delle caratteristiche peculiari della stanza\");\n    \n\t\t//Creo i TextField\n\t\ttesto1 = new TextField(\"\", 4);\n\t\ttesto2 = new TextField(\"\", 4);\n\t\ttesto3 = new TextField(\"\", 10);\n\t\ttesto4 = new TextField(\"\", 50);\n   \n\t\t//Creo i bottoni\n\t\tAnnulla = new Button(\" Fine \");\n\t\tAzione = new Button(caption);\n\t\tCerca = new Button(\" Cerca \");\n\t\tmycheckboxes = new Checkbox(\" Letto aggiuntivo\", null, false);\n\n\t\t//Creo il pannello in alto contenente i dati del cliente\n\t\tpanel1 = new Panel();\n\t\tpanel1.setLayout(gridbag);\n\t\tUtils.constrain(panel1, etichetta, 0, 0, 2, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel1, label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel1, testo1, 1, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n\t\tUtils.constrain(panel1, label2, 2, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 25);\n\t\tUtils.constrain(panel1, testo2, 3, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel1, label3, 0, 2, 1 ,1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n\t\tUtils.constrain(panel1, testo3, 1, 2, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n\t\tUtils.constrain(panel1, mycheckboxes, 2, 2, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n\t\tUtils.constrain(panel1, label4, 0, 3, 2, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel1, testo4, 2, 3, 3, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n\n\t\t//Creo il pannello in basso con due pulsanti\n\t\tpanel2 = new Panel();\n\t\tpanel2.setLayout(gridbag);\n\t\tUtils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.CENTER, 0, 0.0, 5, 5, 5, 5);\n\t\tUtils.constrain(panel2, Azione, 1, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.CENTER, 0, 0.0, 5, 5, 5, 5);\n\t\tif ((caller == 2) || (caller==3))\n\t\tUtils.constrain(panel2, Cerca, 2, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\t\t\tGridBagConstraints.CENTER, 0, 0.0, 5, 5, 5, 5);\t\t\t\n\n\t\t\n\t\t//Attacco i pannelli al frame\n\t\tthis.setLayout(gridbag);\n\t\tUtils.constrain(this, panel1, 0, 0, 4, 4, GridBagConstraints.HORIZONTAL,\n\t\t\t\t\tGridBagConstraints.NORTH, 1.0, 1.0, 5, 5, 5, 5);\n\t\tUtils.constrain(this,panel2, 0, 4, 4, 1, GridBagConstraints.HORIZONTAL,\n\t\t\t\t\tGridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\n\t}\n\n\tpublic void inizializza()\n\t{\n\t\tAnnulla.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tstanze.setEnabled(true);\n\t\t\t}\n\t\t});\n\t}\n\t\n\tprotected Stanza readDatiStanza()\n\t{\n\t\tStanza room = new Stanza();\n\t\troom.setNumStanza(testo1.getText());\n\t\troom.setPostiLetto(Integer.parseInt(testo2.getText()));\n\t\tFloat f = Float.valueOf(testo3.getText());\n\t\troom.setPxBase(f.floatValue());\n\t\troom.setDescrizione(testo4.getText());\n\t\tif \t(mycheckboxes.getState())\n\t\t\troom.setDispLettoAgg(Const.SI);\n\t\treturn room;\t \n\t}\n\n\tprotected void writeDatiStanza(Stanza room)\n\t{\n\t\ttesto1.setText(room.getNumStanza());\n\t\ttesto2.setText(\"\"+room.getPostiLetto());\n\t\ttesto3.setText(\"\"+room.getPxBase());\n\t\ttesto4.setText(room.getDescrizione());    \t\n\t\tif ( room.getDispLettoAgg() == Const.SI)\n\t\t\tmycheckboxes.setState(true);\n\t\telse\n\t\t\tmycheckboxes.setState(false);\t\n\t}\n    \n\tprotected void cleanFields()\n\t{\n\t\ttesto1.setText(\"\");\n\t\ttesto2.setText(\"\");\n\t\ttesto3.setText(\"\");\n\t\ttesto4.setText(\"\");\n\t\tmycheckboxes.setState(false);\t\n\t}\n\t\n\tprotected boolean errori()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif ( !((testo1.getText()).length() <= 4) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero della stanza deve essere composto da al piu' 4 caratteri! \");\n\t\t\treturn true;\t\n\t\t}\n\t\tif ( ((testo1.getText()).equals(\"\")) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca il numero della stanza! \");\n\t\t\treturn true;\t\n\t\t}\n\t\tif ( ((testo2.getText()).equals(\"\")) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca il numero di posti letto! \");\n\t\t\treturn true;\t\n\t\t}\n\t\tif ( !Utils.isIntPos(testo2.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero di posti deve essere un numero positivo! \");\n\t\t\treturn true;\t\n\t\t}\n\t\tif ( ((testo3.getText()).equals(\"\")) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca il prezzo della stanza! \");\n\t\t\treturn true;\t\n\t\t}\n\t\tif ( !Utils.isFloatPos(testo3.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il prezzo della stanza deve essere un numero positivo! \");\n\t\t\treturn true;\t\n\t\t}\n\t\tif ( !((testo4.getText()).length() <= 52) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La descrizione deve essere composta da al piu' 52 caratteri! \");\n\t\t\treturn true;\t\n\t\t}\n\t\treturn false;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d32"},"name":"InserisciPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class InserisciPrenotazione extends MascheraPrenotazione\n{  \n    MascheraRicercaStanza mask_ricerca = new MascheraRicercaStanza(\"\",2); \n    String agenzia;\n    public InserisciPrenotazione(Stanza room, String data_i , String data_f, String nome_ag)\n    {\n        super(room, data_i, data_f, \"Inserimento dei dati della prenotazione\", \"Inserisci\",1, Flag.PENSIONE_COMPLETA);\n        agenzia = new String(nome_ag);\n        init(room, data_i, data_f);\n    }\n                     \n\tpublic void init(Stanza room, String data_i, String data_f)\n \t{     \t\n        testo[0].setText(room.getNumStanza());\n        testo[0].setEditable(false);\n        testo[4].setText(DateUtils.parseDate(data_i));\n        testo[5].setText(DateUtils.parseDate(data_f));\n        testo[4].setEditable(false);\n        testo[5].setEditable(false);\n        testo[7].setText(room.getDescrizione());\n    \ttesto[9].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(new Date())));    \n\t\ttesto[8].setText(agenzia);\t      \t\n\t\ttesto[8].setEditable(false);\n\t\tif (!agenzia.equals(\"\"))\n\t\t{\n\t\t\ttesto[6].setEditable(false);\n\t\t\tmyCheckbox1.setState(true);\n\t\t}\n\t\t      \t\n      \tAnnulla.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tdispose();\n\t\t\t\tmask_ricerca.setEnabled(true);\n\t\t\t}\n      });\n\n      Azione.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartAzione();\t\n      \t\t}\n      });\n   }\n\n\tvoid startAzione()\n\t{\n\t\tFrame msg;\n\t\tAskDialog ask;\n\t\tint answer = 0;\n\t\t\n\t\tif ( !errori() )\n\t\t{\n\t\t\tPrenotazione pren = readDatiPren();\n\t\t\tpren.setDataPren(new Date());\n\t\t\tint j;\n\t\t\tif ( (j = (Principale.db).newIdPrenotazione()) == DataBase.OK )\n\t\t\t{\n\t\t\t\t(Principale.config).updateIdPrenotazione();\n\t\t\t\tif ((j = (Principale.db).writePrenotazione(pren)) == DataBase.OK)\n\t\t\t\t{\n\t\t\t\t\tif (!myCheckbox1.getState())\n\t\t\t\t\t\task = new AskDialog(this, \" Assegnare la stanza o Bloccarla fino al ricevimento della caparra? \", \" Assegnare \", \" Bloccare \", pren);\n\t\t\t\t\telse\n\t\t\t            startAggiornaDisp(pren, Flag.ASSEGNATA);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t \tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j) );\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j) );\n\t\t}\n\t}\n\t\n\tvoid startAggiornaDisp(Prenotazione p, char tipo)\n\t{\n\t\taggiornaDisp(p, tipo);\n\t\tdispose();\n\t\tmask_ricerca.restartAvvio();\n\t\tmask_ricerca.setEnabled(true);\n\t} \n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d33"},"name":"SubBeniServizi.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d10"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport common.utility.*;\nimport java.util.Random;\n\npublic class SubBeniServizi extends Frame\n{\n   Label label;\n   Panel panel0, panel1;\n   Button Inserimento, Modifica ,Cancellazione, Ricerca, Annulla ;\n   GridBagLayout gridbag=new GridBagLayout();\n   SubGestione s = new SubGestione();\n   CancellaBeniServizi call_3;\n   ModificaBeniServizi call_2;\n   InserisciBeniServizi call_1;\n   VediBeniServizi call_4;\n   \n   public SubBeniServizi()\n   {\n      super(\"Gestione dei Beni&Servizi\");\n      setup();\n      init();\n      pack();\n   }\n\n   void setup()\n   {  \n      this.setFont(ConfigurazioneSistema.font_sub);\n      panel0=new Panel();\n      panel0.setLayout(gridbag);\n      panel0.setBackground(Color.white);\n      //Caricamento di un'immagine scelta a caso tra quelle disponibili\n      Random rnd = new Random();\n      int num;\n      if ((num = (rnd.nextInt() % 5) ) < 0)\n      \t  num = num * -1;\n      num ++;\t   \n      String file_name = new String(\"servizi\"+num+\".jpg\");\n      Immagine  figura = new Immagine(file_name);\n      Etichetta etich = new Etichetta(\"Beni&Servizi.gif\");\n      Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n      Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n       \n      panel1 = new Panel();\n      panel1.setLayout(new GridLayout(5,1));\n      Inserimento = new Button(\" Inserimento \");\n      Modifica = new Button(\"Modifica\");\n      Cancellazione = new Button(\" Cancellazione \");\n      Ricerca = new Button(\"Ricerca...\");\n      Annulla = new Button(\"Indietro\");\n      panel1.add(Inserimento);\n      panel1.add(Modifica);\n      panel1.add(Cancellazione);\n      panel1.add(Ricerca);\n      panel1.add(Annulla);\n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n      Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n   }\n\n   void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            s.setEnabled(true);\n         }\n      });\n      \n      Inserimento.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            insBeneServizio();\n         }\n      });\n\n      Modifica.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            modBeneServizio();\n         }\n      });\n\n      Cancellazione.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            cancBeneServizio();\n         }\n      });\n      \n      Ricerca.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            vediBeneServizio();\n         }\n      });\n   }\n\n\tvoid insBeneServizio()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_1 = new InserisciBeniServizi(\"Inserimento di beni e servizi\");\n\t\tcall_1.padre = this;\n\t\tcall_1.setVisible(true);\n\t}  \n\n\tvoid modBeneServizio()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_2 = new ModificaBeniServizi();\n\t\tcall_2.padre = this;\n\t\tcall_2.setVisible(true);\n\t}  \n\n\tvoid cancBeneServizio()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_3 = new CancellaBeniServizi();\n\t\tcall_3.padre = this;\n\t\tcall_3.setVisible(true);\n\t}\n\t\n\tvoid vediBeneServizio()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_4 = new VediBeniServizi();\n\t\tcall_4.padre = this;\n\t\tcall_4.setVisible(true);\n\t}  \n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d34"},"name":"MascheraCommissioni.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class MascheraCommissioni extends Frame\n{\n   TextField num_stanza, nome_agenzia, inizio_comm, fine_comm, scadenza_comm ,num_tel_agenzia;\n   Label etichetta3, etich1, etich2, etich3, etich4, etich5, etich6, etich7;\n   Panel panel1, panel2, panel3, panel4, panel5;\n   List lista;\n   Button Annulla, Azione, Cerca;\n   GridBagLayout gridbag = new GridBagLayout();\n   SubCommissioni padre = new SubCommissioni();\n   ListaCommissionamenti L;\n   int caller;\n   public MascheraCommissioni(String data1, String data2, String title, String caption, int c)\n   {\n      super(title);\n      caller = c;\n      setupPanels(data1, data2, caption);\n      inizializza();\n      pack();\n   }\n\n   \tvoid setupPanels(String data1, String data2, String caption)\n   \t{\n\t    this.setFont(ConfigurazioneSistema.font_base);\n      \t//Creo le etichette\n      \tetichetta3 = new Label(\"Inserimento dati della commissione\");\n      \tetichetta3.setFont(ConfigurazioneSistema.font_titolo);\n      \tetich1 = new Label(\"Nome Agenzia\");\n      \tetich2 = new Label(\"Numero Stanza\");\n      \tetich3 = new Label(\"Data inizio Commissione\");\n      \tetich4 = new Label(\"Data fine Commissione\");\n      \tetich5 = new Label(\"Data scadenza Commissione\");\n      \tetich6 = new Label(\"Numero telefonico Agenzia\");\n      \tetich7 = new Label(\"Risultato della ricerca\");\n\t\tetich7.setFont(ConfigurazioneSistema.font_titolo);\n\t\t\n      \n      //Creo i TextField e ne rendo  alcuni non editabili\n      nome_agenzia = new TextField(\"\",20);\n      num_stanza = new TextField(\"\",4);\n      inizio_comm = new TextField(\"\",12);\n      fine_comm = new TextField(\"\",12);\n      scadenza_comm = new TextField(\"\",12);\n      num_tel_agenzia = new TextField(\"\",16);\n\n      //Creo i pulsanti\n      Annulla = new Button(\" Fine \");\n      Azione = new Button(caption);\n      Cerca = new Button(\" Cerca \");\n\n      //Creo il pannello\n      panel3 = new Panel();\n      panel3.setLayout(gridbag);\n      Utils.constrain(panel3, etichetta3, 0, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0); \n      Utils.constrain(panel3, etich1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3,nome_agenzia , 1, 1, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3, etich2, 2, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3,num_stanza, 3, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3, etich3, 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3,inizio_comm , 1, 2, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3, etich4, 2, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3,fine_comm , 3, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3, etich5, 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3,scadenza_comm , 1, 3, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3, etich6, 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3,num_tel_agenzia , 1, 4, 4, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n\n      panel4 = new Panel();\n      panel4.setLayout(gridbag);\n      Utils.constrain(panel4, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 15);\n      Utils.constrain(panel4, Azione, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);      \n      if ((caller == 2) || (caller == 3) )\n      Utils.constrain(panel4,Cerca, 2, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);                               \n\t\t\n\t\t\n\t\tlista = new List(10, false);\n\t\tlista.setFont(ConfigurazioneSistema.font_allineato);\n\t\t\n\t\tpanel5 = new Panel();\n\t\tpanel5.setLayout(gridbag);\n        Utils.constrain(panel5, etich7, 0, 0, 2, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel5,lista, 0, 1, 4, 3, GridBagConstraints.BOTH,\n                        GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);\n\t\t      \n      \n      //Attacco i pannelli al frame\n      this.setLayout(gridbag);\n      Utils.constrain(this, panel3, 0, 0, 6, 5, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel4, 0, 5, 6, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel5, 0, 6, 6, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);                  \n\tpanel5.setVisible(false);\n\tpack();\t   \t\t\n   \n   }\n\n   public void inizializza()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tdispose();\n\t\t\tpadre.setEnabled(true);\n         }\n      });\n   }\n\n\tCommissionamento readDatiComm()\n\t{\n\t\tCommissionamento comm = new Commissionamento();\n\t\tcomm.setIdCommissionamento((Principale.config).getIdCommissionamento());\n\t\tcomm.setNomeAgenzia(nome_agenzia.getText());\n\t\tcomm.setNumStanza(num_stanza.getText());\n\t\tcomm.setInizioComm(DateUtils.convertDate(inizio_comm.getText()));\n\t\tcomm.setFineComm(DateUtils.convertDate(fine_comm.getText()));\n\t\tcomm.setScadenzaComm(DateUtils.convertDate(scadenza_comm.getText()));\n\t\tcomm.setNumTel(num_tel_agenzia.getText());\n\t\treturn comm;\n\t}\n\n\tvoid writeDatiComm(Commissionamento comm)\n\t{\n\t\tnome_agenzia.setText(comm.getNomeAgenzia());\n\t\tnum_stanza.setText(comm.getNumStanza());\n\t\tinizio_comm.setText(DateUtils.giveStringOfDate(comm.getInizioComm()));\t\t\t\t\t\t\t\n\t\tfine_comm.setText(DateUtils.giveStringOfDate(comm.getFineComm()));\n\t\tscadenza_comm.setText(DateUtils.giveStringOfDate(comm.getScadenzaComm()));\n\t\tnum_tel_agenzia.setText(comm.getNumTel());\n\t}\n\n\tprotected boolean errori()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif (!((num_stanza.getText()).length() <= 4))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero della stanza deve avere al piu' 4 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ((num_stanza.getText()).equals(\"\"))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca il numero di stanza! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ((nome_agenzia.getText()).equals(\"\")) \n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca il nome dell'agenzia! \");\n\t\t\treturn true;\n\t\t}\n\t\tif (!((nome_agenzia.getText()).length() <= 20))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il nome dell'agenzia deve avere al piu' 20 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ((scadenza_comm.getText()).equals(\"\"))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca la data di scadenza! \");\n\t\t\treturn true;\n\t\t}\n\t\tif (!(DateUtils.dataCorretta(scadenza_comm.getText()) ))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La data di scadenza e' non corretta! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ((num_tel_agenzia.getText()).equals(\"\"))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca il numero di telefono! \");\n\t\t\treturn true;\n\t\t}\n\t\tif (!((num_tel_agenzia.getText()).length() <= 16))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero di telefono deve avere al piu' 16 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tvoid cleanFields()\n\t{\n\t  nome_agenzia.setText(\"\");\n      num_stanza.setText(\"\");\n      inizio_comm.setText(\"\");\n      fine_comm.setText(\"\");\n      scadenza_comm.setText(\"\");\n      num_tel_agenzia.setText(\"\");\n\t}\n\n\t// procedura utilizzata da Modifica e Cancella\n\tvoid creaLista()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tCommissionamento c;\n\t\tL = (Principale.db).foundCommissionamenti(new String(nome_agenzia.getText()));\n\t\tif (L != null)\n\t\t{\n\t\t\tif (lista.getItemCount() > 0)\n\t\t\t\tlista.removeAll();\n\t\t\tif (!L.isEmpty())\n\t\t\t{\n\t\t\t\tpanel5.setVisible(true);\n\t\t\t\tpack();\n\t\t\t\tfor (int i = 1; i<=L.length(); i++)\n\t\t\t\t\tlista.addItem((L.getCommissionamento(i)).toString());\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new AvvisoDialog(this, \"Agenzia \"+nome_agenzia.getText()+\" non trovata!\");\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Problemi con il database!\");\n\t}\n\t\n\tvoid aggiornaDisp(Commissionamento comm, char tipo)\n\t{\n\t\tDisponibilita disp_da_cambiare = new Disponibilita();\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\tif (elenco_disp == null)\n\t\t{\n\t\t\tFrame msg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tdisp_da_cambiare = Utils.getDispOfRoom(elenco_disp,comm.getNumStanza(),true);\n\t\tif (tipo == Flag.COMMISSIONATA)\n\t\t\tdisp_da_cambiare.setDisponibilita(comm.getInizioComm(), comm.getFineComm(), tipo, Flag.DISPONIBILE);\n\t\telse\n\t\t\tdisp_da_cambiare.setDisponibilita(comm.getInizioComm(), comm.getFineComm(), tipo, Flag.COMMISSIONATA);\t\t\t\n\t\t(Principale.db).changeDisponibilita( disp_da_cambiare.getNumStanza(), \n\t\t\t\t\t\t\t\t\t\t\tdisp_da_cambiare.getDispAnnoCorr(),\n\t\t\t\t\t\t\t\t\t\t\tdisp_da_cambiare.getDispAnnoProx() );\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d35"},"name":"RicercaTelefonate.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class RicercaTelefonate extends Frame \n{  \n\tPrenotazione prenotazione;\n    \n    //Dichiarazioni di variabili\n    Panel panel1, panel2, panel3;\n    Label  etichetta1, label1, label3;\n    List lista;\n    Button  Annulla, Cerca;\n    TextField stanza;\n    GridBagLayout gridbag = new GridBagLayout();\n\tFrame padre = new Frame();\n    Frame figlio;\n    ListaTelefonate L;\n    Telefonata tel;\n    int tot_scatti = 0;\n    \n    public RicercaTelefonate(Frame p)\n    {\n        super(\"Ricerca delle telefonate\");\n        padre = p;\n        padre.setEnabled(false);\n        setupPanels();\n        init();\n        pack();\n        setVisible(true); \n    }\n                     \n        void setupPanels()\n        {  \n\t\t\tthis.setFont(ConfigurazioneSistema.font_base);\n            //Creo due pulsanti  \n            Annulla = new Button(\" Fine  \");\n            Cerca = new Button(\" Cerca \");\n\n            //Creo le etichette\n            etichetta1 = new Label (\"Inserire la stanza addebitata                         \");\n            etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n            label1 = new Label(\"Numero Stanza\");\n\t\t\tlabel3 = new Label(\"Risultato della ricerca\");\n\t\t\tlabel3.setFont(ConfigurazioneSistema.font_titolo);\n            \n            //Creo i TextField e ne rendo  alcuni non editabili\n            stanza = new TextField(\"\", 4);\n\t\t\t\n            //Creo il pannello in alto per inserimento dei dati del cliente\n            panel1 = new Panel();\n            panel1.setLayout(gridbag);\n            Utils.constrain(panel1, etichetta1, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel1, label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel1, stanza, 1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n           \n            //Creo il pannello in basso con due pulsanti                  \n            panel2 = new Panel();\n            panel2.setLayout(gridbag);\n            Utils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel2, Cerca, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);             \n            \n            //Creo il pannello con la lista dei risultati della ricerca\n            lista = new List(10,false);\n            lista.setFont(ConfigurazioneSistema.font_allineato);\n            \n            panel3 = new Panel();\n            panel3.setLayout(gridbag);\n            Utils.constrain(panel3, label3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel3, lista, 0, 1, 4, 3, GridBagConstraints.BOTH,\n                        GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);             \n            \n            \n            //Attacco i pannelli al frame\n            this.setLayout(gridbag);\n            Utils.constrain(this, panel1, 0, 1, 4, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(this, panel2, 0, 14, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tUtils.constrain(this, panel3, 0, 15, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tpanel3.setVisible(false);\n        \tpack();\n        \n        }\n\n    public void init()\n    {\n\t\tlista.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\ttel = L.getTelefonata((lista.getSelectedIndexes())[0]+1);\n\t\t\t\tstartVediTelefonata(tel);\n\t\t\t}\n      \t});\n \n\n\t\t\n\tstanza.addActionListener(new ActionListener()\n\t{\n\t\tpublic void actionPerformed(ActionEvent e)\n\t\t{\n\t\t\tif (noErrors())\n\t\t\t\tcreaLista();\n\t\t}\t\t\t      \t\n\t});\n\t\n    Cerca.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tif (noErrors())\n\t\t\t\t\tcreaLista();\n\t\t\t}\t\n      \t});\n      \n  \tAnnulla.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n      \t});    \t\n    } \n\n\tvoid startVediTelefonata(Telefonata tel)\n\t{\n\t\tfiglio = new MascheraTelefonate(this, tel, tot_scatti); \n\t}\t\n\t\n\t\n\tpublic void creaLista()\n\t{\n\t\tFrame msg;\n\t\ttot_scatti = 0;\n\t\tL = (Principale.db).foundTelefonate(stanza.getText());\n\t\tif (L != null)\n\t\t{\n\t\t\tif (!L.isEmpty())\n\t\t\t{\n\t\t\t\tif (lista.getItemCount() > 0)\n\t\t\t\t\tlista.removeAll();\n\t\t\t\tpanel3.setVisible(true);\n\t\t\t\tpack();\n\t\t\t\tfor(int i = 1; i<=L.length(); i++)\n\t\t\t\t{\t\n\t\t\t\t\tlista.addItem(L.getTelefonata(i).toString());\t\t\t\n\t\t\t\t\ttot_scatti += L.getTelefonata(i).getNumScatti();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new AvvisoDialog(this, \" Nessuna telefonata addebitata \");\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Problemi con il DataBase!\");\n\t}\t\t\t\n\n\tboolean noErrors()\n\t{\n\t\tFrame msg;\n\t\t//Disponibilita disp = new Disponibilita();\n\t\tif ((stanza.getText().equals(\"\")) ) \n\t\t{\n\t\t\tmsg = new AvvisoDialog(this,\"Inserire il numero della stanza\");\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\tif( (Principale.db).readStanza(stanza.getText()) == null )\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this,\"La stanza inserita e' inesistente!\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d36"},"name":"SubGestione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport common.utility.*;\n\npublic class SubGestione extends Frame\n{\n   \tLabel label;\n   \tPanel panel0, panel1;\n   \tButton Stanze, BeniServizi, Configurazione, Annulla ;\n   \tGridBagLayout gridbag=new GridBagLayout();\n  \tFrame p1 = new Frame();\n   \tPassword pass = new Password();\n   \tSubStanze call_stanze;\t\n   \tSubBeniServizi call_beniservizi;\n   \tConfigurazioneSistema call_config;\n   \n   public SubGestione()\n   {\n      super(\"Gestione albergo\");\n      setup();\n      init();\n      pack();\n   }\n\n\n   void setup()\n   {\n\t  this.setFont(ConfigurazioneSistema.font_sub);\n      panel0=new Panel();\n      panel0.setLayout(gridbag);\n      panel0.setBackground(Color.white);\n      Immagine  figura = new Immagine(\"alb1.jpg\");\n      Etichetta etich = new Etichetta(\"Gestione.gif\");\n      Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n      Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n       \n      panel1 = new Panel();\n      panel1.setLayout(new GridLayout(4,1));\n      Stanze = new Button(\"Stanze\");\n      BeniServizi = new Button(\" Beni & Servizi \");\n      Configurazione = new Button(\" Configurazione \");\n      Annulla = new Button(\" Indietro \");\n      panel1.add(Stanze);\n      panel1.add(BeniServizi);\n      panel1.add(Configurazione);\n      panel1.add(Annulla);\n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n      Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n   }\n\n   void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            pass.setEnabled(true);\n            pass.p.setEnabled(true);\n         }\n      });\n      \n      Stanze.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            gestioneStanze();\n         }\n      });\n      \n      BeniServizi.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            gestioneBeniServizi();\n         }\n      });\n      \n      Configurazione.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            startConfigurazione();\n         }\n      });\n   }\n\n\tvoid gestioneStanze()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_stanze = new SubStanze();\n\t\tcall_stanze.setVisible(true);\n\t\tcall_stanze.s = this;\n\t}\n\t\n\tvoid gestioneBeniServizi()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_beniservizi = new SubBeniServizi();\n\t\tcall_beniservizi.setVisible(true);\n\t\tcall_beniservizi.s = this;\n\t}\n\t\n\tvoid startConfigurazione()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_config = new ConfigurazioneSistema(Principale.config, false, Principale.db);\n\t\tcall_config.setVisible(true);\n\t\tcall_config.padre = this;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d37"},"name":"MascheraAddebiti.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class MascheraAddebiti extends MascheraPerAddebitare\n{\n        // variabili per il travaso del database in memoria\n        String stanza_prec = new String(\"\");\n\n        // oggetti per la costruzione della finestra\n        Label etich1, etich2, etich3;\n        TextField num_stanza;\n\n\t\t\n        public MascheraAddebiti(Frame parent)\n        {\n                super(\"Addebito spese e servizi extra\", \"Conferma l'addebito\");\n                padre = parent;\n                padre.setEnabled(false);\n                inizExtra();\n                setupPanello();\n                inizializza();\n                pack();\n                setVisible(true);\n        }\n\n        // Travaso dati degli extra nelle strutture dati apposite\n        void inizExtra()\n        {\n\t\t\t\tMessageDialog msg;\n\t\t\t\t\n\t\t\t\telenco_extra = (Principale.db).elencoSenzaSuppRid();\n                if (elenco_extra != null)\n                {\n                \tif (extra.getItemCount() > 0)\n                    \textra.removeAll();\n                    int i=1;\n                    while (i <= elenco_extra.length())\n                    {\n\t                    extra.addItem( (elenco_extra.getBeneServizio(i)).toString() );\n                        i++;\n                    }\n                }\n        }\n\n        // Creazione della finestra\n        void setupPanello()\n        {\n                num_stanza = new TextField(\"\", 4);\n                num_stanza.setEditable(true);\n\n                // creo le label\n                etich1 = new Label(\"Gestione degli addebiti              \");\n                etich1.setFont(ConfigurazioneSistema.font_titolo);\n                etich2 = new Label(\"Scegliere l'extra da addebitare \");\n                etich3 = new Label(\"Addebitare alla stanza numero \");\n\n                // creo pannello di sinistra\n                this.remove(panel1);\n                panel1 = new Panel();\n                panel1.setLayout(gridbag);\n                Utils.constrain(panel1, etich1, 0, 0, 6, 1);\n                Utils.constrain(panel1, etich2, 0, 1, 6, 1, 10, 0, 0, 0);\n                Utils.constrain(panel1, extra, 0, 2, 6, 4, GridBagConstraints.BOTH,\n                                GridBagConstraints.WEST, 1.0, 1.0, 0, 20, 0, 20);\n\n\t\t\t\tthis.remove(panel4);\n\t\t\t\tpanel4 = new Panel();\n\t\t\t\tpanel4.setLayout(gridbag);\n                Utils.constrain(panel4, etich3, 0, 0, 1, 1, 5, 5, 5, 5);\n                Utils.constrain(panel4, num_stanza, 1, 0, 1, 1, GridBagConstraints.NONE,\n                                GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n\n                // aggiungo i pannelli appena creati al resto\n                Utils.constrain(this, panel1, 0, 0, 1, 1, GridBagConstraints.VERTICAL,\n                                        GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\n                Utils.constrain(this, panel4, 0, 2, 1, 1, GridBagConstraints.VERTICAL,\n                                        GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\n        }\n\n        // Per la gestione degli eventi della finestra\n        void inizializza()\n        {\n                conferma.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                scriviSuDB(num_stanza.getText());\n                                dispose();\n                                padre.setEnabled(true);\n                        }\n                });\n\n                addebita.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                if (!errore())\n                                {\n                                \t\taddebito = true;\n                                        aggiornaAddebiti();\n                                }\n                        }\n                });\n\n                deaddebita.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                if (!errore())\n                                {\n                                \t\taddebito = false;\n                                        aggiornaAddebiti();\n                                }\n                        }\n                });\n\n                num_stanza.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                if (!errore())\n                                {\n                                \t\taddebito = true;\n                                        aggiornaAddebiti();\n                                }\n                        }\n                });\n\n                extra.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                if (!errore())\n                                {\n                                \t\taddebito = true;\n                                        aggiornaAddebiti();\n                                }\n                        }\n                });\n        }\n\n        // Ritorna false se si sta' cercando di addebitare un extra in\n        // mancanza dei dati necessari per l'addebito: num_stanza e extra.\n        boolean errore()\n        {\n                if ((num_stanza.getText()).equals(\"\") && (extra.getSelectedIndex() == -1))\n                {\n                        MessageDialog p = new MessageDialog(this, \"Manca stanza e selezione!\");\n                        return true;\n                }\n                else if ((num_stanza.getText()).equals(\"\"))\n                {\n                        MessageDialog p = new MessageDialog(this, \"Manca stanza!\");\n                        return true;\n                }\n                else if (extra.getSelectedIndex() == -1)\n                {\n                        MessageDialog p = new MessageDialog(this, \"Manca selezione!\");\n                        return true;\n                }\n                else if ( (num_stanza.getText()).length() > 4 )\n                {\n                        MessageDialog p = new MessageDialog(this, \"Errore nel numero di stanza!\");\n                        return true;\n                }\n                else\n                        return false;\n        }\n\n        void annullaAddebitiStanzaPrec()\n        {\n                stanza_prec = new String(num_stanza.getText());\n   \t        \taggiornaAvideo();\n        }\n\n        // Aggiorna il panel2, che e' quello di informazione sugli addebiti\n        // di una data stanza, in modo che contenga le informazioni\n        // aggiornate sugli addebiti.\n        void aggiornaAddebiti()\n        {\n                if ( !(stanza_prec.equals(num_stanza.getText())) )\n\t\t\t\t\tAltraStanza();\n                else\n\t\t\t\t\taggiornaAvideo();\n        }\n\n\t\tboolean thereIsModifiche()\n\t\t{\n\t\t\tboolean modifiche = false;\n\t\t\tfor (int i = 0; i < quantita_mod.length; i++)\n\t\t\t\tmodifiche = modifiche || (quantita_mod[i] != 0);\n\t\t\treturn modifiche;\n\t\t}\n\t\t\n        // Reinizzializza l'array degli addebiti in quanto si cambia stanza\n        // e chiede se gli addebiti fatti alla stanza precedente vanno\n        // confermati o meno.\n        void AltraStanza()\n        {\n                Frame msg;\n                FinModifiche p;\n\n                if ( (Principale.db).readStanza(num_stanza.getText()) != null )\n                {\n                \tListaSoggiornanti L;\n\t\t\t\t\tif ( (L = (Principale.db).foundSoggiornanti(num_stanza.getText(), false) ) != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!L.isEmpty())\n\t\t\t\t\t\t{\n\t                        if (!stanza_prec.equals(\"\") && thereIsModifiche())\n\t\t\t\t\t\t\t{\n           \t                    p = new FinModifiche(this, \"Attenzione: cambio di stanza!\");\n           \t                }\n            \t            else\n            \t            {\n\t\t\t\t\t\t\t\triscriviElencoAddebiti();\n\t\t\t\t\t\t\t\tannullaAddebitiStanzaPrec();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmsg = new AvvisoDialog(this, \"Nessun soggiornante occupa la stanza!\");\n\t\t\t\t\t\t\tnum_stanza.setText(stanza_prec);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: errore.\");\n\t\t\t\t\t}\n\t\t\t\t}\n                else\n                {\n\t                msg = new MessageDialog(this, \"Stanza inesistente!\");\n                    num_stanza.setText(stanza_prec);\n                }\n        }\n\n\t\tvoid riscriviElencoAddebiti()\n\t\t{\n\t\t\tMessageDialog msg;\n\t\t\t\n\t\t\telenco_addebiti = (Principale.db).foundAddebiti(num_stanza.getText());\n\t\t\telenco_extra_addebitati = new ListaBeniServizi();\n            if (elenco_addebiti != null)\n            {\n            \t// inizializzo l'array delle modifiche e degli extra addebitati\n                quantita_mod = new int[elenco_addebiti.length()];\n                BeneServizio extra;\n                for (int i=0; i<quantita_mod.length; i++)\n                {\n                \tquantita_mod[i] = 0;\n                \textra = (Principale.db).readBeneServizio( (elenco_addebiti.getAddebito(i+1)).getCodExtra() );\n                \tif (extra == null)\n\t                {\n\t                \tmsg = new MessageDialog(this, \"Uno degli extra addebitati non e' stato trovato!\");\n\t                \textra = new BeneServizio( (elenco_addebiti.getAddebito(i+1)).getCodExtra(), \"Sconosciuto\", 0 );\n\t                }\n                \telenco_extra_addebitati.addBeneServizio( extra );\n                }\n            }\n            else\n                msg = new MessageDialog(this, \"Errore nel database!\");\n\t\t}\n \t\t\n        int posExtraInAddebiti(BeneServizio b)\n        {\n                for (int i = 1; i <= elenco_addebiti.length(); i++)\n                        if ( ((elenco_addebiti.getAddebito(i)).getCodExtra()).equals(b.getCodExtra()) )\n                                return i;\n                return -1;\n        }\n\n        void aggiornaAvideo()\n        {\n        \t\tFrame msg;\n                int supp[];\n\n                BeneServizio extra_scelto = elenco_extra.getBeneServizio( extra.getSelectedIndex() + 1 );\n                int pos;\n                if ((pos = posExtraInAddebiti(extra_scelto)) < 0 && addebito)\n                {\n                        Addebito a = new Addebito(num_stanza.getText(), extra_scelto.getCodExtra(), 0, 0);\n                        elenco_addebiti.addAddebito( a );\n                        elenco_extra_addebitati.addBeneServizio( extra_scelto );\n\n                        // allungo l'array delle quantita' modificate\n                        supp = new int[elenco_addebiti.length()];\n                        for (int i = 0; i<quantita_mod.length; i++)\n                                supp[i] = quantita_mod[i];\n                        supp[supp.length - 1] = 1;\n                        quantita_mod = supp;\n                        pos = quantita_mod.length;\n                        extra_add.setText(extra.getSelectedItem());\n                        continuaAggiornamento();\n                }\n                else\n                {\n                        if (pos < 0)\n                        {\n                                // sto cercando di togliere da un addebito inesistente\n                                msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\n                        }\n                        else\n                        {\n                                // aggiorno tale array per contenere l'addebito appena effettuato\n                                if (addebito)\n                                {\n                                        quantita_mod[pos - 1]++;\n                                        extra_add.setText(extra.getSelectedItem());\n                                        continuaAggiornamento();\n                                }\n                                else\n                                        if ( (quantita_mod[pos - 1]+(elenco_addebiti.getAddebito(pos)).getQuantita()) > 0)\n                                        {\n                                                quantita_mod[pos - 1]--;\n                                                extra_add.setText(extra.getSelectedItem());\n                                                continuaAggiornamento();\n                                        }\n                                        else\n\t\t\t                                msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\n                        }\n                }\n        }\n\n        void continuaAggiornamento()\n        {\n                int i = 1;\n                BeneServizio e;\n                float conto = 0;\n                if (addebiti.getItemCount() > 0)\n                        addebiti.removeAll();\n                while ( i <= elenco_addebiti.length() )\n                {\n\t\t\t\t\tif ( ((elenco_addebiti.getAddebito(i)).getQuantita() + quantita_mod[i-1]) > 0 )\n\t\t\t\t\t{\n                        e = elenco_extra_addebitati.getBeneServizio(i);\n                        if ( Integer.parseInt(e.getCodExtra()) >= 40000000 && Integer.parseInt(e.getCodExtra()) < 50000000)\n                                addebiti.addItem(\"S \"+Utils.completaStringa(e.getDescrizione(), 32)+\" \"+(Principale.config).getValuta()+\".\"+(elenco_addebiti.getAddebito(i)).getTotAddebito());\n                        else if ( Integer.parseInt(e.getCodExtra()) >= 50000000)\n                                addebiti.addItem(\"R \"+Utils.completaStringa(e.getDescrizione(), 32)+\" \"+(Principale.config).getValuta()+\".\"+(elenco_addebiti.getAddebito(i)).getTotAddebito());\n                        else\n                                addebiti.addItem(Utils.completaStringa(e.getDescrizione(), 10)+\n                                \t\t\t\tUtils.completaStringa(\" x \"+(elenco_addebiti.getAddebito(i)).getQuantita(), 5)+\" +(\"+quantita_mod[i-1]+\")\");\n                        conto = conto + (elenco_addebiti.getAddebito(i)).getTotAddebito() + quantita_mod[i-1]*e.getPxUnitario();\n                    }\n                    i++;\n                }\n                totale.setText((Principale.config).getValuta()+\".\"+conto);\n        }\n\n        void scriviSuDB(String stanza)\n        {\n                for (int i = 1; i <= elenco_addebiti.length(); i++)\n                {\n                        if (quantita_mod[i-1] != 0)\n                        {\n                                if ( (quantita_mod[i - 1]+(elenco_addebiti.getAddebito(i)).getQuantita()) > 0)\n                                {\n                                        int j = (Principale.db).addAddebito(stanza, (elenco_addebiti.getAddebito(i)).getCodExtra(), quantita_mod[i-1] );\n                                        if (j < 0)\n                                                DataBase.visErrore(j);\n                                }\n                                else\n                                {\n                                        int j = (Principale.db).delAddebito(stanza, (elenco_addebiti.getAddebito(i)).getCodExtra() );\n                                        if (j < 0)\n                                                DataBase.visErrore(j);\n                                }\n                        }\n                }\n        }\n}\n\n/****************************************************************************/\nclass FinModifiche extends Frame\n{\n        Button ok, annulla;\n        Label msg = new Label(\"Si vogliono salvare le modifiche degli addebiti della stanza precedente?\");\n        GridBagLayout gridbag = new GridBagLayout();\n        String titolo;\n\n        MascheraAddebiti padre = null;\n\n        public FinModifiche(MascheraAddebiti parent, String title)\n        {\n                super(title);\n\n\t\t\t\tpadre = parent;\n\t\t\t\tpadre.setEnabled(false);\n\n                titolo = new String(title);\n\n                this.setLayout(gridbag);\n                ok = new Button(\"Salva le modifiche\");\n                annulla = new Button(\"Annulla le modifiche\");\n                Utils.constrain(this, msg, 0, 0, 5, 2, GridBagConstraints.BOTH,\n                                        GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\n                Utils.constrain(this, annulla, 1, 2, 1, 1, GridBagConstraints.NONE,\n                                        GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\n                Utils.constrain(this, ok, 3, 2, 1, 1, GridBagConstraints.NONE,\n                                        GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\n                this.pack();\n                init();\n                setVisible(true);\n        }\n\n        public void init()\n        {\n                ok.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                padre.scriviSuDB(padre.stanza_prec);\n                                inComune();\n                        }\n                });\n\n                annulla.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                inComune();\n                        }\n                });\n        }\n\n        void inComune()\n        {\n                padre.riscriviElencoAddebiti();\n                padre.annullaAddebitiStanzaPrec();\n                padre.setEnabled(true);\n                dispose();\n        }\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d38"},"name":"SubCommissioni.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport common.utility.*;\n\npublic class SubCommissioni extends Frame\n{\n   \tLabel label;\n   \tPanel panel0, panel1;\n   \tButton Inserimento, Modifica, Cancellazione, Ricerca, Annulla;\n   \tGridBagLayout gridbag=new GridBagLayout();\n   \tFrame p = new Frame();\n   \tMascheraRicercaStanza mask_ric;\n\tModificaCommissioni mask_mod; \n\tCancellaCommissioni mask_canc;\n\tVediCommissione mask_vis;\n\t\n    public SubCommissioni()\n    {\n        super(\"Commissioni\");\n        setup();\n        init();\n        pack();\n    }\n\n    void setup()\n    {\n        this.setFont(ConfigurazioneSistema.font_sub);\n        panel0=new Panel();\n        panel0.setLayout(gridbag);\n        panel0.setBackground(Color.white);\n        Immagine  figura = new Immagine(\"camera2.jpg\");\n        Etichetta etich = new Etichetta(\"Commissioni.gif\");\n        Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n        Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n       \n        panel1 = new Panel();\n        panel1.setLayout(new GridLayout(5,1));\n        Inserimento = new Button(\" Inserimento \");\n        Modifica = new Button(\" Modifica \");\n        Cancellazione = new Button(\" Cancellazione \");\n\t\tRicerca = new Button(\" Ricerca... \");        \n        Annulla = new Button(\" Indietro \");\n        panel1.add(Inserimento);\n        panel1.add(Modifica);\n        panel1.add(Cancellazione);\n        panel1.add(Ricerca);\n        panel1.add(Annulla);\n \n        this.setLayout(gridbag);\n        Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n        Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n    }\n\n    void init()\n    {\n        Annulla.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                dispose();\n                p.setEnabled(true);\n            }\n        });\n      \n        Inserimento.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                startRic();\n            }\n        });\n      \n        Modifica.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                startMod();\n            }\n        });\n\n        Cancellazione.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                startCanc();\n            }\n        });\n        \n        Ricerca.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                startVis();\n            }\n        });\n    }\n\n\tvoid startRic()\n\t{\n\t\tthis.setEnabled(false);\n\t\tmask_ric = new MascheraRicercaStanza(\"Ricerca stanze per commissioni\",1);\n\t\tmask_ric.setVisible(true);\n\t\tmask_ric.padre = this; \n\t}\n\t\n\tvoid startMod()\n\t{\n\t\tthis.setEnabled(false);\n\t\tmask_mod = new ModificaCommissioni();\n\t\tmask_mod.setVisible(true);\n\t\tmask_mod.padre = this; \n\t}\n\t\n\tvoid startCanc()\n\t{\n\t\tthis.setEnabled(false);\n\t\tmask_canc = new CancellaCommissioni();\n\t\tmask_canc.setVisible(true);\n\t\tmask_canc.padre = this; \n\t}\n\n\tvoid startVis()\n\t{\n\t\tthis.setEnabled(false);\n\t\tmask_vis = new VediCommissione();\n\t\tmask_vis.setVisible(true);\n\t\tmask_vis.padre = this; \n\t}\n\t\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d39"},"name":"MascheraRicercaSoggiornante.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.ListaSoggiornanti;\n\npublic class MascheraRicercaSoggiornante extends Frame\n{\n   Button Annulla, Conferma;\n   TextField testo[];\n   Label etichetta1, etichetta2, etichetta3, etichetta4, etichetta5, label1, label2,\n         label3, label5;\n   Panel panel[];\n   CheckboxGroup checkbox_group;\n   Checkbox[] checkboxes;\n   GridBagLayout gridbag = new GridBagLayout();\n   List list_soggiornanti;\n   Frame padre, figlio;\n   \n   // la seguente variabile serve per tenere in memoria la lista dei clienti\n   // cercati nello storico\n   ListaSoggiornanti elenco_soggiornanti;\n   \t\n   public MascheraRicercaSoggiornante(Frame parent)\n   {\n      super(\"Ricerca soggiornante\");\n      padre = parent;\n      padre.setEnabled(false);\n      setupPanels();\n      pack();\n      init();\n      this.setVisible(true);\n   }\n\n   void setupPanels()\n   {\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      //Creo i pulsanti\n      Annulla = new Button(\"Annulla \");\n      //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n      Conferma = new Button(\"Conferma\");\n      Conferma.setEnabled(false);\n      //Conferma.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n\n      //Creo le etichette\n      etichetta1 = new Label(\"Selezionare il tipo di ricerca che si desidera effettuare:\");\n      etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta2 = new Label(\"Risultato della ricerca:\");\n      etichetta2.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta3 = new Label(\"Ricerca per stanza:\");\n      etichetta3.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta4 = new Label(\"Ricerca per nome:\");\n      etichetta4.setFont(ConfigurazioneSistema.font_titolo);\n      label1 = new Label(\"Stanza numero\");\n      label2 = new Label(\"Cognome\");\n      label3 = new Label(\"Nome\");\n\n      //Creo un Checkbox ad esclusione\n      checkbox_group = new CheckboxGroup();\n      checkboxes = new Checkbox[2];\n      checkboxes[0] = new Checkbox(\"Ricerca per stanza\",checkbox_group,false);\n      checkboxes[1] = new Checkbox(\"Ricerca per nome\",checkbox_group,false);\n\n\n      //Creo i TextField e li rendo non editabili\n      testo = new TextField[3];\n      testo[0] = new TextField(\"\", 6);\n      testo[1] = new TextField(\"\", 25);\n      testo[2] = new TextField(\"\", 25);\n      for(int i=0;i<testo.length;++i)\n\t      testo[i].setEditable(false);\n\n      //creo una TextArea\n      list_soggiornanti = new List(10, false);\n      list_soggiornanti.setFont(ConfigurazioneSistema.font_allineato);\n\n      panel=new Panel[5];\n      for(int i=0;i<panel.length;++i)\n      {\n         panel[i]=new Panel();\n         panel[i].setLayout(gridbag);\n      }\n      //Creo il pannello in alto a sinistra\n      Utils.constrain(panel[1], etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0); \n      Utils.constrain(panel[1], checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0); \n      Utils.constrain(panel[1], checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n            \n      //Creo il pannello ricerca per stanza\n      Utils.constrain(panel[2], etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[2], label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[2], testo[0], 1, 1, 1, 1, GridBagConstraints.NONE,\n                      GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\n      //Creo il pannello ricerca per nome e cognome\n      Utils.constrain(panel[3], etichetta4, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[3], label2, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[3], testo[1], 1, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel[3], label3, 0, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 0.0, 0.0, 20, 5, 0, 20);\n      Utils.constrain(panel[3], testo[2], 1, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 1.0, 0.0, 20, 0, 0, 0);\n\n      //Creo il pannello dei pulsanti\n      Utils.constrain(panel[0], Annulla, 1, 0, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.EAST, 0.3, 0.0, 10, 0, 10, 5);\n      Utils.constrain(panel[0], Conferma, 3, 0, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.WEST, 0.3, 0.0, 10, 5, 10, 0);\n\n      //Creo il pannello contenente la list_soggiornanti \n      Utils.constrain(panel[4], etichetta2, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[4], list_soggiornanti, 0, 1, 1, 1, GridBagConstraints.BOTH,\n                         GridBagConstraints.NORTHWEST, 1.0, 1.0, 0, 5, 0, 20);\n\n      //Attacco i pannelli al frame\n      this.setLayout(gridbag);\n      Utils.constrain(this, panel[1], 0, 0, 5, 4, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[2], 0, 4, 5, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[3], 0, 6, 5, 3,GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[0], 0, 11, 5, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.SOUTHEAST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[4], 0, 12, 5, 7, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n   }\n\n   public void init()\n   {\n      checkboxes[0].addItemListener(new ItemListener()   \n      {\n         public void itemStateChanged(ItemEvent e)\n         {\n            if(checkboxes[0].getState())\n            {\n             \tif (list_soggiornanti.getItemCount() > 0)\n\t\t\t\t\tlist_soggiornanti.removeAll();   \n                testo[0].setEditable(true);\n                for(int i=1;i<testo.length;++i)\n                {  \n                \ttesto[i].setText(\"\");\n                   \ttesto[i].setEditable(false);\n\t\t\t\t}\n\t\t\t\tConferma.setEnabled(true);\n             }\n         }\n      });\n                      \n      checkboxes[1].addItemListener(new ItemListener()   \n      {\n         public void itemStateChanged(ItemEvent e)\n         {\n            if(checkboxes[1].getState())\n            {\n                if (list_soggiornanti.getItemCount() > 0)\n\t\t\t\t\tlist_soggiornanti.removeAll();\n                for(int i=1;i<3;++i)\n                   testo[i].setEditable(true);\n                testo[0].setText(\"\");\n                testo[0].setEditable(false);\n\t\t\t\tConferma.setEnabled(true);\n             }\n         }\n      });\n\n      Conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartConferma();\n         }\n       });\n\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            padre.setEnabled(true);\n          }\n       });\n       \n  \t\tlist_soggiornanti.addActionListener(new ActionListener()\n      \t{\t\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartVediSogg();\n          \t}\n       \t});   \n   }\n   \n   void startConferma()\n   {\n\t\tint i;\n\t\tFrame msg;\n\t\t\t\t\n\t\tif (!errori())\n\t\t{\n\t\t\tif(checkboxes[0].getState())\n\t\t\t\telenco_soggiornanti = (Principale.db).foundSoggiornanti(testo[0].getText(),true);\n\t\t\telse if(checkboxes[1].getState())\n\t\t\t\telenco_soggiornanti = (Principale.db).foundSoggiornanti(testo[1].getText(), testo[2].getText());\n\t\t\telse\n\t\t\t\telenco_soggiornanti = new ListaSoggiornanti();\n\t\t\tif (elenco_soggiornanti != null)\n\t\t\t{\n\t\t\t\tif (list_soggiornanti.getItemCount() > 0)\n\t\t\t\t\tlist_soggiornanti.removeAll();\n\t\t\t\tfor (i = 1; i <= elenco_soggiornanti.length(); i++)\n\t\t\t\t\tlist_soggiornanti.addItem((elenco_soggiornanti.getSoggiornante(i)).toString());\n\t\t\t\tif (list_soggiornanti.getItemCount() == 0)\n\t\t\t\t\tmsg = new AvvisoDialog(this, \"Trovata nessuna corrispondenza!\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database!\");\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Errore nei parametri!\");\n   }\n   \n   boolean errori()\n   {\n\t\tif(checkboxes[0].getState())\n\t\t\treturn ( (testo[0].getText()).length() > 4 );\n\t\telse if(checkboxes[1].getState())\n\t\t\treturn( (testo[1].getText()).length() > 20 || (testo[2].getText()).length() > 20 );\n\t\telse\n\t\t\treturn true;\n   }\n\n\tvoid startVediSogg()\n\t{\n\t\tif ( (elenco_soggiornanti != null) && (elenco_soggiornanti.length()>0) )\t\t\n\t\t\tfiglio = new VediSoggiornante(this, \n\t\t\telenco_soggiornanti.getSoggiornante(list_soggiornanti.getSelectedIndex()+1));\n\t\t\t\n\t}\n}\n\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d3a"},"name":"MascheraRicercaStanza.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d19"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class MascheraRicercaStanza extends Frame\n{\n  \t //Dichiaro gli oggetti che mi serviranno per costruire la finestra\n    Panel panel1, panel2, panel3, panel4, panel5;\n\tLabel etichetta1, etichetta2, etichetta3, etichetta, etichetta4, etichetta5;\n\tButton  Avvio, Annulla, ShowDisp, Annulla1, Conferma;\n\tTextField data_inizio, data_fine, nome_ag;\n\tList lista;\n\tCheckbox con_ag;\n\tGridBagLayout gridbag = new GridBagLayout();\n\tInserisciPrenotazione pren;\n\tInserisciCommissioni comm;\n\tFrame figlio;\n\tFrame padre = new Frame();\n    MascheraCambio father;\n    int caller;\n    ListaStanze stanze_disp;\n    Date save_date;\n\tString nomi_agenzie[] = new String[0];\n\n\t// seguono due variabili necessarie per il passaggio dei parametri \n\t// della Inserisci\n    String data1;\n    String data2;\n    \n    public MascheraRicercaStanza(String title, int c) \n    {\n        super(title);\n        caller = c;\n        setupPanels();\n        init();\n        pack();\n    }\n                     \n    void setupPanels()\n    {\n\t\tthis.setFont(ConfigurazioneSistema.font_base);\n        //Creo i TextField\n        data_inizio = new TextField(\"\", 12);\n        data_fine = new TextField(\"\", 12);\n\t\tnome_ag = new TextField(\"\", 20);\n\t\tnome_ag.setEditable(false);\n        \n        //Creo i pulsanti e ne disabilito due\n        Annulla = new Button(\"Indietro\");\n        Annulla1 = new Button(\"Annulla\");\n        Conferma = new Button(\" Scegli \");\n        Avvio = new Button(\"Avvio Ricerca\");\n        ShowDisp = new Button(\"Disponibilita'\");\n        Annulla1.setEnabled(false);\n        Conferma.setEnabled(false);\n\n        //Creo le etichette\n        etichetta= new Label(\"Periodo di soggiorno\");\n        etichetta.setFont(ConfigurazioneSistema.font_titolo);\n        etichetta1 = new Label(\"Data inizio:\");\n        etichetta2 = new Label(\"Data fine:\");\n        etichetta3 = new Label (\"Risultato della ricerca:\");\n        etichetta3.setFont(ConfigurazioneSistema.font_titolo);\n\t\tetichetta4 = new Label(\" Nome agenzia\");\n\t\tetichetta5 = new Label (\"Prenotazione di stanze commissionate:\");\n        etichetta5.setFont(ConfigurazioneSistema.font_titolo);\n\n        //Creo la lista\n        lista = new List(15, false);\n\n       \t//Creo il checkbox\n       \tcon_ag = new Checkbox(\" Prenotazione tramite agenzia\", false);\n       \n        //Creo il pannello in alto      \n        panel1 = new Panel();\n        panel1.setLayout(gridbag);\n        Utils.constrain(panel1, etichetta, 0, 0, 4, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n        Utils.constrain(panel1, etichetta1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel1, data_inizio, 1, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,0,0,0,0);\n        Utils.constrain(panel1, etichetta2, 2, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel1,data_fine, 3, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n        \n        panel5 = new Panel();\n        panel5.setLayout(gridbag);\n        Utils.constrain(panel5, etichetta5, 0, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);        \n        Utils.constrain(panel5, con_ag,     0, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel5, etichetta4, 1, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel5, nome_ag,    2, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);             \n\n        \n        \n        //Creo un pannello con due pulsanti\n        panel2 = new Panel();\n        panel2.setLayout(gridbag);\n        Utils.constrain(panel2, Annulla, 1, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.3, 0.0, 0, 0, 0, 1);\n        Utils.constrain(panel2, Avvio, 2, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.3, 0.0, 0, 0, 0, 1);\n        Utils.constrain(panel2, ShowDisp, 3, 0, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST, 0.3, 0.0, 0, 0, 0, 1);             \n\n        //Creo il pannello contenente la lista\n        panel3 = new Panel();\n        panel3.setLayout(gridbag);\n        Utils.constrain(panel3, etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel3,lista, 0, 1, 4, 3, GridBagConstraints.BOTH,\n                     GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);\n\n        //Creo il pannello in basso con due pulsanti\n        panel4 = new Panel();\n        panel4.setLayout(gridbag);\n        Utils.constrain(panel4, Annulla1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                     GridBagConstraints.SOUTHEAST, 0.3, 0.0, 0, 0, 0, 10);\n        Utils.constrain(panel4, Conferma, 1, 1, 1, 1,GridBagConstraints.NONE,\n                     GridBagConstraints.SOUTHWEST, 0.3, 0.0, 0, 0, 0, 0);\n\n        \n        //Attacco i pannelli al frame\n        this.setLayout(gridbag);\n        Utils.constrain(this, panel1, 0, 0, 4, 2, GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 15, 10, 10, 10);\n        Utils.constrain(this, panel5, 0, 2, 4, 1, GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.NORTHWEST, 1.0, 0.0, 15, 10, 10, 10);             \n        Utils.constrain(this, panel2, 0, 3, 4, 1,GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.NORTHEAST, 1.0, 0.0, 10, 10, 0, 10);\n        Utils.constrain(this, panel3, 0, 4, 4, 3, GridBagConstraints.BOTH,\n                     GridBagConstraints.CENTER, 2.0, 2.0, 10, 10, 10, 10);\n        Utils.constrain(this, panel4, 0, 7, 4, 1, GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.SOUTHWEST, 1.0, 1.0, 10, 10, 15, 10);\n\t\t\n\t\tif (caller == 1)\n\t\t{\t\t\n\t\t\tpanel5.setVisible(false);\n\t\t\tpack();\n\t\t}\n\t}\n\n    //Gestione degli eventi\n    public void init()\n    {\n        //Ascoltatore del pulsante Avvio,se il pulsante viene premuto viene\n        //lanciata la procedura di ricerca stanze libere\n        Avvio.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tctrlAvvio();\n            } \n        });\n\n        //Ascoltatore del pulsante Annulla,se il pulsante viene prumeto si torna\n        //alla maschera precedente\n        Annulla.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                dispose();\n                if (caller == 3)\n                \tfather.setEnabled(true);\n            \telse\n            \t   \tpadre.setEnabled(true);\n            }\n        });\n        \n        //Ascoltatore del pulsante ShowDisp,se il pulsante viene premuto si \n        //mostrera' una maschera con le disponibilita dell'albergo\n        ShowDisp.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tlookDisp();                \n            }\n        });\n\n        //Ascoltatore del pulsante Annulla1,se il pulsante viene premuto si\n        //vengono riabilitati i componenti del pannello in alto e\n        //disabilitati quelli del pannello in basso\n        Annulla1.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n            \tstartAnnulla1();\n\t\t\t}\n\t\t});\n\n        //Ascoltatore del pulsante Conferma, se il pulsante viene premuto si apre\n        //la finestra riguardante l'inserimento della prenotazione\n        Conferma.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tstartInserimento();\n\t\t\t}\n\t\t});\n\t\t\t\n\t\tlista.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartInserimento();\n\t\t\t}\n        });\n\t\n\t\tcon_ag.addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n               \t\n               \tif (con_ag.getState())\n               \t\tnome_ag.setEditable(true);\n               \telse\n               \t{\n               \t\tnome_ag.setEditable(false);\n         \t\t\tnome_ag.setText(\"\");\n         \t\t}\n         \t}\n      \t});\n\t}\n\n\tboolean dataInizioIsNotBeforeToday()\n\t{\n\t\tDate inizio_pren = DateUtils.convertDate(data_inizio.getText());\n\t\tDate today = new Date();\n\t\t\n\t\tif (inizio_pren.getYear() < today.getYear())\n\t\t\treturn false;\n\t\telse\n\t\t\tif (inizio_pren.getYear() > today.getYear())\n\t\t\t\treturn true;\n\t\t\telse // l'anno e' il medesimo\n\t\t\t\tif (inizio_pren.getMonth() < today.getMonth())\n\t\t\t\t\treturn false;\n\t\t\t\telse\n\t\t\t\t\tif (inizio_pren.getMonth() > today.getMonth())\n\t\t\t\t\t\treturn true;\n\t\t\t\t\telse // l'anno e il mese sono i medesimi\n\t\t\t\t\t\tif (inizio_pren.getDate() < today.getDate())\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn true;\n\t}\n\t\n\t/*\tse la ricerca viene lanciata per un cambio stanza (caller = 3) si deve\n\t * \timpedire che la data di fine venga posticipata rispetto la fine del soggiorno\n\t *\to anticipata rispetto la data del cambio stanza.\n\t */\t\n\tvoid ctrlAvvio()\n\t{\n\t\tFrame msg;\n\n\t\tif (Utils.dateEPeriodoCorretti(this, data_inizio.getText(), data_fine.getText()))\n\t\t{\n\t\t\tif (con_ag.getState() && nome_ag.getText().equals(\"\"))\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this, \" Manca il nome dell'agenzia! \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tListaDisponibilita L_disp = (Principale.db).elencoDisponibilita();\n\t\t\tif (L_disp == null)\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (caller == 3)\n\t\t\t{\t\n\t\t\t\tif (Utils.data1MaggioreData2(DateUtils.convertDate(data_fine.getText()), save_date) )\n\t\t\t\t{\t\n\t\t\t\t\tmsg = new AvvisoDialog(this, \"ATTENZIONE: la data non puo' essere posticipata\");\n\t\t\t\t\tdata_fine.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(save_date)));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tif (Utils.data1MinoreData2(DateUtils.convertDate(data_fine.getText()), DateUtils.convertDate(data_inizio.getText()) ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new AvvisoDialog(this, \"ATTENZIONE: la data non puo' essere precedente alla data di inizio\");\n\t\t\t\t\t\tdata_fine.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(save_date)));\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstanze_disp = new ListaStanze();\n\t\t\t\t\t\tstartAvvio(L_disp, 0);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (dataInizioIsNotBeforeToday())\n\t\t\t\t{\n\t\t\t\t\tstanze_disp = new ListaStanze();\n\t\t\t\t\tstartAvvio(L_disp, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tmsg = new MessageDialog(this, \" La data di inizio deve essere maggiore o uguale di quella odierna! \");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid startAnnulla1()\n\t{\n\t\tdata_inizio.setEditable(true);\n\t\tdata_fine.setEditable(true);\n\t\tcon_ag.setEnabled(true);\n\t\tif ( con_ag.getState() )\n\t\t\tnome_ag.setEditable(true);\n\t\tAnnulla.setEnabled(true);\n\t\tAvvio.setEnabled(true);\n\t\tAnnulla1.setEnabled(false);\n\t\tConferma.setEnabled(false);\n\t\tif (lista.getItemCount() > 0)\n\t\t\tlista.removeAll();\n\t\tstanze_disp = new ListaStanze();\n\t}\n\t\n\tvoid startAvvio(ListaDisponibilita L_disp, int k)\n\t{\n\t\tif (con_ag.getState())\n\t\t\tstartSearchComm(L_disp, k);\n\t\t\n\t\t// le date sono corrette se si arriva qui in quanto controllate in ctrlAvvio()\n\t\tFrame msg;\n\t\tString str = new String(\"\");\n\t\tListaCommissionamenti L_comm = new ListaCommissionamenti();\n\t\tListaStanze elenco_stanze_disp = new ListaStanze();\n\n\t\t// variabili necessarie per passaggio dei parametri della Inserisci\n\t\tdata1 = DateUtils.parseDate(data_inizio.getText());\n\t\tdata2 = DateUtils.parseDate(data_fine.getText());\n\n\t\t// scansione delle disponibilita\n\t\tStanza stanza = null;\n\t\tDisponibilita disp_attuale = null;\n\t\tfor (int i = 1; i <= L_disp.length(); i++)\n\t\t{\n\t\t\tdisp_attuale = L_disp.getDisponibilita(i);\n\t\t\tif ( disp_attuale.isDisponibile( DateUtils.convertDate(data_inizio.getText()), DateUtils.convertDate(data_fine.getText()), Flag.DISPONIBILE) )\n\t\t\t{\n\t\t\t\tstanza = (Principale.db).readStanza(disp_attuale.getNumStanza());\n\t\t\t\tif (stanza != null)\n\t\t\t\t{\n\t\t\t\t\telenco_stanze_disp.addStanza(stanza);\n\t\t\t\t\tstanze_disp.addStanza(stanza);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!stanze_disp.isEmpty())\n\t\t{\n\t\t\tAvvio.setEnabled(false);\n\t\t\tAnnulla.setEnabled(false);\n\t\t\tdata_inizio.setEditable(false);\n\t\t\tdata_fine.setEditable(false);\n\t\t\tAnnulla1.setEnabled(true);\n\t\t\tConferma.setEnabled(true);\n\t\t\tcon_ag.setEnabled(false);\n\t\t\tnome_ag.setEditable(false);\n\t\t\tfor (int i = 1; i <= elenco_stanze_disp.length(); i++)\n\t\t\t\tlista.addItem(str+(elenco_stanze_disp.getStanza(i)).toString());\n\t\t}\n\t\telse\n\t\t\tif (k == 0)\n\t\t\t\tif (!con_ag.getState())\n\t\t\t\t\tmsg = new AvvisoDialog(this, \" Nessuna stanza disponibile in tale periodo! \");\n\t\t\t\telse\n\t\t\t\t\tmsg = new AvvisoDialog(this, \" Nessuna stanza disponibile o commisionata in tale periodo! \");\t\n\t}\n\t\n\tvoid startSearchComm(ListaDisponibilita L_disp, int k)\n\t{\n\t\t// le date sono corrette se si arriva qui in quanto controllate in ctrlAvvio()\n\t\tFrame msg;\n\t\t\n\t\tCommissionamento c;\n\t\tStanza stanza = null;\n\t\tDisponibilita disp_loc = null;\n\t\tListaCommissionamenti L_comm = new ListaCommissionamenti();;\n\t\tListaStanze elenco_stanze_disp = new ListaStanze();\n\t\tDate d1 = DateUtils.convertDate(data_inizio.getText());\n \t\tDate d2 = DateUtils.convertDate(data_fine.getText());\n\t\t\n\t\tdata1 = DateUtils.parseDate(data_inizio.getText());\n\t\tdata2 = DateUtils.parseDate(data_fine.getText());\n\t\tL_comm = (Principale.db).foundCommissionamentiSenzaLike(nome_ag.getText());\n\t\tif (L_comm == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle commissioni! \");\n\t\t\treturn;\n\t\t}\n\t\tif ( !L_comm.isEmpty() )\n\t\t{\n\t\t\tnomi_agenzie = new String[L_comm.length()];\n\t\t\tint indice_nomi = 0;\n\t\t\tfor (int i = 1; i <= L_comm.length(); i++)\n\t\t\t{\n\t\t\t\tc = L_comm.getCommissionamento(i);\n\t\t\t\t// Controllo che le date inserite appartengano al periodo commissionato\n\t\t\t\tif( (!Utils.data1MaggioreData2(c.getInizioComm(), d1)) && (!(c.getFineComm()).before(d2))) \n\t\t\t\t{\n\t\t\t\t\tdisp_loc = Utils.getDispOfRoom(L_disp, c.getNumStanza(), false);\n\t\t\t\t\tif (disp_loc.isDisponibile(d1, d2, Flag.COMMISSIONATA))\n\t\t\t\t\t{\n\t\t\t\t\t\tstanza = (Principale.db).readStanza(disp_loc.getNumStanza());\n\t\t\t\t\t\tif (stanza != null)\n\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\telenco_stanze_disp.addStanza(stanza);\n\t\t\t\t\t\t\tstanze_disp.addStanza(stanza);\n\t\t\t\t\t\t\tnomi_agenzie[indice_nomi] = new String(c.getNomeAgenzia());\n\t\t\t\t\t\t\tindice_nomi++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\tif (!stanze_disp.isEmpty())\n\t\t{\n\t\t\tAvvio.setEnabled(false);\n\t\t\tAnnulla.setEnabled(false);\n\t\t\tdata_inizio.setEditable(false);\n\t\t\tdata_fine.setEditable(false);\n\t\t\tAnnulla1.setEnabled(true);\n\t\t\tConferma.setEnabled(true);\n\t\t\tfor (int i = 1; i <= elenco_stanze_disp.length(); i++)\n\t\t\t\tlista.addItem(\"COMMISSIONATA A \"+nomi_agenzie[i-1]+\" \"+(elenco_stanze_disp.getStanza(i)).toString());\n\t\t}\n\t} // startSearchComm\n\t\n\tvoid restartAvvio()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tListaDisponibilita L_disp = (Principale.db).elencoDisponibilita();\n\t\tif (L_disp == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\tstartAnnulla1();\n\t\tstartAvvio(L_disp, 1);\n\t}\n\t\n    void startInserimento()\n    {\n\t\tFrame msg;\n\t\tif (lista.getSelectedIndex() != -1)\n\t\t\tswitch (caller)\n\t\t\t{\n\t\t\t\tcase 1: visualInsertComm(); break;\n\t\t\t\tcase 2: visualInsertPren(); break;\n\t\t\t\tcase 3: returnFreeRoom(); break;\n\t\t\t}\t\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \" Manca la selezione! \");\n    }\n    \n    void lookDisp()\n    {\n   \t \t\tfiglio = new MascheraDisponibilita(this, nome_ag.getText());\n    }\n    \n    void visualInsertPren()\n\t{\n        this.setEnabled(false);\n        Stanza stanza = stanze_disp.getStanza(lista.getSelectedIndex()+1);\n\t\tif (con_ag.getState())\n\t        pren = new InserisciPrenotazione(stanza, data1, data2, nome_ag.getText());\n\t\telse \n\t        pren = new InserisciPrenotazione(stanza, data1, data2, \"\");\n        pren.setVisible(true);\n        pren.mask_ricerca = this;\n    } \n\n    void visualInsertComm()\n\t{\n        this.setEnabled(false);\n        Stanza stanza = stanze_disp.getStanza(lista.getSelectedIndex()+1);\n        comm = new InserisciCommissioni(stanza, data1, data2);\n        comm.setVisible(true);\n        comm.mask_ricerca = this;\n    }\n    \n    void returnFreeRoom()\n\t{\n        Stanza stanza = stanze_disp.getStanza(lista.getSelectedIndex()+1);\n        father.stanza2.setText(stanza.getNumStanza());\n        father.setEnabled(true);\n        father.stanza1.setEditable(false);\n        father.Ricerca.setEnabled(false);\n    \tfather.Conferma.setEnabled(true);\n    \tdispose();\n    }\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d3b"},"name":"InserisciStanze.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class InserisciStanze extends DescrittoreStanze\n{\n\tpublic InserisciStanze()\n\t{\n\t\tsuper(\"Inserimento dei dati delle stanze\", \"Inserisci\",1);\n\t\tinit();\n\t}\n\t\n\tpublic void init()\n\t{\n\t\tCerca.setEnabled(false);\n\t\t\n\t\tAzione.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartAzione();\n\t\t\t}\n\t\t});\n\t} // init\n\n\tvoid startAzione()\n\t{\n\t\tFrame msg;\n\t\tListaStanze L_st = (Principale.db).elencoStanze();\n\t\tif ( L_st.length() < (Principale.config).getNumStanze() ) \n\t\t{\t\n\t\t\tif ( !errori() )\n\t\t\t{\n\t\t\t\tStanza room = readDatiStanza();\n\t\t\t\tint j;\n\t\t\t\tif ((j = (Principale.db).writeStanza(room)) == DataBase.OK)\n\t\t\t\t{\n\t\t\t\t\tcleanFields();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il data base: \"+DataBase.strErrore(j));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tmsg = new AvvisoDialog(this, \"Impossibile inserire la stanza: e' stato raggiunto il numero massimo di stanze gestibile\");\t\t\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d3c"},"name":"ControllaPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class ControllaPrenotazione extends MascheraPrenotazione\n{  \n\tPrenotazione p;\t   \n   \tPrenotazioniScadute parent;\n   \n   \tpublic ControllaPrenotazione(Prenotazione pren, Stanza room, PrenotazioniScadute papa)\n    {\n        super(room,\"\",\"\",\"Controlla dei dati della prenotazione\",\" Rinnova \",5,pren.getPensionamento());\n        p = pren;\n        parent = papa;\n        init();\n    }\n        \n    public void init()\n    {\n    \twriteDatiPren(p);\n    \tfor(int i=0; i<11; i++)\n    \t\ttesto[i].setEditable(false);\n    \ttesto[9].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(p.getDataPren())));\t    \n     \n    \n    \tAzione.addActionListener(new ActionListener()\n    \t{\n            public void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tstartRinnova();\n            \tdispose();\n            \tparent.dispose();\n            \tstartUpdate();\n\n            }       \n    \t});\n    \t\n    \tCancella.addActionListener(new ActionListener()\n    \t{\n            public void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tstartCancella();\n\t\t\t\tdispose();\n            \tparent.dispose();\n            \tstartUpdate();\n\n            }       \n    \t});\n\n    } \n\n\tvoid startUpdate()\n\t{\n          \tFrame supp = (parent.padre).p;\n           \t((Principale) supp).updateBloccate();\n\t}\n\n\tvoid startCancella()\n\t{\n\t\tFrame msg;\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\tif (elenco_disp != null)\n\t\t{\n\t\t\t(Principale.db).delPrenotazione(p.getIdPrenotazione());\n    \t  \tUtils.aggiornaDisp(elenco_disp, p.getNumStanza(), p.getInizioSogg(), p.getFineSogg(), Flag.DISPONIBILE, Flag.BLOCCATA, true);\n       \t\tif (p.getTramiteAgenzia() == Const.SI)\n\t       \t\tUtils.restoreCommissioni(p.getNumStanza());\n    \t   \tdispose();\n       \t\tpadre.setEnabled(true);\n       \t}\n       \telse\n       \t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita! \");\n\t} \n\t\n\tvoid startRinnova()\n\t{\n\t\tp.setDataPren(new Date());\n\t\t(Principale.db).changePrenotazione(p.getIdPrenotazione(), p.getNumStanza(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tp.getNumPers(),p.getNome(),p.getCognome(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tp.getNumTel(), p.getInizioSogg(), p.getFineSogg(), p.getDataPren(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tp.getCaparra(), p.getRichLettoAgg(), p.getPensionamento(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tp.getTramiteAgenzia(), p.getNomeAgenzia(), p.getRichParticolari());\t\n\t\tdispose();\n\t\tparent.setEnabled(true);\t\t\n\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d3d"},"name":"MascheraVisualizzazioneConto.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.io.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\nimport java.util.Date;\nimport java.util.Properties;\n\npublic class MascheraVisualizzazioneConto extends Frame\n{\n   \tButton Stampa,OK,Partenza;\n   \tTextField testo1, testo2, testo3, testo4;\n   \tLabel etichetta, label1, label2, label3, label4;\n   \tPanel  panel1, panel2, panel3;\n   \tGridBagLayout gridbag = new GridBagLayout();\n   \tTextArea text;\n   \tBufferedReader inStream;\n\tint chiusura; \n\t\n\tMascheraCalcoloConto conto = new MascheraCalcoloConto(new Frame());\n\n   \tpublic MascheraVisualizzazioneConto(String t0, String t1, String t2, String t3, \n   \t\t\t\t\t\t\t\t\t\tString t4, int tipo)\n   \t{\n      \tsuper(\"Visualizzazione del conto\");\n      \tchiusura = tipo;\n      \tsetup(t0,t1,t2,t3,t4);\n   \t  \treadConto();\t\n      \tinit();\n      \tpack();\n   \t}\n\n   void setup(String t0, String t1, String t2, String t3, String t4)\n   {\n      for (int i=0; i<conto.testo.length-1; i++)\n\t\t\tconto.testo[i].setText(\"\");\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      etichetta = new Label(\"Intestazione\");\n      etichetta.setFont(ConfigurazioneSistema.font_titolo);\n      label1 = new Label(\"Stanza numero\");\n      label2 = new Label(\"Cognome\");\n      label3 = new Label(\"Nome\");\n      label4 = new Label(\"Lista stanze\");\n      Stampa = new Button(\"  Stampa  \");\n      OK = new Button(\" Indietro \");\n      Partenza = new Button(\" Chiudi conto \");\n      testo1 = new TextField(\"\",4);\n      testo2 = new TextField(\"\",20);\n      testo3 = new TextField(\"\",20);\n      testo4 = new TextField(\"\",30);\n      testo1.setText(t0+t3);\n      testo2.setText(t1);\n      testo3.setText(t2);\n      testo4.setText(t4);\n      testo1.setEditable(false);\n      testo2.setEditable(false);\n      testo3.setEditable(false);\n      testo4.setEditable(false);\n      \n      text = new TextArea(25,50);\n      text.setEditable(false);\n      text.setFont(ConfigurazioneSistema.font_allineato);\n\n      panel1=new Panel();\n      panel1.setLayout(gridbag);\n      Utils.constrain(panel1,etichetta,0,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,0,0,5,0);   \n      Utils.constrain(panel1,label1,0,1,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,0.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo1,1,1,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,label2,0,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,0.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo2,1,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,label3,2,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo3,3,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,label4,0,3,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo4,1,3,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);                  \n\n\n      panel2=new Panel();\n      panel2.setLayout(gridbag);\n      Utils.constrain(panel2,text,0,0,4,4,GridBagConstraints.BOTH,\n                     GridBagConstraints.NORTHWEST,1.0,1.0,5,0,5,0);   \n\n\n      panel3=new Panel();\n      panel3.setLayout(gridbag);\n      Utils.constrain(panel3,Stampa,0,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.SOUTHEAST,0,0.0,5,5,5,5);   \n      Utils.constrain(panel3,Partenza,1,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.CENTER,0,0.0,5,5,5,5);   \n      Utils.constrain(panel3,OK,2,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.SOUTHWEST,0.0,0.0,5,5,5,5);   \n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel1,0,0,4,3,GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,10,10,10,10);   \n      Utils.constrain(this,panel2,0,3,4,6,GridBagConstraints.BOTH,\n                     GridBagConstraints.NORTHWEST,1.0,1.0,10,10,10,10);   \n      Utils.constrain(this,panel3,0,9,4,1,GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.SOUTHWEST,1.0,0.0,10,10,10,10);   \n\n   }\n\n   public void init()\n   {\n      OK.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n\t      \tconto.setEnabled(true);\n         }\n      });\n      \n      Stampa.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartStampa();\n         }\n      });\n      \n      Partenza.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartChiudiConto();\t         \t\n         \t\n         }\n      });\n   \n   }\n\n\tvoid readConto()\n\t{\n\t\tFrame msg;\n\t\tDataInputStream inStream;\n\t\ttry\n\t\t{\n\t\t\tinStream = new DataInputStream(new FileInputStream(\"conto.abg\"));\n\t\t}\n\t\tcatch (IOException ex)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Errore nell'apertura del file del conto! \");\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tString newText=\"\";\n\t\t\tString line;\n\t\t\twhile((line=inStream.readLine())!=null)\n\t\t\t\tnewText=newText+line+\"\\n\";\n\t\t\ttext.setText(newText);\n\t\t\tinStream.close();\n\t\t}\n\t\tcatch (IOException ex)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Errore durante la lettura del file del conto! \");\n\t\t}\t\t\n\t}\n\n\tvoid startChiudiConto()\n\t{\n\t\tFrame msg;\n\t\tAskChiudiConto ask;\n\n\t\tDate today = new Date();\n\t\tDate fine_effettiva;\n\t\tif (conto.checkboxes[3].getState())\n\t\t\tfine_effettiva = conto.fine_sogg_anticipato;\n\t\telse\n\t\t\tfine_effettiva = conto.data_fine_magg;\n\t\tif ( Utils.data1MinoreData2( fine_effettiva, today ) )\n\t\t\task = new AskChiudiConto(this);\n\t\telse\n\t\t{\n\t\t\tmsg = new AvvisoDialog(this, \" Non e' possibile chiudere il conto fino al giorno della partenza! \");\n\t\t}\n\t}\n\n\tvoid startChiusura()\n\t{\n\t\tswitch (chiusura)\n\t\t{\n\t\t\tcase 1: chiudiStanza(testo1.getText(), conto.date_inizio[0], conto.date_fine[0],1); break;\n\t\t\tcase 2: chiudiSingolo(); break;\n\t\t\tcase 3: chiudiComitiva(); break;\t\n\t\t}\n\t}\n\t\n\tvoid chiudiStanza(String stanza, Date data_inizio, Date data_fine,int caller)\n\t{\n\t\tlong id;\n\t\tSoggiornante sogg;\n\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(stanza, false);\n\t\tid = (L_sogg.getSoggiornante(1)).getIdPrenotazione();\n\t\tListaDisponibilita L_disp = (Principale.db).elencoDisponibilita();\n\t\tFrame msg;\n\n\t\tif (L_disp == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// cancellazione della prenotazione \n\t\t(Principale.db).delPrenotazione(id);\n\n\t\t// spostamento nello storico e cancellazione dei soggiornanti\n\t\tfor(int i = 1; i <= L_sogg.length(); i++)\n\t\t{\t\n\t\t\tsogg = L_sogg.getSoggiornante(i);\n\t\t\tif ( !(sogg.getCognome()).equals(\"\") &&\n\t\t\t\t !(sogg.getNome()).equals(\"\") &&\n\t\t\t\t !(sogg.getIndirizzo()).equals(\"\") &&\n\t\t\t\t !(sogg.getComune()).equals(\"\") &&\n\t\t\t\t !(sogg.getCitta()).equals(\"\") &&\n\t\t\t\t !(sogg.getNumTel()).equals(\"\") &&\n\t\t\t\t !(sogg.getCap()).equals(\"\") &&\n\t\t\t\t !(sogg.getNumDoc()).equals(\"\") )\n\t\t\t{\n\t\t\t\tint j =\t(Principale.db).writeStorico(sogg.toCliente());\n\t\t\t\tif (j != DataBase.OK)\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella scrittura nello storico! \");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t(Principale.db).delSoggiornante(stanza,sogg.getIdSoggiornante());\n\t\t}\n\t\t// cancellazione degli addebiti\n\t\t(Principale.db).delAddebito(stanza);\n\t\t\n\t\t// cancellazione dei supp e rid dai beni/servizi\n\t\t(Principale.db).delSuppRid(stanza);\n\t\t\n\t\t// cancellazione delle telefonate\n\t\t(Principale.db).delTelefonate(stanza);\n\t\t\n\t\t// aggiornamento delle disponibilita: questo devono essere fatto affinche'\n\t\t// le informazioni riportate dalla machera di visualizzazione delle disponibilita'\n\t\t// sia coerente\n\t\tif (conto.qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tUtils.aggiornaDisp(L_disp, stanza, data_inizio, data_fine, Flag.DISPONIBILE, Flag.OCCUPATA, true);\n\t\t\tUtils.restoreCommissioni(stanza);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDisponibilita disp = (Principale.db).readDisponibilita(stanza);\n\t\t\tif (disp != null)\n\t\t\t{\n\t\t\t\tdisp.setDisponibilita(data_inizio, data_fine, Flag.DISPONIBILE, Flag.OCCUPATA);\n\t\t\t\t(Principale.db).changeDisponibilita(disp.getNumStanza(), disp.getDispAnnoCorr(), disp.getDispAnnoProx());\n\t\t\t}\n\t\t}\n\t\tif (caller == 1)\n\t\t\tstartStampa();\n\t}\n\t\n\tvoid  chiudiSingolo()\n\t{\n\t\tif (conto.checkboxes[3].getState())\n\t\t{\n\t\t\t(Principale.db).anticipaFineSogg(conto.sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\tconto.sogg_x_conto_sing.getIdSoggiornante(),\n\t\t\t\t\t\t\t\t\tconto.fine_sogg_anticipato);\n\t\t}\n\t\t(Principale.db).reversePagato(conto.sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\t  conto.sogg_x_conto_sing.getIdSoggiornante());\n\t}\n\t\n\tvoid  chiudiComitiva()\n\t{\n\t\tfor (int i=0; i < conto.L_st.length; i++)\n\t\t\tchiudiStanza(conto.L_st[i], conto.date_inizio[i], conto.date_fine[i],2);\n\t\tstartStampa();\n\t}\n\n\tvoid startStampa()\n\t{\n\t\tProperties prop = new Properties();\n\t\tToolkit tk = Toolkit.getDefaultToolkit();\n\t\tPrintJob pj = tk.getPrintJob(this,\"Stampa del conto\",prop);\n\t\t\n\t\tif (pj != null)\n\t\t{\n\t\t\tGraphics g = pj.getGraphics();\n\t\t\ttext.printAll(g);\n\t\t\tg.dispose();\n\t\t\tpj.end();\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d3e"},"name":"MascheraBeneServizio.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport moduli.BeneServizio;\nimport moduli.ListaBeniServizi;\n\npublic class MascheraBeneServizio extends Frame\n{\n\t//Dichiarazioni di oggetti che ci serviranno per definire la finestra\n\tprotected Label label, label1, label2, label3, label4, label5, label6, label7, label8,\n\t\tlabel9, label12, label13;\n\tprotected TextField testo3, testo4;\n\tprotected Panel panel[], buttons;\n\tprotected Button annulla, conferma;\n\tprotected CheckboxGroup tipi, bar, ristorante, servizi, bevande, cibi, antipasti,\n\t\t\t\tprimi, secondi, contorni;\n\tprotected Checkbox[] prima_scelta, scelta_bar, scelta_piatto, scelta_servizio, \n\t\t\t\tscelta_bevanda, scelta_cibo, scelta_antipasto, scelta_primo, \n\t\t\t\tscelta_secondo,\tscelta_contorno;\n\tprotected GridLayout grid = new GridLayout(4,1);\n\tprotected GridLayout grid1 = new GridLayout(7,1);\n\tprotected GridBagLayout gridbag = new GridBagLayout();\n\n\t// i seguenti due campi sono condivisi da cancellazione e modifica\n\tprotected List elenco = new List(3, false); \n\tprotected ListaBeniServizi L;\n\t\n\t// il seguente attributo e' necessario per la gerarchia delle finestre\n\tFrame padre = new Frame();\n\t\n\t// i seguenti gestiscono la formazione dei primi tre caratteri del cod_extra\n\tint level = -1;\n\tchar codice[] = new char[3];\n \t \t  \n\tpublic MascheraBeneServizio(String title)\n\t{\n\t\tsuper(title);\n\t\tsetup();\n\t\tinit();\n\t\tsetSize(350,600);\n\t}\n\n\tvoid setup()\n\t{\n\t\tthis.setFont(ConfigurazioneSistema.font_base);\n\t\telenco.setFont(ConfigurazioneSistema.font_allineato);\n\t\t//Creo i pannelli\n\t\tpanel = new Panel[13];\n\t\tfor(int i=0;i<10;++i)\n\t\t{\n\t\t\tpanel[i] = new Panel();\n\t\t\tpanel[i].setLayout(grid1);\n\t\t\tpanel[i].setVisible(false);\n\t\t}\n\t\tfor(int i=10; i<13; ++i)\n\t\t{\n\t\t\tpanel[i] = new Panel();\n\t\t\tpanel[i].setVisible(false);\n\t\t}\n\n\t\t//Creo il pannello in alto\n\t\tlabel = new Label(\"Tipi\");\n\t\tlabel.setFont(ConfigurazioneSistema.font_titolo);\n\t\ttipi = new CheckboxGroup();\n\t\tprima_scelta = new Checkbox[5]; // mi serve piu' lungo per l'aggiungi\n\t\tprima_scelta[0] = new Checkbox(\"BAR\", tipi, false);\n\t\tprima_scelta[1] = new Checkbox(\"RISTORANTE\", tipi, false);\n\t\tprima_scelta[2] = new Checkbox(\"SERVIZI\", tipi, false);\n\t\tprima_scelta[3] = new Checkbox(\"SUPPLEMENTI\", tipi, false);\n\t\tprima_scelta[4] = new Checkbox(\"RIDUZIONI\", tipi, false);\n\t\tpanel[0].add(label);\n\t\tpanel[0].add(prima_scelta[0]);\n\t\tpanel[0].add(prima_scelta[1]);\n\t\tpanel[0].add(prima_scelta[2]);\n\t\tpanel[0].setVisible(true);\n\n\t\t//Attacco il pannello in alto al frame\n\t\tthis.setLayout(grid);\n\t\tthis.add(panel[0]);\n\n\t\t//Creo il pannello del bar\n\t\tlabel1 = new Label(\"Bar\");\n\t\tlabel1.setFont(ConfigurazioneSistema.font_titolo);\n\t\tbar = new CheckboxGroup();\n\t\tscelta_bar = new Checkbox[2];\n\t\tscelta_bar[0] = new Checkbox(\"Bevande\", bar, false);\n\t\tscelta_bar[1] = new Checkbox(\"Cibi\", bar, false);\n\t\tpanel[1].add(label1);\n\t\tpanel[1].add(scelta_bar[0]);\n\t\tpanel[1].add(scelta_bar[1]);\n\n\t\t//Creo il pannello dal ristorante\n\t\tlabel2 = new Label(\"Ristorante\");\n\t\tlabel2.setFont(ConfigurazioneSistema.font_titolo);\n\t\tristorante = new CheckboxGroup();\n\t\tscelta_piatto = new Checkbox[6];\n\t\tscelta_piatto[0] = new Checkbox(\"Antipasti\", ristorante, false);\n\t\tscelta_piatto[1] = new Checkbox(\"Primi\", ristorante, false);\n\t\tscelta_piatto[2] = new Checkbox(\"Secondi\", ristorante, false);\n\t\tscelta_piatto[3] = new Checkbox(\"Contorni\", ristorante, false);\n\t\tscelta_piatto[4] = new Checkbox(\"Dessert\", ristorante, false);\n\t\tscelta_piatto[5] = new Checkbox(\"Frutta\", ristorante, false);\n\t\tpanel[2].add(label2);\n\t\tpanel[2].add(scelta_piatto[0]);\n\t\tpanel[2].add(scelta_piatto[1]);\n\t\tpanel[2].add(scelta_piatto[2]);\n\t\tpanel[2].add(scelta_piatto[3]);\n\t\tpanel[2].add(scelta_piatto[4]);\n\t\tpanel[2].add(scelta_piatto[5]);\n\t\tlabel3 = new Label(\"Servizi\");\n\t\tlabel3.setFont(ConfigurazioneSistema.font_titolo);\n\t\tservizi = new CheckboxGroup();\n\t\tscelta_servizio = new Checkbox[2];\n\t\tscelta_servizio[0] = new Checkbox(\"Ricreativi\", servizi, false);\n\t\tscelta_servizio[1] = new Checkbox(\"Altro\", servizi, false);\n\t\tpanel[3].add(label3);\n\t\tpanel[3].add(scelta_servizio[0]);\n\t\tpanel[3].add(scelta_servizio[1]);\n\t\tlabel4 = new Label(\"Bevande\");\n\t\tlabel4.setFont(ConfigurazioneSistema.font_titolo);\n\t\tbevande = new CheckboxGroup();\n\t\tscelta_bevanda = new Checkbox[3];\n\t\tscelta_bevanda[0] = new Checkbox(\"Caffetteria\", bevande, false);\n\t\tscelta_bevanda[1] = new Checkbox(\"Analcolici\", bevande, false);\n\t\tscelta_bevanda[2] = new Checkbox(\"Alcolici\", bevande, false);\n\t\tpanel[4].add(label4);\n\t\tpanel[4].add(scelta_bevanda[0]);\n\t\tpanel[4].add(scelta_bevanda[1]);\n\t\tpanel[4].add(scelta_bevanda[2]);\n\n\t\t//Creo il pannello dei cibi\n\t\tlabel5 = new Label(\"Cibi\");\n\t\tlabel5.setFont(ConfigurazioneSistema.font_titolo);\n\t\tcibi = new CheckboxGroup();\n\t\tscelta_cibo = new Checkbox[3];\n\t\tscelta_cibo[0] = new Checkbox(\"Dolci\", cibi, false);\n\t\tscelta_cibo[1]= new Checkbox(\"Salati\", cibi, false); \n\t\tpanel[5].add(label5);\n\t\tpanel[5].add(scelta_cibo[0]);\n\t\tpanel[5].add(scelta_cibo[1]);\n\n\t\t//Creo il pannello degli antipasti\n\t\tlabel6 = new Label(\"Antipasti\");\n\t\tlabel6.setFont(ConfigurazioneSistema.font_titolo);\n\t\tantipasti = new CheckboxGroup();\n\t\tscelta_antipasto = new Checkbox[3];\n\t\tscelta_antipasto[0] = new Checkbox(\"Freddi\", antipasti, false);\n\t\tscelta_antipasto[1] = new Checkbox(\"Caldi\", antipasti, false); \n\t\tpanel[6].add(label6);\n\t\tpanel[6].add(scelta_antipasto[0]);\n\t\tpanel[6].add(scelta_antipasto[1]);\n\n\t\t//Creo il pannello dei primi\n\t\tlabel7=new Label(\"Primi\");\n\t\tlabel7.setFont(ConfigurazioneSistema.font_titolo);\n\t\tprimi=new CheckboxGroup();\n\t\tscelta_primo=new Checkbox[3];\n\t\tscelta_primo[0]=new Checkbox(\"Solidi\",primi,false);\n\t\tscelta_primo[1]=new Checkbox(\"Liquidi\",primi,false); \n\t\tpanel[7].add(label7);\n\t\tpanel[7].add(scelta_primo[0]);\n\t\tpanel[7].add(scelta_primo[1]);\n\n\t\t//Creo il pannello dei secondi\n\t\tlabel8=new Label(\"Secondi\");\n\t\tlabel8.setFont(ConfigurazioneSistema.font_titolo);\n\t\tsecondi=new CheckboxGroup();\n\t\tscelta_secondo=new Checkbox[3];\n\t\tscelta_secondo[0]=new Checkbox(\"Carne\",secondi,false);\n\t\tscelta_secondo[1]=new Checkbox(\"Pesce\",secondi,false); \n\t\tpanel[8].add(label8);\n\t\tpanel[8].add(scelta_secondo[0]);\n\t\tpanel[8].add(scelta_secondo[1]);\n\n\t\t//Creo il pannello dei contorni\n\t\tlabel9 = new Label(\"Contorni\");\n\t\tlabel9.setFont(ConfigurazioneSistema.font_titolo);\n\t\tcontorni = new CheckboxGroup();\n\t\tscelta_contorno = new Checkbox[3];\n\t\tscelta_contorno[0] = new Checkbox(\"Verdura cotta\", contorni, false);\n\t\tscelta_contorno[1] = new Checkbox(\"Verdura cruda\", contorni, false); \n\t\tscelta_contorno[2] = new Checkbox(\"Formaggio\", contorni, false);\n\t\tpanel[9].add(label9);\n\t\tpanel[9].add(scelta_contorno[0]);\n\t\tpanel[9].add(scelta_contorno[1]);\n\t\tpanel[9].add(scelta_contorno[2]);\n\n\t\t//Creo il pannello BAR-Bevande\n\t\tpanel[10].setLayout(gridbag);\n\t\tlabel12 = new Label(\"Nome del bene\");\n\t\tlabel13 = new Label(\"Prezzo del bene \"+(Principale.config).getValuta()+\".\");\n\t\ttesto3 = new TextField(\"\",40);\n\t\ttesto4 = new TextField(\"\",10);\n\t\tannulla = new Button(\"Annulla\");\n\t\tconferma = new Button(\"Conferma\");\n\t\tUtils.constrain(panel[10], label12, 0, 0, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[10], testo3, 1, 0, 4, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\n\t\tUtils.constrain(panel[10], label13, 0, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 0.0, 0.0, 5, 5, 5, 0);\n\t\tUtils.constrain(panel[10], testo4, 1, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 0);\n\t\tUtils.constrain(panel[10], annulla, 1, 2, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.EAST, 1.0, 0.0, 5, 5, 0, 5);\n\t\tUtils.constrain(panel[10], conferma, 2, 2, 1, 1,GridBagConstraints.NONE,\n\t\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 5, 5, 0, 5);\n\t}\n              \n\tpublic void init()\n\t{\n\t\tprima_scelta[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(prima_scelta[0].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneABC(scelta_bar, 1, BeneServizio.BAR);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tprima_scelta[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(prima_scelta[1].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneABC(scelta_piatto, 2, BeneServizio.RISTORANTE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tprima_scelta[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(prima_scelta[2].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneABC(scelta_servizio, 3, BeneServizio.SERVIZI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\t\tscelta_bar[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bar[0].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneGH(scelta_bevanda, 4, BeneServizio.BEVANDE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_bar[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_bar[1].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneGH(scelta_cibo, 5, BeneServizio.CIBI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_piatto[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[0].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneILMN(scelta_antipasto, 6, BeneServizio.ANTIPASTI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_piatto[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[1].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneILMN(scelta_primo, 7, BeneServizio.PRIMI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tscelta_piatto[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[2].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneILMN(scelta_secondo, 8, BeneServizio.SECONDI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tscelta_piatto[3].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif(scelta_piatto[3].getState())\n\t\t\t\t{\n\t\t\t\t\tinComuneILMN(scelta_contorno, 9, BeneServizio.CONTORNI);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tannulla.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n\t} // init\n\n\tvoid inComuneABC(Checkbox[] scelte, int numero_pannello, char c)\n\t{\n\t\tlevel = 0;\n\t\tfor(int i=1;i<13;++i)\n\t\t{\n\t\t\tif(panel[i].isVisible())\n\t\t\t\tremove(panel[i]);\n\t\t}\n\t\tthis.add(panel[numero_pannello]);\n\t\tpanel[numero_pannello].setVisible(true);\n\t\tsetVisible(true);\n\t\tcodice = composeCode(level, c);\n\t}\n\t\n\tvoid inComuneGH(Checkbox[] scelte, int numero_pannello, char c)\n\t{\n\t\tlevel = 1;\n\t\tfor(int i=2;i<13;++i)\n\t\t{\n\t\t\tif(panel[i].isVisible())\n\t\t\t\tremove(panel[i]);\n\t\t}\n\t\tthis.add(panel[numero_pannello]);\n\t\tpanel[numero_pannello].setVisible(true);\n\t\tsetVisible(true);\n\t\tcodice = composeCode(level, c);\n\t}\n\t\n\tvoid inComuneILMN(Checkbox[] scelte, int numero_pannello, char c)\n\t{\n\t\tlevel = 1;\n\t\tif (panel[1].isVisible())\n\t\t\tremove(panel[1]);\n\t\tfor (int i = 3; i < 13; i++)\n\t\t\tif (panel[i].isVisible())\n\t\t\t\tremove(panel[i]);\n\t\tthis.add(panel[numero_pannello]);\n \t\tpanel[numero_pannello].setVisible(true);\n\t\tsetVisible(true);\n\t\tcodice = composeCode(level, c);\n\t}\n\t\n\tboolean errore()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif ( !((testo3.getText()).length() < 33 ) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La descrizione del bene o servizio deve essere di al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( (testo3.getText()).equals(\"\") )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca la descrizione del bene o servizio! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( (testo4.getText()).equals(\"\") )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Manca il prezzo del bene o servizio! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !(Utils.isFloatPos(testo4.getText())) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il prezzo deve essere un numero positivo! \");\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tchar[] composeCode(int index, char tipo)\n\t{\t\n\t\tcodice[index] = tipo;\n\t\tfor ( int i = index+1; i < 3; ++i)\n\t\t\tcodice[i] = ' ';\n\t\treturn codice;\n\t}\t\t\n\t\t\n\tchar[] completeCode()\n\t{\n\t\tif (codice[1] == ' ')\n\t\t\tcodice[1] = '0'; \n\t\tif (codice[2] == ' ')\n\t\t\tcodice[2] = '0'; \n\t\treturn codice;\n\t}\n\n\tvoid o()\n\t{\n\t\tif (panel[10].isVisible()) // necessario nella finestra di modifica\n\t\t\tremove(panel[10]);\n\t\tif (panel[12].isVisible()) // necessario nella finestra di cancellazione\n\t\t\tremove(panel[12]);\n\t\tinComuneOP();\n\t}\n   \n\tvoid p() // Frutta o dessert\n\t{\n\t\tif(panel[1].isVisible())\n\t\t\tremove(panel[1]);\n\t\tfor(int i=3;i<13;++i)\n\t\t{\n\t\t\tif(panel[i].isVisible())\n\t\t\t\tremove(panel[i]);\n\t\t}\n\t\tinComuneOP();\n\t}\n\n\tvoid inComuneOP()\n\t{\n\t\tcompleteCode();\n\t\tif (elenco.getItemCount() > 0)  //per evitare warning\n\t\t\telenco.removeAll();\n\t\tcreaLista(); \n\t\tthis.add(panel[11]);\n\t\tpanel[11].setVisible(true);\n\t\tsetVisible(true);\n\t}\n\t\n\tvoid creaLista()\n\t{\n\t\tint i=1;\n\t\tBeneServizio b;\t\t\n\t\t\n\t\tL = (Principale.db).elencoBeniServizi(new String(codice));\n\t\tif (L != null)\n\t\t{\n\t\t\twhile (i <= L.length())\n\t\t\t{\n\t\t\t\tb = L.getBeneServizio(i);\n\t\t\t\telenco.addItem(b.toString());\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d3f"},"name":"VediCommissione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\nimport moduli.Commissionamento;\n\npublic class VediCommissione extends MascheraCommissioni\n{\n\tCommissionamento commissione;\n   \t\n   \tpublic VediCommissione()\n   \t{\n      \tsuper(\"\",\"\",\"Visualizzazione dati delle commissioni\",\" Cerca \",4);\n      \tinit();\n   \t}\n\n \tpublic void init()\n \t{     \t\n      \tnome_agenzia.setEditable(true);\n      \tnum_stanza.setEditable(false);\n      \tnum_tel_agenzia.setEditable(false);\n        inizio_comm.setEditable(false);\n        fine_comm.setEditable(false);\n        scadenza_comm.setEditable(false); \n       \tnum_stanza.setEditable(false);\n      \t\n\t\tlista.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tcommissione = L.getCommissionamento((lista.getSelectedIndexes())[0]+1);\n\t\t\t\twriteDatiComm(commissione);\n\t\t\t\tAzione.setEnabled(true);\n\t\t\t\tpack();\n         \t}\n      });\n   \n\t\tnome_agenzia.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tcreaLista();\n\t\t\t}\t\t\t      \t\n\t\t});\n\n\t   \tAzione.addActionListener(new ActionListener()\n   \t\t{\n    \t    public void actionPerformed(ActionEvent e)\n        \t{\n\t\t\t\tcreaLista();\n\t\t\t}\n\t\t});\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d40"},"name":"MascheraSoggiorno.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport moduli.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\n\npublic class MascheraSoggiorno extends Frame\n{\n   //Dichiaro gli oggetti che utilizzero' per costruire la finestra\n   Label etichetta, etichetta1, label1, label2, label3, label4, label5,\n         label6, label7, label8, label9, label10, label11, label12, label13,\n         label14, label15, label16;\n   TextField testo1, testo2, testo3, testo4, testo5, testo6, testo7, testo8,\n             testo9, testo10, testo11, testo12, testo13, testo14;\n   Button Annulla, Conferma;\n   CheckboxGroup pensione, cliente;\n   Checkbox[] checkboxes, checkboxes1;\n   Panel panel1, panel2, panel3;\n   GridBagLayout gridbag=new GridBagLayout();\n   RicercaPrenotazione padre = new RicercaPrenotazione(\"\",3);\n   \n   public MascheraSoggiorno(String title, String caption, char pens, char status)\n   {\n      super(title);\n      padre.setEnabled(false);\n      setupPanels(caption, pens, status);\n      init();\n      pack();\n      this.setVisible(true);\n   }\n\n   void setupPanels(String caption, char pens, char status)\n   {\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      //Creo  le etichette\n      etichetta=new Label(\"Dati del cliente\");\n      etichetta.setFont(ConfigurazioneSistema.font_titolo);\n      label1 = new Label(\"Stanza numero\");\n      label2 = new Label(\"Cognome\");\n      label3 = new Label(\"Nome\");\n      label4 = new Label(\"Luogo di nascita\");\n      label5 = new Label(\"Data di nascita\");\n      label6 = new Label(\"Documento di identita'\");\n      label7 = new Label(\"Numero telefonico\");\n      label8 = new Label(\"Indirizzo\");\n      label9 = new Label(\"C.A.P\");\n      label10 = new Label(\"Comune di residenza\");\n      label11 = new Label(\"Citta'\");\n      label12 = new Label(\"Nazione\");\n      etichetta1 = new Label(\"Dati del soggiorno\");\n      etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n      label13 = new Label(\"Data inizio soggiorno\");\n      label14 = new Label(\"Data fine soggiorno\");\n      label15 = new Label(\"Tipo di pensionamento\");\n      label15.setFont(ConfigurazioneSistema.font_titolo);\n      label16 = new Label(\"Status cliente\");\n      label16.setFont(ConfigurazioneSistema.font_titolo);\n\n      //Creo i TextField\n      testo1 = new TextField(\"\", 4);\n      testo2 = new TextField(\"\", 20);\n      testo3 = new TextField(\"\", 20);\n      testo4 = new TextField(\"\", 32);\n      testo5 = new TextField(\"\", 10);\n      testo6 = new TextField(\"\", 16);\n      testo7 = new TextField(\"\", 16);\n      testo8 = new TextField(\"\", 52);\n      testo9 = new TextField(\"\", 8);\n      testo10 = new TextField(\"\", 32);\n      testo11 = new TextField(\"\", 20);\n      testo12 = new TextField(\"\", 20);\n      testo13 = new TextField(\"\", 10);\n      testo14 = new TextField(\"\", 10);\n\n      //Creo i bottoni\n      Annulla = new Button(\"Annulla\");\n      Conferma = new Button(caption);\n\n      //Creo i Checkbox ad esclusione\n      pensione = new CheckboxGroup();\n      checkboxes = new Checkbox[4];\n      checkboxes[0] = new Checkbox(\" Solo pernottamento\", pensione, false);\n      checkboxes[1] = new Checkbox(\" Prima colazione\", pensione, false);\n      checkboxes[2] = new Checkbox(\" Mezza pensione\", pensione, false);\n      checkboxes[3] = new Checkbox(\" Pensione completa\", pensione, false);\n\t  switch (pens)\n\t  {\n\t  \tcase Flag.SOLO_PERNOTTAMENTO: \n\t  \t\tcheckboxes[0] = new Checkbox(\" Solo pernottamento\", pensione, true);\n\t  \t\tbreak;\n\t  \tcase Flag.SOLO_COLAZIONE: \n\t\t\tcheckboxes[1] = new Checkbox(\" Prima colazione\", pensione, true);\n\t  \t\tbreak;\n\t  \tcase Flag.MEZZA_PENSIONE:\n\t\t\tcheckboxes[2] = new Checkbox(\" Mezza pensione\", pensione, true);\n\t  \t\tbreak;\n\t  \tcase Flag.PENSIONE_COMPLETA: \n\t\t\tcheckboxes[3] = new Checkbox(\" Pensione completa\", pensione, true);\n\t  \t\tbreak;\n\t  }\n\n      cliente = new CheckboxGroup();\n      checkboxes1 = new Checkbox[4];\n      checkboxes1[0] = new Checkbox(\" Neonato (0-2 anni)\", cliente, false);\n      checkboxes1[1] = new Checkbox(\" Bambino (3-12 anni)\", cliente, false);\n      checkboxes1[2] = new Checkbox(\" Ragazzo (12-17 anni)\", cliente, false);\n      checkboxes1[3] = new Checkbox(\" Adulto  (>=18 anni)\", cliente, false);\n\t  switch (status)\n\t  {\n\t  \tcase Flag.NEONATO: \n\t\t    checkboxes1[0] = new Checkbox(\" Neonato (0-2 anni)\", cliente, true);\n\t  \t\tbreak;\n\t  \tcase Flag.BAMBINO: \n\t\t\tcheckboxes1[1] = new Checkbox(\" Bambino (3-12 anni)\", cliente, true);\n\t  \t\tbreak;\n\t  \tcase Flag.RAGAZZO:\n\t\t\tcheckboxes1[2] = new Checkbox(\" Ragazzo (12-17 anni)\", cliente, true);\n\t  \t\tbreak;\n\t  \tcase Flag.ADULTO: \n\t\t\tcheckboxes1[3] = new Checkbox(\" Adulto  (>=18 anni)\", cliente, true);\n\t  \t\tbreak;\n\t  }\n\n      //Creo il pannello in alto contenente i dati del cliente\n      panel1 = new Panel();\n      panel1.setLayout(gridbag);\n      Utils.constrain(panel1, etichetta, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo1, 1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, label2, 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo2, 1, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, label3, 2, 2, 1 ,1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, testo3, 3, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, label4, 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo4, 1, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, label5, 2, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, testo5, 3, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, label6, 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo6, 1, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, label7, 2, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, testo7, 3, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, label8, 0, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo8, 1, 5, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, label9, 0, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, testo9, 1, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, label10, 2, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo10, 3, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, label11, 0, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, testo11, 1, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, label12, 2, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo12, 3, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n\n      //Creo il pannello centrale con i dati del soggiorno\n      panel2 = new Panel();\n      panel2.setLayout(gridbag);\n      Utils.constrain(panel2, etichetta1, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, label13, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHEAST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, testo13, 1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, label14, 2, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHEAST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, testo14, 3, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, label15, 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes[0], 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes[1], 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes[2], 0, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes[3], 0, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, label16, 1, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes1[0], 1, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes1[1], 1, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes1[2], 1, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel2, checkboxes1[3], 1, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);                  \n\n      //Creo il pannello in basso con due pulsanti\n      panel3 = new Panel();\n      panel3.setLayout(gridbag);\n      Utils.constrain(panel3, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.EAST, 0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel3, Conferma, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 0, 0.0, 5, 5, 5, 5);\n\n      //Attacco i pannelli al frame\n      this.setLayout(gridbag);\n      Utils.constrain(this, panel1, 0, 0, 4, 8, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTH, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel2, 0, 8, 4, 7, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel3,0, 15, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.SOUTH, 1.0, 0.0, 5, 5, 5, 5);\n    }\n\n   public void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            padre.setEnabled(true);\n         }\n      });\n\t}\n\t\n\tpublic Soggiornante readDatiSogg(Prenotazione pren, int cont)\n\t{\n\t\tFrame msg;\n\t\tString data_inizio,data_fine;\n\t\tDate data1, data2;\n\t\tSoggiornante sogg = new Soggiornante();\n\t\tsogg.setNumStanza(pren.getNumStanza());\n\t\tsogg.setCognome(testo2.getText());\n\t\tsogg.setNome(testo3.getText());\n\t\tsogg.setLuogoNasc(testo4.getText());\n\t\tsogg.setDataNasc(DateUtils.convertDate(testo5.getText()));\n\t\tsogg.setNumDoc(testo6.getText());\n\t\tsogg.setNumTel(testo7.getText());\n\t\tsogg.setIndirizzo(testo8.getText());\n\t\tsogg.setCap(testo9.getText());\n\t\tsogg.setComune(testo10.getText());\n\t\tsogg.setCitta(testo11.getText());\n\t\tsogg.setNazione(testo12.getText());\n        sogg.setInizioSogg(pren.getInizioSogg());\n        sogg.setFineSogg(pren.getFineSogg());\n        sogg.setIdPrenotazione(pren.getIdPrenotazione());\n        sogg.setIdSoggiornante(cont);\n        \n\t\tif (checkboxes[0].getState() == true)\n\t\t\tsogg.setPensionamento(Flag.SOLO_PERNOTTAMENTO);\n\t\telse\t\n\t\t\tif (checkboxes[1].getState() == true)\n\t\t\t\tsogg.setPensionamento(Flag.SOLO_COLAZIONE);\n\t\t\telse\n\t\t\t\tif (checkboxes[2].getState() == true)\n\t\t\t\t\tsogg.setPensionamento(Flag.MEZZA_PENSIONE);\n\t\t\t\telse\n\t\t\t\t\tif (checkboxes[3].getState() == true)\n\t\t\t\t\t\tsogg.setPensionamento(Flag.PENSIONE_COMPLETA);\n\t\t\n\t\tif (checkboxes1[0].getState() == true)\n\t\t\tsogg.setStatus(Flag.NEONATO);\n\t\telse\n\t\t\tif (checkboxes1[1].getState() == true)\n\t\t\t\tsogg.setStatus(Flag.BAMBINO);\n\t\t\telse\n\t\t\t\tif (checkboxes1[2].getState() == true)\n\t\t\t\t\tsogg.setStatus(Flag.RAGAZZO);\n\t\t\t\telse\n\t\t\t\t\tsogg.setStatus(Flag.ADULTO);\t\n\t\treturn sogg;\n\t\n\t}\t\n\n\tpublic void writeDatiSogg(Soggiornante sogg)\n\t{\n\t\ttesto1.setText(sogg.getNumStanza());\n\t\ttesto2.setText(sogg.getCognome());\n\t\ttesto3.setText(sogg.getNome());\n\t\ttesto4.setText(sogg.getLuogoNasc());\n\t\ttesto5.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(sogg.getDataNasc())));\n\t\ttesto6.setText(sogg.getNumDoc());\n\t\ttesto7.setText(sogg.getNumTel());\n\t\ttesto8.setText(sogg.getIndirizzo());\n\t\ttesto9.setText(sogg.getCap());\n\t\ttesto10.setText(sogg.getComune());\n\t\ttesto11.setText(sogg.getCitta());\n\t\ttesto12.setText(sogg.getNazione());\n\t\ttesto13.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(sogg.getInizioSogg())));\n\t\ttesto14.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(sogg.getFineSogg())));\n\t}\n\n\tvoid changeTitle(int parz, int tot)\n\t{\n\t\tthis.setTitle(\"Inserimento dei dati del soggiornante  (\"+parz+\"/\"+tot+\")\");\n\t}\n\n\tvoid cleanFields()\n\t{\n\t\ttesto2.setText(\"\");\n\t\ttesto3.setText(\"\");\n\t\ttesto4.setText(\"\");\n\t\ttesto5.setText(\"\");\n\t\ttesto6.setText(\"\");\n\t\ttesto7.setText(\"\");\n\t\ttesto8.setText(\"\");\n\t\ttesto9.setText(\"\");\n\t\ttesto10.setText(\"\");\n\t\ttesto11.setText(\"\");\n\t\ttesto12.setText(\"\");\n\t}\t\n\n\tvoid aggiornaDisp(Soggiornante sogg, char tipo)\n\t{\n\t\tDisponibilita disp_da_cambiare = new Disponibilita();\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\tif (elenco_disp == null)\n\t\t{\n\t\t\tFrame msg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tdisp_da_cambiare = Utils.getDispOfRoom(elenco_disp, sogg.getNumStanza(), true);\n\t\tdisp_da_cambiare.setDisponibilita(sogg.getInizioSogg(), sogg.getFineSogg(), tipo, Flag.ASSEGNATA) ;\n\t\t(Principale.db).changeDisponibilita( disp_da_cambiare.getNumStanza(), \n\t\t\t\t\t\t\t\t\t\t\tdisp_da_cambiare.getDispAnnoCorr(),\n\t\t\t\t\t\t\t\t\t\t\tdisp_da_cambiare.getDispAnnoProx() );\n\t}\n\n\tboolean errori()\n\t{\n\t\tFrame msg;\n\t\tString data_nasc = new String();  \n\t\t//Controllo data di nascita\n\t\tif ( (testo5.getText().equals(\"\")) )\n\t\t{\t\n\t\t\tmsg = new AvvisoDialog(this,\" Inserire la data di nascita! \");\n\t\t\treturn true;\n\t\t}\n\t\telse\t\t\n\t\t\tdata_nasc = DateUtils.parseDate(testo5.getText());\n\t\tif ( data_nasc.equals(Errore.DATA_NON_CORRETTA))\n\t\t{\t\n\t\t\tmsg = new MessageDialog(this,\" Data Nascita Errata! \");\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ( !( DateUtils.isDataRight(data_nasc)) )\n\t\t\t{\t\n\t\t\t\tmsg = new MessageDialog(this,\"Data Nascita Insensata\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif ( !((testo2.getText()).length() <= 20) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il cognome deve essere composto da al piu' 20 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo3.getText()).length() <= 20) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il nome deve essere composto da al piu' 20 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo4.getText()).length() <= 32) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il luogo di nascita deve essere composto da al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo6.getText()).length() <= 16) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il documento di identita' deve essere composto da al piu' 16 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo7.getText()).length() <= 16) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero telefonico deve essere composto da al piu' 16 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo8.getText()).length() <= 32) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" L'indirizzo deve essere composto da al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo9.getText()).length() <= 5) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il C.A.P. deve essere composto da al piu' 5 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo10.getText()).length() <= 32) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il comune deve essere composto da al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo11.getText()).length() <= 20) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La citta deve essere composto da al piu' 20 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((testo12.getText()).length() <= 20) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La nazione deve essere composto da al piu' 20 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d41"},"name":"SubSoggiorno.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.util.Random;\nimport common.utility.*;\nimport moduli.*;\n\npublic class SubSoggiorno extends Frame\n{\n   Label label;\n   Panel panel0, panel1;\n   Button Arrivo, Cambio, Addebito, Telefonate, Calcolo, Ricerca, BeniServizi,Annulla;\n   GridBagLayout gridbag=new GridBagLayout();\n   Frame p = new Frame();\t\n   RicercaPrenotazione ric_pren;\n   Frame figlio;\n\n   public SubSoggiorno()\n   {\n      super(\"Soggiorno\");\n      setup();\n      init();\n      pack();\n   }\n\n   void setup()\n   {\n      this.setFont(ConfigurazioneSistema.font_sub);\n      panel0=new Panel();\n      panel0.setLayout(gridbag);\n      panel0.setBackground(Color.white);\n      \n      Random rnd = new Random();\n      int num;\n      if ((num = (rnd.nextInt() % 5) ) < 0)\n      \t  num = num * -1;\n      num ++;\t   \n      String file_name = new String(\"servizi\"+num+\".jpg\");\n      Immagine  figura = new Immagine(file_name);\n      Etichetta etich = new Etichetta(\"Soggiorno.gif\");\n      Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n      Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n       \n      panel1 = new Panel();\n      panel1.setLayout(new GridLayout(8,1));\n      Arrivo = new Button(\" Arrivo clienti \");\n      Cambio = new Button(\" Cambio stanza \");\n      Addebito = new Button(\" Addebito spese \");\n      Telefonate = new Button(\" Telefonate \");\n      Calcolo = new Button(\" Calcolo conto \");\n      Ricerca = new Button(\" Ricerca... \");\n      BeniServizi = new Button(\" Beni & Servizi \");\n      Annulla = new Button(\" Indietro \");\n      panel1.add(Arrivo);\n      panel1.add(Addebito);\n      panel1.add(BeniServizi);\n      panel1.add(Telefonate);\n      panel1.add(Cambio);\n      panel1.add(Calcolo);\n      panel1.add(Ricerca);\n      panel1.add(Annulla);\n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n      Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n   }\n\n   void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            p.setEnabled(true);\n         }\n      });\n   \n   \tArrivo.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            insSoggiornante();\n         }\n      });\n    \n    Calcolo.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            calcoloConto();\n         }\n      });\n      \n   \tAddebito.addActionListener(new ActionListener()\n    {\n     \tpublic void actionPerformed(ActionEvent e)\n        {\n            addebitaBeneServizio();\n        }\n   \t});\n   \t\n   \tBeniServizi.addActionListener(new ActionListener()\n    {\n     \tpublic void actionPerformed(ActionEvent e)\n        {\n            visitaBeneServizio();\n        }\n   \t});\n   \t\n   \tTelefonate.addActionListener(new ActionListener()\n    {\n     \tpublic void actionPerformed(ActionEvent e)\n        {\n            ricercaTelefonate();\n        }\n   \t});\n   \t\n   \tCambio.addActionListener(new ActionListener()\n    {\n     \tpublic void actionPerformed(ActionEvent e)\n        {\n            cambiaStanza();\n        }\n   \t});  \n      \n   \tRicerca.addActionListener(new ActionListener()\n    {\n     \tpublic void actionPerformed(ActionEvent e)\n        {\n            startRicerca();\n        }\n   \t});  \n   }\n\n\tvoid insSoggiornante()\n\t{\n\t\tthis.setEnabled(false);\n\t\tric_pren = new RicercaPrenotazione(\"Arrivo clienti\",3);\n\t\tric_pren.setVisible(true);\n\t\tric_pren.padre = this;\n\t}\n\t\n\tvoid addebitaBeneServizio()\n\t{\n\t\tfiglio = new MascheraAddebiti(this);\n\t}\n\t\n\tvoid visitaBeneServizio()\n\t{\n\t\tfiglio = new RicercaAddebiti(this);\n\t}\n\t\n\tvoid ricercaTelefonate()\n\t{\n\t\tfiglio = new RicercaTelefonate(this);\n\t}\n\t\n\tvoid calcoloConto()\n\t{\n\t\tfiglio = new MascheraCalcoloConto(this);\n\t\tfiglio.setVisible(true);\n\t}\n\t\n\tvoid cambiaStanza()\n\t{\n\t\tfiglio = new MascheraCambio(this);\n\t}\n\n\tvoid startRicerca()\n\t{\n\t\tfiglio = new MascheraRicercaSoggiornante(this);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d42"},"name":"RicercaPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d1d"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class RicercaPrenotazione extends Frame \n{  \n\tPrenotazione prenotazione;\n    \n    //Dichiarazioni di variabili\n    Panel panel1, panel2, panel3, panel4; \n    Label  etichetta1, label1, label2, label3, label4;\n    List lista;\n    Button  Annulla, Cerca, Scegli, Aggiungi;\n    TextField t_nome, t_cognome;\n    Checkbox chbx1, chbx2, chbx3;\n    CheckboxGroup filtri;\n    GridBagLayout gridbag = new GridBagLayout();\n\tFrame padre = new Frame();\n  \tListaPrenotazioni L, L_visual;\n  \tFrame figlio;  \n    int to_call;\n \tboolean first_time = true;   \n    \n    public RicercaPrenotazione(String titolo,int k)\n    {\n        super(titolo);\n        to_call = k;\n        setupPanels();\n        init();\n        pack(); \n    }\n                     \n        void setupPanels()\n        {  \n\t\t\tthis.setFont(ConfigurazioneSistema.font_base);\n            \n            //Creo dei pulsanti e ne disabilito due  \n            Annulla = new Button(\" Fine \");\n            Cerca = new Button(\" Cerca \");\n            Scegli = new Button(\" Scegli \");\n\t\t\tAggiungi = new Button(\" Aggiungi a stanza \");\n            Scegli.setEnabled(false);\n            Aggiungi.setEnabled(false);\n            Cerca.setEnabled(true);\n            //Creo le etichette\n            etichetta1 = new Label (\"Inserire il nominativo della prenotazione\");\n            etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n            label1 = new Label(\"Cognome\");\n            label2 = new Label(\"Nome\");\n\t\t\tlabel3 = new Label(\"Risultato della ricerca\");\n\t\t\tlabel3.setFont(ConfigurazioneSistema.font_titolo);\n\t\t\tlabel4 = new Label(\"Cercare le prenotazioni reletive a:\");\n\t\t\tlabel4.setFont(ConfigurazioneSistema.font_titolo);\n            \n            //Creo i TextField e ne rendo  alcuni non editabili\n            t_nome = new TextField(\"\", 20);\n            t_cognome = new TextField(\"\", 20);\n            \n            //creo il pannello con i filtri per la ricerca\n\t\t\tfiltri = new CheckboxGroup();\n\t\t\tchbx1 = new Checkbox(\" Arrivi odierni\",filtri, true);\n\t\t\tchbx2 = new Checkbox(\" Soggiornanti attuali\",filtri, false);\n\t\t\tchbx3 = new Checkbox(\" Prenotazioni future\", filtri,false);            \n\t\t\t\n            //Creo il pannello in alto per inserimento dei dati del cliente\n            panel1 = new Panel();\n            panel1.setLayout(gridbag);\n            Utils.constrain(panel1, etichetta1, 0, 0, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel1, label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.5, 5, 5, 5, 5);\n            Utils.constrain(panel1, t_cognome,1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel1, label2, 2, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.5, 5, 5, 5, 5);\n            Utils.constrain(panel1, t_nome, 3, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);            \n            Utils.constrain(panel1, label4, 0, 2, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel1, chbx1, 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.5, 5, 5, 5, 5);\n\t\t\tif (to_call != 2 && to_call != 1)\n            \tUtils.constrain(panel1, chbx2, 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n            if (to_call != 3)\n\t            Utils.constrain(panel1, chbx3, 0, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.5, 5, 5, 5, 5);\n           \n            //Creo il pannello in basso con due pulsanti                  \n            panel2 = new Panel();\n            panel2.setLayout(gridbag);\n            Utils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel2, Cerca, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);             \n            Utils.constrain(panel2, Scegli, 2, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);\n            if (to_call ==3)\n            Utils.constrain(panel2, Aggiungi, 3, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);                                     \n            \n            \n            \n            //Creo il pannello con la lista dei risultati della ricerca\n            lista = new List(10,false);\n            lista.setFont(ConfigurazioneSistema.font_allineato);\n            panel3 = new Panel();\n            panel3.setLayout(gridbag);\n            Utils.constrain(panel3, label3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel3, lista, 0, 1, 4, 3, GridBagConstraints.BOTH,\n                        GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);             \n            \n            \n            //Attacco i pannelli al frame\n            this.setLayout(gridbag);\n            Utils.constrain(this, panel1, 0, 1, 4, 6, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(this, panel2, 0, 14, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5); \n        \tUtils.constrain(this, panel3, 0, 15, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tpanel3.setVisible(false);\n        \tpack();\n        \n        }\n\n    public void init()\n    {\n\t\tlista.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tprenotazione = L_visual.getPrenotazione((lista.getSelectedIndexes())[0]+1);\n\t\t\t\tswitch (to_call)\n\t\t\t\t{\n\t\t\t\t\tcase 1: startModifica(prenotazione); break;\n\t\t\t\t\tcase 2: startCancella(prenotazione); break;\t\n\t\t\t\t\tcase 3: \n\t\t\t\t\t\tif (!chbx2.getState())\n\t\t\t\t\t\t\tstartInsSoggiornante(prenotazione);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstartAggiungi();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4: startVediPrenotazione(prenotazione); break;\n\t\t\t\t}\n\t\t\t}\n      \t});\n     \n\t    Scegli.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tif (!noSelection())\n         \t\t{\n         \t\t\tprenotazione = L_visual.getPrenotazione((lista.getSelectedIndexes())[0]+1);\n\t\t\t\t\tswitch (to_call)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 1: startModifica(prenotazione); break;\n\t\t\t\t\t\tcase 2: startCancella(prenotazione); break;\t\n\t\t\t\t\t\tcase 3: startInsSoggiornante(prenotazione); break;\n\t\t\t\t\t\tcase 4: startVediPrenotazione(prenotazione); break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n        \n\t\tAggiungi.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartAggiungi();\n\t\t\t}\n    \t});\n\t\t\n\t\tt_nome.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tcreaLista(0);\n\t\t\t}\t\t\t      \t\n\t\t});\n\t\n\t\tt_cognome.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tcreaLista(0);\n\t\t\t}\t\t\t      \t\n\t\t});\t\n\n    \tCerca.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tcreaLista(0);\n\t\t\t}\t\n      \t});\n      \n\t  \tAnnulla.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n      \t});    \t\n\n    \tchbx1.addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n\t\t\t\tif (!first_time)\n         \t\t\tcreaLista(0);\n         \t}\n      \t});\n                      \n      \tchbx2.addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n\t\t\t\tif (!first_time)\n         \t\t\tcreaLista(0);\n         \t}\n      \t});\n      \n      \tchbx3.addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n\t\t\t\tif (!first_time)\n         \t\t\tcreaLista(0);\t\n        \t}\n      \t});\n    } \n\n\tvoid startAggiungi()\n\t{\n   \t\tif (!noSelection())\n   \t\t{\n   \t\t\tthis.setEnabled(false);\n   \t\t\tprenotazione = L_visual.getPrenotazione((lista.getSelectedIndexes())[0]+1);\n\t\t\tstartAddSoggiornante(prenotazione);\n\t\t}\n\t}\n\t\n\tvoid startModifica(Prenotazione pren)\n\t{\n\t\tthis.setEnabled(false);\n\t\tStanza stanza = (Principale.db).readStanza(pren.getNumStanza());\n\t\tModificaPrenotazione modify = new ModificaPrenotazione(pren, stanza, this);\n\t\tmodify.setVisible(true);\n\t\tmodify.padre = this;\n\t\tnotifyRoomBlocked(pren, modify, null);\t\n\t}\n\n\tvoid startCancella(Prenotazione pren)\n\t{\n\t\tthis.setEnabled(false);\n\t\tStanza stanza = (Principale.db).readStanza(pren.getNumStanza());\n\t\tCancellaPrenotazione cancel = new CancellaPrenotazione(pren, stanza, this);\n\t\tcancel.setVisible(true);\n\t\tcancel.padre = this;\t\n\t}\n\t\n\tvoid startVediPrenotazione(Prenotazione pren)\n\t{\n\t\tthis.setEnabled(false);\n\t\tStanza stanza = (Principale.db).readStanza(pren.getNumStanza());\n\t\tVediPrenotazione visual = new VediPrenotazione(pren, stanza, this);\n\t\tvisual.setVisible(true);\n\t\tvisual.padre = this;\t\n\t\tnotifyRoomBlocked(pren, null, visual);\t\n\t}\t\n\t\n\tvoid startInsSoggiornante(Prenotazione pren)\n\t{\n\t\tDisponibilita disp;\n\t\tFrame msg;\n\t\t\n\t\tdisp = (Principale.db).readDisponibilita(pren.getNumStanza());\n\t\tif\t(disp == null)\n\t\t\tmsg =  new MessageDialog(this,\" Inconsistenze sul database! \");\n\t\telse\n\t\t{\n\t\t\tif ( disp.getStatusGiorno(DateUtils.dataTogiorni(pren.getInizioSogg()),Const.ANNO_CORRENTE) == Flag.BLOCCATA )\n\t\t\t\tmsg = new AvvisoDialog(this,\" La stanza \"+pren.getNumStanza()+\" non e' assegnata a tale prenotazione. Modificare la prenotazione. \");\n\t\t\telse\n\t\t\t\tfiglio = new InserisciSoggiornante(this, pren);\n\t\t}\n\t}\n\n\t\n\tvoid notifyRoomBlocked(Prenotazione pren, ModificaPrenotazione father1, VediPrenotazione father2)\n\t{\n\t\tchar flag; \n\t\tFrame msg;\n\t\tListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\n\t\tif (elenco_disp == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\tDisponibilita disp = Utils.getDispOfRoom(elenco_disp, pren.getNumStanza(), false);\n\t\tCostanti cost = new Costanti();\n\t\tif ( (((pren.getInizioSogg()).getYear())+1900 ) == cost.getAnnoCorr())\n\t\t\tflag = Const.ANNO_CORRENTE;\n\t\telse\n\t\t\tflag = Const.ANNO_PROSSIMO;\t\n\t\tif (father2 == null)\n\t\t\tif (disp.getStatusGiorno(DateUtils.dataTogiorni(pren.getInizioSogg()), flag) == Flag.BLOCCATA)\n    \t\t\tmsg = new AvvisoDialog(father1,\" ATTENZIONE: per questa prenotazione non e' ancora stata assegnata la stanza!!\");\n    \t\telse\n\t\t\t\t(father1.Assegna).setEnabled(false);\n\t\telse\n\t\t\tif (disp.getStatusGiorno(DateUtils.dataTogiorni(pren.getInizioSogg()), flag) == Flag.BLOCCATA)\n    \t\t\tmsg = new AvvisoDialog(father2,\" ATTENZIONE: per questa prenotazione non e' ancora stata assegnata la stanza!!\");\n    \t\telse\n\t\t\t\t(father2.Assegna).setEnabled(false);\t\t\t\n\t}\n\t\n\tpublic void creaLista(int back)\n\t{\n\t\tFrame msg;\n\t\tPrenotazione p;\t\t\n\t\tDate today = new Date();\n\t\tL_visual = new ListaPrenotazioni();\n\t\tL = (Principale.db).foundPrenotazioni(t_cognome.getText(), t_nome.getText());\n\t\tif (L != null)\n\t\t{\n\t\t\tif (!L.isEmpty())\n\t\t\t{\n\t\t\t\tif (lista.getItemCount() > 0)\n\t\t\t\t\tlista.removeAll();\n\t\t\t\tfor(int i = 1; i <= L.length(); i++)\n\t\t\t\t{\n\t\t\t\t\tp = L.getPrenotazione(i); \n\t\t\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(p.getIdPrenotazione());\n\t\t\t\t\tif (chbx3.getState())\t\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( Utils.data1MaggioreData2( p.getInizioSogg(), today ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlista.addItem(p.toString());\n\t\t\t\t\t\t\tL_visual.addPrenotazione(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (chbx1.getState())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (L_sogg.isEmpty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (((p.getInizioSogg()).getDate() == today.getDate())\n\t\t\t\t\t\t\t\t\t&& ((p.getInizioSogg()).getMonth() == today.getMonth())\n\t\t\t\t\t\t\t\t\t&& ((p.getInizioSogg()).getYear() == today.getYear()) )\n\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\tlista.addItem(p.toString());\t\t\t\n\t\t\t\t\t\t\t\t\tL_visual.addPrenotazione(p);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\tif ( !( Utils.data1MaggioreData2( p.getInizioSogg(), today ) ) && \n\t\t\t\t\t\t\t\t!( Utils.data1MinoreData2( p.getFineSogg(), today) ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//controllo che sia un soggiornante gia registrato\n\t\t\t\t\t\t\t\tif (!L_sogg.isEmpty())\n\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\tlista.addItem(p.toString());\t\t\t\t\n\t\t\t\t\t\t\t\t\tL_visual.addPrenotazione(p);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\tif (lista.getItemCount() == 0)\n\t\t\t\t{\n\t\t\t\t\tif (back == 0)\n\t\t\t\t\t\tmsg = new AvvisoDialog(this, \" Nessuna prenotazione trovata! \");\n\t\t\t\t\tScegli.setEnabled(false);\n\t\t\t\t\tAggiungi.setEnabled(false);\n\t\t\t\t\tpanel3.setVisible(false);\n\t\t\t\t\tpack();\n\t\t\t\t\tif (to_call == 3)\n\t\t\t\t\t\tAggiungi.setEnabled(false);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (chbx1.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tAggiungi.setEnabled(false);\n\t\t       \t\t\tScegli.setEnabled(true);\n\t\t\t\t\t}\n\t\t\t\t\tif (chbx2.getState())\n\t\t\t\t\t{\n\t\t       \t\t\tAggiungi.setEnabled(true);\n\t\t\t\t\t\tif (to_call == 3)\n\t\t       \t\t\t\tScegli.setEnabled(false);\n    \t\t\t   \t\telse\n\t\t\t       \t\t\tScegli.setEnabled(true);\n\t\t\t\t\t}\n\t\t\t\t\tif (chbx3.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tScegli.setEnabled(true);\n\t\t\t\t\t}\n\t\t\t\t\tpanel3.setVisible(true);\n\t\t\t\t\tpack();\n\t\t\t\t}\t\t\t\n\t\t\t\tif (first_time)\n\t\t\t\t\tfirst_time = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (back == 0)\n\t\t\t\t\tmsg = new AvvisoDialog(this, \" Prenotazione non trovata! \");\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (back == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (lista.getItemCount() > 0)\n\t\t\t\t\t\t\tlista.removeAll();\n\t\t\t\t\t\tpanel3.setVisible(false);\n\t\t\t\t\t\tpack();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t}\t\t\t\n\n\tboolean noSelection()\n\t{\n\t\tFrame msg;\n\t\tif (lista.getSelectedIndex() == -1)\n\t\t{\n\t\t\tmsg = new AvvisoDialog(this,\" Selezionare una prenotazione dalla lista e ripremere il tasto\");\n\t\t\treturn true;\n\t\t}\t\n\t\treturn false;\n\t}\n\n\tvoid startAddSoggiornante(Prenotazione pren)\n\t{\n\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(pren.getIdPrenotazione());\n\t\tif (L_sogg != null)\n\t\t\tif (L_sogg.length() > 0)\n\t\t\t{\t\n\t\t\t\tSoggiornante sogg = L_sogg.getSoggiornante(1);\n\t\t\t\tStanza room = (Principale.db).readStanza(sogg.getNumStanza());\n\t\t\t\tif ( (room.getPostiLetto() > L_sogg.length()) ||\n\t       \t\t\t( (room.getPostiLetto() == L_sogg.length()) && (room.getDispLettoAgg() == Const.SI) ) )\n\t\t \t\t\tfiglio = new AggiungiSoggiornante(this, pren, room, L_sogg.length());\n\t\t\t\telse\n\t\t\t\t\tfiglio = new AvvisoDialog(this,\" Nessun posto disponibile nella stanza n. \"+room.getNumStanza());\n\t\t\t}\n\t\t\telse\n\t\t\t\tfiglio = new AvvisoDialog(this,\" La prenotazione non e' adempiuta. Premere 'Scegli' per gestire l'arrivo clienti\");\n\t\telse\n\t\t\tfiglio = new MessageDialog(this,\" Problemi con il database!\");\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d43"},"name":"SubStorico.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport common.utility.*;\n\npublic class SubStorico extends Frame\n{\n   Label label;\n   Panel panel0, panel1;\n   Button Ricerca, Annulla;\n   GridBagLayout gridbag = new GridBagLayout();\n   Frame p = new Frame();\n   Frame figlio;\n\n   public SubStorico()\n   {\n      super(\"Storico Clienti\");\n      setup();\n      init();\n      pack();\n      //setVisible(true);\n   }\n\n   void setup()\n   {\n      this.setFont(ConfigurazioneSistema.font_sub);\n      panel0=new Panel();\n      panel0.setLayout(gridbag);\n      panel0.setBackground(Color.white);\n      Immagine  figura = new Immagine(\"servizi5.jpg\");\n      Etichetta etich = new Etichetta(\"Storico.gif\");\n      Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 1.0, 1.0,0,0,0,0);\n      Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 1.0, 1.0,0,0,0,0);\n       \n      panel1 = new Panel();\n      panel1.setLayout(new GridLayout(2,1));\n      Ricerca = new Button(\" Ricerca \");\n      Annulla = new Button(\" Annulla \");\n      panel1.add(Ricerca);\n      panel1.add(Annulla);\n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n      Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n   }\n\n   void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            p.setEnabled(true);\n         }\n      });\n\n      Ricerca.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            start_ricerca();\n         }\n      });\n   }\n\n   void start_ricerca()\n   {\n      figlio = new MascheraRicercaStorico(this);\n   }\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d44"},"name":"CancellaCommissioni.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\nimport moduli.Commissionamento;\n\npublic class CancellaCommissioni extends MascheraCommissioni\n{\n\tCommissionamento commissione;\n   \t\n   \tpublic CancellaCommissioni()\n   \t{\n      \tsuper(\"\",\"\",\"Cancella dati delle commissioni\",\"Cancella\", 3);\n      \tinit();\n   \t}\n\n \tpublic void init()\n \t{     \t\n      \tnome_agenzia.setEditable(true);\n      \tnum_stanza.setEditable(false);\n      \tnum_tel_agenzia.setEditable(false);\n        inizio_comm.setEditable(false);\n        fine_comm.setEditable(false);\n        scadenza_comm.setEditable(false); \n       \tnum_stanza.setEditable(false);\n       \tAzione.setEnabled(false);\n      \t\n\t\tlista.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tcommissione = L.getCommissionamento((lista.getSelectedIndexes())[0]+1);\n\t\t\t\twriteDatiComm(commissione);\n\t\t\t\tAzione.setEnabled(true);\n\t\t\t\tpanel5.setVisible(false);\n\t\t\t\tpack();\n         \t}\n      \t});\n   \n\t\tnome_agenzia.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tcreaLista();\n\t\t\t}\t\t\t      \t\n\t\t});\n\t\t\n\t\tCerca.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tcreaLista();\n\t\t\t}\t\t\t      \t\n\t\t});\n\n\t   \tAzione.addActionListener(new ActionListener()\n   \t\t{\n    \t    public void actionPerformed(ActionEvent e)\n        \t{\n\t\t\t\tstartAzione();\n\t\t\t}\n\t\t});\t\n\t}\n\t\n\tvoid startAzione()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif ( !errori() )\n\t\t{\n\t\t\tint j;\n\t\t\tif ( (j = (Principale.db).delCommissionamento(commissione.getIdCommissionamento())) == DataBase.OK)\n\t\t\t{\t\n\t\t\t\taggiornaDisp(commissione, Flag.DISPONIBILE);\n\t\t\t\tnum_tel_agenzia.setEditable(false);\n\t\t\t\tscadenza_comm.setEditable(false);\n\t\t\t\tAzione.setEnabled(false);\t\t\t\t\t\t\n\t\t\t\tcleanFields();\n\t\t\t\tnome_agenzia.setEditable(true);\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d45"},"name":"ConfigurazioneSistema.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d0d"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.lang.String;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class ConfigurazioneSistema extends Frame\n{\n\t// font costanti per uniformare l'aspetto delle finestre\n\tpublic static final Font font_base = new Font(\"TimesRoman\", Font.PLAIN, 12);\n\tpublic static final Font font_sub = new Font(\"Courier\", Font.BOLD, 18);\n\tpublic static final Font font_titolo = new Font(\"Courier\", Font.BOLD, 12);\n\tpublic static final Font font_allineato = new Font(\"Courier\", Font.PLAIN, 12);\n\n\t// componenti della finestra di configurazione\n    TextField giorni_blocco, sup_bassissima, sup_bassa, sup_media, sup_alta,sup_letto_agg,\n             costo_x_scatto, sup_neonato, rid_bambino, rid_ragazzo, rid_comitiva,\n             password, num_max_stanze, px_colazione, px_mezza, px_intera, coperto,\n             min_pers_comitiva, cambio, albergo, indirizzo_alb, comune_alb, \n             citta_alb, rag_soc, licenza;\n    Label cambio_L_E;\n    Label etichetta, etich1, etich2, etich3, etich4, etich5, etich6, etich7, etich8,\n         etich9, etich10, etich11 ,etich11_1, etich12, etich13, etich14, etich15, etich16, etich17,\n         etich18, etich19, etich20, etichetta1, etichetta2, etichetta3,etichetta4,\n         etichetta5, etich21, etich22, etichetta6, etich23,etich24,etich25, etichetta7;\n    Panel panel0, panel1, panel2, panel3, panel4;\n    GridBagLayout gridbag = new GridBagLayout();\n    CheckboxGroup checkbox;\n    Checkbox[] checkboxes;\n    Button Annulla, Passwd, Conferma, Stagioni;\n    DefinizioneStagionalita def_stag;\n\n\t// per il cambio di password e stagionalita\n\tstatic String new_passwd;\n\tstatic char[] new_stag_anno_corr, new_stag_anno_prox;\n   \n\t// per la gerarchia delle finestre\n\tSubGestione padre = new SubGestione();\n\n\t// per fregare l'ascoltatore\n\tstatic Configurazione this_config;\n\tDataBase db;\n\t\n\tboolean first_start;\n   \n    public ConfigurazioneSistema(Configurazione config, boolean prima_volta, DataBase archivio)\n    {\n      super(\"Configurazione di sistema\");\n      this_config = config;\n      db = archivio;\n      new_passwd = this_config.getPassword();\n      new_stag_anno_corr = this_config.getStagionalita(Const.ANNO_CORRENTE);\n      new_stag_anno_prox = this_config.getStagionalita(Const.ANNO_PROSSIMO);\n      first_start = prima_volta;\n      setupPanels(prima_volta);\n      init();\n      pack();\n    }\n\n  \tpublic  void setupPanels(boolean prima_volta)\n   \t{\n   \t  this.setFont(font_base);\n      //creo le etichette\n      cambio_L_E = new Label(\"Cambio Lira <-> EURO\");\n      etichetta = new Label(\"Licenza:\");\n      etichetta.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etichetta1 = new Label(\"DATI DI CONFIGURAZIONE\");\n      etichetta1.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etichetta2 = new Label(\"Supplementi dovuto alle stagionionalita'\");\n      etichetta2.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etichetta3 = new Label(\"Riduzioni\");\n      etichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etichetta4 = new Label(\"Ristorazione\");\n      etichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etichetta5 = new Label(\"Valuta\");\n      etichetta5.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etichetta6 = new Label(\"Cambio di password utente\");\n      etichetta6.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etichetta7 = new Label(\"Definizione delle stagionalita'\");\n      etichetta7.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      \n      licenza = new TextField(\"\",35);\n      albergo = new TextField(\"\",25);\n      comune_alb =new TextField(\"\",35);\n      citta_alb = new TextField(\"\",25);\n      indirizzo_alb = new TextField(\"\",35);\n      rag_soc = new TextField(\"\",35);\n      giorni_blocco = new TextField(\"\",4);\n      sup_bassissima = new TextField(\"\",9);\n      sup_bassa = new TextField(\"\",9);\n      sup_media = new TextField(\"\",9);\n      sup_alta = new TextField(\"\",9);\n      sup_neonato = new TextField(\"\",9);\n      sup_letto_agg = new TextField(\"\",9);\n      rid_bambino = new TextField(\"\",4);\n      rid_ragazzo = new TextField(\"\",4);\n      rid_comitiva = new TextField(\"\",4);\n      min_pers_comitiva = new TextField(\"\",4);\n      num_max_stanze = new TextField(\"\",4);\n      num_max_stanze.setEditable(false);\n      px_colazione = new TextField(\"\",9);\n      px_mezza = new TextField(\"\",9);\n      px_intera = new TextField(\"\",9);\n      coperto = new  TextField(\"\",9);\n      costo_x_scatto = new TextField(\"\",9);\n      password = new TextField(\"\",20);\n      cambio = new TextField(\"\",8);\n\n      //creo un Checkbox\n      checkbox = new CheckboxGroup();\n      checkboxes = new Checkbox[2];\n      checkboxes[0] = new Checkbox(\" Lire\",checkbox,true);\n      checkboxes[1] = new Checkbox(\" EURO\",checkbox,false);\n\t  writeDatiConf();\n\t  \n\t  if (prima_volta)\n\t\t\tlicenza.setEditable(true);\n\t  else\n\t\t\tlicenza.setEditable(false);\n\n      licenza.setForeground(Color.red.darker());\n      albergo.setForeground(Color.blue);\n      comune_alb.setForeground(Color.blue);\n      citta_alb.setForeground(Color.blue);\n      rag_soc.setForeground(Color.blue);\n      password.setEchoChar('*');\n\n      etich1 = new Label(\"Dati dell'albergo\");\n      etich1.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      etich2 = new Label(\"Nome dell'albergo:\");\n      etich3 = new Label(\"Indirizzo dell'albergo:\");\n      indirizzo_alb.setForeground(Color.blue);\n      etich4 = new Label(\"Comune dell'albergo:\");\n      etich5 = new Label(\"Citta' dell'albergo:\");\n      etich6 = new Label(\"Numero di giorni massimo di bloccaggio di una stanza\");\n      etich7 = new Label(\"Supplemento bassisima stagione\");\n      etich8 = new Label(\"Supplemento bassa stagione\");\n      etich9 = new Label(\"Supplemento media stagione\");\n      etich10 = new Label(\"Supplemento alta stagione\");\n      etich11 = new Label(\"Supplemento per neonati\");\n      etich11_1 = new Label(\"Supplemento letto aggiuntivo\");\n      etich12 = new Label(\"Riduzione per bambini %\");\n      etich13 = new Label(\"Riduzione per ragazzi %\");\n      etich14 = new Label(\"Riduzione per comitive %\");\n      etich15 = new Label(\"Numero minimo di persone per comitiva\");\n      etich16 = new Label(\"Numero di stanze\");\n      etich17 = new Label(\"Supplemento prima colazione\");\n      etich18 = new Label(\"Supplemento mezza pensione\");\n      etich19 = new Label(\"Supplemento pensione completa\");\n      etich20 = new Label(\"Coperto per la ristorazione\");\n      etich21 = new Label(\"Costo di uno scatto telefonico\");\n      etich22 = new Label(\"Password utente\");\n      etich23 = new Label(\"Lire\");\n      etich24 = new Label(\"Dollari\");\n      etich25 = new Label(\"Ragione sociale\");\n\n      //creo i pulsanti\n      Annulla = new Button(\"Annulla\");\n      Passwd = new Button(\"Cambio di password\");\n      Conferma = new Button(\"Conferma\");\n      Stagioni = new Button(\"Definisci Stagionalita'\");\n\n      panel0 = new Panel();\n      panel0.setLayout(gridbag);\n      Utils.constrain(panel0, etichetta, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0); \n      Utils.constrain(panel0, licenza, 1, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0); \n      Utils.constrain(panel0, etich1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel0, etich2, 0, 2, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, albergo, 1, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, etich3, 2, 2, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, indirizzo_alb, 3, 2, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, etich4, 0, 3, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, comune_alb, 1, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, etich5, 2, 3, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, citta_alb, 3, 3, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, etich25, 0, 4, 1, 1, GridBagConstraints.NONE,\n                    GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel0, rag_soc, 1, 4, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n\n      panel1 = new Panel();\n      panel1.setLayout(gridbag);\n      Utils.constrain(panel1, etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5); \n      Utils.constrain(panel1, etich6, 0, 1, 5, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5); \n      Utils.constrain(panel1, giorni_blocco, 5, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5); \n      Utils.constrain(panel1, etich21, 7, 1, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5); \n      Utils.constrain(panel1, costo_x_scatto, 10, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5); \n      Utils.constrain(panel1, etichetta2, 0, 2, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, etichetta3, 5, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, etichetta4, 8, 2, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n\t// supplementi\n      Utils.constrain(panel1, etich7, 0, 3, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, sup_bassissima, 3, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich8, 0, 4, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, sup_bassa, 3, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich9, 0, 5, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, sup_media, 3, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich10, 0, 6, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, sup_alta, 3, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich11, 0, 7, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, sup_neonato, 3, 7, 1, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, etich11_1, 0, 8, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, sup_letto_agg, 3, 8, 1, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);                 \n\t\n\t// riduzioni\n      Utils.constrain(panel1, etich12, 4, 3, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, rid_bambino, 7, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich13, 4, 4, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, rid_ragazzo, 7, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich14, 4, 5, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, rid_comitiva, 7, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich15, 4, 6, 3, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, min_pers_comitiva, 7, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n\n\t// ristorazione\n      Utils.constrain(panel1, etich17, 8, 3, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, px_colazione, 11, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich18, 8, 4, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, px_mezza, 11, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich19, 8, 5, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, px_intera, 11, 5, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich20, 8, 6, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, coperto, 11, 6, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, cambio_L_E, 5, 7, 3, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, cambio, 7, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, etich16, 9, 7, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, num_max_stanze, 11, 7, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n\n      panel2 = new Panel();\n      panel2.setLayout(gridbag);\n      Utils.constrain(panel2, etichetta5, 0, 0, 1, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel2, checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel2, checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n\n      panel3 = new Panel();\n      panel3.setLayout(gridbag);\n      Utils.constrain(panel3, etichetta6, 0, 0, 1, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel3, Passwd, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel3, etichetta7, 0, 1, 1, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel3, Stagioni, 1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);                   \n      \n      \n      \n      panel4 = new Panel();\n      panel4.setLayout(gridbag);\n      Utils.constrain(panel4, Annulla, 8, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel4, Conferma, 9, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5); \n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 6, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel1, 0, 6, 12, 9, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel2, 0, 15, 1, 3, GridBagConstraints.HORIZONTAL,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel3, 1, 15, 11, 2, GridBagConstraints.HORIZONTAL,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel4, 0, 19, 12, 1, GridBagConstraints.HORIZONTAL,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n   }\n   \n   public void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n\t\t\tif (!first_start)\n\t            padre.setEnabled(true);\n\t        else\n\t        \tSystem.exit(0);\n         }\n      });\n      \n      Conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartConferma();\n\t\t }\n      });\n\n      checkboxes[0].addItemListener(new ItemListener()   \n      {\n         public void itemStateChanged(ItemEvent e)\n         {\n            if(checkboxes[0].getState())\n            {\n            \tstartAvviso(Const.LIRE);\n            }\n         }\n      });\n                      \n      checkboxes[1].addItemListener(new ItemListener()   \n      {\n         public void itemStateChanged(ItemEvent e)\n         {\n            if(checkboxes[1].getState())\n            {\n            \tstartAvviso(Const.EURO);\t\n            }\n         }\n      });\n      \n      \n      Passwd.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            startChangePwd();\n         }\n      });\n      \n      Stagioni.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            setStagioni();\n         }\n      });\n   }\n\t\n\tvoid startAvviso(char nuova_valuta)\n\t{\n\t\tFrame msg;\n\t\tif (nuova_valuta != this_config.getValuta() && !first_start)\n\t\t{\n\t\t\tmsg = new AvvisoDialog(this, \"Attenzione: il cambio LIRA<->EURO effettuato alla conferma modifichera' le cifre della finestra corrente!\");\n\t\t}\n\t}\n\t\n    void startChangePwd()\n    {\n      this.setEnabled(false);\n      CambioPassword cambio = new CambioPassword();\n      cambio.setVisible(true);\n      cambio.conf = this;\n    }\n \n \tvoid startConferma()\n\t{\n\t\t\tMessageDialog msg;\n\t\t\tint j;\n\t\t\t\t\n\t\t\tif (!errore())\n\t\t\t{\n\t\t\t\tchar vecchia_valuta = this_config.getValuta();\n\t\t\t\treadDatiConf();\n\t\t\t\tthis_config.setPassword(new_passwd);\n\t\t\t\tthis_config.setStagionalita(new_stag_anno_corr, new_stag_anno_prox);\n\t\t\t\tif ( (j = (db.writeConfigurazione(this_config))) != DataBase.OK ) \n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( vecchia_valuta != this_config.getValuta() && !first_start)\n\t\t\t\t\t{\n\t\t\t\t\t\tj = (Principale.db).startCambioValuta();\n\t\t\t\t\t\tif (j != DataBase.OK)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmsg = new MessageDialog(this, \"Errore con il database: \"+DataBase.strErrore(j));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis_config = (Principale.db).readConfigurazione();\n\t\t\t\t\t\tPrincipale.config = this_config;\n\t\t\t\t\t}\n\t\t\t\t\tif (!(first_start))\n\t\t\t\t\t{\n\t\t\t\t\t\tpadre.pass.p.setTitle(this_config.getNomeAlbergo());\n\t\t\t\t\t\tpadre.setEnabled(true);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tFrame p = new Principale(this_config, db);\n\t\t\t\t\t\tp.setVisible(true);\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\tdispose();\n\t\t\t\t}\n\t\t\t}\n\t}\n\t\n\tvoid setStagioni()\n\t{\n      def_stag = new DefinizioneStagionalita(this);\n\t}\t\n\t\n\tboolean errore()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif ( !((licenza.getText()).length() < 33 ) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La licenza deve essere composta da al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((albergo.getText()).length() < 21 ))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il nome dell'albergo deve essere composto da al piu' 20 caratteri! \");\n\t\t\treturn true;\n\t\t}\n      \tif ( !((comune_alb.getText()).length() < 33 ) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il comune deve essere composto da al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((indirizzo_alb.getText()).length() < 33 ) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" L'indirizzo deve essere composto da al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((citta_alb.getText()).length() < 21 ) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La citta' deve essere composta da al piu' 20 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !((rag_soc.getText()).length() < 33 ) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" La ragione sociale deve essere composta da al piu' 32 caratteri! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !Utils.isIntPos(giorni_blocco.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero di giorni di blocco deve essere un numero intero positivo! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !Utils.isFloatPos(sup_bassissima.getText()) ||\n\t\t\t !Utils.isFloatPos(sup_bassa.getText()) ||\n\t\t\t !Utils.isFloatPos(sup_media.getText()) ||\n\t\t\t !Utils.isFloatPos(sup_alta.getText()) ||\n\t\t\t !Utils.isFloatPos(sup_neonato.getText()) ||\n\t\t\t !Utils.isFloatPos(sup_letto_agg.getText()) ||\n\t\t\t !Utils.isFloatPos(px_colazione.getText()) ||\n\t\t\t !Utils.isFloatPos(px_mezza.getText()) ||\n\t\t\t !Utils.isFloatPos(px_intera.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" I supplementi devono essere numeri positivi! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !Utils.isIntPos(rid_bambino.getText()) ||\n\t\t\t !Utils.isIntPos(rid_ragazzo.getText()) ||\n\t\t\t !Utils.isIntPos(rid_comitiva.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" deve essere un numero intero! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !Utils.isIntPos(min_pers_comitiva.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero di persone comitiva deve essere un numero intero positivo! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !Utils.isIntPos(num_max_stanze.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il numero di stanze deve essere un numero intero positivo! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !Utils.isFloatPos(coperto.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il coperto deve essere un numero positivo! \");\n\t\t\treturn true;\n\t\t}\n\t\tif ( !Utils.isFloatPos(costo_x_scatto.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il costo dello scatto telefonico deve essere un numero positivo! \");\n\t\t\treturn true;\n\t\t}\n\t\tif\t( !Utils.isFloatPos(cambio.getText()) )\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\tif ( !((Float.valueOf(cambio.getText())).floatValue() > 0) )\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\n\t\t\t\treturn true;\n\t\t\t}\n\t\treturn false;\n\t}\n\t\n\tvoid readDatiConf()\n\t{\n\t\tthis_config.setLicenza(licenza.getText());\n\t\tthis_config.setNomeAlbergo(albergo.getText());\n      \tthis_config.setComuneAlb(comune_alb.getText());\n      \tthis_config.setIndirizzoAlb(indirizzo_alb.getText());\n      \tthis_config.setCittaAlb(citta_alb.getText());\n      \tthis_config.setRagSoc(rag_soc.getText());\n\t\tthis_config.setGiorniBlocco(Integer.parseInt(giorni_blocco.getText()));\n      \tthis_config.setSupplemento((Float.valueOf(sup_bassissima.getText())).floatValue(),Flag.BASSISSIMA_STAGIONE);\n      \tthis_config.setSupplemento((Float.valueOf(sup_bassa.getText())).floatValue(),Flag.BASSA_STAGIONE);\n      \tthis_config.setSupplemento((Float.valueOf(sup_media.getText())).floatValue(),Flag.MEDIA_STAGIONE);\n      \tthis_config.setSupplemento((Float.valueOf(sup_alta.getText())).floatValue(),Flag.ALTA_STAGIONE);\n      \tthis_config.setSupNeonato((Float.valueOf(sup_neonato.getText())).floatValue());\n      \tthis_config.setSupLettoAgg((Float.valueOf(sup_letto_agg.getText())).floatValue());\n      \tthis_config.setRiduzione(Integer.parseInt(rid_bambino.getText()),Flag.BAMBINO);\n      \tthis_config.setRiduzione(Integer.parseInt(rid_ragazzo.getText()),Flag.RAGAZZO);\n      \tthis_config.setRiduzione(Integer.parseInt(rid_comitiva.getText()),Flag.COMITIVA);\n      \tthis_config.setMinPersComit(Integer.parseInt(min_pers_comitiva.getText()));\n      \tthis_config.setNumStanze(Integer.parseInt(num_max_stanze.getText()));\n      \tthis_config.setPxColazione((Float.valueOf(px_colazione.getText())).floatValue());\n      \tthis_config.setPxMezza((Float.valueOf(px_mezza.getText())).floatValue());\n      \tthis_config.setPxIntera((Float.valueOf(px_intera.getText())).floatValue());\t\n      \tthis_config.setCoperto((Float.valueOf(coperto.getText())).floatValue());\n      \tthis_config.setCostoXScatto((Float.valueOf(costo_x_scatto.getText())).floatValue());\n      \tthis_config.setCoeffXCambio((Float.valueOf(cambio.getText())).floatValue());\n      \tif (checkboxes[0].getState())\n      \t\tthis_config.setValuta(Const.LIRE);\n      \telse\n      \t\tthis_config.setValuta(Const.EURO);\n\t}\n\t\n\tvoid writeDatiConf()\n\t{\n\t\t//String s = new String(Principale.simbol);\n\t\t\n\t\tlicenza.setText(\"\"+this_config.getLicenza());\n\t\talbergo.setText(\"\"+this_config.getNomeAlbergo());\n      \tcomune_alb.setText(\"\"+this_config.getComuneAlb());\n      \tindirizzo_alb.setText(\"\"+this_config.getIndirizzoAlb());\n      \tcitta_alb.setText(\"\"+this_config.getCittaAlb());\n      \trag_soc.setText(\"\"+this_config.getRagSoc());\n\t\tgiorni_blocco.setText(\"\"+this_config.getGiorniBlocco());\n      \tsup_bassissima.setText(\"\"+this_config.getSupplemento(Flag.BASSISSIMA_STAGIONE));\n      \tsup_bassa.setText(\"\"+this_config.getSupplemento(Flag.BASSA_STAGIONE));\n      \tsup_media.setText(\"\"+this_config.getSupplemento(Flag.MEDIA_STAGIONE));\n      \tsup_alta.setText(\"\"+this_config.getSupplemento(Flag.ALTA_STAGIONE));\n      \tsup_neonato.setText(\"\"+this_config.getSupNeonato());\n      \tsup_letto_agg.setText(\"\"+this_config.getSupLettoAgg());\n      \trid_bambino.setText(\"\"+this_config.getRiduzione(Flag.BAMBINO));\n      \trid_ragazzo.setText(\"\"+this_config.getRiduzione(Flag.RAGAZZO));\n      \trid_comitiva.setText(\"\"+this_config.getRiduzione(Flag.COMITIVA));\n      \tmin_pers_comitiva.setText(\"\"+this_config.getMinPersComit());\n      \tnum_max_stanze.setText(\"\"+this_config.getNumStanze());\n      \tpx_colazione.setText(\"\"+this_config.getPxColazione());\n      \tpx_mezza.setText(\"\"+this_config.getPxMezza());\n      \tpx_intera.setText(\"\"+this_config.getPxIntera());\t\n      \tcoperto.setText(\"\"+this_config.getCoperto());\n      \tcosto_x_scatto.setText(\"\"+this_config.getCostoXScatto());\n      \tcambio.setText(\"\"+this_config.getCoeffXCambio());\n\t\tif (this_config.getValuta() == Const.LIRE)\n\t\t\tcheckbox.setSelectedCheckbox(checkboxes[0]);\n\t\telse\n\t\t\tcheckbox.setSelectedCheckbox(checkboxes[1]);\n\t}\n}\n\n/****************************************************************************/\nclass CambioPassword extends Frame\n{\n   TextField testo1, testo2, testo3;\n   Label label1, label2, label3;\n   GridBagLayout grid = new GridBagLayout();\n   Panel pannello, pannello_x_annulla;\n   Frame conf = new Frame();\n   Button conferma, cambio, annulla;\n   MessageDialog dialog;\n   \n   public CambioPassword()\n   {\n      super(\"Cambio di password\");\n      setupPanels();\n      init();\n      pack();\n   }\n\n   void setupPanels()\n   {\n   \t  this.setFont(ConfigurazioneSistema.font_base);\n      //creo le etichette\n      label1 = new Label(\"Inserire vecchia password\");\n      label2 = new Label(\"Inserire nuova password\");\n      label3 = new Label(\"Reinserire la nuova password\");\n\n      //creo i textField\n      testo1 = new TextField(\"\",20);\n      testo2 = new TextField(\"\",20);\n      testo1.setEchoChar('*');\n      testo2.setEchoChar('*');\n      testo2.setEditable(false);\n\n      conferma = new Button(\"Conferma\");\n      cambio = new Button(\"Cambio di password\");\n      cambio.setEnabled(false);\n\t  annulla = new Button(\"Annulla\");\n      pannello = new Panel();\n      pannello.setLayout(grid);\n      Utils.constrain(pannello, label1, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(pannello, testo1, 2, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(pannello, label2, 0, 1, 2, 1, GridBagConstraints.NONE,\n                       GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(pannello, testo2, 2, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(pannello, conferma, 3, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(pannello, cambio, 3, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n                        \n\t  pannello_x_annulla = new Panel();\n\t  pannello_x_annulla.setLayout(grid);\n      Utils.constrain(pannello_x_annulla, annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5); \n\n      this.setLayout(grid);\n      Utils.constrain(this,pannello, 0, 0, 4, 2, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this,pannello_x_annulla, 0, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\n  }\n\n  void init()\n  {\n      annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            conf.setEnabled(true);\n         }\n      });\n\n      conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            g();\n         }\n      });\n\n      testo1.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            g();\n         }\n      });\n\n      cambio.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            i();\n         }\n      });\n\n      testo2.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            i();\n         }\n      });\n   }\n\n   void g()\n   {\n\t\tString tmp = testo1.getText();\n\t\tif(tmp.equals(ConfigurazioneSistema.new_passwd))\n\t\t{\n\t\t\ttesto2.setEditable(true);\n\t\t\ttesto1.setEditable(false);\n\t\t\tcambio.setEnabled(true);\n\t\t\tconferma.setEnabled(false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdialog = new MessageDialog(this,\"La password non e' corretta\");\n\t\t\tdialog.setVisible(true);\n\t\t\ttesto1.setText(\"\");\n\t\t}\n\t}\n\n\tvoid i()\n\t{\n        String tmp = testo2.getText();\n\t\tMessaggio messaggio1 = new Messaggio(tmp);\n\t\tmessaggio1.setVisible(true);\n\t\tmessaggio1.c = this;\n\t\tthis.setEnabled(false);\n\t}\n}\n\n/****************************************************************************/\nclass Messaggio extends Frame\n{\n   Label msg;\n   Button OK;\n   CambioPassword c = new CambioPassword();\n   Avviso dialog;\n   GridBagLayout gridbag = new GridBagLayout();\n   TextField testo3;\n   Panel pannello;\n   String pwd_passata;\n    \n   public Messaggio(String text)\n   {\n      super(\"Messaggio per il cambio di password\");\n      setup();\n      pwd_passata = text;\n      init();\n      pack(); \n   }\n\n   void setup()\n   {\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      //creo un pulsante\n      OK = new Button(\"OK\");\n\n      //creo un'etichetta\n      msg = new Label(\"Reinserire la nuova password\");\n\n      //creo un textField\n      testo3 = new TextField(\"\",20);\n      testo3.setEchoChar('*');\n\n      pannello = new Panel();\n      pannello.setLayout(gridbag);\n      Utils.constrain(pannello, msg, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(pannello, testo3, 2, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(pannello, OK, 4, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n\n      this.setLayout(gridbag);\n      Utils.constrain(this, pannello, 0, 0, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n   }\n\n   public void init()\n   {\n      OK.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n         \tstartOK();\n\t\t }\n      });\n\n      testo3.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n         \tstartOK();\n         }   \n      });\n   }\n\n\tvoid startOK()\n\t{\n           if((testo3.getText()).equals(pwd_passata))\n           {\n               ConfigurazioneSistema.new_passwd = testo3.getText();\n\t\t       dialog = new Avviso(this,\"La password verra' cambiata alla conferma\");\n           }\n           else\n\t\t       dialog = new Avviso(this,\"La nuova password non e' stata accettata\");\n      \t   dialog.setVisible(true);\n\t}\n}\n\n/****************************************************************************/\nclass Avviso extends Frame\n{\n   Button OK;\n   Messaggio padre;\n\n   public Avviso(Messaggio parent, String testo)\n   {\n      super(\"Attenzione\");\n      padre = parent;\n      padre.setEnabled(false);\n      \n\t  this.setFont(ConfigurazioneSistema.font_titolo);\n      Panel textPanel = new Panel();\n      Panel buttonPanel = new Panel();\n      textPanel.add(new Label(testo));\n      OK = new Button(\"OK\");\n      buttonPanel.add(OK);\n      add(\"North\",textPanel);\n      add(\"Center\",buttonPanel);\n      init();\n      pack();\n      setVisible(true);\n   }\n\n   public void init()\n   {\n      OK.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n         \tesci();\n         }\n      });\n   }\n\t\n\tvoid esci()\n\t{\n\t\tdispose();\n\t\tpadre.dispose();\n\t\tpadre.c.dispose();\n\t\tpadre.c.conf.setEnabled(true);\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d46"},"name":"AskChiudiConto.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d16"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport interfacce.MascheraVisualizzazioneConto;\n\npublic class AskChiudiConto extends Frame\n{\n   \tButton button1, button2, button3;\n   \tMascheraVisualizzazioneConto padre;\n   \tPanel panel1, panel2;\n   \tLabel message;\n   \tGridBagLayout gridbag = new GridBagLayout();\n   \t\n   \tpublic AskChiudiConto(MascheraVisualizzazioneConto parent)\n   \t{\n      \tsuper(\"Cosa devo fare?\");\n      \tpadre = parent;\n      \tpadre.setEnabled(false);\n      \tsetupPanel();\n      \tinit();\n      \tpack();\n      \tsetVisible(true);\n   }\n\n\tvoid setupPanel()\n\t{\n      \tmessage = new Label(\"ATTENZIONE: questa operazione comporta comporta la chiusura del soggiorno.\");\n      \tbutton1 = new Button(\" Annulla \");\n      \tbutton2 = new Button(\" Stampa e chiudi \");\n        this.setFont(ConfigurazioneSistema.font_titolo);\n        panel1 = new Panel();\n        panel1.setLayout(gridbag);\n        Utils.constrain(panel1, message, 0, 0, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n      \t//Creo il pannello in basso con due pulsanti                  \n        panel2 = new Panel();\n        panel2.setLayout(gridbag);\n        Utils.constrain(panel2, button1, 0, 0, 1, 1, GridBagConstraints.NONE,\n        \t            GridBagConstraints.CENTER, 0.0, 0.0, 0, 0, 0, 15);\n            Utils.constrain(panel2, button2, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 0, 15, 0, 0);             \n        //Attacco i pannelli al frame\n        this.setLayout(gridbag);\n        Utils.constrain(this, panel1, 0, 1, 4, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n        Utils.constrain(this, panel2, 0, 14, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n\t}\n   \n   \n   public void init()\n   {\n      button1.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n         \tstartAzione();\n         }\n      });\n      \n      button2.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tpadre.startChiusura();\n\t\t\tstartAzione();\n         }\n      });\n   }\n   \n   void startAzione()\n   {\n       \tsetVisible(false);\n        dispose();\n        padre.dispose();\n        padre.conto.setEnabled(true);\n   }\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d47"},"name":"MascheraCalcoloConto.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.Date;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class MascheraCalcoloConto extends Frame\n{\n   \tButton Annulla, Visualizza;\n   \tTextField testo[];\n   \tLabel etichetta1, etichetta2, etichetta3, etichetta4, etichetta5, stanza,\n         stanza1, nome, cognome, stanza2;\n   \tPanel panel[];\n   \tCheckboxGroup checkbox_group;\n   \tCheckbox[] checkboxes;\n   \tGridBagLayout gridbag =new GridBagLayout();\n\n   \t// per la gerarchia\n\tFrame padre;\n\tMascheraVisualizzazioneConto visual;\n\t\n\t// variabili locali\n\tSoggiornante sogg_x_conto_sing;\n\tString L_st[];\n\tDate date_fine[]; // questo array e' necessario per la chiusura della comitiva\n\t\t\t\t\t\t// infatti per poter ripristinare le disponibilita della\n\t\t\t\t\t\t// stanza correttamente ho bisogno delle date di fine corrette\n\tDate date_inizio[];\n\tDate data_fine_magg;\n\tDate fine_sogg_anticipato;\n   \tint tipo_conto;\n   \tboolean qualcuno_tramite_agenzia;\n   \tboolean qualcuno_senza_agenzia;\n   \t\n   \tpublic MascheraCalcoloConto(Frame parent)\n   \t{\n      super(\"Calcolo del Conto\");\n      padre = parent;\n      padre.setEnabled(false);\n      setupPanels();\n      init();\n      pack();\n   }\n\n   void setupPanels()\n   {\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      //Creo i pulsanti\n      Annulla = new Button(\"   Annulla   \");\n      //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n      Visualizza = new Button(\"   Calcola   \");\n      //Visualizza.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n\t  Visualizza.setEnabled(false);\n      \n      //Creo le etichette\n      etichetta1 = new Label(\"Selezionare il tipo di conto che si desidera calcolare:\");\n      etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta2 = new Label(\"Conto su una stanza:\");\n      etichetta2.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta3 = new Label(\"Conto su un cliente:\");\n      etichetta3.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta4 = new Label(\"Conto su piu' stanze:\");\n      etichetta4.setFont(ConfigurazioneSistema.font_titolo);\n      stanza = new Label(\"Stanza numero\");\n      cognome = new Label(\"Cognome\");\n      nome = new Label(\"Nome\");\n      stanza1 = new Label(\"Stanza\");\n      stanza2 = new Label(\"Stanze Numero\");\n\n      //Creo i TextField e li rendo non editabili\n      testo=new TextField[6];\n      testo[0] = new TextField(\"\", 4);\n      testo[1] = new TextField(\"\", 20);\n      testo[2] = new TextField(\"\", 20);\n      testo[3] = new TextField(\"\", 4);\n      testo[4] = new TextField(\"\", 30);\n      testo[5] = new TextField(\"\",10);\n      for(int i=0;i<6;++i)\n      \ttesto[i].setEditable(false);\n       \n\n      //Creo un Checkbox ad esclusione\n      checkbox_group = new CheckboxGroup();\n      checkboxes = new Checkbox[4];\n      checkboxes[0] = new Checkbox(\" Conto su una stanza\",checkbox_group, false);\n      checkboxes[1] = new Checkbox(\" Conto su un cliente\",checkbox_group, false);\n      checkboxes[2] = new Checkbox(\" Conto su piu'stanze\",checkbox_group, false);\n\t  checkboxes[3] = new Checkbox(\" Partenza anticipata\", false);\t\n      panel=new Panel[5];\n      for(int i=0;i<5;++i)\n         {\n            panel[i]=new Panel();\n            panel[i].setLayout(gridbag);\n         }\n      //Creo il pannello in alto a sinistra\n      Utils.constrain(panel[1], etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0); \n      Utils.constrain(panel[1], checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0); \n      Utils.constrain(panel[1], checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n      Utils.constrain(panel[1], checkboxes[2], 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n      Utils.constrain(panel[1], checkboxes[3], 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n      Utils.constrain(panel[1], testo[5], 1, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);                  \n            \n      //Creo il pannello in alto a destra\n      Utils.constrain(panel[0], Annulla, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.3, 0.0, 20, 0, 5, 20);\n      Utils.constrain(panel[0], Visualizza, 0, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.3, 0.0, 5, 0, 0, 20);\n      \n\n      //Creo il pannello conto su una stanza \n      Utils.constrain(panel[2], etichetta2, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[2], stanza, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[2], testo[0], 1, 1, 1, 1, GridBagConstraints.NONE,\n                      GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\n      //Creo il pannello conto su un cliente\n      Utils.constrain(panel[3], etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[3], cognome, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[3], testo[1], 1, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel[3], nome, 0, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 0.0, 0.0, 20, 5, 0, 20);\n      Utils.constrain(panel[3], testo[2], 1, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 1.0, 0.0, 20, 0, 0, 0);\n      Utils.constrain(panel[3], stanza1, 4, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[3], testo[3], 5, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\n      //Creo il pannello conto su piu' stanze\n      Utils.constrain(panel[4], etichetta4, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[4], stanza2, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[4], testo[4], 1, 1, 1, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 5); \n            \n      //Attacco i pannelli al frame\n      this.setLayout(gridbag);\n      Utils.constrain(this, panel[1], 0, 0, 6, 4, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[0], 6, 0, 1, 4, GridBagConstraints.BOTH,\n                        GridBagConstraints.SOUTHEAST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[2], 0, 4, 7, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[3], 0, 6, 7, 3,GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel[4], 0, 9, 7, 2,GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n   }\n\n  \tpublic void init()\n   \t{\n      \tcheckboxes[0].addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n           \t \tif(checkboxes[0].getState())\n            \t{\n               \t\ttipo_conto = 1;\n               \t\ttesto[0].setEditable(true);\n               \t\tVisualizza.setEnabled(true);\n               \t\tfor(int i=1;i<5;++i)\n               \t\t{    \n                   \t\ttesto[i].setEditable(false);\n        \t\t\t\ttesto[i].setText(\"\");\n        \t\t\t}     \t \n            \t}\n         \t}\n      \t});\n                      \n      \tcheckboxes[1].addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n            \tif(checkboxes[1].getState())\n            \t{\n               \t\ttipo_conto = 2;\n               \t\tVisualizza.setEnabled(true);\n               \t\tfor(int i=1;i<4;++i)\n                  \t\ttesto[i].setEditable(true);\n               \t\ttesto[0].setEditable(false);\n               \t\ttesto[0].setText(\"\");\n              \t\ttesto[4].setEditable(false);\n             \t\ttesto[4].setText(\"\");\n             \t}\n         \t}\n      \t});\n\n      \tcheckboxes[2].addItemListener(new ItemListener()\n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n            \tif(checkboxes[2].getState())\n            \t{\n               \t\ttipo_conto = 3;\n               \t\tVisualizza.setEnabled(true);\n               \t\ttesto[4].setEditable(true);\n               \t\tfor(int i=0;i<4;++i)\n                  \t{\t\n                  \t\ttesto[i].setEditable(false);\n            \t\t\ttesto[i].setText(\"\");\n            \t\t}\n            \t}\n         \t}\n      \t});\n      \t\n      \tcheckboxes[3].addItemListener(new ItemListener()\n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n               \tif (!checkboxes[3].getState())\n               \t{\n               \t\ttesto[5].setEditable(false);\n         \t\t\ttesto[5].setText(\"\");\n         \t\t}\n         \t\telse\n         \t\t{\n         \t\t\ttesto[5].setEditable(true);\n         \t\t\ttesto[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(new Date())));\n         \t\t}\n         \t}\n      \t});\n\n\t\tAnnulla.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n       \n       \tVisualizza.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartVisualizza();\n         \t}\n       \t});\n\t}       \n\n\tvoid startVisualizza()\n\t{\n   \t\tif (!errori())\n   \t\t{\t\n\t  \t\tthis.setEnabled(false);\n   \t\t\tif (checkboxes[0].getState())\n\t\t\t\tstartContoStanza();\n   \t\t\telse\n   \t\t\t{\n   \t\t\t\tif (checkboxes[1].getState())\n   \t\t\t\t{\n   \t\t\t\t\tstartContoSingolo();\n   \t\t\t\t}\n   \t\t\t\telse\t\n   \t\t       \t\tstartContoComitiva();\n   \t\t    }\n   \t\t\tdisplayConto();\n     \t}\n\t}\n\t\n  \tvoid displayConto()\n  \t{\n  \t\tvisual = new MascheraVisualizzazioneConto(testo[0].getText(),testo[1].getText(),\n  \t\t\t\t\t\t\t\t\ttesto[2].getText(),testo[3].getText(),testo[4].getText(),tipo_conto);\n  \t\tvisual.setVisible(true);\n  \t\tvisual.conto = this;\n  \t}\n  \t     \n\tboolean problemiStanza(String stanza)\n\t{\t\n\t\tFrame msg;\n\t\tListaSoggiornanti L_sogg;\n\t\t\n\t\tif ((stanza).equals(\"\") )\n\t\t{\t\n\t\t\tmsg = new AvvisoDialog(this, \" Inserire il numero di stanza \");\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\tif ((Principale.db).readStanza(stanza) == null )\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this, \" La stanza \"+stanza+\" e' inesistente! \");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tL_sogg = (Principale.db).foundSoggiornanti(stanza, false);\n\t\t\t\tif (L_sogg == null)\n\t\t\t\t{\t\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\t\t\treturn true;\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tif (L_sogg.length() == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new MessageDialog(this, \" La stanza \"+stanza+\" non e' attualmente occupata \");\n\t\t\t\t\t\treturn true;\t\n\t\t\t\t\t}\t\n\t\t\t}\t\n\t\treturn false;\n\t}\n\n\t//\tcontrolla che nella lista non vi siano stanze ripetute piu' volte\n\tint chkDouble()\n\t{\n\t\tfor(int i = 0; i<L_st.length; i++)\n\t\t\tfor(int j = 0; j<L_st.length; j++)\n\t\t\t\tif ( (!L_st[i].equals(\"\")) && (!L_st[j].equals(\"\")) && (i!=j) \n\t\t\t\t\t&& (L_st[i].equals(L_st[j]))  )\n\t\t\t\t\treturn j;\n\t\treturn -1;\t\t\t  \n\t}\n\n\tDate[] tornaDateFineMagg(String elenco[])\n\t{\n\t\tDate data_fine_stanza = null;\n\t\tDate fine_sogg = null;\n\t\tDate date_fine_loc[] = new Date[elenco.length];\n\t\t\n\t\tfor (int i = 0; i < elenco.length; i++)\n\t\t{\n\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\n\t\t\tif (L_sogg != null)\n\t\t\t{\n\t\t\t\tdata_fine_stanza = new Date(0, 0, 1);\n\t\t\t\tfor (int j = 1; j <= L_sogg.length(); j++)\n\t\t\t\t{\n\t\t\t\t\tfine_sogg = L_sogg.getSoggiornante(j).getFineSogg();\n\t\t\t\t\tif ( Utils.data1MaggioreData2( fine_sogg, data_fine_stanza ) )\n\t\t\t\t\t\tdata_fine_stanza = new Date(fine_sogg.getYear(), fine_sogg.getMonth(), fine_sogg.getDate());\n\t\t\t\t}\n\t\t\t\tdate_fine_loc[i] = data_fine_stanza;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\treturn date_fine_loc;\n\t}\n\t\n\tDate[] tornaDateInizioMin(String elenco[])\n\t{\n\t\tDate data_inizio_stanza = null;\n\t\tDate inizio_sogg = null;\n\t\tDate date_inizio_loc[] = new Date[elenco.length];\n\t\t\n\t\tfor (int i = 0; i < elenco.length; i++)\n\t\t{\n\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\n\t\t\tif (L_sogg != null)\n\t\t\t{\n\t\t\t\tdata_inizio_stanza = new Date(3000, 0, 1);\n\t\t\t\tfor (int j = 1; j <= L_sogg.length(); j++)\n\t\t\t\t{\n\t\t\t\t\tinizio_sogg = L_sogg.getSoggiornante(j).getInizioSogg();\n\t\t\t\t\tif ( Utils.data1MinoreData2( inizio_sogg, data_inizio_stanza ) )\n\t\t\t\t\t\tdata_inizio_stanza = new Date(inizio_sogg.getYear(), inizio_sogg.getMonth(), inizio_sogg.getDate());\n\t\t\t\t}\n\t\t\t\tdate_inizio_loc[i] = data_inizio_stanza;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\treturn date_inizio_loc;\n\t}\n\t\n\tboolean aggiornamentoFlagsEffettuato(String elenco[])\n\t{\n\t\tqualcuno_tramite_agenzia = false;\n\t\tqualcuno_senza_agenzia = false;\n\t\tPrenotazione pren;\n\t\t\n\t\tfor (int i = 0; i<elenco.length; i++)\n\t\t{\n\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\n\t\t\tif (L_sogg != null)\n\t\t\t{\n\t\t\t\tfor (int j = 1; j <= L_sogg.length(); j++)\n\t\t\t\t{\n\t\t\t\t\tpren = (Principale.db).readPrenotazione((L_sogg.getSoggiornante(j)).getIdPrenotazione());\n\t\t\t\t\tif (pren == null)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pren.getTramiteAgenzia() == Const.SI)\n\t\t\t\t\t\t\tqualcuno_tramite_agenzia = qualcuno_tramite_agenzia || true;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tqualcuno_senza_agenzia = qualcuno_tramite_agenzia || true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tboolean errori()\n\t{\n\t\tFrame msg;\n\t\tSoggiornante sogg = new Soggiornante();\n\n\t\tif (checkboxes[0].getState())\n\t\t{\n\t\t\tif (problemiStanza(testo[0].getText()))\n\t\t\t\treturn true;\n\t\t\tL_st = new String[1];\n\t\t\tL_st[0] = new String(testo[0].getText());\n\t\t}\n\t\telse\n\t\t\tif (checkboxes[1].getState())\n\t\t\t{\n\t\t\t\tL_st = new String[1];\n\t\t\t\tL_st[0] = new String(testo[3].getText());\n\t\t\t\tsogg = (Principale.db).foundSoggiornante(testo[3].getText(),testo[2].getText(),testo[1].getText());\n\t\t\t\tif (sogg == null)\n\t\t\t\t{\n\t\t\t\t\tmsg = new AvvisoDialog(this, \" Nessun soggiornante presente nella stanza \"+testo[3].getText()+ \" risponde al nominativo inserito! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(testo[3].getText(), false);\n\t\t\t\tif (L_sogg == null)\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\t\t\treturn true;\n\t\t\t\t} \n\t\t\t\tif (sogg.getPagato() == Const.SI)\n\t\t\t\t{\n\t\t\t\t\tmsg = new AvvisoDialog(this, \" Il soggiornante selezionato o ha gia' pagato o se ne e' gia' andato! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// procedo con il verificare se il cliente e' l'ultimo rimasto\n\t\t\t\t\tListaSoggiornanti sogg_no_pagato = new ListaSoggiornanti();\n\t\t\t\t\tfor (int i=1; i<=L_sogg.length(); i++)\n\t\t\t\t\t\tif (L_sogg.getSoggiornante(i).getPagato() == Const.NO)\n\t\t\t\t\t\t\tsogg_no_pagato.addSoggiornante(L_sogg.getSoggiornante(i));\n\t\t\t\t\tif (sogg_no_pagato.length() == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new AvvisoDialog(this, \" Il soggiornante e' l'ultimo rimasto. Scegliere 'conto per stanza'! \");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tsogg_x_conto_sing = sogg;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\t\t\n\t\t\t\tif (checkboxes[2].getState())\n\t\t\t\t{\n\t\t\t\t\tL_st = Utils.parseStanze(testo[4].getText());\n\t\t\t\t\tif (L_st == null)\n\t\t\t\t\t{\t\n\t\t\t\t\t\tmsg = new MessageDialog(this, \" Errore nell'elenco delle stanze. Inserire le stanze nell'elenco nel modo seguente: 101,102,103,...\");\n\t\t\t\t\t\treturn true;\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tStanza room;\n\t\t\t\t\t\tfor (int i = 0; i < L_st.length; i++)\n\t\t\t\t\t\t\tif  (problemiStanza(L_st[i]))\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tint res = chkDouble();\n\t\t\t\t\t\tif ( res != -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmsg = new MessageDialog(this, \" Errore nell'elenco delle stanze. La stanza \"+L_st[res]+\" e presente piu' volte nell'elenco! \");\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tif (checkboxes[0].getState() || checkboxes[2].getState())\n\t\t{\n\t\t\tdate_fine = tornaDateFineMagg(L_st);\n\t\t\tdate_inizio = tornaDateInizioMin(L_st);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPrenotazione pren = (Principale.db).readPrenotazione(sogg.getIdPrenotazione());\n\t\t\tif (pren != null)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tdate_fine = new Date[1];\n\t\t\t\tdate_inizio = new Date[1];\n\t\t\t\tdate_fine[0] = sogg.getFineSogg();\n\t\t\t\tdate_inizio[0] = sogg.getInizioSogg();\n\t\t\t}\n\t\t\telse\n\t\t\t\tdate_fine = null;\n\t\t}\n\t\tif (date_fine == null || date_inizio == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\treturn true;\n\t\t}\n\t\t// la variabile data_fine contiene le date di fine corrette\n\n\t\tdata_fine_magg = new Date(0, 0, 1);\n\t\tfor (int i=0; i<date_fine.length; i++)\n\t\t\tif (Utils.data1MaggioreData2(date_fine[i], data_fine_magg))\n\t\t\t\tdata_fine_magg = date_fine[i];\n\t\t// ora la variabile data_fine_magg contiene la data di fine maggiore\n\t\t\n\t\tif (!aggiornamentoFlagsEffettuato(L_st))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\treturn true;\n\t\t}\n \t\t// da ora in poi le flags per l'agenzia contengono valori significativi\n\n\t\t// questo if deve essere messo prima di quello che segue\n\t\tif (qualcuno_tramite_agenzia && qualcuno_senza_agenzia)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" L'elenco delle stanze include stanze commissionate e non! Procedere al calcolo separato. \");\n\t\t\treturn true;\n\t\t}\n\t\t// L'if che segue deve essere posto dopo a quello che precede\n\t\tif (checkboxes[2].getState() && qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il conto comitiva non e' possibile per le agenzie! \");\n\t\t\treturn true;\n\t\t}\n\n\t\t// se arrivo qui significa che si puo' fare il conto normale,\n\t\t// rimane da verificare se si desidera fare una partenza anticipata\n\t\t// e in tal caso verificare che la data inserita sia corretta!\n\t\tif ( (checkboxes[3].getState()) && (DateUtils.dataCorretta(testo[5].getText())) )\n\t\t{\t\n\t\t\tDate data = DateUtils.convertDate(testo[5].getText());\n\t\t\tDate data_oggi = new Date();\n\t\t\t// controllo che la data di partenza anticipata abbia senso:\n\t\t\t// 1) controllo che il cliente abbia soggiornato almento un giorno\n\t\t\tfor (int i=0; i<date_inizio.length; i++)\n\t\t\t\tif (Utils.data1MaggioreData2(date_inizio[i], DateUtils.giornoPrimaDi(data)))\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" I clienti devono soggiornare almeno un giorno prima di partire! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t// 2) controllo che la partenza anticipata non sia prima di oggi\n\t\t\tif (Utils.data1MinoreData2(data, data_oggi))\n\t\t\t{\n\t\t\t\tmsg = new AvvisoDialog(this, \" La data non puo' essere precedente a quella odierna! \");\n\t\t\t\ttesto[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(data_oggi)));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t\t// 3)  controllo che il fine soggiorno anticipato (ossia il giorno prima della\n\t\t\t\t//     partenza anticipata) non sia dopo il fine soggiorno effettivo\n\t\t\t\tfor (int i=0; i<date_fine.length; i++)\n\t\t\t\t\tif (Utils.data1MaggioreData2(data, date_fine[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new AvvisoDialog(this, \" Non si tratta di una partenza anticipata per la stanza \"+L_st[i]+\" con tale data! \");\n\t\t\t\t\t\ttesto[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(data_oggi)));\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\tfine_sogg_anticipato = DateUtils.giornoPrimaDi(data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif  ( (checkboxes[3].getState()) && !DateUtils.dataCorretta(testo[5].getText()))\n\t\t\t{\t\n\t\t\t\tmsg = new MessageDialog(this, \" La data di partenza anticipata e' errata! \");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// il checkboxes[3] non e' attivo\n\t\t\t\tfine_sogg_anticipato = data_fine_magg;\n\t\t\t\tif (qualcuno_tramite_agenzia && checkboxes[1].getState())\n\t\t\t\t{\t\n\t\t\t\t\tmsg = new MessageDialog(this, \" Il cliente e' in una stanza di agenzia! Se deve andarsene scegliere 'partenza anticipata'. \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} // errori\n\t\n\tvoid startContoStanza()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif (!qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tif (checkboxes[3].getState())\n\t\t\t\tCalcoloConto.calcolaContoStanza(testo[0].getText(), 1, false, fine_sogg_anticipato);\n\t\t\telse\n\t\t\t\tCalcoloConto.calcolaContoStanza(testo[0].getText(), 1, false, null);\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tCalcoloConto.calcolaContoStanzaAgenzia(testo[0].getText());\n\t\t}\t\t\n\t}\n\n\tvoid startContoSingolo()\n\t{\n\t\tif (qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tFrame msg;\n\t\t\tDate fine_effettiva;\n\t\t\tif (checkboxes[3].getState())\n\t\t\t\tfine_effettiva = fine_sogg_anticipato;\n\t\t\telse\n\t\t\t\tfine_effettiva = data_fine_magg;\n\t\t\t\n   \t\t\tif ( Utils.data1MinoreData2(fine_effettiva, new Date()) )\n\t\t\t\tmsg = new AskChiudiSingoloConAgenzia(this);\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \" La data e' posteriore ad oggi: non e' possibile chiudere! \");\n   \t\t\treturn;\n   \t\t}\n   \t\telse\n\t\t\tif ( (checkboxes[3].getState()) )\n\t\t\t\tCalcoloConto.calcolaContoSingolo(sogg_x_conto_sing, fine_sogg_anticipato);\n\t\t\telse\n\t\t\t\tCalcoloConto.calcolaContoSingolo(sogg_x_conto_sing, null);\n\t}\n\t\n\tvoid startContoComitiva()\n\t{\n\t\tif ( (checkboxes[3].getState()) )\n\t\t\tCalcoloConto.calcolaContoComitiva(L_st, fine_sogg_anticipato);\n\t\telse\n\t\t\tCalcoloConto.calcolaContoComitiva(L_st, null);\n\t}\n\t\n\tvoid startChiudiSingoloConAgenzia()\n\t{\n\t\tif (checkboxes[3].getState())\n\t\t{\n\t\t\tDate new_data = DateUtils.convertDate(testo[5].getText());\n\t\t\tnew_data = DateUtils.giornoPrimaDi(new_data);\n\t\t\t(Principale.db).anticipaFineSogg(sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\tsogg_x_conto_sing.getIdSoggiornante(),\n\t\t\t\t\t\t\t\t\tnew_data);\n\t\t}\n\t\t(Principale.db).reversePagato(sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\t  sogg_x_conto_sing.getIdSoggiornante());\n\t\tfor (int i=0; i<testo.length-1; i++)\n\t\t\ttesto[i].setText(\"\");\n\t}\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d48"},"name":"InserisciCommissioni.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class InserisciCommissioni extends MascheraCommissioni\n{\n\tMascheraRicercaStanza mask_ricerca = new MascheraRicercaStanza(\"\",1); \n   \t\n   \tpublic InserisciCommissioni(Stanza stanza, String data1, String data2)\n   \t{\n      \tsuper(data1, data2, \"Inserimento dei dati delle commissioni\",\"Inserisci\",1);\n      \tinit(stanza, data1, data2);\n   \t}\n\n \tpublic void init(Stanza stanza, String data1, String data2)\n \t{     \t\n      \tnum_stanza.setText(stanza.getNumStanza());\n        inizio_comm.setText(data1);\n        fine_comm.setText(data2);\n        num_stanza.setEditable(false);\n        inizio_comm.setEditable(false);\n        fine_comm.setEditable(false);\n\t\t\n      \tAnnulla.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tdispose();\n\t\t\t\tmask_ricerca.setEnabled(true);\n\t\t\t}\n        });\n      \t\n      \tAzione.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartAzione();\n\t\t\t}\n        });\n    }\n\n\tvoid startAzione()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif ( !errori() )\n\t\t{\n\t\t\tCommissionamento comm = readDatiComm();\n\t\t\tint j;\n\t\t\tif ( (j = (Principale.db).newIdCommissionamento()) == DataBase.OK )\n\t\t\t{\n\t\t\t\t(Principale.config).updateIdCommissionamento();\n\t\t\t\tif ((j = (Principale.db).writeCommissionamento(comm)) == DataBase.OK)\n\t\t\t\t{\n\t\t\t\t\taggiornaDisp(comm, Flag.COMMISSIONATA);\n\t\t\t\t\tdispose();\n\t\t\t\t\tmask_ricerca.restartAvvio();\n\t\t\t\t\tmask_ricerca.setEnabled(true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j) );\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j) );\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d49"},"name":"SubRistorazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d1a"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport common.utility.*;\nimport AlberGate;\n\npublic class SubRistorazione extends Frame\n{\n   \tLabel label;\n   \tPanel panel0, panel1;\n   \tButton Calcolo, Annulla;\n   \tGridBagLayout gridbag=new GridBagLayout();\n\tFrame p = new Frame();\n\tMascheraContoRistorazione rist;\n\n   public SubRistorazione()\n   {\n      super(\"Ristorazione\");\n      setup();\n      init();\n      pack();\n   }\n\n   void setup()\n   {\n      this.setFont(ConfigurazioneSistema.font_sub);\n   \t  panel0=new Panel();\n      panel0.setLayout(gridbag);\n      panel0.setBackground(Color.white);\n      Immagine  figura = new Immagine(\"ristorazione.jpg\");\n      Etichetta etich = new Etichetta(\"Ristorazione.gif\");\n      Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n      Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n       \n      panel1 = new Panel();\n      panel1.setLayout(new GridLayout(2,1));\n      Calcolo = new Button(\" Calcolo conto \");\n      Annulla = new Button(\" Indietro \");\n      panel1.add(Calcolo);\n      panel1.add(Annulla);\n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n      Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n   }\n\n   void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            p.setEnabled(true);\n         }\n      });\n\n      Calcolo.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartCalcolo();\n         }\n      });\n   }\n   \n   void startCalcolo()\n   {\n   \t\tthis.setEnabled(false);\n\t\trist = new MascheraContoRistorazione(this);\n\t\trist.setVisible(true);\n\t\trist.padre = this;\n   }\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d4a"},"name":"VediCliente.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d11"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport moduli.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\n\npublic class VediCliente extends MascheraSoggiorno\n{\n\tFrame padre;   \n   \tpublic VediCliente(Frame p, Cliente cli)\n   \t{\n      \tsuper(\"Visualizzazione dei dati del cliente\",\" Fine \",' ',' ');\n      \tpadre=p;\n      \tpadre.setEnabled(false);\n      \tinizializza(cli);\n      \tpack();\n      \t\n   \t}\n\n   public void inizializza(Cliente cli)\n   {\n      remove(panel2);\n      Utils.constrain(panel1, label13, 0, 8, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, testo13, 1, 8, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5); \n      Utils.constrain(panel1, label14, 2, 8, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(panel1, testo14, 3, 8, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      panel3.remove(Annulla);\n      pack();\n      disableFields();\n      writeDatiCliente(cli);\n      this.setVisible(true);\n      \n      Conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            padre.setEnabled(true);\n         }\n      });\n\t}\n\t\n\tvoid disableFields()\n\t{\n\t\ttesto1.setEditable(false);\n\t\ttesto2.setEditable(false);\n\t\ttesto3.setEditable(false);\n\t\ttesto4.setEditable(false);\n\t\ttesto5.setEditable(false);\n\t\ttesto6.setEditable(false);\n\t\ttesto7.setEditable(false);\n\t\ttesto8.setEditable(false);\n\t\ttesto9.setEditable(false);\n\t\ttesto10.setEditable(false);\n\t\ttesto11.setEditable(false);\n\t\ttesto12.setEditable(false);\n\t\ttesto13.setEditable(false);\n\t\ttesto14.setEditable(false);\n\t}\n\t\n\tpublic void writeDatiCliente(Cliente cliente)\n\t{\n\t\ttesto1.setText(cliente.getNumStanza());\n\t\ttesto2.setText(cliente.getCognome());\n\t\ttesto3.setText(cliente.getNome());\n\t\ttesto4.setText(cliente.getLuogoNasc());\n\t\ttesto5.setText(DateUtils.giveStringOfDate(cliente.getDataNasc()));\n\t\ttesto6.setText(cliente.getNumDoc());\n\t\ttesto7.setText(cliente.getNumTel());\n\t\ttesto8.setText(cliente.getIndirizzo());\n\t\ttesto9.setText(cliente.getCap());\n\t\ttesto10.setText(cliente.getComune());\n\t\ttesto11.setText(cliente.getCitta());\n\t\ttesto12.setText(cliente.getNazione());\n\t\ttesto13.setText(DateUtils.giveStringOfDate(cliente.getInizioSogg()));\n\t\ttesto14.setText(DateUtils.giveStringOfDate(cliente.getFineSogg()));\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d4b"},"name":"ModificaCommissioni.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\nimport moduli.Commissionamento;\n\npublic class ModificaCommissioni extends MascheraCommissioni\n{\n\tCommissionamento commissione;\n   \t\n   \tpublic ModificaCommissioni()\n   \t{\n      \tsuper(\"\", \"\", \"Modifica i dati delle commissioni\", \"Modifica\", 2);\n      \tnome_agenzia.setEditable(true);\n      \tdeabilita();\n      \tinit();\n   \t}\n\n \tpublic void init()\n \t{     \t\n\t\tlista.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tcommissione = L.getCommissionamento(lista.getSelectedIndex()+1);\n\t\t\t\twriteDatiComm(commissione);\n\t\t\t\tabilita();\n\t\t\t\tpanel5.setVisible(false);\n\t\t\t\tpack();\n         \t}\n\t\t});\n   \n\t\tnome_agenzia.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tcreaLista();\n\t\t\t}\t\t\t      \t\n\t\t});\n\n    \tAzione.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tstartAzione();\n\t\t\t}\n      \t});\n      \n     \tCerca.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tcreaLista();\n\t\t\t}\n      \t});\t\n\t}\n\t\n\tvoid deabilita()\n\t{\n      \tnum_stanza.setEditable(false);\n      \tnum_tel_agenzia.setEditable(false);\n        inizio_comm.setEditable(false);\n        fine_comm.setEditable(false);\n        scadenza_comm.setEditable(false); \n       \tnum_stanza.setEditable(false);\n       \tAzione.setEnabled(false);\n\t}\n\t\n\tvoid abilita()\n\t{\n      \tnum_tel_agenzia.setEditable(true);\n        scadenza_comm.setEditable(true); \n       \tAzione.setEnabled(true);\n\t}\n\t\n\tvoid startAzione()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif ( !errori() )\n\t\t{\n\t\t\tCommissionamento comm = readDatiComm();\n\t\t\tint j;\n\t\t\tif (( j = (Principale.db).changeCommissionamento(commissione.getIdCommissionamento(), comm.getNumStanza(), comm.getNomeAgenzia(),comm.getNumTel(),\n\t\t\t\t\t\t\t\t\t \t\tcomm.getInizioComm(), comm.getFineComm(), comm.getScadenzaComm(), comm.getScaduto())) == DataBase.OK)\n\t\t\t{\t\t\t\t\t\t\n\t\t\t\tcleanFields();\n\t\t\t\tdeabilita();\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n\t\t}\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d4c"},"name":"VediSoggiornante.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport moduli.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\n\npublic class VediSoggiornante extends MascheraSoggiorno\n{\n\tFrame padre;   \n   \tpublic VediSoggiornante(Frame p, Soggiornante sogg)\n   \t{\n      \tsuper(\"Visualizzazione dei dati del soggiornante\",\" Fine \", sogg.getPensionamento(), sogg.getStatus() );\n      \tpadre=p;\n      \tpadre.setEnabled(false);\n      \tinizializza(sogg);\n      \tpack();\n      \tthis.setVisible(true);\n   \t}\n\n   public void inizializza(Soggiornante sogg)\n   {\n      panel3.remove(Annulla);\n      disableFields();\n      writeDatiSogg(sogg);\n      \n      \n      Conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            padre.setEnabled(true);\n         }\n      });\n\t}\n\t\n\tvoid disableFields()\n\t{\n\t\ttesto1.setEditable(false);\n\t\ttesto2.setEditable(false);\n\t\ttesto3.setEditable(false);\n\t\ttesto4.setEditable(false);\n\t\ttesto5.setEditable(false);\n\t\ttesto6.setEditable(false);\n\t\ttesto7.setEditable(false);\n\t\ttesto8.setEditable(false);\n\t\ttesto9.setEditable(false);\n\t\ttesto10.setEditable(false);\n\t\ttesto11.setEditable(false);\n\t\ttesto12.setEditable(false);\n\t\ttesto13.setEditable(false);\n\t\ttesto14.setEditable(false);\n\t\tfor (int i=0; i<checkboxes.length; i++)\n\t\t\tcheckboxes[i].setEnabled(false);\n\t\tfor (int i=0; i<checkboxes1.length; i++)\n\t\t\tcheckboxes1[i].setEnabled(false);\n\t}\n\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d4d"},"name":"SubStanze.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport common.utility.*;\n\npublic class SubStanze extends Frame\n{\n   Label label;\n   Panel panel0, panel1;\n   Button Inserimento, Modifica, Cancellazione, Ricerca, Annulla;\n   GridBagLayout gridbag=new GridBagLayout();\n   SubGestione s = new SubGestione();\n   InserisciStanze call_1;\n   ModificaStanze call_2;\n   CancellaStanze call_3;\n   VediStanza call_4;\n   \n   public SubStanze()\n   {\n      super(\"Gestione delle stanze\");\n      setup();\n      init();\n      pack();\n   }\n\n   void setup()\n   {\n      this.setFont(ConfigurazioneSistema.font_sub);\n\t  panel0=new Panel();\n      panel0.setLayout(gridbag);\n      panel0.setBackground(Color.white);\n      Immagine  figura = new Immagine(\"camera1.jpg\");\n      Etichetta etich = new Etichetta(\"Stanze.gif\");\n      Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n      Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n       \n      panel1 = new Panel();\n      panel1.setLayout(new GridLayout(5,1));\n      Inserimento = new Button(\"Inserimento\");\n      Modifica = new Button(\"Modifica\");\n      Cancellazione = new Button(\"Cancellazione\");\n      Ricerca = new Button(\"Ricerca...\");\n      Annulla = new Button(\"Indietro\");\n      panel1.add(Inserimento);\n      panel1.add(Modifica);\n      panel1.add(Cancellazione);\n      panel1.add(Ricerca);\n      panel1.add(Annulla);\n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n      Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n   }\n\n   void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n           \ts.setEnabled(true);\n         }\n      });\n      \n      Inserimento.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            insStanza();\n         }\n      });\n\n      Modifica.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            modStanza();\n         }\n      });\n\n      Cancellazione.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            cancStanza();\n         }\n      });\n      \n      Ricerca.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            vediStanza();\n         }\n      });\n   }\n\n\tvoid insStanza()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_1 = new InserisciStanze();\n\t\tcall_1.setVisible(true);\n\t\tcall_1.stanze = this;\n\t}\n\n\tvoid modStanza()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_2 = new ModificaStanze();\n\t\tcall_2.setVisible(true);\n\t\tcall_2.stanze = this;\n\t}\n\n\tvoid cancStanza()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_3 = new CancellaStanze();\n\t\tcall_3.setVisible(true);\n\t\tcall_3.stanze = this;\n\t}\n\t\n\tvoid vediStanza()\n\t{\n\t\tthis.setEnabled(false);\n\t\tcall_4 = new VediStanza();\n\t\tcall_4.setVisible(true);\n\t\tcall_4.stanze = this;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d4e"},"name":"AskChiudiSingoloConAgenzia.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport interfacce.MascheraVisualizzazioneConto;\n\npublic class AskChiudiSingoloConAgenzia extends Frame\n{\n   \tButton button1, button2, button3;\n   \tMascheraCalcoloConto padre;\n   \tPanel panel1, panel2;\n   \tLabel message;\n   \tGridBagLayout gridbag = new GridBagLayout();\n   \t\n   \tpublic AskChiudiSingoloConAgenzia(MascheraCalcoloConto parent)\n   \t{\n      \tsuper(\"Cosa devo fare?\");\n      \tpadre = parent;\n      \tpadre.setEnabled(false);\n      \tsetupPanel();\n      \tinit();\n      \tpack();\n      \tsetVisible(true);\n   }\n\n\tvoid setupPanel()\n\t{\n      \tmessage = new Label(\"Calcolare il conto di un soggiornante venuto con agenzia implica cambiare la sua data di partenza.\");\n      \tbutton1 = new Button(\" Annulla \");\n      \tbutton2 = new Button(\" Cambia data \");        \n        this.setFont(ConfigurazioneSistema.font_titolo);\n        panel1 = new Panel();\n        panel1.setLayout(gridbag);\n        Utils.constrain(panel1, message, 0, 0, 4, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n      \t//Creo il pannello in basso con due pulsanti                  \n        panel2 = new Panel();\n        panel2.setLayout(gridbag);\n        Utils.constrain(panel2, button1, 0, 0, 1, 1, GridBagConstraints.NONE,\n        \t            GridBagConstraints.CENTER, 0.0, 0.0, 0, 0, 0, 15);\n            Utils.constrain(panel2, button2, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 0, 15, 0, 0);             \n        //Attacco i pannelli al frame\n        this.setLayout(gridbag);\n        Utils.constrain(this, panel1, 0, 1, 4, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n        Utils.constrain(this, panel2, 0, 14, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n\t}\n   \n   \n   public void init()\n   {\n      button1.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n         \tstartAzione();\n         }\n      });\n      \n      button2.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tpadre.startChiudiSingoloConAgenzia();\n\t\t\tstartAzione();\n         }\n      });\n   }\n   \n   void startAzione()\n   {\n       \tsetVisible(false);\n        dispose();\n        padre.setEnabled(true);\n   }\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d4f"},"name":"ModificaStanze.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class ModificaStanze extends DescrittoreStanze\n{\n\tpublic ModificaStanze()\n\t{\n\t\tsuper(\"Modifica dei dati delle stanze\", \"Modifica\", 2);\n\t\tinit();\n\t}\n\n\tpublic void init()\n\t{\n\t\ttesto1.setEditable(true);\n\t\ttesto2.setEditable(false);\n\t\ttesto3.setEditable(false);\n\t\ttesto4.setEditable(false);\n\t\tmycheckboxes.setEnabled(false);\n\t\tAzione.setEnabled(false);\n\t\t\n\t\tAzione.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartAzione();\n\t\t\t}\n\t\t});\n      \n\t\ttesto1.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartTesto1();\n\t\t\t}\t\t\t      \t\n\t\t});\n\t\t\n\t\tCerca.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartTesto1();\n\t\t\t}\t\t\t      \t\n\t\t});\n    } // init\n\t\n\tvoid startAzione()\n\t{\n\t\tMessageDialog msg;\n\t\t\n\t\tif (!errori())\n\t\t{\n\t\t\tStanza room = readDatiStanza();\t\t\t\t\t\n\t\t\tint j;\n\t\t\tif( (j = (Principale.db).changeStanza(room.getNumStanza(), room.getPostiLetto(), \n\t\t\t\t\t\t\troom.getDispLettoAgg(), room.getPxBase(), \n\t\t\t\t\t\t\troom.getDescrizione())) == DataBase.OK)\n\t\t\t{\n\t\t\t\tcleanFields();\n\t\t\t\ttesto1.setEditable(true);\n\t\t\t\ttesto2.setEditable(false);\n\t\t\t\ttesto3.setEditable(false);\n\t\t\t\ttesto4.setEditable(false);\n\t\t\t\tmycheckboxes.setEnabled(false);\n\t\t\t\tAzione.setEnabled(false);\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il data base: \"+DataBase.strErrore(j));\n\t\t}\n\t}\n\n\tvoid startTesto1()\n\t{\n\t\tMessageDialog msg;\n\n\t\tStanza room;\n\t\tif ((room = (Principale.db).readStanza(testo1.getText())) != null)\n\t\t{\n\t\t\twriteDatiStanza(room);\n\t\t\ttesto1.setEditable(false);\n\t\t\ttesto2.setEditable(true);\n\t\t\ttesto3.setEditable(true);\n\t\t\ttesto4.setEditable(true);\n\t\t\tmycheckboxes.setEnabled(true);\n\t\t\tAzione.setEnabled(true);\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \"Stanza inesistente!\");\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d50"},"name":"RicercaAddebiti.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class RicercaAddebiti extends Frame \n{  \n    \n    //Dichiarazioni di variabili\n    Panel panel1, panel2, panel3;\n    Label  etichetta1, label1, label3;\n    List lista;\n    Button  Annulla, Cerca;\n    TextField stanza;\n    GridBagLayout gridbag = new GridBagLayout();\n\tFrame padre = new Frame();\n    Frame figlio;\n    ListaAddebiti L;\n    Addebito add;\n    float totale_add;\n    \n    public RicercaAddebiti(Frame p)\n    {\n        super(\"Ricerca degli addebiti\");\n        padre = p;\n        padre.setEnabled(false);\n        setupPanels();\n        init();\n        pack();\n        setVisible(true); \n    }\n                     \n        void setupPanels()\n        {  \n\t\t\tthis.setFont(ConfigurazioneSistema.font_base);\n            //Creo due pulsanti  \n            Annulla = new Button(\" Fine  \");\n            Cerca = new Button(\" Cerca \");\n\n            //Creo le etichette\n            etichetta1 = new Label (\"Inserire la stanza addebitata                         \");\n            etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n            label1 = new Label(\"Numero Stanza   \");\n\t\t\tlabel3 = new Label(\"Risultato della ricerca\");\n\t\t\tlabel3.setFont(ConfigurazioneSistema.font_titolo);\n            \n            //Creo i TextField e ne rendo  alcuni non editabili\n            stanza = new TextField(\"\", 4);\n\t\t\t\n            //Creo il pannello in alto per inserimento dei dati del cliente\n            panel1 = new Panel();\n            panel1.setLayout(gridbag);\n            Utils.constrain(panel1, etichetta1, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel1, label1, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel1, stanza, 1, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n           \n            //Creo il pannello in basso con due pulsanti                  \n            panel2 = new Panel();\n            panel2.setLayout(gridbag);\n            Utils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel2, Cerca, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);             \n            \n            //Creo il pannello con la lista dei risultati della ricerca\n            lista = new List(10,false);\n            lista.setFont(ConfigurazioneSistema.font_allineato);\n            panel3 = new Panel();\n            panel3.setLayout(gridbag);\n            Utils.constrain(panel3, label3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel3, lista, 0, 1, 4, 3, GridBagConstraints.BOTH,\n                        GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);             \n            \n            \n            //Attacco i pannelli al frame\n            this.setLayout(gridbag);\n            Utils.constrain(this, panel1, 0, 1, 4, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(this, panel2, 0, 14, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tUtils.constrain(this, panel3, 0, 15, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tpanel3.setVisible(false);\n        \tpack();\n        \n        }\n\n    public void init()\n    {\n\t\tlista.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tif (lista.getSelectedIndex() < (lista.getItemCount()-1))\n\t\t\t\t{\n\t\t\t\t\tadd = L.getAddebito((lista.getSelectedIndexes())[0]+1);\n\t\t\t\t\tstartVediAddebito(add);\n\t\t\t\t}\n\t\t\t}\n      \t});\n \n\n\t\t\n\tstanza.addActionListener(new ActionListener()\n\t{\n\t\tpublic void actionPerformed(ActionEvent e)\n\t\t{\n\t\t\tif (noErrors())\n\t\t\t\tcreaLista();\n\t\t}\t\t\t      \t\n\t});\n\t\n    Cerca.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tif (noErrors())\n\t\t\t\t\tcreaLista();\n\t\t\t}\t\n      \t});\n      \n  \tAnnulla.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n      \t});    \t\n    } \n\n\tvoid startVediAddebito(Addebito add)\n\t{\n\t\tfiglio = new VediAddebito(this, add, totale_add); \n\t}\t\n\t\n\t\n\tpublic void creaLista()\n\t{\n\t\tFrame msg;\n\t\tBeneServizio extra;\n\t\tAddebito addebito;\n\t\tString desc = new String();\n\t\ttotale_add = 0;\n\t\t\n\t\tL = (Principale.db).foundAddebiti(stanza.getText());\n\t\tif (L != null)\n\t\t{\n\t\t\tif (!L.isEmpty())\n\t\t\t{\n\t\t\t\tif (lista.getItemCount() > 0)\n\t\t\t\t\tlista.removeAll();\n\t\t\t\tpanel3.setVisible(true);\n\t\t\t\tpack();\n\t\t\t\tfor(int i = 1; i<=L.length(); i++)\n\t\t\t\t{\t\n\t\t\t\t\taddebito = L.getAddebito(i);\n\t\t\t\t\textra = (Principale.db).readBeneServizio(addebito.getCodExtra());\n\t\t\t\t\tif (extra != null)\n\t\t\t\t\t\tlista.addItem(\"DESCRIZIONE:\"+Utils.completaStringa(extra.getDescrizione(), 10)+\n\t\t\t\t\t\t\t\t\t  \" QUANTITA':\"+Utils.completaStringa((\"\"+addebito.getQuantita()), 2)+\n\t\t\t\t\t\t\t\t\t  \" TOTALE ADDEBITO:\"+\n\t\t\t\t\t\t\t\t\t  (Principale.config).getValuta()+\".\"+\n\t\t\t\t\t\t\t\t\t  addebito.getTotAddebito());\t\n\t\t\t\t\ttotale_add += addebito.getTotAddebito();\n\t\t\t\t}\n\t\t\t\tlista.addItem(\"L'ADDEBITO TOTALE DELLA STANZA \"+stanza.getText()+\" E' DI \"+\n\t\t\t\t\t\t\t\t(Principale.config).getValuta()+\".\"+totale_add);\n\t\t\t}\n\t\t\telse\n\t\t\t\tmsg = new AvvisoDialog(this, \" Nessun addebitato trovato. \");\n\t\t}\n\t\telse\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t}\t\t\t\n\n\tboolean noErrors()\n\t{\n\t\tFrame msg;\n\t\t//Disponibilita disp = new Disponibilita();\n\t\tif ((stanza.getText().equals(\"\")) ) \n\t\t{\n\t\t\tmsg = new AvvisoDialog(this,\"Inserire il numero della stanza\");\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\tif( (Principale.db).readStanza(stanza.getText()) == null )\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this,\"La stanza inserita e' inesistente!\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\t\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d51"},"name":"MascheraContoRistorazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.io.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport moduli.*;\n\npublic class MascheraContoRistorazione extends MascheraPerAddebitare\n{\n        // oggetti per la costruzione della finestra\n        Label etich1, etich2, etich3;\n        TextField num_coperti;\n\n        public MascheraContoRistorazione(Frame parent)\n        {\n                super(\"Servizio ristorazione\", \"Stampa del conto\");\n                padre = parent;\n                padre.setEnabled(false);\n                inizExtra();\n                setupPanello();\n                inizializza();\n                pack();\n                setVisible(true);\n        }\n\n        // Travaso dati degli extra nelle strutture dati apposite\n        void inizExtra()\n        {\n\t\t\t\tMessageDialog msg;\n\t\t\t\t\n\t\t\t\telenco_extra = (Principale.db).menuRistorante();\n                if (elenco_extra != null)\n                {\n                \tif (extra.getItemCount() > 0)\n                    \textra.removeAll();\n                    int i=1;\n                    while (i <= elenco_extra.length())\n                    {\n\t                    extra.addItem( (elenco_extra.getBeneServizio(i)).toString() );\n                        i++;\n                    }\n                }\n        }\n\n        // Creazione della finestra\n        void setupPanello()\n        {\n                num_coperti = new TextField(\"\", 4);\n                num_coperti.setEditable(true);\n\n                // creo le label\n                etich1 = new Label(\"Gestione degli addebiti              \");\n                etich1.setFont(ConfigurazioneSistema.font_titolo);\n                etich2 = new Label(\"Scegliere l'extra da addebitare \");\n                etich3 = new Label(\"Numero di coperti \");\n\n                // creo pannello di sinistra\n                this.remove(panel1);\n                panel1 = new Panel();\n                panel1.setLayout(gridbag);\n                Utils.constrain(panel1, etich1, 0, 0, 6, 1);\n                Utils.constrain(panel1, etich2, 0, 1, 6, 1, 10, 0, 0, 0);\n                Utils.constrain(panel1, extra, 0, 2, 6, 4, GridBagConstraints.BOTH,\n                                GridBagConstraints.WEST, 1.0, 1.0, 0, 20, 0, 20);\n\n\t\t\t\t// creo pannello per coperti\n\t\t\t\tthis.remove(panel4);\n\t\t\t\tpanel4 = new Panel();\n\t\t\t\tpanel4.setLayout(gridbag);\n                Utils.constrain(panel4, etich3, 0, 0, 1, 1, 5, 5, 5, 5);\n                Utils.constrain(panel4, num_coperti, 1, 0, 1, 1, GridBagConstraints.NONE,\n                                GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n\n                // aggiungo il pannello appena creato al resto\n                Utils.constrain(this, panel1, 0, 0, 1, 1, GridBagConstraints.VERTICAL,\n                                        GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\n                Utils.constrain(this, panel4, 0, 2, 1, 1, GridBagConstraints.VERTICAL,\n                                        GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\n        }\n\n        // Per la gestione degli eventi della finestra\n        void inizializza()\n        {\n                conferma.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                stampaConto();\n                        }\n                });\n\n                addebita.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                if (!errore())\n                                {\n                                    aggiornaAvideo(true);\n                                }\n                        }\n                });\n\n                deaddebita.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                if (!errore())\n                                {\n                                        aggiornaAvideo(false);\n                                }\n                        }\n                });\n\n                extra.addActionListener(new ActionListener()\n                {\n                        public void actionPerformed(ActionEvent e)\n                        {\n                                if (!errore())\n                                {\n                                        aggiornaAvideo(true);\n                                }\n                        }\n                });\n        }\n\n        // Ritorna false se si sta' cercando di addebitare un extra in\n        // mancanza dei dati necessari per l'addebito: coperti e extra.\n        boolean errore()\n        {\n        \t\tFrame msg;\n        \t\t\n                if ((num_coperti.getText()).equals(\"\"))\n                {\n                        msg = new MessageDialog(this, \"Inserire il numero di coperti!\");\n                        return true;\n                }\n                else if ( !Utils.isIntPos(num_coperti.getText()) )\n                {\n                \t\tmsg = new MessageDialog(this, \"Il numero dei coperti deve essere un numero intero!\");\n                \t\treturn true;\n                }\n                else if (extra.getSelectedIndex() == -1)\n                {\n                        msg = new MessageDialog(this, \"Manca selezione!\");\n                        return true;\n                }\n                else\n                        return false;\n        }\n\n        int posExtraInAddebiti(BeneServizio b)\n        {\n                for (int i = 1; i <= elenco_addebiti.length(); i++)\n                        if ( ((elenco_addebiti.getAddebito(i)).getCodExtra()).equals(b.getCodExtra()) )\n                                return i;\n                return -1;\n        }\n\n        void aggiornaAvideo(boolean addebito)\n        {\n        \t\tFrame msg;\n                int supp[];\n\n                BeneServizio extra_scelto = elenco_extra.getBeneServizio( extra.getSelectedIndex() + 1 );\n                int pos;\n                if ((pos = posExtraInAddebiti(extra_scelto)) < 0 && addebito)\n                {\n                        Addebito a = new Addebito(\"RIST\", extra_scelto.getCodExtra(), 0, 0);\n                        elenco_addebiti.addAddebito( a );\n                        elenco_extra_addebitati.addBeneServizio( extra_scelto );\n\n                        // allungo l'array delle quantita' modificate\n                        supp = new int[elenco_addebiti.length()];\n                        for (int i = 0; i<quantita_mod.length; i++)\n                                supp[i] = quantita_mod[i];\n                        supp[supp.length - 1] = 1;\n                        quantita_mod = supp;\n                        pos = quantita_mod.length;\n                        extra_add.setText(extra.getSelectedItem());\n                        continuaAggiornamento();\n                }\n                else\n                {\n                        if (pos < 0)\n                        {\n                                // sto cercando di togliere da un addebito inesistente\n                                msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\n                        }\n                        else\n                        {\n                                // aggiorno tale array per contenere l'addebito appena effettuato\n                                if (addebito)\n                                {\n                                        quantita_mod[pos - 1]++;\n                                        extra_add.setText(extra.getSelectedItem());\n                                        continuaAggiornamento();\n                                }\n                                else\n                                        if ( quantita_mod[pos - 1] > 0)\n                                        {\n                                                quantita_mod[pos - 1]--;\n                                                extra_add.setText(extra.getSelectedItem());\n                                                continuaAggiornamento();\n                                        }\n                                        else\n\t\t\t                                msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\n                        }\n                }\n        }\n\n        void continuaAggiornamento()\n        {\n                int i = 1;\n                BeneServizio e;\n                float conto = 0;\n                float conto_di_questo_extra;\n                \n                if (addebiti.getItemCount() > 0)\n                        addebiti.removeAll();\n                while ( i <= elenco_addebiti.length() )\n                {\n\t\t\t\t\t\tif (quantita_mod[i-1] != 0)\n\t\t\t\t\t\t{\n\t                        e = elenco_extra_addebitati.getBeneServizio(i);\n\t                        conto_di_questo_extra = quantita_mod[i-1]*e.getPxUnitario();\n    \t                    if ( Integer.parseInt(e.getCodExtra()) >= 40000000 && Integer.parseInt(e.getCodExtra()) < 50000000)\n        \t                        addebiti.addItem(\"S \"+Utils.completaStringa(e.getDescrizione(), 32)+\" \"+(Principale.config).getValuta()+\".\"+(elenco_addebiti.getAddebito(i)).getTotAddebito());\n            \t            else if ( Integer.parseInt(e.getCodExtra()) >= 50000000)\n                \t                addebiti.addItem(\"R \"+Utils.completaStringa(e.getDescrizione(), 32)+\" \"+(Principale.config).getValuta()+\".\"+(elenco_addebiti.getAddebito(i)).getTotAddebito());\n                    \t    else\n                        \t        addebiti.addItem( Utils.completaStringa(e.getDescrizione(),10)+Utils.completaStringa(\" x \"+quantita_mod[i-1], 5)+(Principale.config).getValuta()+\".\"+conto_di_questo_extra );\n\t                        conto = conto + conto_di_questo_extra;\n    \t                }\n   \t                    i++;\n                }\n                totale.setText((Principale.config).getValuta()+\".\"+conto);\n        }\n\n        void stampaConto()\n        {\n\t\t\tif (!errore())\n\t\t\t{\n\t        \twriteFile();\n                dispose();\n                padre.setEnabled(true);\n\t        }\n        }\n\n\t\tprivate void writeFile()\n\t\t{\n\t\t\tFrame msg;\n\t\t\tfloat costo_coperti;\n\t\t\n\t\t\tDataOutputStream outStream;\n\t\t\ttry\n\t\t\t{\t\n\t\t\t\toutStream = new DataOutputStream(new FileOutputStream(\"conto.abg\"));\n\t\t\t}\n\t\t\tcatch (IOException ex)\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this,\"Errore nell'apertura del file del conto\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry\n\t\t\t{\n\t\t\t\toutStream.writeBytes( (Principale.config).getNomeAlbergo()+\"\\n\" );\n\t\t\t\toutStream.writeBytes( \"\\n\" );\n\t\t\t\toutStream.writeBytes( (Principale.config).getRagSoc()+\"\\n\" );\n\t\t\t\toutStream.writeBytes( (Principale.config).getIndirizzoAlb()+\"\\n\" );\n\t\t\t\toutStream.writeBytes( (Principale.config).getComuneAlb()+\"\\n\" );\n\t\t\t\toutStream.writeBytes( (Principale.config).getCittaAlb()+\"\\n\" );\n\t\t\t\toutStream.writeBytes( \"\\n\" );\n\n\t\t\t\tBeneServizio extra;\n\t\t\t\tAddebito a;\t\t\t\t\n\t\t\t\tint num;\n\t\t\t\tString supporto;\n\t\t\t\tfloat conto_totale;\n\t\t\t\t\n\t\t\t\tfor(int i=1; i<=elenco_addebiti.length(); i++)\n\t\t\t\t{\n\t\t\t\t\tif (quantita_mod[i-1] != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = elenco_addebiti.getAddebito(i);\n\t\t\t\t\t\textra = elenco_extra_addebitati.getBeneServizio(i);\n\t\t\t\t\t\tnum = quantita_mod[i-1];\n\t\t\t\t\t\tif ( (extra.getCodExtra()).compareTo(\"40000000\") < 0 )\n\t\t\t\t\t\t\tsupporto = new String(extra.getDescrizione()+\" x \"+num+\" \");\n\t\t\t\t\t\telse if ( (extra.getCodExtra()).compareTo(\"50000000\") < 0 )\n\t\t\t\t\t\t\tsupporto = new String(\"Supplemento per \"+extra.getDescrizione()+\" \");\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tsupporto = new String(\"Riduzione per \"+extra.getDescrizione()+\" \");\n\t\t\t\t\t\twhile (supporto.length() < 52)\n\t\t\t\t\t\t\tsupporto = new String(supporto+\" \");\n\t\t\t\t\t\toutStream.writeBytes(supporto+(Principale.config).getValuta()+\".\"+\n\t\t\t\t\t\t\t\t\t\t\t\tnum*extra.getPxUnitario()+\"\\n\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsupporto = new String(\"Coperto x \"+num_coperti.getText());\n\t\t\t\twhile (supporto.length() < 52)\n\t\t\t\t\tsupporto = new String(supporto+\" \");\n\t\t\t\tcosto_coperti = Integer.parseInt(num_coperti.getText())*(Principale.config).getCoperto();\n\t\t\t\toutStream.writeBytes(supporto+(Principale.config).getValuta()+\".\"+costo_coperti+\"\\n\");\n\t\t\t\toutStream.writeBytes(\"\\n\");\n\t\t\t\tsupporto = new String(\"Totale\");\n\t\t\t\twhile (supporto.length() < 52)\n\t\t\t\t\tsupporto = new String(supporto+\" \");\n\t\t\t\tconto_totale = (Float.valueOf( new String((totale.getText()).substring(2)) )).floatValue()+costo_coperti;\n\t\t\t\toutStream.writeBytes( supporto+(Principale.config).getValuta()+\".\"+conto_totale );\n\t\t\t\toutStream.close();\n\t\t\t}\t\n\t\t\tcatch (IOException ex)\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this,\"Errore nella scrittura del file del conto\");\t\n\t\t\t\treturn;\n\t\t\t}\t\t\t\n\t\t}\t\t\n}"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d52"},"name":"SubPrenotazione.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport common.utility.*;\n\npublic class SubPrenotazione extends Frame\n{\n   Label label;\n   Panel panel0, panel1;\n   Button Inserimento, Modifica, Cancellazione, Ricerca, Annulla ;\n   GridBagLayout gridbag = new GridBagLayout();\n   Frame p = new Frame();\n   static public MascheraRicercaStanza ric_stanza = null;\n   static public RicercaPrenotazione ric_pren = null;\n   \t\n   \n   public SubPrenotazione()\n   {\n      super(\"Prenotazione\");\n      setup();\n      init();\n      pack();\n   }\n\n   void setup()\n   {\n      Immagine  figura = new Immagine(\"camera2.jpg\");\n      Etichetta etich = new Etichetta(\"Prenotazioni.gif\");\n      this.setFont(ConfigurazioneSistema.font_sub);\n      panel0=new Panel();\n      panel0.setLayout(gridbag);\n      panel0.setBackground(Color.white);\n      \n      Utils.constrain(panel0,etich, 0, 0, 2, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n      Utils.constrain(panel0,figura, 2, 0, 10, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.CENTER, 0.5, 1.0,0,0,0,0);\n       \n      panel1 = new Panel();\n      panel1.setLayout(new GridLayout(5,1));\n      Inserimento = new Button(\" Inserimento \");\n      Modifica = new Button(\" Modifica \");\n      Cancellazione = new Button(\" Cancellazione \");\n      Ricerca = new Button(\" Ricerca... \");\n      Annulla = new Button(\" Indietro \");\n      panel1.add(Inserimento);\n      panel1.add(Modifica);\n      panel1.add(Cancellazione);\n\t  panel1.add(Ricerca);\n      panel1.add(Annulla);\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel0, 0, 0, 12, 12,GridBagConstraints.VERTICAL,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n      Utils.constrain(this,panel1, 12, 0, 1, 12,GridBagConstraints.BOTH,\n                     GridBagConstraints.WEST, 1.0, 1.0, 0, 0, 0, 0);\n\n\n   }\n\n   void init()\n   {\n      Annulla.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n            if (Principale.call_list != null)\n            \t(Principale.call_list).dispose();\n            p.setEnabled(true);\n         }\n      });\n      \n      Inserimento.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            insPrenotazione();\n         }\n      });\n      \n      Modifica.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            modPrenotazione();\n         }\n      });\n      \n      Cancellazione.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            cancPrenotazione();\n         }\n      });\n   \t  \n   \t  Ricerca.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            vediPrenotazione();\n         }\n      });\t\t\n   }\n\n\tvoid insPrenotazione()\n\t{\n\t\tthis.setEnabled(false);\n\t\tric_stanza = new MascheraRicercaStanza(\"Ricerca stanze per prenotazioni\",2);\n\t\tric_stanza.setVisible(true);\n\t\tric_stanza.padre = this;\n\t}\n\t\n\tvoid modPrenotazione()\n\t{\n\t\tthis.setEnabled(false);\n\t\tric_pren = new RicercaPrenotazione(\"Ricerca prenotazione per modifica\",1);\n\t\tric_pren.setVisible(true);\n\t\tric_pren.padre = this;\n\t}\n\t\n\tvoid cancPrenotazione()\n\t{\n\t\tthis.setEnabled(false);\n\t\tric_pren = new RicercaPrenotazione(\"Ricerca prenotazione per cancellazione\",2);\n\t\tric_pren.setVisible(true);\n\t\tric_pren.padre = this;\n\t}\n\t\n\tvoid vediPrenotazione()\n\t{\n\t\tthis.setEnabled(false);\n\t\tric_pren = new RicercaPrenotazione(\"Ricerca prenotazione per visualizzazione\",4);\n\t\tric_pren.setVisible(true);\n\t\tric_pren.padre = this;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d53"},"name":"InserisciSoggiornante.java","system":"Albergate","applied_transformations":[],"ground_truth":[],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport moduli.*;\nimport common.utility.*;\nimport common.def.*;\nimport interfacce.*;\nimport java.util.Date;\n\npublic class InserisciSoggiornante extends MascheraSoggiorno\n{\n   Prenotazione prenotazione;\n   int counter_ins = 1;\n   int counter_tot;\n   public InserisciSoggiornante(RicercaPrenotazione parent, Prenotazione p)\n   {\n      super(\"Inserimento dati\", \"Inserisci\", p.getPensionamento(), Flag.ADULTO);\n      padre = parent;\n      padre.setEnabled(false);\n      prenotazione = p;\n      inizializza();\n   }\n\n   public void inizializza()\n   {\n      testo1.setText(prenotazione.getNumStanza());\n      testo1.setEditable(false);\n      testo2.setText(prenotazione.getCognome());\n      testo3.setText(prenotazione.getNome());\n      testo7.setText(prenotazione.getNumTel());\n      testo13.setText(DateUtils.giveStringOfDate(prenotazione.getInizioSogg()));\n      testo13.setEditable(false);\n      testo14.setText(DateUtils.giveStringOfDate(prenotazione.getFineSogg()));\n      testo14.setEditable(false);\n      counter_tot = prenotazione.getNumPers();\n      if (prenotazione.getRichLettoAgg() == Const.SI)\n      \tcounter_tot++;\n      changeTitle(counter_ins, counter_tot);\n      \n      Conferma.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartConferma();\n         }\n      });\n      \n    }\n\n\tvoid startConferma()\n\t{\n\t\tFrame msg;\n\t\t\n        if (!erroriLocale())\n        {\n\t\t\tSoggiornante sogg = readDatiSogg(prenotazione, counter_ins);\n\t\t\tint j;\n          \tif ( (j = (Principale.db).writeSoggiornante(sogg)) == DataBase.OK )\n          \t{\n\t\t\t\tAnnulla.setEnabled(false);\n\t\t\t\tcleanFields();\n\t\t\t\tif (counter_ins == counter_tot)\n\t\t\t\t{\n\t\t\t\t\taggiornaDisp(sogg, Flag.OCCUPATA );\n\t\t\t\t\tdispose();\n\t\t\t\t\tpadre.creaLista(1);\n\t\t\t\t\tpadre.setEnabled(true);\n\t\t\t\t}\n\t\t\t\tcounter_ins++;\n\t\t\t\tchangeTitle(counter_ins, counter_tot);\n           \t}\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \"Problemi con il database: \"+DataBase.strErrore(j));\n       \t}\n\t}\n\t\n\tboolean erroriLocale()\n\t{\n\t\tif (!errori())\n\t\t{\n\t\t\tif (counter_ins == 1)\n\t\t\t{\n\t\t\t\tFrame msg;\n\t\t\t\tif ( (testo2.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitato il cognome! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo3.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitato il nome! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo6.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitato il numero di documento! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo7.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitato il numero telefonico! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo8.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitato l'indirizzo! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo9.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitato il C.A.P.! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo10.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitato il comune! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo11.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitata la citta! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( (testo12.getText()).equals(\"\") )\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Per il primo soggiornante inserito deve essere digitata la nazione! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"}
{"_id":{"$oid":"5ea8c58ced106b1d6ef45d54"},"name":"PrenotazioniScadute.java","system":"Albergate","applied_transformations":[],"ground_truth":[["requirement_raw",{"$oid":"5ea8c58ced106b1d6ef45d1c"}]],"contents":"package interfacce;\nimport java.awt.*;\nimport java.awt.event.*;\nimport common.utility.*;\nimport common.def.*;\nimport java.util.Date;\nimport moduli.*;\n\npublic class PrenotazioniScadute extends Frame \n{  \n\tPrenotazione prenotazione;\n    \n    //Dichiarazioni di variabili\n    Panel panel2, panel3; \n    Label  label3;\n    List lista;\n    Button  Annulla, Scegli;\n    GridBagLayout gridbag = new GridBagLayout();\n\tSubPrenotazione padre = new SubPrenotazione();\n  \tListaPrenotazioni L_pren;\n  \tFrame figlio;  \n    int to_call;\n \tboolean first_time = true;   \n    \n    public PrenotazioniScadute (SubPrenotazione p, ListaPrenotazioni L)\n    {\n        super(\"Prenotazioni in scadenza\");\n        padre = p;\n        L_pren = L;\n        setupPanels();\n        init();\n        pack(); \n    }\n                     \n        void setupPanels()\n        {  \n\t\t\tthis.setFont(ConfigurazioneSistema.font_base);\n            \n            //Creo dei pulsanti e ne disabilito due  \n            Annulla = new Button(\" Fine \");\n            Scegli = new Button(\" Visualizza \");\n            //Creo le etichette\n\t\t\tlabel3 = new Label(\"Elenco delle prenotazioni non confermate                \");\n\t\t\tlabel3.setFont(ConfigurazioneSistema.font_titolo);\n            \n            //Creo il pannello in basso con due pulsanti                  \n            panel2 = new Panel();\n            panel2.setLayout(gridbag);\n            Utils.constrain(panel2, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(panel2, Scegli, 1, 0, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.CENTER, 0.0, 0.0, 5, 5, 5, 5);             \n            \n            //Creo il pannello con la lista dei risultati della ricerca\n            lista = new List(10,false);\n            panel3 = new Panel();\n            panel3.setLayout(gridbag);\n            Utils.constrain(panel3, label3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n            Utils.constrain(panel3, lista, 0, 1, 4, 3, GridBagConstraints.BOTH,\n                        GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);             \n            \n            \n            //Attacco i pannelli al frame\n            this.setLayout(gridbag);\n            Utils.constrain(this, panel3, 0, 0, 4, 10, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\n            Utils.constrain(this, panel2, 0, 10, 4, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5); \n        \tpack();\n        \n        }\n\n    public void init()\n    {\n\t\tif (lista.getItemCount() != 0)\n\t\t\tlista.removeAll();\n\t\tfor(int i = 1; i<=L_pren.length(); i++)\n\t\t\tlista.addItem((L_pren.getPrenotazione(i)).toString());\t\n\t\n\t\n\t\tlista.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tprenotazione = L_pren.getPrenotazione((lista.getSelectedIndexes())[0]+1);\n\t\t\t\tstartControllaPren(prenotazione);\n\t\t\t}\n      \t});\n     \n   \t \tScegli.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n         \t\tif (!noSelection())\n         \t\t{\n         \t\t\tprenotazione = L_pren.getPrenotazione((lista.getSelectedIndexes())[0]+1);\n\t\t\t\t\tstartControllaPren(prenotazione); \n\t\t\t\t}\n\t\t\t}\n      });\n        \n  \t\tAnnulla.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tdispose();\n\t\t\t\tif ( (SubPrenotazione.ric_stanza == null) && (SubPrenotazione.ric_stanza == null) )\n\t\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n      \t});    \t\n\n    } \n\n\tvoid startControllaPren(Prenotazione pren)\n\t{\n\t\tthis.setEnabled(false);\n\t\tStanza stanza = (Principale.db).readStanza(pren.getNumStanza());\n\t\tControllaPrenotazione ctrl = new ControllaPrenotazione(pren, stanza, this);\n\t\tctrl.setVisible(true);\n\t\tctrl.padre = this;\t\n\t}\n\n\tboolean noSelection()\n\t{\n\t\tFrame msg;\n\t\tif (lista.getSelectedIndex() == -1)\n\t\t{\n\t\t\tmsg = new AvvisoDialog(this,\" Selezionare una prenotazione dalla lista e ripremere il tasto\");\n\t\t\treturn true;\n\t\t}\t\n\t\treturn false;\n\t}\n\n}\n"}
